
International_ER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024b08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e4  08024c98  08024c98  00034c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802607c  0802607c  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  0802607c  0802607c  0003607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026084  08026084  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026084  08026084  00036084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026088  08026088  00036088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0802608c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a6bc  200002a0  08026328  000402a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a95c  08026328  0004a95c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000aa969  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a634  00000000  00000000  000eac35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002888  00000000  00000000  000f5270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025d8  00000000  00000000  000f7af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031beb  00000000  00000000  000fa0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004976f  00000000  00000000  0012bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb65b  00000000  00000000  0017542a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260a85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c068  00000000  00000000  00260ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024c80 	.word	0x08024c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	08024c80 	.word	0x08024c80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f016 fadc 	bl	80177b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f016 fad4 	bl	80177b0 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f016 fa7f 	bl	80177b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f016 fa77 	bl	80177b0 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f015 fec6 	bl	8017250 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f018 ff02 	bl	801a404 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f003 f8df 	bl	80047c8 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f019 fa68 	bl	801aaec <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f003 f8d1 	bl	80047c8 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f018 ff5f 	bl	801a4ea <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f003 f8c9 	bl	80047c8 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f019 fe4d 	bl	801b2e4 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f003 f8ba 	bl	80047c8 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f018 ff00 	bl	801a45a <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20005f34 	.word	0x20005f34
 8001668:	40010000 	.word	0x40010000
 800166c:	20006038 	.word	0x20006038
 8001670:	20005ce8 	.word	0x20005ce8
 8001674:	40000400 	.word	0x40000400
 8001678:	20005b24 	.word	0x20005b24
 800167c:	40000800 	.word	0x40000800
 8001680:	20005ca8 	.word	0x20005ca8
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005ae4 	.word	0x20005ae4
 800168c:	40010400 	.word	0x40010400
 8001690:	20005f74 	.word	0x20005f74
 8001694:	40014000 	.word	0x40014000
 8001698:	20005c04 	.word	0x20005c04
 800169c:	40014400 	.word	0x40014400
 80016a0:	20005e4c 	.word	0x20005e4c
 80016a4:	40014800 	.word	0x40014800
 80016a8:	20006158 	.word	0x20006158
 80016ac:	40001800 	.word	0x40001800
 80016b0:	20005dcc 	.word	0x20005dcc
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	20006118 	.word	0x20006118
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f019 f922 	bl	801a960 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f003 f851 	bl	80047c8 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f015 fc70 	bl	8017250 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f018 fde4 	bl	801a540 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20005f34 	.word	0x20005f34
 80019ac:	20006038 	.word	0x20006038
 80019b0:	20005ce8 	.word	0x20005ce8
 80019b4:	20005b24 	.word	0x20005b24
 80019b8:	20005ca8 	.word	0x20005ca8
 80019bc:	20005ae4 	.word	0x20005ae4
 80019c0:	20005f74 	.word	0x20005f74
 80019c4:	20005c04 	.word	0x20005c04
 80019c8:	20005e4c 	.word	0x20005e4c
 80019cc:	20006158 	.word	0x20006158
 80019d0:	20005dcc 	.word	0x20005dcc
 80019d4:	20006118 	.word	0x20006118

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f01d fa37 	bl	801ee5c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f018 fd75 	bl	801a5bc <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fe76 	bl	80047c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f019 fbfa 	bl	801b2e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fe67 	bl	80047c8 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f014 ff43 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f014 ff76 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f014 ff55 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f014 ff2d 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f014 ff60 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f014 ff3f 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f014 ff17 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f014 ff4a 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f014 ff29 	bl	80169e8 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f018 fda1 	bl	801a6e0 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005f34 	.word	0x20005f34
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	20006038 	.word	0x20006038
 8001bb4:	20005ce8 	.word	0x20005ce8
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20005b24 	.word	0x20005b24
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	20005ca8 	.word	0x20005ca8
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005ae4 	.word	0x20005ae4
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	200064b0 	.word	0x200064b0
 8001c70:	200064b4 	.word	0x200064b4
 8001c74:	40000400 	.word	0x40000400
 8001c78:	200064ac 	.word	0x200064ac
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	200064d4 	.word	0x200064d4
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	200064d0 	.word	0x200064d0
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200064d8 	.word	0x200064d8

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	200064b0 	.word	0x200064b0
 8001d84:	200064b4 	.word	0x200064b4
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	200064ac 	.word	0x200064ac
 8001d90:	40000800 	.word	0x40000800
 8001d94:	200064d4 	.word	0x200064d4
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	200064d0 	.word	0x200064d0
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200064d8 	.word	0x200064d8

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f015 fcb4 	bl	80177b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f015 fcac 	bl	80177b0 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f015 fc97 	bl	80177b0 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f015 fc8e 	bl	80177b0 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f015 fc83 	bl	80177b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f015 fc7b 	bl	80177b0 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f015 fc68 	bl	80177b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f015 fc60 	bl	80177b0 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f014 fd37 	bl	80169b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f015 f93a 	bl	8017250 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f015 f8f0 	bl	8017250 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	200002bc 	.word	0x200002bc
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f015 f8b0 	bl	8017250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f015 f87d 	bl	8017250 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f015 f83c 	bl	8017250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f015 f82b 	bl	8017250 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f015 f992 	bl	8017588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f015 f98d 	bl	8017588 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f014 fbc8 	bl	8016a04 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f014 fbc5 	bl	8016a04 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f015 f976 	bl	8017588 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f015 f971 	bl	8017588 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f014 fbac 	bl	8016a04 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f014 fba9 	bl	8016a04 <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f015 f95a 	bl	8017588 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f015 f955 	bl	8017588 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f014 fb90 	bl	8016a04 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f014 fb8d 	bl	8016a04 <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f014 fce6 	bl	8017250 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f014 fcb4 	bl	8017250 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f014 fc81 	bl	8017250 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f014 fc4e 	bl	8017250 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f014 fc0d 	bl	8017250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f014 fbfd 	bl	8017250 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f014 fbb9 	bl	8017250 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f014 fb70 	bl	8017250 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f014 fb2f 	bl	8017250 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f014 fb1f 	bl	8017250 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f014 faed 	bl	8017250 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f014 faba 	bl	8017250 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f014 fa88 	bl	8017250 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f014 fa43 	bl	8017250 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f01c f834 	bl	801ee5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f016 fd04 	bl	8019874 <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fca9 	bl	80047c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f016 ff5d 	bl	8019d54 <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fc92 	bl	80047c8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f017 f83c 	bl	8019f20 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f017 f9fc 	bl	801a404 <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fbd9 	bl	80047c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f018 f95d 	bl	801b2e4 <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 fbca 	bl	80047c8 <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f013 fc9a 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f013 fcb1 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f013 fc89 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f013 fca0 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f013 fc6e 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f013 fc85 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f013 fc5d 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f013 fc74 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f013 fc4c 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f013 fc63 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f013 fc3b 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f013 fc52 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20005f34 	.word	0x20005f34
 800314c:	40010000 	.word	0x40010000
 8003150:	20006038 	.word	0x20006038
 8003154:	20005ce8 	.word	0x20005ce8
 8003158:	40000400 	.word	0x40000400
 800315c:	20005b24 	.word	0x20005b24
 8003160:	40000800 	.word	0x40000800
 8003164:	20005ca8 	.word	0x20005ca8
 8003168:	40000c00 	.word	0x40000c00
 800316c:	20005ef4 	.word	0x20005ef4
 8003170:	40001000 	.word	0x40001000
 8003174:	20006198 	.word	0x20006198
 8003178:	40001400 	.word	0x40001400
 800317c:	20005ae4 	.word	0x20005ae4
 8003180:	40010400 	.word	0x40010400
 8003184:	20005f74 	.word	0x20005f74
 8003188:	40014000 	.word	0x40014000
 800318c:	20005c04 	.word	0x20005c04
 8003190:	40014400 	.word	0x40014400
 8003194:	20005e4c 	.word	0x20005e4c
 8003198:	40014800 	.word	0x40014800
 800319c:	20006158 	.word	0x20006158
 80031a0:	40001800 	.word	0x40001800
 80031a4:	20005dcc 	.word	0x20005dcc
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	20006118 	.word	0x20006118
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f013 fbf3 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f013 fc0a 	bl	80169e8 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f017 f940 	bl	801a45a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f017 f961 	bl	801a4a2 <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20006118 	.word	0x20006118

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f018 f8aa 	bl	801b404 <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 fa87 	bl	80047c8 <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f013 fb6d 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f013 fba0 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f013 fb7f 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f013 fb4f 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f013 fb82 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f013 fb61 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f013 fb31 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f013 fb64 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f013 fb43 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f013 fb13 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f013 fb46 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f013 fb25 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20005e0c 	.word	0x20005e0c
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005ae0 	.word	0x20005ae0
 80033c4:	20006078 	.word	0x20006078
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20005e8c 	.word	0x20005e8c
 80033d0:	20005bc4 	.word	0x20005bc4
 80033d4:	40004800 	.word	0x40004800
 80033d8:	20005d29 	.word	0x20005d29
 80033dc:	20005ff8 	.word	0x20005ff8
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	20005ff4 	.word	0x20005ff4
 80033e8:	20005d2c 	.word	0x20005d2c
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20005ca4 	.word	0x20005ca4
 80033f4:	40011400 	.word	0x40011400
 80033f8:	20005d28 	.word	0x20005d28

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f013 fab3 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f013 fae6 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f013 fac5 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f013 fa95 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f013 fac8 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f013 faa7 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f013 fa77 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f013 faaa 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f013 fa89 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f013 fa59 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f013 fa8c 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f013 fa6b 	bl	80169e8 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f013 fa71 	bl	8016a3c <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f001 f932 	bl	80047c8 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005a80 	.word	0x20005a80
 8003580:	40026088 	.word	0x40026088
 8003584:	20005b64 	.word	0x20005b64
 8003588:	40026028 	.word	0x40026028
 800358c:	20005a20 	.word	0x20005a20
 8003590:	40026040 	.word	0x40026040
 8003594:	200060b8 	.word	0x200060b8
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f018 f86b 	bl	801b67c <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20005e0c 	.word	0x20005e0c

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f018 f861 	bl	801b67c <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20006078 	.word	0x20006078

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f018 f857 	bl	801b67c <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20005bc4 	.word	0x20005bc4

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f018 f84d 	bl	801b67c <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20005ff8 	.word	0x20005ff8

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f018 f843 	bl	801b67c <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20005d2c 	.word	0x20005d2c

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f018 f839 	bl	801b67c <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20005fb4 	.word	0x20005fb4

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f01b fc13 	bl	801ee5c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f012 f9f3 	bl	8015aa0 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f001 f882 	bl	80047c8 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f012 facc 	bl	8015c98 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f013 f94c 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f013 f965 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f012 fdff 	bl	8016324 <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f013 f93f 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f013 f958 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f012 fdf2 	bl	8016324 <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f013 f92f 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f013 f948 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f012 fde2 	bl	8016324 <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f013 f922 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f013 f93b 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f012 fdd5 	bl	8016324 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f012 fb6c 	bl	8015e58 <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000a160 	.word	0x2000a160
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f012 fc76 	bl	8016096 <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f012 fb66 	bl	8015ee0 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 ffd5 	bl	80047c8 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f012 fc2c 	bl	8016096 <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f012 fb21 	bl	8015ee0 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 ff90 	bl	80047c8 <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f012 fb09 	bl	8015ee0 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 ff78 	bl	80047c8 <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000a160 	.word	0x2000a160
 8003aa0:	2000a75c 	.word	0x2000a75c
 8003aa4:	20006ae8 	.word	0x20006ae8

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006a54 	.word	0x20006a54

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f012 ff04 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f012 ff1b 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f012 fef8 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f012 ff0f 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f012 fee7 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f012 fefe 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f012 fedb 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f012 fef2 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f012 fece 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f012 fee5 	bl	80169e8 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f012 fec2 	bl	80169b0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f012 fed9 	bl	80169e8 <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f013 fdd4 	bl	80177e4 <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fdc1 	bl	80047c8 <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20006bb8 	.word	0x20006bb8
 8003c54:	40005400 	.word	0x40005400
 8003c58:	20006c14 	.word	0x20006c14
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f012 fe66 	bl	8016a3c <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fd27 	bl	80047c8 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f012 fe0a 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f012 fe3d 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f012 fe1c 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f012 fdf4 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f012 fe27 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f012 fe06 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f012 fde2 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f012 fe15 	bl	8016a20 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f012 fdf4 	bl	80169e8 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f012 fdb2 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f012 fdc9 	bl	80169e8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f012 fda6 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f012 fdbd 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f012 fd95 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f012 fdac 	bl	80169e8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f012 fd89 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f012 fda0 	bl	80169e8 <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f012 fd7c 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f012 fd93 	bl	80169e8 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f012 fd70 	bl	80169b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f012 fd87 	bl	80169e8 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f013 fc82 	bl	80177e4 <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fc6f 	bl	80047c8 <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	20006bb8 	.word	0x20006bb8
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	20006c14 	.word	0x20006c14
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f013 feeb 	bl	8017cf8 <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20006c14 	.word	0x20006c14

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f014 f84e 	bl	8017fd2 <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20006c14 	.word	0x20006c14

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f013 fed7 	bl	8017cf8 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20006804 	.word	0x20006804

08003f54 <LaserUpdate>:
 * Function Arguments	: *laser		, pointer to structure Laser_t
 * 						  channel_no	, ADC channel
 * Function Return		: None
 * Function Example		: LaserUpdate(&lsr1, 0);
 */
void LaserUpdate(Laser_t *laser, uint8_t channel_no){
 8003f54:	b4b0      	push	{r4, r5, r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
	laser->rawCu+=adc.ADC_value[channel_no];
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <LaserUpdate+0x44>)
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	889b      	ldrh	r3, [r3, #4]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	1884      	adds	r4, r0, r2
 8003f7a:	eb41 0503 	adc.w	r5, r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	e9c3 4500 	strd	r4, r5, [r3]
	laser->cnt++;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bcb0      	pop	{r4, r5, r7}
 8003f96:	4770      	bx	lr
 8003f98:	200063d0 	.word	0x200063d0

08003f9c <DMA2_Stream2_IRQHandler>:



void DMA2_Stream2_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	LaserUpdate(&lsrx, 0);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4806      	ldr	r0, [pc, #24]	; (8003fbc <DMA2_Stream2_IRQHandler+0x20>)
 8003fa4:	f7ff ffd6 	bl	8003f54 <LaserUpdate>
	LaserUpdate(&lsry, 1);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <DMA2_Stream2_IRQHandler+0x24>)
 8003fac:	f7ff ffd2 	bl	8003f54 <LaserUpdate>

	HAL_DMA_IRQHandler(&hdma_adc1);
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <DMA2_Stream2_IRQHandler+0x28>)
 8003fb2:	f012 fec9 	bl	8016d48 <HAL_DMA_IRQHandler>

}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20006cf8 	.word	0x20006cf8
 8003fc0:	2000a2c0 	.word	0x2000a2c0
 8003fc4:	200063ec 	.word	0x200063ec

08003fc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0a4      	sub	sp, #144	; 0x90
 8003fcc:	af00      	add	r7, sp, #0
	set();
 8003fce:	f008 fa31 	bl	800c434 <set>
	const osThreadAttr_t MainTask_attributes =
 8003fd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f01a ff3e 	bl	801ee5c <memset>
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <main+0xe0>)
 8003fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fec:	2318      	movs	r3, #24
 8003fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f01a ff2e 	bl	801ee5c <memset>
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <main+0xe4>)
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
 8004004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400a:	2318      	movs	r3, #24
 800400c:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 800400e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f01a ff20 	bl	801ee5c <memset>
 800401c:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <main+0xe8>)
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
 8004026:	2318      	movs	r3, #24
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 800402a:	463b      	mov	r3, r7
 800402c:	2224      	movs	r2, #36	; 0x24
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f01a ff13 	bl	801ee5c <memset>
 8004036:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <main+0xec>)
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	2318      	movs	r3, #24
 8004042:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8004044:	f018 f97a 	bl	801c33c <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800404c:	461a      	mov	r2, r3
 800404e:	2100      	movs	r1, #0
 8004050:	4819      	ldr	r0, [pc, #100]	; (80040b8 <main+0xf0>)
 8004052:	f018 f9bd 	bl	801c3d0 <osThreadNew>
 8004056:	4603      	mov	r3, r0
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <main+0xf4>)
 800405a:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 800405c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004060:	461a      	mov	r2, r3
 8004062:	2100      	movs	r1, #0
 8004064:	4816      	ldr	r0, [pc, #88]	; (80040c0 <main+0xf8>)
 8004066:	f018 f9b3 	bl	801c3d0 <osThreadNew>
 800406a:	4603      	mov	r3, r0
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <main+0xfc>)
 800406e:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8004070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004074:	461a      	mov	r2, r3
 8004076:	2100      	movs	r1, #0
 8004078:	4813      	ldr	r0, [pc, #76]	; (80040c8 <main+0x100>)
 800407a:	f018 f9a9 	bl	801c3d0 <osThreadNew>
 800407e:	4603      	mov	r3, r0
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <main+0x104>)
 8004082:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004084:	463b      	mov	r3, r7
 8004086:	461a      	mov	r2, r3
 8004088:	2100      	movs	r1, #0
 800408a:	4811      	ldr	r0, [pc, #68]	; (80040d0 <main+0x108>)
 800408c:	f018 f9a0 	bl	801c3d0 <osThreadNew>
 8004090:	4603      	mov	r3, r0
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <main+0x10c>)
 8004094:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <main+0x110>)
 8004098:	7853      	ldrb	r3, [r2, #1]
 800409a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409e:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 80040a0:	f018 f970 	bl	801c384 <osKernelStart>

	while (1) {
 80040a4:	e7fe      	b.n	80040a4 <main+0xdc>
 80040a6:	bf00      	nop
 80040a8:	08024c98 	.word	0x08024c98
 80040ac:	08024ca4 	.word	0x08024ca4
 80040b0:	08024cb4 	.word	0x08024cb4
 80040b4:	08024cc0 	.word	0x08024cc0
 80040b8:	08004209 	.word	0x08004209
 80040bc:	200079dc 	.word	0x200079dc
 80040c0:	08004349 	.word	0x08004349
 80040c4:	200073bc 	.word	0x200073bc
 80040c8:	08004555 	.word	0x08004555
 80040cc:	2000a0f4 	.word	0x2000a0f4
 80040d0:	0800462d 	.word	0x0800462d
 80040d4:	20009fe8 	.word	0x20009fe8
 80040d8:	40020814 	.word	0x40020814

080040dc <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	b093      	sub	sp, #76	; 0x4c
 80040e2:	af0c      	add	r7, sp, #48	; 0x30

	static int counter = 0;
	counter++;
 80040e4:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 80040ec:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 80040ee:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d160      	bne.n	80041bc <TIM6_DAC_IRQHandler+0xe0>
	{
		led1 = !led1;
 80040fa:	4b38      	ldr	r3, [pc, #224]	; (80041dc <TIM6_DAC_IRQHandler+0x100>)
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4a35      	ldr	r2, [pc, #212]	; (80041dc <TIM6_DAC_IRQHandler+0x100>)
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf0c      	ite	eq
 800410a:	2301      	moveq	r3, #1
 800410c:	2300      	movne	r3, #0
 800410e:	b2d9      	uxtb	r1, r3
 8004110:	7853      	ldrb	r3, [r2, #1]
 8004112:	f361 1345 	bfi	r3, r1, #5, #1
 8004116:	7053      	strb	r3, [r2, #1]
		counter = 0;
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}

		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fa10 	bl	8000548 <__aeabi_f2d>
 8004128:	e9c7 0104 	strd	r0, r1, [r7, #16]
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fa09 	bl	8000548 <__aeabi_f2d>
 8004136:	4680      	mov	r8, r0
 8004138:	4689      	mov	r9, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc fa02 	bl	8000548 <__aeabi_f2d>
 8004144:	4682      	mov	sl, r0
 8004146:	468b      	mov	fp, r1
 8004148:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <TIM6_DAC_IRQHandler+0x108>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f9fb 	bl	8000548 <__aeabi_f2d>
 8004152:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004156:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <TIM6_DAC_IRQHandler+0x10c>)
 8004158:	681e      	ldr	r6, [r3, #0]
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <TIM6_DAC_IRQHandler+0x110>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	607b      	str	r3, [r7, #4]
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 8004160:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <TIM6_DAC_IRQHandler+0x114>)
 8004162:	69db      	ldr	r3, [r3, #28]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc f9ef 	bl	8000548 <__aeabi_f2d>
 800416a:	4604      	mov	r4, r0
 800416c:	460d      	mov	r5, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <TIM6_DAC_IRQHandler+0x118>)
 8004170:	69db      	ldr	r3, [r3, #28]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc f9e8 	bl	8000548 <__aeabi_f2d>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004180:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	9307      	str	r3, [sp, #28]
 8004188:	9606      	str	r6, [sp, #24]
 800418a:	ed97 7b02 	vldr	d7, [r7, #8]
 800418e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004192:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004196:	e9cd 8900 	strd	r8, r9, [sp]
 800419a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800419e:	4916      	ldr	r1, [pc, #88]	; (80041f8 <TIM6_DAC_IRQHandler+0x11c>)
 80041a0:	4816      	ldr	r0, [pc, #88]	; (80041fc <TIM6_DAC_IRQHandler+0x120>)
 80041a2:	f01b fe17 	bl	801fdd4 <siprintf>
//		sprintf((char*) debug, "Left: %.2f Right: %.2f VESC: %.2f\n",
//				vesc1.vel, vesc2.vel, vesc_speed);
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 80041a6:	4815      	ldr	r0, [pc, #84]	; (80041fc <TIM6_DAC_IRQHandler+0x120>)
 80041a8:	f7fc f812 	bl	80001d0 <strlen>
 80041ac:	4603      	mov	r3, r0
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041b4:	4911      	ldr	r1, [pc, #68]	; (80041fc <TIM6_DAC_IRQHandler+0x120>)
 80041b6:	4812      	ldr	r0, [pc, #72]	; (8004200 <TIM6_DAC_IRQHandler+0x124>)
 80041b8:	f017 f971 	bl	801b49e <HAL_UART_Transmit>
//
//	flywheelPID(vesc_speed);
//	flywheelAct();

//	enq();
	PathPlan(&pp);
 80041bc:	4808      	ldr	r0, [pc, #32]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 80041be:	f002 f91f 	bl	8006400 <PathPlan>
	CheckPickEnc();
 80041c2:	f009 fa03 	bl	800d5cc <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 80041c6:	480f      	ldr	r0, [pc, #60]	; (8004204 <TIM6_DAC_IRQHandler+0x128>)
 80041c8:	f016 fac2 	bl	801a750 <HAL_TIM_IRQHandler>

}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	200002c0 	.word	0x200002c0
 80041dc:	40020814 	.word	0x40020814
 80041e0:	20006d4c 	.word	0x20006d4c
 80041e4:	2000749c 	.word	0x2000749c
 80041e8:	20006664 	.word	0x20006664
 80041ec:	20006c10 	.word	0x20006c10
 80041f0:	20007730 	.word	0x20007730
 80041f4:	20009600 	.word	0x20009600
 80041f8:	08024cd0 	.word	0x08024cd0
 80041fc:	200075a8 	.word	0x200075a8
 8004200:	20005d2c 	.word	0x20005d2c
 8004204:	20005ef4 	.word	0x20005ef4

08004208 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004210:	f008 fc40 	bl	800ca94 <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <MainTask+0x128>)
 8004216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d110      	bne.n	800423e <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 800421c:	bf00      	nop
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <MainTask+0x128>)
 8004220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d0fb      	beq.n	800421e <MainTask+0x16>
			mode++;
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <MainTask+0x12c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	4a41      	ldr	r2, [pc, #260]	; (8004334 <MainTask+0x12c>)
 800422e:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <MainTask+0x12c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	dd02      	ble.n	800423e <MainTask+0x36>
				mode = 0;
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <MainTask+0x12c>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <MainTask+0x128>)
 8004240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d127      	bne.n	8004298 <MainTask+0x90>
		{
			while(ps4.button == L1);
 8004248:	bf00      	nop
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <MainTask+0x128>)
 800424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d0fa      	beq.n	800424a <MainTask+0x42>
			vesc_speed += 0.05;
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <MainTask+0x130>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f975 	bl	8000548 <__aeabi_f2d>
 800425e:	a332      	add	r3, pc, #200	; (adr r3, 8004328 <MainTask+0x120>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f812 	bl	800028c <__adddf3>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f7fc fcba 	bl	8000be8 <__aeabi_d2f>
 8004274:	4603      	mov	r3, r0
 8004276:	4a30      	ldr	r2, [pc, #192]	; (8004338 <MainTask+0x130>)
 8004278:	6013      	str	r3, [r2, #0]
			vesc_duty += 5;
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <MainTask+0x134>)
 800427c:	edd3 7a00 	vldr	s15, [r3]
 8004280:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004288:	4b2c      	ldr	r3, [pc, #176]	; (800433c <MainTask+0x134>)
 800428a:	edc3 7a00 	vstr	s15, [r3]
			manual_adjust++;
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <MainTask+0x138>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <MainTask+0x138>)
 8004296:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, 50);
//			ServoMovePulse(&servo_ring_new, -50);
		}

		if(ps4.button == R1)
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <MainTask+0x128>)
 800429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a0:	d127      	bne.n	80042f2 <MainTask+0xea>
		{
			while(ps4.button == R1);
 80042a2:	bf00      	nop
 80042a4:	4b22      	ldr	r3, [pc, #136]	; (8004330 <MainTask+0x128>)
 80042a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ac:	d0fa      	beq.n	80042a4 <MainTask+0x9c>
			vesc_speed -= 0.05;
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <MainTask+0x130>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f948 	bl	8000548 <__aeabi_f2d>
 80042b8:	a31b      	add	r3, pc, #108	; (adr r3, 8004328 <MainTask+0x120>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fb ffe3 	bl	8000288 <__aeabi_dsub>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc fc8d 	bl	8000be8 <__aeabi_d2f>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <MainTask+0x130>)
 80042d2:	6013      	str	r3, [r2, #0]
			vesc_duty -= 5;
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <MainTask+0x134>)
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80042de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <MainTask+0x134>)
 80042e4:	edc3 7a00 	vstr	s15, [r3]
			manual_adjust--;
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <MainTask+0x138>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a14      	ldr	r2, [pc, #80]	; (8004340 <MainTask+0x138>)
 80042f0:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, -50);
//			ServoMovePulse(&servo_ring_new, 50);
		}

		switch (mode)
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <MainTask+0x12c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d00f      	beq.n	800431a <MainTask+0x112>
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	dc8a      	bgt.n	8004214 <MainTask+0xc>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <MainTask+0x100>
 8004302:	2b01      	cmp	r3, #1
 8004304:	d003      	beq.n	800430e <MainTask+0x106>
 8004306:	e00b      	b.n	8004320 <MainTask+0x118>
		{
			case NORMAL:
				NormalControl();
 8004308:	f008 fcba 	bl	800cc80 <NormalControl>
			break;
 800430c:	e008      	b.n	8004320 <MainTask+0x118>

			case AUTO:
				Auto();
 800430e:	f008 ff33 	bl	800d178 <Auto>
				LidarControl(&lidar);
 8004312:	480c      	ldr	r0, [pc, #48]	; (8004344 <MainTask+0x13c>)
 8004314:	f010 ff4a 	bl	80151ac <LidarControl>
			break;
 8004318:	e002      	b.n	8004320 <MainTask+0x118>

			case TUNE:
				tune();
 800431a:	f009 fe7d 	bl	800e018 <tune>
			break;
 800431e:	bf00      	nop
		if (ps4.button == SELECT)
 8004320:	e778      	b.n	8004214 <MainTask+0xc>
 8004322:	bf00      	nop
 8004324:	f3af 8000 	nop.w
 8004328:	9999999a 	.word	0x9999999a
 800432c:	3fa99999 	.word	0x3fa99999
 8004330:	2000a244 	.word	0x2000a244
 8004334:	20009458 	.word	0x20009458
 8004338:	200065c0 	.word	0x200065c0
 800433c:	2000749c 	.word	0x2000749c
 8004340:	200075a0 	.word	0x200075a0
 8004344:	200091a8 	.word	0x200091a8

08004348 <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
//			{
//				pitch_stop;
//			}
//		}

		switch(go_type_3)
 8004350:	4b6e      	ldr	r3, [pc, #440]	; (800450c <NaviTask+0x1c4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d823      	bhi.n	80043a0 <NaviTask+0x58>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <NaviTask+0x18>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004371 	.word	0x08004371
 8004364:	0800437d 	.word	0x0800437d
 8004368:	08004389 	.word	0x08004389
 800436c:	08004395 	.word	0x08004395
		{
			case 0:
				led5_off;
 8004370:	4a67      	ldr	r2, [pc, #412]	; (8004510 <NaviTask+0x1c8>)
 8004372:	7e13      	ldrb	r3, [r2, #24]
 8004374:	f36f 13c7 	bfc	r3, #7, #1
 8004378:	7613      	strb	r3, [r2, #24]
				break;
 800437a:	e012      	b.n	80043a2 <NaviTask+0x5a>

			case 1:
				led5_on;
 800437c:	4a64      	ldr	r2, [pc, #400]	; (8004510 <NaviTask+0x1c8>)
 800437e:	7e13      	ldrb	r3, [r2, #24]
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	7613      	strb	r3, [r2, #24]
				break;
 8004386:	e00c      	b.n	80043a2 <NaviTask+0x5a>

			case 2:
				led5_off;
 8004388:	4a61      	ldr	r2, [pc, #388]	; (8004510 <NaviTask+0x1c8>)
 800438a:	7e13      	ldrb	r3, [r2, #24]
 800438c:	f36f 13c7 	bfc	r3, #7, #1
 8004390:	7613      	strb	r3, [r2, #24]
				break;
 8004392:	e006      	b.n	80043a2 <NaviTask+0x5a>

			case 3:
				led5_on;
 8004394:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <NaviTask+0x1c8>)
 8004396:	7e13      	ldrb	r3, [r2, #24]
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	7613      	strb	r3, [r2, #24]
				break;
 800439e:	e000      	b.n	80043a2 <NaviTask+0x5a>

			default:
				break;
 80043a0:	bf00      	nop
		}

		if(!load_start && !set_pick_enc && !reload)
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <NaviTask+0x1cc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d117      	bne.n	80043da <NaviTask+0x92>
 80043aa:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <NaviTask+0x1d0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d113      	bne.n	80043da <NaviTask+0x92>
 80043b2:	4b5a      	ldr	r3, [pc, #360]	; (800451c <NaviTask+0x1d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <NaviTask+0x92>
			pick_manual(ps4.joyR_y * 14000);
 80043ba:	4b59      	ldr	r3, [pc, #356]	; (8004520 <NaviTask+0x1d8>)
 80043bc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043c0:	eef1 7a67 	vneg.f32	s15, s15
 80043c4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004524 <NaviTask+0x1dc>
 80043c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d0:	ee17 1a90 	vmov	r1, s15
 80043d4:	4854      	ldr	r0, [pc, #336]	; (8004528 <NaviTask+0x1e0>)
 80043d6:	f7fc fed8 	bl	800118a <WriteBDC>

		if(vesc_duty > 0.0)
 80043da:	4b54      	ldr	r3, [pc, #336]	; (800452c <NaviTask+0x1e4>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	dd03      	ble.n	80043f2 <NaviTask+0xaa>
			vesc_start = 1;
 80043ea:	4b51      	ldr	r3, [pc, #324]	; (8004530 <NaviTask+0x1e8>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <NaviTask+0xb0>
		else
			vesc_start = 0;
 80043f2:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <NaviTask+0x1e8>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

		if(vesc_start)
 80043f8:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <NaviTask+0x1e8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d03a      	beq.n	8004476 <NaviTask+0x12e>
		{
			if(vesc_duty == type1Duty)
 8004400:	4b4a      	ldr	r3, [pc, #296]	; (800452c <NaviTask+0x1e4>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004534 <NaviTask+0x1ec>
 800440a:	eef4 7a47 	vcmp.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d110      	bne.n	8004436 <NaviTask+0xee>
			{
				VESCRPM(vesc_duty, &vesc1);
 8004414:	4b45      	ldr	r3, [pc, #276]	; (800452c <NaviTask+0x1e4>)
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	4847      	ldr	r0, [pc, #284]	; (8004538 <NaviTask+0x1f0>)
 800441c:	eeb0 0a67 	vmov.f32	s0, s15
 8004420:	f00a ff26 	bl	800f270 <VESCRPM>
				VESCRPM(vesc_duty, &vesc2);
 8004424:	4b41      	ldr	r3, [pc, #260]	; (800452c <NaviTask+0x1e4>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	4844      	ldr	r0, [pc, #272]	; (800453c <NaviTask+0x1f4>)
 800442c:	eeb0 0a67 	vmov.f32	s0, s15
 8004430:	f00a ff1e 	bl	800f270 <VESCRPM>
 8004434:	e01f      	b.n	8004476 <NaviTask+0x12e>
			}
			else
			{
				VESCRPM(vesc_duty + extra_rpm, &vesc1);
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <NaviTask+0x1f8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004442:	4b3a      	ldr	r3, [pc, #232]	; (800452c <NaviTask+0x1e4>)
 8004444:	edd3 7a00 	vldr	s15, [r3]
 8004448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444c:	483a      	ldr	r0, [pc, #232]	; (8004538 <NaviTask+0x1f0>)
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	f00a ff0d 	bl	800f270 <VESCRPM>
				VESCRPM(vesc_duty + extra_rpm, &vesc2);
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <NaviTask+0x1f8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004462:	4b32      	ldr	r3, [pc, #200]	; (800452c <NaviTask+0x1e4>)
 8004464:	edd3 7a00 	vldr	s15, [r3]
 8004468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446c:	4833      	ldr	r0, [pc, #204]	; (800453c <NaviTask+0x1f4>)
 800446e:	eeb0 0a67 	vmov.f32	s0, s15
 8004472:	f00a fefd 	bl	800f270 <VESCRPM>
//		if(stick_fence && MODN.x_vel == 0.0 && MODN.y_vel == 0.0 && !In_LS_Shot_1 && !In_LS_Shot_2)
//			RNSVelocity(0.25, 0.25, 0.25, 0.25, &rns);
//		else if(stick_fence && In_LS_Shot_1 && In_LS_Shot_2)
//			RNSStop(&rns);

		enq();
 8004476:	f009 fda3 	bl	800dfc0 <enq>
		pick_enc = QEIRead(QEI1);
 800447a:	2001      	movs	r0, #1
 800447c:	f7fd fc26 	bl	8001ccc <QEIRead>
 8004480:	4603      	mov	r3, r0
 8004482:	4a30      	ldr	r2, [pc, #192]	; (8004544 <NaviTask+0x1fc>)
 8004484:	6013      	str	r3, [r2, #0]

		if(!pp.pp_start && !vel_adjust && !pp.lsr_start)
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <NaviTask+0x200>)
 8004488:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <NaviTask+0x170>
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <NaviTask+0x204>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <NaviTask+0x170>
 800449e:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <NaviTask+0x200>)
 80044a0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <NaviTask+0x170>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 80044ae:	4928      	ldr	r1, [pc, #160]	; (8004550 <NaviTask+0x208>)
 80044b0:	481b      	ldr	r0, [pc, #108]	; (8004520 <NaviTask+0x1d8>)
 80044b2:	f000 f9ed 	bl	8004890 <realMODN>
 80044b6:	e027      	b.n	8004508 <NaviTask+0x1c0>
		}
		else if(pp.pp_start || pp.lsr_start)
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <NaviTask+0x200>)
 80044ba:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <NaviTask+0x192>
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <NaviTask+0x200>)
 80044ca:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f43f af3b 	beq.w	8004350 <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <NaviTask+0x200>)
 80044dc:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <NaviTask+0x200>)
 80044e2:	ed93 7abf 	vldr	s14, [r3, #764]	; 0x2fc
 80044e6:	4b18      	ldr	r3, [pc, #96]	; (8004548 <NaviTask+0x200>)
 80044e8:	edd3 6ac0 	vldr	s13, [r3, #768]	; 0x300
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <NaviTask+0x200>)
 80044ee:	ed93 6ac1 	vldr	s12, [r3, #772]	; 0x304
 80044f2:	4817      	ldr	r0, [pc, #92]	; (8004550 <NaviTask+0x208>)
 80044f4:	eef0 1a46 	vmov.f32	s3, s12
 80044f8:	eeb0 1a66 	vmov.f32	s2, s13
 80044fc:	eef0 0a47 	vmov.f32	s1, s14
 8004500:	eeb0 0a67 	vmov.f32	s0, s15
 8004504:	f006 fd60 	bl	800afc8 <RNSVelocity>
		switch(go_type_3)
 8004508:	e722      	b.n	8004350 <NaviTask+0x8>
 800450a:	bf00      	nop
 800450c:	20006d48 	.word	0x20006d48
 8004510:	200097dc 	.word	0x200097dc
 8004514:	20007464 	.word	0x20007464
 8004518:	200078a4 	.word	0x200078a4
 800451c:	200078c0 	.word	0x200078c0
 8004520:	2000a244 	.word	0x2000a244
 8004524:	465ac000 	.word	0x465ac000
 8004528:	20007880 	.word	0x20007880
 800452c:	2000749c 	.word	0x2000749c
 8004530:	20006a50 	.word	0x20006a50
 8004534:	445e8000 	.word	0x445e8000
 8004538:	20006b34 	.word	0x20006b34
 800453c:	20009ba4 	.word	0x20009ba4
 8004540:	20006664 	.word	0x20006664
 8004544:	20006c10 	.word	0x20006c10
 8004548:	20006d4c 	.word	0x20006d4c
 800454c:	2000919c 	.word	0x2000919c
 8004550:	2000907c 	.word	0x2000907c

08004554 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 800455c:	f009 fcae 	bl	800debc <Checking>
//		else
//		{
//			led4_off;
//		}

		if(blue)
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <CheckingTask+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <CheckingTask+0x20>
		{
			led4_on;
 8004568:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <CheckingTask+0xc0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
 8004572:	e003      	b.n	800457c <CheckingTask+0x28>
		}
		else
		{
			led4_off;
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <CheckingTask+0xc0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
//		else
//		{
//			led5_off;
//		}

		if(In_Load)
 800457c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004580:	4825      	ldr	r0, [pc, #148]	; (8004618 <CheckingTask+0xc4>)
 8004582:	f013 f8fd 	bl	8017780 <HAL_GPIO_ReadPin>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <CheckingTask+0x44>
		{
			led6_on;
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <CheckingTask+0xc8>)
 800458e:	7e13      	ldrb	r3, [r2, #24]
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	7613      	strb	r3, [r2, #24]
 8004596:	e004      	b.n	80045a2 <CheckingTask+0x4e>
		}
		else
		{
			led6_off;
 8004598:	4a20      	ldr	r2, [pc, #128]	; (800461c <CheckingTask+0xc8>)
 800459a:	7e13      	ldrb	r3, [r2, #24]
 800459c:	f36f 1386 	bfc	r3, #6, #1
 80045a0:	7613      	strb	r3, [r2, #24]
		}

		if(In_Pick)
 80045a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a6:	481c      	ldr	r0, [pc, #112]	; (8004618 <CheckingTask+0xc4>)
 80045a8:	f013 f8ea 	bl	8017780 <HAL_GPIO_ReadPin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <CheckingTask+0x6a>
		{
			led7_on;
 80045b2:	4b18      	ldr	r3, [pc, #96]	; (8004614 <CheckingTask+0xc0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80045bc:	e003      	b.n	80045c6 <CheckingTask+0x72>
		}
		else
		{
			led7_off;
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <CheckingTask+0xc0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(led_enb)
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <CheckingTask+0xcc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0c6      	beq.n	800455c <CheckingTask+0x8>
		{
			if (HAL_GetTick() - before_shot >= shot_prd)
 80045ce:	f011 fa5b 	bl	8015a88 <HAL_GetTick>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <CheckingTask+0xd0>)
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <CheckingTask+0xd4>)
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	4293      	cmp	r3, r2
 80045e0:	d3bc      	bcc.n	800455c <CheckingTask+0x8>
			{
				led8 = !led8;
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <CheckingTask+0xc8>)
 80045e4:	7e1b      	ldrb	r3, [r3, #24]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2d9      	uxtb	r1, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <CheckingTask+0xc8>)
 80045f8:	7e13      	ldrb	r3, [r2, #24]
 80045fa:	f361 1345 	bfi	r3, r1, #5, #1
 80045fe:	7613      	strb	r3, [r2, #24]
				before_shot = HAL_GetTick();
 8004600:	f011 fa42 	bl	8015a88 <HAL_GetTick>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <CheckingTask+0xd0>)
 800460a:	601a      	str	r2, [r3, #0]
		Checking();
 800460c:	e7a6      	b.n	800455c <CheckingTask+0x8>
 800460e:	bf00      	nop
 8004610:	20006a4c 	.word	0x20006a4c
 8004614:	20005ca8 	.word	0x20005ca8
 8004618:	40021000 	.word	0x40021000
 800461c:	200097dc 	.word	0x200097dc
 8004620:	2000a858 	.word	0x2000a858
 8004624:	20006b04 	.word	0x20006b04
 8004628:	2000a5cc 	.word	0x2000a5cc

0800462c <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 800462c:	b5b0      	push	{r4, r5, r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

	while (1) {

		if(servo_enb)
 8004634:	4b4b      	ldr	r3, [pc, #300]	; (8004764 <EmergencyTask+0x138>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d03b      	beq.n	80046b4 <EmergencyTask+0x88>
		{
			for(int i = 0; i < 4; i++)
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	e028      	b.n	8004694 <EmergencyTask+0x68>
			{
				if(ps4.button == SQUARE)
 8004642:	4b49      	ldr	r3, [pc, #292]	; (8004768 <EmergencyTask+0x13c>)
 8004644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d106      	bne.n	800465a <EmergencyTask+0x2e>
				{
					while(ps4.button == SQUARE);
 800464c:	bf00      	nop
 800464e:	4b46      	ldr	r3, [pc, #280]	; (8004768 <EmergencyTask+0x13c>)
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	d0fa      	beq.n	800464e <EmergencyTask+0x22>
					break;
 8004658:	e01f      	b.n	800469a <EmergencyTask+0x6e>
				}

				load_adjust_servo;
 800465a:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 800465e:	4843      	ldr	r0, [pc, #268]	; (800476c <EmergencyTask+0x140>)
 8004660:	f007 f8be 	bl	800b7e0 <ServoSetPulse>
 8004664:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004668:	4841      	ldr	r0, [pc, #260]	; (8004770 <EmergencyTask+0x144>)
 800466a:	f007 f8b9 	bl	800b7e0 <ServoSetPulse>
				osDelay(100);
 800466e:	2064      	movs	r0, #100	; 0x64
 8004670:	f017 ff40 	bl	801c4f4 <osDelay>
				close_servo;
 8004674:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8004678:	483c      	ldr	r0, [pc, #240]	; (800476c <EmergencyTask+0x140>)
 800467a:	f007 f8b1 	bl	800b7e0 <ServoSetPulse>
 800467e:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8004682:	483b      	ldr	r0, [pc, #236]	; (8004770 <EmergencyTask+0x144>)
 8004684:	f007 f8ac 	bl	800b7e0 <ServoSetPulse>
				osDelay(100);
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	f017 ff33 	bl	801c4f4 <osDelay>
			for(int i = 0; i < 4; i++)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	3301      	adds	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	2b03      	cmp	r3, #3
 8004698:	ddd3      	ble.n	8004642 <EmergencyTask+0x16>
	//			{
	//				adjust_servo;
	//				break;
	//			}
			}
			adjust_servo;
 800469a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800469e:	4833      	ldr	r0, [pc, #204]	; (800476c <EmergencyTask+0x140>)
 80046a0:	f007 f89e 	bl	800b7e0 <ServoSetPulse>
 80046a4:	f640 0166 	movw	r1, #2150	; 0x866
 80046a8:	4831      	ldr	r0, [pc, #196]	; (8004770 <EmergencyTask+0x144>)
 80046aa:	f007 f899 	bl	800b7e0 <ServoSetPulse>
			servo_enb = 0;
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <EmergencyTask+0x138>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
		}

		float angle_shoot_point[1][7] = {{1.5, 0, -0.2, -90, 0, 0, 0}};
 80046b4:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <EmergencyTask+0x148>)
 80046b6:	f107 0408 	add.w	r4, r7, #8
 80046ba:	461d      	mov	r5, r3
 80046bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		if (ps4.button == TOUCH) {
 80046c8:	4b27      	ldr	r3, [pc, #156]	; (8004768 <EmergencyTask+0x13c>)
 80046ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d0:	d1b0      	bne.n	8004634 <EmergencyTask+0x8>
//			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
//					.stack_size = 256 * 4, .priority =
//							(osPriority_t) osPriorityNormal, };
//
//			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
			while(ps4.button == TOUCH);
 80046d2:	bf00      	nop
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <EmergencyTask+0x13c>)
 80046d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046dc:	d0fa      	beq.n	80046d4 <EmergencyTask+0xa8>
			static int counter = 0;
			if(counter == 0)
 80046de:	4b26      	ldr	r3, [pc, #152]	; (8004778 <EmergencyTask+0x14c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d131      	bne.n	800474a <EmergencyTask+0x11e>
			{
				angle_shoot = 1;
 80046e6:	4b25      	ldr	r3, [pc, #148]	; (800477c <EmergencyTask+0x150>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
				led5_on;
 80046ec:	4a24      	ldr	r2, [pc, #144]	; (8004780 <EmergencyTask+0x154>)
 80046ee:	7e13      	ldrb	r3, [r2, #24]
 80046f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f4:	7613      	strb	r3, [r2, #24]
				ResetCoordinate();
 80046f6:	f009 fc45 	bl	800df84 <ResetCoordinate>
				PP_start(angle_shoot_point, 1, &pp);
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	4a21      	ldr	r2, [pc, #132]	; (8004784 <EmergencyTask+0x158>)
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f001 faac 	bl	8005c60 <PP_start>
				while(pp.pp_start)
 8004708:	e00d      	b.n	8004726 <EmergencyTask+0xfa>
				{
					if(ps4.button == SQUARE)
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <EmergencyTask+0x13c>)
 800470c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d108      	bne.n	8004726 <EmergencyTask+0xfa>
					{
						while(ps4.button == SQUARE);
 8004714:	bf00      	nop
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <EmergencyTask+0x13c>)
 8004718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d0fa      	beq.n	8004716 <EmergencyTask+0xea>
						PP_stop(&pp);
 8004720:	4818      	ldr	r0, [pc, #96]	; (8004784 <EmergencyTask+0x158>)
 8004722:	f001 fdd5 	bl	80062d0 <PP_stop>
				while(pp.pp_start)
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <EmergencyTask+0x158>)
 8004728:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e9      	bne.n	800470a <EmergencyTask+0xde>
					}
				}
				lidar.angle_counter = BR;
 8004736:	4b14      	ldr	r3, [pc, #80]	; (8004788 <EmergencyTask+0x15c>)
 8004738:	2204      	movs	r2, #4
 800473a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
				counter++;
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <EmergencyTask+0x14c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <EmergencyTask+0x14c>)
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e774      	b.n	8004634 <EmergencyTask+0x8>
			}
			else
			{
				angle_shoot = 0;
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <EmergencyTask+0x150>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
				led5_off;
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <EmergencyTask+0x154>)
 8004752:	7e13      	ldrb	r3, [r2, #24]
 8004754:	f36f 13c7 	bfc	r3, #7, #1
 8004758:	7613      	strb	r3, [r2, #24]
				counter = 0;
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <EmergencyTask+0x14c>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
	while (1) {
 8004760:	e768      	b.n	8004634 <EmergencyTask+0x8>
 8004762:	bf00      	nop
 8004764:	2000a7e8 	.word	0x2000a7e8
 8004768:	2000a244 	.word	0x2000a244
 800476c:	200079e0 	.word	0x200079e0
 8004770:	2000a5e8 	.word	0x2000a5e8
 8004774:	08024d20 	.word	0x08024d20
 8004778:	200002c4 	.word	0x200002c4
 800477c:	200076e4 	.word	0x200076e4
 8004780:	200097dc 	.word	0x200097dc
 8004784:	20006d4c 	.word	0x20006d4c
 8004788:	200091a8 	.word	0x200091a8

0800478c <HAL_UART_RxCpltCallback>:
			}
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_UART_RxCpltCallback+0x34>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d102      	bne.n	80047a4 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 800479e:	4808      	ldr	r0, [pc, #32]	; (80047c0 <HAL_UART_RxCpltCallback+0x34>)
 80047a0:	f006 fa64 	bl	800ac6c <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_UART_RxCpltCallback+0x38>)
 80047a6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d102      	bne.n	80047b6 <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 80047b0:	4804      	ldr	r0, [pc, #16]	; (80047c4 <HAL_UART_RxCpltCallback+0x38>)
 80047b2:	f010 ff01 	bl	80155b8 <ObstacleHandler>
	}
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20006c98 	.word	0x20006c98
 80047c4:	200091a8 	.word	0x200091a8

080047c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0

}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80047e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80047e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80047ec:	edc7 1a01 	vstr	s3, [r7, #4]
 80047f0:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 80047f2:	4a23      	ldr	r2, [pc, #140]	; (8004880 <MODNInit+0xa8>)
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <MODNInit+0xa8>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004800:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <MODNInit+0xa8>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004806:	68b8      	ldr	r0, [r7, #8]
 8004808:	f7fb fe9e 	bl	8000548 <__aeabi_f2d>
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <MODNInit+0xac>)
 8004812:	f7fc f81b 	bl	800084c <__aeabi_ddiv>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	a316      	add	r3, pc, #88	; (adr r3, 8004878 <MODNInit+0xa0>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f7fb fee8 	bl	80005f8 <__aeabi_dmul>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	f7fc f9da 	bl	8000be8 <__aeabi_d2f>
 8004834:	4603      	mov	r3, r0
 8004836:	4a12      	ldr	r2, [pc, #72]	; (8004880 <MODNInit+0xa8>)
 8004838:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 800483a:	ed97 7a04 	vldr	s14, [r7, #16]
 800483e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004842:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <MODNInit+0xa8>)
 8004848:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800484c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <MODNInit+0xa8>)
 8004852:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <MODNInit+0xa8>)
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = OPERATOR_TURNED_0_DEGREE;
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <MODNInit+0xa8>)
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <MODNInit+0xa8>)
 8004866:	4a06      	ldr	r2, [pc, #24]	; (8004880 <MODNInit+0xa8>)
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <MODNInit+0xa8>)
 800486c:	4a06      	ldr	r2, [pc, #24]	; (8004888 <MODNInit+0xb0>)
 800486e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004870:	bf00      	nop
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	54442eea 	.word	0x54442eea
 800487c:	400921fb 	.word	0x400921fb
 8004880:	20006a9c 	.word	0x20006a9c
 8004884:	40668000 	.word	0x40668000
 8004888:	20006aa0 	.word	0x20006aa0
 800488c:	00000000 	.word	0x00000000

08004890 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	ed2d 8b02 	vpush	{d8}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation)
 800489e:	4b52      	ldr	r3, [pc, #328]	; (80049e8 <realMODN+0x158>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d86e      	bhi.n	8004984 <realMODN+0xf4>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <realMODN+0x1c>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	0800494f 	.word	0x0800494f
	{
		case OPERATOR_TURNED_0_DEGREE:
			MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80048c2:	eeb1 7a67 	vneg.f32	s14, s15
 80048c6:	4b48      	ldr	r3, [pc, #288]	; (80049e8 <realMODN+0x158>)
 80048c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80048cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d0:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <realMODN+0x158>)
 80048d2:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80048dc:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <realMODN+0x158>)
 80048de:	edd3 7a07 	vldr	s15, [r3, #28]
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	4b40      	ldr	r3, [pc, #256]	; (80049e8 <realMODN+0x158>)
 80048e8:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80048ec:	e04a      	b.n	8004984 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
			MODN.x_vel =  psx->joyL_y * MODN.speed;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80048f4:	4b3c      	ldr	r3, [pc, #240]	; (80049e8 <realMODN+0x158>)
 80048f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	4b3a      	ldr	r3, [pc, #232]	; (80049e8 <realMODN+0x158>)
 8004900:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  psx->joyL_x * MODN.speed;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <realMODN+0x158>)
 800490c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004914:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <realMODN+0x158>)
 8004916:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800491a:	e033      	b.n	8004984 <realMODN+0xf4>
		case OPERATOR_TURNED_180_DEGREES:
			MODN.x_vel =  psx->joyL_x * MODN.speed;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004922:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <realMODN+0x158>)
 8004924:	edd3 7a07 	vldr	s15, [r3, #28]
 8004928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492c:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <realMODN+0x158>)
 800492e:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_y * MODN.speed;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004938:	eeb1 7a67 	vneg.f32	s14, s15
 800493c:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <realMODN+0x158>)
 800493e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <realMODN+0x158>)
 8004948:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800494c:	e01a      	b.n	8004984 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
			MODN.x_vel = -psx->joyL_y * MODN.speed;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004954:	eeb1 7a67 	vneg.f32	s14, s15
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <realMODN+0x158>)
 800495a:	edd3 7a07 	vldr	s15, [r3, #28]
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <realMODN+0x158>)
 8004964:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_x * MODN.speed;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800496e:	eeb1 7a67 	vneg.f32	s14, s15
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <realMODN+0x158>)
 8004974:	edd3 7a07 	vldr	s15, [r3, #28]
 8004978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <realMODN+0x158>)
 800497e:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8004982:	bf00      	nop
	}

	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <realMODN+0x158>)
 8004996:	edd3 7a07 	vldr	s15, [r3, #28]
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <realMODN+0x158>)
 80049a0:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 80049a4:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <realMODN+0x158>)
 80049a6:	edd3 7a00 	vldr	s15, [r3]
 80049aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	d11b      	bne.n	80049ec <realMODN+0x15c>
 80049b4:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <realMODN+0x158>)
 80049b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80049ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	d113      	bne.n	80049ec <realMODN+0x15c>
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <realMODN+0x158>)
 80049c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80049ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	d10b      	bne.n	80049ec <realMODN+0x15c>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f000 8226 	beq.w	8004e2c <realMODN+0x59c>
			RNSStop(rns);
 80049e0:	6838      	ldr	r0, [r7, #0]
 80049e2:	f006 fa6d 	bl	800aec0 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 80049e6:	e221      	b.n	8004e2c <realMODN+0x59c>
 80049e8:	20006a9c 	.word	0x20006a9c
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 80049ec:	4ba2      	ldr	r3, [pc, #648]	; (8004c78 <realMODN+0x3e8>)
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 80049f2:	4ba2      	ldr	r3, [pc, #648]	; (8004c7c <realMODN+0x3ec>)
 80049f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8141 	bne.w	8004c80 <realMODN+0x3f0>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 80049fe:	4b9f      	ldr	r3, [pc, #636]	; (8004c7c <realMODN+0x3ec>)
 8004a00:	ed93 8a00 	vldr	s16, [r3]
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fb fd9f 	bl	8000548 <__aeabi_f2d>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	a196      	add	r1, pc, #600	; (adr r1, 8004c68 <realMODN+0x3d8>)
 8004a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a14:	f7fb fc38 	bl	8000288 <__aeabi_dsub>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7fc f8e2 	bl	8000be8 <__aeabi_d2f>
 8004a24:	4603      	mov	r3, r0
 8004a26:	ee00 3a10 	vmov	s0, r3
 8004a2a:	f01e ff95 	bl	8023958 <cosf>
 8004a2e:	eef0 7a40 	vmov.f32	s15, s0
 8004a32:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a36:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <realMODN+0x3ec>)
 8004a38:	edd3 8a01 	vldr	s17, [r3, #4]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fb fd83 	bl	8000548 <__aeabi_f2d>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	a188      	add	r1, pc, #544	; (adr r1, 8004c68 <realMODN+0x3d8>)
 8004a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4c:	f7fb fc1c 	bl	8000288 <__aeabi_dsub>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	f7fc f8c6 	bl	8000be8 <__aeabi_d2f>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	ee00 3a10 	vmov	s0, r3
 8004a62:	f01e ffc1 	bl	80239e8 <sinf>
 8004a66:	eef0 7a40 	vmov.f32	s15, s0
 8004a6a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a6e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a72:	4b82      	ldr	r3, [pc, #520]	; (8004c7c <realMODN+0x3ec>)
 8004a74:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a78:	4b80      	ldr	r3, [pc, #512]	; (8004c7c <realMODN+0x3ec>)
 8004a7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a86:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <realMODN+0x3ec>)
 8004a88:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 8004a8c:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <realMODN+0x3ec>)
 8004a8e:	ed93 8a00 	vldr	s16, [r3]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fb fd58 	bl	8000548 <__aeabi_f2d>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	a174      	add	r1, pc, #464	; (adr r1, 8004c70 <realMODN+0x3e0>)
 8004a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa2:	f7fb fbf1 	bl	8000288 <__aeabi_dsub>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	f7fc f89b 	bl	8000be8 <__aeabi_d2f>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	ee00 3a10 	vmov	s0, r3
 8004ab8:	f01e ff4e 	bl	8023958 <cosf>
 8004abc:	eef0 7a40 	vmov.f32	s15, s0
 8004ac0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004ac4:	4b6d      	ldr	r3, [pc, #436]	; (8004c7c <realMODN+0x3ec>)
 8004ac6:	edd3 8a01 	vldr	s17, [r3, #4]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7fb fd3c 	bl	8000548 <__aeabi_f2d>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	a166      	add	r1, pc, #408	; (adr r1, 8004c70 <realMODN+0x3e0>)
 8004ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ada:	f7fb fbd5 	bl	8000288 <__aeabi_dsub>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f7fc f87f 	bl	8000be8 <__aeabi_d2f>
 8004aea:	4603      	mov	r3, r0
 8004aec:	ee00 3a10 	vmov	s0, r3
 8004af0:	f01e ff7a 	bl	80239e8 <sinf>
 8004af4:	eef0 7a40 	vmov.f32	s15, s0
 8004af8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004afc:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b00:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <realMODN+0x3ec>)
 8004b02:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <realMODN+0x3ec>)
 8004b08:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <realMODN+0x3ec>)
 8004b16:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 8004b1a:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <realMODN+0x3ec>)
 8004b1c:	ed93 8a00 	vldr	s16, [r3]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7fb fd11 	bl	8000548 <__aeabi_f2d>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	a151      	add	r1, pc, #324	; (adr r1, 8004c70 <realMODN+0x3e0>)
 8004b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b30:	f7fb fbaa 	bl	8000288 <__aeabi_dsub>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f7fc f854 	bl	8000be8 <__aeabi_d2f>
 8004b40:	4603      	mov	r3, r0
 8004b42:	ee00 3a10 	vmov	s0, r3
 8004b46:	f01e ff07 	bl	8023958 <cosf>
 8004b4a:	eef0 7a40 	vmov.f32	s15, s0
 8004b4e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b52:	4b4a      	ldr	r3, [pc, #296]	; (8004c7c <realMODN+0x3ec>)
 8004b54:	edd3 8a01 	vldr	s17, [r3, #4]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7fb fcf5 	bl	8000548 <__aeabi_f2d>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	a143      	add	r1, pc, #268	; (adr r1, 8004c70 <realMODN+0x3e0>)
 8004b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b68:	f7fb fb8e 	bl	8000288 <__aeabi_dsub>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4610      	mov	r0, r2
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7fc f838 	bl	8000be8 <__aeabi_d2f>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	ee00 3a10 	vmov	s0, r3
 8004b7e:	f01e ff33 	bl	80239e8 <sinf>
 8004b82:	eef0 7a40 	vmov.f32	s15, s0
 8004b86:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b8a:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b8e:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <realMODN+0x3ec>)
 8004b90:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b94:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <realMODN+0x3ec>)
 8004b96:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba2:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <realMODN+0x3ec>)
 8004ba4:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8004ba8:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <realMODN+0x3ec>)
 8004baa:	ed93 8a00 	vldr	s16, [r3]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7fb fcca 	bl	8000548 <__aeabi_f2d>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	a12b      	add	r1, pc, #172	; (adr r1, 8004c68 <realMODN+0x3d8>)
 8004bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bbe:	f7fb fb63 	bl	8000288 <__aeabi_dsub>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f7fc f80d 	bl	8000be8 <__aeabi_d2f>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	ee00 3a10 	vmov	s0, r3
 8004bd4:	f01e fec0 	bl	8023958 <cosf>
 8004bd8:	eef0 7a40 	vmov.f32	s15, s0
 8004bdc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <realMODN+0x3ec>)
 8004be2:	edd3 8a01 	vldr	s17, [r3, #4]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7fb fcae 	bl	8000548 <__aeabi_f2d>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	a11d      	add	r1, pc, #116	; (adr r1, 8004c68 <realMODN+0x3d8>)
 8004bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bf6:	f7fb fb47 	bl	8000288 <__aeabi_dsub>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f7fb fff1 	bl	8000be8 <__aeabi_d2f>
 8004c06:	4603      	mov	r3, r0
 8004c08:	ee00 3a10 	vmov	s0, r3
 8004c0c:	f01e feec 	bl	80239e8 <sinf>
 8004c10:	eef0 7a40 	vmov.f32	s15, s0
 8004c14:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004c18:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <realMODN+0x3ec>)
 8004c1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <realMODN+0x3ec>)
 8004c24:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <realMODN+0x3ec>)
 8004c32:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <realMODN+0x3ec>)
 8004c38:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <realMODN+0x3ec>)
 8004c3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004c42:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <realMODN+0x3ec>)
 8004c44:	edd3 6a05 	vldr	s13, [r3, #20]
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <realMODN+0x3ec>)
 8004c4a:	ed93 6a06 	vldr	s12, [r3, #24]
 8004c4e:	6838      	ldr	r0, [r7, #0]
 8004c50:	eef0 1a46 	vmov.f32	s3, s12
 8004c54:	eeb0 1a66 	vmov.f32	s2, s13
 8004c58:	eef0 0a47 	vmov.f32	s1, s14
 8004c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c60:	f006 f9b2 	bl	800afc8 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8004c64:	e0e2      	b.n	8004e2c <realMODN+0x59c>
 8004c66:	bf00      	nop
 8004c68:	2e48e8a7 	.word	0x2e48e8a7
 8004c6c:	3fe921ff 	.word	0x3fe921ff
 8004c70:	62b6ae7d 	.word	0x62b6ae7d
 8004c74:	4002d97f 	.word	0x4002d97f
 8004c78:	20006d4c 	.word	0x20006d4c
 8004c7c:	20006a9c 	.word	0x20006a9c
		else if (MODN.base == MODN_TRI_OMNI){
 8004c80:	4b71      	ldr	r3, [pc, #452]	; (8004e48 <realMODN+0x5b8>)
 8004c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 80d0 	bne.w	8004e2c <realMODN+0x59c>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8004c8c:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <realMODN+0x5b8>)
 8004c8e:	ed93 8a01 	vldr	s16, [r3, #4]
 8004c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c96:	eef1 7a67 	vneg.f32	s15, s15
 8004c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c9e:	f01e fea3 	bl	80239e8 <sinf>
 8004ca2:	eef0 7a40 	vmov.f32	s15, s0
 8004ca6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004caa:	4b67      	ldr	r3, [pc, #412]	; (8004e48 <realMODN+0x5b8>)
 8004cac:	edd3 8a00 	vldr	s17, [r3]
 8004cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb4:	eef1 7a67 	vneg.f32	s15, s15
 8004cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8004cbc:	f01e fe4c 	bl	8023958 <cosf>
 8004cc0:	eef0 7a40 	vmov.f32	s15, s0
 8004cc4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004cc8:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004ccc:	4b5e      	ldr	r3, [pc, #376]	; (8004e48 <realMODN+0x5b8>)
 8004cce:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	; (8004e48 <realMODN+0x5b8>)
 8004cd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8004cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce0:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <realMODN+0x5b8>)
 8004ce2:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 8004ce6:	4b58      	ldr	r3, [pc, #352]	; (8004e48 <realMODN+0x5b8>)
 8004ce8:	ed93 8a01 	vldr	s16, [r3, #4]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7fb fc2b 	bl	8000548 <__aeabi_f2d>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	a150      	add	r1, pc, #320	; (adr r1, 8004e38 <realMODN+0x5a8>)
 8004cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cfc:	f7fb fac4 	bl	8000288 <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	f7fb ff6e 	bl	8000be8 <__aeabi_d2f>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	ee00 3a10 	vmov	s0, r3
 8004d12:	f01e fe69 	bl	80239e8 <sinf>
 8004d16:	eef0 7a40 	vmov.f32	s15, s0
 8004d1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004d1e:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <realMODN+0x5b8>)
 8004d20:	edd3 8a00 	vldr	s17, [r3]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7fb fc0f 	bl	8000548 <__aeabi_f2d>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	a142      	add	r1, pc, #264	; (adr r1, 8004e38 <realMODN+0x5a8>)
 8004d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d34:	f7fb faa8 	bl	8000288 <__aeabi_dsub>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f7fb ff52 	bl	8000be8 <__aeabi_d2f>
 8004d44:	4603      	mov	r3, r0
 8004d46:	ee00 3a10 	vmov	s0, r3
 8004d4a:	f01e fe05 	bl	8023958 <cosf>
 8004d4e:	eef0 7a40 	vmov.f32	s15, s0
 8004d52:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004d56:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <realMODN+0x5b8>)
 8004d5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <realMODN+0x5b8>)
 8004d62:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d6e:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <realMODN+0x5b8>)
 8004d70:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004d74:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <realMODN+0x5b8>)
 8004d76:	ed93 8a01 	vldr	s16, [r3, #4]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7fb fbe4 	bl	8000548 <__aeabi_f2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	a12e      	add	r1, pc, #184	; (adr r1, 8004e40 <realMODN+0x5b0>)
 8004d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d8a:	f7fb fa7d 	bl	8000288 <__aeabi_dsub>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	f7fb ff27 	bl	8000be8 <__aeabi_d2f>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	ee00 3a10 	vmov	s0, r3
 8004da0:	f01e fe22 	bl	80239e8 <sinf>
 8004da4:	eef0 7a40 	vmov.f32	s15, s0
 8004da8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004dac:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <realMODN+0x5b8>)
 8004dae:	edd3 8a00 	vldr	s17, [r3]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7fb fbc8 	bl	8000548 <__aeabi_f2d>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	a120      	add	r1, pc, #128	; (adr r1, 8004e40 <realMODN+0x5b0>)
 8004dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dc2:	f7fb fa61 	bl	8000288 <__aeabi_dsub>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	f7fb ff0b 	bl	8000be8 <__aeabi_d2f>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	ee00 3a10 	vmov	s0, r3
 8004dd8:	f01e fdbe 	bl	8023958 <cosf>
 8004ddc:	eef0 7a40 	vmov.f32	s15, s0
 8004de0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004de4:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004de8:	4b17      	ldr	r3, [pc, #92]	; (8004e48 <realMODN+0x5b8>)
 8004dea:	edd3 6a02 	vldr	s13, [r3, #8]
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <realMODN+0x5b8>)
 8004df0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dfc:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <realMODN+0x5b8>)
 8004dfe:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <realMODN+0x5b8>)
 8004e04:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e08:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <realMODN+0x5b8>)
 8004e0a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <realMODN+0x5b8>)
 8004e10:	edd3 6a05 	vldr	s13, [r3, #20]
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004e4c <realMODN+0x5bc>
 8004e1a:	eeb0 1a66 	vmov.f32	s2, s13
 8004e1e:	eef0 0a47 	vmov.f32	s1, s14
 8004e22:	eeb0 0a67 	vmov.f32	s0, s15
 8004e26:	f006 f8cf 	bl	800afc8 <RNSVelocity>
}
 8004e2a:	e7ff      	b.n	8004e2c <realMODN+0x59c>
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	ecbd 8b02 	vpop	{d8}
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	c985f06f 	.word	0xc985f06f
 8004e3c:	4000c154 	.word	0x4000c154
 8004e40:	c985f06f 	.word	0xc985f06f
 8004e44:	3ff0c154 	.word	0x3ff0c154
 8004e48:	20006a9c 	.word	0x20006a9c
 8004e4c:	00000000 	.word	0x00000000

08004e50 <setOrientationMODN>:
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
void setOrientationMODN(OrientationMODN_t orientation)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]
	MODN.orientation = orientation;
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	4a03      	ldr	r2, [pc, #12]	; (8004e6c <setOrientationMODN+0x1c>)
 8004e5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	20006a9c 	.word	0x20006a9c

08004e70 <setSpeedMODN>:

void setSpeedMODN(float speed){
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8004e7a:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <setSpeedMODN+0x3c>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <setSpeedMODN+0x3c>)
 8004e82:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <setSpeedMODN+0x3c>)
 8004e90:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <setSpeedMODN+0x3c>)
 8004e9a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20006a9c 	.word	0x20006a9c

08004eb0 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	float data=0;
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004ebe:	4b72      	ldr	r3, [pc, #456]	; (8005088 <decode_Odrive+0x1d8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004ec4:	231f      	movs	r3, #31
 8004ec6:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004ec8:	8afa      	ldrh	r2, [r7, #22]
 8004eca:	8abb      	ldrh	r3, [r7, #20]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004ed0:	8a7b      	ldrh	r3, [r7, #18]
 8004ed2:	2b09      	cmp	r3, #9
 8004ed4:	d136      	bne.n	8004f44 <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	749a      	strb	r2, [r3, #18]
 8004ee6:	4b68      	ldr	r3, [pc, #416]	; (8005088 <decode_Odrive+0x1d8>)
 8004ee8:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004eea:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef2:	4b65      	ldr	r3, [pc, #404]	; (8005088 <decode_Odrive+0x1d8>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004ef6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fb fb20 	bl	8000548 <__aeabi_f2d>
 8004f08:	a35d      	add	r3, pc, #372	; (adr r3, 8005080 <decode_Odrive+0x1d0>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb fb73 	bl	80005f8 <__aeabi_dmul>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4614      	mov	r4, r2
 8004f18:	461d      	mov	r5, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fb12 	bl	8000548 <__aeabi_f2d>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f7fb fb64 	bl	80005f8 <__aeabi_dmul>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f7fb fe56 	bl	8000be8 <__aeabi_d2f>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004f42:	e097      	b.n	8005074 <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004f44:	8a7b      	ldrh	r3, [r7, #18]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d123      	bne.n	8004f92 <decode_Odrive+0xe2>
 8004f4a:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <decode_Odrive+0x1d8>)
 8004f4c:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004f4e:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f58:	ee17 2a90 	vmov	r2, s15
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004f60:	4b49      	ldr	r3, [pc, #292]	; (8005088 <decode_Odrive+0x1d8>)
 8004f62:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004f6c:	4b46      	ldr	r3, [pc, #280]	; (8005088 <decode_Odrive+0x1d8>)
 8004f6e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d178      	bne.n	8005074 <decode_Odrive+0x1c4>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	7c1b      	ldrb	r3, [r3, #16]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d174      	bne.n	8005074 <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	741a      	strb	r2, [r3, #16]
}
 8004f90:	e070      	b.n	8005074 <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004f92:	8a7b      	ldrh	r3, [r7, #18]
 8004f94:	2b17      	cmp	r3, #23
 8004f96:	d109      	bne.n	8004fac <decode_Odrive+0xfc>
 8004f98:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <decode_Odrive+0x1d8>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004f9c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	745a      	strb	r2, [r3, #17]
}
 8004faa:	e063      	b.n	8005074 <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004fac:	8a7b      	ldrh	r3, [r7, #18]
 8004fae:	2b15      	cmp	r3, #21
 8004fb0:	d10f      	bne.n	8004fd2 <decode_Odrive+0x122>
 8004fb2:	4b35      	ldr	r3, [pc, #212]	; (8005088 <decode_Odrive+0x1d8>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004fb6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fbe:	4b32      	ldr	r3, [pc, #200]	; (8005088 <decode_Odrive+0x1d8>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004fc2:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	75da      	strb	r2, [r3, #23]
}
 8004fd0:	e050      	b.n	8005074 <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004fd2:	8a7b      	ldrh	r3, [r7, #18]
 8004fd4:	2b14      	cmp	r3, #20
 8004fd6:	d10f      	bne.n	8004ff8 <decode_Odrive+0x148>
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <decode_Odrive+0x1d8>)
 8004fda:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004fdc:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	665a      	str	r2, [r3, #100]	; 0x64
 8004fe4:	4b28      	ldr	r3, [pc, #160]	; (8005088 <decode_Odrive+0x1d8>)
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004fe8:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	755a      	strb	r2, [r3, #21]
}
 8004ff6:	e03d      	b.n	8005074 <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004ff8:	8a7b      	ldrh	r3, [r7, #18]
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d128      	bne.n	8005050 <decode_Odrive+0x1a0>
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <decode_Odrive+0x1d8>)
 8005000:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8005002:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8005004:	edd7 7a03 	vldr	s15, [r7, #12]
 8005008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500c:	ee17 2a90 	vmov	r2, s15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f103 0448 	add.w	r4, r3, #72	; 0x48
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f836 	bl	8005090 <Odrive_Error_To_String>
 8005024:	4603      	mov	r3, r0
 8005026:	4619      	mov	r1, r3
 8005028:	4620      	mov	r0, r4
 800502a:	f01a ff36 	bl	801fe9a <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8005034:	4620      	mov	r0, r4
 8005036:	f7fb f8cb 	bl	80001d0 <strlen>
 800503a:	4603      	mov	r3, r0
 800503c:	4423      	add	r3, r4
 800503e:	4913      	ldr	r1, [pc, #76]	; (800508c <decode_Odrive+0x1dc>)
 8005040:	461a      	mov	r2, r3
 8005042:	460b      	mov	r3, r1
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	759a      	strb	r2, [r3, #22]
}
 800504e:	e011      	b.n	8005074 <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8005050:	8a7b      	ldrh	r3, [r7, #18]
 8005052:	2b0a      	cmp	r3, #10
 8005054:	d10e      	bne.n	8005074 <decode_Odrive+0x1c4>
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <decode_Odrive+0x1d8>)
 8005058:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 800505a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <decode_Odrive+0x1d8>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8005066:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	751a      	strb	r2, [r3, #20]
}
 8005074:	bf00      	nop
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bdb0      	pop	{r4, r5, r7, pc}
 800507c:	f3af 8000 	nop.w
 8005080:	54442d18 	.word	0x54442d18
 8005084:	400921fb 	.word	0x400921fb
 8005088:	200068b4 	.word	0x200068b4
 800508c:	08024e24 	.word	0x08024e24

08005090 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	f000 80fd 	beq.w	800529c <Odrive_Error_To_String+0x20c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	f200 80fa 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b2:	f000 80f1 	beq.w	8005298 <Odrive_Error_To_String+0x208>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050bc:	f200 80f0 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050c6:	f000 80e5 	beq.w	8005294 <Odrive_Error_To_String+0x204>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050d0:	f200 80e6 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050da:	f000 80d9 	beq.w	8005290 <Odrive_Error_To_String+0x200>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e4:	f200 80dc 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050ee:	f000 80cd 	beq.w	800528c <Odrive_Error_To_String+0x1fc>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050f8:	f200 80d2 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005102:	f000 80c1 	beq.w	8005288 <Odrive_Error_To_String+0x1f8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510c:	f200 80c8 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005116:	f000 80b5 	beq.w	8005284 <Odrive_Error_To_String+0x1f4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	f200 80be 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512a:	f000 80a9 	beq.w	8005280 <Odrive_Error_To_String+0x1f0>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005134:	f200 80b4 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	f000 809d 	beq.w	800527c <Odrive_Error_To_String+0x1ec>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005148:	f200 80aa 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005152:	f000 8091 	beq.w	8005278 <Odrive_Error_To_String+0x1e8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515c:	f200 80a0 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	f000 8085 	beq.w	8005274 <Odrive_Error_To_String+0x1e4>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005170:	f200 8096 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517a:	d079      	beq.n	8005270 <Odrive_Error_To_String+0x1e0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	f200 808d 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800518c:	d06e      	beq.n	800526c <Odrive_Error_To_String+0x1dc>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005194:	f200 8084 	bhi.w	80052a0 <Odrive_Error_To_String+0x210>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519e:	d063      	beq.n	8005268 <Odrive_Error_To_String+0x1d8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a6:	d87b      	bhi.n	80052a0 <Odrive_Error_To_String+0x210>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d848      	bhi.n	8005240 <Odrive_Error_To_String+0x1b0>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d875      	bhi.n	80052a0 <Odrive_Error_To_String+0x210>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <Odrive_Error_To_String+0x12c>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	08005249 	.word	0x08005249
 80051c0:	0800524d 	.word	0x0800524d
 80051c4:	08005251 	.word	0x08005251
 80051c8:	080052a1 	.word	0x080052a1
 80051cc:	08005255 	.word	0x08005255
 80051d0:	080052a1 	.word	0x080052a1
 80051d4:	080052a1 	.word	0x080052a1
 80051d8:	080052a1 	.word	0x080052a1
 80051dc:	08005259 	.word	0x08005259
 80051e0:	080052a1 	.word	0x080052a1
 80051e4:	080052a1 	.word	0x080052a1
 80051e8:	080052a1 	.word	0x080052a1
 80051ec:	080052a1 	.word	0x080052a1
 80051f0:	080052a1 	.word	0x080052a1
 80051f4:	080052a1 	.word	0x080052a1
 80051f8:	080052a1 	.word	0x080052a1
 80051fc:	0800525d 	.word	0x0800525d
 8005200:	080052a1 	.word	0x080052a1
 8005204:	080052a1 	.word	0x080052a1
 8005208:	080052a1 	.word	0x080052a1
 800520c:	080052a1 	.word	0x080052a1
 8005210:	080052a1 	.word	0x080052a1
 8005214:	080052a1 	.word	0x080052a1
 8005218:	080052a1 	.word	0x080052a1
 800521c:	080052a1 	.word	0x080052a1
 8005220:	080052a1 	.word	0x080052a1
 8005224:	080052a1 	.word	0x080052a1
 8005228:	080052a1 	.word	0x080052a1
 800522c:	080052a1 	.word	0x080052a1
 8005230:	080052a1 	.word	0x080052a1
 8005234:	080052a1 	.word	0x080052a1
 8005238:	080052a1 	.word	0x080052a1
 800523c:	08005261 	.word	0x08005261
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d00e      	beq.n	8005264 <Odrive_Error_To_String+0x1d4>
 8005246:	e02b      	b.n	80052a0 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <Odrive_Error_To_String+0x220>)
 800524a:	e02a      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 800524c:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <Odrive_Error_To_String+0x224>)
 800524e:	e028      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 8005250:	4b19      	ldr	r3, [pc, #100]	; (80052b8 <Odrive_Error_To_String+0x228>)
 8005252:	e026      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 8005254:	4b19      	ldr	r3, [pc, #100]	; (80052bc <Odrive_Error_To_String+0x22c>)
 8005256:	e024      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <Odrive_Error_To_String+0x230>)
 800525a:	e022      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <Odrive_Error_To_String+0x234>)
 800525e:	e020      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <Odrive_Error_To_String+0x238>)
 8005262:	e01e      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <Odrive_Error_To_String+0x23c>)
 8005266:	e01c      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <Odrive_Error_To_String+0x240>)
 800526a:	e01a      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <Odrive_Error_To_String+0x244>)
 800526e:	e018      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <Odrive_Error_To_String+0x248>)
 8005272:	e016      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <Odrive_Error_To_String+0x24c>)
 8005276:	e014      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 8005278:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <Odrive_Error_To_String+0x250>)
 800527a:	e012      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <Odrive_Error_To_String+0x254>)
 800527e:	e010      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <Odrive_Error_To_String+0x258>)
 8005282:	e00e      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 8005284:	4b19      	ldr	r3, [pc, #100]	; (80052ec <Odrive_Error_To_String+0x25c>)
 8005286:	e00c      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 8005288:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <Odrive_Error_To_String+0x260>)
 800528a:	e00a      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <Odrive_Error_To_String+0x264>)
 800528e:	e008      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8005290:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <Odrive_Error_To_String+0x268>)
 8005292:	e006      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <Odrive_Error_To_String+0x26c>)
 8005296:	e004      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8005298:	4b19      	ldr	r3, [pc, #100]	; (8005300 <Odrive_Error_To_String+0x270>)
 800529a:	e002      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <Odrive_Error_To_String+0x274>)
 800529e:	e000      	b.n	80052a2 <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <Odrive_Error_To_String+0x278>)
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	08024e28 	.word	0x08024e28
 80052b4:	08024e34 	.word	0x08024e34
 80052b8:	08024e44 	.word	0x08024e44
 80052bc:	08024e54 	.word	0x08024e54
 80052c0:	08024e64 	.word	0x08024e64
 80052c4:	08024e78 	.word	0x08024e78
 80052c8:	08024e84 	.word	0x08024e84
 80052cc:	08024e90 	.word	0x08024e90
 80052d0:	08024ea0 	.word	0x08024ea0
 80052d4:	08024eb4 	.word	0x08024eb4
 80052d8:	08024ecc 	.word	0x08024ecc
 80052dc:	08024ee0 	.word	0x08024ee0
 80052e0:	08024efc 	.word	0x08024efc
 80052e4:	08024f14 	.word	0x08024f14
 80052e8:	08024f24 	.word	0x08024f24
 80052ec:	08024f38 	.word	0x08024f38
 80052f0:	08024f54 	.word	0x08024f54
 80052f4:	08024f70 	.word	0x08024f70
 80052f8:	08024f88 	.word	0x08024f88
 80052fc:	08024f98 	.word	0x08024f98
 8005300:	08024fac 	.word	0x08024fac
 8005304:	08024fc0 	.word	0x08024fc0
 8005308:	08024fd4 	.word	0x08024fd4

0800530c <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8005312:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005316:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8005318:	4b2f      	ldr	r3, [pc, #188]	; (80053d8 <OdriveCAN_Handler+0xcc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b29a      	uxth	r2, r3
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	4013      	ands	r3, r2
 8005322:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 8005324:	883b      	ldrh	r3, [r7, #0]
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	803b      	strh	r3, [r7, #0]
	int i=0;
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	e01f      	b.n	8005374 <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 8005334:	4b29      	ldr	r3, [pc, #164]	; (80053dc <OdriveCAN_Handler+0xd0>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	8b1b      	ldrh	r3, [r3, #24]
 8005342:	883a      	ldrh	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d112      	bne.n	800536e <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <OdriveCAN_Handler+0xd0>)
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fdab 	bl	8004eb0 <decode_Odrive>
			c[i]++;
 800535a:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <OdriveCAN_Handler+0xd4>)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	491e      	ldr	r1, [pc, #120]	; (80053e0 <OdriveCAN_Handler+0xd4>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 800536c:	e007      	b.n	800537e <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3301      	adds	r3, #1
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <OdriveCAN_Handler+0xd8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	dbda      	blt.n	8005334 <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <OdriveCAN_Handler+0xd4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d111      	bne.n	80053aa <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <OdriveCAN_Handler+0xd4>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 800538c:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <OdriveCAN_Handler+0xdc>)
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	b2db      	uxtb	r3, r3
 8005396:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <OdriveCAN_Handler+0xdc>)
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2d9      	uxtb	r1, r3
 80053a2:	7853      	ldrb	r3, [r2, #1]
 80053a4:	f361 1386 	bfi	r3, r1, #6, #1
 80053a8:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <OdriveCAN_Handler+0xd4>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d10e      	bne.n	80053d0 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <OdriveCAN_Handler+0xd4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <OdriveCAN_Handler+0xdc>)
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	b25b      	sxtb	r3, r3
 80053be:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <OdriveCAN_Handler+0xdc>)
 80053c0:	43db      	mvns	r3, r3
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	09db      	lsrs	r3, r3, #7
 80053c6:	b2d9      	uxtb	r1, r3
 80053c8:	7853      	ldrb	r3, [r2, #1]
 80053ca:	f361 13c7 	bfi	r3, r1, #7, #1
 80053ce:	7053      	strb	r3, [r2, #1]
	}

}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	2000a75c 	.word	0x2000a75c
 80053dc:	2000a88c 	.word	0x2000a88c
 80053e0:	200002cc 	.word	0x200002cc
 80053e4:	200002c8 	.word	0x200002c8
 80053e8:	40020814 	.word	0x40020814

080053ec <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
	pid->error = in;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	; 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800541a:	edc7 0a08 	vstr	s1, [r7, #32]
 800541e:	ed87 1a07 	vstr	s2, [r7, #28]
 8005422:	edc7 1a06 	vstr	s3, [r7, #24]
 8005426:	ed87 2a05 	vstr	s4, [r7, #20]
 800542a:	edc7 2a04 	vstr	s5, [r7, #16]
 800542e:	ed87 3a03 	vstr	s6, [r7, #12]
 8005432:	edc7 3a02 	vstr	s7, [r7, #8]
 8005436:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800543c:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a3a      	ldr	r2, [r7, #32]
 8005442:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f81b 	bl	80054a4 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 800546e:	bf00      	nop
 8005470:	3728      	adds	r7, #40	; 0x28
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005482:	6079      	str	r1, [r7, #4]
 8005484:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	3302      	adds	r3, #2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	3304      	adds	r3, #4
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f804 	bl	80054a4 <PIDCoeffCalc>
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 80054a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80054b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80054b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054bc:	d013      	beq.n	80054e6 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	ed93 7a03 	vldr	s14, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80054ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
 80054e4:	e007      	b.n	80054f6 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80054fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	d108      	bne.n	8005518 <PIDCoeffCalc+0x74>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800550c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005514:	f000 80ef 	beq.w	80056f6 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	ed93 7a03 	vldr	s14, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005528:	ee17 0a90 	vmov	r0, s15
 800552c:	f7fb f80c 	bl	8000548 <__aeabi_f2d>
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005538:	f7fa fea6 	bl	8000288 <__aeabi_dsub>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4614      	mov	r4, r2
 8005542:	461d      	mov	r5, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	ed93 7a03 	vldr	s14, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005554:	ee17 0a90 	vmov	r0, s15
 8005558:	f7fa fff6 	bl	8000548 <__aeabi_f2d>
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005564:	f7fa fe92 	bl	800028c <__adddf3>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fb f96c 	bl	800084c <__aeabi_ddiv>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	f7fb fb34 	bl	8000be8 <__aeabi_d2f>
 8005580:	4603      	mov	r3, r0
 8005582:	ee07 3a90 	vmov	s15, r3
 8005586:	eef1 7a67 	vneg.f32	s15, s15
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	4618      	mov	r0, r3
 8005596:	f7fa ffd7 	bl	8000548 <__aeabi_f2d>
 800559a:	4604      	mov	r4, r0
 800559c:	460d      	mov	r5, r1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fa ffd0 	bl	8000548 <__aeabi_f2d>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	f7fa fe6e 	bl	800028c <__adddf3>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4690      	mov	r8, r2
 80055b6:	4699      	mov	r9, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fa ffc3 	bl	8000548 <__aeabi_f2d>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb f815 	bl	80005f8 <__aeabi_dmul>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4690      	mov	r8, r2
 80055d4:	4699      	mov	r9, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	edd3 7a03 	vldr	s15, [r3, #12]
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	ee17 0a90 	vmov	r0, s15
 80055ea:	f7fa ffad 	bl	8000548 <__aeabi_f2d>
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055f6:	f7fa fe49 	bl	800028c <__adddf3>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f7fb f923 	bl	800084c <__aeabi_ddiv>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4620      	mov	r0, r4
 800560c:	4629      	mov	r1, r5
 800560e:	f7fa fe3d 	bl	800028c <__adddf3>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	f7fb fae5 	bl	8000be8 <__aeabi_d2f>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005634:	ee17 0a90 	vmov	r0, s15
 8005638:	f7fa ff86 	bl	8000548 <__aeabi_f2d>
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005644:	f7fa fe20 	bl	8000288 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4614      	mov	r4, r2
 800564e:	461d      	mov	r5, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	4618      	mov	r0, r3
 8005656:	f7fa ff77 	bl	8000548 <__aeabi_f2d>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4620      	mov	r0, r4
 8005660:	4629      	mov	r1, r5
 8005662:	f7fa ffc9 	bl	80005f8 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4614      	mov	r4, r2
 800566c:	461d      	mov	r5, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4618      	mov	r0, r3
 8005674:	f7fa ff68 	bl	8000548 <__aeabi_f2d>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	f7fa fe06 	bl	800028c <__adddf3>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4690      	mov	r8, r2
 8005686:	4699      	mov	r9, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	4618      	mov	r0, r3
 800568e:	f7fa ff5b 	bl	8000548 <__aeabi_f2d>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f7fa ffad 	bl	80005f8 <__aeabi_dmul>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4620      	mov	r0, r4
 80056a4:	4629      	mov	r1, r5
 80056a6:	f7fa fdef 	bl	8000288 <__aeabi_dsub>
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	4614      	mov	r4, r2
 80056b0:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	ee17 0a90 	vmov	r0, s15
 80056c6:	f7fa ff3f 	bl	8000548 <__aeabi_f2d>
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056d2:	f7fa fddb 	bl	800028c <__adddf3>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	f7fb f8b5 	bl	800084c <__aeabi_ddiv>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4610      	mov	r0, r2
 80056e8:	4619      	mov	r1, r3
 80056ea:	f7fb fa7d 	bl	8000be8 <__aeabi_d2f>
 80056ee:	4602      	mov	r2, r0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80056f4:	e00c      	b.n	8005710 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800571a <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	651a      	str	r2, [r3, #80]	; 0x50
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	edd3 7a05 	vldr	s15, [r3, #20]
 800576c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005774:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	edd3 7a08 	vldr	s15, [r3, #32]
 8005786:	eef5 7a40 	vcmp.f32	s15, #0.0
 800578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578e:	d033      	beq.n	80057f8 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80057a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80057a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 80057b2:	e003      	b.n	80057bc <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80057ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d2:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80057e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e6:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80057fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005806:	d107      	bne.n	8005818 <PID+0xc2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800580e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005816:	d02c      	beq.n	8005872 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005828:	edd7 7a03 	vldr	s15, [r7, #12]
 800582c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800584c:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800585c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005860:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	edd3 7a04 	vldr	s15, [r3, #16]
 800587e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588a:	dd0f      	ble.n	80058ac <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	edd3 7a06 	vldr	s15, [r3, #24]
 8005898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	7813      	ldrb	r3, [r2, #0]
 80058a4:	f36f 0300 	bfc	r3, #0, #1
 80058a8:	7013      	strb	r3, [r2, #0]
 80058aa:	e02b      	b.n	8005904 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80058b2:	eef1 7a67 	vneg.f32	s15, s15
 80058b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80058ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	d511      	bpl.n	80058e8 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80058d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d4:	eef1 7a67 	vneg.f32	s15, s15
 80058d8:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	7813      	ldrb	r3, [r2, #0]
 80058e0:	f36f 0300 	bfc	r3, #0, #1
 80058e4:	7013      	strb	r3, [r2, #0]
 80058e6:	e00d      	b.n	8005904 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80058ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	7813      	ldrb	r3, [r2, #0]
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	601a      	str	r2, [r3, #0]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <PPInit>:
//#include "PP.h"
#include "../adapter.h"
#include <math.h>

void PPInit  (uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp, Laser_t *lsrx, Laser_t *lsry, Laser_t* lsrR){
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]

	pp->base_shape=base;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
	pp->qeix = qeix;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	605a      	str	r2, [r3, #4]
	pp->lsrx = &(lsrx->dist);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f103 021c 	add.w	r2, r3, #28
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	60da      	str	r2, [r3, #12]
	pp->lsry = &(lsry->dist);
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f103 021c 	add.w	r2, r3, #28
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	611a      	str	r2, [r3, #16]
	pp->lsrR = &(lsrR->dist);
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	f103 021c 	add.w	r2, r3, #28
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	615a      	str	r2, [r3, #20]
	pp->lsrx_swap=0;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8005960:	f36f 1386 	bfc	r3, #6, #1
 8005964:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->lsry_swap=0;
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800596e:	f36f 1345 	bfc	r3, #5, #1
 8005972:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->yaw = imu;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800599c:	461a      	mov	r2, r3
 800599e:	f7ff fd25 	bl	80053ec <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80059a8:	4618      	mov	r0, r3
 80059aa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80059ae:	ed9f 3a39 	vldr	s6, [pc, #228]	; 8005a94 <PPInit+0x17c>
 80059b2:	eddf 2a39 	vldr	s5, [pc, #228]	; 8005a98 <PPInit+0x180>
 80059b6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80059ba:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80059be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80059c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80059c6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8005a9c <PPInit+0x184>
 80059ca:	f7ff fd21 	bl	8005410 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fea0 	bl	800571a <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80059ec:	461a      	mov	r2, r3
 80059ee:	f7ff fcfd 	bl	80053ec <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80059f8:	4618      	mov	r0, r3
 80059fa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80059fe:	ed9f 3a25 	vldr	s6, [pc, #148]	; 8005a94 <PPInit+0x17c>
 8005a02:	eddf 2a25 	vldr	s5, [pc, #148]	; 8005a98 <PPInit+0x180>
 8005a06:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8005a0a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8005a0e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005a12:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005a16:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8005a9c <PPInit+0x184>
 8005a1a:	f7ff fcf9 	bl	8005410 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fe78 	bl	800571a <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f7ff fcd5 	bl	80053ec <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005a48:	4618      	mov	r0, r3
 8005a4a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8005a4e:	ed9f 3a14 	vldr	s6, [pc, #80]	; 8005aa0 <PPInit+0x188>
 8005a52:	eddf 2a13 	vldr	s5, [pc, #76]	; 8005aa0 <PPInit+0x188>
 8005a56:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8005a5a:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8005a5e:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005aa4 <PPInit+0x18c>
 8005a62:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005a66:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005a9c <PPInit+0x184>
 8005a6a:	f7ff fcd1 	bl	8005410 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fe50 	bl	800571a <PIDDelayInit>

	pp->tol_xy_crv= 0.6;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <PPInit+0x190>)
 8005a7e:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

	pp->yaw_offset=*(pp->yaw);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	3ecccccd 	.word	0x3ecccccd
 8005a98:	00000000 	.word	0x00000000
 8005a9c:	3ba3d70a 	.word	0x3ba3d70a
 8005aa0:	3e4ccccd 	.word	0x3e4ccccd
 8005aa4:	3d088889 	.word	0x3d088889
 8005aa8:	3f19999a 	.word	0x3f19999a

08005aac <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp){
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ab6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005aba:	ed87 1a01 	vstr	s2, [r7, #4]
 8005abe:	6038      	str	r0, [r7, #0]

	pp->kp[0]=kp;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	pp->ki[0]=ki;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	pp->kd[0]=kd;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	PIDGainSet(KP,kp,&(pp->x));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005ade:	4619      	mov	r1, r3
 8005ae0:	ed97 0a03 	vldr	s0, [r7, #12]
 8005ae4:	2004      	movs	r0, #4
 8005ae6:	f7ff fcc6 	bl	8005476 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005af0:	4619      	mov	r1, r3
 8005af2:	ed97 0a02 	vldr	s0, [r7, #8]
 8005af6:	2005      	movs	r0, #5
 8005af8:	f7ff fcbd 	bl	8005476 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005b02:	4619      	mov	r1, r3
 8005b04:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b08:	2006      	movs	r0, #6
 8005b0a:	f7ff fcb4 	bl	8005476 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005b14:	4619      	mov	r1, r3
 8005b16:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b1a:	2004      	movs	r0, #4
 8005b1c:	f7ff fcab 	bl	8005476 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005b26:	4619      	mov	r1, r3
 8005b28:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b2c:	2005      	movs	r0, #5
 8005b2e:	f7ff fca2 	bl	8005476 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005b38:	4619      	mov	r1, r3
 8005b3a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b3e:	2006      	movs	r0, #6
 8005b40:	f7ff fc99 	bl	8005476 <PIDGainSet>
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	ed87 0a05 	vstr	s0, [r7, #20]
 8005b56:	edc7 0a04 	vstr	s1, [r7, #16]
 8005b5a:	ed87 1a03 	vstr	s2, [r7, #12]
 8005b5e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005b62:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	ed97 0a05 	vldr	s0, [r7, #20]
 8005b70:	2004      	movs	r0, #4
 8005b72:	f7ff fc80 	bl	8005476 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	ed97 0a04 	vldr	s0, [r7, #16]
 8005b82:	2005      	movs	r0, #5
 8005b84:	f7ff fc77 	bl	8005476 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005b8e:	4619      	mov	r1, r3
 8005b90:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b94:	2006      	movs	r0, #6
 8005b96:	f7ff fc6e 	bl	8005476 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	ed97 0a02 	vldr	s0, [r7, #8]
 8005ba6:	2003      	movs	r0, #3
 8005ba8:	f7ff fc65 	bl	8005476 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	601a      	str	r2, [r3, #0]

}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <PP_PIDEndSet>:
void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp){
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	ed87 0a03 	vstr	s0, [r7, #12]
 8005bc8:	edc7 0a02 	vstr	s1, [r7, #8]
 8005bcc:	ed87 1a01 	vstr	s2, [r7, #4]
 8005bd0:	6038      	str	r0, [r7, #0]

	pp->kp[1]=kp;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	pp->ki[1]=ki;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	pp->kd[1]=kd;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

	PIDGainSet(KP,kp,&(pp->x));
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	ed97 0a03 	vldr	s0, [r7, #12]
 8005bf6:	2004      	movs	r0, #4
 8005bf8:	f7ff fc3d 	bl	8005476 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005c02:	4619      	mov	r1, r3
 8005c04:	ed97 0a02 	vldr	s0, [r7, #8]
 8005c08:	2005      	movs	r0, #5
 8005c0a:	f7ff fc34 	bl	8005476 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005c14:	4619      	mov	r1, r3
 8005c16:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c1a:	2006      	movs	r0, #6
 8005c1c:	f7ff fc2b 	bl	8005476 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005c26:	4619      	mov	r1, r3
 8005c28:	ed97 0a03 	vldr	s0, [r7, #12]
 8005c2c:	2004      	movs	r0, #4
 8005c2e:	f7ff fc22 	bl	8005476 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	ed97 0a02 	vldr	s0, [r7, #8]
 8005c3e:	2005      	movs	r0, #5
 8005c40:	f7ff fc19 	bl	8005476 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c50:	2006      	movs	r0, #6
 8005c52:	f7ff fc10 	bl	8005476 <PIDGainSet>
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp){
 8005c60:	b580      	push	{r7, lr}
 8005c62:	ed2d 8b02 	vpush	{d8}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]

	int i;
	for(i=0;i<no_point;i++){
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e106      	b.n	8005e84 <PP_start+0x224>
		pp->target_vel[i] = point[i][0];
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	461a      	mov	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	3378      	adds	r3, #120	; 0x78
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1];
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	331e      	adds	r3, #30
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	601a      	str	r2, [r3, #0]
		pp->target_y[i] = point[i][2];
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	332c      	adds	r3, #44	; 0x2c
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	3304      	adds	r3, #4
 8005cd0:	601a      	str	r2, [r3, #0]
		pp->target_accurate[i] = point[i][5];
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	334a      	adds	r3, #74	; 0x4a
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	3304      	adds	r3, #4
 8005cf0:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3304      	adds	r3, #4
 8005d12:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11f      	bne.n	8005d5a <PP_start+0xfa>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8005d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d2a:	eeb0 7ae7 	vabs.f32	s14, s15
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005d3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d3e:	eef0 7ae7 	vabs.f32	s15, s15
 8005d42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d46:	eeb0 0a66 	vmov.f32	s0, s13
 8005d4a:	f01d fd31 	bl	80237b0 <atanf>
 8005d4e:	eef0 7a40 	vmov.f32	s15, s0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	edc3 7a69 	vstr	s15, [r3, #420]	; 0x1a4
 8005d58:	e03f      	b.n	8005dda <PP_start+0x17a>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	461a      	mov	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	3b1c      	subs	r3, #28
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d86:	eeb0 7ae7 	vabs.f32	s14, s15
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	461a      	mov	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4613      	mov	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	3b1c      	subs	r3, #28
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	edd3 7a01 	vldr	s15, [r3, #4]
 8005db2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005db6:	eef0 7ae7 	vabs.f32	s15, s15
 8005dba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005dbe:	eeb0 0a66 	vmov.f32	s0, s13
 8005dc2:	f01d fcf5 	bl	80237b0 <atanf>
 8005dc6:	eef0 7a40 	vmov.f32	s15, s0
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3368      	adds	r3, #104	; 0x68
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	461a      	mov	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4413      	add	r3, r2
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	333c      	adds	r3, #60	; 0x3c
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	ed93 8a04 	vldr	s16, [r3, #16]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3368      	adds	r3, #104	; 0x68
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	3304      	adds	r3, #4
 8005e18:	edd3 7a00 	vldr	s15, [r3]
 8005e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e20:	f01d fd9a 	bl	8023958 <cosf>
 8005e24:	eef0 7a40 	vmov.f32	s15, s0
 8005e28:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	3388      	adds	r3, #136	; 0x88
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	3304      	adds	r3, #4
 8005e38:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	ed93 8a04 	vldr	s16, [r3, #16]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	3368      	adds	r3, #104	; 0x68
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	edd3 7a00 	vldr	s15, [r3]
 8005e60:	eeb0 0a67 	vmov.f32	s0, s15
 8005e64:	f01d fdc0 	bl	80239e8 <sinf>
 8005e68:	eef0 7a40 	vmov.f32	s15, s0
 8005e6c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	3398      	adds	r3, #152	; 0x98
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++){
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3301      	adds	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	f6ff aef4 	blt.w	8005c76 <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
	if(fabs(pp->real_x - pp->target_x[0])){
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eae:	d017      	beq.n	8005ee0 <PP_start+0x280>
		PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8005ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ed8:	2002      	movs	r0, #2
 8005eda:	f7ff facc 	bl	8005476 <PIDGainSet>
 8005ede:	e008      	b.n	8005ef2 <PP_start+0x292>
	} else {
		PIDGainSet(KE,1.0,&(pp->x));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005eec:	2002      	movs	r0, #2
 8005eee:	f7ff fac2 	bl	8005476 <PIDGainSet>
	}
	if(fabs(pp->real_y - pp->target_y[0])){
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	d017      	beq.n	8005f3c <PP_start+0x2dc>
		PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f1c:	eef0 7ae7 	vabs.f32	s15, s15
 8005f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	eeb0 0a47 	vmov.f32	s0, s14
 8005f34:	2002      	movs	r0, #2
 8005f36:	f7ff fa9e 	bl	8005476 <PIDGainSet>
 8005f3a:	e008      	b.n	8005f4e <PP_start+0x2ee>
	} else {
		PIDGainSet(KE,1.0,&(pp->y));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005f42:	4619      	mov	r1, r3
 8005f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005f48:	2002      	movs	r0, #2
 8005f4a:	f7ff fa94 	bl	8005476 <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005f60:	2003      	movs	r0, #3
 8005f62:	f7ff fa88 	bl	8005476 <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	edd3 7a98 	vldr	s15, [r3, #608]	; 0x260
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005f72:	4619      	mov	r1, r3
 8005f74:	eeb0 0a67 	vmov.f32	s0, s15
 8005f78:	2003      	movs	r0, #3
 8005f7a:	f7ff fa7c 	bl	8005476 <PIDGainSet>

	pp->point_count=0;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
	pp->crnt_crv_pt=0;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	pp->pp_crv_calc=0;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	pp->pp_start=1;
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->rotate=0;
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8005faa:	f36f 03c3 	bfc	r3, #3, #1
 8005fae:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

	pp->tol_xy=0.20;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a0b      	ldr	r2, [pc, #44]	; (8005fe4 <PP_start+0x384>)
 8005fb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	pp->tol_z=2.0;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005fc0:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c

	pp->f_tol_xy[0]=0.06;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <PP_start+0x388>)
 8005fc8:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	pp->f_tol_z[0]=1.0;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005fd2:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
//		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",point[0][0],point[0][1],
//				point[0][2],point[0][3],point[0][4],
//				point[0][5],point[0][6]);
//							UARTPrintString(UART5,uartbuff);

}
 8005fd6:	bf00      	nop
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	ecbd 8b02 	vpop	{d8}
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	3e4ccccd 	.word	0x3e4ccccd
 8005fe8:	3d75c28f 	.word	0x3d75c28f

08005fec <LSR_start>:

void LSR_start(float point[][7], int no_point, PathPlan_t *pp, uint8_t single, uint8_t right){
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	70fb      	strb	r3, [r7, #3]

	int i;
	for(i=0;i<no_point;i++){
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e07d      	b.n	80060fc <LSR_start+0x110>
		pp->target_vel[i] = point[i][0];
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4613      	mov	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	461a      	mov	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3378      	adds	r3, #120	; 0x78
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	440b      	add	r3, r1
 800601c:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1];
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	4613      	mov	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	461a      	mov	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	331e      	adds	r3, #30
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	601a      	str	r2, [r3, #0]
		pp->target_y[i] = point[i][2];
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	461a      	mov	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	332c      	adds	r3, #44	; 0x2c
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	3304      	adds	r3, #4
 800605a:	601a      	str	r2, [r3, #0]
		pp->target_z[i] = point[i][3];
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	461a      	mov	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	333c      	adds	r3, #60	; 0x3c
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4];
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	461a      	mov	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	3388      	adds	r3, #136	; 0x88
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	3304      	adds	r3, #4
 8006098:	601a      	str	r2, [r3, #0]
		pp->ku_y[i] = point[i][4];
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	461a      	mov	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	3398      	adds	r3, #152	; 0x98
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	601a      	str	r2, [r3, #0]
		pp->f_tol_xy[i]= point[i][5];
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4613      	mov	r3, r2
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	33c4      	adds	r3, #196	; 0xc4
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	601a      	str	r2, [r3, #0]
		pp->f_tol_z[i]= point[i][6];
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4613      	mov	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	461a      	mov	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	33d2      	adds	r3, #210	; 0xd2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	3304      	adds	r3, #4
 80060f4:	601a      	str	r2, [r3, #0]
	for(i=0;i<no_point;i++){
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	3301      	adds	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	429a      	cmp	r2, r3
 8006102:	f6ff af7d 	blt.w	8006000 <LSR_start+0x14>

	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006112:	4619      	mov	r1, r3
 8006114:	eeb0 0a67 	vmov.f32	s0, s15
 8006118:	2003      	movs	r0, #3
 800611a:	f7ff f9ac 	bl	8005476 <PIDGainSet>
	PIDGainSet(KU, 1.5, &(pp->y));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006124:	4619      	mov	r1, r3
 8006126:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800612a:	2003      	movs	r0, #3
 800612c:	f7ff f9a3 	bl	8005476 <PIDGainSet>
	PP_PIDEndSet(1.0, 1.5, 0.8, pp);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	ed9f 1a66 	vldr	s2, [pc, #408]	; 80062cc <LSR_start+0x2e0>
 8006136:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800613a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800613e:	f7ff fd3e 	bl	8005bbe <PP_PIDEndSet>

	if(right)
 8006142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d03f      	beq.n	80061ca <LSR_start+0x1de>
	{
		pp->error_x = -(pp->target_x[pp->point_count] - *(pp->lsrR));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	331e      	adds	r3, #30
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	ed93 7a00 	vldr	s14, [r3]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	edd3 7a00 	vldr	s15, [r3]
 8006164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006168:	eef1 7a67 	vneg.f32	s15, s15
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		if(fabs(pp->error_x)){
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800617c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006180:	d012      	beq.n	80061a8 <LSR_start+0x1bc>
			PIDGainSet(KE,1.0/fabs(pp->error_x),&(pp->x));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006188:	eef0 7ae7 	vabs.f32	s15, s15
 800618c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800619a:	4619      	mov	r1, r3
 800619c:	eeb0 0a47 	vmov.f32	s0, s14
 80061a0:	2002      	movs	r0, #2
 80061a2:	f7ff f968 	bl	8005476 <PIDGainSet>
 80061a6:	e008      	b.n	80061ba <LSR_start+0x1ce>
		} else {
			PIDGainSet(KE,1.0,&(pp->x));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80061ae:	4619      	mov	r1, r3
 80061b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80061b4:	2002      	movs	r0, #2
 80061b6:	f7ff f95e 	bl	8005476 <PIDGainSet>
		}
		pp->right_lsr = 1;
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80061c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c4:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
 80061c8:	e03c      	b.n	8006244 <LSR_start+0x258>
	}
	else
	{
		pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	331e      	adds	r3, #30
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	ed93 7a00 	vldr	s14, [r3]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	edd3 7a00 	vldr	s15, [r3]
 80061e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		if(fabs(pp->error_x)){
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80061f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80061f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fc:	d012      	beq.n	8006224 <LSR_start+0x238>
			PIDGainSet(KE,1.0/fabs(pp->error_x),&(pp->x));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006204:	eef0 7ae7 	vabs.f32	s15, s15
 8006208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006216:	4619      	mov	r1, r3
 8006218:	eeb0 0a47 	vmov.f32	s0, s14
 800621c:	2002      	movs	r0, #2
 800621e:	f7ff f92a 	bl	8005476 <PIDGainSet>
 8006222:	e008      	b.n	8006236 <LSR_start+0x24a>
		} else {
			PIDGainSet(KE,1.0,&(pp->x));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800622a:	4619      	mov	r1, r3
 800622c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006230:	2002      	movs	r0, #2
 8006232:	f7ff f920 	bl	8005476 <PIDGainSet>
		}

		pp->right_lsr = 0;
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800623c:	f36f 13c7 	bfc	r3, #7, #1
 8006240:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	}

	pp->target_point=no_point;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

	pp->lsr_start=1;
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8006252:	f043 0310 	orr.w	r3, r3, #16
 8006256:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->point_count=0;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
	pp->lsr_init=0;
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8006268:	f36f 0382 	bfc	r3, #2, #1
 800626c:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->pp_lck_enb = 0;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
	pp->pp_lck_count = 0.0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
	pp->pp_lck_cal   = 0.0;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	601a      	str	r2, [r3, #0]

	pp->rotate=0;
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8006296:	f36f 03c3 	bfc	r3, #3, #1
 800629a:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

	PIDDelayInit(&(pp->x));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fa38 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff fa32 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fa2c 	bl	800571a <PIDDelayInit>

}
 80062c2:	bf00      	nop
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	3f4ccccd 	.word	0x3f4ccccd

080062d0 <PP_stop>:

void PP_stop (PathPlan_t *pp){
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

	pp->pp_start=0;
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80062de:	f36f 0300 	bfc	r3, #0, #1
 80062e2:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->lsr_start=0;
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80062ec:	f36f 1304 	bfc	r3, #4, #1
 80062f0:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	PIDDelayInit(&(pp->x));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff fa0d 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fa07 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fa01 	bl	800571a <PIDDelayInit>


//	LED4 = 1;

	pp->pp_lck_enb = 0;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <PP_reset>:

void PP_reset (PathPlan_t *pp){
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->pos_y = 0.0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->prev_x = 0.0;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_y = 0.0;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	651a      	str	r2, [r3, #80]	; 0x50
	pp->prev_real_x = 0.0;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	649a      	str	r2, [r3, #72]	; 0x48
	pp->prev_real_y = 0.0;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	659a      	str	r2, [r3, #88]	; 0x58
	pp->del_pos_x = 0.0;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	65da      	str	r2, [r3, #92]	; 0x5c
	pp->del_pos_y = 0.0;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	661a      	str	r2, [r3, #96]	; 0x60
	//	pp->yaw_constant = 0.0;
	//	pp->yaw_offset = *(pp->yaw);
	//	pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	645a      	str	r2, [r3, #68]	; 0x44
	pp->real_y=0.0;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
	PIDDelayInit(&(pp->x));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff f9c7 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff f9c1 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff f9bb 	bl	800571a <PIDDelayInit>
	//	pp->real_z=0.0;
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp){
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80063b6:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30
	pp->yaw_constant=0;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	621a      	str	r2, [r3, #32]

}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp){
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]

	pp->pp_no_crv_pts = z;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	0000      	movs	r0, r0
 80063fc:	0000      	movs	r0, r0
	...

08006400 <PathPlan>:

void PathPlan (PathPlan_t *pp){
 8006400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006404:	ed2d 8b02 	vpush	{d8}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]

	if(pp->point_start){
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8150 	beq.w	80066c0 <PathPlan+0x2c0>
		pp->pos_x=*(pp->qeix);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	63da      	str	r2, [r3, #60]	; 0x3c
		pp->pos_y=*(pp->qeiy);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	64da      	str	r2, [r3, #76]	; 0x4c

		if(*(pp->yaw) < 50.0){
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	edd3 7a00 	vldr	s15, [r3]
 800643c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006478 <PathPlan+0x78>
 8006440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006448:	d518      	bpl.n	800647c <PathPlan+0x7c>
			if(pp->prev_yaw > 330.0){
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006450:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006474 <PathPlan+0x74>
 8006454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	dd2d      	ble.n	80064ba <PathPlan+0xba>
				pp->yaw_constant++;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006468:	ee77 7a87 	vadd.f32	s15, s15, s14
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 8006472:	e022      	b.n	80064ba <PathPlan+0xba>
 8006474:	43a50000 	.word	0x43a50000
 8006478:	42480000 	.word	0x42480000
			}
		}else if(*(pp->yaw) > 330.0){
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	edd3 7a00 	vldr	s15, [r3]
 8006484:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8006474 <PathPlan+0x74>
 8006488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800648c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006490:	dd13      	ble.n	80064ba <PathPlan+0xba>
			if(pp->prev_yaw < 50.0){
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	edd3 7a08 	vldr	s15, [r3, #32]
 8006498:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8006478 <PathPlan+0x78>
 800649c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	d509      	bpl.n	80064ba <PathPlan+0xba>
				pp->yaw_constant--;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80064ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			}
		}


		pp->prev_yaw = *(pp->yaw);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	621a      	str	r2, [r3, #32]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fa f83c 	bl	8000548 <__aeabi_f2d>
 80064d0:	4604      	mov	r4, r0
 80064d2:	460d      	mov	r5, r1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fa f835 	bl	8000548 <__aeabi_f2d>
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	4b75      	ldr	r3, [pc, #468]	; (80066b8 <PathPlan+0x2b8>)
 80064e4:	f7fa f888 	bl	80005f8 <__aeabi_dmul>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7f9 fecc 	bl	800028c <__adddf3>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	461d      	mov	r5, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	4618      	mov	r0, r3
 8006502:	f7fa f821 	bl	8000548 <__aeabi_f2d>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4620      	mov	r0, r4
 800650c:	4629      	mov	r1, r5
 800650e:	f7f9 febb 	bl	8000288 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4614      	mov	r4, r2
 8006518:	461d      	mov	r5, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	4618      	mov	r0, r3
 8006520:	f7fa f812 	bl	8000548 <__aeabi_f2d>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4620      	mov	r0, r4
 800652a:	4629      	mov	r1, r5
 800652c:	f7f9 feae 	bl	800028c <__adddf3>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	f7fa fb56 	bl	8000be8 <__aeabi_d2f>
 800653c:	4602      	mov	r2, r0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	625a      	str	r2, [r3, #36]	; 0x24
		pp->real_z_rad = (pp->real_z / 180.0) * 3.141593;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	4618      	mov	r0, r3
 8006548:	f7f9 fffe 	bl	8000548 <__aeabi_f2d>
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	4b5a      	ldr	r3, [pc, #360]	; (80066bc <PathPlan+0x2bc>)
 8006552:	f7fa f97b 	bl	800084c <__aeabi_ddiv>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4610      	mov	r0, r2
 800655c:	4619      	mov	r1, r3
 800655e:	a354      	add	r3, pc, #336	; (adr r3, 80066b0 <PathPlan+0x2b0>)
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f7fa f848 	bl	80005f8 <__aeabi_dmul>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4610      	mov	r0, r2
 800656e:	4619      	mov	r1, r3
 8006570:	f7fa fb3a 	bl	8000be8 <__aeabi_d2f>
 8006574:	4602      	mov	r2, r0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	62da      	str	r2, [r3, #44]	; 0x2c

		pp->del_pos_x = pp->pos_x - pp->prev_x;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		pp->del_pos_y = pp->pos_y - pp->prev_y;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800659c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80065b2:	ee37 8a67 	vsub.f32	s16, s14, s15
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80065bc:	eeb0 0a67 	vmov.f32	s0, s15
 80065c0:	f01d f9ca 	bl	8023958 <cosf>
 80065c4:	eef0 7a40 	vmov.f32	s15, s0
 80065c8:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80065d8:	ee77 8a67 	vsub.f32	s17, s14, s15
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80065e2:	eeb0 0a67 	vmov.f32	s0, s15
 80065e6:	f01d f9ff 	bl	80239e8 <sinf>
 80065ea:	eef0 7a40 	vmov.f32	s15, s0
 80065ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 80065f2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800660c:	eeb1 8a67 	vneg.f32	s16, s15
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006616:	eeb0 0a67 	vmov.f32	s0, s15
 800661a:	f01d f9e5 	bl	80239e8 <sinf>
 800661e:	eef0 7a40 	vmov.f32	s15, s0
 8006622:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006632:	ee77 8a67 	vsub.f32	s17, s14, s15
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800663c:	eeb0 0a67 	vmov.f32	s0, s15
 8006640:	f01d f98a 	bl	8023958 <cosf>
 8006644:	eef0 7a40 	vmov.f32	s15, s0
 8006648:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800664c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		pp->real_x = pp->real_x + pp->del_pos_x;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8006662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		pp->real_y = pp->real_y + pp->del_pos_y;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8006678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		pp->prev_x = pp->pos_x;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
		pp->prev_y = pp->pos_y;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	651a      	str	r2, [r3, #80]	; 0x50

		pp->prev_real_x = pp->real_x;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	649a      	str	r2, [r3, #72]	; 0x48
		pp->prev_real_y = pp->real_y;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	659a      	str	r2, [r3, #88]	; 0x58
		pp->prev_real_z= pp->real_z;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28
 80066aa:	e009      	b.n	80066c0 <PathPlan+0x2c0>
 80066ac:	f3af 8000 	nop.w
 80066b0:	82c2bd7f 	.word	0x82c2bd7f
 80066b4:	400921fb 	.word	0x400921fb
 80066b8:	40768000 	.word	0x40768000
 80066bc:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f002 8516 	beq.w	80090fe <PathPlan+0x2cfe>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f002 850d 	beq.w	80090fe <PathPlan+0x2cfe>

		if(pp->pp_crv_radius[pp->point_count]){
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	3304      	adds	r3, #4
 80066f6:	edd3 7a00 	vldr	s15, [r3]
 80066fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80066fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006702:	f001 8389 	beq.w	8007e18 <PathPlan+0x1a18>


			if(!pp->pp_crv_calc){
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 35a8 	ldr.w	r3, [r3, #1448]	; 0x5a8
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8208 	bne.w	8006b22 <PathPlan+0x722>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	331e      	adds	r3, #30
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	ed93 7a00 	vldr	s14, [r3]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800672a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800672e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006732:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	3304      	adds	r3, #4
 8006748:	edd3 8a00 	vldr	s17, [r3]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	332c      	adds	r3, #44	; 0x2c
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	ed93 7a00 	vldr	s14, [r3]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006766:	ee77 6a67 	vsub.f32	s13, s14, s15
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	331e      	adds	r3, #30
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	ed93 7a00 	vldr	s14, [r3]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006786:	eef0 0a67 	vmov.f32	s1, s15
 800678a:	eeb0 0a66 	vmov.f32	s0, s13
 800678e:	f01d f96d 	bl	8023a6c <atan2f>
 8006792:	eef0 7a40 	vmov.f32	s15, s0
 8006796:	eeb0 0a67 	vmov.f32	s0, s15
 800679a:	f01d f925 	bl	80239e8 <sinf>
 800679e:	eef0 7a40 	vmov.f32	s15, s0
 80067a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80067a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80067b0:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	332c      	adds	r3, #44	; 0x2c
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	3304      	adds	r3, #4
 80067c4:	ed93 7a00 	vldr	s14, [r3]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80067ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80067d6:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	3304      	adds	r3, #4
 80067ec:	edd3 8a00 	vldr	s17, [r3]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	332c      	adds	r3, #44	; 0x2c
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	3304      	adds	r3, #4
 8006800:	ed93 7a00 	vldr	s14, [r3]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800680a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	331e      	adds	r3, #30
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	ed93 7a00 	vldr	s14, [r3]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800682a:	eef0 0a67 	vmov.f32	s1, s15
 800682e:	eeb0 0a66 	vmov.f32	s0, s13
 8006832:	f01d f91b 	bl	8023a6c <atan2f>
 8006836:	eef0 7a40 	vmov.f32	s15, s0
 800683a:	eeb0 0a67 	vmov.f32	s0, s15
 800683e:	f01d f88b 	bl	8023958 <cosf>
 8006842:	eef0 7a40 	vmov.f32	s15, s0
 8006846:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800684a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8006854:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	333c      	adds	r3, #60	; 0x3c
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	edd3 6a00 	vldr	s13, [r3]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800687e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800689e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a6:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 80068aa:	2300      	movs	r3, #0
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	e12d      	b.n	8006b0c <PathPlan+0x70c>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 80068b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80068b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068bc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80068c0:	eeb0 0a67 	vmov.f32	s0, s15
 80068c4:	f01d f8d4 	bl	8023a70 <powf>
 80068c8:	eeb0 7a40 	vmov.f32	s14, s0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	ee17 0a90 	vmov	r0, s15
 80068da:	f7f9 fe35 	bl	8000548 <__aeabi_f2d>
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80068ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ee:	ee17 0a90 	vmov	r0, s15
 80068f2:	f7f9 fe29 	bl	8000548 <__aeabi_f2d>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	f7f9 fcc7 	bl	800028c <__adddf3>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4690      	mov	r8, r2
 8006904:	4699      	mov	r9, r3
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7f9 fe1e 	bl	8000548 <__aeabi_f2d>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4640      	mov	r0, r8
 8006912:	4649      	mov	r1, r9
 8006914:	f7f9 fe70 	bl	80005f8 <__aeabi_dmul>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4690      	mov	r8, r2
 800691e:	4699      	mov	r9, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f7f9 fe0d 	bl	8000548 <__aeabi_f2d>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	f7f9 fca3 	bl	800028c <__adddf3>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4614      	mov	r4, r2
 800694c:	461d      	mov	r5, r3
 800694e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006952:	ed97 0a03 	vldr	s0, [r7, #12]
 8006956:	f01d f88b 	bl	8023a70 <powf>
 800695a:	eeb0 7a40 	vmov.f32	s14, s0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	331e      	adds	r3, #30
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	edd3 7a00 	vldr	s15, [r3]
 8006970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006974:	ee17 0a90 	vmov	r0, s15
 8006978:	f7f9 fde6 	bl	8000548 <__aeabi_f2d>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4620      	mov	r0, r4
 8006982:	4629      	mov	r1, r5
 8006984:	f7f9 fc82 	bl	800028c <__adddf3>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	f7fa f92a 	bl	8000be8 <__aeabi_d2f>
 8006994:	4601      	mov	r1, r0
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 80069a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80069ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80069b4:	eeb0 0a67 	vmov.f32	s0, s15
 80069b8:	f01d f85a 	bl	8023a70 <powf>
 80069bc:	eeb0 7a40 	vmov.f32	s14, s0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80069c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ca:	ee17 0a90 	vmov	r0, s15
 80069ce:	f7f9 fdbb 	bl	8000548 <__aeabi_f2d>
 80069d2:	4604      	mov	r4, r0
 80069d4:	460d      	mov	r5, r1
 80069d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069da:	edd7 7a03 	vldr	s15, [r7, #12]
 80069de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069e2:	ee17 0a90 	vmov	r0, s15
 80069e6:	f7f9 fdaf 	bl	8000548 <__aeabi_f2d>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	f7f9 fc4d 	bl	800028c <__adddf3>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4690      	mov	r8, r2
 80069f8:	4699      	mov	r9, r3
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7f9 fda4 	bl	8000548 <__aeabi_f2d>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4640      	mov	r0, r8
 8006a06:	4649      	mov	r1, r9
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4690      	mov	r8, r2
 8006a12:	4699      	mov	r9, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7f9 fd93 	bl	8000548 <__aeabi_f2d>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7f9 fde5 	bl	80005f8 <__aeabi_dmul>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	f7f9 fc29 	bl	800028c <__adddf3>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461d      	mov	r5, r3
 8006a42:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006a46:	ed97 0a03 	vldr	s0, [r7, #12]
 8006a4a:	f01d f811 	bl	8023a70 <powf>
 8006a4e:	eeb0 7a40 	vmov.f32	s14, s0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	332c      	adds	r3, #44	; 0x2c
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	edd3 7a00 	vldr	s15, [r3]
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	ee17 0a90 	vmov	r0, s15
 8006a6e:	f7f9 fd6b 	bl	8000548 <__aeabi_f2d>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4620      	mov	r0, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	f7f9 fc07 	bl	800028c <__adddf3>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	f7fa f8af 	bl	8000be8 <__aeabi_d2f>
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	ed93 7a00 	vldr	s14, [r3]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	edd3 6a00 	vldr	s13, [r3]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afa:	ed97 7a03 	vldr	s14, [r7, #12]
 8006afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b02:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60bb      	str	r3, [r7, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	f6ff aecb 	blt.w	80068b0 <PathPlan+0x4b0>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	ed93 7a00 	vldr	s14, [r3]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	ed93 7a00 	vldr	s14, [r3]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	ed93 7a00 	vldr	s14, [r3]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d14a      	bne.n	8006c36 <PathPlan+0x836>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006ba6:	eef0 7ae7 	vabs.f32	s15, s15
 8006baa:	ee17 0a90 	vmov	r0, s15
 8006bae:	f7f9 fccb 	bl	8000548 <__aeabi_f2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006bbc:	eef0 7ae7 	vabs.f32	s15, s15
 8006bc0:	ee17 0a90 	vmov	r0, s15
 8006bc4:	f7f9 fcc0 	bl	8000548 <__aeabi_f2d>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fb5c 	bl	800028c <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4619      	mov	r1, r3
 8006bdc:	f04f 0200 	mov.w	r2, #0
 8006be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006be4:	f7f9 fe32 	bl	800084c <__aeabi_ddiv>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7f9 fca6 	bl	8000548 <__aeabi_f2d>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d013      	beq.n	8006c36 <PathPlan+0x836>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8006c14:	eeb0 7ae7 	vabs.f32	s14, s15
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 8006c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c26:	d506      	bpl.n	8006c36 <PathPlan+0x836>
				pp->pp_lck = 1.0;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006c2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e005      	b.n	8006c42 <PathPlan+0x842>
			else
				pp->pp_lck = 0.0;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006c48:	edd3 7a00 	vldr	s15, [r3]
 8006c4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006c5a:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006c64:	edd3 7a00 	vldr	s15, [r3]
 8006c68:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006f00 <PathPlan+0xb00>
 8006c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c74:	d811      	bhi.n	8006c9a <PathPlan+0x89a>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006c7c:	ed93 7a00 	vldr	s14, [r3]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006c86:	edd3 7a00 	vldr	s15, [r3]
 8006c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006c94:	edc3 7a00 	vstr	s15, [r3]
 8006c98:	e034      	b.n	8006d04 <PathPlan+0x904>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006ca0:	edd3 6a00 	vldr	s13, [r3]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006caa:	ed93 7a00 	vldr	s14, [r3]
 8006cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006cb8:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7f9 fc3f 	bl	8000548 <__aeabi_f2d>
 8006cca:	a38b      	add	r3, pc, #556	; (adr r3, 8006ef8 <PathPlan+0xaf8>)
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f7f9 ff18 	bl	8000b04 <__aeabi_dcmpge>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <PathPlan+0x8e4>
					pp->pp_lck_enb = 1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8006ce2:	e003      	b.n	8006cec <PathPlan+0x8ec>
				else
					pp->pp_lck_enb = 0;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
				pp->pp_lck_count = 0.0;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006d0a:	eef0 7ae7 	vabs.f32	s15, s15
 8006d0e:	ee17 0a90 	vmov	r0, s15
 8006d12:	f7f9 fc19 	bl	8000548 <__aeabi_f2d>
 8006d16:	4604      	mov	r4, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006d20:	eef0 7ae7 	vabs.f32	s15, s15
 8006d24:	ee17 0a90 	vmov	r0, s15
 8006d28:	f7f9 fc0e 	bl	8000548 <__aeabi_f2d>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4620      	mov	r0, r4
 8006d32:	4629      	mov	r1, r5
 8006d34:	f7f9 faaa 	bl	800028c <__adddf3>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d48:	f7f9 fd80 	bl	800084c <__aeabi_ddiv>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	461d      	mov	r5, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7f9 fbf4 	bl	8000548 <__aeabi_f2d>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7f9 feb8 	bl	8000adc <__aeabi_dcmplt>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8462 	beq.w	8007638 <PathPlan+0x1238>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006d80:	3b01      	subs	r3, #1
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f280 8135 	bge.w	8006ff2 <PathPlan+0xbf2>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8006d8e:	edd3 7a00 	vldr	s15, [r3]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8006d98:	4619      	mov	r1, r3
 8006d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d9e:	2004      	movs	r0, #4
 8006da0:	f7fe fb69 	bl	8005476 <PIDGainSet>
					pp->crnt_crv_pt++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	ed93 7a00 	vldr	s14, [r3]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	ed93 7a00 	vldr	s14, [r3]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	ed93 7a00 	vldr	s14, [r3]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

					if(pp->target_x[pp->point_count]-pp->real_x){
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	331e      	adds	r3, #30
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	ed93 7a00 	vldr	s14, [r3]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e42:	d01d      	beq.n	8006e80 <PathPlan+0xa80>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	331e      	adds	r3, #30
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	ed93 7a00 	vldr	s14, [r3]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e60:	eef0 7ae7 	vabs.f32	s15, s15
 8006e64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006e72:	4619      	mov	r1, r3
 8006e74:	eeb0 0a47 	vmov.f32	s0, s14
 8006e78:	2002      	movs	r0, #2
 8006e7a:	f7fe fafc 	bl	8005476 <PIDGainSet>
 8006e7e:	e008      	b.n	8006e92 <PathPlan+0xa92>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006e86:	4619      	mov	r1, r3
 8006e88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	f7fe faf2 	bl	8005476 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	332c      	adds	r3, #44	; 0x2c
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	ed93 7a00 	vldr	s14, [r3]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb8:	d024      	beq.n	8006f04 <PathPlan+0xb04>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	332c      	adds	r3, #44	; 0x2c
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3304      	adds	r3, #4
 8006eca:	ed93 7a00 	vldr	s14, [r3]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ed8:	eef0 7ae7 	vabs.f32	s15, s15
 8006edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006eea:	4619      	mov	r1, r3
 8006eec:	eeb0 0a47 	vmov.f32	s0, s14
 8006ef0:	2002      	movs	r0, #2
 8006ef2:	f7fe fac0 	bl	8005476 <PIDGainSet>
 8006ef6:	e00e      	b.n	8006f16 <PathPlan+0xb16>
 8006ef8:	66666666 	.word	0x66666666
 8006efc:	3fee6666 	.word	0x3fee6666
 8006f00:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f10:	2002      	movs	r0, #2
 8006f12:	f7fe fab0 	bl	8005476 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006f22:	4619      	mov	r1, r3
 8006f24:	eeb0 0a67 	vmov.f32	s0, s15
 8006f28:	2004      	movs	r0, #4
 8006f2a:	f7fe faa4 	bl	8005476 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f40:	2004      	movs	r0, #4
 8006f42:	f7fe fa98 	bl	8005476 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006f52:	4619      	mov	r1, r3
 8006f54:	eeb0 0a67 	vmov.f32	s0, s15
 8006f58:	2005      	movs	r0, #5
 8006f5a:	f7fe fa8c 	bl	8005476 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f70:	2005      	movs	r0, #5
 8006f72:	f7fe fa80 	bl	8005476 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006f82:	4619      	mov	r1, r3
 8006f84:	eeb0 0a67 	vmov.f32	s0, s15
 8006f88:	2006      	movs	r0, #6
 8006f8a:	f7fe fa74 	bl	8005476 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa0:	2006      	movs	r0, #6
 8006fa2:	f7fe fa68 	bl	8005476 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	3388      	adds	r3, #136	; 0x88
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	edd3 7a00 	vldr	s15, [r3]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fc6:	2003      	movs	r0, #3
 8006fc8:	f7fe fa55 	bl	8005476 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	3398      	adds	r3, #152	; 0x98
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	edd3 7a00 	vldr	s15, [r3]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8006fea:	2003      	movs	r0, #3
 8006fec:	f7fe fa43 	bl	8005476 <PIDGainSet>
 8006ff0:	e322      	b.n	8007638 <PathPlan+0x1238>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006ffe:	3b01      	subs	r3, #1
 8007000:	429a      	cmp	r2, r3
 8007002:	f040 8252 	bne.w	80074aa <PathPlan+0x10aa>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007012:	3b01      	subs	r3, #1
 8007014:	429a      	cmp	r2, r3
 8007016:	f280 8248 	bge.w	80074aa <PathPlan+0x10aa>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8007020:	eef0 7ae7 	vabs.f32	s15, s15
 8007024:	ee17 0a90 	vmov	r0, s15
 8007028:	f7f9 fa8e 	bl	8000548 <__aeabi_f2d>
 800702c:	4604      	mov	r4, r0
 800702e:	460d      	mov	r5, r1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007036:	eef0 7ae7 	vabs.f32	s15, s15
 800703a:	ee17 0a90 	vmov	r0, s15
 800703e:	f7f9 fa83 	bl	8000548 <__aeabi_f2d>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4620      	mov	r0, r4
 8007048:	4629      	mov	r1, r5
 800704a:	f7f9 f91f 	bl	800028c <__adddf3>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4610      	mov	r0, r2
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800705e:	f7f9 fbf5 	bl	800084c <__aeabi_ddiv>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4614      	mov	r4, r2
 8007068:	461d      	mov	r5, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8007070:	4618      	mov	r0, r3
 8007072:	f7f9 fa69 	bl	8000548 <__aeabi_f2d>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4620      	mov	r0, r4
 800707c:	4629      	mov	r1, r5
 800707e:	f7f9 fd2d 	bl	8000adc <__aeabi_dcmplt>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 82d6 	beq.w	8007636 <PathPlan+0x1236>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007090:	eeb0 7ae7 	vabs.f32	s14, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 800709a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800709e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a2:	d400      	bmi.n	80070a6 <PathPlan+0xca6>
 80070a4:	e2c7      	b.n	8007636 <PathPlan+0x1236>
						if(pp->target_accurate[pp->point_count] == 1.0){
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	334a      	adds	r3, #74	; 0x4a
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	3304      	adds	r3, #4
 80070b6:	edd3 7a00 	vldr	s15, [r3]
 80070ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070be:	eef4 7a47 	vcmp.f32	s15, s14
 80070c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c6:	f040 80fd 	bne.w	80072c4 <PathPlan+0xec4>
							if(pp->pp_lck_enb == 1){
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	f040 82b0 	bne.w	8007636 <PathPlan+0x1236>

								pp->point_count++;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
								if(pp->target_x[pp->point_count]-pp->real_x){
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	331e      	adds	r3, #30
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	ed93 7a00 	vldr	s14, [r3]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80070fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007100:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007108:	d01d      	beq.n	8007146 <PathPlan+0xd46>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	331e      	adds	r3, #30
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	ed93 7a00 	vldr	s14, [r3]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007126:	eef0 7ae7 	vabs.f32	s15, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007138:	4619      	mov	r1, r3
 800713a:	eeb0 0a47 	vmov.f32	s0, s14
 800713e:	2002      	movs	r0, #2
 8007140:	f7fe f999 	bl	8005476 <PIDGainSet>
 8007144:	e008      	b.n	8007158 <PathPlan+0xd58>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800714c:	4619      	mov	r1, r3
 800714e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007152:	2002      	movs	r0, #2
 8007154:	f7fe f98f 	bl	8005476 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	332c      	adds	r3, #44	; 0x2c
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	3304      	adds	r3, #4
 8007168:	ed93 7a00 	vldr	s14, [r3]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007176:	eef5 7a40 	vcmp.f32	s15, #0.0
 800717a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717e:	d01e      	beq.n	80071be <PathPlan+0xdbe>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	332c      	adds	r3, #44	; 0x2c
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	3304      	adds	r3, #4
 8007190:	ed93 7a00 	vldr	s14, [r3]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800719a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800719e:	eef0 7ae7 	vabs.f32	s15, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80071b0:	4619      	mov	r1, r3
 80071b2:	eeb0 0a47 	vmov.f32	s0, s14
 80071b6:	2002      	movs	r0, #2
 80071b8:	f7fe f95d 	bl	8005476 <PIDGainSet>
 80071bc:	e008      	b.n	80071d0 <PathPlan+0xdd0>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80071c4:	4619      	mov	r1, r3
 80071c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80071ca:	2002      	movs	r0, #2
 80071cc:	f7fe f953 	bl	8005476 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80071dc:	4619      	mov	r1, r3
 80071de:	eeb0 0a67 	vmov.f32	s0, s15
 80071e2:	2004      	movs	r0, #4
 80071e4:	f7fe f947 	bl	8005476 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80071f4:	4619      	mov	r1, r3
 80071f6:	eeb0 0a67 	vmov.f32	s0, s15
 80071fa:	2004      	movs	r0, #4
 80071fc:	f7fe f93b 	bl	8005476 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800720c:	4619      	mov	r1, r3
 800720e:	eeb0 0a67 	vmov.f32	s0, s15
 8007212:	2005      	movs	r0, #5
 8007214:	f7fe f92f 	bl	8005476 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007224:	4619      	mov	r1, r3
 8007226:	eeb0 0a67 	vmov.f32	s0, s15
 800722a:	2005      	movs	r0, #5
 800722c:	f7fe f923 	bl	8005476 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800723c:	4619      	mov	r1, r3
 800723e:	eeb0 0a67 	vmov.f32	s0, s15
 8007242:	2006      	movs	r0, #6
 8007244:	f7fe f917 	bl	8005476 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007254:	4619      	mov	r1, r3
 8007256:	eeb0 0a67 	vmov.f32	s0, s15
 800725a:	2006      	movs	r0, #6
 800725c:	f7fe f90b 	bl	8005476 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	3388      	adds	r3, #136	; 0x88
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	3304      	adds	r3, #4
 8007270:	edd3 7a00 	vldr	s15, [r3]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800727a:	4619      	mov	r1, r3
 800727c:	eeb0 0a67 	vmov.f32	s0, s15
 8007280:	2003      	movs	r0, #3
 8007282:	f7fe f8f8 	bl	8005476 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	3398      	adds	r3, #152	; 0x98
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	edd3 7a00 	vldr	s15, [r3]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800729e:	4619      	mov	r1, r3
 80072a0:	eeb0 0a67 	vmov.f32	s0, s15
 80072a4:	2003      	movs	r0, #3
 80072a6:	f7fe f8e6 	bl	8005476 <PIDGainSet>
								pp->crnt_crv_pt=0;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
								pp->pp_crv_calc = 0;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8

								pp->pp_lck_enb = 0;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80072c2:	e1b8      	b.n	8007636 <PathPlan+0x1236>

							}
						}else{
							pp->point_count++;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
							if(pp->target_x[pp->point_count]-pp->real_x){
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	331e      	adds	r3, #30
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	ed93 7a00 	vldr	s14, [r3]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80072ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80072f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f6:	d01d      	beq.n	8007334 <PathPlan+0xf34>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	331e      	adds	r3, #30
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	ed93 7a00 	vldr	s14, [r3]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007314:	eef0 7ae7 	vabs.f32	s15, s15
 8007318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007326:	4619      	mov	r1, r3
 8007328:	eeb0 0a47 	vmov.f32	s0, s14
 800732c:	2002      	movs	r0, #2
 800732e:	f7fe f8a2 	bl	8005476 <PIDGainSet>
 8007332:	e008      	b.n	8007346 <PathPlan+0xf46>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800733a:	4619      	mov	r1, r3
 800733c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007340:	2002      	movs	r0, #2
 8007342:	f7fe f898 	bl	8005476 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	332c      	adds	r3, #44	; 0x2c
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	3304      	adds	r3, #4
 8007356:	ed93 7a00 	vldr	s14, [r3]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007364:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736c:	d01e      	beq.n	80073ac <PathPlan+0xfac>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	332c      	adds	r3, #44	; 0x2c
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	3304      	adds	r3, #4
 800737e:	ed93 7a00 	vldr	s14, [r3]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800738c:	eef0 7ae7 	vabs.f32	s15, s15
 8007390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800739e:	4619      	mov	r1, r3
 80073a0:	eeb0 0a47 	vmov.f32	s0, s14
 80073a4:	2002      	movs	r0, #2
 80073a6:	f7fe f866 	bl	8005476 <PIDGainSet>
 80073aa:	e008      	b.n	80073be <PathPlan+0xfbe>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80073b2:	4619      	mov	r1, r3
 80073b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80073b8:	2002      	movs	r0, #2
 80073ba:	f7fe f85c 	bl	8005476 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80073ca:	4619      	mov	r1, r3
 80073cc:	eeb0 0a67 	vmov.f32	s0, s15
 80073d0:	2004      	movs	r0, #4
 80073d2:	f7fe f850 	bl	8005476 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80073e2:	4619      	mov	r1, r3
 80073e4:	eeb0 0a67 	vmov.f32	s0, s15
 80073e8:	2004      	movs	r0, #4
 80073ea:	f7fe f844 	bl	8005476 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80073fa:	4619      	mov	r1, r3
 80073fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007400:	2005      	movs	r0, #5
 8007402:	f7fe f838 	bl	8005476 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007412:	4619      	mov	r1, r3
 8007414:	eeb0 0a67 	vmov.f32	s0, s15
 8007418:	2005      	movs	r0, #5
 800741a:	f7fe f82c 	bl	8005476 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800742a:	4619      	mov	r1, r3
 800742c:	eeb0 0a67 	vmov.f32	s0, s15
 8007430:	2006      	movs	r0, #6
 8007432:	f7fe f820 	bl	8005476 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007442:	4619      	mov	r1, r3
 8007444:	eeb0 0a67 	vmov.f32	s0, s15
 8007448:	2006      	movs	r0, #6
 800744a:	f7fe f814 	bl	8005476 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	3388      	adds	r3, #136	; 0x88
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	3304      	adds	r3, #4
 800745e:	edd3 7a00 	vldr	s15, [r3]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007468:	4619      	mov	r1, r3
 800746a:	eeb0 0a67 	vmov.f32	s0, s15
 800746e:	2003      	movs	r0, #3
 8007470:	f7fe f801 	bl	8005476 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	3398      	adds	r3, #152	; 0x98
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	edd3 7a00 	vldr	s15, [r3]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800748c:	4619      	mov	r1, r3
 800748e:	eeb0 0a67 	vmov.f32	s0, s15
 8007492:	2003      	movs	r0, #3
 8007494:	f7fd ffef 	bl	8005476 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
							pp->pp_crv_calc = 0;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80074a8:	e0c5      	b.n	8007636 <PathPlan+0x1236>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80074b6:	3b01      	subs	r3, #1
 80074b8:	429a      	cmp	r2, r3
 80074ba:	f040 80bd 	bne.w	8007638 <PathPlan+0x1238>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80074ca:	3b01      	subs	r3, #1
 80074cc:	429a      	cmp	r2, r3
 80074ce:	f040 80b3 	bne.w	8007638 <PathPlan+0x1238>

					if(fabs(pp->error_x)< pp->f_tol_xy[0] && fabs(pp->error_y)<pp->f_tol_xy[0] && (int)pp->error_z<=pp->f_tol_z[0]){
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80074d8:	eeb0 7ae7 	vabs.f32	s14, s15
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 80074e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ea:	f140 80a5 	bpl.w	8007638 <PathPlan+0x1238>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80074f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 80074fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007506:	f140 8097 	bpl.w	8007638 <PathPlan+0x1238>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	edd3 7ad3 	vldr	s15, [r3, #844]	; 0x34c
 800751e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007526:	f200 8087 	bhi.w	8007638 <PathPlan+0x1238>

						if(pp->target_accurate[pp->point_count] == 1.0){
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	334a      	adds	r3, #74	; 0x4a
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	3304      	adds	r3, #4
 800753a:	edd3 7a00 	vldr	s15, [r3]
 800753e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007542:	eef4 7a47 	vcmp.f32	s15, s14
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	d13e      	bne.n	80075ca <PathPlan+0x11ca>
							if(pp->pp_lck_enb == 1){
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8007552:	2b01      	cmp	r3, #1
 8007554:	d170      	bne.n	8007638 <PathPlan+0x1238>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 800755c:	edd3 7a00 	vldr	s15, [r3]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007566:	4619      	mov	r1, r3
 8007568:	eeb0 0a67 	vmov.f32	s0, s15
 800756c:	2004      	movs	r0, #4
 800756e:	f7fd ff82 	bl	8005476 <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8007572:	2201      	movs	r2, #1
 8007574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007578:	487e      	ldr	r0, [pc, #504]	; (8007774 <PathPlan+0x1374>)
 800757a:	f010 f919 	bl	80177b0 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe f8c8 	bl	800571a <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe f8c2 	bl	800571a <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f8bc 	bl	800571a <PIDDelayInit>
								pp->crnt_crv_pt=0;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
								pp->pp_crv_calc = 0;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
								pp->pp_start=0;
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80075b8:	f36f 0300 	bfc	r3, #0, #1
 80075bc:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
								pp->pp_lck_enb = 0;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80075c8:	e036      	b.n	8007638 <PathPlan+0x1238>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 80075d0:	edd3 7a00 	vldr	s15, [r3]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80075da:	4619      	mov	r1, r3
 80075dc:	eeb0 0a67 	vmov.f32	s0, s15
 80075e0:	2004      	movs	r0, #4
 80075e2:	f7fd ff48 	bl	8005476 <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80075e6:	2201      	movs	r2, #1
 80075e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075ec:	4861      	ldr	r0, [pc, #388]	; (8007774 <PathPlan+0x1374>)
 80075ee:	f010 f8df 	bl	80177b0 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fe f88e 	bl	800571a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe f888 	bl	800571a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe f882 	bl	800571a <PIDDelayInit>
							pp->crnt_crv_pt=0;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
							pp->pp_crv_calc = 0;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
							pp->pp_start=0;
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800762c:	f36f 0300 	bfc	r3, #0, #1
 8007630:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
 8007634:	e000      	b.n	8007638 <PathPlan+0x1238>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007636:	bf00      	nop

				}
			}


			if(pp->pp_start){
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	f002 87bd 	beq.w	800a5c4 <PathPlan+0x41c4>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	ed93 7a00 	vldr	s14, [r3]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	ed93 7a00 	vldr	s14, [r3]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

				pp->rotate=0;
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8007698:	f36f 03c3 	bfc	r3, #3, #1
 800769c:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80076a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ae:	d107      	bne.n	80076c0 <PathPlan+0x12c0>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80076b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076be:	d021      	beq.n	8007704 <PathPlan+0x1304>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80076c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	d107      	bne.n	80076e0 <PathPlan+0x12e0>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80076d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076de:	d011      	beq.n	8007704 <PathPlan+0x1304>
					pp->heading = atan2f(pp->dy, pp->dx);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80076ec:	eef0 0a47 	vmov.f32	s1, s14
 80076f0:	eeb0 0a67 	vmov.f32	s0, s15
 80076f4:	f01c f9ba 	bl	8023a6c <atan2f>
 80076f8:	eef0 7a40 	vmov.f32	s15, s0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8007702:	e048      	b.n	8007796 <PathPlan+0x1396>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800770a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007712:	d007      	beq.n	8007724 <PathPlan+0x1324>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800771a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d10b      	bne.n	800773c <PathPlan+0x133c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800772a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	d503      	bpl.n	800773c <PathPlan+0x133c>
						pp->heading = 1.5708;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a10      	ldr	r2, [pc, #64]	; (8007778 <PathPlan+0x1378>)
 8007738:	66da      	str	r2, [r3, #108]	; 0x6c
 800773a:	e02c      	b.n	8007796 <PathPlan+0x1396>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8007742:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800774a:	d007      	beq.n	800775c <PathPlan+0x135c>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8007752:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800775a:	d111      	bne.n	8007780 <PathPlan+0x1380>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8007762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776a:	dd09      	ble.n	8007780 <PathPlan+0x1380>
						pp->heading = -1.5708;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a03      	ldr	r2, [pc, #12]	; (800777c <PathPlan+0x137c>)
 8007770:	66da      	str	r2, [r3, #108]	; 0x6c
 8007772:	e010      	b.n	8007796 <PathPlan+0x1396>
 8007774:	40020800 	.word	0x40020800
 8007778:	3fc90ff9 	.word	0x3fc90ff9
 800777c:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	66da      	str	r2, [r3, #108]	; 0x6c
						pp->rotate = 1;
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800778e:	f043 0308 	orr.w	r3, r3, #8
 8007792:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	3378      	adds	r3, #120	; 0x78
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	ed93 8a00 	vldr	s16, [r3]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80077ae:	eeb0 0a67 	vmov.f32	s0, s15
 80077b2:	f01c f8d1 	bl	8023958 <cosf>
 80077b6:	eef0 7a40 	vmov.f32	s15, s0
 80077ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	3378      	adds	r3, #120	; 0x78
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	ed93 8a00 	vldr	s16, [r3]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80077dc:	eeb0 0a67 	vmov.f32	s0, s15
 80077e0:	f01c f902 	bl	80239e8 <sinf>
 80077e4:	eef0 7a40 	vmov.f32	s15, s0
 80077e8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

				if(pp->rotate){
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <PathPlan+0x1412>
					pp->vx = pp->vy = 0.0;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	675a      	str	r2, [r3, #116]	; 0x74
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	671a      	str	r2, [r3, #112]	; 0x70
				}

				PID(&(pp->x));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd ff9c 	bl	8005756 <PID>
				PID(&(pp->y));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007824:	4618      	mov	r0, r3
 8007826:	f7fd ff96 	bl	8005756 <PID>
				PID(&(pp->z));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007830:	4618      	mov	r0, r3
 8007832:	f7fd ff90 	bl	8005756 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007842:	eeb0 0a67 	vmov.f32	s0, s15
 8007846:	f01c f887 	bl	8023958 <cosf>
 800784a:	eef0 7a40 	vmov.f32	s15, s0
 800784e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800785e:	eeb0 0a67 	vmov.f32	s0, s15
 8007862:	f01c f8c1 	bl	80239e8 <sinf>
 8007866:	eef0 7a40 	vmov.f32	s15, s0
 800786a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800786e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edc3 7ab6 	vstr	s15, [r3, #728]	; 0x2d8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007884:	eeb0 0a67 	vmov.f32	s0, s15
 8007888:	f01c f8ae 	bl	80239e8 <sinf>
 800788c:	eef0 7a40 	vmov.f32	s15, s0
 8007890:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80078a0:	eeb0 0a67 	vmov.f32	s0, s15
 80078a4:	f01c f858 	bl	8023958 <cosf>
 80078a8:	eef0 7a40 	vmov.f32	s15, s0
 80078ac:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80078b0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80078c6:	eeb0 0a67 	vmov.f32	s0, s15
 80078ca:	f01c f845 	bl	8023958 <cosf>
 80078ce:	eef0 7a40 	vmov.f32	s15, s0
 80078d2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80078e2:	eeb0 0a67 	vmov.f32	s0, s15
 80078e6:	f01c f87f 	bl	80239e8 <sinf>
 80078ea:	eef0 7a40 	vmov.f32	s15, s0
 80078ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80078f2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007908:	eeb0 0a67 	vmov.f32	s0, s15
 800790c:	f01c f86c 	bl	80239e8 <sinf>
 8007910:	eef0 7a40 	vmov.f32	s15, s0
 8007914:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007924:	eeb0 0a67 	vmov.f32	s0, s15
 8007928:	f01c f816 	bl	8023958 <cosf>
 800792c:	eef0 7a40 	vmov.f32	s15, s0
 8007930:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007934:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4

				if(pp->base_shape== 0){
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 8161 	bne.w	8007c0c <PathPlan+0x180c>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8007956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800795a:	ee17 0a90 	vmov	r0, s15
 800795e:	f7f8 fdf3 	bl	8000548 <__aeabi_f2d>
 8007962:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fe45 	bl	80005f8 <__aeabi_dmul>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4614      	mov	r4, r2
 8007974:	461d      	mov	r5, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800797c:	4618      	mov	r0, r3
 800797e:	f7f8 fde3 	bl	8000548 <__aeabi_f2d>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4620      	mov	r0, r4
 8007988:	4629      	mov	r1, r5
 800798a:	f7f8 fc7d 	bl	8000288 <__aeabi_dsub>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4610      	mov	r0, r2
 8007994:	4619      	mov	r1, r3
 8007996:	f7f9 f927 	bl	8000be8 <__aeabi_d2f>
 800799a:	4602      	mov	r2, r0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80079ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079b2:	ee17 0a90 	vmov	r0, s15
 80079b6:	f7f8 fdc7 	bl	8000548 <__aeabi_f2d>
 80079ba:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f7f8 fe19 	bl	80005f8 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4614      	mov	r4, r2
 80079cc:	461d      	mov	r5, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7f8 fdb7 	bl	8000548 <__aeabi_f2d>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4620      	mov	r0, r4
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7f8 fc53 	bl	800028c <__adddf3>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7f9 f8fb 	bl	8000be8 <__aeabi_d2f>
 80079f2:	4602      	mov	r2, r0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8007a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a0a:	ee17 0a90 	vmov	r0, s15
 8007a0e:	f7f8 fd9b 	bl	8000548 <__aeabi_f2d>
 8007a12:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	f7f8 fded 	bl	80005f8 <__aeabi_dmul>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4614      	mov	r4, r2
 8007a24:	461d      	mov	r5, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7f8 fd8b 	bl	8000548 <__aeabi_f2d>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 fc27 	bl	800028c <__adddf3>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	f7f9 f8cf 	bl	8000be8 <__aeabi_d2f>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8007a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a62:	ee17 0a90 	vmov	r0, s15
 8007a66:	f7f8 fd6f 	bl	8000548 <__aeabi_f2d>
 8007a6a:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4614      	mov	r4, r2
 8007a7c:	461d      	mov	r5, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7f8 fd5f 	bl	8000548 <__aeabi_f2d>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7f8 fbf9 	bl	8000288 <__aeabi_dsub>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f7f9 f8a3 	bl	8000be8 <__aeabi_d2f>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aba:	ee17 0a90 	vmov	r0, s15
 8007abe:	f7f8 fd43 	bl	8000548 <__aeabi_f2d>
 8007ac2:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	f7f8 fd95 	bl	80005f8 <__aeabi_dmul>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	461d      	mov	r5, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f8 fd33 	bl	8000548 <__aeabi_f2d>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f8 fbcf 	bl	800028c <__adddf3>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4610      	mov	r0, r2
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7f9 f877 	bl	8000be8 <__aeabi_d2f>
 8007afa:	4602      	mov	r2, r0
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b12:	ee17 0a90 	vmov	r0, s15
 8007b16:	f7f8 fd17 	bl	8000548 <__aeabi_f2d>
 8007b1a:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8007b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b22:	f7f8 fd69 	bl	80005f8 <__aeabi_dmul>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4614      	mov	r4, r2
 8007b2c:	461d      	mov	r5, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7f8 fd07 	bl	8000548 <__aeabi_f2d>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f8 fba3 	bl	800028c <__adddf3>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f7f9 f84b 	bl	8000be8 <__aeabi_d2f>
 8007b52:	4602      	mov	r2, r0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b6a:	ee17 0a90 	vmov	r0, s15
 8007b6e:	f7f8 fceb 	bl	8000548 <__aeabi_f2d>
 8007b72:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f7f8 fd3d 	bl	80005f8 <__aeabi_dmul>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4614      	mov	r4, r2
 8007b84:	461d      	mov	r5, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7f8 fcdb 	bl	8000548 <__aeabi_f2d>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fb77 	bl	800028c <__adddf3>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f7f9 f81f 	bl	8000be8 <__aeabi_d2f>
 8007baa:	4602      	mov	r2, r0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bc2:	ee17 0a90 	vmov	r0, s15
 8007bc6:	f7f8 fcbf 	bl	8000548 <__aeabi_f2d>
 8007bca:	a3f4      	add	r3, pc, #976	; (adr r3, 8007f9c <PathPlan+0x1b9c>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fd12 	bl	80005f8 <__aeabi_dmul>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4614      	mov	r4, r2
 8007bda:	461d      	mov	r5, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f8 fcb0 	bl	8000548 <__aeabi_f2d>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 fb4c 	bl	800028c <__adddf3>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	f7f8 fff4 	bl	8000be8 <__aeabi_d2f>
 8007c00:	4602      	mov	r2, r0
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if(pp->pp_crv_radius[pp->point_count]){
 8007c08:	f002 bcdc 	b.w	800a5c4 <PathPlan+0x41c4>

					//				pp->move(pp->v2,pp->v1,pp->v3,pp->v4,pp->rns);
				} else if(pp->base_shape==1){
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	f042 84d6 	bne.w	800a5c4 <PathPlan+0x41c4>

					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f8 fc92 	bl	8000548 <__aeabi_f2d>
 8007c24:	a3d8      	add	r3, pc, #864	; (adr r3, 8007f88 <PathPlan+0x1b88>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 fce5 	bl	80005f8 <__aeabi_dmul>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4614      	mov	r4, r2
 8007c34:	461d      	mov	r5, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7f8 fc83 	bl	8000548 <__aeabi_f2d>
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	4bd2      	ldr	r3, [pc, #840]	; (8007f90 <PathPlan+0x1b90>)
 8007c48:	f7f8 fcd6 	bl	80005f8 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	461d      	mov	r5, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f8 fc6e 	bl	8000548 <__aeabi_f2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4620      	mov	r0, r4
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7f8 fb0a 	bl	800028c <__adddf3>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f7f8 ffb2 	bl	8000be8 <__aeabi_d2f>
 8007c84:	4602      	mov	r2, r0
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7f8 fc58 	bl	8000548 <__aeabi_f2d>
 8007c98:	a3bb      	add	r3, pc, #748	; (adr r3, 8007f88 <PathPlan+0x1b88>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fcab 	bl	80005f8 <__aeabi_dmul>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	461d      	mov	r5, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7f8 fc49 	bl	8000548 <__aeabi_f2d>
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	4bb5      	ldr	r3, [pc, #724]	; (8007f90 <PathPlan+0x1b90>)
 8007cbc:	f7f8 fc9c 	bl	80005f8 <__aeabi_dmul>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 fae0 	bl	800028c <__adddf3>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	461d      	mov	r5, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7f8 fc34 	bl	8000548 <__aeabi_f2d>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 face 	bl	8000288 <__aeabi_dsub>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f7f8 ff78 	bl	8000be8 <__aeabi_d2f>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8007d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7f8 fc13 	bl	8000548 <__aeabi_f2d>
 8007d22:	a399      	add	r3, pc, #612	; (adr r3, 8007f88 <PathPlan+0x1b88>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fc66 	bl	80005f8 <__aeabi_dmul>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4614      	mov	r4, r2
 8007d32:	461d      	mov	r5, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7f8 fc04 	bl	8000548 <__aeabi_f2d>
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <PathPlan+0x1b90>)
 8007d46:	f7f8 fc57 	bl	80005f8 <__aeabi_dmul>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7f8 fa99 	bl	8000288 <__aeabi_dsub>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4614      	mov	r4, r2
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7f8 fbef 	bl	8000548 <__aeabi_f2d>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fa8b 	bl	800028c <__adddf3>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	4610      	mov	r0, r2
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	f7f8 ff33 	bl	8000be8 <__aeabi_d2f>
 8007d82:	4602      	mov	r2, r0
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7f8 fbd9 	bl	8000548 <__aeabi_f2d>
 8007d96:	a37c      	add	r3, pc, #496	; (adr r3, 8007f88 <PathPlan+0x1b88>)
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f7f8 fc2c 	bl	80005f8 <__aeabi_dmul>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4614      	mov	r4, r2
 8007da6:	461d      	mov	r5, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7f8 fbca 	bl	8000548 <__aeabi_f2d>
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	4b75      	ldr	r3, [pc, #468]	; (8007f90 <PathPlan+0x1b90>)
 8007dba:	f7f8 fc1d 	bl	80005f8 <__aeabi_dmul>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fa61 	bl	800028c <__adddf3>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4614      	mov	r4, r2
 8007dd0:	461d      	mov	r5, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7f8 fbb5 	bl	8000548 <__aeabi_f2d>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4620      	mov	r0, r4
 8007de4:	4629      	mov	r1, r5
 8007de6:	f7f8 fa51 	bl	800028c <__adddf3>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	f7f8 fef9 	bl	8000be8 <__aeabi_d2f>
 8007df6:	4602      	mov	r2, r0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	ed93 7ab8 	vldr	s14, [r3, #736]	; 0x2e0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8007e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
		if(pp->pp_crv_radius[pp->point_count]){
 8007e14:	f002 bbd6 	b.w	800a5c4 <PathPlan+0x41c4>


		}
		// No curve moving
		else{
			led3 = 1;
 8007e18:	4a5e      	ldr	r2, [pc, #376]	; (8007f94 <PathPlan+0x1b94>)
 8007e1a:	7853      	ldrb	r3, [r2, #1]
 8007e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e20:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	331e      	adds	r3, #30
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	ed93 7a00 	vldr	s14, [r3]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	332c      	adds	r3, #44	; 0x2c
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	3304      	adds	r3, #4
 8007e54:	ed93 7a00 	vldr	s14, [r3]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	333c      	adds	r3, #60	; 0x3c
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	ed93 7a00 	vldr	s14, [r3]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

			// I think code here is to calculate time to enable pp_lck_enb or not
			// If error < tol, add pp_lck
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8007e90:	eef0 7ae7 	vabs.f32	s15, s15
 8007e94:	ee17 0a90 	vmov	r0, s15
 8007e98:	f7f8 fb56 	bl	8000548 <__aeabi_f2d>
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	460d      	mov	r5, r1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007ea6:	eef0 7ae7 	vabs.f32	s15, s15
 8007eaa:	ee17 0a90 	vmov	r0, s15
 8007eae:	f7f8 fb4b 	bl	8000548 <__aeabi_f2d>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	4629      	mov	r1, r5
 8007eba:	f7f8 f9e7 	bl	800028c <__adddf3>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ece:	f7f8 fcbd 	bl	800084c <__aeabi_ddiv>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4614      	mov	r4, r2
 8007ed8:	461d      	mov	r5, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7f8 fb31 	bl	8000548 <__aeabi_f2d>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4620      	mov	r0, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	f7f8 fdf5 	bl	8000adc <__aeabi_dcmplt>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d013      	beq.n	8007f20 <PathPlan+0x1b20>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007efe:	eeb0 7ae7 	vabs.f32	s14, s15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 8007f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f10:	d506      	bpl.n	8007f20 <PathPlan+0x1b20>
				pp->pp_lck = 1.0;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007f18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e005      	b.n	8007f2c <PathPlan+0x1b2c>
			else
				pp->pp_lck = 0.0;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

			// Increase when no moving curve
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f32:	edd3 7a00 	vldr	s15, [r3]
 8007f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f44:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f4e:	edd3 7a00 	vldr	s15, [r3]
 8007f52:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007f98 <PathPlan+0x1b98>
 8007f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5e:	d821      	bhi.n	8007fa4 <PathPlan+0x1ba4>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007f66:	ed93 7a00 	vldr	s14, [r3]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007f70:	edd3 7a00 	vldr	s15, [r3]
 8007f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007f7e:	edc3 7a00 	vstr	s15, [r3]
 8007f82:	e045      	b.n	8008010 <PathPlan+0x1c10>
 8007f84:	f3af 8000 	nop.w
 8007f88:	a1cac083 	.word	0xa1cac083
 8007f8c:	3febb645 	.word	0x3febb645
 8007f90:	3fe00000 	.word	0x3fe00000
 8007f94:	40020814 	.word	0x40020814
 8007f98:	42700000 	.word	0x42700000
 8007f9c:	dbf8b9bb 	.word	0xdbf8b9bb
 8007fa0:	3fe6a09e 	.word	0x3fe6a09e
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007faa:	edd3 6a00 	vldr	s13, [r3]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007fb4:	ed93 7a00 	vldr	s14, [r3]
 8007fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007fc2:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f8 faba 	bl	8000548 <__aeabi_f2d>
 8007fd4:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fd92 	bl	8000b04 <__aeabi_dcmpge>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <PathPlan+0x1bf0>
					pp->pp_lck_enb = 1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8007fee:	e003      	b.n	8007ff8 <PathPlan+0x1bf8>
				else
					pp->pp_lck_enb = 0;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
				pp->pp_lck_count = 0.0;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8008016:	eef0 7ae7 	vabs.f32	s15, s15
 800801a:	ee17 0a90 	vmov	r0, s15
 800801e:	f7f8 fa93 	bl	8000548 <__aeabi_f2d>
 8008022:	4604      	mov	r4, r0
 8008024:	460d      	mov	r5, r1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800802c:	eef0 7ae7 	vabs.f32	s15, s15
 8008030:	ee17 0a90 	vmov	r0, s15
 8008034:	f7f8 fa88 	bl	8000548 <__aeabi_f2d>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4620      	mov	r0, r4
 800803e:	4629      	mov	r1, r5
 8008040:	f7f8 f924 	bl	800028c <__adddf3>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4610      	mov	r0, r2
 800804a:	4619      	mov	r1, r3
 800804c:	f04f 0200 	mov.w	r2, #0
 8008050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008054:	f7f8 fbfa 	bl	800084c <__aeabi_ddiv>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4614      	mov	r4, r2
 800805e:	461d      	mov	r5, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8008066:	4618      	mov	r0, r3
 8008068:	f7f8 fa6e 	bl	8000548 <__aeabi_f2d>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 fd32 	bl	8000adc <__aeabi_dcmplt>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 84a6 	beq.w	80089cc <PathPlan+0x25cc>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008086:	eeb0 7ae7 	vabs.f32	s14, s15
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 8008090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008098:	f140 8498 	bpl.w	80089cc <PathPlan+0x25cc>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80080a8:	3b02      	subs	r3, #2
 80080aa:	429a      	cmp	r2, r3
 80080ac:	f280 8206 	bge.w	80084bc <PathPlan+0x20bc>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	334a      	adds	r3, #74	; 0x4a
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	3304      	adds	r3, #4
 80080c0:	edd3 7a00 	vldr	s15, [r3]
 80080c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080c8:	eef4 7a47 	vcmp.f32	s15, s14
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	f040 813a 	bne.w	8008348 <PathPlan+0x1f48>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80080da:	2b01      	cmp	r3, #1
 80080dc:	f040 8476 	bne.w	80089cc <PathPlan+0x25cc>
							pp->point_count++; // Showing reached previous destination
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	331e      	adds	r3, #30
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	ed93 7a00 	vldr	s14, [r3]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	332c      	adds	r3, #44	; 0x2c
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	3304      	adds	r3, #4
 8008120:	ed93 7a00 	vldr	s14, [r3]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800812a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	333c      	adds	r3, #60	; 0x3c
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	ed93 7a00 	vldr	s14, [r3]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800814c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	331e      	adds	r3, #30
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	ed93 7a00 	vldr	s14, [r3]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800816e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008172:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817a:	d03d      	beq.n	80081f8 <PathPlan+0x1df8>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	331e      	adds	r3, #30
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	ed93 7a00 	vldr	s14, [r3]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008198:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800819c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	3388      	adds	r3, #136	; 0x88
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	edd3 7a00 	vldr	s15, [r3]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80081d0:	4618      	mov	r0, r3
 80081d2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80081d6:	eeb0 3a65 	vmov.f32	s6, s11
 80081da:	eef0 2a46 	vmov.f32	s5, s12
 80081de:	eeb0 2a66 	vmov.f32	s4, s13
 80081e2:	eef0 1a67 	vmov.f32	s3, s15
 80081e6:	eeb0 1a47 	vmov.f32	s2, s14
 80081ea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80081ee:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80084b8 <PathPlan+0x20b8>
 80081f2:	f7fd f90d 	bl	8005410 <PIDGainInit>
 80081f6:	e028      	b.n	800824a <PathPlan+0x1e4a>
								//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_x[pp->point_count],
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	3388      	adds	r3, #136	; 0x88
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	3304      	adds	r3, #4
 8008208:	edd3 7a00 	vldr	s15, [r3]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008224:	4618      	mov	r0, r3
 8008226:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800822a:	eeb0 3a46 	vmov.f32	s6, s12
 800822e:	eef0 2a66 	vmov.f32	s5, s13
 8008232:	eeb0 2a47 	vmov.f32	s4, s14
 8008236:	eef0 1a67 	vmov.f32	s3, s15
 800823a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800823e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008242:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80084b8 <PathPlan+0x20b8>
 8008246:	f7fd f8e3 	bl	8005410 <PIDGainInit>
										pp->kd[0],
										30.0,
										&(pp->x));
								//								PIDGainSet(KE,1.0,&(pp->x));
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	332c      	adds	r3, #44	; 0x2c
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	3304      	adds	r3, #4
 800825a:	ed93 7a00 	vldr	s14, [r3]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	d03d      	beq.n	80082ee <PathPlan+0x1eee>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	332c      	adds	r3, #44	; 0x2c
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	3304      	adds	r3, #4
 8008282:	ed93 7a00 	vldr	s14, [r3]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800828c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008290:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008294:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	3398      	adds	r3, #152	; 0x98
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	edd3 7a00 	vldr	s15, [r3]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80082c6:	4618      	mov	r0, r3
 80082c8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80082cc:	eeb0 3a65 	vmov.f32	s6, s11
 80082d0:	eef0 2a46 	vmov.f32	s5, s12
 80082d4:	eeb0 2a66 	vmov.f32	s4, s13
 80082d8:	eef0 1a67 	vmov.f32	s3, s15
 80082dc:	eeb0 1a47 	vmov.f32	s2, s14
 80082e0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80082e4:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80084b8 <PathPlan+0x20b8>
 80082e8:	f7fd f892 	bl	8005410 <PIDGainInit>
 80082ec:	e027      	b.n	800833e <PathPlan+0x1f3e>
								//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_y[pp->point_count],
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	3398      	adds	r3, #152	; 0x98
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	edd3 7a00 	vldr	s15, [r3]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008318:	4618      	mov	r0, r3
 800831a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800831e:	eeb0 3a46 	vmov.f32	s6, s12
 8008322:	eef0 2a66 	vmov.f32	s5, s13
 8008326:	eeb0 2a47 	vmov.f32	s4, s14
 800832a:	eef0 1a67 	vmov.f32	s3, s15
 800832e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008332:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008336:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80084b8 <PathPlan+0x20b8>
 800833a:	f7fd f869 	bl	8005410 <PIDGainInit>
							//							PIDGainSet(KI,pp->ki[0],&(pp->y));
							//							PIDGainSet(KD,pp->kd[0],&(pp->x));
							//							PIDGainSet(KD,pp->kd[0],&(pp->y));
							//							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
							//							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
							pp->pp_lck_enb = 0;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8008346:	e341      	b.n	80089cc <PathPlan+0x25cc>
						}
					}
					else{ // Already between tol, but point lck not enable
						pp->point_count++; // Assuming reached previous point
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	331e      	adds	r3, #30
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	ed93 7a00 	vldr	s14, [r3]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800836e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	332c      	adds	r3, #44	; 0x2c
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	ed93 7a00 	vldr	s14, [r3]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	333c      	adds	r3, #60	; 0x3c
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	ed93 7a00 	vldr	s14, [r3]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80083b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	331e      	adds	r3, #30
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	ed93 7a00 	vldr	s14, [r3]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80083d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80083de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e2:	d01d      	beq.n	8008420 <PathPlan+0x2020>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	331e      	adds	r3, #30
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	ed93 7a00 	vldr	s14, [r3]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80083fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008400:	eef0 7ae7 	vabs.f32	s15, s15
 8008404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008412:	4619      	mov	r1, r3
 8008414:	eeb0 0a47 	vmov.f32	s0, s14
 8008418:	2002      	movs	r0, #2
 800841a:	f7fd f82c 	bl	8005476 <PIDGainSet>
 800841e:	e008      	b.n	8008432 <PathPlan+0x2032>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0,&(pp->x));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008426:	4619      	mov	r1, r3
 8008428:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800842c:	2002      	movs	r0, #2
 800842e:	f7fd f822 	bl	8005476 <PIDGainSet>
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	332c      	adds	r3, #44	; 0x2c
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	ed93 7a00 	vldr	s14, [r3]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800844c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	d01e      	beq.n	8008498 <PathPlan+0x2098>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	332c      	adds	r3, #44	; 0x2c
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	3304      	adds	r3, #4
 800846a:	ed93 7a00 	vldr	s14, [r3]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008478:	eef0 7ae7 	vabs.f32	s15, s15
 800847c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800848a:	4619      	mov	r1, r3
 800848c:	eeb0 0a47 	vmov.f32	s0, s14
 8008490:	2002      	movs	r0, #2
 8008492:	f7fc fff0 	bl	8005476 <PIDGainSet>
 8008496:	e299      	b.n	80089cc <PathPlan+0x25cc>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0,&(pp->y));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800849e:	4619      	mov	r1, r3
 80084a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084a4:	2002      	movs	r0, #2
 80084a6:	f7fc ffe6 	bl	8005476 <PIDGainSet>
 80084aa:	e28f      	b.n	80089cc <PathPlan+0x25cc>
 80084ac:	f3af 8000 	nop.w
 80084b0:	66666666 	.word	0x66666666
 80084b4:	3fee6666 	.word	0x3fee6666
 80084b8:	3ba3d70a 	.word	0x3ba3d70a
						}
					}
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80084c8:	3b02      	subs	r3, #2
 80084ca:	429a      	cmp	r2, r3
 80084cc:	f040 81fe 	bne.w	80088cc <PathPlan+0x24cc>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	334a      	adds	r3, #74	; 0x4a
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	3304      	adds	r3, #4
 80084e0:	edd3 7a00 	vldr	s15, [r3]
 80084e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e8:	eef4 7a47 	vcmp.f32	s15, s14
 80084ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f0:	f040 813a 	bne.w	8008768 <PathPlan+0x2368>
						if(pp->pp_lck_enb == 1){
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	f040 8266 	bne.w	80089cc <PathPlan+0x25cc>
							pp->point_count++;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	331e      	adds	r3, #30
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	ed93 7a00 	vldr	s14, [r3]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	332c      	adds	r3, #44	; 0x2c
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	3304      	adds	r3, #4
 8008540:	ed93 7a00 	vldr	s14, [r3]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800854a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	333c      	adds	r3, #60	; 0x3c
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	ed93 7a00 	vldr	s14, [r3]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800856c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
							if(pp->target_x[pp->point_count]-pp->real_x){
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	331e      	adds	r3, #30
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	ed93 7a00 	vldr	s14, [r3]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800858e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859a:	d03d      	beq.n	8008618 <PathPlan+0x2218>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	331e      	adds	r3, #30
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	ed93 7a00 	vldr	s14, [r3]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80085b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b8:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 80085bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	3388      	adds	r3, #136	; 0x88
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	3304      	adds	r3, #4
 80085d4:	edd3 7a00 	vldr	s15, [r3]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80085f0:	4618      	mov	r0, r3
 80085f2:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80085f6:	eeb0 3a65 	vmov.f32	s6, s11
 80085fa:	eef0 2a46 	vmov.f32	s5, s12
 80085fe:	eeb0 2a66 	vmov.f32	s4, s13
 8008602:	eef0 1a67 	vmov.f32	s3, s15
 8008606:	eeb0 1a47 	vmov.f32	s2, s14
 800860a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800860e:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 80084b8 <PathPlan+0x20b8>
 8008612:	f7fc fefd 	bl	8005410 <PIDGainInit>
 8008616:	e028      	b.n	800866a <PathPlan+0x226a>
								//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_x[pp->point_count],
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	3388      	adds	r3, #136	; 0x88
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	3304      	adds	r3, #4
 8008628:	edd3 7a00 	vldr	s15, [r3]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008644:	4618      	mov	r0, r3
 8008646:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800864a:	eeb0 3a46 	vmov.f32	s6, s12
 800864e:	eef0 2a66 	vmov.f32	s5, s13
 8008652:	eeb0 2a47 	vmov.f32	s4, s14
 8008656:	eef0 1a67 	vmov.f32	s3, s15
 800865a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800865e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008662:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 80084b8 <PathPlan+0x20b8>
 8008666:	f7fc fed3 	bl	8005410 <PIDGainInit>
										pp->kd[1],
										30.0,
										&(pp->x));
								//								PIDGainSet(KE,1.0,&(pp->x));
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	332c      	adds	r3, #44	; 0x2c
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	3304      	adds	r3, #4
 800867a:	ed93 7a00 	vldr	s14, [r3]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008688:	eef5 7a40 	vcmp.f32	s15, #0.0
 800868c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008690:	d03d      	beq.n	800870e <PathPlan+0x230e>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	332c      	adds	r3, #44	; 0x2c
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	3304      	adds	r3, #4
 80086a2:	ed93 7a00 	vldr	s14, [r3]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80086ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086b0:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 80086b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	3398      	adds	r3, #152	; 0x98
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	edd3 7a00 	vldr	s15, [r3]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80086e6:	4618      	mov	r0, r3
 80086e8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80086ec:	eeb0 3a65 	vmov.f32	s6, s11
 80086f0:	eef0 2a46 	vmov.f32	s5, s12
 80086f4:	eeb0 2a66 	vmov.f32	s4, s13
 80086f8:	eef0 1a67 	vmov.f32	s3, s15
 80086fc:	eeb0 1a47 	vmov.f32	s2, s14
 8008700:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008704:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 80084b8 <PathPlan+0x20b8>
 8008708:	f7fc fe82 	bl	8005410 <PIDGainInit>
 800870c:	e027      	b.n	800875e <PathPlan+0x235e>
								//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_y[pp->point_count],
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	3398      	adds	r3, #152	; 0x98
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	edd3 7a00 	vldr	s15, [r3]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008738:	4618      	mov	r0, r3
 800873a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800873e:	eeb0 3a46 	vmov.f32	s6, s12
 8008742:	eef0 2a66 	vmov.f32	s5, s13
 8008746:	eeb0 2a47 	vmov.f32	s4, s14
 800874a:	eef0 1a67 	vmov.f32	s3, s15
 800874e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008752:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008756:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 80084b8 <PathPlan+0x20b8>
 800875a:	f7fc fe59 	bl	8005410 <PIDGainInit>
										pp->kd[1],
										30.0,
										&(pp->y));
								//								PIDGainSet(KE,1.0,&(pp->y));
							}
							pp->pp_lck_enb = 0;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8008766:	e131      	b.n	80089cc <PathPlan+0x25cc>
						}
					}
					else{
						pp->point_count++;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	331e      	adds	r3, #30
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4413      	add	r3, r2
 8008784:	ed93 7a00 	vldr	s14, [r3]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800878e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	332c      	adds	r3, #44	; 0x2c
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	3304      	adds	r3, #4
 80087a8:	ed93 7a00 	vldr	s14, [r3]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80087b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	333c      	adds	r3, #60	; 0x3c
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	ed93 7a00 	vldr	s14, [r3]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80087d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count]-pp->real_x){
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	331e      	adds	r3, #30
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	ed93 7a00 	vldr	s14, [r3]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80087f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	d01d      	beq.n	8008840 <PathPlan+0x2440>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	331e      	adds	r3, #30
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	ed93 7a00 	vldr	s14, [r3]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800881c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008820:	eef0 7ae7 	vabs.f32	s15, s15
 8008824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008832:	4619      	mov	r1, r3
 8008834:	eeb0 0a47 	vmov.f32	s0, s14
 8008838:	2002      	movs	r0, #2
 800883a:	f7fc fe1c 	bl	8005476 <PIDGainSet>
 800883e:	e008      	b.n	8008852 <PathPlan+0x2452>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0,&(pp->x));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008846:	4619      	mov	r1, r3
 8008848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800884c:	2002      	movs	r0, #2
 800884e:	f7fc fe12 	bl	8005476 <PIDGainSet>
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	332c      	adds	r3, #44	; 0x2c
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	3304      	adds	r3, #4
 8008862:	ed93 7a00 	vldr	s14, [r3]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800886c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008870:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	d01e      	beq.n	80088b8 <PathPlan+0x24b8>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	332c      	adds	r3, #44	; 0x2c
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	3304      	adds	r3, #4
 800888a:	ed93 7a00 	vldr	s14, [r3]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008898:	eef0 7ae7 	vabs.f32	s15, s15
 800889c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80088aa:	4619      	mov	r1, r3
 80088ac:	eeb0 0a47 	vmov.f32	s0, s14
 80088b0:	2002      	movs	r0, #2
 80088b2:	f7fc fde0 	bl	8005476 <PIDGainSet>
 80088b6:	e089      	b.n	80089cc <PathPlan+0x25cc>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0,&(pp->y));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80088be:	4619      	mov	r1, r3
 80088c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80088c4:	2002      	movs	r0, #2
 80088c6:	f7fc fdd6 	bl	8005476 <PIDGainSet>
 80088ca:	e07f      	b.n	80089cc <PathPlan+0x25cc>
						}
					}
				}else if(fabs(pp->error_x)<pp->f_tol_xy[0] && fabs(pp->error_y)<pp->f_tol_xy[0] && (int)pp->error_z<=pp->f_tol_z[0]){ // Reached last point
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80088d2:	eeb0 7ae7 	vabs.f32	s14, s15
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 80088dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e4:	d572      	bpl.n	80089cc <PathPlan+0x25cc>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80088ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 80088f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fe:	d565      	bpl.n	80089cc <PathPlan+0x25cc>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800890a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	edd3 7ad3 	vldr	s15, [r3, #844]	; 0x34c
 8008914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891c:	d856      	bhi.n	80089cc <PathPlan+0x25cc>
					if(pp->target_accurate[pp->point_count] == 1.0){
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	334a      	adds	r3, #74	; 0x4a
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	3304      	adds	r3, #4
 800892e:	edd3 7a00 	vldr	s15, [r3]
 8008932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008936:	eef4 7a47 	vcmp.f32	s15, s14
 800893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800893e:	d127      	bne.n	8008990 <PathPlan+0x2590>
						if(pp->pp_lck_enb == 1){
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8008946:	2b01      	cmp	r3, #1
 8008948:	d140      	bne.n	80089cc <PathPlan+0x25cc>
//							RNSStop(&rns);
//							PP_stop(&pp);
							led3 = 0;
 800894a:	4a7d      	ldr	r2, [pc, #500]	; (8008b40 <PathPlan+0x2740>)
 800894c:	7853      	ldrb	r3, [r2, #1]
 800894e:	f36f 13c7 	bfc	r3, #7, #1
 8008952:	7053      	strb	r3, [r2, #1]
							//								APPStop();
							//								LED4 = 1;
							PIDDelayInit(&(pp->x));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800895a:	4618      	mov	r0, r3
 800895c:	f7fc fedd 	bl	800571a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008966:	4618      	mov	r0, r3
 8008968:	f7fc fed7 	bl	800571a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8008972:	4618      	mov	r0, r3
 8008974:	f7fc fed1 	bl	800571a <PIDDelayInit>
							pp->pp_start=0;
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800897e:	f36f 0300 	bfc	r3, #0, #1
 8008982:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
							pp->pp_lck_enb = 0;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800898e:	e01d      	b.n	80089cc <PathPlan+0x25cc>
						}
					}
					else{
						//							APPStop();
						//							LED4 = 1;
						led3 = 0;
 8008990:	4a6b      	ldr	r2, [pc, #428]	; (8008b40 <PathPlan+0x2740>)
 8008992:	7853      	ldrb	r3, [r2, #1]
 8008994:	f36f 13c7 	bfc	r3, #7, #1
 8008998:	7053      	strb	r3, [r2, #1]
//						RNSStop(&rns);
//						PP_stop(&pp);
						PIDDelayInit(&(pp->x));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fc feba 	bl	800571a <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fc feb4 	bl	800571a <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fc feae 	bl	800571a <PIDDelayInit>
						pp->pp_start=0;
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80089c4:	f36f 0300 	bfc	r3, #0, #1
 80089c8:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
					}
				}
			}

			if(pp->pp_start){
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f001 85f3 	beq.w	800a5c4 <PathPlan+0x41c4>

				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	331e      	adds	r3, #30
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	ed93 7a00 	vldr	s14, [r3]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80089f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	332c      	adds	r3, #44	; 0x2c
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	3304      	adds	r3, #4
 8008a10:	ed93 7a00 	vldr	s14, [r3]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8008a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

				pp->rotate=0;
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8008a2a:	f36f 03c3 	bfc	r3, #3, #1
 8008a2e:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a40:	d107      	bne.n	8008a52 <PathPlan+0x2652>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a50:	d021      	beq.n	8008a96 <PathPlan+0x2696>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a60:	d107      	bne.n	8008a72 <PathPlan+0x2672>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a70:	d011      	beq.n	8008a96 <PathPlan+0x2696>
					pp->heading = atan2f(pp->dy, pp->dx);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8008a7e:	eef0 0a47 	vmov.f32	s1, s14
 8008a82:	eeb0 0a67 	vmov.f32	s0, s15
 8008a86:	f01a fff1 	bl	8023a6c <atan2f>
 8008a8a:	eef0 7a40 	vmov.f32	s15, s0
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8008a94:	e075      	b.n	8008b82 <PathPlan+0x2782>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa4:	d007      	beq.n	8008ab6 <PathPlan+0x26b6>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008aac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab4:	d10b      	bne.n	8008ace <PathPlan+0x26ce>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008abc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac4:	d503      	bpl.n	8008ace <PathPlan+0x26ce>
						pp->heading = -1.5708;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1e      	ldr	r2, [pc, #120]	; (8008b44 <PathPlan+0x2744>)
 8008aca:	66da      	str	r2, [r3, #108]	; 0x6c
 8008acc:	e059      	b.n	8008b82 <PathPlan+0x2782>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008ad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008adc:	d007      	beq.n	8008aee <PathPlan+0x26ee>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aec:	d10b      	bne.n	8008b06 <PathPlan+0x2706>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008af4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afc:	dd03      	ble.n	8008b06 <PathPlan+0x2706>
						pp->heading = 1.5708;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a11      	ldr	r2, [pc, #68]	; (8008b48 <PathPlan+0x2748>)
 8008b02:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b04:	e03d      	b.n	8008b82 <PathPlan+0x2782>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008b0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	d007      	beq.n	8008b26 <PathPlan+0x2726>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008b1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b24:	d112      	bne.n	8008b4c <PathPlan+0x274c>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b34:	dd0a      	ble.n	8008b4c <PathPlan+0x274c>
						pp->heading = 0.0;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008b3e:	e020      	b.n	8008b82 <PathPlan+0x2782>
 8008b40:	40020814 	.word	0x40020814
 8008b44:	bfc90ff9 	.word	0xbfc90ff9
 8008b48:	3fc90ff9 	.word	0x3fc90ff9
//						pp->rotate = 1;
					}
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008b52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	d007      	beq.n	8008b6c <PathPlan+0x276c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008b62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	d10a      	bne.n	8008b82 <PathPlan+0x2782>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7a:	d502      	bpl.n	8008b82 <PathPlan+0x2782>
					{
						pp->heading = M_PI;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4ad6      	ldr	r2, [pc, #856]	; (8008ed8 <PathPlan+0x2ad8>)
 8008b80:	66da      	str	r2, [r3, #108]	; 0x6c
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	3378      	adds	r3, #120	; 0x78
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	ed93 8a00 	vldr	s16, [r3]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8008b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b9e:	f01a fedb 	bl	8023958 <cosf>
 8008ba2:	eef0 7a40 	vmov.f32	s15, s0
 8008ba6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	3378      	adds	r3, #120	; 0x78
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	ed93 8a00 	vldr	s16, [r3]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8008bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8008bcc:	f01a ff0c 	bl	80239e8 <sinf>
 8008bd0:	eef0 7a40 	vmov.f32	s15, s0
 8008bd4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

				if(pp->rotate){
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8008be4:	f003 0308 	and.w	r3, r3, #8
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d007      	beq.n	8008bfe <PathPlan+0x27fe>
					pp->vx = pp->vy = 0.0;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f04f 0200 	mov.w	r2, #0
 8008bf4:	675a      	str	r2, [r3, #116]	; 0x74
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	671a      	str	r2, [r3, #112]	; 0x70
				}

				PID(&(pp->x));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fc fda6 	bl	8005756 <PID>
				PID(&(pp->y));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fc fda0 	bl	8005756 <PID>
				PID(&(pp->z));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fc fd9a 	bl	8005756 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c32:	f01a fe91 	bl	8023958 <cosf>
 8008c36:	eef0 7a40 	vmov.f32	s15, s0
 8008c3a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4e:	f01a fecb 	bl	80239e8 <sinf>
 8008c52:	eef0 7a40 	vmov.f32	s15, s0
 8008c56:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008c5a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	edc3 7ab6 	vstr	s15, [r3, #728]	; 0x2d8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c70:	eeb0 0a67 	vmov.f32	s0, s15
 8008c74:	f01a feb8 	bl	80239e8 <sinf>
 8008c78:	eef0 7a40 	vmov.f32	s15, s0
 8008c7c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c90:	f01a fe62 	bl	8023958 <cosf>
 8008c94:	eef0 7a40 	vmov.f32	s15, s0
 8008c98:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008c9c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8008cb6:	f01a fe4f 	bl	8023958 <cosf>
 8008cba:	eef0 7a40 	vmov.f32	s15, s0
 8008cbe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008cce:	eeb0 0a67 	vmov.f32	s0, s15
 8008cd2:	f01a fe89 	bl	80239e8 <sinf>
 8008cd6:	eef0 7a40 	vmov.f32	s15, s0
 8008cda:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008cde:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8008cf8:	f01a fe76 	bl	80239e8 <sinf>
 8008cfc:	eef0 7a40 	vmov.f32	s15, s0
 8008d00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008d10:	eeb0 0a67 	vmov.f32	s0, s15
 8008d14:	f01a fe20 	bl	8023958 <cosf>
 8008d18:	eef0 7a40 	vmov.f32	s15, s0
 8008d1c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008d20:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4

				if(pp->base_shape== fwd_omni){
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	f040 80de 	bne.w	8008ef2 <PathPlan+0x2af2>
//					pp->u1 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
//					pp->u2 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
//					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
//					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);

					pp->u1 = (pp->outz * 1.0);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = -pp->outz * 1.0;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8008d48:	eef1 7a67 	vneg.f32	s15, s15
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	edc3 7abb 	vstr	s15, [r3, #748]	; 0x2ec
					pp->u3 = (pp->outz * 1.0);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->u4 = -(pp->outz * 1.0);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f7 fbef 	bl	8000548 <__aeabi_f2d>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	f7f7 ff39 	bl	8000be8 <__aeabi_d2f>
 8008d76:	4603      	mov	r3, r0
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eef1 7a67 	vneg.f32	s15, s15
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	edc3 7abd 	vstr	s15, [r3, #756]	; 0x2f4


					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d96:	ee17 0a90 	vmov	r0, s15
 8008d9a:	f7f7 fbd5 	bl	8000548 <__aeabi_f2d>
 8008d9e:	a34c      	add	r3, pc, #304	; (adr r3, 8008ed0 <PathPlan+0x2ad0>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fc28 	bl	80005f8 <__aeabi_dmul>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4614      	mov	r4, r2
 8008dae:	461d      	mov	r5, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 fbc6 	bl	8000548 <__aeabi_f2d>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f7f7 fa62 	bl	800028c <__adddf3>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	f7f7 ff0a 	bl	8000be8 <__aeabi_d2f>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dec:	ee17 0a90 	vmov	r0, s15
 8008df0:	f7f7 fbaa 	bl	8000548 <__aeabi_f2d>
 8008df4:	a336      	add	r3, pc, #216	; (adr r3, 8008ed0 <PathPlan+0x2ad0>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 fbfd 	bl	80005f8 <__aeabi_dmul>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4614      	mov	r4, r2
 8008e04:	461d      	mov	r5, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f7 fb9b 	bl	8000548 <__aeabi_f2d>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4620      	mov	r0, r4
 8008e18:	4629      	mov	r1, r5
 8008e1a:	f7f7 fa37 	bl	800028c <__adddf3>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4610      	mov	r0, r2
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7f7 fedf 	bl	8000be8 <__aeabi_d2f>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e42:	ee17 0a90 	vmov	r0, s15
 8008e46:	f7f7 fb7f 	bl	8000548 <__aeabi_f2d>
 8008e4a:	a321      	add	r3, pc, #132	; (adr r3, 8008ed0 <PathPlan+0x2ad0>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fbd2 	bl	80005f8 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4614      	mov	r4, r2
 8008e5a:	461d      	mov	r5, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f7 fb70 	bl	8000548 <__aeabi_f2d>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	4629      	mov	r1, r5
 8008e70:	f7f7 fa0c 	bl	800028c <__adddf3>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f7f7 feb4 	bl	8000be8 <__aeabi_d2f>
 8008e80:	4602      	mov	r2, r0
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e98:	ee17 0a90 	vmov	r0, s15
 8008e9c:	f7f7 fb54 	bl	8000548 <__aeabi_f2d>
 8008ea0:	a30b      	add	r3, pc, #44	; (adr r3, 8008ed0 <PathPlan+0x2ad0>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f7f7 fba7 	bl	80005f8 <__aeabi_dmul>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4614      	mov	r4, r2
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7f7 fb45 	bl	8000548 <__aeabi_f2d>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	f7f7 f9e1 	bl	800028c <__adddf3>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	e006      	b.n	8008edc <PathPlan+0x2adc>
 8008ece:	bf00      	nop
 8008ed0:	dbf8b9bb 	.word	0xdbf8b9bb
 8008ed4:	3fe6a09e 	.word	0x3fe6a09e
 8008ed8:	40490fdb 	.word	0x40490fdb
 8008edc:	460b      	mov	r3, r1
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f7f7 fe81 	bl	8000be8 <__aeabi_d2f>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if(pp->pp_crv_radius[pp->point_count]){
 8008eee:	f001 bb69 	b.w	800a5c4 <PathPlan+0x41c4>

					//				pp->move(pp->v2,pp->v1,pp->v3,pp->v4,pp->rns);
				} else if(pp->base_shape== 1){
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	f041 8363 	bne.w	800a5c4 <PathPlan+0x41c4>

					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7f7 fb1f 	bl	8000548 <__aeabi_f2d>
 8008f0a:	a3d7      	add	r3, pc, #860	; (adr r3, 8009268 <PathPlan+0x2e68>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f7f7 fb72 	bl	80005f8 <__aeabi_dmul>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4614      	mov	r4, r2
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7f7 fb10 	bl	8000548 <__aeabi_f2d>
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	4bd0      	ldr	r3, [pc, #832]	; (8009270 <PathPlan+0x2e70>)
 8008f2e:	f7f7 fb63 	bl	80005f8 <__aeabi_dmul>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 f9a5 	bl	8000288 <__aeabi_dsub>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4614      	mov	r4, r2
 8008f44:	461d      	mov	r5, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f7 fafb 	bl	8000548 <__aeabi_f2d>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 f997 	bl	800028c <__adddf3>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4610      	mov	r0, r2
 8008f64:	4619      	mov	r1, r3
 8008f66:	f7f7 fe3f 	bl	8000be8 <__aeabi_d2f>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7f7 fae5 	bl	8000548 <__aeabi_f2d>
 8008f7e:	a3ba      	add	r3, pc, #744	; (adr r3, 8009268 <PathPlan+0x2e68>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	f7f7 fb38 	bl	80005f8 <__aeabi_dmul>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	461d      	mov	r5, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f7 fad6 	bl	8000548 <__aeabi_f2d>
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	4bb3      	ldr	r3, [pc, #716]	; (8009270 <PathPlan+0x2e70>)
 8008fa2:	f7f7 fb29 	bl	80005f8 <__aeabi_dmul>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4620      	mov	r0, r4
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7f7 f96d 	bl	800028c <__adddf3>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	461d      	mov	r5, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f7 fac1 	bl	8000548 <__aeabi_f2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 f95b 	bl	8000288 <__aeabi_dsub>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f7f7 fe05 	bl	8000be8 <__aeabi_d2f>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8008ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8009002:	4618      	mov	r0, r3
 8009004:	f7f7 faa0 	bl	8000548 <__aeabi_f2d>
 8009008:	a397      	add	r3, pc, #604	; (adr r3, 8009268 <PathPlan+0x2e68>)
 800900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900e:	f7f7 faf3 	bl	80005f8 <__aeabi_dmul>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4614      	mov	r4, r2
 8009018:	461d      	mov	r5, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8009020:	4618      	mov	r0, r3
 8009022:	f7f7 fa91 	bl	8000548 <__aeabi_f2d>
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	4b91      	ldr	r3, [pc, #580]	; (8009270 <PathPlan+0x2e70>)
 800902c:	f7f7 fae4 	bl	80005f8 <__aeabi_dmul>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 f926 	bl	8000288 <__aeabi_dsub>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4614      	mov	r4, r2
 8009042:	461d      	mov	r5, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 fa7c 	bl	8000548 <__aeabi_f2d>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 f918 	bl	800028c <__adddf3>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4610      	mov	r0, r2
 8009062:	4619      	mov	r1, r3
 8009064:	f7f7 fdc0 	bl	8000be8 <__aeabi_d2f>
 8009068:	4602      	mov	r2, r0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8009076:	4618      	mov	r0, r3
 8009078:	f7f7 fa66 	bl	8000548 <__aeabi_f2d>
 800907c:	a37a      	add	r3, pc, #488	; (adr r3, 8009268 <PathPlan+0x2e68>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 fab9 	bl	80005f8 <__aeabi_dmul>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4614      	mov	r4, r2
 800908c:	461d      	mov	r5, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8009094:	4618      	mov	r0, r3
 8009096:	f7f7 fa57 	bl	8000548 <__aeabi_f2d>
 800909a:	f04f 0200 	mov.w	r2, #0
 800909e:	4b74      	ldr	r3, [pc, #464]	; (8009270 <PathPlan+0x2e70>)
 80090a0:	f7f7 faaa 	bl	80005f8 <__aeabi_dmul>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4620      	mov	r0, r4
 80090aa:	4629      	mov	r1, r5
 80090ac:	f7f7 f8ee 	bl	800028c <__adddf3>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	461d      	mov	r5, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f7 fa42 	bl	8000548 <__aeabi_f2d>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 f8de 	bl	800028c <__adddf3>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4610      	mov	r0, r2
 80090d6:	4619      	mov	r1, r3
 80090d8:	f7f7 fd86 	bl	8000be8 <__aeabi_d2f>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	ed93 7ab8 	vldr	s14, [r3, #736]	; 0x2e0
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80090f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
		if(pp->pp_crv_radius[pp->point_count]){
 80090fa:	f001 ba63 	b.w	800a5c4 <PathPlan+0x41c4>
//				hb_count = HAL_GetTick();

			}
		}
	}
	else if(pp->point_start && pp->lsr_start) // In this code, only moving in x direction but using left and right
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	f001 825b 	beq.w	800a5c6 <PathPlan+0x41c6>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009116:	f003 0310 	and.w	r3, r3, #16
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	f001 8252 	beq.w	800a5c6 <PathPlan+0x41c6>
	{
		led3 = 1;
 8009122:	4a54      	ldr	r2, [pc, #336]	; (8009274 <PathPlan+0x2e74>)
 8009124:	7853      	ldrb	r3, [r2, #1]
 8009126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800912a:	7053      	strb	r3, [r2, #1]
		if(!pp->right_lsr)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009132:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d112      	bne.n	8009162 <PathPlan+0x2d62>
			pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	331e      	adds	r3, #30
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	ed93 7a00 	vldr	s14, [r3]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	edd3 7a00 	vldr	s15, [r3]
 8009156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
 8009160:	e013      	b.n	800918a <PathPlan+0x2d8a>
		else
			pp->error_x = -(pp->target_x[pp->point_count] - *(pp->lsrR));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	331e      	adds	r3, #30
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	ed93 7a00 	vldr	s14, [r3]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	edd3 7a00 	vldr	s15, [r3]
 800917c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009180:	eef1 7a67 	vneg.f32	s15, s15
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	332c      	adds	r3, #44	; 0x2c
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	ed93 7a00 	vldr	s14, [r3]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80091a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
		pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	333c      	adds	r3, #60	; 0x3c
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	ed93 7a00 	vldr	s14, [r3]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80091c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

		// I think code here is to calculate time to enable pp_lck_enb or not
		// If error < tol, add pp_lck
		if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80091d6:	eef0 7ae7 	vabs.f32	s15, s15
 80091da:	ee17 0a90 	vmov	r0, s15
 80091de:	f7f7 f9b3 	bl	8000548 <__aeabi_f2d>
 80091e2:	4604      	mov	r4, r0
 80091e4:	460d      	mov	r5, r1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80091ec:	eef0 7ae7 	vabs.f32	s15, s15
 80091f0:	ee17 0a90 	vmov	r0, s15
 80091f4:	f7f7 f9a8 	bl	8000548 <__aeabi_f2d>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f844 	bl	800028c <__adddf3>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4610      	mov	r0, r2
 800920a:	4619      	mov	r1, r3
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009214:	f7f7 fb1a 	bl	800084c <__aeabi_ddiv>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	4614      	mov	r4, r2
 800921e:	461d      	mov	r5, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8009226:	4618      	mov	r0, r3
 8009228:	f7f7 f98e 	bl	8000548 <__aeabi_f2d>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	f7f7 fc52 	bl	8000adc <__aeabi_dcmplt>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d01e      	beq.n	800927c <PathPlan+0x2e7c>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8009244:	eeb0 7ae7 	vabs.f32	s14, s15
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 800924e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009256:	d511      	bpl.n	800927c <PathPlan+0x2e7c>
			pp->pp_lck = 1.0;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800925e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e010      	b.n	8009288 <PathPlan+0x2e88>
 8009266:	bf00      	nop
 8009268:	a1cac083 	.word	0xa1cac083
 800926c:	3febb645 	.word	0x3febb645
 8009270:	3fe00000 	.word	0x3fe00000
 8009274:	40020814 	.word	0x40020814
 8009278:	42700000 	.word	0x42700000
		else
			pp->pp_lck = 0.0;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	601a      	str	r2, [r3, #0]

		// Increase when no moving curve
		pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800928e:	edd3 7a00 	vldr	s15, [r3]
 8009292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80092a0:	edc3 7a00 	vstr	s15, [r3]

		if(pp->pp_lck_count <= 60.0)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80092aa:	edd3 7a00 	vldr	s15, [r3]
 80092ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8009278 <PathPlan+0x2e78>
 80092b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ba:	d811      	bhi.n	80092e0 <PathPlan+0x2ee0>
			pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80092c2:	ed93 7a00 	vldr	s14, [r3]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80092cc:	edd3 7a00 	vldr	s15, [r3]
 80092d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80092da:	edc3 7a00 	vstr	s15, [r3]
 80092de:	e035      	b.n	800934c <PathPlan+0x2f4c>
		else{
			pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80092e6:	edd3 6a00 	vldr	s13, [r3]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80092f0:	ed93 7a00 	vldr	s14, [r3]
 80092f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80092fe:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_final >= 0.95)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4618      	mov	r0, r3
 800930c:	f7f7 f91c 	bl	8000548 <__aeabi_f2d>
 8009310:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f7 fbf4 	bl	8000b04 <__aeabi_dcmpge>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d004      	beq.n	800932c <PathPlan+0x2f2c>
				pp->pp_lck_enb = 1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800932a:	e003      	b.n	8009334 <PathPlan+0x2f34>
			else
				pp->pp_lck_enb = 0;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
			pp->pp_lck_count = 0.0;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800933a:	f04f 0200 	mov.w	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
			pp->pp_lck_cal   = 0.0;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
		}


		if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009352:	eef0 7ae7 	vabs.f32	s15, s15
 8009356:	ee17 0a90 	vmov	r0, s15
 800935a:	f7f7 f8f5 	bl	8000548 <__aeabi_f2d>
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8009368:	eef0 7ae7 	vabs.f32	s15, s15
 800936c:	ee17 0a90 	vmov	r0, s15
 8009370:	f7f7 f8ea 	bl	8000548 <__aeabi_f2d>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4620      	mov	r0, r4
 800937a:	4629      	mov	r1, r5
 800937c:	f7f6 ff86 	bl	800028c <__adddf3>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4610      	mov	r0, r2
 8009386:	4619      	mov	r1, r3
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009390:	f7f7 fa5c 	bl	800084c <__aeabi_ddiv>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4614      	mov	r4, r2
 800939a:	461d      	mov	r5, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7f7 f8d0 	bl	8000548 <__aeabi_f2d>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f7 fb94 	bl	8000adc <__aeabi_dcmplt>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 84f3 	beq.w	8009da2 <PathPlan+0x39a2>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80093c2:	eeb0 7ae7 	vabs.f32	s14, s15
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 80093cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d4:	f140 84e5 	bpl.w	8009da2 <PathPlan+0x39a2>
			if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80093e4:	3b02      	subs	r3, #2
 80093e6:	429a      	cmp	r2, r3
 80093e8:	f280 820c 	bge.w	8009804 <PathPlan+0x3404>
				if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	334a      	adds	r3, #74	; 0x4a
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	3304      	adds	r3, #4
 80093fc:	edd3 7a00 	vldr	s15, [r3]
 8009400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009404:	eef4 7a47 	vcmp.f32	s15, s14
 8009408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940c:	f040 813d 	bne.w	800968a <PathPlan+0x328a>
					if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009416:	2b01      	cmp	r3, #1
 8009418:	f040 84c3 	bne.w	8009da2 <PathPlan+0x39a2>
						pp->point_count++; // Showing reached previous destination
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	331e      	adds	r3, #30
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	ed93 7a00 	vldr	s14, [r3]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	edd3 7a00 	vldr	s15, [r3]
 8009444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	332c      	adds	r3, #44	; 0x2c
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	3304      	adds	r3, #4
 800945e:	ed93 7a00 	vldr	s14, [r3]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	333c      	adds	r3, #60	; 0x3c
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	ed93 7a00 	vldr	s14, [r3]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800948a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count] - *(pp->lsrx)){
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	331e      	adds	r3, #30
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	ed93 7a00 	vldr	s14, [r3]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	edd3 7a00 	vldr	s15, [r3]
 80094ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80094b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ba:	d03e      	beq.n	800953a <PathPlan+0x313a>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_x[pp->point_count] - *(pp->lsrx)),
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	331e      	adds	r3, #30
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	ed93 7a00 	vldr	s14, [r3]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	edd3 7a00 	vldr	s15, [r3]
 80094d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094da:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 80094de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_x[pp->point_count],
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	3388      	adds	r3, #136	; 0x88
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	3304      	adds	r3, #4
 80094f6:	edd3 7a00 	vldr	s15, [r3]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009512:	4618      	mov	r0, r3
 8009514:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009518:	eeb0 3a65 	vmov.f32	s6, s11
 800951c:	eef0 2a46 	vmov.f32	s5, s12
 8009520:	eeb0 2a66 	vmov.f32	s4, s13
 8009524:	eef0 1a67 	vmov.f32	s3, s15
 8009528:	eeb0 1a47 	vmov.f32	s2, s14
 800952c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009530:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8009800 <PathPlan+0x3400>
 8009534:	f7fb ff6c 	bl	8005410 <PIDGainInit>
 8009538:	e028      	b.n	800958c <PathPlan+0x318c>
							//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_x[pp->point_count],
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	3388      	adds	r3, #136	; 0x88
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	3304      	adds	r3, #4
 800954a:	edd3 7a00 	vldr	s15, [r3]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009566:	4618      	mov	r0, r3
 8009568:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800956c:	eeb0 3a46 	vmov.f32	s6, s12
 8009570:	eef0 2a66 	vmov.f32	s5, s13
 8009574:	eeb0 2a47 	vmov.f32	s4, s14
 8009578:	eef0 1a67 	vmov.f32	s3, s15
 800957c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009580:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009584:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8009800 <PathPlan+0x3400>
 8009588:	f7fb ff42 	bl	8005410 <PIDGainInit>
									pp->kd[0],
									30.0,
									&(pp->x));
							//								PIDGainSet(KE,1.0,&(pp->x));
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	332c      	adds	r3, #44	; 0x2c
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	3304      	adds	r3, #4
 800959c:	ed93 7a00 	vldr	s14, [r3]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80095a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80095ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b2:	d03d      	beq.n	8009630 <PathPlan+0x3230>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	332c      	adds	r3, #44	; 0x2c
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	3304      	adds	r3, #4
 80095c4:	ed93 7a00 	vldr	s14, [r3]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80095ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095d2:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 80095d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	3398      	adds	r3, #152	; 0x98
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	edd3 7a00 	vldr	s15, [r3]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009608:	4618      	mov	r0, r3
 800960a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800960e:	eeb0 3a65 	vmov.f32	s6, s11
 8009612:	eef0 2a46 	vmov.f32	s5, s12
 8009616:	eeb0 2a66 	vmov.f32	s4, s13
 800961a:	eef0 1a67 	vmov.f32	s3, s15
 800961e:	eeb0 1a47 	vmov.f32	s2, s14
 8009622:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009626:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8009800 <PathPlan+0x3400>
 800962a:	f7fb fef1 	bl	8005410 <PIDGainInit>
 800962e:	e027      	b.n	8009680 <PathPlan+0x3280>
							//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_y[pp->point_count],
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	3398      	adds	r3, #152	; 0x98
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	edd3 7a00 	vldr	s15, [r3]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800965a:	4618      	mov	r0, r3
 800965c:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009660:	eeb0 3a46 	vmov.f32	s6, s12
 8009664:	eef0 2a66 	vmov.f32	s5, s13
 8009668:	eeb0 2a47 	vmov.f32	s4, s14
 800966c:	eef0 1a67 	vmov.f32	s3, s15
 8009670:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009674:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009678:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8009800 <PathPlan+0x3400>
 800967c:	f7fb fec8 	bl	8005410 <PIDGainInit>
						//							PIDGainSet(KI,pp->ki[0],&(pp->y));
						//							PIDGainSet(KD,pp->kd[0],&(pp->x));
						//							PIDGainSet(KD,pp->kd[0],&(pp->y));
						//							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
						//							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
						pp->pp_lck_enb = 0;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8009688:	e38b      	b.n	8009da2 <PathPlan+0x39a2>
					}
				}
				else{ // Already between tol, but point lck not enable
					pp->point_count++; // Assuming reached previous point
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	331e      	adds	r3, #30
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	ed93 7a00 	vldr	s14, [r3]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	edd3 7a00 	vldr	s15, [r3]
 80096b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
					pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	332c      	adds	r3, #44	; 0x2c
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	3304      	adds	r3, #4
 80096cc:	ed93 7a00 	vldr	s14, [r3]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80096d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
					pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	333c      	adds	r3, #60	; 0x3c
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	ed93 7a00 	vldr	s14, [r3]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80096f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
					if(pp->target_x[pp->point_count] - *(pp->lsrx)){
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	331e      	adds	r3, #30
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	ed93 7a00 	vldr	s14, [r3]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	edd3 7a00 	vldr	s15, [r3]
 800971c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009720:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d01e      	beq.n	8009768 <PathPlan+0x3368>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count] - *(pp->lsrx)),&(pp->x));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	331e      	adds	r3, #30
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	ed93 7a00 	vldr	s14, [r3]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	edd3 7a00 	vldr	s15, [r3]
 8009744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009748:	eef0 7ae7 	vabs.f32	s15, s15
 800974c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800975a:	4619      	mov	r1, r3
 800975c:	eeb0 0a47 	vmov.f32	s0, s14
 8009760:	2002      	movs	r0, #2
 8009762:	f7fb fe88 	bl	8005476 <PIDGainSet>
 8009766:	e008      	b.n	800977a <PathPlan+0x337a>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
						PIDGainSet(KE,1.0,&(pp->x));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800976e:	4619      	mov	r1, r3
 8009770:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009774:	2002      	movs	r0, #2
 8009776:	f7fb fe7e 	bl	8005476 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	332c      	adds	r3, #44	; 0x2c
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	3304      	adds	r3, #4
 800978a:	ed93 7a00 	vldr	s14, [r3]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800979c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a0:	d01e      	beq.n	80097e0 <PathPlan+0x33e0>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	332c      	adds	r3, #44	; 0x2c
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	3304      	adds	r3, #4
 80097b2:	ed93 7a00 	vldr	s14, [r3]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80097bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097c0:	eef0 7ae7 	vabs.f32	s15, s15
 80097c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80097d2:	4619      	mov	r1, r3
 80097d4:	eeb0 0a47 	vmov.f32	s0, s14
 80097d8:	2002      	movs	r0, #2
 80097da:	f7fb fe4c 	bl	8005476 <PIDGainSet>
 80097de:	e2e0      	b.n	8009da2 <PathPlan+0x39a2>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
						PIDGainSet(KE,1.0,&(pp->y));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80097e6:	4619      	mov	r1, r3
 80097e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097ec:	2002      	movs	r0, #2
 80097ee:	f7fb fe42 	bl	8005476 <PIDGainSet>
 80097f2:	e2d6      	b.n	8009da2 <PathPlan+0x39a2>
 80097f4:	f3af 8000 	nop.w
 80097f8:	66666666 	.word	0x66666666
 80097fc:	3fee6666 	.word	0x3fee6666
 8009800:	3ba3d70a 	.word	0x3ba3d70a
					}
				}
			} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009810:	3b02      	subs	r3, #2
 8009812:	429a      	cmp	r2, r3
 8009814:	f040 8273 	bne.w	8009cfe <PathPlan+0x38fe>
				if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	334a      	adds	r3, #74	; 0x4a
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	3304      	adds	r3, #4
 8009828:	edd3 7a00 	vldr	s15, [r3]
 800982c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009830:	eef4 7a47 	vcmp.f32	s15, s14
 8009834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009838:	f040 813d 	bne.w	8009ab6 <PathPlan+0x36b6>
					if(pp->pp_lck_enb == 1){
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009842:	2b01      	cmp	r3, #1
 8009844:	f040 82ad 	bne.w	8009da2 <PathPlan+0x39a2>
						pp->point_count++;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	331e      	adds	r3, #30
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	ed93 7a00 	vldr	s14, [r3]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	edd3 7a00 	vldr	s15, [r3]
 8009870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	332c      	adds	r3, #44	; 0x2c
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	3304      	adds	r3, #4
 800988a:	ed93 7a00 	vldr	s14, [r3]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	333c      	adds	r3, #60	; 0x3c
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	ed93 7a00 	vldr	s14, [r3]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80098b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count] - *(pp->lsrx)){
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	331e      	adds	r3, #30
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	ed93 7a00 	vldr	s14, [r3]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	edd3 7a00 	vldr	s15, [r3]
 80098da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80098e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e6:	d03e      	beq.n	8009966 <PathPlan+0x3566>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_x[pp->point_count] - *(pp->lsrx)),
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	331e      	adds	r3, #30
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	ed93 7a00 	vldr	s14, [r3]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	edd3 7a00 	vldr	s15, [r3]
 8009902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009906:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_x[pp->point_count],
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	3388      	adds	r3, #136	; 0x88
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	3304      	adds	r3, #4
 8009922:	edd3 7a00 	vldr	s15, [r3]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800993e:	4618      	mov	r0, r3
 8009940:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009944:	eeb0 3a65 	vmov.f32	s6, s11
 8009948:	eef0 2a46 	vmov.f32	s5, s12
 800994c:	eeb0 2a66 	vmov.f32	s4, s13
 8009950:	eef0 1a67 	vmov.f32	s3, s15
 8009954:	eeb0 1a47 	vmov.f32	s2, s14
 8009958:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800995c:	ed1f 0a58 	vldr	s0, [pc, #-352]	; 8009800 <PathPlan+0x3400>
 8009960:	f7fb fd56 	bl	8005410 <PIDGainInit>
 8009964:	e028      	b.n	80099b8 <PathPlan+0x35b8>
							//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_x[pp->point_count],
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	3388      	adds	r3, #136	; 0x88
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	3304      	adds	r3, #4
 8009976:	edd3 7a00 	vldr	s15, [r3]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009992:	4618      	mov	r0, r3
 8009994:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009998:	eeb0 3a46 	vmov.f32	s6, s12
 800999c:	eef0 2a66 	vmov.f32	s5, s13
 80099a0:	eeb0 2a47 	vmov.f32	s4, s14
 80099a4:	eef0 1a67 	vmov.f32	s3, s15
 80099a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80099ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80099b0:	ed1f 0a6d 	vldr	s0, [pc, #-436]	; 8009800 <PathPlan+0x3400>
 80099b4:	f7fb fd2c 	bl	8005410 <PIDGainInit>
									pp->kd[1],
									30.0,
									&(pp->x));
							//								PIDGainSet(KE,1.0,&(pp->x));
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	332c      	adds	r3, #44	; 0x2c
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	3304      	adds	r3, #4
 80099c8:	ed93 7a00 	vldr	s14, [r3]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80099d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80099da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099de:	d03d      	beq.n	8009a5c <PathPlan+0x365c>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	332c      	adds	r3, #44	; 0x2c
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	3304      	adds	r3, #4
 80099f0:	ed93 7a00 	vldr	s14, [r3]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80099fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099fe:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	3398      	adds	r3, #152	; 0x98
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	edd3 7a00 	vldr	s15, [r3]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009a34:	4618      	mov	r0, r3
 8009a36:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009a3a:	eeb0 3a65 	vmov.f32	s6, s11
 8009a3e:	eef0 2a46 	vmov.f32	s5, s12
 8009a42:	eeb0 2a66 	vmov.f32	s4, s13
 8009a46:	eef0 1a67 	vmov.f32	s3, s15
 8009a4a:	eeb0 1a47 	vmov.f32	s2, s14
 8009a4e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009a52:	ed1f 0a95 	vldr	s0, [pc, #-596]	; 8009800 <PathPlan+0x3400>
 8009a56:	f7fb fcdb 	bl	8005410 <PIDGainInit>
 8009a5a:	e027      	b.n	8009aac <PathPlan+0x36ac>
							//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_y[pp->point_count],
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	3398      	adds	r3, #152	; 0x98
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	edd3 7a00 	vldr	s15, [r3]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009a86:	4618      	mov	r0, r3
 8009a88:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009a8c:	eeb0 3a46 	vmov.f32	s6, s12
 8009a90:	eef0 2a66 	vmov.f32	s5, s13
 8009a94:	eeb0 2a47 	vmov.f32	s4, s14
 8009a98:	eef0 1a67 	vmov.f32	s3, s15
 8009a9c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009aa0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009aa4:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 8009800 <PathPlan+0x3400>
 8009aa8:	f7fb fcb2 	bl	8005410 <PIDGainInit>
									pp->kd[1],
									30.0,
									&(pp->y));
							//								PIDGainSet(KE,1.0,&(pp->y));
						}
						pp->pp_lck_enb = 0;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8009ab4:	e175      	b.n	8009da2 <PathPlan+0x39a2>
					}
				}
				else{
					pp->point_count++;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					if(!pp->right_lsr)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009aca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d112      	bne.n	8009afa <PathPlan+0x36fa>
						pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	331e      	adds	r3, #30
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	ed93 7a00 	vldr	s14, [r3]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	edd3 7a00 	vldr	s15, [r3]
 8009aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
 8009af8:	e013      	b.n	8009b22 <PathPlan+0x3722>
					else
						pp->error_x = -(pp->target_x[pp->point_count] - *(pp->lsrR));
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	331e      	adds	r3, #30
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	ed93 7a00 	vldr	s14, [r3]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	edd3 7a00 	vldr	s15, [r3]
 8009b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b18:	eef1 7a67 	vneg.f32	s15, s15
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
					pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	332c      	adds	r3, #44	; 0x2c
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	3304      	adds	r3, #4
 8009b32:	ed93 7a00 	vldr	s14, [r3]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
					pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	333c      	adds	r3, #60	; 0x3c
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	ed93 7a00 	vldr	s14, [r3]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
					if(pp->error_x){
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b76:	d02b      	beq.n	8009bd0 <PathPlan+0x37d0>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->error_x),
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009b7e:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009ba8:	4618      	mov	r0, r3
 8009baa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009bae:	eeb0 3a65 	vmov.f32	s6, s11
 8009bb2:	eef0 2a46 	vmov.f32	s5, s12
 8009bb6:	eeb0 2a66 	vmov.f32	s4, s13
 8009bba:	eef0 1a67 	vmov.f32	s3, s15
 8009bbe:	eeb0 1a47 	vmov.f32	s2, s14
 8009bc2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009bc6:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8009f00 <PathPlan+0x3b00>
 8009bca:	f7fb fc21 	bl	8005410 <PIDGainInit>
 8009bce:	e021      	b.n	8009c14 <PathPlan+0x3814>
									pp->ki[1],
									pp->kd[1],
									30.0,
									&(pp->x));
					} else {
							PIDGainInit(0.005,
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009bee:	4618      	mov	r0, r3
 8009bf0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009bf4:	eeb0 3a46 	vmov.f32	s6, s12
 8009bf8:	eef0 2a66 	vmov.f32	s5, s13
 8009bfc:	eeb0 2a47 	vmov.f32	s4, s14
 8009c00:	eef0 1a67 	vmov.f32	s3, s15
 8009c04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009c08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009c0c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8009f00 <PathPlan+0x3b00>
 8009c10:	f7fb fbfe 	bl	8005410 <PIDGainInit>
									pp->ki[1],
									pp->kd[1],
									30.0,
									&(pp->x));
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	332c      	adds	r3, #44	; 0x2c
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	3304      	adds	r3, #4
 8009c24:	ed93 7a00 	vldr	s14, [r3]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3a:	d03d      	beq.n	8009cb8 <PathPlan+0x38b8>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	332c      	adds	r3, #44	; 0x2c
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	ed93 7a00 	vldr	s14, [r3]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c5a:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	3398      	adds	r3, #152	; 0x98
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	edd3 7a00 	vldr	s15, [r3]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009c90:	4618      	mov	r0, r3
 8009c92:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009c96:	eeb0 3a65 	vmov.f32	s6, s11
 8009c9a:	eef0 2a46 	vmov.f32	s5, s12
 8009c9e:	eeb0 2a66 	vmov.f32	s4, s13
 8009ca2:	eef0 1a67 	vmov.f32	s3, s15
 8009ca6:	eeb0 1a47 	vmov.f32	s2, s14
 8009caa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009cae:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8009f00 <PathPlan+0x3b00>
 8009cb2:	f7fb fbad 	bl	8005410 <PIDGainInit>
 8009cb6:	e074      	b.n	8009da2 <PathPlan+0x39a2>
									pp->ki[1],
									pp->kd[1],
									30.0,
									&(pp->y));
					} else {
							PIDGainInit(0.005,
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	edd3 7a98 	vldr	s15, [r3, #608]	; 0x260
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009cdc:	eeb0 3a46 	vmov.f32	s6, s12
 8009ce0:	eef0 2a66 	vmov.f32	s5, s13
 8009ce4:	eeb0 2a47 	vmov.f32	s4, s14
 8009ce8:	eef0 1a67 	vmov.f32	s3, s15
 8009cec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009cf0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009cf4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8009f00 <PathPlan+0x3b00>
 8009cf8:	f7fb fb8a 	bl	8005410 <PIDGainInit>
 8009cfc:	e051      	b.n	8009da2 <PathPlan+0x39a2>
									pp->kd[1],
									30.0,
									&(pp->y));
					}
				}
			}else if(fabs(pp->error_x)<pp->f_tol_xy[0] && fabs(pp->error_y)<pp->f_tol_xy[0] && (int)pp->error_z<=pp->f_tol_z[0]){ // Reached last point
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009d04:	eeb0 7ae7 	vabs.f32	s14, s15
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 8009d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	d544      	bpl.n	8009da2 <PathPlan+0x39a2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8009d1e:	eeb0 7ae7 	vabs.f32	s14, s15
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 8009d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	d537      	bpl.n	8009da2 <PathPlan+0x39a2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8009d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	edd3 7ad3 	vldr	s15, [r3, #844]	; 0x34c
 8009d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4e:	d828      	bhi.n	8009da2 <PathPlan+0x39a2>
				led3 = 0;
 8009d50:	4a6c      	ldr	r2, [pc, #432]	; (8009f04 <PathPlan+0x3b04>)
 8009d52:	7853      	ldrb	r3, [r2, #1]
 8009d54:	f36f 13c7 	bfc	r3, #7, #1
 8009d58:	7053      	strb	r3, [r2, #1]
				PIDDelayInit(&(pp->x));
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fb fcda 	bl	800571a <PIDDelayInit>
				PIDDelayInit(&(pp->y));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fb fcd4 	bl	800571a <PIDDelayInit>
				PIDDelayInit(&(pp->z));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fb fcce 	bl	800571a <PIDDelayInit>
				pp->pp_start=0;
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8009d84:	f36f 0300 	bfc	r3, #0, #1
 8009d88:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
				pp->lsr_start = 0;
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8009d92:	f36f 1304 	bfc	r3, #4, #1
 8009d96:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
				pp->pp_lck_enb = 0;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
//					pp->lsr_start = 0;
//				}
			}
		}

		if(pp->lsr_start){
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 8409 	beq.w	800a5c6 <PathPlan+0x41c6>

			pp->dx = pp->error_x;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	665a      	str	r2, [r3, #100]	; 0x64
			pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	332c      	adds	r3, #44	; 0x2c
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	3304      	adds	r3, #4
 8009dce:	ed93 7a00 	vldr	s14, [r3]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

			pp->rotate=0;
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8009de8:	f36f 03c3 	bfc	r3, #3, #1
 8009dec:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

			if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009df6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfe:	d107      	bne.n	8009e10 <PathPlan+0x3a10>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0e:	d021      	beq.n	8009e54 <PathPlan+0x3a54>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1e:	d107      	bne.n	8009e30 <PathPlan+0x3a30>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2e:	d011      	beq.n	8009e54 <PathPlan+0x3a54>
				pp->heading = atan2f(pp->dy, pp->dx);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8009e3c:	eef0 0a47 	vmov.f32	s1, s14
 8009e40:	eeb0 0a67 	vmov.f32	s0, s15
 8009e44:	f019 fe12 	bl	8023a6c <atan2f>
 8009e48:	eef0 7a40 	vmov.f32	s15, s0
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8009e52:	e078      	b.n	8009f46 <PathPlan+0x3b46>
			} else {
				if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	d007      	beq.n	8009e74 <PathPlan+0x3a74>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e72:	d10b      	bne.n	8009e8c <PathPlan+0x3a8c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e82:	d503      	bpl.n	8009e8c <PathPlan+0x3a8c>
					pp->heading = -1.5708;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a20      	ldr	r2, [pc, #128]	; (8009f08 <PathPlan+0x3b08>)
 8009e88:	66da      	str	r2, [r3, #108]	; 0x6c
 8009e8a:	e05c      	b.n	8009f46 <PathPlan+0x3b46>
				} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	d007      	beq.n	8009eac <PathPlan+0x3aac>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009ea2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eaa:	d10b      	bne.n	8009ec4 <PathPlan+0x3ac4>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eba:	dd03      	ble.n	8009ec4 <PathPlan+0x3ac4>
					pp->heading = 1.5708;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a13      	ldr	r2, [pc, #76]	; (8009f0c <PathPlan+0x3b0c>)
 8009ec0:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ec2:	e040      	b.n	8009f46 <PathPlan+0x3b46>
				} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009eca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed2:	d007      	beq.n	8009ee4 <PathPlan+0x3ae4>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009eda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee2:	d115      	bne.n	8009f10 <PathPlan+0x3b10>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef2:	dd0d      	ble.n	8009f10 <PathPlan+0x3b10>
					pp->heading = 0.0;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	66da      	str	r2, [r3, #108]	; 0x6c
 8009efc:	e023      	b.n	8009f46 <PathPlan+0x3b46>
 8009efe:	bf00      	nop
 8009f00:	3ba3d70a 	.word	0x3ba3d70a
 8009f04:	40020814 	.word	0x40020814
 8009f08:	bfc90ff9 	.word	0xbfc90ff9
 8009f0c:	3fc90ff9 	.word	0x3fc90ff9
//						pp->rotate = 1;
				}
				else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009f16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1e:	d007      	beq.n	8009f30 <PathPlan+0x3b30>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009f26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2e:	d10a      	bne.n	8009f46 <PathPlan+0x3b46>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3e:	d502      	bpl.n	8009f46 <PathPlan+0x3b46>
				{
					pp->heading = M_PI;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4ad7      	ldr	r2, [pc, #860]	; (800a2a0 <PathPlan+0x3ea0>)
 8009f44:	66da      	str	r2, [r3, #108]	; 0x6c
				}
			}

			pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	3378      	adds	r3, #120	; 0x78
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	ed93 8a00 	vldr	s16, [r3]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8009f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f62:	f019 fcf9 	bl	8023958 <cosf>
 8009f66:	eef0 7a40 	vmov.f32	s15, s0
 8009f6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	3378      	adds	r3, #120	; 0x78
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	ed93 8a00 	vldr	s16, [r3]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8009f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f90:	f019 fd2a 	bl	80239e8 <sinf>
 8009f94:	eef0 7a40 	vmov.f32	s15, s0
 8009f98:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

			if(pp->rotate){
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009fa8:	f003 0308 	and.w	r3, r3, #8
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d007      	beq.n	8009fc2 <PathPlan+0x3bc2>
				pp->vx = pp->vy = 0.0;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	675a      	str	r2, [r3, #116]	; 0x74
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	671a      	str	r2, [r3, #112]	; 0x70
			}

			PID(&(pp->x));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fb fbc4 	bl	8005756 <PID>
			PID(&(pp->y));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fb fbbe 	bl	8005756 <PID>
			PID(&(pp->z));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fb fbb8 	bl	8005756 <PID>

			pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ff6:	f019 fcaf 	bl	8023958 <cosf>
 8009ffa:	eef0 7a40 	vmov.f32	s15, s0
 8009ffe:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a00e:	eeb0 0a67 	vmov.f32	s0, s15
 800a012:	f019 fce9 	bl	80239e8 <sinf>
 800a016:	eef0 7a40 	vmov.f32	s15, s0
 800a01a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a01e:	ee78 7a67 	vsub.f32	s15, s16, s15
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	edc3 7ab6 	vstr	s15, [r3, #728]	; 0x2d8
			pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a034:	eeb0 0a67 	vmov.f32	s0, s15
 800a038:	f019 fcd6 	bl	80239e8 <sinf>
 800a03c:	eef0 7a40 	vmov.f32	s15, s0
 800a040:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a050:	eeb0 0a67 	vmov.f32	s0, s15
 800a054:	f019 fc80 	bl	8023958 <cosf>
 800a058:	eef0 7a40 	vmov.f32	s15, s0
 800a05c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a060:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
			pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a076:	eeb0 0a67 	vmov.f32	s0, s15
 800a07a:	f019 fc6d 	bl	8023958 <cosf>
 800a07e:	eef0 7a40 	vmov.f32	s15, s0
 800a082:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a092:	eeb0 0a67 	vmov.f32	s0, s15
 800a096:	f019 fca7 	bl	80239e8 <sinf>
 800a09a:	eef0 7a40 	vmov.f32	s15, s0
 800a09e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a0a2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
			pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a0b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a0bc:	f019 fc94 	bl	80239e8 <sinf>
 800a0c0:	eef0 7a40 	vmov.f32	s15, s0
 800a0c4:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a0d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a0d8:	f019 fc3e 	bl	8023958 <cosf>
 800a0dc:	eef0 7a40 	vmov.f32	s15, s0
 800a0e0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a0e4:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4

			if(pp->base_shape== fwd_omni){
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	f040 8160 	bne.w	800a3ba <PathPlan+0x3fba>
					pp->u1 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a10a:	ee17 0a90 	vmov	r0, s15
 800a10e:	f7f6 fa1b 	bl	8000548 <__aeabi_f2d>
 800a112:	a361      	add	r3, pc, #388	; (adr r3, 800a298 <PathPlan+0x3e98>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 fa6e 	bl	80005f8 <__aeabi_dmul>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4614      	mov	r4, r2
 800a122:	461d      	mov	r5, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7f6 fa0c 	bl	8000548 <__aeabi_f2d>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 f8a8 	bl	800028c <__adddf3>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4610      	mov	r0, r2
 800a142:	4619      	mov	r1, r3
 800a144:	f7f6 fd50 	bl	8000be8 <__aeabi_d2f>
 800a148:	4602      	mov	r2, r0
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a15c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a160:	ee17 0a90 	vmov	r0, s15
 800a164:	f7f6 f9f0 	bl	8000548 <__aeabi_f2d>
 800a168:	a34b      	add	r3, pc, #300	; (adr r3, 800a298 <PathPlan+0x3e98>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fa43 	bl	80005f8 <__aeabi_dmul>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4614      	mov	r4, r2
 800a178:	461d      	mov	r5, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a180:	4618      	mov	r0, r3
 800a182:	f7f6 f9e1 	bl	8000548 <__aeabi_f2d>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4620      	mov	r0, r4
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4610      	mov	r0, r2
 800a198:	4619      	mov	r1, r3
 800a19a:	f7f6 fd25 	bl	8000be8 <__aeabi_d2f>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b6:	ee17 0a90 	vmov	r0, s15
 800a1ba:	f7f6 f9c5 	bl	8000548 <__aeabi_f2d>
 800a1be:	a336      	add	r3, pc, #216	; (adr r3, 800a298 <PathPlan+0x3e98>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 fa18 	bl	80005f8 <__aeabi_dmul>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	461d      	mov	r5, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f6 f9b6 	bl	8000548 <__aeabi_f2d>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7f6 f852 	bl	800028c <__adddf3>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f7f6 fcfa 	bl	8000be8 <__aeabi_d2f>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a20c:	ee17 0a90 	vmov	r0, s15
 800a210:	f7f6 f99a 	bl	8000548 <__aeabi_f2d>
 800a214:	a320      	add	r3, pc, #128	; (adr r3, 800a298 <PathPlan+0x3e98>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f6 f9ed 	bl	80005f8 <__aeabi_dmul>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4614      	mov	r4, r2
 800a224:	461d      	mov	r5, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7f6 f98b 	bl	8000548 <__aeabi_f2d>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 f825 	bl	8000288 <__aeabi_dsub>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4610      	mov	r0, r2
 800a244:	4619      	mov	r1, r3
 800a246:	f7f6 fccf 	bl	8000be8 <__aeabi_d2f>
 800a24a:	4602      	mov	r2, r0
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				pp->u2 = -pp->outz * 1.0;
//				pp->u3 = (pp->outz * 1.0);
//				pp->u4 = -(pp->outz * 1.0);


				pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a25e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a262:	ee17 0a90 	vmov	r0, s15
 800a266:	f7f6 f96f 	bl	8000548 <__aeabi_f2d>
 800a26a:	a30b      	add	r3, pc, #44	; (adr r3, 800a298 <PathPlan+0x3e98>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f7f6 f9c2 	bl	80005f8 <__aeabi_dmul>
 800a274:	4602      	mov	r2, r0
 800a276:	460b      	mov	r3, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	461d      	mov	r5, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a282:	4618      	mov	r0, r3
 800a284:	f7f6 f960 	bl	8000548 <__aeabi_f2d>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f5 fffc 	bl	800028c <__adddf3>
 800a294:	4602      	mov	r2, r0
 800a296:	e005      	b.n	800a2a4 <PathPlan+0x3ea4>
 800a298:	dbf8b9bb 	.word	0xdbf8b9bb
 800a29c:	3fe6a09e 	.word	0x3fe6a09e
 800a2a0:	40490fdb 	.word	0x40490fdb
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	f7f6 fc9d 	bl	8000be8 <__aeabi_d2f>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
				pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a2c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2c6:	ee17 0a90 	vmov	r0, s15
 800a2ca:	f7f6 f93d 	bl	8000548 <__aeabi_f2d>
 800a2ce:	a3c5      	add	r3, pc, #788	; (adr r3, 800a5e4 <PathPlan+0x41e4>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4614      	mov	r4, r2
 800a2de:	461d      	mov	r5, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7f6 f92e 	bl	8000548 <__aeabi_f2d>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f5 ffca 	bl	800028c <__adddf3>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4619      	mov	r1, r3
 800a300:	f7f6 fc72 	bl	8000be8 <__aeabi_d2f>
 800a304:	4602      	mov	r2, r0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
				pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a31c:	ee17 0a90 	vmov	r0, s15
 800a320:	f7f6 f912 	bl	8000548 <__aeabi_f2d>
 800a324:	a3af      	add	r3, pc, #700	; (adr r3, 800a5e4 <PathPlan+0x41e4>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	f7f6 f965 	bl	80005f8 <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4614      	mov	r4, r2
 800a334:	461d      	mov	r5, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f6 f903 	bl	8000548 <__aeabi_f2d>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f7f5 ff9f 	bl	800028c <__adddf3>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	4610      	mov	r0, r2
 800a354:	4619      	mov	r1, r3
 800a356:	f7f6 fc47 	bl	8000be8 <__aeabi_d2f>
 800a35a:	4602      	mov	r2, r0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
				pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a36e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a372:	ee17 0a90 	vmov	r0, s15
 800a376:	f7f6 f8e7 	bl	8000548 <__aeabi_f2d>
 800a37a:	a39a      	add	r3, pc, #616	; (adr r3, 800a5e4 <PathPlan+0x41e4>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4614      	mov	r4, r2
 800a38a:	461d      	mov	r5, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800a392:	4618      	mov	r0, r3
 800a394:	f7f6 f8d8 	bl	8000548 <__aeabi_f2d>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f5 ff74 	bl	800028c <__adddf3>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f7f6 fc1c 	bl	8000be8 <__aeabi_d2f>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
//		}




}
 800a3b8:	e105      	b.n	800a5c6 <PathPlan+0x41c6>
			} else if(pp->base_shape== 1){
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	f040 8100 	bne.w	800a5c6 <PathPlan+0x41c6>
				pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7f6 f8bb 	bl	8000548 <__aeabi_f2d>
 800a3d2:	a381      	add	r3, pc, #516	; (adr r3, 800a5d8 <PathPlan+0x41d8>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f7f6 f90e 	bl	80005f8 <__aeabi_dmul>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	461d      	mov	r5, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f6 f8ac 	bl	8000548 <__aeabi_f2d>
 800a3f0:	f04f 0200 	mov.w	r2, #0
 800a3f4:	4b7a      	ldr	r3, [pc, #488]	; (800a5e0 <PathPlan+0x41e0>)
 800a3f6:	f7f6 f8ff 	bl	80005f8 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f5 ff41 	bl	8000288 <__aeabi_dsub>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4614      	mov	r4, r2
 800a40c:	461d      	mov	r5, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a414:	4618      	mov	r0, r3
 800a416:	f7f6 f897 	bl	8000548 <__aeabi_f2d>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4620      	mov	r0, r4
 800a420:	4629      	mov	r1, r5
 800a422:	f7f5 ff33 	bl	800028c <__adddf3>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4610      	mov	r0, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	f7f6 fbdb 	bl	8000be8 <__aeabi_d2f>
 800a432:	4602      	mov	r2, r0
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
				pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800a440:	4618      	mov	r0, r3
 800a442:	f7f6 f881 	bl	8000548 <__aeabi_f2d>
 800a446:	a364      	add	r3, pc, #400	; (adr r3, 800a5d8 <PathPlan+0x41d8>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f6 f8d4 	bl	80005f8 <__aeabi_dmul>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4614      	mov	r4, r2
 800a456:	461d      	mov	r5, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f6 f872 	bl	8000548 <__aeabi_f2d>
 800a464:	f04f 0200 	mov.w	r2, #0
 800a468:	4b5d      	ldr	r3, [pc, #372]	; (800a5e0 <PathPlan+0x41e0>)
 800a46a:	f7f6 f8c5 	bl	80005f8 <__aeabi_dmul>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	f7f5 ff09 	bl	800028c <__adddf3>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4614      	mov	r4, r2
 800a480:	461d      	mov	r5, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f6 f85d 	bl	8000548 <__aeabi_f2d>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4620      	mov	r0, r4
 800a494:	4629      	mov	r1, r5
 800a496:	f7f5 fef7 	bl	8000288 <__aeabi_dsub>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4610      	mov	r0, r2
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f7f6 fba1 	bl	8000be8 <__aeabi_d2f>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
				pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800a4ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
				pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7f6 f83c 	bl	8000548 <__aeabi_f2d>
 800a4d0:	a341      	add	r3, pc, #260	; (adr r3, 800a5d8 <PathPlan+0x41d8>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4614      	mov	r4, r2
 800a4e0:	461d      	mov	r5, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f6 f82d 	bl	8000548 <__aeabi_f2d>
 800a4ee:	f04f 0200 	mov.w	r2, #0
 800a4f2:	4b3b      	ldr	r3, [pc, #236]	; (800a5e0 <PathPlan+0x41e0>)
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f5 fec2 	bl	8000288 <__aeabi_dsub>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4614      	mov	r4, r2
 800a50a:	461d      	mov	r5, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a512:	4618      	mov	r0, r3
 800a514:	f7f6 f818 	bl	8000548 <__aeabi_f2d>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4620      	mov	r0, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	f7f5 feb4 	bl	800028c <__adddf3>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4610      	mov	r0, r2
 800a52a:	4619      	mov	r1, r3
 800a52c:	f7f6 fb5c 	bl	8000be8 <__aeabi_d2f>
 800a530:	4602      	mov	r2, r0
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
				pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f6 f802 	bl	8000548 <__aeabi_f2d>
 800a544:	a324      	add	r3, pc, #144	; (adr r3, 800a5d8 <PathPlan+0x41d8>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f7f6 f855 	bl	80005f8 <__aeabi_dmul>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4614      	mov	r4, r2
 800a554:	461d      	mov	r5, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7f5 fff3 	bl	8000548 <__aeabi_f2d>
 800a562:	f04f 0200 	mov.w	r2, #0
 800a566:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <PathPlan+0x41e0>)
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f5 fe8a 	bl	800028c <__adddf3>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	4614      	mov	r4, r2
 800a57e:	461d      	mov	r5, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a586:	4618      	mov	r0, r3
 800a588:	f7f5 ffde 	bl	8000548 <__aeabi_f2d>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4620      	mov	r0, r4
 800a592:	4629      	mov	r1, r5
 800a594:	f7f5 fe7a 	bl	800028c <__adddf3>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4610      	mov	r0, r2
 800a59e:	4619      	mov	r1, r3
 800a5a0:	f7f6 fb22 	bl	8000be8 <__aeabi_d2f>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
				pp->v3 = 1.0 * pp->rvx + pp->u3;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	ed93 7ab8 	vldr	s14, [r3, #736]	; 0x2e0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 800a5b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
}
 800a5c2:	e000      	b.n	800a5c6 <PathPlan+0x41c6>
		if(pp->pp_crv_radius[pp->point_count]){
 800a5c4:	bf00      	nop
}
 800a5c6:	bf00      	nop
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	ecbd 8b02 	vpop	{d8}
 800a5d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	a1cac083 	.word	0xa1cac083
 800a5dc:	3febb645 	.word	0x3febb645
 800a5e0:	3fe00000 	.word	0x3fe00000
 800a5e4:	dbf8b9bb 	.word	0xdbf8b9bb
 800a5e8:	3fe6a09e 	.word	0x3fe6a09e

0800a5ec <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	230b      	movs	r3, #11
 800a5fe:	2188      	movs	r1, #136	; 0x88
 800a600:	f00d fa64 	bl	8017acc <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f81e 	bl	800a646 <PSx_HandlerI2C>
}
 800a60a:	bf00      	nop
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	230b      	movs	r3, #11
 800a62c:	2188      	movs	r1, #136	; 0x88
 800a62e:	f00d fa4d 	bl	8017acc <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	789a      	ldrb	r2, [r3, #2]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	78da      	ldrb	r2, [r3, #3]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	791b      	ldrb	r3, [r3, #4]
 800a666:	461a      	mov	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	795b      	ldrb	r3, [r3, #5]
 800a670:	461a      	mov	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	799b      	ldrb	r3, [r3, #6]
 800a67a:	461a      	mov	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	79db      	ldrb	r3, [r3, #7]
 800a684:	461a      	mov	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	7a1b      	ldrb	r3, [r3, #8]
 800a68e:	461a      	mov	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	7a5b      	ldrb	r3, [r3, #9]
 800a698:	461a      	mov	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	7a9a      	ldrb	r2, [r3, #10]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7ada      	ldrb	r2, [r3, #11]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f804 	bl	800a6c0 <PSxBTGetXY>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	ee07 3a90 	vmov	s15, r3
 800a6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800a9d8 <PSxBTGetXY+0x318>
 800a6d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e0:	d53e      	bpl.n	800a760 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	ee17 0a90 	vmov	r0, s15
 800a6f2:	f7f5 ff29 	bl	8000548 <__aeabi_f2d>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	a1b5      	add	r1, pc, #724	; (adr r1, 800a9d0 <PSxBTGetXY+0x310>)
 800a6fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a700:	f7f5 fdc2 	bl	8000288 <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4610      	mov	r0, r2
 800a70a:	4619      	mov	r1, r3
 800a70c:	f04f 0200 	mov.w	r2, #0
 800a710:	4bb2      	ldr	r3, [pc, #712]	; (800a9dc <PSxBTGetXY+0x31c>)
 800a712:	f7f6 f89b 	bl	800084c <__aeabi_ddiv>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4610      	mov	r0, r2
 800a71c:	4619      	mov	r1, r3
 800a71e:	f7f6 fa63 	bl	8000be8 <__aeabi_d2f>
 800a722:	4602      	mov	r2, r0
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a72e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a736:	d504      	bpl.n	800a742 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	64da      	str	r2, [r3, #76]	; 0x4c
 800a740:	e05d      	b.n	800a7fe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a74c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a754:	dd53      	ble.n	800a7fe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a75c:	64da      	str	r2, [r3, #76]	; 0x4c
 800a75e:	e04e      	b.n	800a7fe <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800a9e8 <PSxBTGetXY+0x328>
 800a770:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a778:	dd3d      	ble.n	800a7f6 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a786:	ee17 0a90 	vmov	r0, s15
 800a78a:	f7f5 fedd 	bl	8000548 <__aeabi_f2d>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	4992      	ldr	r1, [pc, #584]	; (800a9e0 <PSxBTGetXY+0x320>)
 800a798:	f7f5 fd76 	bl	8000288 <__aeabi_dsub>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	f04f 0200 	mov.w	r2, #0
 800a7a8:	4b8c      	ldr	r3, [pc, #560]	; (800a9dc <PSxBTGetXY+0x31c>)
 800a7aa:	f7f6 f84f 	bl	800084c <__aeabi_ddiv>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	f7f6 fa17 	bl	8000be8 <__aeabi_d2f>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a7c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ce:	dd04      	ble.n	800a7da <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	64da      	str	r2, [r3, #76]	; 0x4c
 800a7d8:	e011      	b.n	800a7fe <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a7e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a7e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ec:	d507      	bpl.n	800a7fe <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a7c      	ldr	r2, [pc, #496]	; (800a9e4 <PSxBTGetXY+0x324>)
 800a7f2:	64da      	str	r2, [r3, #76]	; 0x4c
 800a7f4:	e003      	b.n	800a7fe <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f04f 0200 	mov.w	r2, #0
 800a7fc:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a9d8 <PSxBTGetXY+0x318>
 800a80e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	d53e      	bpl.n	800a896 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81c:	ee07 3a90 	vmov	s15, r3
 800a820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a824:	ee17 0a90 	vmov	r0, s15
 800a828:	f7f5 fe8e 	bl	8000548 <__aeabi_f2d>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	a167      	add	r1, pc, #412	; (adr r1, 800a9d0 <PSxBTGetXY+0x310>)
 800a832:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a836:	f7f5 fd27 	bl	8000288 <__aeabi_dsub>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4610      	mov	r0, r2
 800a840:	4619      	mov	r1, r3
 800a842:	f04f 0200 	mov.w	r2, #0
 800a846:	4b65      	ldr	r3, [pc, #404]	; (800a9dc <PSxBTGetXY+0x31c>)
 800a848:	f7f6 f800 	bl	800084c <__aeabi_ddiv>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	4610      	mov	r0, r2
 800a852:	4619      	mov	r1, r3
 800a854:	f7f6 f9c8 	bl	8000be8 <__aeabi_d2f>
 800a858:	4602      	mov	r2, r0
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86c:	d504      	bpl.n	800a878 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f04f 0200 	mov.w	r2, #0
 800a874:	651a      	str	r2, [r3, #80]	; 0x50
 800a876:	e05d      	b.n	800a934 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a87e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a882:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88a:	dd53      	ble.n	800a934 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a892:	651a      	str	r2, [r3, #80]	; 0x50
 800a894:	e04e      	b.n	800a934 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89a:	ee07 3a90 	vmov	s15, r3
 800a89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8a2:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800a9e8 <PSxBTGetXY+0x328>
 800a8a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	dd3d      	ble.n	800a92c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b4:	ee07 3a90 	vmov	s15, r3
 800a8b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8bc:	ee17 0a90 	vmov	r0, s15
 800a8c0:	f7f5 fe42 	bl	8000548 <__aeabi_f2d>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	f04f 0000 	mov.w	r0, #0
 800a8cc:	4944      	ldr	r1, [pc, #272]	; (800a9e0 <PSxBTGetXY+0x320>)
 800a8ce:	f7f5 fcdb 	bl	8000288 <__aeabi_dsub>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f04f 0200 	mov.w	r2, #0
 800a8de:	4b3f      	ldr	r3, [pc, #252]	; (800a9dc <PSxBTGetXY+0x31c>)
 800a8e0:	f7f5 ffb4 	bl	800084c <__aeabi_ddiv>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f7f6 f97c 	bl	8000be8 <__aeabi_d2f>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a8fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a904:	dd04      	ble.n	800a910 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	651a      	str	r2, [r3, #80]	; 0x50
 800a90e:	e011      	b.n	800a934 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a916:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a91a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a922:	d507      	bpl.n	800a934 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a2f      	ldr	r2, [pc, #188]	; (800a9e4 <PSxBTGetXY+0x324>)
 800a928:	651a      	str	r2, [r3, #80]	; 0x50
 800a92a:	e003      	b.n	800a934 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f04f 0200 	mov.w	r2, #0
 800a932:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a940:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a9d8 <PSxBTGetXY+0x318>
 800a944:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	d54e      	bpl.n	800a9ec <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	ee17 0a90 	vmov	r0, s15
 800a95e:	f7f5 fdf3 	bl	8000548 <__aeabi_f2d>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	a11a      	add	r1, pc, #104	; (adr r1, 800a9d0 <PSxBTGetXY+0x310>)
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	f7f5 fc8c 	bl	8000288 <__aeabi_dsub>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4610      	mov	r0, r2
 800a976:	4619      	mov	r1, r3
 800a978:	f04f 0200 	mov.w	r2, #0
 800a97c:	4b17      	ldr	r3, [pc, #92]	; (800a9dc <PSxBTGetXY+0x31c>)
 800a97e:	f7f5 ff65 	bl	800084c <__aeabi_ddiv>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4610      	mov	r0, r2
 800a988:	4619      	mov	r1, r3
 800a98a:	f7f6 f92d 	bl	8000be8 <__aeabi_d2f>
 800a98e:	4602      	mov	r2, r0
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a99a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a2:	d504      	bpl.n	800a9ae <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f04f 0200 	mov.w	r2, #0
 800a9aa:	655a      	str	r2, [r3, #84]	; 0x54
 800a9ac:	e06d      	b.n	800aa8a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a9b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c0:	dd63      	ble.n	800aa8a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a9c8:	655a      	str	r2, [r3, #84]	; 0x54
 800a9ca:	e05e      	b.n	800aa8a <PSxBTGetXY+0x3ca>
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	00000000 	.word	0x00000000
 800a9d4:	405cc000 	.word	0x405cc000
 800a9d8:	42e60000 	.word	0x42e60000
 800a9dc:	40590000 	.word	0x40590000
 800a9e0:	40618000 	.word	0x40618000
 800a9e4:	bf800000 	.word	0xbf800000
 800a9e8:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a9e8 <PSxBTGetXY+0x328>
 800a9fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa04:	dd3d      	ble.n	800aa82 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa12:	ee17 0a90 	vmov	r0, s15
 800aa16:	f7f5 fd97 	bl	8000548 <__aeabi_f2d>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	f04f 0000 	mov.w	r0, #0
 800aa22:	4981      	ldr	r1, [pc, #516]	; (800ac28 <PSxBTGetXY+0x568>)
 800aa24:	f7f5 fc30 	bl	8000288 <__aeabi_dsub>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4619      	mov	r1, r3
 800aa30:	f04f 0200 	mov.w	r2, #0
 800aa34:	4b7d      	ldr	r3, [pc, #500]	; (800ac2c <PSxBTGetXY+0x56c>)
 800aa36:	f7f5 ff09 	bl	800084c <__aeabi_ddiv>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4610      	mov	r0, r2
 800aa40:	4619      	mov	r1, r3
 800aa42:	f7f6 f8d1 	bl	8000be8 <__aeabi_d2f>
 800aa46:	4602      	mov	r2, r0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800aa52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5a:	dd04      	ble.n	800aa66 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f04f 0200 	mov.w	r2, #0
 800aa62:	655a      	str	r2, [r3, #84]	; 0x54
 800aa64:	e011      	b.n	800aa8a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800aa6c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aa70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa78:	d507      	bpl.n	800aa8a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a6c      	ldr	r2, [pc, #432]	; (800ac30 <PSxBTGetXY+0x570>)
 800aa7e:	655a      	str	r2, [r3, #84]	; 0x54
 800aa80:	e003      	b.n	800aa8a <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa96:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ac34 <PSxBTGetXY+0x574>
 800aa9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa2:	d53e      	bpl.n	800ab22 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa8:	ee07 3a90 	vmov	s15, r3
 800aaac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab0:	ee17 0a90 	vmov	r0, s15
 800aab4:	f7f5 fd48 	bl	8000548 <__aeabi_f2d>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	a156      	add	r1, pc, #344	; (adr r1, 800ac18 <PSxBTGetXY+0x558>)
 800aabe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac2:	f7f5 fbe1 	bl	8000288 <__aeabi_dsub>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4610      	mov	r0, r2
 800aacc:	4619      	mov	r1, r3
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	4b56      	ldr	r3, [pc, #344]	; (800ac2c <PSxBTGetXY+0x56c>)
 800aad4:	f7f5 feba 	bl	800084c <__aeabi_ddiv>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4610      	mov	r0, r2
 800aade:	4619      	mov	r1, r3
 800aae0:	f7f6 f882 	bl	8000be8 <__aeabi_d2f>
 800aae4:	4602      	mov	r2, r0
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aaf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf8:	d504      	bpl.n	800ab04 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	659a      	str	r2, [r3, #88]	; 0x58
 800ab02:	e05d      	b.n	800abc0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ab0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab16:	dd53      	ble.n	800abc0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab1e:	659a      	str	r2, [r3, #88]	; 0x58
 800ab20:	e04e      	b.n	800abc0 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800ac38 <PSxBTGetXY+0x578>
 800ab32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab3a:	dd3d      	ble.n	800abb8 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab48:	ee17 0a90 	vmov	r0, s15
 800ab4c:	f7f5 fcfc 	bl	8000548 <__aeabi_f2d>
 800ab50:	4602      	mov	r2, r0
 800ab52:	460b      	mov	r3, r1
 800ab54:	f04f 0000 	mov.w	r0, #0
 800ab58:	4933      	ldr	r1, [pc, #204]	; (800ac28 <PSxBTGetXY+0x568>)
 800ab5a:	f7f5 fb95 	bl	8000288 <__aeabi_dsub>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4610      	mov	r0, r2
 800ab64:	4619      	mov	r1, r3
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	4b30      	ldr	r3, [pc, #192]	; (800ac2c <PSxBTGetXY+0x56c>)
 800ab6c:	f7f5 fe6e 	bl	800084c <__aeabi_ddiv>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4610      	mov	r0, r2
 800ab76:	4619      	mov	r1, r3
 800ab78:	f7f6 f836 	bl	8000be8 <__aeabi_d2f>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ab88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ab8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab90:	dd04      	ble.n	800ab9c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	659a      	str	r2, [r3, #88]	; 0x58
 800ab9a:	e011      	b.n	800abc0 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aba2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800abaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abae:	d507      	bpl.n	800abc0 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <PSxBTGetXY+0x570>)
 800abb4:	659a      	str	r2, [r3, #88]	; 0x58
 800abb6:	e003      	b.n	800abc0 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7f5 fc9d 	bl	8000504 <__aeabi_ui2d>
 800abca:	a315      	add	r3, pc, #84	; (adr r3, 800ac20 <PSxBTGetXY+0x560>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fe3c 	bl	800084c <__aeabi_ddiv>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4610      	mov	r0, r2
 800abda:	4619      	mov	r1, r3
 800abdc:	f7f6 f804 	bl	8000be8 <__aeabi_d2f>
 800abe0:	4602      	mov	r2, r0
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abea:	4618      	mov	r0, r3
 800abec:	f7f5 fc8a 	bl	8000504 <__aeabi_ui2d>
 800abf0:	a30b      	add	r3, pc, #44	; (adr r3, 800ac20 <PSxBTGetXY+0x560>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f7f5 fe29 	bl	800084c <__aeabi_ddiv>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4610      	mov	r0, r2
 800ac00:	4619      	mov	r1, r3
 800ac02:	f7f5 fff1 	bl	8000be8 <__aeabi_d2f>
 800ac06:	4602      	mov	r2, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	f3af 8000 	nop.w
 800ac18:	00000000 	.word	0x00000000
 800ac1c:	405cc000 	.word	0x405cc000
 800ac20:	00000000 	.word	0x00000000
 800ac24:	406fe000 	.word	0x406fe000
 800ac28:	40618000 	.word	0x40618000
 800ac2c:	40590000 	.word	0x40590000
 800ac30:	bf800000 	.word	0xbf800000
 800ac34:	42e60000 	.word	0x42e60000
 800ac38:	430c0000 	.word	0x430c0000

0800ac3c <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6858      	ldr	r0, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3308      	adds	r3, #8
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	f010 fcb7 	bl	801b5d0 <HAL_UART_Receive_IT>

}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	7f5b      	ldrb	r3, [r3, #29]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d035      	beq.n	800ace8 <R6091U_Handler+0x7c>
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	f300 80b2 	bgt.w	800ade6 <R6091U_Handler+0x17a>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <R6091U_Handler+0x20>
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d011      	beq.n	800acae <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 800ac8a:	e0ac      	b.n	800ade6 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7a1b      	ldrb	r3, [r3, #8]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2baa      	cmp	r3, #170	; 0xaa
 800ac94:	d102      	bne.n	800ac9c <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6858      	ldr	r0, [r3, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3308      	adds	r3, #8
 800aca4:	2201      	movs	r2, #1
 800aca6:	4619      	mov	r1, r3
 800aca8:	f010 fc92 	bl	801b5d0 <HAL_UART_Receive_IT>
		break;
 800acac:	e09b      	b.n	800ade6 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	7a1b      	ldrb	r3, [r3, #8]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d10b      	bne.n	800acd0 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6858      	ldr	r0, [r3, #4]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3308      	adds	r3, #8
 800acc6:	220d      	movs	r2, #13
 800acc8:	4619      	mov	r1, r3
 800acca:	f010 fc81 	bl	801b5d0 <HAL_UART_Receive_IT>
		break;
 800acce:	e08a      	b.n	800ade6 <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6858      	ldr	r0, [r3, #4]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3308      	adds	r3, #8
 800acde:	2201      	movs	r2, #1
 800ace0:	4619      	mov	r1, r3
 800ace2:	f010 fc75 	bl	801b5d0 <HAL_UART_Receive_IT>
		break;
 800ace6:	e07e      	b.n	800ade6 <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7a1b      	ldrb	r3, [r3, #8]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7a5b      	ldrb	r3, [r3, #9]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	4413      	add	r3, r2
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7a9b      	ldrb	r3, [r3, #10]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	4413      	add	r3, r2
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	7adb      	ldrb	r3, [r3, #11]
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	4413      	add	r3, r2
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7b1b      	ldrb	r3, [r3, #12]
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	4413      	add	r3, r2
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	7b5b      	ldrb	r3, [r3, #13]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	4413      	add	r3, r2
 800ad26:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	7b9b      	ldrb	r3, [r3, #14]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	4413      	add	r3, r2
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7bdb      	ldrb	r3, [r3, #15]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	4413      	add	r3, r2
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7c1b      	ldrb	r3, [r3, #16]
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7c5b      	ldrb	r3, [r3, #17]
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	4413      	add	r3, r2
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	7c9b      	ldrb	r3, [r3, #18]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	4413      	add	r3, r2
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7cdb      	ldrb	r3, [r3, #19]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7d1b      	ldrb	r3, [r3, #20]
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d121      	bne.n	800adc0 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3309      	adds	r3, #9
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 800ad84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ad88:	ee07 3a90 	vmov	s15, r3
 800ad8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad90:	eddf 6a17 	vldr	s13, [pc, #92]	; 800adf0 <R6091U_Handler+0x184>
 800ad94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad98:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800adf4 <R6091U_Handler+0x188>
 800ad9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ada0:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <R6091U_Handler+0x18c>)
 800ada2:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 800ada6:	4b15      	ldr	r3, [pc, #84]	; (800adfc <R6091U_Handler+0x190>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b13      	cmp	r3, #19
 800adac:	dd03      	ble.n	800adb6 <R6091U_Handler+0x14a>
				testCounter2 = 0;
 800adae:	4b13      	ldr	r3, [pc, #76]	; (800adfc <R6091U_Handler+0x190>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	e004      	b.n	800adc0 <R6091U_Handler+0x154>
				testCounter2 ++;
 800adb6:	4b11      	ldr	r3, [pc, #68]	; (800adfc <R6091U_Handler+0x190>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	4a0f      	ldr	r2, [pc, #60]	; (800adfc <R6091U_Handler+0x190>)
 800adbe:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3308      	adds	r3, #8
 800adc4:	220d      	movs	r2, #13
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f014 f847 	bl	801ee5c <memset>
		IMU->State = PENDING_SYNC;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6858      	ldr	r0, [r3, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3308      	adds	r3, #8
 800addc:	2201      	movs	r2, #1
 800adde:	4619      	mov	r1, r3
 800ade0:	f010 fbf6 	bl	801b5d0 <HAL_UART_Receive_IT>
		break;
 800ade4:	bf00      	nop
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	42c80000 	.word	0x42c80000
 800adf4:	43340000 	.word	0x43340000
 800adf8:	20009b94 	.word	0x20009b94
 800adfc:	200067f4 	.word	0x200067f4

0800ae00 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 800ae10:	4b28      	ldr	r3, [pc, #160]	; (800aeb4 <RNSInit+0xb4>)
 800ae12:	2201      	movs	r2, #1
 800ae14:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <RNSInit+0xb4>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	2302      	movs	r3, #2
 800ae22:	4a24      	ldr	r2, [pc, #144]	; (800aeb4 <RNSInit+0xb4>)
 800ae24:	2117      	movs	r1, #23
 800ae26:	f7f8 fcb5 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 800ae32:	4b20      	ldr	r3, [pc, #128]	; (800aeb4 <RNSInit+0xb4>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <RNSInit+0xb4>)
 800ae3a:	2219      	movs	r2, #25
 800ae3c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	2302      	movs	r3, #2
 800ae44:	4a1b      	ldr	r2, [pc, #108]	; (800aeb4 <RNSInit+0xb4>)
 800ae46:	2117      	movs	r1, #23
 800ae48:	f7f8 fca4 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800ae58:	e022      	b.n	800aea0 <RNSInit+0xa0>
		if(wait >= 2000000){
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4a16      	ldr	r2, [pc, #88]	; (800aeb8 <RNSInit+0xb8>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	dd1b      	ble.n	800ae9a <RNSInit+0x9a>
			insData_send[0] = 1;
 800ae62:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <RNSInit+0xb4>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <RNSInit+0xb4>)
 800ae6a:	2219      	movs	r2, #25
 800ae6c:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6818      	ldr	r0, [r3, #0]
 800ae72:	2302      	movs	r3, #2
 800ae74:	4a0f      	ldr	r2, [pc, #60]	; (800aeb4 <RNSInit+0xb4>)
 800ae76:	2117      	movs	r1, #23
 800ae78:	f7f8 fc8c 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 800ae7c:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <RNSInit+0xbc>)
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	4a0e      	ldr	r2, [pc, #56]	; (800aebc <RNSInit+0xbc>)
 800ae84:	43db      	mvns	r3, r3
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	09db      	lsrs	r3, r3, #7
 800ae8a:	b2d9      	uxtb	r1, r3
 800ae8c:	7853      	ldrb	r3, [r2, #1]
 800ae8e:	f361 13c7 	bfi	r3, r1, #7, #1
 800ae92:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	e002      	b.n	800aea0 <RNSInit+0xa0>
		}else{
			wait ++;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d0d7      	beq.n	800ae5a <RNSInit+0x5a>
		}
	}
}
 800aeaa:	bf00      	nop
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	2000a904 	.word	0x2000a904
 800aeb8:	001e847f 	.word	0x001e847f
 800aebc:	40020814 	.word	0x40020814

0800aec0 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2203      	movs	r2, #3
 800aecc:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f04f 0200 	mov.w	r2, #0
 800aed4:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f04f 0200 	mov.w	r2, #0
 800aedc:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f04f 0200 	mov.w	r2, #0
 800aee4:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f04f 0200 	mov.w	r2, #0
 800aeec:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2202      	movs	r2, #2
 800aef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800aef6:	4b31      	ldr	r3, [pc, #196]	; (800afbc <RNSStop+0xfc>)
 800aef8:	2211      	movs	r2, #17
 800aefa:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	791a      	ldrb	r2, [r3, #4]
 800af00:	4b2e      	ldr	r3, [pc, #184]	; (800afbc <RNSStop+0xfc>)
 800af02:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6818      	ldr	r0, [r3, #0]
 800af08:	2302      	movs	r3, #2
 800af0a:	4a2c      	ldr	r2, [pc, #176]	; (800afbc <RNSStop+0xfc>)
 800af0c:	2117      	movs	r1, #23
 800af0e:	f7f8 fc41 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f103 0208 	add.w	r2, r3, #8
 800af1c:	2308      	movs	r3, #8
 800af1e:	2118      	movs	r1, #24
 800af20:	f7f8 fc38 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f103 0210 	add.w	r2, r3, #16
 800af2e:	2308      	movs	r3, #8
 800af30:	2119      	movs	r1, #25
 800af32:	f7f8 fc2f 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800af3a:	e035      	b.n	800afa8 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4a20      	ldr	r2, [pc, #128]	; (800afc0 <RNSStop+0x100>)
 800af40:	4293      	cmp	r3, r2
 800af42:	dd2e      	ble.n	800afa2 <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <RNSStop+0xfc>)
 800af46:	2211      	movs	r2, #17
 800af48:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	791a      	ldrb	r2, [r3, #4]
 800af4e:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <RNSStop+0xfc>)
 800af50:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	2302      	movs	r3, #2
 800af58:	4a18      	ldr	r2, [pc, #96]	; (800afbc <RNSStop+0xfc>)
 800af5a:	2117      	movs	r1, #23
 800af5c:	f7f8 fc1a 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f103 0208 	add.w	r2, r3, #8
 800af6a:	2308      	movs	r3, #8
 800af6c:	2118      	movs	r1, #24
 800af6e:	f7f8 fc11 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f103 0210 	add.w	r2, r3, #16
 800af7c:	2308      	movs	r3, #8
 800af7e:	2119      	movs	r1, #25
 800af80:	f7f8 fc08 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800af84:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <RNSStop+0x104>)
 800af86:	785b      	ldrb	r3, [r3, #1]
 800af88:	b25b      	sxtb	r3, r3
 800af8a:	4a0e      	ldr	r2, [pc, #56]	; (800afc4 <RNSStop+0x104>)
 800af8c:	43db      	mvns	r3, r3
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	09db      	lsrs	r3, r3, #7
 800af92:	b2d9      	uxtb	r1, r3
 800af94:	7853      	ldrb	r3, [r2, #1]
 800af96:	f361 13c7 	bfi	r3, r1, #7, #1
 800af9a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	e002      	b.n	800afa8 <RNSStop+0xe8>
		}
		else
			wait++;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d0c4      	beq.n	800af3c <RNSStop+0x7c>
	}


}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	2000a904 	.word	0x2000a904
 800afc0:	001e847f 	.word	0x001e847f
 800afc4:	40020814 	.word	0x40020814

0800afc8 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	ed87 0a05 	vstr	s0, [r7, #20]
 800afd2:	edc7 0a04 	vstr	s1, [r7, #16]
 800afd6:	ed87 1a03 	vstr	s2, [r7, #12]
 800afda:	edc7 1a02 	vstr	s3, [r7, #8]
 800afde:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2205      	movs	r2, #5
 800afe4:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f804 	bl	800b00c <RNSSendIns>

}
 800b004:	bf00      	nop
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 800b014:	bf00      	nop
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d0fa      	beq.n	800b016 <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800b028:	4b31      	ldr	r3, [pc, #196]	; (800b0f0 <RNSSendIns+0xe4>)
 800b02a:	2211      	movs	r2, #17
 800b02c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	791a      	ldrb	r2, [r3, #4]
 800b032:	4b2f      	ldr	r3, [pc, #188]	; (800b0f0 <RNSSendIns+0xe4>)
 800b034:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	2302      	movs	r3, #2
 800b03c:	4a2c      	ldr	r2, [pc, #176]	; (800b0f0 <RNSSendIns+0xe4>)
 800b03e:	2117      	movs	r1, #23
 800b040:	f7f8 fba8 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f103 0208 	add.w	r2, r3, #8
 800b04e:	2308      	movs	r3, #8
 800b050:	2118      	movs	r1, #24
 800b052:	f7f8 fb9f 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6818      	ldr	r0, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f103 0210 	add.w	r2, r3, #16
 800b060:	2308      	movs	r3, #8
 800b062:	2119      	movs	r1, #25
 800b064:	f7f8 fb96 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b06c:	e035      	b.n	800b0da <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	4a20      	ldr	r2, [pc, #128]	; (800b0f4 <RNSSendIns+0xe8>)
 800b072:	4293      	cmp	r3, r2
 800b074:	dd2e      	ble.n	800b0d4 <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 800b076:	4b1e      	ldr	r3, [pc, #120]	; (800b0f0 <RNSSendIns+0xe4>)
 800b078:	2211      	movs	r2, #17
 800b07a:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	791a      	ldrb	r2, [r3, #4]
 800b080:	4b1b      	ldr	r3, [pc, #108]	; (800b0f0 <RNSSendIns+0xe4>)
 800b082:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	2302      	movs	r3, #2
 800b08a:	4a19      	ldr	r2, [pc, #100]	; (800b0f0 <RNSSendIns+0xe4>)
 800b08c:	2117      	movs	r1, #23
 800b08e:	f7f8 fb81 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f103 0208 	add.w	r2, r3, #8
 800b09c:	2308      	movs	r3, #8
 800b09e:	2118      	movs	r1, #24
 800b0a0:	f7f8 fb78 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0210 	add.w	r2, r3, #16
 800b0ae:	2308      	movs	r3, #8
 800b0b0:	2119      	movs	r1, #25
 800b0b2:	f7f8 fb6f 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800b0b6:	4b10      	ldr	r3, [pc, #64]	; (800b0f8 <RNSSendIns+0xec>)
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	b25b      	sxtb	r3, r3
 800b0bc:	4a0e      	ldr	r2, [pc, #56]	; (800b0f8 <RNSSendIns+0xec>)
 800b0be:	43db      	mvns	r3, r3
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	09db      	lsrs	r3, r3, #7
 800b0c4:	b2d9      	uxtb	r1, r3
 800b0c6:	7853      	ldrb	r3, [r2, #1]
 800b0c8:	f361 13c7 	bfi	r3, r1, #7, #1
 800b0cc:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	e002      	b.n	800b0da <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d0c4      	beq.n	800b06e <RNSSendIns+0x62>
		}
	}

}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	2000a904 	.word	0x2000a904
 800b0f4:	001e847f 	.word	0x001e847f
 800b0f8:	40020814 	.word	0x40020814

0800b0fc <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 800b0fc:	b40e      	push	{r1, r2, r3}
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b085      	sub	sp, #20
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	7f3a      	ldrb	r2, [r7, #28]
 800b10a:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 800b10c:	f107 0320 	add.w	r3, r7, #32
 800b110:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 800b112:	bf00      	nop
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d0fa      	beq.n	800b114 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800b11e:	7f3b      	ldrb	r3, [r7, #28]
 800b120:	2b1d      	cmp	r3, #29
 800b122:	d92b      	bls.n	800b17c <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	3307      	adds	r3, #7
 800b128:	f023 0307 	bic.w	r3, r3, #7
 800b12c:	f103 0208 	add.w	r2, r3, #8
 800b130:	60ba      	str	r2, [r7, #8]
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	4610      	mov	r0, r2
 800b138:	4619      	mov	r1, r3
 800b13a:	f7f5 fd55 	bl	8000be8 <__aeabi_d2f>
 800b13e:	4602      	mov	r2, r0
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f04f 0200 	mov.w	r2, #0
 800b14a:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f04f 0200 	mov.w	r2, #0
 800b152:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f04f 0200 	mov.w	r2, #0
 800b15a:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f04f 0200 	mov.w	r2, #0
 800b16a:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 800b17c:	7f3b      	ldrb	r3, [r7, #28]
 800b17e:	2b23      	cmp	r3, #35	; 0x23
 800b180:	d927      	bls.n	800b1d2 <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	3307      	adds	r3, #7
 800b186:	f023 0307 	bic.w	r3, r3, #7
 800b18a:	f103 0208 	add.w	r2, r3, #8
 800b18e:	60ba      	str	r2, [r7, #8]
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	4610      	mov	r0, r2
 800b196:	4619      	mov	r1, r3
 800b198:	f7f5 fd26 	bl	8000be8 <__aeabi_d2f>
 800b19c:	4602      	mov	r2, r0
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 800b1d2:	7f3b      	ldrb	r3, [r7, #28]
 800b1d4:	2b28      	cmp	r3, #40	; 0x28
 800b1d6:	d923      	bls.n	800b220 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	3307      	adds	r3, #7
 800b1dc:	f023 0307 	bic.w	r3, r3, #7
 800b1e0:	f103 0208 	add.w	r2, r3, #8
 800b1e4:	60ba      	str	r2, [r7, #8]
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f7f5 fcfb 	bl	8000be8 <__aeabi_d2f>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f04f 0200 	mov.w	r2, #0
 800b1fe:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f04f 0200 	mov.w	r2, #0
 800b206:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f04f 0200 	mov.w	r2, #0
 800b20e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f04f 0200 	mov.w	r2, #0
 800b21e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 800b220:	7f3b      	ldrb	r3, [r7, #28]
 800b222:	2b4d      	cmp	r3, #77	; 0x4d
 800b224:	d91f      	bls.n	800b266 <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3307      	adds	r3, #7
 800b22a:	f023 0307 	bic.w	r3, r3, #7
 800b22e:	f103 0208 	add.w	r2, r3, #8
 800b232:	60ba      	str	r2, [r7, #8]
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	4610      	mov	r0, r2
 800b23a:	4619      	mov	r1, r3
 800b23c:	f7f5 fcd4 	bl	8000be8 <__aeabi_d2f>
 800b240:	4602      	mov	r2, r0
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f04f 0200 	mov.w	r2, #0
 800b24c:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f04f 0200 	mov.w	r2, #0
 800b254:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 800b266:	7f3b      	ldrb	r3, [r7, #28]
 800b268:	2b55      	cmp	r3, #85	; 0x55
 800b26a:	d91b      	bls.n	800b2a4 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	3307      	adds	r3, #7
 800b270:	f023 0307 	bic.w	r3, r3, #7
 800b274:	f103 0208 	add.w	r2, r3, #8
 800b278:	60ba      	str	r2, [r7, #8]
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	4610      	mov	r0, r2
 800b280:	4619      	mov	r1, r3
 800b282:	f7f5 fcb1 	bl	8000be8 <__aeabi_d2f>
 800b286:	4602      	mov	r2, r0
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f04f 0200 	mov.w	r2, #0
 800b292:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 800b2a4:	7f3b      	ldrb	r3, [r7, #28]
 800b2a6:	2b56      	cmp	r3, #86	; 0x56
 800b2a8:	d917      	bls.n	800b2da <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	3307      	adds	r3, #7
 800b2ae:	f023 0307 	bic.w	r3, r3, #7
 800b2b2:	f103 0208 	add.w	r2, r3, #8
 800b2b6:	60ba      	str	r2, [r7, #8]
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	f7f5 fc92 	bl	8000be8 <__aeabi_d2f>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 800b2da:	7f3b      	ldrb	r3, [r7, #28]
 800b2dc:	2b57      	cmp	r3, #87	; 0x57
 800b2de:	d913      	bls.n	800b308 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3307      	adds	r3, #7
 800b2e4:	f023 0307 	bic.w	r3, r3, #7
 800b2e8:	f103 0208 	add.w	r2, r3, #8
 800b2ec:	60ba      	str	r2, [r7, #8]
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	f7f5 fc77 	bl	8000be8 <__aeabi_d2f>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f04f 0200 	mov.w	r2, #0
 800b306:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 800b308:	7f3b      	ldrb	r3, [r7, #28]
 800b30a:	2b59      	cmp	r3, #89	; 0x59
 800b30c:	d90f      	bls.n	800b32e <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	3307      	adds	r3, #7
 800b312:	f023 0307 	bic.w	r3, r3, #7
 800b316:	f103 0208 	add.w	r2, r3, #8
 800b31a:	60ba      	str	r2, [r7, #8]
 800b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b320:	4610      	mov	r0, r2
 800b322:	4619      	mov	r1, r3
 800b324:	f7f5 fc60 	bl	8000be8 <__aeabi_d2f>
 800b328:	4602      	mov	r2, r0
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800b32e:	4b4d      	ldr	r3, [pc, #308]	; (800b464 <RNSSet+0x368>)
 800b330:	2211      	movs	r2, #17
 800b332:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	7e1a      	ldrb	r2, [r3, #24]
 800b338:	4b4a      	ldr	r3, [pc, #296]	; (800b464 <RNSSet+0x368>)
 800b33a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6818      	ldr	r0, [r3, #0]
 800b340:	2302      	movs	r3, #2
 800b342:	4a48      	ldr	r2, [pc, #288]	; (800b464 <RNSSet+0x368>)
 800b344:	2117      	movs	r1, #23
 800b346:	f7f8 fa25 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f103 021c 	add.w	r2, r3, #28
 800b354:	2308      	movs	r3, #8
 800b356:	2118      	movs	r1, #24
 800b358:	f7f8 fa1c 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b366:	2308      	movs	r3, #8
 800b368:	2119      	movs	r1, #25
 800b36a:	f7f8 fa13 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800b36e:	7f3b      	ldrb	r3, [r7, #28]
 800b370:	2b55      	cmp	r3, #85	; 0x55
 800b372:	d908      	bls.n	800b386 <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6818      	ldr	r0, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b37e:	2308      	movs	r3, #8
 800b380:	211a      	movs	r1, #26
 800b382:	f7f8 fa07 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 800b386:	7f3b      	ldrb	r3, [r7, #28]
 800b388:	2b57      	cmp	r3, #87	; 0x57
 800b38a:	d908      	bls.n	800b39e <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6818      	ldr	r0, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b396:	2308      	movs	r3, #8
 800b398:	211b      	movs	r1, #27
 800b39a:	f7f8 f9fb 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b3aa:	e04d      	b.n	800b448 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4a2e      	ldr	r2, [pc, #184]	; (800b468 <RNSSet+0x36c>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	dd46      	ble.n	800b442 <RNSSet+0x346>
		{
			insData_send[0] = 17;
 800b3b4:	4b2b      	ldr	r3, [pc, #172]	; (800b464 <RNSSet+0x368>)
 800b3b6:	2211      	movs	r2, #17
 800b3b8:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	7e1a      	ldrb	r2, [r3, #24]
 800b3be:	4b29      	ldr	r3, [pc, #164]	; (800b464 <RNSSet+0x368>)
 800b3c0:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	4a26      	ldr	r2, [pc, #152]	; (800b464 <RNSSet+0x368>)
 800b3ca:	2117      	movs	r1, #23
 800b3cc:	f7f8 f9e2 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6818      	ldr	r0, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f103 021c 	add.w	r2, r3, #28
 800b3da:	2308      	movs	r3, #8
 800b3dc:	2118      	movs	r1, #24
 800b3de:	f7f8 f9d9 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6818      	ldr	r0, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b3ec:	2308      	movs	r3, #8
 800b3ee:	2119      	movs	r1, #25
 800b3f0:	f7f8 f9d0 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 800b3f4:	7f3b      	ldrb	r3, [r7, #28]
 800b3f6:	2b55      	cmp	r3, #85	; 0x55
 800b3f8:	d908      	bls.n	800b40c <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6818      	ldr	r0, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b404:	2308      	movs	r3, #8
 800b406:	211a      	movs	r1, #26
 800b408:	f7f8 f9c4 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 800b40c:	7f3b      	ldrb	r3, [r7, #28]
 800b40e:	2b57      	cmp	r3, #87	; 0x57
 800b410:	d908      	bls.n	800b424 <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b41c:	2308      	movs	r3, #8
 800b41e:	211b      	movs	r1, #27
 800b420:	f7f8 f9b8 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800b424:	4b11      	ldr	r3, [pc, #68]	; (800b46c <RNSSet+0x370>)
 800b426:	785b      	ldrb	r3, [r3, #1]
 800b428:	b25b      	sxtb	r3, r3
 800b42a:	4a10      	ldr	r2, [pc, #64]	; (800b46c <RNSSet+0x370>)
 800b42c:	43db      	mvns	r3, r3
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	09db      	lsrs	r3, r3, #7
 800b432:	b2d9      	uxtb	r1, r3
 800b434:	7853      	ldrb	r3, [r2, #1]
 800b436:	f361 13c7 	bfi	r3, r1, #7, #1
 800b43a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	e002      	b.n	800b448 <RNSSet+0x34c>
		}
		else
			wait++;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3301      	adds	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d0ac      	beq.n	800b3ac <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b45e:	b003      	add	sp, #12
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	2000a904 	.word	0x2000a904
 800b468:	001e847f 	.word	0x001e847f
 800b46c:	40020814 	.word	0x40020814

0800b470 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	6039      	str	r1, [r7, #0]
 800b47a:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	79fa      	ldrb	r2, [r7, #7]
 800b480:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	f04f 0200 	mov.w	r2, #0
 800b488:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	f04f 0200 	mov.w	r2, #0
 800b490:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	f04f 0200 	mov.w	r2, #0
 800b4a0:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800b4aa:	4b3b      	ldr	r3, [pc, #236]	; (800b598 <RNSEnquire+0x128>)
 800b4ac:	2211      	movs	r2, #17
 800b4ae:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	791a      	ldrb	r2, [r3, #4]
 800b4b4:	4b38      	ldr	r3, [pc, #224]	; (800b598 <RNSEnquire+0x128>)
 800b4b6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	2302      	movs	r3, #2
 800b4be:	4a36      	ldr	r2, [pc, #216]	; (800b598 <RNSEnquire+0x128>)
 800b4c0:	2117      	movs	r1, #23
 800b4c2:	f7f8 f967 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	f103 0208 	add.w	r2, r3, #8
 800b4d0:	2308      	movs	r3, #8
 800b4d2:	2118      	movs	r1, #24
 800b4d4:	f7f8 f95e 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	f103 0210 	add.w	r2, r3, #16
 800b4e2:	2308      	movs	r3, #8
 800b4e4:	2119      	movs	r1, #25
 800b4e6:	f7f8 f955 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b4ee:	e035      	b.n	800b55c <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4a2a      	ldr	r2, [pc, #168]	; (800b59c <RNSEnquire+0x12c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	dd2e      	ble.n	800b556 <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 800b4f8:	4b27      	ldr	r3, [pc, #156]	; (800b598 <RNSEnquire+0x128>)
 800b4fa:	2211      	movs	r2, #17
 800b4fc:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	791a      	ldrb	r2, [r3, #4]
 800b502:	4b25      	ldr	r3, [pc, #148]	; (800b598 <RNSEnquire+0x128>)
 800b504:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	2302      	movs	r3, #2
 800b50c:	4a22      	ldr	r2, [pc, #136]	; (800b598 <RNSEnquire+0x128>)
 800b50e:	2117      	movs	r1, #23
 800b510:	f7f8 f940 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	f103 0208 	add.w	r2, r3, #8
 800b51e:	2308      	movs	r3, #8
 800b520:	2118      	movs	r1, #24
 800b522:	f7f8 f937 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	f103 0210 	add.w	r2, r3, #16
 800b530:	2308      	movs	r3, #8
 800b532:	2119      	movs	r1, #25
 800b534:	f7f8 f92e 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800b538:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <RNSEnquire+0x130>)
 800b53a:	785b      	ldrb	r3, [r3, #1]
 800b53c:	b25b      	sxtb	r3, r3
 800b53e:	4a18      	ldr	r2, [pc, #96]	; (800b5a0 <RNSEnquire+0x130>)
 800b540:	43db      	mvns	r3, r3
 800b542:	b2db      	uxtb	r3, r3
 800b544:	09db      	lsrs	r3, r3, #7
 800b546:	b2d9      	uxtb	r1, r3
 800b548:	7853      	ldrb	r3, [r2, #1]
 800b54a:	f361 13c7 	bfi	r3, r1, #7, #1
 800b54e:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	e002      	b.n	800b55c <RNSEnquire+0xec>
		}
		else wait++;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3301      	adds	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b562:	2b02      	cmp	r3, #2
 800b564:	d0c4      	beq.n	800b4f0 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	79fa      	ldrb	r2, [r7, #7]
 800b56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 800b58e:	2301      	movs	r3, #1
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	2000a904 	.word	0x2000a904
 800b59c:	001e847f 	.word	0x001e847f
 800b5a0:	40020814 	.word	0x40020814

0800b5a4 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08c      	sub	sp, #48	; 0x30
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b5b2:	f107 0318 	add.w	r3, r7, #24
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	605a      	str	r2, [r3, #4]
 800b5bc:	609a      	str	r2, [r3, #8]
 800b5be:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5c0:	f107 0310 	add.w	r3, r7, #16
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a6d      	ldr	r2, [pc, #436]	; (800b784 <ServoxInit+0x1e0>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d106      	bne.n	800b5e0 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	4a6c      	ldr	r2, [pc, #432]	; (800b788 <ServoxInit+0x1e4>)
 800b5d6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	22a7      	movs	r2, #167	; 0xa7
 800b5dc:	605a      	str	r2, [r3, #4]
 800b5de:	e078      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a6a      	ldr	r2, [pc, #424]	; (800b78c <ServoxInit+0x1e8>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d107      	bne.n	800b5f8 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b5ee:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2253      	movs	r2, #83	; 0x53
 800b5f4:	605a      	str	r2, [r3, #4]
 800b5f6:	e06c      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	4a65      	ldr	r2, [pc, #404]	; (800b790 <ServoxInit+0x1ec>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d106      	bne.n	800b60e <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	4a64      	ldr	r2, [pc, #400]	; (800b794 <ServoxInit+0x1f0>)
 800b604:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2253      	movs	r2, #83	; 0x53
 800b60a:	605a      	str	r2, [r3, #4]
 800b60c:	e061      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	4a61      	ldr	r2, [pc, #388]	; (800b798 <ServoxInit+0x1f4>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d106      	bne.n	800b624 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	4a60      	ldr	r2, [pc, #384]	; (800b79c <ServoxInit+0x1f8>)
 800b61a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2253      	movs	r2, #83	; 0x53
 800b620:	605a      	str	r2, [r3, #4]
 800b622:	e056      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	4a5e      	ldr	r2, [pc, #376]	; (800b7a0 <ServoxInit+0x1fc>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d106      	bne.n	800b63a <ServoxInit+0x96>
			htimx->Instance = TIM5;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	4a5d      	ldr	r2, [pc, #372]	; (800b7a4 <ServoxInit+0x200>)
 800b630:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2253      	movs	r2, #83	; 0x53
 800b636:	605a      	str	r2, [r3, #4]
 800b638:	e04b      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	4a5a      	ldr	r2, [pc, #360]	; (800b7a8 <ServoxInit+0x204>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d106      	bne.n	800b650 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	4a59      	ldr	r2, [pc, #356]	; (800b7ac <ServoxInit+0x208>)
 800b646:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	22a7      	movs	r2, #167	; 0xa7
 800b64c:	605a      	str	r2, [r3, #4]
 800b64e:	e040      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4a57      	ldr	r2, [pc, #348]	; (800b7b0 <ServoxInit+0x20c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d106      	bne.n	800b666 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	4a56      	ldr	r2, [pc, #344]	; (800b7b4 <ServoxInit+0x210>)
 800b65c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	22a7      	movs	r2, #167	; 0xa7
 800b662:	605a      	str	r2, [r3, #4]
 800b664:	e035      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	4a53      	ldr	r2, [pc, #332]	; (800b7b8 <ServoxInit+0x214>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d106      	bne.n	800b67c <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	4a52      	ldr	r2, [pc, #328]	; (800b7bc <ServoxInit+0x218>)
 800b672:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	22a7      	movs	r2, #167	; 0xa7
 800b678:	605a      	str	r2, [r3, #4]
 800b67a:	e02a      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	4a50      	ldr	r2, [pc, #320]	; (800b7c0 <ServoxInit+0x21c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d106      	bne.n	800b692 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	4a4f      	ldr	r2, [pc, #316]	; (800b7c4 <ServoxInit+0x220>)
 800b688:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	22a7      	movs	r2, #167	; 0xa7
 800b68e:	605a      	str	r2, [r3, #4]
 800b690:	e01f      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	4a4c      	ldr	r2, [pc, #304]	; (800b7c8 <ServoxInit+0x224>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d106      	bne.n	800b6a8 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	4a4b      	ldr	r2, [pc, #300]	; (800b7cc <ServoxInit+0x228>)
 800b69e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2253      	movs	r2, #83	; 0x53
 800b6a4:	605a      	str	r2, [r3, #4]
 800b6a6:	e014      	b.n	800b6d2 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	4a49      	ldr	r2, [pc, #292]	; (800b7d0 <ServoxInit+0x22c>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d106      	bne.n	800b6be <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4a48      	ldr	r2, [pc, #288]	; (800b7d4 <ServoxInit+0x230>)
 800b6b4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2253      	movs	r2, #83	; 0x53
 800b6ba:	605a      	str	r2, [r3, #4]
 800b6bc:	e009      	b.n	800b6d2 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	4a45      	ldr	r2, [pc, #276]	; (800b7d8 <ServoxInit+0x234>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d105      	bne.n	800b6d2 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	4a44      	ldr	r2, [pc, #272]	; (800b7dc <ServoxInit+0x238>)
 800b6ca:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2253      	movs	r2, #83	; 0x53
 800b6d0:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b6de:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2280      	movs	r2, #128	; 0x80
 800b6ea:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800b6ec:	68b8      	ldr	r0, [r7, #8]
 800b6ee:	f00e fe89 	bl	801a404 <HAL_TIM_Base_Init>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <ServoxInit+0x158>
		  {
		    Error_Handler();
 800b6f8:	f7f9 f866 	bl	80047c8 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b6fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b700:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800b702:	f107 0318 	add.w	r3, r7, #24
 800b706:	4619      	mov	r1, r3
 800b708:	68b8      	ldr	r0, [r7, #8]
 800b70a:	f00f f9ef 	bl	801aaec <HAL_TIM_ConfigClockSource>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <ServoxInit+0x174>
		  {
		    Error_Handler();
 800b714:	f7f9 f858 	bl	80047c8 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800b718:	68b8      	ldr	r0, [r7, #8]
 800b71a:	f00e fee6 	bl	801a4ea <HAL_TIM_PWM_Init>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <ServoxInit+0x184>
			{
				Error_Handler();
 800b724:	f7f9 f850 	bl	80047c8 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b728:	2300      	movs	r3, #0
 800b72a:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b72c:	2300      	movs	r3, #0
 800b72e:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800b730:	f107 0310 	add.w	r3, r7, #16
 800b734:	4619      	mov	r1, r3
 800b736:	68b8      	ldr	r0, [r7, #8]
 800b738:	f00f fdd4 	bl	801b2e4 <HAL_TIMEx_MasterConfigSynchronization>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <ServoxInit+0x1a2>
		{
			Error_Handler();
 800b742:	f7f9 f841 	bl	80047c8 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800b746:	68b8      	ldr	r0, [r7, #8]
 800b748:	f00e fe87 	bl	801a45a <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b74c:	8879      	ldrh	r1, [r7, #2]
 800b74e:	2301      	movs	r3, #1
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	2302      	movs	r3, #2
 800b754:	2202      	movs	r2, #2
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7f5 fdd2 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b766:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 800b768:	887b      	ldrh	r3, [r7, #2]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f7f5 ffa6 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	621a      	str	r2, [r3, #32]
}
 800b77a:	bf00      	nop
 800b77c:	3728      	adds	r7, #40	; 0x28
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20005f34 	.word	0x20005f34
 800b788:	40010000 	.word	0x40010000
 800b78c:	20006038 	.word	0x20006038
 800b790:	20005ce8 	.word	0x20005ce8
 800b794:	40000400 	.word	0x40000400
 800b798:	20005b24 	.word	0x20005b24
 800b79c:	40000800 	.word	0x40000800
 800b7a0:	20005ca8 	.word	0x20005ca8
 800b7a4:	40000c00 	.word	0x40000c00
 800b7a8:	20005ae4 	.word	0x20005ae4
 800b7ac:	40010400 	.word	0x40010400
 800b7b0:	20005f74 	.word	0x20005f74
 800b7b4:	40014000 	.word	0x40014000
 800b7b8:	20005c04 	.word	0x20005c04
 800b7bc:	40014400 	.word	0x40014400
 800b7c0:	20005e4c 	.word	0x20005e4c
 800b7c4:	40014800 	.word	0x40014800
 800b7c8:	20006158 	.word	0x20006158
 800b7cc:	40001800 	.word	0x40001800
 800b7d0:	20005dcc 	.word	0x20005dcc
 800b7d4:	40001c00 	.word	0x40001c00
 800b7d8:	20006118 	.word	0x20006118
 800b7dc:	40002000 	.word	0x40002000

0800b7e0 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d204      	bcs.n	800b7fe <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	695a      	ldr	r2, [r3, #20]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	621a      	str	r2, [r3, #32]
 800b7fc:	e00c      	b.n	800b818 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d904      	bls.n	800b812 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	699a      	ldr	r2, [r3, #24]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	621a      	str	r2, [r3, #32]
 800b810:	e002      	b.n	800b818 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d106      	bne.n	800b82e <ServoSetPulse+0x4e>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	6a12      	ldr	r2, [r2, #32]
 800b82a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800b82c:	e01b      	b.n	800b866 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2b04      	cmp	r3, #4
 800b834:	d106      	bne.n	800b844 <ServoSetPulse+0x64>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b842:	e010      	b.n	800b866 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d106      	bne.n	800b85a <ServoSetPulse+0x7a>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800b858:	e005      	b.n	800b866 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	6413      	str	r3, [r2, #64]	; 0x40
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800b872:	b480      	push	{r7}
 800b874:	b085      	sub	sp, #20
 800b876:	af00      	add	r7, sp, #0
 800b878:	60f8      	str	r0, [r7, #12]
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	619a      	str	r2, [r3, #24]
}
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 800b89c:	4802      	ldr	r0, [pc, #8]	; (800b8a8 <SPI1_IRQHandler+0x10>)
 800b89e:	f00e fc93 	bl	801a1c8 <HAL_SPI_IRQHandler>
}
 800b8a2:	bf00      	nop
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20009e74 	.word	0x20009e74

0800b8ac <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 800b8b0:	4802      	ldr	r0, [pc, #8]	; (800b8bc <SPI2_IRQHandler+0x10>)
 800b8b2:	f00e fc89 	bl	801a1c8 <HAL_SPI_IRQHandler>
}
 800b8b6:	bf00      	nop
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	200068e4 	.word	0x200068e4

0800b8c0 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 800b8c4:	4802      	ldr	r0, [pc, #8]	; (800b8d0 <SPI3_IRQHandler+0x10>)
 800b8c6:	f00e fc7f 	bl	801a1c8 <HAL_SPI_IRQHandler>
}
 800b8ca:	bf00      	nop
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	200078f0 	.word	0x200078f0

0800b8d4 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b8da:	f00a f89f 	bl	8015a1c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800b8de:	f7f7 fa7f 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b8ee:	48c6      	ldr	r0, [pc, #792]	; (800bc08 <Initialize+0x334>)
 800b8f0:	f7f5 fd06 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b900:	48c1      	ldr	r0, [pc, #772]	; (800bc08 <Initialize+0x334>)
 800b902:	f7f5 fcfd 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b906:	2301      	movs	r3, #1
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	2302      	movs	r3, #2
 800b90c:	2201      	movs	r2, #1
 800b90e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b912:	48bd      	ldr	r0, [pc, #756]	; (800bc08 <Initialize+0x334>)
 800b914:	f7f5 fcf4 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b918:	2301      	movs	r3, #1
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	2302      	movs	r3, #2
 800b91e:	2200      	movs	r2, #0
 800b920:	2180      	movs	r1, #128	; 0x80
 800b922:	48ba      	ldr	r0, [pc, #744]	; (800bc0c <Initialize+0x338>)
 800b924:	f7f5 fcec 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b928:	2301      	movs	r3, #1
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	2302      	movs	r3, #2
 800b92e:	2200      	movs	r2, #0
 800b930:	2101      	movs	r1, #1
 800b932:	48b7      	ldr	r0, [pc, #732]	; (800bc10 <Initialize+0x33c>)
 800b934:	f7f5 fce4 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b938:	2301      	movs	r3, #1
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	2301      	movs	r3, #1
 800b93e:	2200      	movs	r2, #0
 800b940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b944:	48b2      	ldr	r0, [pc, #712]	; (800bc10 <Initialize+0x33c>)
 800b946:	f7f5 fcdb 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b94a:	2301      	movs	r3, #1
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	2301      	movs	r3, #1
 800b950:	2200      	movs	r2, #0
 800b952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b956:	48ae      	ldr	r0, [pc, #696]	; (800bc10 <Initialize+0x33c>)
 800b958:	f7f5 fcd2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b95c:	2301      	movs	r3, #1
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	2301      	movs	r3, #1
 800b962:	2200      	movs	r2, #0
 800b964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b968:	48a9      	ldr	r0, [pc, #676]	; (800bc10 <Initialize+0x33c>)
 800b96a:	f7f5 fcc9 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b96e:	2301      	movs	r3, #1
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	2301      	movs	r3, #1
 800b974:	2200      	movs	r2, #0
 800b976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b97a:	48a5      	ldr	r0, [pc, #660]	; (800bc10 <Initialize+0x33c>)
 800b97c:	f7f5 fcc0 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b980:	2301      	movs	r3, #1
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2301      	movs	r3, #1
 800b986:	2200      	movs	r2, #0
 800b988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b98c:	489f      	ldr	r0, [pc, #636]	; (800bc0c <Initialize+0x338>)
 800b98e:	f7f5 fcb7 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b992:	2301      	movs	r3, #1
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	2301      	movs	r3, #1
 800b998:	2200      	movs	r2, #0
 800b99a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b99e:	489b      	ldr	r0, [pc, #620]	; (800bc0c <Initialize+0x338>)
 800b9a0:	f7f5 fcae 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b9b0:	4898      	ldr	r0, [pc, #608]	; (800bc14 <Initialize+0x340>)
 800b9b2:	f7f5 fca5 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b9c2:	4894      	ldr	r0, [pc, #592]	; (800bc14 <Initialize+0x340>)
 800b9c4:	f7f5 fc9c 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b9d4:	488c      	ldr	r0, [pc, #560]	; (800bc08 <Initialize+0x334>)
 800b9d6:	f7f5 fc93 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9da:	2301      	movs	r3, #1
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	2301      	movs	r3, #1
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b9e6:	488c      	ldr	r0, [pc, #560]	; (800bc18 <Initialize+0x344>)
 800b9e8:	f7f5 fc8a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2108      	movs	r1, #8
 800b9f6:	4887      	ldr	r0, [pc, #540]	; (800bc14 <Initialize+0x340>)
 800b9f8:	f7f5 fc82 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2301      	movs	r3, #1
 800ba02:	2200      	movs	r2, #0
 800ba04:	2110      	movs	r1, #16
 800ba06:	4883      	ldr	r0, [pc, #524]	; (800bc14 <Initialize+0x340>)
 800ba08:	f7f5 fc7a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	2301      	movs	r3, #1
 800ba12:	2200      	movs	r2, #0
 800ba14:	2180      	movs	r1, #128	; 0x80
 800ba16:	487f      	ldr	r0, [pc, #508]	; (800bc14 <Initialize+0x340>)
 800ba18:	f7f5 fc72 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	2301      	movs	r3, #1
 800ba22:	2200      	movs	r2, #0
 800ba24:	2120      	movs	r1, #32
 800ba26:	4879      	ldr	r0, [pc, #484]	; (800bc0c <Initialize+0x338>)
 800ba28:	f7f5 fc6a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	2301      	movs	r3, #1
 800ba32:	2200      	movs	r2, #0
 800ba34:	2140      	movs	r1, #64	; 0x40
 800ba36:	4875      	ldr	r0, [pc, #468]	; (800bc0c <Initialize+0x338>)
 800ba38:	f7f5 fc62 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	2301      	movs	r3, #1
 800ba42:	2200      	movs	r2, #0
 800ba44:	2101      	movs	r1, #1
 800ba46:	4870      	ldr	r0, [pc, #448]	; (800bc08 <Initialize+0x334>)
 800ba48:	f7f5 fc5a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	2301      	movs	r3, #1
 800ba52:	2200      	movs	r2, #0
 800ba54:	2102      	movs	r1, #2
 800ba56:	486c      	ldr	r0, [pc, #432]	; (800bc08 <Initialize+0x334>)
 800ba58:	f7f5 fc52 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	2301      	movs	r3, #1
 800ba62:	2200      	movs	r2, #0
 800ba64:	2104      	movs	r1, #4
 800ba66:	4868      	ldr	r0, [pc, #416]	; (800bc08 <Initialize+0x334>)
 800ba68:	f7f5 fc4a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	2301      	movs	r3, #1
 800ba72:	2200      	movs	r2, #0
 800ba74:	2108      	movs	r1, #8
 800ba76:	4864      	ldr	r0, [pc, #400]	; (800bc08 <Initialize+0x334>)
 800ba78:	f7f5 fc42 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	2301      	movs	r3, #1
 800ba82:	2200      	movs	r2, #0
 800ba84:	2110      	movs	r1, #16
 800ba86:	4860      	ldr	r0, [pc, #384]	; (800bc08 <Initialize+0x334>)
 800ba88:	f7f5 fc3a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	2301      	movs	r3, #1
 800ba92:	2200      	movs	r2, #0
 800ba94:	2120      	movs	r1, #32
 800ba96:	485c      	ldr	r0, [pc, #368]	; (800bc08 <Initialize+0x334>)
 800ba98:	f7f5 fc32 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800ba9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa0:	9303      	str	r3, [sp, #12]
 800baa2:	4b5b      	ldr	r3, [pc, #364]	; (800bc10 <Initialize+0x33c>)
 800baa4:	9302      	str	r3, [sp, #8]
 800baa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	4b58      	ldr	r3, [pc, #352]	; (800bc10 <Initialize+0x33c>)
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	2380      	movs	r3, #128	; 0x80
 800bab2:	4a57      	ldr	r2, [pc, #348]	; (800bc10 <Initialize+0x33c>)
 800bab4:	2101      	movs	r1, #1
 800bab6:	4859      	ldr	r0, [pc, #356]	; (800bc1c <Initialize+0x348>)
 800bab8:	f7f6 f976 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800babc:	2003      	movs	r0, #3
 800babe:	f00a ff6c 	bl	801699a <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800bac2:	4b57      	ldr	r3, [pc, #348]	; (800bc20 <Initialize+0x34c>)
 800bac4:	2208      	movs	r2, #8
 800bac6:	4957      	ldr	r1, [pc, #348]	; (800bc24 <Initialize+0x350>)
 800bac8:	4857      	ldr	r0, [pc, #348]	; (800bc28 <Initialize+0x354>)
 800baca:	f7f8 f8cb 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800bace:	2301      	movs	r3, #1
 800bad0:	4a56      	ldr	r2, [pc, #344]	; (800bc2c <Initialize+0x358>)
 800bad2:	2108      	movs	r1, #8
 800bad4:	4856      	ldr	r0, [pc, #344]	; (800bc30 <Initialize+0x35c>)
 800bad6:	f7f8 f813 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800bada:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bade:	4955      	ldr	r1, [pc, #340]	; (800bc34 <Initialize+0x360>)
 800bae0:	4855      	ldr	r0, [pc, #340]	; (800bc38 <Initialize+0x364>)
 800bae2:	f7f7 fc8b 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800bae6:	2201      	movs	r2, #1
 800bae8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800baec:	4853      	ldr	r0, [pc, #332]	; (800bc3c <Initialize+0x368>)
 800baee:	f7f7 fb7d 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800baf2:	2201      	movs	r2, #1
 800baf4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800baf8:	4851      	ldr	r0, [pc, #324]	; (800bc40 <Initialize+0x36c>)
 800bafa:	f7f7 fb77 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800bafe:	2201      	movs	r2, #1
 800bb00:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800bb04:	484f      	ldr	r0, [pc, #316]	; (800bc44 <Initialize+0x370>)
 800bb06:	f7f7 fb71 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800bb0a:	484f      	ldr	r0, [pc, #316]	; (800bc48 <Initialize+0x374>)
 800bb0c:	f7f5 ff64 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800bb10:	484e      	ldr	r0, [pc, #312]	; (800bc4c <Initialize+0x378>)
 800bb12:	f7f5 ff61 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800bb16:	484e      	ldr	r0, [pc, #312]	; (800bc50 <Initialize+0x37c>)
 800bb18:	f7f5 ff5e 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	9302      	str	r3, [sp, #8]
 800bb20:	2300      	movs	r3, #0
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	2300      	movs	r3, #0
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2104      	movs	r1, #4
 800bb2e:	4849      	ldr	r0, [pc, #292]	; (800bc54 <Initialize+0x380>)
 800bb30:	f7f7 fd70 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800bb34:	2300      	movs	r3, #0
 800bb36:	9302      	str	r3, [sp, #8]
 800bb38:	230e      	movs	r3, #14
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	2300      	movs	r3, #0
 800bb42:	2201      	movs	r2, #1
 800bb44:	2104      	movs	r1, #4
 800bb46:	4844      	ldr	r0, [pc, #272]	; (800bc58 <Initialize+0x384>)
 800bb48:	f7f7 fd64 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800bb4c:	2253      	movs	r2, #83	; 0x53
 800bb4e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800bb52:	4842      	ldr	r0, [pc, #264]	; (800bc5c <Initialize+0x388>)
 800bb54:	f7f5 fcce 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4a2c      	ldr	r2, [pc, #176]	; (800bc0c <Initialize+0x338>)
 800bb5c:	2108      	movs	r1, #8
 800bb5e:	483f      	ldr	r0, [pc, #252]	; (800bc5c <Initialize+0x388>)
 800bb60:	f7f5 fdae 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800bb64:	2302      	movs	r3, #2
 800bb66:	4a29      	ldr	r2, [pc, #164]	; (800bc0c <Initialize+0x338>)
 800bb68:	210c      	movs	r1, #12
 800bb6a:	483c      	ldr	r0, [pc, #240]	; (800bc5c <Initialize+0x388>)
 800bb6c:	f7f5 fda8 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800bb70:	2253      	movs	r2, #83	; 0x53
 800bb72:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800bb76:	483a      	ldr	r0, [pc, #232]	; (800bc60 <Initialize+0x38c>)
 800bb78:	f7f5 fcbc 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4a26      	ldr	r2, [pc, #152]	; (800bc18 <Initialize+0x344>)
 800bb80:	2100      	movs	r1, #0
 800bb82:	4837      	ldr	r0, [pc, #220]	; (800bc60 <Initialize+0x38c>)
 800bb84:	f7f5 fd9c 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800bb88:	2302      	movs	r3, #2
 800bb8a:	4a23      	ldr	r2, [pc, #140]	; (800bc18 <Initialize+0x344>)
 800bb8c:	2104      	movs	r1, #4
 800bb8e:	4834      	ldr	r0, [pc, #208]	; (800bc60 <Initialize+0x38c>)
 800bb90:	f7f5 fd96 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800bb94:	2304      	movs	r3, #4
 800bb96:	4a20      	ldr	r2, [pc, #128]	; (800bc18 <Initialize+0x344>)
 800bb98:	2108      	movs	r1, #8
 800bb9a:	4831      	ldr	r0, [pc, #196]	; (800bc60 <Initialize+0x38c>)
 800bb9c:	f7f5 fd90 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800bba0:	2308      	movs	r3, #8
 800bba2:	4a1d      	ldr	r2, [pc, #116]	; (800bc18 <Initialize+0x344>)
 800bba4:	210c      	movs	r1, #12
 800bba6:	482e      	ldr	r0, [pc, #184]	; (800bc60 <Initialize+0x38c>)
 800bba8:	f7f5 fd8a 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800bbac:	22a7      	movs	r2, #167	; 0xa7
 800bbae:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800bbb2:	482c      	ldr	r0, [pc, #176]	; (800bc64 <Initialize+0x390>)
 800bbb4:	f7f5 fc9e 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800bbb8:	2320      	movs	r3, #32
 800bbba:	4a15      	ldr	r2, [pc, #84]	; (800bc10 <Initialize+0x33c>)
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4829      	ldr	r0, [pc, #164]	; (800bc64 <Initialize+0x390>)
 800bbc0:	f7f5 fd7e 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800bbc4:	2340      	movs	r3, #64	; 0x40
 800bbc6:	4a12      	ldr	r2, [pc, #72]	; (800bc10 <Initialize+0x33c>)
 800bbc8:	2104      	movs	r1, #4
 800bbca:	4826      	ldr	r0, [pc, #152]	; (800bc64 <Initialize+0x390>)
 800bbcc:	f7f5 fd78 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800bbd0:	2380      	movs	r3, #128	; 0x80
 800bbd2:	9302      	str	r3, [sp, #8]
 800bbd4:	2340      	movs	r3, #64	; 0x40
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	4b23      	ldr	r3, [pc, #140]	; (800bc68 <Initialize+0x394>)
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	220c      	movs	r2, #12
 800bbe0:	491e      	ldr	r1, [pc, #120]	; (800bc5c <Initialize+0x388>)
 800bbe2:	4822      	ldr	r0, [pc, #136]	; (800bc6c <Initialize+0x398>)
 800bbe4:	f7f5 fa48 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800bbe8:	2320      	movs	r3, #32
 800bbea:	9302      	str	r3, [sp, #8]
 800bbec:	2310      	movs	r3, #16
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <Initialize+0x394>)
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	2208      	movs	r2, #8
 800bbf8:	4918      	ldr	r1, [pc, #96]	; (800bc5c <Initialize+0x388>)
 800bbfa:	481d      	ldr	r0, [pc, #116]	; (800bc70 <Initialize+0x39c>)
 800bbfc:	f7f5 fa3c 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800bc00:	2308      	movs	r3, #8
 800bc02:	9302      	str	r3, [sp, #8]
 800bc04:	2304      	movs	r3, #4
 800bc06:	e035      	b.n	800bc74 <Initialize+0x3a0>
 800bc08:	40020800 	.word	0x40020800
 800bc0c:	40020400 	.word	0x40020400
 800bc10:	40021000 	.word	0x40021000
 800bc14:	40020c00 	.word	0x40020c00
 800bc18:	40020000 	.word	0x40020000
 800bc1c:	200097dc 	.word	0x200097dc
 800bc20:	00061a80 	.word	0x00061a80
 800bc24:	2000a1dc 	.word	0x2000a1dc
 800bc28:	20006bb8 	.word	0x20006bb8
 800bc2c:	000186a0 	.word	0x000186a0
 800bc30:	20006c14 	.word	0x20006c14
 800bc34:	20005a80 	.word	0x20005a80
 800bc38:	20006078 	.word	0x20006078
 800bc3c:	20005bc4 	.word	0x20005bc4
 800bc40:	20005ff8 	.word	0x20005ff8
 800bc44:	20005d2c 	.word	0x20005d2c
 800bc48:	20005f34 	.word	0x20005f34
 800bc4c:	20005b24 	.word	0x20005b24
 800bc50:	20005ae4 	.word	0x20005ae4
 800bc54:	2000a160 	.word	0x2000a160
 800bc58:	20009174 	.word	0x20009174
 800bc5c:	20005ce8 	.word	0x20005ce8
 800bc60:	20005ca8 	.word	0x20005ca8
 800bc64:	20005f74 	.word	0x20005f74
 800bc68:	200097f8 	.word	0x200097f8
 800bc6c:	2000a7a4 	.word	0x2000a7a4
 800bc70:	20007880 	.word	0x20007880
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	4b23      	ldr	r3, [pc, #140]	; (800bd04 <Initialize+0x430>)
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4922      	ldr	r1, [pc, #136]	; (800bd08 <Initialize+0x434>)
 800bc80:	4822      	ldr	r0, [pc, #136]	; (800bd0c <Initialize+0x438>)
 800bc82:	f7f5 f9f9 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800bc86:	2302      	movs	r3, #2
 800bc88:	9302      	str	r3, [sp, #8]
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	4b1d      	ldr	r3, [pc, #116]	; (800bd04 <Initialize+0x430>)
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	2300      	movs	r3, #0
 800bc94:	2204      	movs	r2, #4
 800bc96:	491c      	ldr	r1, [pc, #112]	; (800bd08 <Initialize+0x434>)
 800bc98:	481d      	ldr	r0, [pc, #116]	; (800bd10 <Initialize+0x43c>)
 800bc9a:	f7f5 f9ed 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800bc9e:	2380      	movs	r3, #128	; 0x80
 800bca0:	9302      	str	r3, [sp, #8]
 800bca2:	2340      	movs	r3, #64	; 0x40
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	4b1b      	ldr	r3, [pc, #108]	; (800bd14 <Initialize+0x440>)
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	220c      	movs	r2, #12
 800bcae:	491a      	ldr	r1, [pc, #104]	; (800bd18 <Initialize+0x444>)
 800bcb0:	481a      	ldr	r0, [pc, #104]	; (800bd1c <Initialize+0x448>)
 800bcb2:	f7f5 f9e1 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800bcb6:	2320      	movs	r3, #32
 800bcb8:	9302      	str	r3, [sp, #8]
 800bcba:	2310      	movs	r3, #16
 800bcbc:	9301      	str	r3, [sp, #4]
 800bcbe:	4b15      	ldr	r3, [pc, #84]	; (800bd14 <Initialize+0x440>)
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2208      	movs	r2, #8
 800bcc6:	4914      	ldr	r1, [pc, #80]	; (800bd18 <Initialize+0x444>)
 800bcc8:	4815      	ldr	r0, [pc, #84]	; (800bd20 <Initialize+0x44c>)
 800bcca:	f7f5 f9d5 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800bcce:	2308      	movs	r3, #8
 800bcd0:	9302      	str	r3, [sp, #8]
 800bcd2:	2304      	movs	r3, #4
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <Initialize+0x440>)
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	2204      	movs	r2, #4
 800bcde:	490e      	ldr	r1, [pc, #56]	; (800bd18 <Initialize+0x444>)
 800bce0:	4810      	ldr	r0, [pc, #64]	; (800bd24 <Initialize+0x450>)
 800bce2:	f7f5 f9c9 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800bce6:	2302      	movs	r3, #2
 800bce8:	9302      	str	r3, [sp, #8]
 800bcea:	2301      	movs	r3, #1
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <Initialize+0x440>)
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4908      	ldr	r1, [pc, #32]	; (800bd18 <Initialize+0x444>)
 800bcf8:	480b      	ldr	r0, [pc, #44]	; (800bd28 <Initialize+0x454>)
 800bcfa:	f7f5 f9bd 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	200097f8 	.word	0x200097f8
 800bd08:	20005f74 	.word	0x20005f74
 800bd0c:	20006c74 	.word	0x20006c74
 800bd10:	2000989c 	.word	0x2000989c
 800bd14:	200097f4 	.word	0x200097f4
 800bd18:	20005ca8 	.word	0x20005ca8
 800bd1c:	2000a61c 	.word	0x2000a61c
 800bd20:	2000991c 	.word	0x2000991c
 800bd24:	20009940 	.word	0x20009940
 800bd28:	20007440 	.word	0x20007440

0800bd2c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800bd30:	4802      	ldr	r0, [pc, #8]	; (800bd3c <CAN1_RX0_IRQHandler+0x10>)
 800bd32:	f00a fb1d 	bl	8016370 <HAL_CAN_IRQHandler>

}
 800bd36:	bf00      	nop
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	2000a160 	.word	0x2000a160

0800bd40 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800bd44:	4802      	ldr	r0, [pc, #8]	; (800bd50 <CAN2_RX1_IRQHandler+0x10>)
 800bd46:	f00a fb13 	bl	8016370 <HAL_CAN_IRQHandler>

}
 800bd4a:	bf00      	nop
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20009174 	.word	0x20009174

0800bd54 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d008      	beq.n	800bd76 <CAN_PROCESS+0x22>
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	dc36      	bgt.n	800bdd6 <CAN_PROCESS+0x82>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <CAN_PROCESS+0x28>
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d132      	bne.n	800bdd6 <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800bd70:	f003 f9b8 	bl	800f0e4 <decode_VESC>
		break;
 800bd74:	e02f      	b.n	800bdd6 <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800bd76:	f7f9 fac9 	bl	800530c <OdriveCAN_Handler>
		break;
 800bd7a:	e02c      	b.n	800bdd6 <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800bd7c:	4b18      	ldr	r3, [pc, #96]	; (800bde0 <CAN_PROCESS+0x8c>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d107      	bne.n	800bd94 <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800bd84:	4b16      	ldr	r3, [pc, #88]	; (800bde0 <CAN_PROCESS+0x8c>)
 800bd86:	785a      	ldrb	r2, [r3, #1]
 800bd88:	4b16      	ldr	r3, [pc, #88]	; (800bde4 <CAN_PROCESS+0x90>)
 800bd8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800bd8e:	4b14      	ldr	r3, [pc, #80]	; (800bde0 <CAN_PROCESS+0x8c>)
 800bd90:	2202      	movs	r2, #2
 800bd92:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800bd94:	4b12      	ldr	r3, [pc, #72]	; (800bde0 <CAN_PROCESS+0x8c>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b11      	cmp	r3, #17
 800bd9a:	d11b      	bne.n	800bdd4 <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800bd9c:	4b12      	ldr	r3, [pc, #72]	; (800bde8 <CAN_PROCESS+0x94>)
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d117      	bne.n	800bdd4 <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800bda4:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <CAN_PROCESS+0x8c>)
 800bda6:	785a      	ldrb	r2, [r3, #1]
 800bda8:	4b0e      	ldr	r3, [pc, #56]	; (800bde4 <CAN_PROCESS+0x90>)
 800bdaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800bdae:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <CAN_PROCESS+0x98>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a0c      	ldr	r2, [pc, #48]	; (800bde4 <CAN_PROCESS+0x90>)
 800bdb4:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800bdb6:	4b0d      	ldr	r3, [pc, #52]	; (800bdec <CAN_PROCESS+0x98>)
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	4a0a      	ldr	r2, [pc, #40]	; (800bde4 <CAN_PROCESS+0x90>)
 800bdbc:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <CAN_PROCESS+0x9c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a08      	ldr	r2, [pc, #32]	; (800bde4 <CAN_PROCESS+0x90>)
 800bdc4:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800bdc6:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <CAN_PROCESS+0x9c>)
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	4a06      	ldr	r2, [pc, #24]	; (800bde4 <CAN_PROCESS+0x90>)
 800bdcc:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800bdce:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <CAN_PROCESS+0x8c>)
 800bdd0:	2203      	movs	r2, #3
 800bdd2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800bdd4:	bf00      	nop
	}
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20006a6c 	.word	0x20006a6c
 800bde4:	2000907c 	.word	0x2000907c
 800bde8:	200002d4 	.word	0x200002d4
 800bdec:	20009e60 	.word	0x20009e60
 800bdf0:	20009fc4 	.word	0x20009fc4

0800bdf4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bdf4:	b5b0      	push	{r4, r5, r7, lr}
 800bdf6:	b08c      	sub	sp, #48	; 0x30
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4aaa      	ldr	r2, [pc, #680]	; (800c0b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800be06:	4293      	cmp	r3, r2
 800be08:	f040 80b4 	bne.w	800bf74 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800be0c:	f107 030c 	add.w	r3, r7, #12
 800be10:	4aa8      	ldr	r2, [pc, #672]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be12:	2100      	movs	r1, #0
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f00a f973 	bl	8016100 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800be1a:	4ba6      	ldr	r3, [pc, #664]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d118      	bne.n	800be54 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800be22:	4aa5      	ldr	r2, [pc, #660]	; (800c0b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800be24:	4ba3      	ldr	r3, [pc, #652]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be26:	4614      	mov	r4, r2
 800be28:	461d      	mov	r5, r3
 800be2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800be36:	4ba0      	ldr	r3, [pc, #640]	; (800c0b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800be38:	331c      	adds	r3, #28
 800be3a:	f107 020c 	add.w	r2, r7, #12
 800be3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be42:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800be46:	489c      	ldr	r0, [pc, #624]	; (800c0b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800be48:	f003 f9ba 	bl	800f1c0 <set_rx_frames>
			source = VESC_PACKET;
 800be4c:	2301      	movs	r3, #1
 800be4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be52:	e081      	b.n	800bf58 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800be54:	2300      	movs	r3, #0
 800be56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800be5a:	231f      	movs	r3, #31
 800be5c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800be5e:	4b95      	ldr	r3, [pc, #596]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	b29a      	uxth	r2, r3
 800be64:	8b7b      	ldrh	r3, [r7, #26]
 800be66:	4013      	ands	r3, r2
 800be68:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800be6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800be6e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800be70:	4b90      	ldr	r3, [pc, #576]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	b29a      	uxth	r2, r3
 800be76:	8afb      	ldrh	r3, [r7, #22]
 800be78:	4013      	ands	r3, r2
 800be7a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800be7c:	8abb      	ldrh	r3, [r7, #20]
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800be82:	2300      	movs	r3, #0
 800be84:	62bb      	str	r3, [r7, #40]	; 0x28
 800be86:	e016      	b.n	800beb6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800be88:	4b8c      	ldr	r3, [pc, #560]	; (800c0bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	8b1b      	ldrh	r3, [r3, #24]
 800be96:	8aba      	ldrh	r2, [r7, #20]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d109      	bne.n	800beb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800be9c:	8b3b      	ldrh	r3, [r7, #24]
 800be9e:	2b09      	cmp	r3, #9
 800bea0:	d002      	beq.n	800bea8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800bea2:	8b3b      	ldrh	r3, [r7, #24]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d103      	bne.n	800beb0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800bea8:	2302      	movs	r3, #2
 800beaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800beae:	e007      	b.n	800bec0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	3301      	adds	r3, #1
 800beb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800beb6:	4b82      	ldr	r3, [pc, #520]	; (800c0c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bebc:	429a      	cmp	r2, r3
 800bebe:	dbe3      	blt.n	800be88 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800bec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d112      	bne.n	800beee <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800bec8:	4a7e      	ldr	r2, [pc, #504]	; (800c0c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800beca:	4b7a      	ldr	r3, [pc, #488]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800becc:	4614      	mov	r4, r2
 800bece:	461d      	mov	r5, r3
 800bed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bed4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800bedc:	4b75      	ldr	r3, [pc, #468]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bede:	691a      	ldr	r2, [r3, #16]
 800bee0:	f107 030c 	add.w	r3, r7, #12
 800bee4:	4619      	mov	r1, r3
 800bee6:	4878      	ldr	r0, [pc, #480]	; (800c0c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800bee8:	f012 ffaa 	bl	801ee40 <memcpy>
 800beec:	e034      	b.n	800bf58 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800beee:	4b71      	ldr	r3, [pc, #452]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b16      	cmp	r3, #22
 800bef4:	d01b      	beq.n	800bf2e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800bef6:	2b16      	cmp	r3, #22
 800bef8:	d825      	bhi.n	800bf46 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800befa:	2b14      	cmp	r3, #20
 800befc:	d002      	beq.n	800bf04 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800befe:	2b15      	cmp	r3, #21
 800bf00:	d00c      	beq.n	800bf1c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800bf02:	e020      	b.n	800bf46 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800bf04:	4b6b      	ldr	r3, [pc, #428]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bf06:	691a      	ldr	r2, [r3, #16]
 800bf08:	f107 030c 	add.w	r3, r7, #12
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	486f      	ldr	r0, [pc, #444]	; (800c0cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800bf10:	f012 ff96 	bl	801ee40 <memcpy>
					buf2_flag = 0;
 800bf14:	4b6e      	ldr	r3, [pc, #440]	; (800c0d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]

					break;
 800bf1a:	e01d      	b.n	800bf58 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800bf1c:	4b65      	ldr	r3, [pc, #404]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	f107 030c 	add.w	r3, r7, #12
 800bf24:	4619      	mov	r1, r3
 800bf26:	486b      	ldr	r0, [pc, #428]	; (800c0d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800bf28:	f012 ff8a 	bl	801ee40 <memcpy>

					break;
 800bf2c:	e014      	b.n	800bf58 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800bf2e:	4b61      	ldr	r3, [pc, #388]	; (800c0b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bf30:	691a      	ldr	r2, [r3, #16]
 800bf32:	f107 030c 	add.w	r3, r7, #12
 800bf36:	4619      	mov	r1, r3
 800bf38:	4867      	ldr	r0, [pc, #412]	; (800c0d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800bf3a:	f012 ff81 	bl	801ee40 <memcpy>
					buf2_flag = 1;
 800bf3e:	4b64      	ldr	r3, [pc, #400]	; (800c0d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	701a      	strb	r2, [r3, #0]
					break;
 800bf44:	e008      	b.n	800bf58 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800bf4c:	f107 030c 	add.w	r3, r7, #12
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f7 fda9 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800bf56:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800bf58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d004      	beq.n	800bf6a <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800bf60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff fef5 	bl	800bd54 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800bf6a:	2102      	movs	r1, #2
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f00a f9d9 	bl	8016324 <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800bf72:	e0cb      	b.n	800c10c <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	4a58      	ldr	r2, [pc, #352]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f00a f8bf 	bl	8016100 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800bf82:	4b56      	ldr	r3, [pc, #344]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	2b04      	cmp	r3, #4
 800bf88:	d118      	bne.n	800bfbc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800bf8a:	4a4b      	ldr	r2, [pc, #300]	; (800c0b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bf8c:	4b53      	ldr	r3, [pc, #332]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bf8e:	4614      	mov	r4, r2
 800bf90:	461d      	mov	r5, r3
 800bf92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800bf9e:	4b46      	ldr	r3, [pc, #280]	; (800c0b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bfa0:	331c      	adds	r3, #28
 800bfa2:	f107 020c 	add.w	r2, r7, #12
 800bfa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfaa:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800bfae:	4842      	ldr	r0, [pc, #264]	; (800c0b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bfb0:	f003 f906 	bl	800f1c0 <set_rx_frames>
			source = VESC_PACKET;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bfba:	e09a      	b.n	800c0f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800bfc2:	231f      	movs	r3, #31
 800bfc4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800bfc6:	4b45      	ldr	r3, [pc, #276]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfce:	4013      	ands	r3, r2
 800bfd0:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800bfd2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800bfd6:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800bfd8:	4b40      	ldr	r3, [pc, #256]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	8bfb      	ldrh	r3, [r7, #30]
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800bfe4:	8bbb      	ldrh	r3, [r7, #28]
 800bfe6:	095b      	lsrs	r3, r3, #5
 800bfe8:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800bfea:	2300      	movs	r3, #0
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
 800bfee:	e016      	b.n	800c01e <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800bff0:	4b32      	ldr	r3, [pc, #200]	; (800c0bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	8b1b      	ldrh	r3, [r3, #24]
 800bffe:	8bba      	ldrh	r2, [r7, #28]
 800c000:	429a      	cmp	r2, r3
 800c002:	d109      	bne.n	800c018 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800c004:	8c3b      	ldrh	r3, [r7, #32]
 800c006:	2b09      	cmp	r3, #9
 800c008:	d002      	beq.n	800c010 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800c00a:	8c3b      	ldrh	r3, [r7, #32]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d103      	bne.n	800c018 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800c010:	2302      	movs	r3, #2
 800c012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800c016:	e007      	b.n	800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	3301      	adds	r3, #1
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
 800c01e:	4b28      	ldr	r3, [pc, #160]	; (800c0c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c024:	429a      	cmp	r2, r3
 800c026:	dbe3      	blt.n	800bff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800c028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d112      	bne.n	800c056 <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800c030:	4a24      	ldr	r2, [pc, #144]	; (800c0c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800c032:	4b2a      	ldr	r3, [pc, #168]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c034:	4614      	mov	r4, r2
 800c036:	461d      	mov	r5, r3
 800c038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c03a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c03c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800c044:	4b25      	ldr	r3, [pc, #148]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c046:	691a      	ldr	r2, [r3, #16]
 800c048:	f107 030c 	add.w	r3, r7, #12
 800c04c:	4619      	mov	r1, r3
 800c04e:	481e      	ldr	r0, [pc, #120]	; (800c0c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800c050:	f012 fef6 	bl	801ee40 <memcpy>
 800c054:	e04d      	b.n	800c0f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800c056:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b16      	cmp	r3, #22
 800c05c:	d01b      	beq.n	800c096 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800c05e:	2b16      	cmp	r3, #22
 800c060:	d83e      	bhi.n	800c0e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800c062:	2b14      	cmp	r3, #20
 800c064:	d002      	beq.n	800c06c <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800c066:	2b15      	cmp	r3, #21
 800c068:	d00c      	beq.n	800c084 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800c06a:	e039      	b.n	800c0e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800c06c:	4b1b      	ldr	r3, [pc, #108]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c06e:	691a      	ldr	r2, [r3, #16]
 800c070:	f107 030c 	add.w	r3, r7, #12
 800c074:	4619      	mov	r1, r3
 800c076:	4815      	ldr	r0, [pc, #84]	; (800c0cc <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800c078:	f012 fee2 	bl	801ee40 <memcpy>
					buf2_flag = 0;
 800c07c:	4b14      	ldr	r3, [pc, #80]	; (800c0d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800c07e:	2200      	movs	r2, #0
 800c080:	701a      	strb	r2, [r3, #0]
					break;
 800c082:	e036      	b.n	800c0f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800c084:	4b15      	ldr	r3, [pc, #84]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c086:	691a      	ldr	r2, [r3, #16]
 800c088:	f107 030c 	add.w	r3, r7, #12
 800c08c:	4619      	mov	r1, r3
 800c08e:	4811      	ldr	r0, [pc, #68]	; (800c0d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800c090:	f012 fed6 	bl	801ee40 <memcpy>
					break;
 800c094:	e02d      	b.n	800c0f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800c096:	4b11      	ldr	r3, [pc, #68]	; (800c0dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c098:	691a      	ldr	r2, [r3, #16]
 800c09a:	f107 030c 	add.w	r3, r7, #12
 800c09e:	4619      	mov	r1, r3
 800c0a0:	480d      	ldr	r0, [pc, #52]	; (800c0d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800c0a2:	f012 fecd 	bl	801ee40 <memcpy>
					buf2_flag = 1;
 800c0a6:	4b0a      	ldr	r3, [pc, #40]	; (800c0d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	701a      	strb	r2, [r3, #0]
					break;
 800c0ac:	e021      	b.n	800c0f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800c0ae:	bf00      	nop
 800c0b0:	2000a160 	.word	0x2000a160
 800c0b4:	2000a75c 	.word	0x2000a75c
 800c0b8:	200098ec 	.word	0x200098ec
 800c0bc:	2000a88c 	.word	0x2000a88c
 800c0c0:	200002c8 	.word	0x200002c8
 800c0c4:	200068b4 	.word	0x200068b4
 800c0c8:	200068d0 	.word	0x200068d0
 800c0cc:	20006a6c 	.word	0x20006a6c
 800c0d0:	200002d4 	.word	0x200002d4
 800c0d4:	20009e60 	.word	0x20009e60
 800c0d8:	20009fc4 	.word	0x20009fc4
 800c0dc:	20006ae8 	.word	0x20006ae8
					rns_can = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800c0e6:	f107 030c 	add.w	r3, r7, #12
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7f7 fcdc 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800c0f0:	bf00      	nop
		if(rns_can)
 800c0f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800c0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff fe28 	bl	800bd54 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800c104:	2102      	movs	r1, #2
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f00a f90c 	bl	8016324 <HAL_CAN_ActivateNotification>
}
 800c10c:	bf00      	nop
 800c10e:	3730      	adds	r7, #48	; 0x30
 800c110:	46bd      	mov	sp, r7
 800c112:	bdb0      	pop	{r4, r5, r7, pc}

0800c114 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800c114:	b5b0      	push	{r4, r5, r7, lr}
 800c116:	b08c      	sub	sp, #48	; 0x30
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800c11c:	2301      	movs	r3, #1
 800c11e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4aaa      	ldr	r2, [pc, #680]	; (800c3d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800c126:	4293      	cmp	r3, r2
 800c128:	f040 80b4 	bne.w	800c294 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800c12c:	f107 030c 	add.w	r3, r7, #12
 800c130:	4aa8      	ldr	r2, [pc, #672]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c132:	2101      	movs	r1, #1
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f009 ffe3 	bl	8016100 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800c13a:	4ba6      	ldr	r3, [pc, #664]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	2b04      	cmp	r3, #4
 800c140:	d118      	bne.n	800c174 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800c142:	4aa5      	ldr	r2, [pc, #660]	; (800c3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c144:	4ba3      	ldr	r3, [pc, #652]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c146:	4614      	mov	r4, r2
 800c148:	461d      	mov	r5, r3
 800c14a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c14c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c14e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800c156:	4ba0      	ldr	r3, [pc, #640]	; (800c3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c158:	331c      	adds	r3, #28
 800c15a:	f107 020c 	add.w	r2, r7, #12
 800c15e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c162:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800c166:	489c      	ldr	r0, [pc, #624]	; (800c3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c168:	f003 f82a 	bl	800f1c0 <set_rx_frames>
			source = VESC_PACKET;
 800c16c:	2301      	movs	r3, #1
 800c16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c172:	e081      	b.n	800c278 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800c174:	2300      	movs	r3, #0
 800c176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800c17a:	231f      	movs	r3, #31
 800c17c:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800c17e:	4b95      	ldr	r3, [pc, #596]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	b29a      	uxth	r2, r3
 800c184:	8b7b      	ldrh	r3, [r7, #26]
 800c186:	4013      	ands	r3, r2
 800c188:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800c18a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c18e:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800c190:	4b90      	ldr	r3, [pc, #576]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	b29a      	uxth	r2, r3
 800c196:	8afb      	ldrh	r3, [r7, #22]
 800c198:	4013      	ands	r3, r2
 800c19a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800c19c:	8abb      	ldrh	r3, [r7, #20]
 800c19e:	095b      	lsrs	r3, r3, #5
 800c1a0:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1a6:	e016      	b.n	800c1d6 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800c1a8:	4b8c      	ldr	r3, [pc, #560]	; (800c3dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	8b1b      	ldrh	r3, [r3, #24]
 800c1b6:	8aba      	ldrh	r2, [r7, #20]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d109      	bne.n	800c1d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800c1bc:	8b3b      	ldrh	r3, [r7, #24]
 800c1be:	2b09      	cmp	r3, #9
 800c1c0:	d002      	beq.n	800c1c8 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800c1c2:	8b3b      	ldrh	r3, [r7, #24]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d103      	bne.n	800c1d0 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800c1ce:	e007      	b.n	800c1e0 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800c1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1d6:	4b82      	ldr	r3, [pc, #520]	; (800c3e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	dbe3      	blt.n	800c1a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800c1e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d112      	bne.n	800c20e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800c1e8:	4a7e      	ldr	r2, [pc, #504]	; (800c3e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800c1ea:	4b7a      	ldr	r3, [pc, #488]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c1ec:	4614      	mov	r4, r2
 800c1ee:	461d      	mov	r5, r3
 800c1f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c1f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800c1fc:	4b75      	ldr	r3, [pc, #468]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c1fe:	691a      	ldr	r2, [r3, #16]
 800c200:	f107 030c 	add.w	r3, r7, #12
 800c204:	4619      	mov	r1, r3
 800c206:	4878      	ldr	r0, [pc, #480]	; (800c3e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800c208:	f012 fe1a 	bl	801ee40 <memcpy>
 800c20c:	e034      	b.n	800c278 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800c20e:	4b71      	ldr	r3, [pc, #452]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b16      	cmp	r3, #22
 800c214:	d01b      	beq.n	800c24e <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800c216:	2b16      	cmp	r3, #22
 800c218:	d825      	bhi.n	800c266 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800c21a:	2b14      	cmp	r3, #20
 800c21c:	d002      	beq.n	800c224 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800c21e:	2b15      	cmp	r3, #21
 800c220:	d00c      	beq.n	800c23c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800c222:	e020      	b.n	800c266 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800c224:	4b6b      	ldr	r3, [pc, #428]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c226:	691a      	ldr	r2, [r3, #16]
 800c228:	f107 030c 	add.w	r3, r7, #12
 800c22c:	4619      	mov	r1, r3
 800c22e:	486f      	ldr	r0, [pc, #444]	; (800c3ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800c230:	f012 fe06 	bl	801ee40 <memcpy>
					buf2_flag = 0;
 800c234:	4b6e      	ldr	r3, [pc, #440]	; (800c3f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]

					break;
 800c23a:	e01d      	b.n	800c278 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800c23c:	4b65      	ldr	r3, [pc, #404]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c23e:	691a      	ldr	r2, [r3, #16]
 800c240:	f107 030c 	add.w	r3, r7, #12
 800c244:	4619      	mov	r1, r3
 800c246:	486b      	ldr	r0, [pc, #428]	; (800c3f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800c248:	f012 fdfa 	bl	801ee40 <memcpy>

					break;
 800c24c:	e014      	b.n	800c278 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800c24e:	4b61      	ldr	r3, [pc, #388]	; (800c3d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	f107 030c 	add.w	r3, r7, #12
 800c256:	4619      	mov	r1, r3
 800c258:	4867      	ldr	r0, [pc, #412]	; (800c3f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800c25a:	f012 fdf1 	bl	801ee40 <memcpy>
					buf2_flag = 1;
 800c25e:	4b64      	ldr	r3, [pc, #400]	; (800c3f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c260:	2201      	movs	r2, #1
 800c262:	701a      	strb	r2, [r3, #0]
					break;
 800c264:	e008      	b.n	800c278 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800c26c:	f107 030c 	add.w	r3, r7, #12
 800c270:	4618      	mov	r0, r3
 800c272:	f7f7 fc19 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800c276:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800c278:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d004      	beq.n	800c28a <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800c280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c284:	4618      	mov	r0, r3
 800c286:	f7ff fd65 	bl	800bd54 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800c28a:	2110      	movs	r1, #16
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f00a f849 	bl	8016324 <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800c292:	e0cb      	b.n	800c42c <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	4a58      	ldr	r2, [pc, #352]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c29a:	2101      	movs	r1, #1
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f009 ff2f 	bl	8016100 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800c2a2:	4b56      	ldr	r3, [pc, #344]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d118      	bne.n	800c2dc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800c2aa:	4a4b      	ldr	r2, [pc, #300]	; (800c3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c2ac:	4b53      	ldr	r3, [pc, #332]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2ae:	4614      	mov	r4, r2
 800c2b0:	461d      	mov	r5, r3
 800c2b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c2ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800c2be:	4b46      	ldr	r3, [pc, #280]	; (800c3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c2c0:	331c      	adds	r3, #28
 800c2c2:	f107 020c 	add.w	r2, r7, #12
 800c2c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2ca:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800c2ce:	4842      	ldr	r0, [pc, #264]	; (800c3d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c2d0:	f002 ff76 	bl	800f1c0 <set_rx_frames>
			source = VESC_PACKET;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c2da:	e09a      	b.n	800c412 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800c2e2:	231f      	movs	r3, #31
 800c2e4:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800c2e6:	4b45      	ldr	r3, [pc, #276]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800c2f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c2f6:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800c2f8:	4b40      	ldr	r3, [pc, #256]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	8bfb      	ldrh	r3, [r7, #30]
 800c300:	4013      	ands	r3, r2
 800c302:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800c304:	8bbb      	ldrh	r3, [r7, #28]
 800c306:	095b      	lsrs	r3, r3, #5
 800c308:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800c30a:	2300      	movs	r3, #0
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
 800c30e:	e016      	b.n	800c33e <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800c310:	4b32      	ldr	r3, [pc, #200]	; (800c3dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4413      	add	r3, r2
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	8b1b      	ldrh	r3, [r3, #24]
 800c31e:	8bba      	ldrh	r2, [r7, #28]
 800c320:	429a      	cmp	r2, r3
 800c322:	d109      	bne.n	800c338 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800c324:	8c3b      	ldrh	r3, [r7, #32]
 800c326:	2b09      	cmp	r3, #9
 800c328:	d002      	beq.n	800c330 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800c32a:	8c3b      	ldrh	r3, [r7, #32]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d103      	bne.n	800c338 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800c330:	2302      	movs	r3, #2
 800c332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800c336:	e007      	b.n	800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	3301      	adds	r3, #1
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
 800c33e:	4b28      	ldr	r3, [pc, #160]	; (800c3e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c344:	429a      	cmp	r2, r3
 800c346:	dbe3      	blt.n	800c310 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800c348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d112      	bne.n	800c376 <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800c350:	4a24      	ldr	r2, [pc, #144]	; (800c3e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800c352:	4b2a      	ldr	r3, [pc, #168]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c354:	4614      	mov	r4, r2
 800c356:	461d      	mov	r5, r3
 800c358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c35c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800c364:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c366:	691a      	ldr	r2, [r3, #16]
 800c368:	f107 030c 	add.w	r3, r7, #12
 800c36c:	4619      	mov	r1, r3
 800c36e:	481e      	ldr	r0, [pc, #120]	; (800c3e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800c370:	f012 fd66 	bl	801ee40 <memcpy>
 800c374:	e04d      	b.n	800c412 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800c376:	4b21      	ldr	r3, [pc, #132]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b16      	cmp	r3, #22
 800c37c:	d01b      	beq.n	800c3b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800c37e:	2b16      	cmp	r3, #22
 800c380:	d83e      	bhi.n	800c400 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800c382:	2b14      	cmp	r3, #20
 800c384:	d002      	beq.n	800c38c <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800c386:	2b15      	cmp	r3, #21
 800c388:	d00c      	beq.n	800c3a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800c38a:	e039      	b.n	800c400 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800c38c:	4b1b      	ldr	r3, [pc, #108]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c38e:	691a      	ldr	r2, [r3, #16]
 800c390:	f107 030c 	add.w	r3, r7, #12
 800c394:	4619      	mov	r1, r3
 800c396:	4815      	ldr	r0, [pc, #84]	; (800c3ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800c398:	f012 fd52 	bl	801ee40 <memcpy>
					buf2_flag = 0;
 800c39c:	4b14      	ldr	r3, [pc, #80]	; (800c3f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	701a      	strb	r2, [r3, #0]
					break;
 800c3a2:	e036      	b.n	800c412 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800c3a4:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c3a6:	691a      	ldr	r2, [r3, #16]
 800c3a8:	f107 030c 	add.w	r3, r7, #12
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4811      	ldr	r0, [pc, #68]	; (800c3f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800c3b0:	f012 fd46 	bl	801ee40 <memcpy>
					break;
 800c3b4:	e02d      	b.n	800c412 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800c3b6:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c3b8:	691a      	ldr	r2, [r3, #16]
 800c3ba:	f107 030c 	add.w	r3, r7, #12
 800c3be:	4619      	mov	r1, r3
 800c3c0:	480d      	ldr	r0, [pc, #52]	; (800c3f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800c3c2:	f012 fd3d 	bl	801ee40 <memcpy>
					buf2_flag = 1;
 800c3c6:	4b0a      	ldr	r3, [pc, #40]	; (800c3f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	701a      	strb	r2, [r3, #0]
					break;
 800c3cc:	e021      	b.n	800c412 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800c3ce:	bf00      	nop
 800c3d0:	2000a160 	.word	0x2000a160
 800c3d4:	2000a75c 	.word	0x2000a75c
 800c3d8:	200098ec 	.word	0x200098ec
 800c3dc:	2000a88c 	.word	0x2000a88c
 800c3e0:	200002c8 	.word	0x200002c8
 800c3e4:	200068b4 	.word	0x200068b4
 800c3e8:	200068d0 	.word	0x200068d0
 800c3ec:	20006a6c 	.word	0x20006a6c
 800c3f0:	200002d4 	.word	0x200002d4
 800c3f4:	20009e60 	.word	0x20009e60
 800c3f8:	20009fc4 	.word	0x20009fc4
 800c3fc:	20006ae8 	.word	0x20006ae8
					rns_can = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800c406:	f107 030c 	add.w	r3, r7, #12
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7f7 fb4c 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800c410:	bf00      	nop
		if(rns_can)
 800c412:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c416:	2b00      	cmp	r3, #0
 800c418:	d004      	beq.n	800c424 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800c41a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c41e:	4618      	mov	r0, r3
 800c420:	f7ff fc98 	bl	800bd54 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800c424:	2110      	movs	r1, #16
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f009 ff7c 	bl	8016324 <HAL_CAN_ActivateNotification>
}
 800c42c:	bf00      	nop
 800c42e:	3730      	adds	r7, #48	; 0x30
 800c430:	46bd      	mov	sp, r7
 800c432:	bdb0      	pop	{r4, r5, r7, pc}

0800c434 <set>:

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};
float flywheelVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};
float flywheelLVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};

void set(void) {
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	; 0x28
 800c438:	af04      	add	r7, sp, #16
	Initialize();
 800c43a:	f7ff fa4b 	bl	800b8d4 <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800c43e:	49b1      	ldr	r1, [pc, #708]	; (800c704 <set+0x2d0>)
 800c440:	48b1      	ldr	r0, [pc, #708]	; (800c708 <set+0x2d4>)
 800c442:	f7fe f8e6 	bl	800a612 <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800c446:	2254      	movs	r2, #84	; 0x54
 800c448:	f241 3188 	movw	r1, #5000	; 0x1388
 800c44c:	48af      	ldr	r0, [pc, #700]	; (800c70c <set+0x2d8>)
 800c44e:	f7f6 fd33 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 5.5, 0.5, 2.0, 0.1);
 800c452:	eddf 1aaf 	vldr	s3, [pc, #700]	; 800c710 <set+0x2dc>
 800c456:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800c45a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800c45e:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800c462:	2000      	movs	r0, #0
 800c464:	f7f8 f9b8 	bl	80047d8 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800c468:	4aaa      	ldr	r2, [pc, #680]	; (800c714 <set+0x2e0>)
 800c46a:	2101      	movs	r1, #1
 800c46c:	48aa      	ldr	r0, [pc, #680]	; (800c718 <set+0x2e4>)
 800c46e:	f002 ff7f 	bl	800f370 <LidarInit>
	RNS_config(&hcan1);
 800c472:	48aa      	ldr	r0, [pc, #680]	; (800c71c <set+0x2e8>)
 800c474:	f000 f9a8 	bl	800c7c8 <RNS_config>

	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800c478:	2304      	movs	r3, #4
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	2340      	movs	r3, #64	; 0x40
 800c47e:	4aa8      	ldr	r2, [pc, #672]	; (800c720 <set+0x2ec>)
 800c480:	49a8      	ldr	r1, [pc, #672]	; (800c724 <set+0x2f0>)
 800c482:	48a9      	ldr	r0, [pc, #676]	; (800c728 <set+0x2f4>)
 800c484:	f7ff f88e 	bl	800b5a4 <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800c488:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c48c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c490:	48a5      	ldr	r0, [pc, #660]	; (800c728 <set+0x2f4>)
 800c492:	f7ff f9ee 	bl	800b872 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2220);
 800c496:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800c49a:	48a3      	ldr	r0, [pc, #652]	; (800c728 <set+0x2f4>)
 800c49c:	f7ff f9a0 	bl	800b7e0 <ServoSetPulse>

	ServoxInit(&servo_ring_new, &htim5, IP15_PIN, TIM_CHANNEL_1); // BDC8
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	2340      	movs	r3, #64	; 0x40
 800c4a6:	4a9e      	ldr	r2, [pc, #632]	; (800c720 <set+0x2ec>)
 800c4a8:	499e      	ldr	r1, [pc, #632]	; (800c724 <set+0x2f0>)
 800c4aa:	48a0      	ldr	r0, [pc, #640]	; (800c72c <set+0x2f8>)
 800c4ac:	f7ff f87a 	bl	800b5a4 <ServoxInit>
	ServoInitPulseLimit(&servo_ring_new, 500, 2500);
 800c4b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c4b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c4b8:	489c      	ldr	r0, [pc, #624]	; (800c72c <set+0x2f8>)
 800c4ba:	f7ff f9da 	bl	800b872 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring_new, 800);
 800c4be:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c4c2:	489a      	ldr	r0, [pc, #616]	; (800c72c <set+0x2f8>)
 800c4c4:	f7ff f98c 	bl	800b7e0 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp, &lsrL, &lsry, &lsrR);
 800c4c8:	4b99      	ldr	r3, [pc, #612]	; (800c730 <set+0x2fc>)
 800c4ca:	9303      	str	r3, [sp, #12]
 800c4cc:	4b99      	ldr	r3, [pc, #612]	; (800c734 <set+0x300>)
 800c4ce:	9302      	str	r3, [sp, #8]
 800c4d0:	4b99      	ldr	r3, [pc, #612]	; (800c738 <set+0x304>)
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	4b99      	ldr	r3, [pc, #612]	; (800c73c <set+0x308>)
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	4b99      	ldr	r3, [pc, #612]	; (800c740 <set+0x30c>)
 800c4da:	4a9a      	ldr	r2, [pc, #616]	; (800c744 <set+0x310>)
 800c4dc:	499a      	ldr	r1, [pc, #616]	; (800c748 <set+0x314>)
 800c4de:	2002      	movs	r0, #2
 800c4e0:	f7f9 fa1a 	bl	8005918 <PPInit>
//	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
	PP_SetZ(-180, &pp);
 800c4e4:	4895      	ldr	r0, [pc, #596]	; (800c73c <set+0x308>)
 800c4e6:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800c74c <set+0x318>
 800c4ea:	f7f9 ff5f 	bl	80063ac <PP_SetZ>
	PP_PIDPathSet(1.5, 1.5, 0.5, &pp);
 800c4ee:	4893      	ldr	r0, [pc, #588]	; (800c73c <set+0x308>)
 800c4f0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c4f4:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800c4f8:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800c4fc:	f7f9 fad6 	bl	8005aac <PP_PIDPathSet>
	PP_PIDEndSet(1.0, 1.5, 1.0, &pp);
 800c500:	488e      	ldr	r0, [pc, #568]	; (800c73c <set+0x308>)
 800c502:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c506:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800c50a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c50e:	f7f9 fb56 	bl	8005bbe <PP_PIDEndSet>
	PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 800c512:	488a      	ldr	r0, [pc, #552]	; (800c73c <set+0x308>)
 800c514:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800c518:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800c750 <set+0x31c>
 800c51c:	eddf 0a8d 	vldr	s1, [pc, #564]	; 800c754 <set+0x320>
 800c520:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800c524:	f7f9 fb12 	bl	8005b4c <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800c528:	4984      	ldr	r1, [pc, #528]	; (800c73c <set+0x308>)
 800c52a:	200a      	movs	r0, #10
 800c52c:	f7f9 ff56 	bl	80063dc <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800c530:	4989      	ldr	r1, [pc, #548]	; (800c758 <set+0x324>)
 800c532:	488a      	ldr	r0, [pc, #552]	; (800c75c <set+0x328>)
 800c534:	f7fe fb82 	bl	800ac3c <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800c538:	4a89      	ldr	r2, [pc, #548]	; (800c760 <set+0x32c>)
 800c53a:	498a      	ldr	r1, [pc, #552]	; (800c764 <set+0x330>)
 800c53c:	488a      	ldr	r0, [pc, #552]	; (800c768 <set+0x334>)
 800c53e:	f7f8 ff55 	bl	80053ec <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800c542:	4887      	ldr	r0, [pc, #540]	; (800c760 <set+0x32c>)
 800c544:	f7f9 f8e9 	bl	800571a <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800c548:	4b88      	ldr	r3, [pc, #544]	; (800c76c <set+0x338>)
 800c54a:	edd3 7a00 	vldr	s15, [r3]
 800c54e:	4b87      	ldr	r3, [pc, #540]	; (800c76c <set+0x338>)
 800c550:	ed93 7a01 	vldr	s14, [r3, #4]
 800c554:	4b85      	ldr	r3, [pc, #532]	; (800c76c <set+0x338>)
 800c556:	edd3 6a02 	vldr	s13, [r3, #8]
 800c55a:	4b84      	ldr	r3, [pc, #528]	; (800c76c <set+0x338>)
 800c55c:	ed93 6a03 	vldr	s12, [r3, #12]
 800c560:	4b82      	ldr	r3, [pc, #520]	; (800c76c <set+0x338>)
 800c562:	edd3 5a04 	vldr	s11, [r3, #16]
 800c566:	4b81      	ldr	r3, [pc, #516]	; (800c76c <set+0x338>)
 800c568:	ed93 5a05 	vldr	s10, [r3, #20]
 800c56c:	4b7f      	ldr	r3, [pc, #508]	; (800c76c <set+0x338>)
 800c56e:	edd3 4a06 	vldr	s9, [r3, #24]
 800c572:	487b      	ldr	r0, [pc, #492]	; (800c760 <set+0x32c>)
 800c574:	eef0 3a64 	vmov.f32	s7, s9
 800c578:	eeb0 3a45 	vmov.f32	s6, s10
 800c57c:	eef0 2a65 	vmov.f32	s5, s11
 800c580:	eeb0 2a46 	vmov.f32	s4, s12
 800c584:	eef0 1a66 	vmov.f32	s3, s13
 800c588:	eeb0 1a47 	vmov.f32	s2, s14
 800c58c:	eef0 0a67 	vmov.f32	s1, s15
 800c590:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800c770 <set+0x33c>
 800c594:	f7f8 ff3c 	bl	8005410 <PIDGainInit>

	PIDSourceInit(&leftErr, &leftU, &left_PID);
 800c598:	4a76      	ldr	r2, [pc, #472]	; (800c774 <set+0x340>)
 800c59a:	4977      	ldr	r1, [pc, #476]	; (800c778 <set+0x344>)
 800c59c:	4877      	ldr	r0, [pc, #476]	; (800c77c <set+0x348>)
 800c59e:	f7f8 ff25 	bl	80053ec <PIDSourceInit>
	PIDDelayInit(&left_PID);
 800c5a2:	4874      	ldr	r0, [pc, #464]	; (800c774 <set+0x340>)
 800c5a4:	f7f9 f8b9 	bl	800571a <PIDDelayInit>
	PIDGainInit(0.005, flywheelLVG[0], flywheelLVG[1], flywheelLVG[2], flywheelLVG[3], flywheelLVG[4], flywheelLVG[5], flywheelLVG[6], &left_PID);
 800c5a8:	4b75      	ldr	r3, [pc, #468]	; (800c780 <set+0x34c>)
 800c5aa:	edd3 7a00 	vldr	s15, [r3]
 800c5ae:	4b74      	ldr	r3, [pc, #464]	; (800c780 <set+0x34c>)
 800c5b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800c5b4:	4b72      	ldr	r3, [pc, #456]	; (800c780 <set+0x34c>)
 800c5b6:	edd3 6a02 	vldr	s13, [r3, #8]
 800c5ba:	4b71      	ldr	r3, [pc, #452]	; (800c780 <set+0x34c>)
 800c5bc:	ed93 6a03 	vldr	s12, [r3, #12]
 800c5c0:	4b6f      	ldr	r3, [pc, #444]	; (800c780 <set+0x34c>)
 800c5c2:	edd3 5a04 	vldr	s11, [r3, #16]
 800c5c6:	4b6e      	ldr	r3, [pc, #440]	; (800c780 <set+0x34c>)
 800c5c8:	ed93 5a05 	vldr	s10, [r3, #20]
 800c5cc:	4b6c      	ldr	r3, [pc, #432]	; (800c780 <set+0x34c>)
 800c5ce:	edd3 4a06 	vldr	s9, [r3, #24]
 800c5d2:	4868      	ldr	r0, [pc, #416]	; (800c774 <set+0x340>)
 800c5d4:	eef0 3a64 	vmov.f32	s7, s9
 800c5d8:	eeb0 3a45 	vmov.f32	s6, s10
 800c5dc:	eef0 2a65 	vmov.f32	s5, s11
 800c5e0:	eeb0 2a46 	vmov.f32	s4, s12
 800c5e4:	eef0 1a66 	vmov.f32	s3, s13
 800c5e8:	eeb0 1a47 	vmov.f32	s2, s14
 800c5ec:	eef0 0a67 	vmov.f32	s1, s15
 800c5f0:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800c770 <set+0x33c>
 800c5f4:	f7f8 ff0c 	bl	8005410 <PIDGainInit>

	PIDSourceInit(&rightErr, &rightU, &right_PID);
 800c5f8:	4a62      	ldr	r2, [pc, #392]	; (800c784 <set+0x350>)
 800c5fa:	4963      	ldr	r1, [pc, #396]	; (800c788 <set+0x354>)
 800c5fc:	4863      	ldr	r0, [pc, #396]	; (800c78c <set+0x358>)
 800c5fe:	f7f8 fef5 	bl	80053ec <PIDSourceInit>
	PIDDelayInit(&right_PID);
 800c602:	4860      	ldr	r0, [pc, #384]	; (800c784 <set+0x350>)
 800c604:	f7f9 f889 	bl	800571a <PIDDelayInit>
	PIDGainInit(0.005, flywheelVG[0], flywheelVG[1], flywheelVG[2], flywheelVG[3], flywheelVG[4], flywheelVG[5], flywheelVG[6], &right_PID);
 800c608:	4b61      	ldr	r3, [pc, #388]	; (800c790 <set+0x35c>)
 800c60a:	edd3 7a00 	vldr	s15, [r3]
 800c60e:	4b60      	ldr	r3, [pc, #384]	; (800c790 <set+0x35c>)
 800c610:	ed93 7a01 	vldr	s14, [r3, #4]
 800c614:	4b5e      	ldr	r3, [pc, #376]	; (800c790 <set+0x35c>)
 800c616:	edd3 6a02 	vldr	s13, [r3, #8]
 800c61a:	4b5d      	ldr	r3, [pc, #372]	; (800c790 <set+0x35c>)
 800c61c:	ed93 6a03 	vldr	s12, [r3, #12]
 800c620:	4b5b      	ldr	r3, [pc, #364]	; (800c790 <set+0x35c>)
 800c622:	edd3 5a04 	vldr	s11, [r3, #16]
 800c626:	4b5a      	ldr	r3, [pc, #360]	; (800c790 <set+0x35c>)
 800c628:	ed93 5a05 	vldr	s10, [r3, #20]
 800c62c:	4b58      	ldr	r3, [pc, #352]	; (800c790 <set+0x35c>)
 800c62e:	edd3 4a06 	vldr	s9, [r3, #24]
 800c632:	4854      	ldr	r0, [pc, #336]	; (800c784 <set+0x350>)
 800c634:	eef0 3a64 	vmov.f32	s7, s9
 800c638:	eeb0 3a45 	vmov.f32	s6, s10
 800c63c:	eef0 2a65 	vmov.f32	s5, s11
 800c640:	eeb0 2a46 	vmov.f32	s4, s12
 800c644:	eef0 1a66 	vmov.f32	s3, s13
 800c648:	eeb0 1a47 	vmov.f32	s2, s14
 800c64c:	eef0 0a67 	vmov.f32	s1, s15
 800c650:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800c770 <set+0x33c>
 800c654:	f7f8 fedc 	bl	8005410 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800c658:	4a4e      	ldr	r2, [pc, #312]	; (800c794 <set+0x360>)
 800c65a:	f107 030c 	add.w	r3, r7, #12
 800c65e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c660:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800c664:	4a4b      	ldr	r2, [pc, #300]	; (800c794 <set+0x360>)
 800c666:	463b      	mov	r3, r7
 800c668:	ca07      	ldmia	r2, {r0, r1, r2}
 800c66a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800c66e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c672:	ed97 7a04 	vldr	s14, [r7, #16]
 800c676:	edd7 6a05 	vldr	s13, [r7, #20]
 800c67a:	4b47      	ldr	r3, [pc, #284]	; (800c798 <set+0x364>)
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	4b47      	ldr	r3, [pc, #284]	; (800c79c <set+0x368>)
 800c680:	4a47      	ldr	r2, [pc, #284]	; (800c7a0 <set+0x36c>)
 800c682:	4931      	ldr	r1, [pc, #196]	; (800c748 <set+0x314>)
 800c684:	4847      	ldr	r0, [pc, #284]	; (800c7a4 <set+0x370>)
 800c686:	eef0 1a66 	vmov.f32	s3, s13
 800c68a:	eeb0 1a47 	vmov.f32	s2, s14
 800c68e:	eef0 0a67 	vmov.f32	s1, s15
 800c692:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c770 <set+0x33c>
 800c696:	f7f4 fca9 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800c69a:	483f      	ldr	r0, [pc, #252]	; (800c798 <set+0x364>)
 800c69c:	f7f4 fcd3 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800c6a0:	edd7 7a00 	vldr	s15, [r7]
 800c6a4:	ed97 7a01 	vldr	s14, [r7, #4]
 800c6a8:	edd7 6a02 	vldr	s13, [r7, #8]
 800c6ac:	4b3e      	ldr	r3, [pc, #248]	; (800c7a8 <set+0x374>)
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	4b3e      	ldr	r3, [pc, #248]	; (800c7ac <set+0x378>)
 800c6b2:	4a3f      	ldr	r2, [pc, #252]	; (800c7b0 <set+0x37c>)
 800c6b4:	4923      	ldr	r1, [pc, #140]	; (800c744 <set+0x310>)
 800c6b6:	483f      	ldr	r0, [pc, #252]	; (800c7b4 <set+0x380>)
 800c6b8:	eef0 1a66 	vmov.f32	s3, s13
 800c6bc:	eeb0 1a47 	vmov.f32	s2, s14
 800c6c0:	eef0 0a67 	vmov.f32	s1, s15
 800c6c4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800c770 <set+0x33c>
 800c6c8:	f7f4 fc90 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800c6cc:	4836      	ldr	r0, [pc, #216]	; (800c7a8 <set+0x374>)
 800c6ce:	f7f4 fcba 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800c6d2:	4939      	ldr	r1, [pc, #228]	; (800c7b8 <set+0x384>)
 800c6d4:	206f      	movs	r0, #111	; 0x6f
 800c6d6:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800c7bc <set+0x388>
 800c6da:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800c6de:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c7c0 <set+0x38c>
 800c6e2:	f002 fda3 	bl	800f22c <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800c6e6:	4937      	ldr	r1, [pc, #220]	; (800c7c4 <set+0x390>)
 800c6e8:	2070      	movs	r0, #112	; 0x70
 800c6ea:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800c7bc <set+0x388>
 800c6ee:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800c6f2:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800c7c0 <set+0x38c>
 800c6f6:	f002 fd99 	bl	800f22c <VESCInit>
}
 800c6fa:	bf00      	nop
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	20006bb8 	.word	0x20006bb8
 800c708:	2000a244 	.word	0x2000a244
 800c70c:	20005ef4 	.word	0x20005ef4
 800c710:	3dcccccd 	.word	0x3dcccccd
 800c714:	200091a8 	.word	0x200091a8
 800c718:	20005ff8 	.word	0x20005ff8
 800c71c:	2000a160 	.word	0x2000a160
 800c720:	40020400 	.word	0x40020400
 800c724:	20005ca8 	.word	0x20005ca8
 800c728:	200079e0 	.word	0x200079e0
 800c72c:	2000a5e8 	.word	0x2000a5e8
 800c730:	20009600 	.word	0x20009600
 800c734:	2000a2c0 	.word	0x2000a2c0
 800c738:	20007730 	.word	0x20007730
 800c73c:	20006d4c 	.word	0x20006d4c
 800c740:	20009b94 	.word	0x20009b94
 800c744:	20009a30 	.word	0x20009a30
 800c748:	20009bdc 	.word	0x20009bdc
 800c74c:	c3340000 	.word	0xc3340000
 800c750:	3e4ccccd 	.word	0x3e4ccccd
 800c754:	3d4ccccd 	.word	0x3d4ccccd
 800c758:	20005bc4 	.word	0x20005bc4
 800c75c:	20006c98 	.word	0x20006c98
 800c760:	20009a38 	.word	0x20009a38
 800c764:	2000746c 	.word	0x2000746c
 800c768:	200064f8 	.word	0x200064f8
 800c76c:	20000000 	.word	0x20000000
 800c770:	3ba3d70a 	.word	0x3ba3d70a
 800c774:	20009028 	.word	0x20009028
 800c778:	200068ac 	.word	0x200068ac
 800c77c:	2000a240 	.word	0x2000a240
 800c780:	20000038 	.word	0x20000038
 800c784:	2000a188 	.word	0x2000a188
 800c788:	20006b30 	.word	0x20006b30
 800c78c:	20009fdc 	.word	0x20009fdc
 800c790:	2000001c 	.word	0x2000001c
 800c794:	08024fe4 	.word	0x08024fe4
 800c798:	2000a544 	.word	0x2000a544
 800c79c:	20006660 	.word	0x20006660
 800c7a0:	20009a94 	.word	0x20009a94
 800c7a4:	20006944 	.word	0x20006944
 800c7a8:	20007948 	.word	0x20007948
 800c7ac:	20007328 	.word	0x20007328
 800c7b0:	20006c0c 	.word	0x20006c0c
 800c7b4:	2000a568 	.word	0x2000a568
 800c7b8:	20006b34 	.word	0x20006b34
 800c7bc:	3e19999a 	.word	0x3e19999a
 800c7c0:	4708b800 	.word	0x4708b800
 800c7c4:	20009ba4 	.word	0x20009ba4

0800c7c8 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af06      	add	r7, sp, #24
 800c7ce:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800c7d0:	49a9      	ldr	r1, [pc, #676]	; (800ca78 <RNS_config+0x2b0>)
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7fe fb14 	bl	800ae00 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b1000000100, (float) fwd_omni,
 800c7d8:	f04f 0200 	mov.w	r2, #0
 800c7dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7e4:	f04f 0200 	mov.w	r2, #0
 800c7e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7ec:	e9cd 2300 	strd	r2, r3, [sp]
 800c7f0:	f04f 0200 	mov.w	r2, #0
 800c7f4:	4ba1      	ldr	r3, [pc, #644]	; (800ca7c <RNS_config+0x2b4>)
 800c7f6:	2129      	movs	r1, #41	; 0x29
 800c7f8:	489f      	ldr	r0, [pc, #636]	; (800ca78 <RNS_config+0x2b0>)
 800c7fa:	f7fe fc7f 	bl	800b0fc <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800c7fe:	f04f 0200 	mov.w	r2, #0
 800c802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c806:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c80a:	a37d      	add	r3, pc, #500	; (adr r3, 800ca00 <RNS_config+0x238>)
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c814:	f04f 0200 	mov.w	r2, #0
 800c818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c81c:	e9cd 2300 	strd	r2, r3, [sp]
 800c820:	a377      	add	r3, pc, #476	; (adr r3, 800ca00 <RNS_config+0x238>)
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c826:	214e      	movs	r1, #78	; 0x4e
 800c828:	4893      	ldr	r0, [pc, #588]	; (800ca78 <RNS_config+0x2b0>)
 800c82a:	f7fe fc67 	bl	800b0fc <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800c82e:	a376      	add	r3, pc, #472	; (adr r3, 800ca08 <RNS_config+0x240>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	e9cd 2300 	strd	r2, r3, [sp]
 800c838:	a375      	add	r3, pc, #468	; (adr r3, 800ca10 <RNS_config+0x248>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	2124      	movs	r1, #36	; 0x24
 800c840:	488d      	ldr	r0, [pc, #564]	; (800ca78 <RNS_config+0x2b0>)
 800c842:	f7fe fc5b 	bl	800b0fc <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800c846:	a374      	add	r3, pc, #464	; (adr r3, 800ca18 <RNS_config+0x250>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	e9cd 2300 	strd	r2, r3, [sp]
 800c850:	a373      	add	r3, pc, #460	; (adr r3, 800ca20 <RNS_config+0x258>)
 800c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c856:	2125      	movs	r1, #37	; 0x25
 800c858:	4887      	ldr	r0, [pc, #540]	; (800ca78 <RNS_config+0x2b0>)
 800c85a:	f7fe fc4f 	bl	800b0fc <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800c85e:	a372      	add	r3, pc, #456	; (adr r3, 800ca28 <RNS_config+0x260>)
 800c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c868:	a371      	add	r3, pc, #452	; (adr r3, 800ca30 <RNS_config+0x268>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	e9cd 2300 	strd	r2, r3, [sp]
 800c872:	f04f 0200 	mov.w	r2, #0
 800c876:	4b82      	ldr	r3, [pc, #520]	; (800ca80 <RNS_config+0x2b8>)
 800c878:	2130      	movs	r1, #48	; 0x30
 800c87a:	487f      	ldr	r0, [pc, #508]	; (800ca78 <RNS_config+0x2b0>)
 800c87c:	f7fe fc3e 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800c880:	a369      	add	r3, pc, #420	; (adr r3, 800ca28 <RNS_config+0x260>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c88a:	a36b      	add	r3, pc, #428	; (adr r3, 800ca38 <RNS_config+0x270>)
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	e9cd 2300 	strd	r2, r3, [sp]
 800c894:	f04f 0200 	mov.w	r2, #0
 800c898:	4b79      	ldr	r3, [pc, #484]	; (800ca80 <RNS_config+0x2b8>)
 800c89a:	2131      	movs	r1, #49	; 0x31
 800c89c:	4876      	ldr	r0, [pc, #472]	; (800ca78 <RNS_config+0x2b0>)
 800c89e:	f7fe fc2d 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800c8a2:	a361      	add	r3, pc, #388	; (adr r3, 800ca28 <RNS_config+0x260>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8ac:	a364      	add	r3, pc, #400	; (adr r3, 800ca40 <RNS_config+0x278>)
 800c8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b2:	e9cd 2300 	strd	r2, r3, [sp]
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	4b71      	ldr	r3, [pc, #452]	; (800ca80 <RNS_config+0x2b8>)
 800c8bc:	2132      	movs	r1, #50	; 0x32
 800c8be:	486e      	ldr	r0, [pc, #440]	; (800ca78 <RNS_config+0x2b0>)
 800c8c0:	f7fe fc1c 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800c8c4:	a358      	add	r3, pc, #352	; (adr r3, 800ca28 <RNS_config+0x260>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8ce:	a35e      	add	r3, pc, #376	; (adr r3, 800ca48 <RNS_config+0x280>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	e9cd 2300 	strd	r2, r3, [sp]
 800c8d8:	f04f 0200 	mov.w	r2, #0
 800c8dc:	4b68      	ldr	r3, [pc, #416]	; (800ca80 <RNS_config+0x2b8>)
 800c8de:	2133      	movs	r1, #51	; 0x33
 800c8e0:	4865      	ldr	r0, [pc, #404]	; (800ca78 <RNS_config+0x2b0>)
 800c8e2:	f7fe fc0b 	bl	800b0fc <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c8e6:	a35a      	add	r3, pc, #360	; (adr r3, 800ca50 <RNS_config+0x288>)
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8f0:	f04f 0200 	mov.w	r2, #0
 800c8f4:	4b63      	ldr	r3, [pc, #396]	; (800ca84 <RNS_config+0x2bc>)
 800c8f6:	e9cd 2300 	strd	r2, r3, [sp]
 800c8fa:	f04f 0200 	mov.w	r2, #0
 800c8fe:	4b60      	ldr	r3, [pc, #384]	; (800ca80 <RNS_config+0x2b8>)
 800c900:	2134      	movs	r1, #52	; 0x34
 800c902:	485d      	ldr	r0, [pc, #372]	; (800ca78 <RNS_config+0x2b0>)
 800c904:	f7fe fbfa 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c908:	a351      	add	r3, pc, #324	; (adr r3, 800ca50 <RNS_config+0x288>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	4b5b      	ldr	r3, [pc, #364]	; (800ca84 <RNS_config+0x2bc>)
 800c918:	e9cd 2300 	strd	r2, r3, [sp]
 800c91c:	f04f 0200 	mov.w	r2, #0
 800c920:	4b57      	ldr	r3, [pc, #348]	; (800ca80 <RNS_config+0x2b8>)
 800c922:	2135      	movs	r1, #53	; 0x35
 800c924:	4854      	ldr	r0, [pc, #336]	; (800ca78 <RNS_config+0x2b0>)
 800c926:	f7fe fbe9 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c92a:	a349      	add	r3, pc, #292	; (adr r3, 800ca50 <RNS_config+0x288>)
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c934:	f04f 0200 	mov.w	r2, #0
 800c938:	4b52      	ldr	r3, [pc, #328]	; (800ca84 <RNS_config+0x2bc>)
 800c93a:	e9cd 2300 	strd	r2, r3, [sp]
 800c93e:	f04f 0200 	mov.w	r2, #0
 800c942:	4b4f      	ldr	r3, [pc, #316]	; (800ca80 <RNS_config+0x2b8>)
 800c944:	2136      	movs	r1, #54	; 0x36
 800c946:	484c      	ldr	r0, [pc, #304]	; (800ca78 <RNS_config+0x2b0>)
 800c948:	f7fe fbd8 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c94c:	a340      	add	r3, pc, #256	; (adr r3, 800ca50 <RNS_config+0x288>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c956:	f04f 0200 	mov.w	r2, #0
 800c95a:	4b4a      	ldr	r3, [pc, #296]	; (800ca84 <RNS_config+0x2bc>)
 800c95c:	e9cd 2300 	strd	r2, r3, [sp]
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	4b46      	ldr	r3, [pc, #280]	; (800ca80 <RNS_config+0x2b8>)
 800c966:	2137      	movs	r1, #55	; 0x37
 800c968:	4843      	ldr	r0, [pc, #268]	; (800ca78 <RNS_config+0x2b0>)
 800c96a:	f7fe fbc7 	bl	800b0fc <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800c96e:	211b      	movs	r1, #27
 800c970:	4841      	ldr	r0, [pc, #260]	; (800ca78 <RNS_config+0x2b0>)
 800c972:	f7fe fbc3 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	4b43      	ldr	r3, [pc, #268]	; (800ca88 <RNS_config+0x2c0>)
 800c97c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c980:	f04f 0200 	mov.w	r2, #0
 800c984:	4b40      	ldr	r3, [pc, #256]	; (800ca88 <RNS_config+0x2c0>)
 800c986:	e9cd 2300 	strd	r2, r3, [sp]
 800c98a:	f04f 0200 	mov.w	r2, #0
 800c98e:	4b3c      	ldr	r3, [pc, #240]	; (800ca80 <RNS_config+0x2b8>)
 800c990:	214b      	movs	r1, #75	; 0x4b
 800c992:	4839      	ldr	r0, [pc, #228]	; (800ca78 <RNS_config+0x2b0>)
 800c994:	f7fe fbb2 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800c998:	a32f      	add	r3, pc, #188	; (adr r3, 800ca58 <RNS_config+0x290>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9a2:	a32f      	add	r3, pc, #188	; (adr r3, 800ca60 <RNS_config+0x298>)
 800c9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a8:	e9cd 2300 	strd	r2, r3, [sp]
 800c9ac:	f04f 0200 	mov.w	r2, #0
 800c9b0:	4b35      	ldr	r3, [pc, #212]	; (800ca88 <RNS_config+0x2c0>)
 800c9b2:	214c      	movs	r1, #76	; 0x4c
 800c9b4:	4830      	ldr	r0, [pc, #192]	; (800ca78 <RNS_config+0x2b0>)
 800c9b6:	f7fe fba1 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 8.5);
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	4b33      	ldr	r3, [pc, #204]	; (800ca8c <RNS_config+0x2c4>)
 800c9c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9c4:	a328      	add	r3, pc, #160	; (adr r3, 800ca68 <RNS_config+0x2a0>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9ce:	a328      	add	r3, pc, #160	; (adr r3, 800ca70 <RNS_config+0x2a8>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	e9cd 2300 	strd	r2, r3, [sp]
 800c9d8:	f04f 0200 	mov.w	r2, #0
 800c9dc:	4b2a      	ldr	r3, [pc, #168]	; (800ca88 <RNS_config+0x2c0>)
 800c9de:	2154      	movs	r1, #84	; 0x54
 800c9e0:	4825      	ldr	r0, [pc, #148]	; (800ca78 <RNS_config+0x2b0>)
 800c9e2:	f7fe fb8b 	bl	800b0fc <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800c9e6:	f04f 0200 	mov.w	r2, #0
 800c9ea:	4b29      	ldr	r3, [pc, #164]	; (800ca90 <RNS_config+0x2c8>)
 800c9ec:	2122      	movs	r1, #34	; 0x22
 800c9ee:	4822      	ldr	r0, [pc, #136]	; (800ca78 <RNS_config+0x2b0>)
 800c9f0:	f7fe fb84 	bl	800b0fc <RNSSet>
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	f3af 8000 	nop.w
 800ca00:	b9727cf5 	.word	0xb9727cf5
 800ca04:	3f049766 	.word	0x3f049766
 800ca08:	a0000000 	.word	0xa0000000
 800ca0c:	3f564e14 	.word	0x3f564e14
 800ca10:	d7a1868c 	.word	0xd7a1868c
 800ca14:	3ff1f604 	.word	0x3ff1f604
 800ca18:	00000000 	.word	0x00000000
 800ca1c:	3f58fd94 	.word	0x3f58fd94
 800ca20:	7c2c0ed1 	.word	0x7c2c0ed1
 800ca24:	3ff00652 	.word	0x3ff00652
 800ca28:	00000000 	.word	0x00000000
 800ca2c:	40d387c0 	.word	0x40d387c0
 800ca30:	6b29aca7 	.word	0x6b29aca7
 800ca34:	3fc29aca 	.word	0x3fc29aca
 800ca38:	dd1e2705 	.word	0xdd1e2705
 800ca3c:	3fbd8faa 	.word	0x3fbd8faa
 800ca40:	b34c0e3d 	.word	0xb34c0e3d
 800ca44:	3fc02e9a 	.word	0x3fc02e9a
 800ca48:	21d938da 	.word	0x21d938da
 800ca4c:	3fc06e6b 	.word	0x3fc06e6b
 800ca50:	d2f1a9fc 	.word	0xd2f1a9fc
 800ca54:	3f50624d 	.word	0x3f50624d
 800ca58:	66666666 	.word	0x66666666
 800ca5c:	3fe66666 	.word	0x3fe66666
 800ca60:	9999999a 	.word	0x9999999a
 800ca64:	3fb99999 	.word	0x3fb99999
 800ca68:	9999999a 	.word	0x9999999a
 800ca6c:	3fc99999 	.word	0x3fc99999
 800ca70:	9999999a 	.word	0x9999999a
 800ca74:	3fa99999 	.word	0x3fa99999
 800ca78:	2000907c 	.word	0x2000907c
 800ca7c:	40802000 	.word	0x40802000
 800ca80:	3ff00000 	.word	0x3ff00000
 800ca84:	3ff80000 	.word	0x3ff80000
 800ca88:	3fe00000 	.word	0x3fe00000
 800ca8c:	40210000 	.word	0x40210000
 800ca90:	40240000 	.word	0x40240000

0800ca94 <RobotStart>:
	}

}

void RobotStart()
{
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
	before = 0;
 800ca98:	4b4a      	ldr	r3, [pc, #296]	; (800cbc4 <RobotStart+0x130>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]
	mode = 1;
 800ca9e:	4b4a      	ldr	r3, [pc, #296]	; (800cbc8 <RobotStart+0x134>)
 800caa0:	2201      	movs	r2, #1
 800caa2:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800caa4:	4b49      	ldr	r3, [pc, #292]	; (800cbcc <RobotStart+0x138>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800caaa:	4b49      	ldr	r3, [pc, #292]	; (800cbd0 <RobotStart+0x13c>)
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800cab0:	4b48      	ldr	r3, [pc, #288]	; (800cbd4 <RobotStart+0x140>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800cab6:	4b48      	ldr	r3, [pc, #288]	; (800cbd8 <RobotStart+0x144>)
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800cabc:	4b47      	ldr	r3, [pc, #284]	; (800cbdc <RobotStart+0x148>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
	blue = 1;
 800cac2:	4b47      	ldr	r3, [pc, #284]	; (800cbe0 <RobotStart+0x14c>)
 800cac4:	2201      	movs	r2, #1
 800cac6:	601a      	str	r2, [r3, #0]
	set_pitch = 0;
 800cac8:	4b46      	ldr	r3, [pc, #280]	; (800cbe4 <RobotStart+0x150>)
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800cace:	4b46      	ldr	r3, [pc, #280]	; (800cbe8 <RobotStart+0x154>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800cad4:	4b45      	ldr	r3, [pc, #276]	; (800cbec <RobotStart+0x158>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800cada:	4a45      	ldr	r2, [pc, #276]	; (800cbf0 <RobotStart+0x15c>)
 800cadc:	7f13      	ldrb	r3, [r2, #28]
 800cade:	f36f 1386 	bfc	r3, #6, #1
 800cae2:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800cae4:	4b43      	ldr	r3, [pc, #268]	; (800cbf4 <RobotStart+0x160>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	601a      	str	r2, [r3, #0]
	stop_adjust = 0;
 800caea:	4b43      	ldr	r3, [pc, #268]	; (800cbf8 <RobotStart+0x164>)
 800caec:	2200      	movs	r2, #0
 800caee:	601a      	str	r2, [r3, #0]
	up_done = 0;
 800caf0:	4b42      	ldr	r3, [pc, #264]	; (800cbfc <RobotStart+0x168>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	601a      	str	r2, [r3, #0]
	servo_enb = 0;
 800caf6:	4b42      	ldr	r3, [pc, #264]	; (800cc00 <RobotStart+0x16c>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800cafc:	4b41      	ldr	r3, [pc, #260]	; (800cc04 <RobotStart+0x170>)
 800cafe:	2264      	movs	r2, #100	; 0x64
 800cb00:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800cb02:	4b41      	ldr	r3, [pc, #260]	; (800cc08 <RobotStart+0x174>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	601a      	str	r2, [r3, #0]
	reload = 0;
 800cb08:	4b40      	ldr	r3, [pc, #256]	; (800cc0c <RobotStart+0x178>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800cb0e:	4b40      	ldr	r3, [pc, #256]	; (800cc10 <RobotStart+0x17c>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800cb14:	4b3f      	ldr	r3, [pc, #252]	; (800cc14 <RobotStart+0x180>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800cb1a:	4b3f      	ldr	r3, [pc, #252]	; (800cc18 <RobotStart+0x184>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
	must_load = 0;
 800cb20:	4b3e      	ldr	r3, [pc, #248]	; (800cc1c <RobotStart+0x188>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800cb26:	4b3e      	ldr	r3, [pc, #248]	; (800cc20 <RobotStart+0x18c>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800cb2c:	4b3d      	ldr	r3, [pc, #244]	; (800cc24 <RobotStart+0x190>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
	led_enb = 0;
 800cb32:	4b3d      	ldr	r3, [pc, #244]	; (800cc28 <RobotStart+0x194>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]
	pick_enc_buf = 0;
 800cb38:	4b3c      	ldr	r3, [pc, #240]	; (800cc2c <RobotStart+0x198>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	601a      	str	r2, [r3, #0]
	vesc_speed = 0;
 800cb3e:	4b3c      	ldr	r3, [pc, #240]	; (800cc30 <RobotStart+0x19c>)
 800cb40:	f04f 0200 	mov.w	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
	stick_fence = 0;
 800cb46:	4b3b      	ldr	r3, [pc, #236]	; (800cc34 <RobotStart+0x1a0>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
	vesc_start = 0;
 800cb4c:	4b3a      	ldr	r3, [pc, #232]	; (800cc38 <RobotStart+0x1a4>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	601a      	str	r2, [r3, #0]
	pick_left_manual = 0;
 800cb52:	4b3a      	ldr	r3, [pc, #232]	; (800cc3c <RobotStart+0x1a8>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	601a      	str	r2, [r3, #0]
	load_adjust = 1;
 800cb58:	4b39      	ldr	r3, [pc, #228]	; (800cc40 <RobotStart+0x1ac>)
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]
	shooted = 0;
 800cb5e:	4b39      	ldr	r3, [pc, #228]	; (800cc44 <RobotStart+0x1b0>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	601a      	str	r2, [r3, #0]
	adjust_count = 0;
 800cb64:	4b38      	ldr	r3, [pc, #224]	; (800cc48 <RobotStart+0x1b4>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	601a      	str	r2, [r3, #0]
	type_3_done = 0;
 800cb6a:	4b38      	ldr	r3, [pc, #224]	; (800cc4c <RobotStart+0x1b8>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	601a      	str	r2, [r3, #0]
	go_type_3 = 0;
 800cb70:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <RobotStart+0x1bc>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	601a      	str	r2, [r3, #0]
	pick_0 = 0;
 800cb76:	4b37      	ldr	r3, [pc, #220]	; (800cc54 <RobotStart+0x1c0>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]
	cylinder_load_once = 0;
 800cb7c:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <RobotStart+0x1c4>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	601a      	str	r2, [r3, #0]
	pick_right_enb = 1;
 800cb82:	4b36      	ldr	r3, [pc, #216]	; (800cc5c <RobotStart+0x1c8>)
 800cb84:	2201      	movs	r2, #1
 800cb86:	601a      	str	r2, [r3, #0]
	shot_count = 0;
 800cb88:	4b35      	ldr	r3, [pc, #212]	; (800cc60 <RobotStart+0x1cc>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
	manual_adjust = 0;
 800cb8e:	4b35      	ldr	r3, [pc, #212]	; (800cc64 <RobotStart+0x1d0>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	601a      	str	r2, [r3, #0]
	extra_rpm = 0;
 800cb94:	4b34      	ldr	r3, [pc, #208]	; (800cc68 <RobotStart+0x1d4>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	601a      	str	r2, [r3, #0]

	// Parameters
	RedPickLess = 60;
 800cb9a:	4b34      	ldr	r3, [pc, #208]	; (800cc6c <RobotStart+0x1d8>)
 800cb9c:	223c      	movs	r2, #60	; 0x3c
 800cb9e:	601a      	str	r2, [r3, #0]
	BluePickLess = 60;
 800cba0:	4b33      	ldr	r3, [pc, #204]	; (800cc70 <RobotStart+0x1dc>)
 800cba2:	223c      	movs	r2, #60	; 0x3c
 800cba4:	601a      	str	r2, [r3, #0]
	RedPickMore = 0;
 800cba6:	4b33      	ldr	r3, [pc, #204]	; (800cc74 <RobotStart+0x1e0>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]
	vesc_extra = 0.0;
 800cbac:	4b32      	ldr	r3, [pc, #200]	; (800cc78 <RobotStart+0x1e4>)
 800cbae:	f04f 0200 	mov.w	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
	BluePickMore = 0;
 800cbb4:	4b31      	ldr	r3, [pc, #196]	; (800cc7c <RobotStart+0x1e8>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
}
 800cbba:	bf00      	nop
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	200073b8 	.word	0x200073b8
 800cbc8:	20009458 	.word	0x20009458
 800cbcc:	20009a90 	.word	0x20009a90
 800cbd0:	200090f0 	.word	0x200090f0
 800cbd4:	20009454 	.word	0x20009454
 800cbd8:	200079cc 	.word	0x200079cc
 800cbdc:	2000989a 	.word	0x2000989a
 800cbe0:	20006a4c 	.word	0x20006a4c
 800cbe4:	20009880 	.word	0x20009880
 800cbe8:	20009a24 	.word	0x20009a24
 800cbec:	20007330 	.word	0x20007330
 800cbf0:	200097dc 	.word	0x200097dc
 800cbf4:	200078a4 	.word	0x200078a4
 800cbf8:	20006508 	.word	0x20006508
 800cbfc:	200079d4 	.word	0x200079d4
 800cc00:	2000a7e8 	.word	0x2000a7e8
 800cc04:	200073d0 	.word	0x200073d0
 800cc08:	2000919c 	.word	0x2000919c
 800cc0c:	200078c0 	.word	0x200078c0
 800cc10:	20009ba0 	.word	0x20009ba0
 800cc14:	20007464 	.word	0x20007464
 800cc18:	200075a4 	.word	0x200075a4
 800cc1c:	2000988c 	.word	0x2000988c
 800cc20:	200064fc 	.word	0x200064fc
 800cc24:	200095b0 	.word	0x200095b0
 800cc28:	2000a858 	.word	0x2000a858
 800cc2c:	20009e6c 	.word	0x20009e6c
 800cc30:	200065c0 	.word	0x200065c0
 800cc34:	200073d8 	.word	0x200073d8
 800cc38:	20006a50 	.word	0x20006a50
 800cc3c:	20009bd0 	.word	0x20009bd0
 800cc40:	200095c4 	.word	0x200095c4
 800cc44:	2000a7a0 	.word	0x2000a7a0
 800cc48:	20009650 	.word	0x20009650
 800cc4c:	200095bc 	.word	0x200095bc
 800cc50:	20006d48 	.word	0x20006d48
 800cc54:	20009fc0 	.word	0x20009fc0
 800cc58:	2000a7e4 	.word	0x2000a7e4
 800cc5c:	20009d38 	.word	0x20009d38
 800cc60:	200068e0 	.word	0x200068e0
 800cc64:	200075a0 	.word	0x200075a0
 800cc68:	20006664 	.word	0x20006664
 800cc6c:	2000a534 	.word	0x2000a534
 800cc70:	2000665c 	.word	0x2000665c
 800cc74:	2000a7c8 	.word	0x2000a7c8
 800cc78:	20009ef4 	.word	0x20009ef4
 800cc7c:	2000a60c 	.word	0x2000a60c

0800cc80 <NormalControl>:

void NormalControl()
{
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b096      	sub	sp, #88	; 0x58
 800cc84:	af00      	add	r7, sp, #0
	// Cylinder
	if (ps4.button == OPTION)
 800cc86:	4b94      	ldr	r3, [pc, #592]	; (800ced8 <NormalControl+0x258>)
 800cc88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc8e:	d10a      	bne.n	800cca6 <NormalControl+0x26>
	{
		while (ps4.button == OPTION);
 800cc90:	bf00      	nop
 800cc92:	4b91      	ldr	r3, [pc, #580]	; (800ced8 <NormalControl+0x258>)
 800cc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc9a:	d0fa      	beq.n	800cc92 <NormalControl+0x12>
		ResetPickEnc();
 800cc9c:	f001 f984 	bl	800dfa8 <ResetPickEnc>
		mode = AUTO;
 800cca0:	4b8e      	ldr	r3, [pc, #568]	; (800cedc <NormalControl+0x25c>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	601a      	str	r2, [r3, #0]
//		pick_0 = 1;
//		pick_down;
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800cca6:	4b8c      	ldr	r3, [pc, #560]	; (800ced8 <NormalControl+0x258>)
 800cca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccae:	d11e      	bne.n	800ccee <NormalControl+0x6e>
	{
		while (ps4.button == TRIANGLE);
 800ccb0:	bf00      	nop
 800ccb2:	4b89      	ldr	r3, [pc, #548]	; (800ced8 <NormalControl+0x258>)
 800ccb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccba:	d0fa      	beq.n	800ccb2 <NormalControl+0x32>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		ResetCoordinate();
 800ccbc:	f001 f962 	bl	800df84 <ResetCoordinate>
		lidar.pos = POS_PENDING;
 800ccc0:	4b87      	ldr	r3, [pc, #540]	; (800cee0 <NormalControl+0x260>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = POS_PENDING;
 800ccc8:	4b85      	ldr	r3, [pc, #532]	; (800cee0 <NormalControl+0x260>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		pick_right = 1;
 800ccd0:	4b84      	ldr	r3, [pc, #528]	; (800cee4 <NormalControl+0x264>)
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	601a      	str	r2, [r3, #0]
		vesc_speed = 4;
 800ccd6:	4b84      	ldr	r3, [pc, #528]	; (800cee8 <NormalControl+0x268>)
 800ccd8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800ccdc:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800ccde:	4a83      	ldr	r2, [pc, #524]	; (800ceec <NormalControl+0x26c>)
 800cce0:	7f13      	ldrb	r3, [r2, #28]
 800cce2:	f36f 1386 	bfc	r3, #6, #1
 800cce6:	7713      	strb	r3, [r2, #28]
		mode = AUTO;
 800cce8:	4b7c      	ldr	r3, [pc, #496]	; (800cedc <NormalControl+0x25c>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	601a      	str	r2, [r3, #0]
	}

	// mode
	if(ps4.button == SQUARE)
 800ccee:	4b7a      	ldr	r3, [pc, #488]	; (800ced8 <NormalControl+0x258>)
 800ccf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccf6:	d123      	bne.n	800cd40 <NormalControl+0xc0>
	{
		while(ps4.button == SQUARE);
 800ccf8:	bf00      	nop
 800ccfa:	4b77      	ldr	r3, [pc, #476]	; (800ced8 <NormalControl+0x258>)
 800ccfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd02:	d0fa      	beq.n	800ccfa <NormalControl+0x7a>
		if(!pp.pp_start)
 800cd04:	4b7a      	ldr	r3, [pc, #488]	; (800cef0 <NormalControl+0x270>)
 800cd06:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800cd0a:	f003 0301 	and.w	r3, r3, #1
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d112      	bne.n	800cd3a <NormalControl+0xba>
		{
			static int counter = 0;

			if(counter == 0)
 800cd14:	4b77      	ldr	r3, [pc, #476]	; (800cef4 <NormalControl+0x274>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d108      	bne.n	800cd2e <NormalControl+0xae>
			{
				counter++;
 800cd1c:	4b75      	ldr	r3, [pc, #468]	; (800cef4 <NormalControl+0x274>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3301      	adds	r3, #1
 800cd22:	4a74      	ldr	r2, [pc, #464]	; (800cef4 <NormalControl+0x274>)
 800cd24:	6013      	str	r3, [r2, #0]
				blue = 0;
 800cd26:	4b74      	ldr	r3, [pc, #464]	; (800cef8 <NormalControl+0x278>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]
 800cd2c:	e005      	b.n	800cd3a <NormalControl+0xba>
			}
			else
			{
				blue = 1;
 800cd2e:	4b72      	ldr	r3, [pc, #456]	; (800cef8 <NormalControl+0x278>)
 800cd30:	2201      	movs	r2, #1
 800cd32:	601a      	str	r2, [r3, #0]
				counter = 0;
 800cd34:	4b6f      	ldr	r3, [pc, #444]	; (800cef4 <NormalControl+0x274>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	601a      	str	r2, [r3, #0]
			}
		}
		mode = AUTO;
 800cd3a:	4b68      	ldr	r3, [pc, #416]	; (800cedc <NormalControl+0x25c>)
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800cd40:	4b65      	ldr	r3, [pc, #404]	; (800ced8 <NormalControl+0x258>)
 800cd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd44:	2b10      	cmp	r3, #16
 800cd46:	d115      	bne.n	800cd74 <NormalControl+0xf4>
	{
		while(ps4.button == UP);
 800cd48:	bf00      	nop
 800cd4a:	4b63      	ldr	r3, [pc, #396]	; (800ced8 <NormalControl+0x258>)
 800cd4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd4e:	2b10      	cmp	r3, #16
 800cd50:	d0fb      	beq.n	800cd4a <NormalControl+0xca>

		if(!lidar.autoshot)
 800cd52:	4b63      	ldr	r3, [pc, #396]	; (800cee0 <NormalControl+0x260>)
 800cd54:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d104      	bne.n	800cd66 <NormalControl+0xe6>
			lidar.autoshot = 1;
 800cd5c:	4b60      	ldr	r3, [pc, #384]	; (800cee0 <NormalControl+0x260>)
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 800cd64:	e003      	b.n	800cd6e <NormalControl+0xee>
		else
			lidar.autoshot = 0;
 800cd66:	4b5e      	ldr	r3, [pc, #376]	; (800cee0 <NormalControl+0x260>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

		mode = AUTO;
 800cd6e:	4b5b      	ldr	r3, [pc, #364]	; (800cedc <NormalControl+0x25c>)
 800cd70:	2201      	movs	r2, #1
 800cd72:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == CROSS)
 800cd74:	4b58      	ldr	r3, [pc, #352]	; (800ced8 <NormalControl+0x258>)
 800cd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd7c:	d13d      	bne.n	800cdfa <NormalControl+0x17a>
	{
		while(ps4.button == CROSS);
 800cd7e:	bf00      	nop
 800cd80:	4b55      	ldr	r3, [pc, #340]	; (800ced8 <NormalControl+0x258>)
 800cd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd88:	d0fa      	beq.n	800cd80 <NormalControl+0x100>
		static int counter = 0;

		if(counter == 0)
 800cd8a:	4b5c      	ldr	r3, [pc, #368]	; (800cefc <NormalControl+0x27c>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d11b      	bne.n	800cdca <NormalControl+0x14a>
		{
			lidar.pos = CENTER_4;
 800cd92:	4b53      	ldr	r3, [pc, #332]	; (800cee0 <NormalControl+0x260>)
 800cd94:	2207      	movs	r2, #7
 800cd96:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_4;
 800cd9a:	4b51      	ldr	r3, [pc, #324]	; (800cee0 <NormalControl+0x260>)
 800cd9c:	2207      	movs	r2, #7
 800cd9e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			vesc_duty = type1Duty;
 800cda2:	4b57      	ldr	r3, [pc, #348]	; (800cf00 <NormalControl+0x280>)
 800cda4:	4a57      	ldr	r2, [pc, #348]	; (800cf04 <NormalControl+0x284>)
 800cda6:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800cda8:	4b4f      	ldr	r3, [pc, #316]	; (800cee8 <NormalControl+0x268>)
 800cdaa:	4a57      	ldr	r2, [pc, #348]	; (800cf08 <NormalControl+0x288>)
 800cdac:	601a      	str	r2, [r3, #0]
			led7_on;
 800cdae:	4b57      	ldr	r3, [pc, #348]	; (800cf0c <NormalControl+0x28c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800cdb6:	63da      	str	r2, [r3, #60]	; 0x3c
			mode = AUTO;
 800cdb8:	4b48      	ldr	r3, [pc, #288]	; (800cedc <NormalControl+0x25c>)
 800cdba:	2201      	movs	r2, #1
 800cdbc:	601a      	str	r2, [r3, #0]
			counter++;
 800cdbe:	4b4f      	ldr	r3, [pc, #316]	; (800cefc <NormalControl+0x27c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	4a4d      	ldr	r2, [pc, #308]	; (800cefc <NormalControl+0x27c>)
 800cdc6:	6013      	str	r3, [r2, #0]
 800cdc8:	e017      	b.n	800cdfa <NormalControl+0x17a>
		}
		else
		{
			lidar.pos = CENTER_1;
 800cdca:	4b45      	ldr	r3, [pc, #276]	; (800cee0 <NormalControl+0x260>)
 800cdcc:	2203      	movs	r2, #3
 800cdce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_1;
 800cdd2:	4b43      	ldr	r3, [pc, #268]	; (800cee0 <NormalControl+0x260>)
 800cdd4:	2203      	movs	r2, #3
 800cdd6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			led7_off;
 800cdda:	4b4c      	ldr	r3, [pc, #304]	; (800cf0c <NormalControl+0x28c>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2200      	movs	r2, #0
 800cde0:	63da      	str	r2, [r3, #60]	; 0x3c
			vesc_speed = type1;
 800cde2:	4b41      	ldr	r3, [pc, #260]	; (800cee8 <NormalControl+0x268>)
 800cde4:	4a48      	ldr	r2, [pc, #288]	; (800cf08 <NormalControl+0x288>)
 800cde6:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800cde8:	4b45      	ldr	r3, [pc, #276]	; (800cf00 <NormalControl+0x280>)
 800cdea:	4a46      	ldr	r2, [pc, #280]	; (800cf04 <NormalControl+0x284>)
 800cdec:	601a      	str	r2, [r3, #0]
			mode = AUTO;
 800cdee:	4b3b      	ldr	r3, [pc, #236]	; (800cedc <NormalControl+0x25c>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	601a      	str	r2, [r3, #0]
			counter = 0;
 800cdf4:	4b41      	ldr	r3, [pc, #260]	; (800cefc <NormalControl+0x27c>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
		}
	}

	// Apply extra rpm
	if(ps4.button == CIRCLE)
 800cdfa:	4b37      	ldr	r3, [pc, #220]	; (800ced8 <NormalControl+0x258>)
 800cdfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce02:	d10f      	bne.n	800ce24 <NormalControl+0x1a4>
	{
		while(ps4.button == CIRCLE);
 800ce04:	bf00      	nop
 800ce06:	4b34      	ldr	r3, [pc, #208]	; (800ced8 <NormalControl+0x258>)
 800ce08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce0e:	d0fa      	beq.n	800ce06 <NormalControl+0x186>
		extra_rpm = manual_adjust * 5;
 800ce10:	4b3f      	ldr	r3, [pc, #252]	; (800cf10 <NormalControl+0x290>)
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	4613      	mov	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4413      	add	r3, r2
 800ce1a:	4a3e      	ldr	r2, [pc, #248]	; (800cf14 <NormalControl+0x294>)
 800ce1c:	6013      	str	r3, [r2, #0]

		mode = AUTO;
 800ce1e:	4b2f      	ldr	r3, [pc, #188]	; (800cedc <NormalControl+0x25c>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800ce24:	4b2c      	ldr	r3, [pc, #176]	; (800ced8 <NormalControl+0x258>)
 800ce26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce28:	2b20      	cmp	r3, #32
 800ce2a:	d125      	bne.n	800ce78 <NormalControl+0x1f8>
	{
		while(ps4.button == RIGHT);
 800ce2c:	bf00      	nop
 800ce2e:	4b2a      	ldr	r3, [pc, #168]	; (800ced8 <NormalControl+0x258>)
 800ce30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce32:	2b20      	cmp	r3, #32
 800ce34:	d0fb      	beq.n	800ce2e <NormalControl+0x1ae>
		static int counter = 0;
		counter++;
 800ce36:	4b38      	ldr	r3, [pc, #224]	; (800cf18 <NormalControl+0x298>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	4a36      	ldr	r2, [pc, #216]	; (800cf18 <NormalControl+0x298>)
 800ce3e:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800ce40:	4b35      	ldr	r3, [pc, #212]	; (800cf18 <NormalControl+0x298>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d10a      	bne.n	800ce5e <NormalControl+0x1de>
		{
			open_servo;
 800ce48:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800ce4c:	4833      	ldr	r0, [pc, #204]	; (800cf1c <NormalControl+0x29c>)
 800ce4e:	f7fe fcc7 	bl	800b7e0 <ServoSetPulse>
 800ce52:	f44f 7148 	mov.w	r1, #800	; 0x320
 800ce56:	4832      	ldr	r0, [pc, #200]	; (800cf20 <NormalControl+0x2a0>)
 800ce58:	f7fe fcc2 	bl	800b7e0 <ServoSetPulse>
 800ce5c:	e00c      	b.n	800ce78 <NormalControl+0x1f8>
		}
		else
		{
			close_servo;
 800ce5e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800ce62:	482e      	ldr	r0, [pc, #184]	; (800cf1c <NormalControl+0x29c>)
 800ce64:	f7fe fcbc 	bl	800b7e0 <ServoSetPulse>
 800ce68:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800ce6c:	482c      	ldr	r0, [pc, #176]	; (800cf20 <NormalControl+0x2a0>)
 800ce6e:	f7fe fcb7 	bl	800b7e0 <ServoSetPulse>
			counter = 0;
 800ce72:	4b29      	ldr	r3, [pc, #164]	; (800cf18 <NormalControl+0x298>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]
		}
//		LidarSendIns(NEAR, &lidar);
	}

	if(ps4.button == LEFT)
 800ce78:	4b17      	ldr	r3, [pc, #92]	; (800ced8 <NormalControl+0x258>)
 800ce7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce7c:	2b80      	cmp	r3, #128	; 0x80
 800ce7e:	f040 811e 	bne.w	800d0be <NormalControl+0x43e>
	{
		while(ps4.button == LEFT);
 800ce82:	bf00      	nop
 800ce84:	4b14      	ldr	r3, [pc, #80]	; (800ced8 <NormalControl+0x258>)
 800ce86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce88:	2b80      	cmp	r3, #128	; 0x80
 800ce8a:	d0fb      	beq.n	800ce84 <NormalControl+0x204>
//		else
//			pick_right = 1;

//		pick_left = 1;
//		pick_left_manual = 1;
		ResetCoordinate();
 800ce8c:	f001 f87a 	bl	800df84 <ResetCoordinate>
		lidar.pos = PICK_LEFT;
 800ce90:	4b13      	ldr	r3, [pc, #76]	; (800cee0 <NormalControl+0x260>)
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800ce98:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <NormalControl+0x260>)
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		cylinder_retract;
 800cea0:	4a12      	ldr	r2, [pc, #72]	; (800ceec <NormalControl+0x26c>)
 800cea2:	7f13      	ldrb	r3, [r2, #28]
 800cea4:	f36f 1386 	bfc	r3, #6, #1
 800cea8:	7713      	strb	r3, [r2, #28]
		vesc_speed = 4;
 800ceaa:	4b0f      	ldr	r3, [pc, #60]	; (800cee8 <NormalControl+0x268>)
 800ceac:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800ceb0:	601a      	str	r2, [r3, #0]
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800ceb2:	4b1c      	ldr	r3, [pc, #112]	; (800cf24 <NormalControl+0x2a4>)
 800ceb4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800ceb8:	461d      	mov	r5, r3
 800ceba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cebe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800cec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ceca:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <NormalControl+0x270>)
 800cecc:	2101      	movs	r1, #1
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f8 fec6 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 800ced4:	e049      	b.n	800cf6a <NormalControl+0x2ea>
 800ced6:	bf00      	nop
 800ced8:	2000a244 	.word	0x2000a244
 800cedc:	20009458 	.word	0x20009458
 800cee0:	200091a8 	.word	0x200091a8
 800cee4:	2000a89c 	.word	0x2000a89c
 800cee8:	200065c0 	.word	0x200065c0
 800ceec:	200097dc 	.word	0x200097dc
 800cef0:	20006d4c 	.word	0x20006d4c
 800cef4:	200002d8 	.word	0x200002d8
 800cef8:	20006a4c 	.word	0x20006a4c
 800cefc:	200002dc 	.word	0x200002dc
 800cf00:	2000749c 	.word	0x2000749c
 800cf04:	445e8000 	.word	0x445e8000
 800cf08:	406ccccd 	.word	0x406ccccd
 800cf0c:	20005ca8 	.word	0x20005ca8
 800cf10:	200075a0 	.word	0x200075a0
 800cf14:	20006664 	.word	0x20006664
 800cf18:	200002e0 	.word	0x200002e0
 800cf1c:	200079e0 	.word	0x200079e0
 800cf20:	2000a5e8 	.word	0x2000a5e8
 800cf24:	08024ff0 	.word	0x08024ff0
		{
			if(ps4.button == SQUARE)
 800cf28:	4b83      	ldr	r3, [pc, #524]	; (800d138 <NormalControl+0x4b8>)
 800cf2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf30:	d108      	bne.n	800cf44 <NormalControl+0x2c4>
			{
				while(ps4.button == SQUARE);
 800cf32:	bf00      	nop
 800cf34:	4b80      	ldr	r3, [pc, #512]	; (800d138 <NormalControl+0x4b8>)
 800cf36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf3c:	d0fa      	beq.n	800cf34 <NormalControl+0x2b4>
				PP_stop(&pp);
 800cf3e:	487f      	ldr	r0, [pc, #508]	; (800d13c <NormalControl+0x4bc>)
 800cf40:	f7f9 f9c6 	bl	80062d0 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800cf44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cf48:	487d      	ldr	r0, [pc, #500]	; (800d140 <NormalControl+0x4c0>)
 800cf4a:	f00a fc19 	bl	8017780 <HAL_GPIO_ReadPin>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d007      	beq.n	800cf64 <NormalControl+0x2e4>
 800cf54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cf58:	4879      	ldr	r0, [pc, #484]	; (800d140 <NormalControl+0x4c0>)
 800cf5a:	f00a fc11 	bl	8017780 <HAL_GPIO_ReadPin>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <NormalControl+0x2ea>
				PP_stop(&pp);
 800cf64:	4875      	ldr	r0, [pc, #468]	; (800d13c <NormalControl+0x4bc>)
 800cf66:	f7f9 f9b3 	bl	80062d0 <PP_stop>
		while(pp.pp_start)
 800cf6a:	4b74      	ldr	r3, [pc, #464]	; (800d13c <NormalControl+0x4bc>)
 800cf6c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1d6      	bne.n	800cf28 <NormalControl+0x2a8>
		}
		pick_left = 0;
 800cf7a:	4b72      	ldr	r3, [pc, #456]	; (800d144 <NormalControl+0x4c4>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800cf80:	4b71      	ldr	r3, [pc, #452]	; (800d148 <NormalControl+0x4c8>)
 800cf82:	2201      	movs	r2, #1
 800cf84:	601a      	str	r2, [r3, #0]

		setPick(0);
 800cf86:	2000      	movs	r0, #0
 800cf88:	f000 fb0c 	bl	800d5a4 <setPick>
		ResetCoordinate();
 800cf8c:	f000 fffa 	bl	800df84 <ResetCoordinate>

		float pick_left_point[1][7] = {{3.3, -10, -1.5, 0, 0, 0, 0}};
 800cf90:	4b6e      	ldr	r3, [pc, #440]	; (800d14c <NormalControl+0x4cc>)
 800cf92:	f107 0420 	add.w	r4, r7, #32
 800cf96:	461d      	mov	r5, r3
 800cf98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cfa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800cfa4:	f107 0320 	add.w	r3, r7, #32
 800cfa8:	4a64      	ldr	r2, [pc, #400]	; (800d13c <NormalControl+0x4bc>)
 800cfaa:	2101      	movs	r1, #1
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f8 fe57 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 800cfb2:	e039      	b.n	800d028 <NormalControl+0x3a8>
		{
			if(pp.real_x <= -0.3)
 800cfb4:	4b61      	ldr	r3, [pc, #388]	; (800d13c <NormalControl+0x4bc>)
 800cfb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f3 fac5 	bl	8000548 <__aeabi_f2d>
 800cfbe:	a35a      	add	r3, pc, #360	; (adr r3, 800d128 <NormalControl+0x4a8>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f7f3 fd94 	bl	8000af0 <__aeabi_dcmple>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d003      	beq.n	800cfd6 <NormalControl+0x356>
				pp.target_vel[0] = 0.45;
 800cfce:	4b5b      	ldr	r3, [pc, #364]	; (800d13c <NormalControl+0x4bc>)
 800cfd0:	4a5f      	ldr	r2, [pc, #380]	; (800d150 <NormalControl+0x4d0>)
 800cfd2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

			if(In_Pick && pp.real_x <= -0.4)
 800cfd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cfda:	485e      	ldr	r0, [pc, #376]	; (800d154 <NormalControl+0x4d4>)
 800cfdc:	f00a fbd0 	bl	8017780 <HAL_GPIO_ReadPin>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d10f      	bne.n	800d006 <NormalControl+0x386>
 800cfe6:	4b55      	ldr	r3, [pc, #340]	; (800d13c <NormalControl+0x4bc>)
 800cfe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f3 faac 	bl	8000548 <__aeabi_f2d>
 800cff0:	a34f      	add	r3, pc, #316	; (adr r3, 800d130 <NormalControl+0x4b0>)
 800cff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff6:	f7f3 fd7b 	bl	8000af0 <__aeabi_dcmple>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <NormalControl+0x386>
				PP_stop(&pp);
 800d000:	484e      	ldr	r0, [pc, #312]	; (800d13c <NormalControl+0x4bc>)
 800d002:	f7f9 f965 	bl	80062d0 <PP_stop>

			if(ps4.button == SQUARE)
 800d006:	4b4c      	ldr	r3, [pc, #304]	; (800d138 <NormalControl+0x4b8>)
 800d008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d00e:	d10b      	bne.n	800d028 <NormalControl+0x3a8>
			{
				while(ps4.button == SQUARE);
 800d010:	bf00      	nop
 800d012:	4b49      	ldr	r3, [pc, #292]	; (800d138 <NormalControl+0x4b8>)
 800d014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d01a:	d0fa      	beq.n	800d012 <NormalControl+0x392>
				PP_stop(&pp);
 800d01c:	4847      	ldr	r0, [pc, #284]	; (800d13c <NormalControl+0x4bc>)
 800d01e:	f7f9 f957 	bl	80062d0 <PP_stop>
				picked_left = 0;
 800d022:	4b49      	ldr	r3, [pc, #292]	; (800d148 <NormalControl+0x4c8>)
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800d028:	4b44      	ldr	r3, [pc, #272]	; (800d13c <NormalControl+0x4bc>)
 800d02a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1bd      	bne.n	800cfb4 <NormalControl+0x334>
			}
		}
		if(picked_left)
 800d038:	4b43      	ldr	r3, [pc, #268]	; (800d148 <NormalControl+0x4c8>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d03b      	beq.n	800d0b8 <NormalControl+0x438>
		{
			float pick_left_adjust_servo[1][7] = {{3.5, 0.5, 0, 0, 0, 0, 0}};
 800d040:	4b45      	ldr	r3, [pc, #276]	; (800d158 <NormalControl+0x4d8>)
 800d042:	1d3c      	adds	r4, r7, #4
 800d044:	461d      	mov	r5, r3
 800d046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d04a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d04e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800d052:	1d3b      	adds	r3, r7, #4
 800d054:	4a39      	ldr	r2, [pc, #228]	; (800d13c <NormalControl+0x4bc>)
 800d056:	2101      	movs	r1, #1
 800d058:	4618      	mov	r0, r3
 800d05a:	f7f8 fe01 	bl	8005c60 <PP_start>
			while(pp.pp_start)
 800d05e:	e00d      	b.n	800d07c <NormalControl+0x3fc>
			{
				if(ps4.button == SQUARE)
 800d060:	4b35      	ldr	r3, [pc, #212]	; (800d138 <NormalControl+0x4b8>)
 800d062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d068:	d108      	bne.n	800d07c <NormalControl+0x3fc>
				{
					while(ps4.button == SQUARE);
 800d06a:	bf00      	nop
 800d06c:	4b32      	ldr	r3, [pc, #200]	; (800d138 <NormalControl+0x4b8>)
 800d06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d074:	d0fa      	beq.n	800d06c <NormalControl+0x3ec>
					PP_stop(&pp);
 800d076:	4831      	ldr	r0, [pc, #196]	; (800d13c <NormalControl+0x4bc>)
 800d078:	f7f9 f92a 	bl	80062d0 <PP_stop>
			while(pp.pp_start)
 800d07c:	4b2f      	ldr	r3, [pc, #188]	; (800d13c <NormalControl+0x4bc>)
 800d07e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1e9      	bne.n	800d060 <NormalControl+0x3e0>
				}
			}
			LoadRing();
 800d08c:	f000 ff22 	bl	800ded4 <LoadRing>
			close_servo;
 800d090:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800d094:	4831      	ldr	r0, [pc, #196]	; (800d15c <NormalControl+0x4dc>)
 800d096:	f7fe fba3 	bl	800b7e0 <ServoSetPulse>
 800d09a:	f640 01ca 	movw	r1, #2250	; 0x8ca
 800d09e:	4830      	ldr	r0, [pc, #192]	; (800d160 <NormalControl+0x4e0>)
 800d0a0:	f7fe fb9e 	bl	800b7e0 <ServoSetPulse>
			lidar.pos_counter = CENTER_1;
 800d0a4:	4b2f      	ldr	r3, [pc, #188]	; (800d164 <NormalControl+0x4e4>)
 800d0a6:	2203      	movs	r2, #3
 800d0a8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			AdjustRings();
 800d0ac:	f000 ff58 	bl	800df60 <AdjustRings>
//			osDelay(500);
			setSpeedMODN(5.5);
 800d0b0:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800d0b4:	f7f7 fedc 	bl	8004e70 <setSpeedMODN>
		}
		mode = AUTO;
 800d0b8:	4b2b      	ldr	r3, [pc, #172]	; (800d168 <NormalControl+0x4e8>)
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800d0be:	4b1e      	ldr	r3, [pc, #120]	; (800d138 <NormalControl+0x4b8>)
 800d0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c2:	2b40      	cmp	r3, #64	; 0x40
 800d0c4:	d10b      	bne.n	800d0de <NormalControl+0x45e>
	{
		while(ps4.button == DOWN);
 800d0c6:	bf00      	nop
 800d0c8:	4b1b      	ldr	r3, [pc, #108]	; (800d138 <NormalControl+0x4b8>)
 800d0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0cc:	2b40      	cmp	r3, #64	; 0x40
 800d0ce:	d0fb      	beq.n	800d0c8 <NormalControl+0x448>
//		stick_fence = 0;
		lidar.pos_counter = PICK_RIGHT;
 800d0d0:	4b24      	ldr	r3, [pc, #144]	; (800d164 <NormalControl+0x4e4>)
 800d0d2:	2209      	movs	r2, #9
 800d0d4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		mode = AUTO;
 800d0d8:	4b23      	ldr	r3, [pc, #140]	; (800d168 <NormalControl+0x4e8>)
 800d0da:	2201      	movs	r2, #1
 800d0dc:	601a      	str	r2, [r3, #0]
	}

	if (HAL_GetTick() - before >= NormalMode) {
 800d0de:	f008 fcd3 	bl	8015a88 <HAL_GetTick>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	4a21      	ldr	r2, [pc, #132]	; (800d16c <NormalControl+0x4ec>)
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	1a9b      	subs	r3, r3, r2
 800d0ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d0ee:	d314      	bcc.n	800d11a <NormalControl+0x49a>
		led9= !led9;
 800d0f0:	4b1f      	ldr	r3, [pc, #124]	; (800d170 <NormalControl+0x4f0>)
 800d0f2:	7e1b      	ldrb	r3, [r3, #24]
 800d0f4:	f003 0310 	and.w	r3, r3, #16
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	bf0c      	ite	eq
 800d0fe:	2301      	moveq	r3, #1
 800d100:	2300      	movne	r3, #0
 800d102:	b2d9      	uxtb	r1, r3
 800d104:	4a1a      	ldr	r2, [pc, #104]	; (800d170 <NormalControl+0x4f0>)
 800d106:	7e13      	ldrb	r3, [r2, #24]
 800d108:	f361 1304 	bfi	r3, r1, #4, #1
 800d10c:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800d10e:	f008 fcbb 	bl	8015a88 <HAL_GetTick>
 800d112:	4603      	mov	r3, r0
 800d114:	461a      	mov	r2, r3
 800d116:	4b15      	ldr	r3, [pc, #84]	; (800d16c <NormalControl+0x4ec>)
 800d118:	601a      	str	r2, [r3, #0]
	}
}
 800d11a:	bf00      	nop
 800d11c:	3758      	adds	r7, #88	; 0x58
 800d11e:	46bd      	mov	sp, r7
 800d120:	bdb0      	pop	{r4, r5, r7, pc}
 800d122:	bf00      	nop
 800d124:	f3af 8000 	nop.w
 800d128:	33333333 	.word	0x33333333
 800d12c:	bfd33333 	.word	0xbfd33333
 800d130:	9999999a 	.word	0x9999999a
 800d134:	bfd99999 	.word	0xbfd99999
 800d138:	2000a244 	.word	0x2000a244
 800d13c:	20006d4c 	.word	0x20006d4c
 800d140:	40020c00 	.word	0x40020c00
 800d144:	200079d0 	.word	0x200079d0
 800d148:	20009a24 	.word	0x20009a24
 800d14c:	0802500c 	.word	0x0802500c
 800d150:	3ee66666 	.word	0x3ee66666
 800d154:	40021000 	.word	0x40021000
 800d158:	08025028 	.word	0x08025028
 800d15c:	200079e0 	.word	0x200079e0
 800d160:	2000a5e8 	.word	0x2000a5e8
 800d164:	200091a8 	.word	0x200091a8
 800d168:	20009458 	.word	0x20009458
 800d16c:	200073b8 	.word	0x200073b8
 800d170:	200097dc 	.word	0x200097dc
 800d174:	00000000 	.word	0x00000000

0800d178 <Auto>:

void Auto() {
 800d178:	b5b0      	push	{r4, r5, r7, lr}
 800d17a:	b088      	sub	sp, #32
 800d17c:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800d17e:	4b98      	ldr	r3, [pc, #608]	; (800d3e0 <Auto+0x268>)
 800d180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d186:	d176      	bne.n	800d276 <Auto+0xfe>
	{
		while(ps4.button == OPTION);
 800d188:	bf00      	nop
 800d18a:	4b95      	ldr	r3, [pc, #596]	; (800d3e0 <Auto+0x268>)
 800d18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d192:	d0fa      	beq.n	800d18a <Auto+0x12>

		shot_count++;
 800d194:	4b93      	ldr	r3, [pc, #588]	; (800d3e4 <Auto+0x26c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3301      	adds	r3, #1
 800d19a:	4a92      	ldr	r2, [pc, #584]	; (800d3e4 <Auto+0x26c>)
 800d19c:	6013      	str	r3, [r2, #0]

		if(shot_count == 1)
 800d19e:	4b91      	ldr	r3, [pc, #580]	; (800d3e4 <Auto+0x26c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d119      	bne.n	800d1da <Auto+0x62>
		{
			led_enb = 0;
 800d1a6:	4b90      	ldr	r3, [pc, #576]	; (800d3e8 <Auto+0x270>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	601a      	str	r2, [r3, #0]
			if(blue)
 800d1ac:	4b8f      	ldr	r3, [pc, #572]	; (800d3ec <Auto+0x274>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <Auto+0x4a>
			{
				vesc_speed = BlueType3;
 800d1b4:	4b8e      	ldr	r3, [pc, #568]	; (800d3f0 <Auto+0x278>)
 800d1b6:	4a8f      	ldr	r2, [pc, #572]	; (800d3f4 <Auto+0x27c>)
 800d1b8:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType3Duty;
 800d1ba:	4b8f      	ldr	r3, [pc, #572]	; (800d3f8 <Auto+0x280>)
 800d1bc:	4a8f      	ldr	r2, [pc, #572]	; (800d3fc <Auto+0x284>)
 800d1be:	601a      	str	r2, [r3, #0]
 800d1c0:	e005      	b.n	800d1ce <Auto+0x56>
			}
			else
			{
				vesc_speed = RedType3;
 800d1c2:	4b8b      	ldr	r3, [pc, #556]	; (800d3f0 <Auto+0x278>)
 800d1c4:	4a8e      	ldr	r2, [pc, #568]	; (800d400 <Auto+0x288>)
 800d1c6:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType3Duty;
 800d1c8:	4b8b      	ldr	r3, [pc, #556]	; (800d3f8 <Auto+0x280>)
 800d1ca:	4a8e      	ldr	r2, [pc, #568]	; (800d404 <Auto+0x28c>)
 800d1cc:	601a      	str	r2, [r3, #0]
			}
			led8 = 1;
 800d1ce:	4a8e      	ldr	r2, [pc, #568]	; (800d408 <Auto+0x290>)
 800d1d0:	7e13      	ldrb	r3, [r2, #24]
 800d1d2:	f043 0320 	orr.w	r3, r3, #32
 800d1d6:	7613      	strb	r3, [r2, #24]
 800d1d8:	e04d      	b.n	800d276 <Auto+0xfe>
		}
		else if(shot_count == 2)
 800d1da:	4b82      	ldr	r3, [pc, #520]	; (800d3e4 <Auto+0x26c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b02      	cmp	r3, #2
 800d1e0:	d117      	bne.n	800d212 <Auto+0x9a>
		{
			led_enb = 1;
 800d1e2:	4b81      	ldr	r3, [pc, #516]	; (800d3e8 <Auto+0x270>)
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	601a      	str	r2, [r3, #0]
			shot_prd = 125;
 800d1e8:	4b88      	ldr	r3, [pc, #544]	; (800d40c <Auto+0x294>)
 800d1ea:	227d      	movs	r2, #125	; 0x7d
 800d1ec:	601a      	str	r2, [r3, #0]
			if(blue)
 800d1ee:	4b7f      	ldr	r3, [pc, #508]	; (800d3ec <Auto+0x274>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d006      	beq.n	800d204 <Auto+0x8c>
			{
				vesc_speed = BlueType2;
 800d1f6:	4b7e      	ldr	r3, [pc, #504]	; (800d3f0 <Auto+0x278>)
 800d1f8:	4a85      	ldr	r2, [pc, #532]	; (800d410 <Auto+0x298>)
 800d1fa:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800d1fc:	4b7e      	ldr	r3, [pc, #504]	; (800d3f8 <Auto+0x280>)
 800d1fe:	4a85      	ldr	r2, [pc, #532]	; (800d414 <Auto+0x29c>)
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	e038      	b.n	800d276 <Auto+0xfe>
			}
			else
			{
				vesc_speed = RedType2;
 800d204:	4b7a      	ldr	r3, [pc, #488]	; (800d3f0 <Auto+0x278>)
 800d206:	4a84      	ldr	r2, [pc, #528]	; (800d418 <Auto+0x2a0>)
 800d208:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800d20a:	4b7b      	ldr	r3, [pc, #492]	; (800d3f8 <Auto+0x280>)
 800d20c:	4a83      	ldr	r2, [pc, #524]	; (800d41c <Auto+0x2a4>)
 800d20e:	601a      	str	r2, [r3, #0]
 800d210:	e031      	b.n	800d276 <Auto+0xfe>
			}
//			vesc_duty = 0.275;
//			vesc_speed = 8.0;
		}
		else if(shot_count == 3)
 800d212:	4b74      	ldr	r3, [pc, #464]	; (800d3e4 <Auto+0x26c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b03      	cmp	r3, #3
 800d218:	d118      	bne.n	800d24c <Auto+0xd4>
		{
			led_enb = 1;
 800d21a:	4b73      	ldr	r3, [pc, #460]	; (800d3e8 <Auto+0x270>)
 800d21c:	2201      	movs	r2, #1
 800d21e:	601a      	str	r2, [r3, #0]
			shot_prd = 500;
 800d220:	4b7a      	ldr	r3, [pc, #488]	; (800d40c <Auto+0x294>)
 800d222:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d226:	601a      	str	r2, [r3, #0]
//			vesc_duty = 0.39;
//			vesc_speed = 12.2;
			if(blue)
 800d228:	4b70      	ldr	r3, [pc, #448]	; (800d3ec <Auto+0x274>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d006      	beq.n	800d23e <Auto+0xc6>
			{
				vesc_speed = BlueOppoType2;
 800d230:	4b6f      	ldr	r3, [pc, #444]	; (800d3f0 <Auto+0x278>)
 800d232:	4a7b      	ldr	r2, [pc, #492]	; (800d420 <Auto+0x2a8>)
 800d234:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800d236:	4b70      	ldr	r3, [pc, #448]	; (800d3f8 <Auto+0x280>)
 800d238:	4a7a      	ldr	r2, [pc, #488]	; (800d424 <Auto+0x2ac>)
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	e01b      	b.n	800d276 <Auto+0xfe>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800d23e:	4b6c      	ldr	r3, [pc, #432]	; (800d3f0 <Auto+0x278>)
 800d240:	4a79      	ldr	r2, [pc, #484]	; (800d428 <Auto+0x2b0>)
 800d242:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800d244:	4b6c      	ldr	r3, [pc, #432]	; (800d3f8 <Auto+0x280>)
 800d246:	4a79      	ldr	r2, [pc, #484]	; (800d42c <Auto+0x2b4>)
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	e014      	b.n	800d276 <Auto+0xfe>
			}
		}

		else if(shot_count == 4)
 800d24c:	4b65      	ldr	r3, [pc, #404]	; (800d3e4 <Auto+0x26c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2b04      	cmp	r3, #4
 800d252:	d110      	bne.n	800d276 <Auto+0xfe>
		{
			led_enb = 0;
 800d254:	4b64      	ldr	r3, [pc, #400]	; (800d3e8 <Auto+0x270>)
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800d25a:	4b67      	ldr	r3, [pc, #412]	; (800d3f8 <Auto+0x280>)
 800d25c:	4a74      	ldr	r2, [pc, #464]	; (800d430 <Auto+0x2b8>)
 800d25e:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800d260:	4b63      	ldr	r3, [pc, #396]	; (800d3f0 <Auto+0x278>)
 800d262:	4a74      	ldr	r2, [pc, #464]	; (800d434 <Auto+0x2bc>)
 800d264:	601a      	str	r2, [r3, #0]
			led8 = 0;
 800d266:	4a68      	ldr	r2, [pc, #416]	; (800d408 <Auto+0x290>)
 800d268:	7e13      	ldrb	r3, [r2, #24]
 800d26a:	f36f 1345 	bfc	r3, #5, #1
 800d26e:	7613      	strb	r3, [r2, #24]
			shot_count = 0;
 800d270:	4b5c      	ldr	r3, [pc, #368]	; (800d3e4 <Auto+0x26c>)
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800d276:	4b5a      	ldr	r3, [pc, #360]	; (800d3e0 <Auto+0x268>)
 800d278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d27e:	d118      	bne.n	800d2b2 <Auto+0x13a>
	{
		while(ps4.button == CROSS);
 800d280:	bf00      	nop
 800d282:	4b57      	ldr	r3, [pc, #348]	; (800d3e0 <Auto+0x268>)
 800d284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d28a:	d0fa      	beq.n	800d282 <Auto+0x10a>
		push_shoot;
 800d28c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800d290:	4869      	ldr	r0, [pc, #420]	; (800d438 <Auto+0x2c0>)
 800d292:	f7f3 ff7a 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800d296:	4b69      	ldr	r3, [pc, #420]	; (800d43c <Auto+0x2c4>)
 800d298:	2201      	movs	r2, #1
 800d29a:	601a      	str	r2, [r3, #0]
		stop_adjust = 1;
 800d29c:	4b68      	ldr	r3, [pc, #416]	; (800d440 <Auto+0x2c8>)
 800d29e:	2201      	movs	r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800d2a2:	4b68      	ldr	r3, [pc, #416]	; (800d444 <Auto+0x2cc>)
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	601a      	str	r2, [r3, #0]
		shooted++;
 800d2a8:	4b67      	ldr	r3, [pc, #412]	; (800d448 <Auto+0x2d0>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	4a66      	ldr	r2, [pc, #408]	; (800d448 <Auto+0x2d0>)
 800d2b0:	6013      	str	r3, [r2, #0]
//			pick_manual(5000);
//			counter = 0;
//		}
	}

	if(ps4.button == SQUARE)
 800d2b2:	4b4b      	ldr	r3, [pc, #300]	; (800d3e0 <Auto+0x268>)
 800d2b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2ba:	d140      	bne.n	800d33e <Auto+0x1c6>
	{
		while(ps4.button == SQUARE);
 800d2bc:	bf00      	nop
 800d2be:	4b48      	ldr	r3, [pc, #288]	; (800d3e0 <Auto+0x268>)
 800d2c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2c6:	d0fa      	beq.n	800d2be <Auto+0x146>

		if(pp.pp_start)
 800d2c8:	4b60      	ldr	r3, [pc, #384]	; (800d44c <Auto+0x2d4>)
 800d2ca:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d2ce:	f003 0301 	and.w	r3, r3, #1
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <Auto+0x168>
		{
			PP_stop(&pp);
 800d2d8:	485c      	ldr	r0, [pc, #368]	; (800d44c <Auto+0x2d4>)
 800d2da:	f7f8 fff9 	bl	80062d0 <PP_stop>
 800d2de:	e02e      	b.n	800d33e <Auto+0x1c6>
		}
		else
		{
			loaded = 0;
 800d2e0:	4b5b      	ldr	r3, [pc, #364]	; (800d450 <Auto+0x2d8>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.0;
 800d2e6:	4b44      	ldr	r3, [pc, #272]	; (800d3f8 <Auto+0x280>)
 800d2e8:	f04f 0200 	mov.w	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
			shot_count = 0;
 800d2ee:	4b3d      	ldr	r3, [pc, #244]	; (800d3e4 <Auto+0x26c>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
			flywheelStop();
 800d2f4:	f001 f96a 	bl	800e5cc <flywheelStop>
			pick_stop;
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	4856      	ldr	r0, [pc, #344]	; (800d454 <Auto+0x2dc>)
 800d2fc:	f7f3 ff45 	bl	800118a <WriteBDC>
			setPick(500);
 800d300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d304:	f000 f94e 	bl	800d5a4 <setPick>
			cylinder_load;
 800d308:	4a3f      	ldr	r2, [pc, #252]	; (800d408 <Auto+0x290>)
 800d30a:	7f13      	ldrb	r3, [r2, #28]
 800d30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d310:	7713      	strb	r3, [r2, #28]
			open_servo;
 800d312:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800d316:	4850      	ldr	r0, [pc, #320]	; (800d458 <Auto+0x2e0>)
 800d318:	f7fe fa62 	bl	800b7e0 <ServoSetPulse>
 800d31c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d320:	484e      	ldr	r0, [pc, #312]	; (800d45c <Auto+0x2e4>)
 800d322:	f7fe fa5d 	bl	800b7e0 <ServoSetPulse>
			reload = 0;
 800d326:	4b4e      	ldr	r3, [pc, #312]	; (800d460 <Auto+0x2e8>)
 800d328:	2200      	movs	r2, #0
 800d32a:	601a      	str	r2, [r3, #0]
			load_start = 0;
 800d32c:	4b4d      	ldr	r3, [pc, #308]	; (800d464 <Auto+0x2ec>)
 800d32e:	2200      	movs	r2, #0
 800d330:	601a      	str	r2, [r3, #0]
//			load_adjust = 0;
			stick_fence = 0;
 800d332:	4b4d      	ldr	r3, [pc, #308]	; (800d468 <Auto+0x2f0>)
 800d334:	2200      	movs	r2, #0
 800d336:	601a      	str	r2, [r3, #0]
			picked_manual = 0;
 800d338:	4b4c      	ldr	r3, [pc, #304]	; (800d46c <Auto+0x2f4>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	601a      	str	r2, [r3, #0]
//			pick_right_enb = 0;
		}
	}

	if(ps4.button == CIRCLE)
 800d33e:	4b28      	ldr	r3, [pc, #160]	; (800d3e0 <Auto+0x268>)
 800d340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d346:	f040 80c5 	bne.w	800d4d4 <Auto+0x35c>
	{
		while(ps4.button == CIRCLE);
 800d34a:	bf00      	nop
 800d34c:	4b24      	ldr	r3, [pc, #144]	; (800d3e0 <Auto+0x268>)
 800d34e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d354:	d0fa      	beq.n	800d34c <Auto+0x1d4>
		vesc_speed = 4;
 800d356:	4b26      	ldr	r3, [pc, #152]	; (800d3f0 <Auto+0x278>)
 800d358:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800d35c:	601a      	str	r2, [r3, #0]
		static int counter = 0;

		if(counter == 0)
 800d35e:	4b44      	ldr	r3, [pc, #272]	; (800d470 <Auto+0x2f8>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	f040 80a3 	bne.w	800d4ae <Auto+0x336>
		{
			lidar.pos = PICK_LEFT;
 800d368:	4b42      	ldr	r3, [pc, #264]	; (800d474 <Auto+0x2fc>)
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = PICK_LEFT;
 800d370:	4b40      	ldr	r3, [pc, #256]	; (800d474 <Auto+0x2fc>)
 800d372:	2201      	movs	r2, #1
 800d374:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

			setPick(2200);
 800d378:	f640 0098 	movw	r0, #2200	; 0x898
 800d37c:	f000 f912 	bl	800d5a4 <setPick>

			float pick_left_point[1][7] = {{12.0, -3.6, 0.0, 0, 0, 0, 0}};
 800d380:	4b3d      	ldr	r3, [pc, #244]	; (800d478 <Auto+0x300>)
 800d382:	1d3c      	adds	r4, r7, #4
 800d384:	461d      	mov	r5, r3
 800d386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d38a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d38e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_point, 1, &pp);
 800d392:	1d3b      	adds	r3, r7, #4
 800d394:	4a2d      	ldr	r2, [pc, #180]	; (800d44c <Auto+0x2d4>)
 800d396:	2101      	movs	r1, #1
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f8 fc61 	bl	8005c60 <PP_start>
			while(pp.pp_start)
 800d39e:	e070      	b.n	800d482 <Auto+0x30a>
			{
				if(ps4.button == SQUARE)
 800d3a0:	4b0f      	ldr	r3, [pc, #60]	; (800d3e0 <Auto+0x268>)
 800d3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3a8:	d108      	bne.n	800d3bc <Auto+0x244>
				{
					while(ps4.button == SQUARE);
 800d3aa:	bf00      	nop
 800d3ac:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <Auto+0x268>)
 800d3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3b4:	d0fa      	beq.n	800d3ac <Auto+0x234>
					PP_stop(&pp);
 800d3b6:	4825      	ldr	r0, [pc, #148]	; (800d44c <Auto+0x2d4>)
 800d3b8:	f7f8 ff8a 	bl	80062d0 <PP_stop>
				}

				if(pp.real_x <= -3.2)
 800d3bc:	4b23      	ldr	r3, [pc, #140]	; (800d44c <Auto+0x2d4>)
 800d3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7f3 f8c1 	bl	8000548 <__aeabi_f2d>
 800d3c6:	a304      	add	r3, pc, #16	; (adr r3, 800d3d8 <Auto+0x260>)
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	f7f3 fb90 	bl	8000af0 <__aeabi_dcmple>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d152      	bne.n	800d47c <Auto+0x304>
 800d3d6:	e054      	b.n	800d482 <Auto+0x30a>
 800d3d8:	9999999a 	.word	0x9999999a
 800d3dc:	c0099999 	.word	0xc0099999
 800d3e0:	2000a244 	.word	0x2000a244
 800d3e4:	200068e0 	.word	0x200068e0
 800d3e8:	2000a858 	.word	0x2000a858
 800d3ec:	20006a4c 	.word	0x20006a4c
 800d3f0:	200065c0 	.word	0x200065c0
 800d3f4:	4151999a 	.word	0x4151999a
 800d3f8:	2000749c 	.word	0x2000749c
 800d3fc:	44f78000 	.word	0x44f78000
 800d400:	41540000 	.word	0x41540000
 800d404:	44fbe000 	.word	0x44fbe000
 800d408:	200097dc 	.word	0x200097dc
 800d40c:	2000a5cc 	.word	0x2000a5cc
 800d410:	41026666 	.word	0x41026666
 800d414:	44bea000 	.word	0x44bea000
 800d418:	4104cccd 	.word	0x4104cccd
 800d41c:	44c1c000 	.word	0x44c1c000
 800d420:	414f3333 	.word	0x414f3333
 800d424:	45020000 	.word	0x45020000
 800d428:	4154cccd 	.word	0x4154cccd
 800d42c:	45039000 	.word	0x45039000
 800d430:	445e8000 	.word	0x445e8000
 800d434:	406ccccd 	.word	0x406ccccd
 800d438:	2000989c 	.word	0x2000989c
 800d43c:	20009454 	.word	0x20009454
 800d440:	20006508 	.word	0x20006508
 800d444:	200075a4 	.word	0x200075a4
 800d448:	2000a7a0 	.word	0x2000a7a0
 800d44c:	20006d4c 	.word	0x20006d4c
 800d450:	200095b0 	.word	0x200095b0
 800d454:	20007880 	.word	0x20007880
 800d458:	200079e0 	.word	0x200079e0
 800d45c:	2000a5e8 	.word	0x2000a5e8
 800d460:	200078c0 	.word	0x200078c0
 800d464:	20007464 	.word	0x20007464
 800d468:	200073d8 	.word	0x200073d8
 800d46c:	200096c8 	.word	0x200096c8
 800d470:	200002e4 	.word	0x200002e4
 800d474:	200091a8 	.word	0x200091a8
 800d478:	08025044 	.word	0x08025044
					PP_stop(&pp);
 800d47c:	483d      	ldr	r0, [pc, #244]	; (800d574 <Auto+0x3fc>)
 800d47e:	f7f8 ff27 	bl	80062d0 <PP_stop>
			while(pp.pp_start)
 800d482:	4b3c      	ldr	r3, [pc, #240]	; (800d574 <Auto+0x3fc>)
 800d484:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d186      	bne.n	800d3a0 <Auto+0x228>
			}
			pick_left = 1;
 800d492:	4b39      	ldr	r3, [pc, #228]	; (800d578 <Auto+0x400>)
 800d494:	2201      	movs	r2, #1
 800d496:	601a      	str	r2, [r3, #0]
			counter++;
 800d498:	4b38      	ldr	r3, [pc, #224]	; (800d57c <Auto+0x404>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3301      	adds	r3, #1
 800d49e:	4a37      	ldr	r2, [pc, #220]	; (800d57c <Auto+0x404>)
 800d4a0:	6013      	str	r3, [r2, #0]
			cylinder_retract;
 800d4a2:	4a37      	ldr	r2, [pc, #220]	; (800d580 <Auto+0x408>)
 800d4a4:	7f13      	ldrb	r3, [r2, #28]
 800d4a6:	f36f 1386 	bfc	r3, #6, #1
 800d4aa:	7713      	strb	r3, [r2, #28]
 800d4ac:	e012      	b.n	800d4d4 <Auto+0x35c>
		}
		else
		{
			counter = 0;
 800d4ae:	4b33      	ldr	r3, [pc, #204]	; (800d57c <Auto+0x404>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
			lidar.pos = POS_PENDING;
 800d4b4:	4b33      	ldr	r3, [pc, #204]	; (800d584 <Auto+0x40c>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = POS_PENDING;
 800d4bc:	4b31      	ldr	r3, [pc, #196]	; (800d584 <Auto+0x40c>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			pick_right = 1;
 800d4c4:	4b30      	ldr	r3, [pc, #192]	; (800d588 <Auto+0x410>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	601a      	str	r2, [r3, #0]
			cylinder_retract;
 800d4ca:	4a2d      	ldr	r2, [pc, #180]	; (800d580 <Auto+0x408>)
 800d4cc:	7f13      	ldrb	r3, [r2, #28]
 800d4ce:	f36f 1386 	bfc	r3, #6, #1
 800d4d2:	7713      	strb	r3, [r2, #28]
		}
	}

	if(ps4.button == TRIANGLE)
 800d4d4:	4b2d      	ldr	r3, [pc, #180]	; (800d58c <Auto+0x414>)
 800d4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4dc:	d128      	bne.n	800d530 <Auto+0x3b8>
	{
		while(ps4.button == TRIANGLE);
 800d4de:	bf00      	nop
 800d4e0:	4b2a      	ldr	r3, [pc, #168]	; (800d58c <Auto+0x414>)
 800d4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4e8:	d0fa      	beq.n	800d4e0 <Auto+0x368>
		LoadRing();
 800d4ea:	f000 fcf3 	bl	800ded4 <LoadRing>
		load_adjust = 1;
 800d4ee:	4b28      	ldr	r3, [pc, #160]	; (800d590 <Auto+0x418>)
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	601a      	str	r2, [r3, #0]
		picked_manual = 1;
 800d4f4:	4b27      	ldr	r3, [pc, #156]	; (800d594 <Auto+0x41c>)
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800d4fa:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d4fe:	4826      	ldr	r0, [pc, #152]	; (800d598 <Auto+0x420>)
 800d500:	f7fe f96e 	bl	800b7e0 <ServoSetPulse>
 800d504:	f640 0166 	movw	r1, #2150	; 0x866
 800d508:	4824      	ldr	r0, [pc, #144]	; (800d59c <Auto+0x424>)
 800d50a:	f7fe f969 	bl	800b7e0 <ServoSetPulse>
		cylinder_retract;
 800d50e:	4a1c      	ldr	r2, [pc, #112]	; (800d580 <Auto+0x408>)
 800d510:	7f13      	ldrb	r3, [r2, #28]
 800d512:	f36f 1386 	bfc	r3, #6, #1
 800d516:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800d518:	f000 fd22 	bl	800df60 <AdjustRings>
		adjust_servo;
 800d51c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d520:	481d      	ldr	r0, [pc, #116]	; (800d598 <Auto+0x420>)
 800d522:	f7fe f95d 	bl	800b7e0 <ServoSetPulse>
 800d526:	f640 0166 	movw	r1, #2150	; 0x866
 800d52a:	481c      	ldr	r0, [pc, #112]	; (800d59c <Auto+0x424>)
 800d52c:	f7fe f958 	bl	800b7e0 <ServoSetPulse>
	}

	if (HAL_GetTick() - before >= AutoMode)
 800d530:	f008 faaa 	bl	8015a88 <HAL_GetTick>
 800d534:	4603      	mov	r3, r0
 800d536:	4a1a      	ldr	r2, [pc, #104]	; (800d5a0 <Auto+0x428>)
 800d538:	6812      	ldr	r2, [r2, #0]
 800d53a:	1a9b      	subs	r3, r3, r2
 800d53c:	2b7c      	cmp	r3, #124	; 0x7c
 800d53e:	d914      	bls.n	800d56a <Auto+0x3f2>
	{
		led9= !led9;
 800d540:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <Auto+0x408>)
 800d542:	7e1b      	ldrb	r3, [r3, #24]
 800d544:	f003 0310 	and.w	r3, r3, #16
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bf0c      	ite	eq
 800d54e:	2301      	moveq	r3, #1
 800d550:	2300      	movne	r3, #0
 800d552:	b2d9      	uxtb	r1, r3
 800d554:	4a0a      	ldr	r2, [pc, #40]	; (800d580 <Auto+0x408>)
 800d556:	7e13      	ldrb	r3, [r2, #24]
 800d558:	f361 1304 	bfi	r3, r1, #4, #1
 800d55c:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800d55e:	f008 fa93 	bl	8015a88 <HAL_GetTick>
 800d562:	4603      	mov	r3, r0
 800d564:	461a      	mov	r2, r3
 800d566:	4b0e      	ldr	r3, [pc, #56]	; (800d5a0 <Auto+0x428>)
 800d568:	601a      	str	r2, [r3, #0]
	}
}
 800d56a:	bf00      	nop
 800d56c:	3720      	adds	r7, #32
 800d56e:	46bd      	mov	sp, r7
 800d570:	bdb0      	pop	{r4, r5, r7, pc}
 800d572:	bf00      	nop
 800d574:	20006d4c 	.word	0x20006d4c
 800d578:	200079d0 	.word	0x200079d0
 800d57c:	200002e4 	.word	0x200002e4
 800d580:	200097dc 	.word	0x200097dc
 800d584:	200091a8 	.word	0x200091a8
 800d588:	2000a89c 	.word	0x2000a89c
 800d58c:	2000a244 	.word	0x2000a244
 800d590:	200095c4 	.word	0x200095c4
 800d594:	200096c8 	.word	0x200096c8
 800d598:	200079e0 	.word	0x200079e0
 800d59c:	2000a5e8 	.word	0x2000a5e8
 800d5a0:	200073b8 	.word	0x200073b8

0800d5a4 <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800d5ac:	4a05      	ldr	r2, [pc, #20]	; (800d5c4 <setPick+0x20>)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800d5b2:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <setPick+0x24>)
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	601a      	str	r2, [r3, #0]
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr
 800d5c4:	200065cc 	.word	0x200065cc
 800d5c8:	200078a4 	.word	0x200078a4

0800d5cc <CheckPickEnc>:

void CheckPickEnc(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	; (800d640 <CheckPickEnc+0x74>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d030      	beq.n	800d63a <CheckPickEnc+0x6e>
	{
		pickErr = pick_target_enc - pick_enc;
 800d5d8:	4b1a      	ldr	r3, [pc, #104]	; (800d644 <CheckPickEnc+0x78>)
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	4b1a      	ldr	r3, [pc, #104]	; (800d648 <CheckPickEnc+0x7c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5ea:	4b18      	ldr	r3, [pc, #96]	; (800d64c <CheckPickEnc+0x80>)
 800d5ec:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800d5f0:	4817      	ldr	r0, [pc, #92]	; (800d650 <CheckPickEnc+0x84>)
 800d5f2:	f7f8 f8b0 	bl	8005756 <PID>
		pick_manual((int32_t)pickU);
 800d5f6:	4b17      	ldr	r3, [pc, #92]	; (800d654 <CheckPickEnc+0x88>)
 800d5f8:	edd3 7a00 	vldr	s15, [r3]
 800d5fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d600:	ee17 3a90 	vmov	r3, s15
 800d604:	425b      	negs	r3, r3
 800d606:	4619      	mov	r1, r3
 800d608:	4813      	ldr	r0, [pc, #76]	; (800d658 <CheckPickEnc+0x8c>)
 800d60a:	f7f3 fdbe 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800d60e:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <CheckPickEnc+0x80>)
 800d610:	edd3 7a00 	vldr	s15, [r3]
 800d614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d618:	ee17 3a90 	vmov	r3, s15
 800d61c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800d620:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800d624:	4b0d      	ldr	r3, [pc, #52]	; (800d65c <CheckPickEnc+0x90>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	da06      	bge.n	800d63a <CheckPickEnc+0x6e>
		{
			set_pick_enc = 0;
 800d62c:	4b04      	ldr	r3, [pc, #16]	; (800d640 <CheckPickEnc+0x74>)
 800d62e:	2200      	movs	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
			pick_stop;
 800d632:	2100      	movs	r1, #0
 800d634:	4808      	ldr	r0, [pc, #32]	; (800d658 <CheckPickEnc+0x8c>)
 800d636:	f7f3 fda8 	bl	800118a <WriteBDC>
		}
	}
}
 800d63a:	bf00      	nop
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200078a4 	.word	0x200078a4
 800d644:	200065cc 	.word	0x200065cc
 800d648:	20006c10 	.word	0x20006c10
 800d64c:	200064f8 	.word	0x200064f8
 800d650:	20009a38 	.word	0x20009a38
 800d654:	2000746c 	.word	0x2000746c
 800d658:	20007880 	.word	0x20007880
 800d65c:	200073d0 	.word	0x200073d0

0800d660 <CheckPitch>:

void CheckPitch()
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
	if(set_pitch)
 800d664:	4b1b      	ldr	r3, [pc, #108]	; (800d6d4 <CheckPitch+0x74>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d02c      	beq.n	800d6c6 <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800d66c:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <CheckPitch+0x78>)
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <CheckPitch+0x1a>
 800d674:	2b01      	cmp	r3, #1
 800d676:	d013      	beq.n	800d6a0 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800d678:	e02a      	b.n	800d6d0 <CheckPitch+0x70>
				if(In_Pitch70)
 800d67a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d67e:	4817      	ldr	r0, [pc, #92]	; (800d6dc <CheckPitch+0x7c>)
 800d680:	f00a f87e 	bl	8017780 <HAL_GPIO_ReadPin>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d11f      	bne.n	800d6ca <CheckPitch+0x6a>
					pitch_stop;
 800d68a:	2100      	movs	r1, #0
 800d68c:	4814      	ldr	r0, [pc, #80]	; (800d6e0 <CheckPitch+0x80>)
 800d68e:	f7f3 fd7c 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800d692:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <CheckPitch+0x78>)
 800d694:	2201      	movs	r2, #1
 800d696:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800d698:	4b0e      	ldr	r3, [pc, #56]	; (800d6d4 <CheckPitch+0x74>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	601a      	str	r2, [r3, #0]
				break;
 800d69e:	e014      	b.n	800d6ca <CheckPitch+0x6a>
				if(In_Pitch45)
 800d6a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d6a4:	480d      	ldr	r0, [pc, #52]	; (800d6dc <CheckPitch+0x7c>)
 800d6a6:	f00a f86b 	bl	8017780 <HAL_GPIO_ReadPin>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10e      	bne.n	800d6ce <CheckPitch+0x6e>
					pitch_stop;
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	480b      	ldr	r0, [pc, #44]	; (800d6e0 <CheckPitch+0x80>)
 800d6b4:	f7f3 fd69 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800d6b8:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <CheckPitch+0x78>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800d6be:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <CheckPitch+0x74>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	601a      	str	r2, [r3, #0]
				break;
 800d6c4:	e003      	b.n	800d6ce <CheckPitch+0x6e>
	}
 800d6c6:	bf00      	nop
 800d6c8:	e002      	b.n	800d6d0 <CheckPitch+0x70>
				break;
 800d6ca:	bf00      	nop
 800d6cc:	e000      	b.n	800d6d0 <CheckPitch+0x70>
				break;
 800d6ce:	bf00      	nop
}
 800d6d0:	bf00      	nop
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	20009880 	.word	0x20009880
 800d6d8:	2000989a 	.word	0x2000989a
 800d6dc:	40020400 	.word	0x40020400
 800d6e0:	20006c74 	.word	0x20006c74
 800d6e4:	00000000 	.word	0x00000000

0800d6e8 <CheckPick>:

void CheckPick()
{
 800d6e8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ea:	b0a4      	sub	sp, #144	; 0x90
 800d6ec:	af00      	add	r7, sp, #0
	if(pick_left)
 800d6ee:	4ba6      	ldr	r3, [pc, #664]	; (800d988 <CheckPick+0x2a0>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	f000 810a 	beq.w	800d90c <CheckPick+0x224>
	{
		lidar.pos = PICK_LEFT;
 800d6f8:	4ba4      	ldr	r3, [pc, #656]	; (800d98c <CheckPick+0x2a4>)
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800d700:	4ba2      	ldr	r3, [pc, #648]	; (800d98c <CheckPick+0x2a4>)
 800d702:	2201      	movs	r2, #1
 800d704:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800d708:	4ba1      	ldr	r3, [pc, #644]	; (800d990 <CheckPick+0x2a8>)
 800d70a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800d70e:	461d      	mov	r5, r3
 800d710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800d71c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d720:	4a9c      	ldr	r2, [pc, #624]	; (800d994 <CheckPick+0x2ac>)
 800d722:	2101      	movs	r1, #1
 800d724:	4618      	mov	r0, r3
 800d726:	f7f8 fa9b 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 800d72a:	e020      	b.n	800d76e <CheckPick+0x86>
		{
			if(ps4.button == SQUARE)
 800d72c:	4b9a      	ldr	r3, [pc, #616]	; (800d998 <CheckPick+0x2b0>)
 800d72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d734:	d108      	bne.n	800d748 <CheckPick+0x60>
			{
				while(ps4.button == SQUARE);
 800d736:	bf00      	nop
 800d738:	4b97      	ldr	r3, [pc, #604]	; (800d998 <CheckPick+0x2b0>)
 800d73a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d73c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d740:	d0fa      	beq.n	800d738 <CheckPick+0x50>
				PP_stop(&pp);
 800d742:	4894      	ldr	r0, [pc, #592]	; (800d994 <CheckPick+0x2ac>)
 800d744:	f7f8 fdc4 	bl	80062d0 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800d748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d74c:	4893      	ldr	r0, [pc, #588]	; (800d99c <CheckPick+0x2b4>)
 800d74e:	f00a f817 	bl	8017780 <HAL_GPIO_ReadPin>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d007      	beq.n	800d768 <CheckPick+0x80>
 800d758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d75c:	488f      	ldr	r0, [pc, #572]	; (800d99c <CheckPick+0x2b4>)
 800d75e:	f00a f80f 	bl	8017780 <HAL_GPIO_ReadPin>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d102      	bne.n	800d76e <CheckPick+0x86>
				PP_stop(&pp);
 800d768:	488a      	ldr	r0, [pc, #552]	; (800d994 <CheckPick+0x2ac>)
 800d76a:	f7f8 fdb1 	bl	80062d0 <PP_stop>
		while(pp.pp_start)
 800d76e:	4b89      	ldr	r3, [pc, #548]	; (800d994 <CheckPick+0x2ac>)
 800d770:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1d6      	bne.n	800d72c <CheckPick+0x44>
		}
		pick_left = 0;
 800d77e:	4b82      	ldr	r3, [pc, #520]	; (800d988 <CheckPick+0x2a0>)
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800d784:	4b86      	ldr	r3, [pc, #536]	; (800d9a0 <CheckPick+0x2b8>)
 800d786:	2201      	movs	r2, #1
 800d788:	601a      	str	r2, [r3, #0]

		setPick(0);
 800d78a:	2000      	movs	r0, #0
 800d78c:	f7ff ff0a 	bl	800d5a4 <setPick>

		if(pick_left_manual)
 800d790:	4b84      	ldr	r3, [pc, #528]	; (800d9a4 <CheckPick+0x2bc>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <CheckPick+0xb4>
			ResetCoordinate();
 800d798:	f000 fbf4 	bl	800df84 <ResetCoordinate>

		float pick_left_point[1][7] = {{3.0, -10, -1.5, 0, 0, 0, 0}};
 800d79c:	4b82      	ldr	r3, [pc, #520]	; (800d9a8 <CheckPick+0x2c0>)
 800d79e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800d7a2:	461d      	mov	r5, r3
 800d7a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d7ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800d7b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d7b4:	4a77      	ldr	r2, [pc, #476]	; (800d994 <CheckPick+0x2ac>)
 800d7b6:	2101      	movs	r1, #1
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7f8 fa51 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 800d7be:	e061      	b.n	800d884 <CheckPick+0x19c>
		{
			if(!pick_left_manual)
 800d7c0:	4b78      	ldr	r3, [pc, #480]	; (800d9a4 <CheckPick+0x2bc>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d126      	bne.n	800d816 <CheckPick+0x12e>
			{
				if(pp.real_x <= -4.2)
 800d7c8:	4b72      	ldr	r3, [pc, #456]	; (800d994 <CheckPick+0x2ac>)
 800d7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7f2 febb 	bl	8000548 <__aeabi_f2d>
 800d7d2:	a369      	add	r3, pc, #420	; (adr r3, 800d978 <CheckPick+0x290>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	f7f3 f98a 	bl	8000af0 <__aeabi_dcmple>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <CheckPick+0x102>
					pp.target_vel[0] = 0.7;
 800d7e2:	4b6c      	ldr	r3, [pc, #432]	; (800d994 <CheckPick+0x2ac>)
 800d7e4:	4a71      	ldr	r2, [pc, #452]	; (800d9ac <CheckPick+0x2c4>)
 800d7e6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

				if(In_Pick && pp.real_x <= -5.0)
 800d7ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d7ee:	4870      	ldr	r0, [pc, #448]	; (800d9b0 <CheckPick+0x2c8>)
 800d7f0:	f009 ffc6 	bl	8017780 <HAL_GPIO_ReadPin>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d133      	bne.n	800d862 <CheckPick+0x17a>
 800d7fa:	4b66      	ldr	r3, [pc, #408]	; (800d994 <CheckPick+0x2ac>)
 800d7fc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d800:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800d804:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80c:	d829      	bhi.n	800d862 <CheckPick+0x17a>
					PP_stop(&pp);
 800d80e:	4861      	ldr	r0, [pc, #388]	; (800d994 <CheckPick+0x2ac>)
 800d810:	f7f8 fd5e 	bl	80062d0 <PP_stop>
 800d814:	e025      	b.n	800d862 <CheckPick+0x17a>
			}
			else
			{
				if(pp.real_x <= -0.25)
 800d816:	4b5f      	ldr	r3, [pc, #380]	; (800d994 <CheckPick+0x2ac>)
 800d818:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d81c:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d820:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d828:	d803      	bhi.n	800d832 <CheckPick+0x14a>
					pp.target_vel[0] = 0.55;
 800d82a:	4b5a      	ldr	r3, [pc, #360]	; (800d994 <CheckPick+0x2ac>)
 800d82c:	4a61      	ldr	r2, [pc, #388]	; (800d9b4 <CheckPick+0x2cc>)
 800d82e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

				if(In_Pick && pp.real_x <= -0.3)
 800d832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d836:	485e      	ldr	r0, [pc, #376]	; (800d9b0 <CheckPick+0x2c8>)
 800d838:	f009 ffa2 	bl	8017780 <HAL_GPIO_ReadPin>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d10f      	bne.n	800d862 <CheckPick+0x17a>
 800d842:	4b54      	ldr	r3, [pc, #336]	; (800d994 <CheckPick+0x2ac>)
 800d844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d846:	4618      	mov	r0, r3
 800d848:	f7f2 fe7e 	bl	8000548 <__aeabi_f2d>
 800d84c:	a34c      	add	r3, pc, #304	; (adr r3, 800d980 <CheckPick+0x298>)
 800d84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d852:	f7f3 f94d 	bl	8000af0 <__aeabi_dcmple>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <CheckPick+0x17a>
					PP_stop(&pp);
 800d85c:	484d      	ldr	r0, [pc, #308]	; (800d994 <CheckPick+0x2ac>)
 800d85e:	f7f8 fd37 	bl	80062d0 <PP_stop>
			}

			if(ps4.button == SQUARE)
 800d862:	4b4d      	ldr	r3, [pc, #308]	; (800d998 <CheckPick+0x2b0>)
 800d864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d86a:	d10b      	bne.n	800d884 <CheckPick+0x19c>
			{
				while(ps4.button == SQUARE);
 800d86c:	bf00      	nop
 800d86e:	4b4a      	ldr	r3, [pc, #296]	; (800d998 <CheckPick+0x2b0>)
 800d870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d876:	d0fa      	beq.n	800d86e <CheckPick+0x186>
				PP_stop(&pp);
 800d878:	4846      	ldr	r0, [pc, #280]	; (800d994 <CheckPick+0x2ac>)
 800d87a:	f7f8 fd29 	bl	80062d0 <PP_stop>
				picked_left = 0;
 800d87e:	4b48      	ldr	r3, [pc, #288]	; (800d9a0 <CheckPick+0x2b8>)
 800d880:	2200      	movs	r2, #0
 800d882:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800d884:	4b43      	ldr	r3, [pc, #268]	; (800d994 <CheckPick+0x2ac>)
 800d886:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d195      	bne.n	800d7c0 <CheckPick+0xd8>
			}
		}
		pick_left_manual = 0;
 800d894:	4b43      	ldr	r3, [pc, #268]	; (800d9a4 <CheckPick+0x2bc>)
 800d896:	2200      	movs	r2, #0
 800d898:	601a      	str	r2, [r3, #0]
		if(picked_left)
 800d89a:	4b41      	ldr	r3, [pc, #260]	; (800d9a0 <CheckPick+0x2b8>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d034      	beq.n	800d90c <CheckPick+0x224>
		{
			ResetCoordinate();
 800d8a2:	f000 fb6f 	bl	800df84 <ResetCoordinate>
			float pick_left_adjust_servo[1][7] = {{4.0, 0.7, 0.2, 0, 0, 0, 0}};
 800d8a6:	4b44      	ldr	r3, [pc, #272]	; (800d9b8 <CheckPick+0x2d0>)
 800d8a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800d8ac:	461d      	mov	r5, r3
 800d8ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d8b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800d8ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d8be:	4a35      	ldr	r2, [pc, #212]	; (800d994 <CheckPick+0x2ac>)
 800d8c0:	2101      	movs	r1, #1
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7f8 f9cc 	bl	8005c60 <PP_start>
			while(pp.pp_start)
 800d8c8:	e00d      	b.n	800d8e6 <CheckPick+0x1fe>
			{
				if(ps4.button == SQUARE)
 800d8ca:	4b33      	ldr	r3, [pc, #204]	; (800d998 <CheckPick+0x2b0>)
 800d8cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8d2:	d108      	bne.n	800d8e6 <CheckPick+0x1fe>
				{
					while(ps4.button == SQUARE);
 800d8d4:	bf00      	nop
 800d8d6:	4b30      	ldr	r3, [pc, #192]	; (800d998 <CheckPick+0x2b0>)
 800d8d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8de:	d0fa      	beq.n	800d8d6 <CheckPick+0x1ee>
					PP_stop(&pp);
 800d8e0:	482c      	ldr	r0, [pc, #176]	; (800d994 <CheckPick+0x2ac>)
 800d8e2:	f7f8 fcf5 	bl	80062d0 <PP_stop>
			while(pp.pp_start)
 800d8e6:	4b2b      	ldr	r3, [pc, #172]	; (800d994 <CheckPick+0x2ac>)
 800d8e8:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1e9      	bne.n	800d8ca <CheckPick+0x1e2>
				}
			}
			LoadRing();
 800d8f6:	f000 faed 	bl	800ded4 <LoadRing>
			lidar.pos_counter = CENTER_1;
 800d8fa:	4b24      	ldr	r3, [pc, #144]	; (800d98c <CheckPick+0x2a4>)
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			load_adjust = 1;
 800d902:	4b2e      	ldr	r3, [pc, #184]	; (800d9bc <CheckPick+0x2d4>)
 800d904:	2201      	movs	r2, #1
 800d906:	601a      	str	r2, [r3, #0]
			AdjustRings();
 800d908:	f000 fb2a 	bl	800df60 <AdjustRings>
//			osDelay(500);
//			setSpeedMODN(5.5);
		}
	}

	if(pick_right)
 800d90c:	4b2c      	ldr	r3, [pc, #176]	; (800d9c0 <CheckPick+0x2d8>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 8122 	beq.w	800db5a <CheckPick+0x472>
	{
		load_stop_once = 0;
 800d916:	4b2b      	ldr	r3, [pc, #172]	; (800d9c4 <CheckPick+0x2dc>)
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
		loaded = 0;
 800d91c:	4b2a      	ldr	r3, [pc, #168]	; (800d9c8 <CheckPick+0x2e0>)
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]
		load_adjust = 1;
 800d922:	4b26      	ldr	r3, [pc, #152]	; (800d9bc <CheckPick+0x2d4>)
 800d924:	2201      	movs	r2, #1
 800d926:	601a      	str	r2, [r3, #0]

//		pick_0 = 1;
//		pick_manual(-10000);

		lidar.pos = PICK_RIGHT;
 800d928:	4b18      	ldr	r3, [pc, #96]	; (800d98c <CheckPick+0x2a4>)
 800d92a:	2209      	movs	r2, #9
 800d92c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_RIGHT;
 800d930:	4b16      	ldr	r3, [pc, #88]	; (800d98c <CheckPick+0x2a4>)
 800d932:	2209      	movs	r2, #9
 800d934:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		open_servo;
 800d938:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800d93c:	4823      	ldr	r0, [pc, #140]	; (800d9cc <CheckPick+0x2e4>)
 800d93e:	f7fd ff4f 	bl	800b7e0 <ServoSetPulse>
 800d942:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d946:	4822      	ldr	r0, [pc, #136]	; (800d9d0 <CheckPick+0x2e8>)
 800d948:	f7fd ff4a 	bl	800b7e0 <ServoSetPulse>
		pick_right = 0;
 800d94c:	4b1c      	ldr	r3, [pc, #112]	; (800d9c0 <CheckPick+0x2d8>)
 800d94e:	2200      	movs	r2, #0
 800d950:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 10, 0, -90, 0, 0, 0}};
 800d952:	4b20      	ldr	r3, [pc, #128]	; (800d9d4 <CheckPick+0x2ec>)
 800d954:	f107 0420 	add.w	r4, r7, #32
 800d958:	461d      	mov	r5, r3
 800d95a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d95c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d95e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_right, 1, &pp);
 800d966:	f107 0320 	add.w	r3, r7, #32
 800d96a:	4a0a      	ldr	r2, [pc, #40]	; (800d994 <CheckPick+0x2ac>)
 800d96c:	2101      	movs	r1, #1
 800d96e:	4618      	mov	r0, r3
 800d970:	f7f8 f976 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 800d974:	e051      	b.n	800da1a <CheckPick+0x332>
 800d976:	bf00      	nop
 800d978:	cccccccd 	.word	0xcccccccd
 800d97c:	c010cccc 	.word	0xc010cccc
 800d980:	33333333 	.word	0x33333333
 800d984:	bfd33333 	.word	0xbfd33333
 800d988:	200079d0 	.word	0x200079d0
 800d98c:	200091a8 	.word	0x200091a8
 800d990:	08024ff0 	.word	0x08024ff0
 800d994:	20006d4c 	.word	0x20006d4c
 800d998:	2000a244 	.word	0x2000a244
 800d99c:	40020c00 	.word	0x40020c00
 800d9a0:	20009a24 	.word	0x20009a24
 800d9a4:	20009bd0 	.word	0x20009bd0
 800d9a8:	08025060 	.word	0x08025060
 800d9ac:	3f333333 	.word	0x3f333333
 800d9b0:	40021000 	.word	0x40021000
 800d9b4:	3f0ccccd 	.word	0x3f0ccccd
 800d9b8:	0802507c 	.word	0x0802507c
 800d9bc:	200095c4 	.word	0x200095c4
 800d9c0:	2000a89c 	.word	0x2000a89c
 800d9c4:	20009ba0 	.word	0x20009ba0
 800d9c8:	200095b0 	.word	0x200095b0
 800d9cc:	200079e0 	.word	0x200079e0
 800d9d0:	2000a5e8 	.word	0x2000a5e8
 800d9d4:	08025098 	.word	0x08025098
		{
			if(ps4.button == SQUARE)
 800d9d8:	4b65      	ldr	r3, [pc, #404]	; (800db70 <CheckPick+0x488>)
 800d9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9e0:	d108      	bne.n	800d9f4 <CheckPick+0x30c>
			{
				while(ps4.button == SQUARE);
 800d9e2:	bf00      	nop
 800d9e4:	4b62      	ldr	r3, [pc, #392]	; (800db70 <CheckPick+0x488>)
 800d9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ec:	d0fa      	beq.n	800d9e4 <CheckPick+0x2fc>
				PP_stop(&pp);
 800d9ee:	4861      	ldr	r0, [pc, #388]	; (800db74 <CheckPick+0x48c>)
 800d9f0:	f7f8 fc6e 	bl	80062d0 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800d9f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d9f8:	485f      	ldr	r0, [pc, #380]	; (800db78 <CheckPick+0x490>)
 800d9fa:	f009 fec1 	bl	8017780 <HAL_GPIO_ReadPin>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d007      	beq.n	800da14 <CheckPick+0x32c>
 800da04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800da08:	485b      	ldr	r0, [pc, #364]	; (800db78 <CheckPick+0x490>)
 800da0a:	f009 feb9 	bl	8017780 <HAL_GPIO_ReadPin>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <CheckPick+0x332>
				PP_stop(&pp);
 800da14:	4857      	ldr	r0, [pc, #348]	; (800db74 <CheckPick+0x48c>)
 800da16:	f7f8 fc5b 	bl	80062d0 <PP_stop>
		while(pp.pp_start)
 800da1a:	4b56      	ldr	r3, [pc, #344]	; (800db74 <CheckPick+0x48c>)
 800da1c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	b2db      	uxtb	r3, r3
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1d6      	bne.n	800d9d8 <CheckPick+0x2f0>
		}

		picked_right = 1;
 800da2a:	4b54      	ldr	r3, [pc, #336]	; (800db7c <CheckPick+0x494>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	601a      	str	r2, [r3, #0]
		ResetCoordinate();
 800da30:	f000 faa8 	bl	800df84 <ResetCoordinate>
		osDelay(10);
 800da34:	200a      	movs	r0, #10
 800da36:	f00e fd5d 	bl	801c4f4 <osDelay>
		setPick(0);
 800da3a:	2000      	movs	r0, #0
 800da3c:	f7ff fdb2 	bl	800d5a4 <setPick>
		float pick_right_point[1][7] = {{4.5, 1.5, -5, -90, 0, 0, 0}};
 800da40:	4b4f      	ldr	r3, [pc, #316]	; (800db80 <CheckPick+0x498>)
 800da42:	1d3c      	adds	r4, r7, #4
 800da44:	461d      	mov	r5, r3
 800da46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_right_point, 1, &pp);
 800da52:	1d3b      	adds	r3, r7, #4
 800da54:	4a47      	ldr	r2, [pc, #284]	; (800db74 <CheckPick+0x48c>)
 800da56:	2101      	movs	r1, #1
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f8 f901 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 800da5e:	e047      	b.n	800daf0 <CheckPick+0x408>
		{
			if(ps4.button == SQUARE)
 800da60:	4b43      	ldr	r3, [pc, #268]	; (800db70 <CheckPick+0x488>)
 800da62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da68:	d10b      	bne.n	800da82 <CheckPick+0x39a>
			{
				while(ps4.button == SQUARE);
 800da6a:	bf00      	nop
 800da6c:	4b40      	ldr	r3, [pc, #256]	; (800db70 <CheckPick+0x488>)
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da74:	d0fa      	beq.n	800da6c <CheckPick+0x384>
				PP_stop(&pp);
 800da76:	483f      	ldr	r0, [pc, #252]	; (800db74 <CheckPick+0x48c>)
 800da78:	f7f8 fc2a 	bl	80062d0 <PP_stop>
				picked_right = 0;
 800da7c:	4b3f      	ldr	r3, [pc, #252]	; (800db7c <CheckPick+0x494>)
 800da7e:	2200      	movs	r2, #0
 800da80:	601a      	str	r2, [r3, #0]
			}

			if(pp.real_y <= -0.3)
 800da82:	4b3c      	ldr	r3, [pc, #240]	; (800db74 <CheckPick+0x48c>)
 800da84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da86:	4618      	mov	r0, r3
 800da88:	f7f2 fd5e 	bl	8000548 <__aeabi_f2d>
 800da8c:	a336      	add	r3, pc, #216	; (adr r3, 800db68 <CheckPick+0x480>)
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	f7f3 f82d 	bl	8000af0 <__aeabi_dcmple>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d003      	beq.n	800daa4 <CheckPick+0x3bc>
				pp.target_vel[0] = 0.7;
 800da9c:	4b35      	ldr	r3, [pc, #212]	; (800db74 <CheckPick+0x48c>)
 800da9e:	4a39      	ldr	r2, [pc, #228]	; (800db84 <CheckPick+0x49c>)
 800daa0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

			if(In_Pick && pp.real_y <= -0.3)
 800daa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800daa8:	4837      	ldr	r0, [pc, #220]	; (800db88 <CheckPick+0x4a0>)
 800daaa:	f009 fe69 	bl	8017780 <HAL_GPIO_ReadPin>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d10f      	bne.n	800dad4 <CheckPick+0x3ec>
 800dab4:	4b2f      	ldr	r3, [pc, #188]	; (800db74 <CheckPick+0x48c>)
 800dab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab8:	4618      	mov	r0, r3
 800daba:	f7f2 fd45 	bl	8000548 <__aeabi_f2d>
 800dabe:	a32a      	add	r3, pc, #168	; (adr r3, 800db68 <CheckPick+0x480>)
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	f7f3 f814 	bl	8000af0 <__aeabi_dcmple>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d002      	beq.n	800dad4 <CheckPick+0x3ec>
				PP_stop(&pp);
 800dace:	4829      	ldr	r0, [pc, #164]	; (800db74 <CheckPick+0x48c>)
 800dad0:	f7f8 fbfe 	bl	80062d0 <PP_stop>

			if(ps4.button == UP)
 800dad4:	4b26      	ldr	r3, [pc, #152]	; (800db70 <CheckPick+0x488>)
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	2b10      	cmp	r3, #16
 800dada:	d109      	bne.n	800daf0 <CheckPick+0x408>
			{
				while(ps4.button == UP);
 800dadc:	bf00      	nop
 800dade:	4b24      	ldr	r3, [pc, #144]	; (800db70 <CheckPick+0x488>)
 800dae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae2:	2b10      	cmp	r3, #16
 800dae4:	d0fb      	beq.n	800dade <CheckPick+0x3f6>
				go_type_3++;
 800dae6:	4b29      	ldr	r3, [pc, #164]	; (800db8c <CheckPick+0x4a4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3301      	adds	r3, #1
 800daec:	4a27      	ldr	r2, [pc, #156]	; (800db8c <CheckPick+0x4a4>)
 800daee:	6013      	str	r3, [r2, #0]
		while(pp.pp_start)
 800daf0:	4b20      	ldr	r3, [pc, #128]	; (800db74 <CheckPick+0x48c>)
 800daf2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	b2db      	uxtb	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1af      	bne.n	800da60 <CheckPick+0x378>
			}
		}

		if(picked_right)
 800db00:	4b1e      	ldr	r3, [pc, #120]	; (800db7c <CheckPick+0x494>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d028      	beq.n	800db5a <CheckPick+0x472>
		{
//			LoadRing()
			switch(go_type_3)
 800db08:	4b20      	ldr	r3, [pc, #128]	; (800db8c <CheckPick+0x4a4>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b03      	cmp	r3, #3
 800db0e:	d81f      	bhi.n	800db50 <CheckPick+0x468>
 800db10:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <CheckPick+0x430>)
 800db12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db16:	bf00      	nop
 800db18:	0800db29 	.word	0x0800db29
 800db1c:	0800db33 	.word	0x0800db33
 800db20:	0800db3d 	.word	0x0800db3d
 800db24:	0800db47 	.word	0x0800db47
			{
				case 0:
					lidar.pos_counter = CENTER_4;
 800db28:	4b19      	ldr	r3, [pc, #100]	; (800db90 <CheckPick+0x4a8>)
 800db2a:	2207      	movs	r2, #7
 800db2c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800db30:	e00f      	b.n	800db52 <CheckPick+0x46a>

				case 1:
					lidar.pos_counter = CENTER_3;
 800db32:	4b17      	ldr	r3, [pc, #92]	; (800db90 <CheckPick+0x4a8>)
 800db34:	2206      	movs	r2, #6
 800db36:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800db3a:	e00a      	b.n	800db52 <CheckPick+0x46a>

				case 2:
					lidar.pos_counter = CENTER;
 800db3c:	4b14      	ldr	r3, [pc, #80]	; (800db90 <CheckPick+0x4a8>)
 800db3e:	2205      	movs	r2, #5
 800db40:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800db44:	e005      	b.n	800db52 <CheckPick+0x46a>

				case 3:
					lidar.pos_counter = CENTER_2;
 800db46:	4b12      	ldr	r3, [pc, #72]	; (800db90 <CheckPick+0x4a8>)
 800db48:	2204      	movs	r2, #4
 800db4a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800db4e:	e000      	b.n	800db52 <CheckPick+0x46a>

				default:
					break;
 800db50:	bf00      	nop
			}
//			osDelay(500);
//			close_servo;
			setSpeedMODN(5.5);
 800db52:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800db56:	f7f7 f98b 	bl	8004e70 <setSpeedMODN>
		}
	}
}
 800db5a:	bf00      	nop
 800db5c:	3790      	adds	r7, #144	; 0x90
 800db5e:	46bd      	mov	sp, r7
 800db60:	bdb0      	pop	{r4, r5, r7, pc}
 800db62:	bf00      	nop
 800db64:	f3af 8000 	nop.w
 800db68:	33333333 	.word	0x33333333
 800db6c:	bfd33333 	.word	0xbfd33333
 800db70:	2000a244 	.word	0x2000a244
 800db74:	20006d4c 	.word	0x20006d4c
 800db78:	40020c00 	.word	0x40020c00
 800db7c:	20007330 	.word	0x20007330
 800db80:	080250b4 	.word	0x080250b4
 800db84:	3f333333 	.word	0x3f333333
 800db88:	40021000 	.word	0x40021000
 800db8c:	20006d48 	.word	0x20006d48
 800db90:	200091a8 	.word	0x200091a8

0800db94 <CheckShoot>:

void CheckShoot()
{
 800db94:	b580      	push	{r7, lr}
 800db96:	af00      	add	r7, sp, #0
//	if(In_ShotDone)
//		led3 = 1;
//	else
//		led3 = 0;

	if(shoot_start && In_ShotDone)
 800db98:	4b3b      	ldr	r3, [pc, #236]	; (800dc88 <CheckShoot+0xf4>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d012      	beq.n	800dbc6 <CheckShoot+0x32>
 800dba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dba4:	4839      	ldr	r0, [pc, #228]	; (800dc8c <CheckShoot+0xf8>)
 800dba6:	f009 fdeb 	bl	8017780 <HAL_GPIO_ReadPin>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <CheckShoot+0x32>
	{
		shoot_done = 1;
 800dbb0:	4b37      	ldr	r3, [pc, #220]	; (800dc90 <CheckShoot+0xfc>)
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800dbb6:	4b34      	ldr	r3, [pc, #208]	; (800dc88 <CheckShoot+0xf4>)
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]
		push_return;
 800dbbc:	4935      	ldr	r1, [pc, #212]	; (800dc94 <CheckShoot+0x100>)
 800dbbe:	4836      	ldr	r0, [pc, #216]	; (800dc98 <CheckShoot+0x104>)
 800dbc0:	f7f3 fae3 	bl	800118a <WriteBDC>
 800dbc4:	e00e      	b.n	800dbe4 <CheckShoot+0x50>
	}
	else if(In_ShotDone)
 800dbc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dbca:	4830      	ldr	r0, [pc, #192]	; (800dc8c <CheckShoot+0xf8>)
 800dbcc:	f009 fdd8 	bl	8017780 <HAL_GPIO_ReadPin>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d106      	bne.n	800dbe4 <CheckShoot+0x50>
	{
		push_return;
 800dbd6:	492f      	ldr	r1, [pc, #188]	; (800dc94 <CheckShoot+0x100>)
 800dbd8:	482f      	ldr	r0, [pc, #188]	; (800dc98 <CheckShoot+0x104>)
 800dbda:	f7f3 fad6 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800dbde:	4b2c      	ldr	r3, [pc, #176]	; (800dc90 <CheckShoot+0xfc>)
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800dbe4:	4b2a      	ldr	r3, [pc, #168]	; (800dc90 <CheckShoot+0xfc>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d02a      	beq.n	800dc42 <CheckShoot+0xae>
 800dbec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dbf0:	4826      	ldr	r0, [pc, #152]	; (800dc8c <CheckShoot+0xf8>)
 800dbf2:	f009 fdc5 	bl	8017780 <HAL_GPIO_ReadPin>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d122      	bne.n	800dc42 <CheckShoot+0xae>
 800dbfc:	4b27      	ldr	r3, [pc, #156]	; (800dc9c <CheckShoot+0x108>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d01e      	beq.n	800dc42 <CheckShoot+0xae>
	{
		wait_load = 0;
 800dc04:	4b25      	ldr	r3, [pc, #148]	; (800dc9c <CheckShoot+0x108>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800dc0a:	4b21      	ldr	r3, [pc, #132]	; (800dc90 <CheckShoot+0xfc>)
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]
		push_stop;
 800dc10:	2100      	movs	r1, #0
 800dc12:	4821      	ldr	r0, [pc, #132]	; (800dc98 <CheckShoot+0x104>)
 800dc14:	f7f3 fab9 	bl	800118a <WriteBDC>
		adjust_servo;
 800dc18:	f44f 7148 	mov.w	r1, #800	; 0x320
 800dc1c:	4820      	ldr	r0, [pc, #128]	; (800dca0 <CheckShoot+0x10c>)
 800dc1e:	f7fd fddf 	bl	800b7e0 <ServoSetPulse>
 800dc22:	f640 0166 	movw	r1, #2150	; 0x866
 800dc26:	481f      	ldr	r0, [pc, #124]	; (800dca4 <CheckShoot+0x110>)
 800dc28:	f7fd fdda 	bl	800b7e0 <ServoSetPulse>
		reload = 1;
 800dc2c:	4b1e      	ldr	r3, [pc, #120]	; (800dca8 <CheckShoot+0x114>)
 800dc2e:	2201      	movs	r2, #1
 800dc30:	601a      	str	r2, [r3, #0]
		pick_manual(4000);
 800dc32:	491e      	ldr	r1, [pc, #120]	; (800dcac <CheckShoot+0x118>)
 800dc34:	481e      	ldr	r0, [pc, #120]	; (800dcb0 <CheckShoot+0x11c>)
 800dc36:	f7f3 faa8 	bl	800118a <WriteBDC>
		must_load = 1;
 800dc3a:	4b1e      	ldr	r3, [pc, #120]	; (800dcb4 <CheckShoot+0x120>)
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	601a      	str	r2, [r3, #0]
//		open_servo;
//	}

//	if(In_ShotReady && !shoot_start)
//		push_stop;
}
 800dc40:	e020      	b.n	800dc84 <CheckShoot+0xf0>
	else if(shoot_done && In_ShotReady)
 800dc42:	4b13      	ldr	r3, [pc, #76]	; (800dc90 <CheckShoot+0xfc>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d01c      	beq.n	800dc84 <CheckShoot+0xf0>
 800dc4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dc4e:	480f      	ldr	r0, [pc, #60]	; (800dc8c <CheckShoot+0xf8>)
 800dc50:	f009 fd96 	bl	8017780 <HAL_GPIO_ReadPin>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d114      	bne.n	800dc84 <CheckShoot+0xf0>
		shoot_done = 0;
 800dc5a:	4b0d      	ldr	r3, [pc, #52]	; (800dc90 <CheckShoot+0xfc>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	601a      	str	r2, [r3, #0]
		push_stop;
 800dc60:	2100      	movs	r1, #0
 800dc62:	480d      	ldr	r0, [pc, #52]	; (800dc98 <CheckShoot+0x104>)
 800dc64:	f7f3 fa91 	bl	800118a <WriteBDC>
		if(wait_load)
 800dc68:	4b0c      	ldr	r3, [pc, #48]	; (800dc9c <CheckShoot+0x108>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d009      	beq.n	800dc84 <CheckShoot+0xf0>
			reload = 1;
 800dc70:	4b0d      	ldr	r3, [pc, #52]	; (800dca8 <CheckShoot+0x114>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	601a      	str	r2, [r3, #0]
			pick_manual(4000);
 800dc76:	490d      	ldr	r1, [pc, #52]	; (800dcac <CheckShoot+0x118>)
 800dc78:	480d      	ldr	r0, [pc, #52]	; (800dcb0 <CheckShoot+0x11c>)
 800dc7a:	f7f3 fa86 	bl	800118a <WriteBDC>
			wait_load = 0;
 800dc7e:	4b07      	ldr	r3, [pc, #28]	; (800dc9c <CheckShoot+0x108>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]
}
 800dc84:	bf00      	nop
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	20009454 	.word	0x20009454
 800dc8c:	40021000 	.word	0x40021000
 800dc90:	200090f0 	.word	0x200090f0
 800dc94:	ffffb1e1 	.word	0xffffb1e1
 800dc98:	2000989c 	.word	0x2000989c
 800dc9c:	200075a4 	.word	0x200075a4
 800dca0:	200079e0 	.word	0x200079e0
 800dca4:	2000a5e8 	.word	0x2000a5e8
 800dca8:	200078c0 	.word	0x200078c0
 800dcac:	fffff060 	.word	0xfffff060
 800dcb0:	20007880 	.word	0x20007880
 800dcb4:	2000988c 	.word	0x2000988c

0800dcb8 <CheckLoad>:

void CheckLoad()
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800dcbc:	4b6e      	ldr	r3, [pc, #440]	; (800de78 <CheckLoad+0x1c0>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d103      	bne.n	800dccc <CheckLoad+0x14>
 800dcc4:	4b6d      	ldr	r3, [pc, #436]	; (800de7c <CheckLoad+0x1c4>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d031      	beq.n	800dd30 <CheckLoad+0x78>
	{
		if(pick_enc >= 7000 && !load_stop_once)
 800dccc:	4b6c      	ldr	r3, [pc, #432]	; (800de80 <CheckLoad+0x1c8>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f641 3257 	movw	r2, #6999	; 0x1b57
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	dd1b      	ble.n	800dd10 <CheckLoad+0x58>
 800dcd8:	4b6a      	ldr	r3, [pc, #424]	; (800de84 <CheckLoad+0x1cc>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d117      	bne.n	800dd10 <CheckLoad+0x58>
		{
			pick_stop;
 800dce0:	2100      	movs	r1, #0
 800dce2:	4869      	ldr	r0, [pc, #420]	; (800de88 <CheckLoad+0x1d0>)
 800dce4:	f7f3 fa51 	bl	800118a <WriteBDC>
			osDelay(200);
 800dce8:	20c8      	movs	r0, #200	; 0xc8
 800dcea:	f00e fc03 	bl	801c4f4 <osDelay>
			pick_manual(4000);
 800dcee:	4967      	ldr	r1, [pc, #412]	; (800de8c <CheckLoad+0x1d4>)
 800dcf0:	4865      	ldr	r0, [pc, #404]	; (800de88 <CheckLoad+0x1d0>)
 800dcf2:	f7f3 fa4a 	bl	800118a <WriteBDC>
			adjust_servo;
 800dcf6:	f44f 7148 	mov.w	r1, #800	; 0x320
 800dcfa:	4865      	ldr	r0, [pc, #404]	; (800de90 <CheckLoad+0x1d8>)
 800dcfc:	f7fd fd70 	bl	800b7e0 <ServoSetPulse>
 800dd00:	f640 0166 	movw	r1, #2150	; 0x866
 800dd04:	4863      	ldr	r0, [pc, #396]	; (800de94 <CheckLoad+0x1dc>)
 800dd06:	f7fd fd6b 	bl	800b7e0 <ServoSetPulse>
//			close_servo;
			load_stop_once = 1;
 800dd0a:	4b5e      	ldr	r3, [pc, #376]	; (800de84 <CheckLoad+0x1cc>)
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	601a      	str	r2, [r3, #0]
		}

		if(pick_enc >= 13000)
 800dd10:	4b5b      	ldr	r3, [pc, #364]	; (800de80 <CheckLoad+0x1c8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f243 22c7 	movw	r2, #12999	; 0x32c7
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	dd09      	ble.n	800dd30 <CheckLoad+0x78>
		{
			load_start = 0;
 800dd1c:	4b56      	ldr	r3, [pc, #344]	; (800de78 <CheckLoad+0x1c0>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
			reload = 0;
 800dd22:	4b56      	ldr	r3, [pc, #344]	; (800de7c <CheckLoad+0x1c4>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]
			pick_stop;
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4857      	ldr	r0, [pc, #348]	; (800de88 <CheckLoad+0x1d0>)
 800dd2c:	f7f3 fa2d 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 6000)
 800dd30:	4b51      	ldr	r3, [pc, #324]	; (800de78 <CheckLoad+0x1c0>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d04b      	beq.n	800ddd0 <CheckLoad+0x118>
 800dd38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dd3c:	4856      	ldr	r0, [pc, #344]	; (800de98 <CheckLoad+0x1e0>)
 800dd3e:	f009 fd1f 	bl	8017780 <HAL_GPIO_ReadPin>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d143      	bne.n	800ddd0 <CheckLoad+0x118>
 800dd48:	4b4d      	ldr	r3, [pc, #308]	; (800de80 <CheckLoad+0x1c8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f241 726f 	movw	r2, #5999	; 0x176f
 800dd50:	4293      	cmp	r3, r2
 800dd52:	dd3d      	ble.n	800ddd0 <CheckLoad+0x118>
	{
		load_start = 0;
 800dd54:	4b48      	ldr	r3, [pc, #288]	; (800de78 <CheckLoad+0x1c0>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	601a      	str	r2, [r3, #0]
		pick_enc_buf = pick_enc;
 800dd5a:	4b49      	ldr	r3, [pc, #292]	; (800de80 <CheckLoad+0x1c8>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a4f      	ldr	r2, [pc, #316]	; (800de9c <CheckLoad+0x1e4>)
 800dd60:	6013      	str	r3, [r2, #0]
//		{
//			while(abs(pick_enc - pick_enc_buf) < RedPickMore)
//				pick_manual(2500);
//		}

		if(blue)
 800dd62:	4b4f      	ldr	r3, [pc, #316]	; (800dea0 <CheckLoad+0x1e8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d018      	beq.n	800dd9c <CheckLoad+0xe4>
		{
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800dd6a:	e004      	b.n	800dd76 <CheckLoad+0xbe>
				pick_manual(-2500);
 800dd6c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800dd70:	4845      	ldr	r0, [pc, #276]	; (800de88 <CheckLoad+0x1d0>)
 800dd72:	f7f3 fa0a 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800dd76:	4b49      	ldr	r3, [pc, #292]	; (800de9c <CheckLoad+0x1e4>)
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	4b41      	ldr	r3, [pc, #260]	; (800de80 <CheckLoad+0x1c8>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800dd84:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800dd88:	4b46      	ldr	r3, [pc, #280]	; (800dea4 <CheckLoad+0x1ec>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	dbed      	blt.n	800dd6c <CheckLoad+0xb4>
 800dd90:	e011      	b.n	800ddb6 <CheckLoad+0xfe>
		}
		else
		{
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
				pick_manual(-2500);
 800dd92:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800dd96:	483c      	ldr	r0, [pc, #240]	; (800de88 <CheckLoad+0x1d0>)
 800dd98:	f7f3 f9f7 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
 800dd9c:	4b3f      	ldr	r3, [pc, #252]	; (800de9c <CheckLoad+0x1e4>)
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	4b37      	ldr	r3, [pc, #220]	; (800de80 <CheckLoad+0x1c8>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ddaa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ddae:	4b3e      	ldr	r3, [pc, #248]	; (800dea8 <CheckLoad+0x1f0>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	dbed      	blt.n	800dd92 <CheckLoad+0xda>
		}

		pick_tol = 100;
 800ddb6:	4b3d      	ldr	r3, [pc, #244]	; (800deac <CheckLoad+0x1f4>)
 800ddb8:	2264      	movs	r2, #100	; 0x64
 800ddba:	601a      	str	r2, [r3, #0]
		pick_stop;
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	4832      	ldr	r0, [pc, #200]	; (800de88 <CheckLoad+0x1d0>)
 800ddc0:	f7f3 f9e3 	bl	800118a <WriteBDC>

		if(mode == AUTO)
 800ddc4:	4b3a      	ldr	r3, [pc, #232]	; (800deb0 <CheckLoad+0x1f8>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b01      	cmp	r3, #1
 800ddca:	d101      	bne.n	800ddd0 <CheckLoad+0x118>
			AutoLoadRing();
 800ddcc:	f000 f8a6 	bl	800df1c <AutoLoadRing>
	}

	if(reload && In_Load)
 800ddd0:	4b2a      	ldr	r3, [pc, #168]	; (800de7c <CheckLoad+0x1c4>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d045      	beq.n	800de64 <CheckLoad+0x1ac>
 800ddd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dddc:	482e      	ldr	r0, [pc, #184]	; (800de98 <CheckLoad+0x1e0>)
 800ddde:	f009 fccf 	bl	8017780 <HAL_GPIO_ReadPin>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d13d      	bne.n	800de64 <CheckLoad+0x1ac>
	{
		pick_enc_buf = pick_enc;
 800dde8:	4b25      	ldr	r3, [pc, #148]	; (800de80 <CheckLoad+0x1c8>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a2b      	ldr	r2, [pc, #172]	; (800de9c <CheckLoad+0x1e4>)
 800ddee:	6013      	str	r3, [r2, #0]
//		{
//			while(abs(pick_enc - pick_enc_buf) < RedPickMore)
//				pick_manual(2500);
//		}

		if(blue)
 800ddf0:	4b2b      	ldr	r3, [pc, #172]	; (800dea0 <CheckLoad+0x1e8>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d018      	beq.n	800de2a <CheckLoad+0x172>
		{
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800ddf8:	e004      	b.n	800de04 <CheckLoad+0x14c>
				pick_manual(-2500);
 800ddfa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800ddfe:	4822      	ldr	r0, [pc, #136]	; (800de88 <CheckLoad+0x1d0>)
 800de00:	f7f3 f9c3 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800de04:	4b25      	ldr	r3, [pc, #148]	; (800de9c <CheckLoad+0x1e4>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	4b1d      	ldr	r3, [pc, #116]	; (800de80 <CheckLoad+0x1c8>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800de12:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800de16:	4b23      	ldr	r3, [pc, #140]	; (800dea4 <CheckLoad+0x1ec>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	dbed      	blt.n	800ddfa <CheckLoad+0x142>
 800de1e:	e011      	b.n	800de44 <CheckLoad+0x18c>
		}
		else
		{
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
				pick_manual(-2500);
 800de20:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800de24:	4818      	ldr	r0, [pc, #96]	; (800de88 <CheckLoad+0x1d0>)
 800de26:	f7f3 f9b0 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
 800de2a:	4b1c      	ldr	r3, [pc, #112]	; (800de9c <CheckLoad+0x1e4>)
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	4b14      	ldr	r3, [pc, #80]	; (800de80 <CheckLoad+0x1c8>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800de38:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800de3c:	4b1a      	ldr	r3, [pc, #104]	; (800dea8 <CheckLoad+0x1f0>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	429a      	cmp	r2, r3
 800de42:	dbed      	blt.n	800de20 <CheckLoad+0x168>
		}
//		pick_tol = 100;
		reload = 0;
 800de44:	4b0d      	ldr	r3, [pc, #52]	; (800de7c <CheckLoad+0x1c4>)
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
		must_load = 0;
 800de4a:	4b1a      	ldr	r3, [pc, #104]	; (800deb4 <CheckLoad+0x1fc>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	601a      	str	r2, [r3, #0]
		pick_stop;
 800de50:	2100      	movs	r1, #0
 800de52:	480d      	ldr	r0, [pc, #52]	; (800de88 <CheckLoad+0x1d0>)
 800de54:	f7f3 f999 	bl	800118a <WriteBDC>

		if(mode == AUTO)
 800de58:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <CheckLoad+0x1f8>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d101      	bne.n	800de64 <CheckLoad+0x1ac>
			AutoLoadRing();
 800de60:	f000 f85c 	bl	800df1c <AutoLoadRing>

//	if(loaded >= 8)
//	{
//		load_adjust_servo;
//	}
	if(loaded >= 10)
 800de64:	4b14      	ldr	r3, [pc, #80]	; (800deb8 <CheckLoad+0x200>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b09      	cmp	r3, #9
 800de6a:	dd02      	ble.n	800de72 <CheckLoad+0x1ba>
		loaded = 0;
 800de6c:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <CheckLoad+0x200>)
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]

}
 800de72:	bf00      	nop
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	20007464 	.word	0x20007464
 800de7c:	200078c0 	.word	0x200078c0
 800de80:	20006c10 	.word	0x20006c10
 800de84:	20009ba0 	.word	0x20009ba0
 800de88:	20007880 	.word	0x20007880
 800de8c:	fffff060 	.word	0xfffff060
 800de90:	200079e0 	.word	0x200079e0
 800de94:	2000a5e8 	.word	0x2000a5e8
 800de98:	40021000 	.word	0x40021000
 800de9c:	20009e6c 	.word	0x20009e6c
 800dea0:	20006a4c 	.word	0x20006a4c
 800dea4:	2000665c 	.word	0x2000665c
 800dea8:	2000a534 	.word	0x2000a534
 800deac:	200073d0 	.word	0x200073d0
 800deb0:	20009458 	.word	0x20009458
 800deb4:	2000988c 	.word	0x2000988c
 800deb8:	200095b0 	.word	0x200095b0

0800debc <Checking>:
	}

}

void Checking()
{
 800debc:	b580      	push	{r7, lr}
 800debe:	af00      	add	r7, sp, #0
	CheckShoot();
 800dec0:	f7ff fe68 	bl	800db94 <CheckShoot>
	CheckLoad();
 800dec4:	f7ff fef8 	bl	800dcb8 <CheckLoad>
	CheckPick();
 800dec8:	f7ff fc0e 	bl	800d6e8 <CheckPick>
	CheckPitch();
 800decc:	f7ff fbc8 	bl	800d660 <CheckPitch>
}
 800ded0:	bf00      	nop
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <LoadRing>:

void LoadRing(void)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	af00      	add	r7, sp, #0
	load_start = 1;
 800ded8:	4b05      	ldr	r3, [pc, #20]	; (800def0 <LoadRing+0x1c>)
 800deda:	2201      	movs	r2, #1
 800dedc:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800dede:	4b05      	ldr	r3, [pc, #20]	; (800def4 <LoadRing+0x20>)
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]
	pick_up;
 800dee4:	4904      	ldr	r1, [pc, #16]	; (800def8 <LoadRing+0x24>)
 800dee6:	4805      	ldr	r0, [pc, #20]	; (800defc <LoadRing+0x28>)
 800dee8:	f7f3 f94f 	bl	800118a <WriteBDC>
}
 800deec:	bf00      	nop
 800deee:	bd80      	pop	{r7, pc}
 800def0:	20007464 	.word	0x20007464
 800def4:	20009ba0 	.word	0x20009ba0
 800def8:	ffffb1e1 	.word	0xffffb1e1
 800defc:	20007880 	.word	0x20007880

0800df00 <StopAutoPP>:

void StopAutoPP(void)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800df04:	4803      	ldr	r0, [pc, #12]	; (800df14 <StopAutoPP+0x14>)
 800df06:	f7f8 f9e3 	bl	80062d0 <PP_stop>
	RNSStop(&rns);
 800df0a:	4803      	ldr	r0, [pc, #12]	; (800df18 <StopAutoPP+0x18>)
 800df0c:	f7fc ffd8 	bl	800aec0 <RNSStop>
}
 800df10:	bf00      	nop
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20006d4c 	.word	0x20006d4c
 800df18:	2000907c 	.word	0x2000907c

0800df1c <AutoLoadRing>:

void AutoLoadRing(void)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
	cylinder_load;
 800df20:	4a0d      	ldr	r2, [pc, #52]	; (800df58 <AutoLoadRing+0x3c>)
 800df22:	7f13      	ldrb	r3, [r2, #28]
 800df24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df28:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800df2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df2e:	f00e fae1 	bl	801c4f4 <osDelay>
	cylinder_retract;
 800df32:	4a09      	ldr	r2, [pc, #36]	; (800df58 <AutoLoadRing+0x3c>)
 800df34:	7f13      	ldrb	r3, [r2, #28]
 800df36:	f36f 1386 	bfc	r3, #6, #1
 800df3a:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800df3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df40:	f00e fad8 	bl	801c4f4 <osDelay>
	loaded++;
 800df44:	4b05      	ldr	r3, [pc, #20]	; (800df5c <AutoLoadRing+0x40>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	3301      	adds	r3, #1
 800df4a:	4a04      	ldr	r2, [pc, #16]	; (800df5c <AutoLoadRing+0x40>)
 800df4c:	6013      	str	r3, [r2, #0]

	AdjustRings();
 800df4e:	f000 f807 	bl	800df60 <AdjustRings>
}
 800df52:	bf00      	nop
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	200097dc 	.word	0x200097dc
 800df5c:	200095b0 	.word	0x200095b0

0800df60 <AdjustRings>:

void AdjustRings(void)
{
 800df60:	b480      	push	{r7}
 800df62:	af00      	add	r7, sp, #0
	if(load_adjust)
 800df64:	4b05      	ldr	r3, [pc, #20]	; (800df7c <AdjustRings+0x1c>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <AdjustRings+0x12>
	{
		servo_enb = 1;
 800df6c:	4b04      	ldr	r3, [pc, #16]	; (800df80 <AdjustRings+0x20>)
 800df6e:	2201      	movs	r2, #1
 800df70:	601a      	str	r2, [r3, #0]
	}
}
 800df72:	bf00      	nop
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr
 800df7c:	200095c4 	.word	0x200095c4
 800df80:	2000a7e8 	.word	0x2000a7e8

0800df84 <ResetCoordinate>:

void ResetCoordinate(void)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800df88:	211c      	movs	r1, #28
 800df8a:	4805      	ldr	r0, [pc, #20]	; (800dfa0 <ResetCoordinate+0x1c>)
 800df8c:	f7fd f8b6 	bl	800b0fc <RNSSet>
	PP_reset(&pp);
 800df90:	4804      	ldr	r0, [pc, #16]	; (800dfa4 <ResetCoordinate+0x20>)
 800df92:	f7f8 f9c9 	bl	8006328 <PP_reset>
	osDelay(50);
 800df96:	2032      	movs	r0, #50	; 0x32
 800df98:	f00e faac 	bl	801c4f4 <osDelay>
}
 800df9c:	bf00      	nop
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	2000907c 	.word	0x2000907c
 800dfa4:	20006d4c 	.word	0x20006d4c

0800dfa8 <ResetPickEnc>:

void ResetPickEnc(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800dfac:	2001      	movs	r0, #1
 800dfae:	f7f3 fe11 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800dfb2:	4b02      	ldr	r3, [pc, #8]	; (800dfbc <ResetPickEnc+0x14>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	601a      	str	r2, [r3, #0]
}
 800dfb8:	bf00      	nop
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	20006c10 	.word	0x20006c10

0800dfc0 <enq>:

void enq(void) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_LSR_DIST, &rns);
 800dfc4:	490e      	ldr	r1, [pc, #56]	; (800e000 <enq+0x40>)
 800dfc6:	2067      	movs	r0, #103	; 0x67
 800dfc8:	f7fd fa52 	bl	800b470 <RNSEnquire>
	lsrL.dist = rns.enq.enq_buffer[0].data;
 800dfcc:	4b0c      	ldr	r3, [pc, #48]	; (800e000 <enq+0x40>)
 800dfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd0:	4a0c      	ldr	r2, [pc, #48]	; (800e004 <enq+0x44>)
 800dfd2:	61d3      	str	r3, [r2, #28]
	lsrR.dist = rns.enq.enq_buffer[1].data;
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	; (800e000 <enq+0x40>)
 800dfd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd8:	4a0b      	ldr	r2, [pc, #44]	; (800e008 <enq+0x48>)
 800dfda:	61d3      	str	r3, [r2, #28]

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800dfdc:	4908      	ldr	r1, [pc, #32]	; (800e000 <enq+0x40>)
 800dfde:	2069      	movs	r0, #105	; 0x69
 800dfe0:	f7fd fa46 	bl	800b470 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800dfe4:	4b06      	ldr	r3, [pc, #24]	; (800e000 <enq+0x40>)
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe8:	4a08      	ldr	r2, [pc, #32]	; (800e00c <enq+0x4c>)
 800dfea:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800dfec:	4b04      	ldr	r3, [pc, #16]	; (800e000 <enq+0x40>)
 800dfee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dff0:	4a07      	ldr	r2, [pc, #28]	; (800e010 <enq+0x50>)
 800dff2:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800dff4:	4b02      	ldr	r3, [pc, #8]	; (800e000 <enq+0x40>)
 800dff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dff8:	4a06      	ldr	r2, [pc, #24]	; (800e014 <enq+0x54>)
 800dffa:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800dffc:	bf00      	nop
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	2000907c 	.word	0x2000907c
 800e004:	20007730 	.word	0x20007730
 800e008:	20009600 	.word	0x20009600
 800e00c:	20009bdc 	.word	0x20009bdc
 800e010:	20009a30 	.word	0x20009a30
 800e014:	20009b94 	.word	0x20009b94

0800e018 <tune>:

void tune(void)
{
 800e018:	b5b0      	push	{r4, r5, r7, lr}
 800e01a:	af00      	add	r7, sp, #0
	if(ps4.button == UP)
 800e01c:	4bb0      	ldr	r3, [pc, #704]	; (800e2e0 <tune+0x2c8>)
 800e01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e020:	2b10      	cmp	r3, #16
 800e022:	d117      	bne.n	800e054 <tune+0x3c>
	{
		while(ps4.button == UP);
 800e024:	bf00      	nop
 800e026:	4bae      	ldr	r3, [pc, #696]	; (800e2e0 <tune+0x2c8>)
 800e028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e02a:	2b10      	cmp	r3, #16
 800e02c:	d0fb      	beq.n	800e026 <tune+0xe>
//		tune_p = 1;
//		tune_i = 0;
//		tune_d = 0;
		if(blue)
 800e02e:	4bad      	ldr	r3, [pc, #692]	; (800e2e4 <tune+0x2cc>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d007      	beq.n	800e046 <tune+0x2e>
			BluePickLess = pick_enc_buf - pick_enc;
 800e036:	4bac      	ldr	r3, [pc, #688]	; (800e2e8 <tune+0x2d0>)
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	4bac      	ldr	r3, [pc, #688]	; (800e2ec <tune+0x2d4>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	4aab      	ldr	r2, [pc, #684]	; (800e2f0 <tune+0x2d8>)
 800e042:	6013      	str	r3, [r2, #0]
 800e044:	e006      	b.n	800e054 <tune+0x3c>
		else
			RedPickLess = pick_enc_buf - pick_enc;
 800e046:	4ba8      	ldr	r3, [pc, #672]	; (800e2e8 <tune+0x2d0>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	4ba8      	ldr	r3, [pc, #672]	; (800e2ec <tune+0x2d4>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	4aa8      	ldr	r2, [pc, #672]	; (800e2f4 <tune+0x2dc>)
 800e052:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == DOWN)
 800e054:	4ba2      	ldr	r3, [pc, #648]	; (800e2e0 <tune+0x2c8>)
 800e056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e058:	2b40      	cmp	r3, #64	; 0x40
 800e05a:	d117      	bne.n	800e08c <tune+0x74>
	{
		while(ps4.button == DOWN);
 800e05c:	bf00      	nop
 800e05e:	4ba0      	ldr	r3, [pc, #640]	; (800e2e0 <tune+0x2c8>)
 800e060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e062:	2b40      	cmp	r3, #64	; 0x40
 800e064:	d0fb      	beq.n	800e05e <tune+0x46>
		if(blue)
 800e066:	4b9f      	ldr	r3, [pc, #636]	; (800e2e4 <tune+0x2cc>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d007      	beq.n	800e07e <tune+0x66>
			BluePickMore = pick_enc - pick_enc_buf;
 800e06e:	4b9f      	ldr	r3, [pc, #636]	; (800e2ec <tune+0x2d4>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	4b9d      	ldr	r3, [pc, #628]	; (800e2e8 <tune+0x2d0>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	1ad3      	subs	r3, r2, r3
 800e078:	4a9f      	ldr	r2, [pc, #636]	; (800e2f8 <tune+0x2e0>)
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	e006      	b.n	800e08c <tune+0x74>
		else
			RedPickMore = pick_enc - pick_enc_buf;
 800e07e:	4b9b      	ldr	r3, [pc, #620]	; (800e2ec <tune+0x2d4>)
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	4b99      	ldr	r3, [pc, #612]	; (800e2e8 <tune+0x2d0>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	1ad3      	subs	r3, r2, r3
 800e088:	4a9c      	ldr	r2, [pc, #624]	; (800e2fc <tune+0x2e4>)
 800e08a:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == LEFT)
 800e08c:	4b94      	ldr	r3, [pc, #592]	; (800e2e0 <tune+0x2c8>)
 800e08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e090:	2b80      	cmp	r3, #128	; 0x80
 800e092:	d10d      	bne.n	800e0b0 <tune+0x98>
	{
		while(ps4.button == LEFT);
 800e094:	bf00      	nop
 800e096:	4b92      	ldr	r3, [pc, #584]	; (800e2e0 <tune+0x2c8>)
 800e098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e09a:	2b80      	cmp	r3, #128	; 0x80
 800e09c:	d0fb      	beq.n	800e096 <tune+0x7e>
		tune_p = 0;
 800e09e:	4b98      	ldr	r3, [pc, #608]	; (800e300 <tune+0x2e8>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800e0a4:	4b97      	ldr	r3, [pc, #604]	; (800e304 <tune+0x2ec>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800e0aa:	4b97      	ldr	r3, [pc, #604]	; (800e308 <tune+0x2f0>)
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800e0b0:	4b8b      	ldr	r3, [pc, #556]	; (800e2e0 <tune+0x2c8>)
 800e0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b4:	2b20      	cmp	r3, #32
 800e0b6:	d110      	bne.n	800e0da <tune+0xc2>
	{
		while(ps4.button == RIGHT);
 800e0b8:	bf00      	nop
 800e0ba:	4b89      	ldr	r3, [pc, #548]	; (800e2e0 <tune+0x2c8>)
 800e0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0be:	2b20      	cmp	r3, #32
 800e0c0:	d0fb      	beq.n	800e0ba <tune+0xa2>
		wheel++;
 800e0c2:	4b92      	ldr	r3, [pc, #584]	; (800e30c <tune+0x2f4>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	4a90      	ldr	r2, [pc, #576]	; (800e30c <tune+0x2f4>)
 800e0ca:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800e0cc:	4b8f      	ldr	r3, [pc, #572]	; (800e30c <tune+0x2f4>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b05      	cmp	r3, #5
 800e0d2:	dd02      	ble.n	800e0da <tune+0xc2>
			wheel = 1;
 800e0d4:	4b8d      	ldr	r3, [pc, #564]	; (800e30c <tune+0x2f4>)
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800e0da:	4b89      	ldr	r3, [pc, #548]	; (800e300 <tune+0x2e8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 809e 	beq.w	800e220 <tune+0x208>
	{
		switch(wheel)
 800e0e4:	4b89      	ldr	r3, [pc, #548]	; (800e30c <tune+0x2f4>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	f200 8200 	bhi.w	800e4f0 <tune+0x4d8>
 800e0f0:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <tune+0xe0>)
 800e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f6:	bf00      	nop
 800e0f8:	0800e109 	.word	0x0800e109
 800e0fc:	0800e14f 	.word	0x0800e14f
 800e100:	0800e195 	.word	0x0800e195
 800e104:	0800e1db 	.word	0x0800e1db
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800e108:	4b75      	ldr	r3, [pc, #468]	; (800e2e0 <tune+0x2c8>)
 800e10a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7f2 fa1b 	bl	8000548 <__aeabi_f2d>
 800e112:	a371      	add	r3, pc, #452	; (adr r3, 800e2d8 <tune+0x2c0>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f7f2 fa6e 	bl	80005f8 <__aeabi_dmul>
 800e11c:	4602      	mov	r2, r0
 800e11e:	460b      	mov	r3, r1
 800e120:	4614      	mov	r4, r2
 800e122:	461d      	mov	r5, r3
 800e124:	4b7a      	ldr	r3, [pc, #488]	; (800e310 <tune+0x2f8>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f2 fa0d 	bl	8000548 <__aeabi_f2d>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4620      	mov	r0, r4
 800e134:	4629      	mov	r1, r5
 800e136:	f7f2 f8a9 	bl	800028c <__adddf3>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4610      	mov	r0, r2
 800e140:	4619      	mov	r1, r3
 800e142:	f7f2 fd51 	bl	8000be8 <__aeabi_d2f>
 800e146:	4603      	mov	r3, r0
 800e148:	4a71      	ldr	r2, [pc, #452]	; (800e310 <tune+0x2f8>)
 800e14a:	6013      	str	r3, [r2, #0]
			break;
 800e14c:	e1d0      	b.n	800e4f0 <tune+0x4d8>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800e14e:	4b64      	ldr	r3, [pc, #400]	; (800e2e0 <tune+0x2c8>)
 800e150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e152:	4618      	mov	r0, r3
 800e154:	f7f2 f9f8 	bl	8000548 <__aeabi_f2d>
 800e158:	a35f      	add	r3, pc, #380	; (adr r3, 800e2d8 <tune+0x2c0>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f7f2 fa4b 	bl	80005f8 <__aeabi_dmul>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4614      	mov	r4, r2
 800e168:	461d      	mov	r5, r3
 800e16a:	4b6a      	ldr	r3, [pc, #424]	; (800e314 <tune+0x2fc>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f2 f9ea 	bl	8000548 <__aeabi_f2d>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	4620      	mov	r0, r4
 800e17a:	4629      	mov	r1, r5
 800e17c:	f7f2 f886 	bl	800028c <__adddf3>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4610      	mov	r0, r2
 800e186:	4619      	mov	r1, r3
 800e188:	f7f2 fd2e 	bl	8000be8 <__aeabi_d2f>
 800e18c:	4603      	mov	r3, r0
 800e18e:	4a61      	ldr	r2, [pc, #388]	; (800e314 <tune+0x2fc>)
 800e190:	6013      	str	r3, [r2, #0]
			break;
 800e192:	e1ad      	b.n	800e4f0 <tune+0x4d8>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800e194:	4b52      	ldr	r3, [pc, #328]	; (800e2e0 <tune+0x2c8>)
 800e196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e198:	4618      	mov	r0, r3
 800e19a:	f7f2 f9d5 	bl	8000548 <__aeabi_f2d>
 800e19e:	a34e      	add	r3, pc, #312	; (adr r3, 800e2d8 <tune+0x2c0>)
 800e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a4:	f7f2 fa28 	bl	80005f8 <__aeabi_dmul>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	4614      	mov	r4, r2
 800e1ae:	461d      	mov	r5, r3
 800e1b0:	4b59      	ldr	r3, [pc, #356]	; (800e318 <tune+0x300>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f2 f9c7 	bl	8000548 <__aeabi_f2d>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	460b      	mov	r3, r1
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 f863 	bl	800028c <__adddf3>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	f7f2 fd0b 	bl	8000be8 <__aeabi_d2f>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	4a50      	ldr	r2, [pc, #320]	; (800e318 <tune+0x300>)
 800e1d6:	6013      	str	r3, [r2, #0]
			break;
 800e1d8:	e18a      	b.n	800e4f0 <tune+0x4d8>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800e1da:	4b41      	ldr	r3, [pc, #260]	; (800e2e0 <tune+0x2c8>)
 800e1dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7f2 f9b2 	bl	8000548 <__aeabi_f2d>
 800e1e4:	a33c      	add	r3, pc, #240	; (adr r3, 800e2d8 <tune+0x2c0>)
 800e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ea:	f7f2 fa05 	bl	80005f8 <__aeabi_dmul>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4614      	mov	r4, r2
 800e1f4:	461d      	mov	r5, r3
 800e1f6:	4b49      	ldr	r3, [pc, #292]	; (800e31c <tune+0x304>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f2 f9a4 	bl	8000548 <__aeabi_f2d>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4620      	mov	r0, r4
 800e206:	4629      	mov	r1, r5
 800e208:	f7f2 f840 	bl	800028c <__adddf3>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	4610      	mov	r0, r2
 800e212:	4619      	mov	r1, r3
 800e214:	f7f2 fce8 	bl	8000be8 <__aeabi_d2f>
 800e218:	4603      	mov	r3, r0
 800e21a:	4a40      	ldr	r2, [pc, #256]	; (800e31c <tune+0x304>)
 800e21c:	6013      	str	r3, [r2, #0]
			break;
 800e21e:	e167      	b.n	800e4f0 <tune+0x4d8>
		}
	}
	else if(tune_i)
 800e220:	4b38      	ldr	r3, [pc, #224]	; (800e304 <tune+0x2ec>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 80c5 	beq.w	800e3b4 <tune+0x39c>
	{
		switch(wheel)
 800e22a:	4b38      	ldr	r3, [pc, #224]	; (800e30c <tune+0x2f4>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	3b01      	subs	r3, #1
 800e230:	2b03      	cmp	r3, #3
 800e232:	f200 815d 	bhi.w	800e4f0 <tune+0x4d8>
 800e236:	a201      	add	r2, pc, #4	; (adr r2, 800e23c <tune+0x224>)
 800e238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23c:	0800e24d 	.word	0x0800e24d
 800e240:	0800e293 	.word	0x0800e293
 800e244:	0800e329 	.word	0x0800e329
 800e248:	0800e36f 	.word	0x0800e36f
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800e24c:	4b24      	ldr	r3, [pc, #144]	; (800e2e0 <tune+0x2c8>)
 800e24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e250:	4618      	mov	r0, r3
 800e252:	f7f2 f979 	bl	8000548 <__aeabi_f2d>
 800e256:	a320      	add	r3, pc, #128	; (adr r3, 800e2d8 <tune+0x2c0>)
 800e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25c:	f7f2 f9cc 	bl	80005f8 <__aeabi_dmul>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4614      	mov	r4, r2
 800e266:	461d      	mov	r5, r3
 800e268:	4b2d      	ldr	r3, [pc, #180]	; (800e320 <tune+0x308>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7f2 f96b 	bl	8000548 <__aeabi_f2d>
 800e272:	4602      	mov	r2, r0
 800e274:	460b      	mov	r3, r1
 800e276:	4620      	mov	r0, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	f7f2 f807 	bl	800028c <__adddf3>
 800e27e:	4602      	mov	r2, r0
 800e280:	460b      	mov	r3, r1
 800e282:	4610      	mov	r0, r2
 800e284:	4619      	mov	r1, r3
 800e286:	f7f2 fcaf 	bl	8000be8 <__aeabi_d2f>
 800e28a:	4603      	mov	r3, r0
 800e28c:	4a24      	ldr	r2, [pc, #144]	; (800e320 <tune+0x308>)
 800e28e:	6013      	str	r3, [r2, #0]
			break;
 800e290:	e12e      	b.n	800e4f0 <tune+0x4d8>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800e292:	4b13      	ldr	r3, [pc, #76]	; (800e2e0 <tune+0x2c8>)
 800e294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e296:	4618      	mov	r0, r3
 800e298:	f7f2 f956 	bl	8000548 <__aeabi_f2d>
 800e29c:	a30e      	add	r3, pc, #56	; (adr r3, 800e2d8 <tune+0x2c0>)
 800e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a2:	f7f2 f9a9 	bl	80005f8 <__aeabi_dmul>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	4614      	mov	r4, r2
 800e2ac:	461d      	mov	r5, r3
 800e2ae:	4b1d      	ldr	r3, [pc, #116]	; (800e324 <tune+0x30c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f2 f948 	bl	8000548 <__aeabi_f2d>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4629      	mov	r1, r5
 800e2c0:	f7f1 ffe4 	bl	800028c <__adddf3>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f7f2 fc8c 	bl	8000be8 <__aeabi_d2f>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	4a14      	ldr	r2, [pc, #80]	; (800e324 <tune+0x30c>)
 800e2d4:	6013      	str	r3, [r2, #0]
			break;
 800e2d6:	e10b      	b.n	800e4f0 <tune+0x4d8>
 800e2d8:	eb1c432d 	.word	0xeb1c432d
 800e2dc:	3f1a36e2 	.word	0x3f1a36e2
 800e2e0:	2000a244 	.word	0x2000a244
 800e2e4:	20006a4c 	.word	0x20006a4c
 800e2e8:	20009e6c 	.word	0x20009e6c
 800e2ec:	20006c10 	.word	0x20006c10
 800e2f0:	2000665c 	.word	0x2000665c
 800e2f4:	2000a534 	.word	0x2000a534
 800e2f8:	2000a60c 	.word	0x2000a60c
 800e2fc:	2000a7c8 	.word	0x2000a7c8
 800e300:	20007498 	.word	0x20007498
 800e304:	2000732c 	.word	0x2000732c
 800e308:	20009a34 	.word	0x20009a34
 800e30c:	200064fc 	.word	0x200064fc
 800e310:	2000a564 	.word	0x2000a564
 800e314:	200076d4 	.word	0x200076d4
 800e318:	20009894 	.word	0x20009894
 800e31c:	20009fe0 	.word	0x20009fe0
 800e320:	20007324 	.word	0x20007324
 800e324:	200095b8 	.word	0x200095b8
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800e328:	4b9b      	ldr	r3, [pc, #620]	; (800e598 <tune+0x580>)
 800e32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7f2 f90b 	bl	8000548 <__aeabi_f2d>
 800e332:	a395      	add	r3, pc, #596	; (adr r3, 800e588 <tune+0x570>)
 800e334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e338:	f7f2 f95e 	bl	80005f8 <__aeabi_dmul>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	4614      	mov	r4, r2
 800e342:	461d      	mov	r5, r3
 800e344:	4b95      	ldr	r3, [pc, #596]	; (800e59c <tune+0x584>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4618      	mov	r0, r3
 800e34a:	f7f2 f8fd 	bl	8000548 <__aeabi_f2d>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	4620      	mov	r0, r4
 800e354:	4629      	mov	r1, r5
 800e356:	f7f1 ff99 	bl	800028c <__adddf3>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	4610      	mov	r0, r2
 800e360:	4619      	mov	r1, r3
 800e362:	f7f2 fc41 	bl	8000be8 <__aeabi_d2f>
 800e366:	4603      	mov	r3, r0
 800e368:	4a8c      	ldr	r2, [pc, #560]	; (800e59c <tune+0x584>)
 800e36a:	6013      	str	r3, [r2, #0]
			break;
 800e36c:	e0c0      	b.n	800e4f0 <tune+0x4d8>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800e36e:	4b8a      	ldr	r3, [pc, #552]	; (800e598 <tune+0x580>)
 800e370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e372:	4618      	mov	r0, r3
 800e374:	f7f2 f8e8 	bl	8000548 <__aeabi_f2d>
 800e378:	a383      	add	r3, pc, #524	; (adr r3, 800e588 <tune+0x570>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f2 f93b 	bl	80005f8 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4614      	mov	r4, r2
 800e388:	461d      	mov	r5, r3
 800e38a:	4b85      	ldr	r3, [pc, #532]	; (800e5a0 <tune+0x588>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7f2 f8da 	bl	8000548 <__aeabi_f2d>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4620      	mov	r0, r4
 800e39a:	4629      	mov	r1, r5
 800e39c:	f7f1 ff76 	bl	800028c <__adddf3>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	f7f2 fc1e 	bl	8000be8 <__aeabi_d2f>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	4a7c      	ldr	r2, [pc, #496]	; (800e5a0 <tune+0x588>)
 800e3b0:	6013      	str	r3, [r2, #0]
			break;
 800e3b2:	e09d      	b.n	800e4f0 <tune+0x4d8>
		}
	}
	else
	{
		switch(wheel)
 800e3b4:	4b7b      	ldr	r3, [pc, #492]	; (800e5a4 <tune+0x58c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	f200 8098 	bhi.w	800e4f0 <tune+0x4d8>
 800e3c0:	a201      	add	r2, pc, #4	; (adr r2, 800e3c8 <tune+0x3b0>)
 800e3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c6:	bf00      	nop
 800e3c8:	0800e3d9 	.word	0x0800e3d9
 800e3cc:	0800e41f 	.word	0x0800e41f
 800e3d0:	0800e465 	.word	0x0800e465
 800e3d4:	0800e4ab 	.word	0x0800e4ab
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800e3d8:	4b6f      	ldr	r3, [pc, #444]	; (800e598 <tune+0x580>)
 800e3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f2 f8b3 	bl	8000548 <__aeabi_f2d>
 800e3e2:	a36b      	add	r3, pc, #428	; (adr r3, 800e590 <tune+0x578>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	f7f2 f906 	bl	80005f8 <__aeabi_dmul>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4614      	mov	r4, r2
 800e3f2:	461d      	mov	r5, r3
 800e3f4:	4b6c      	ldr	r3, [pc, #432]	; (800e5a8 <tune+0x590>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7f2 f8a5 	bl	8000548 <__aeabi_f2d>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	4620      	mov	r0, r4
 800e404:	4629      	mov	r1, r5
 800e406:	f7f1 ff41 	bl	800028c <__adddf3>
 800e40a:	4602      	mov	r2, r0
 800e40c:	460b      	mov	r3, r1
 800e40e:	4610      	mov	r0, r2
 800e410:	4619      	mov	r1, r3
 800e412:	f7f2 fbe9 	bl	8000be8 <__aeabi_d2f>
 800e416:	4603      	mov	r3, r0
 800e418:	4a63      	ldr	r2, [pc, #396]	; (800e5a8 <tune+0x590>)
 800e41a:	6013      	str	r3, [r2, #0]
			break;
 800e41c:	e068      	b.n	800e4f0 <tune+0x4d8>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800e41e:	4b5e      	ldr	r3, [pc, #376]	; (800e598 <tune+0x580>)
 800e420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e422:	4618      	mov	r0, r3
 800e424:	f7f2 f890 	bl	8000548 <__aeabi_f2d>
 800e428:	a359      	add	r3, pc, #356	; (adr r3, 800e590 <tune+0x578>)
 800e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42e:	f7f2 f8e3 	bl	80005f8 <__aeabi_dmul>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4614      	mov	r4, r2
 800e438:	461d      	mov	r5, r3
 800e43a:	4b5c      	ldr	r3, [pc, #368]	; (800e5ac <tune+0x594>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7f2 f882 	bl	8000548 <__aeabi_f2d>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4620      	mov	r0, r4
 800e44a:	4629      	mov	r1, r5
 800e44c:	f7f1 ff1e 	bl	800028c <__adddf3>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4610      	mov	r0, r2
 800e456:	4619      	mov	r1, r3
 800e458:	f7f2 fbc6 	bl	8000be8 <__aeabi_d2f>
 800e45c:	4603      	mov	r3, r0
 800e45e:	4a53      	ldr	r2, [pc, #332]	; (800e5ac <tune+0x594>)
 800e460:	6013      	str	r3, [r2, #0]
			break;
 800e462:	e045      	b.n	800e4f0 <tune+0x4d8>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800e464:	4b4c      	ldr	r3, [pc, #304]	; (800e598 <tune+0x580>)
 800e466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e468:	4618      	mov	r0, r3
 800e46a:	f7f2 f86d 	bl	8000548 <__aeabi_f2d>
 800e46e:	a348      	add	r3, pc, #288	; (adr r3, 800e590 <tune+0x578>)
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	f7f2 f8c0 	bl	80005f8 <__aeabi_dmul>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4614      	mov	r4, r2
 800e47e:	461d      	mov	r5, r3
 800e480:	4b4b      	ldr	r3, [pc, #300]	; (800e5b0 <tune+0x598>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4618      	mov	r0, r3
 800e486:	f7f2 f85f 	bl	8000548 <__aeabi_f2d>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4620      	mov	r0, r4
 800e490:	4629      	mov	r1, r5
 800e492:	f7f1 fefb 	bl	800028c <__adddf3>
 800e496:	4602      	mov	r2, r0
 800e498:	460b      	mov	r3, r1
 800e49a:	4610      	mov	r0, r2
 800e49c:	4619      	mov	r1, r3
 800e49e:	f7f2 fba3 	bl	8000be8 <__aeabi_d2f>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	4a42      	ldr	r2, [pc, #264]	; (800e5b0 <tune+0x598>)
 800e4a6:	6013      	str	r3, [r2, #0]
			break;
 800e4a8:	e022      	b.n	800e4f0 <tune+0x4d8>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800e4aa:	4b3b      	ldr	r3, [pc, #236]	; (800e598 <tune+0x580>)
 800e4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7f2 f84a 	bl	8000548 <__aeabi_f2d>
 800e4b4:	a336      	add	r3, pc, #216	; (adr r3, 800e590 <tune+0x578>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	f7f2 f89d 	bl	80005f8 <__aeabi_dmul>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4614      	mov	r4, r2
 800e4c4:	461d      	mov	r5, r3
 800e4c6:	4b3b      	ldr	r3, [pc, #236]	; (800e5b4 <tune+0x59c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7f2 f83c 	bl	8000548 <__aeabi_f2d>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	f7f1 fed8 	bl	800028c <__adddf3>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	f7f2 fb80 	bl	8000be8 <__aeabi_d2f>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	4a32      	ldr	r2, [pc, #200]	; (800e5b4 <tune+0x59c>)
 800e4ec:	6013      	str	r3, [r2, #0]
			break;
 800e4ee:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800e4f0:	4b29      	ldr	r3, [pc, #164]	; (800e598 <tune+0x580>)
 800e4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4f8:	d105      	bne.n	800e506 <tune+0x4ee>
	{
		while(ps4.button == OPTION);
 800e4fa:	bf00      	nop
 800e4fc:	4b26      	ldr	r3, [pc, #152]	; (800e598 <tune+0x580>)
 800e4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e504:	d0fa      	beq.n	800e4fc <tune+0x4e4>
//			BluePickLess = pick_enc_buf - pick_enc;
//		else
//			RedPickLess = pick_enc_buf - pick_enc;
	}

	if(ps4.button == TRIANGLE)
 800e506:	4b24      	ldr	r3, [pc, #144]	; (800e598 <tune+0x580>)
 800e508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e50a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e50e:	d128      	bne.n	800e562 <tune+0x54a>
	{
		while(ps4.button == TRIANGLE);
 800e510:	bf00      	nop
 800e512:	4b21      	ldr	r3, [pc, #132]	; (800e598 <tune+0x580>)
 800e514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e51a:	d0fa      	beq.n	800e512 <tune+0x4fa>

		LoadRing();
 800e51c:	f7ff fcda 	bl	800ded4 <LoadRing>
		load_adjust = 1;
 800e520:	4b25      	ldr	r3, [pc, #148]	; (800e5b8 <tune+0x5a0>)
 800e522:	2201      	movs	r2, #1
 800e524:	601a      	str	r2, [r3, #0]
		picked_manual = 1;
 800e526:	4b25      	ldr	r3, [pc, #148]	; (800e5bc <tune+0x5a4>)
 800e528:	2201      	movs	r2, #1
 800e52a:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800e52c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e530:	4823      	ldr	r0, [pc, #140]	; (800e5c0 <tune+0x5a8>)
 800e532:	f7fd f955 	bl	800b7e0 <ServoSetPulse>
 800e536:	f640 0166 	movw	r1, #2150	; 0x866
 800e53a:	4822      	ldr	r0, [pc, #136]	; (800e5c4 <tune+0x5ac>)
 800e53c:	f7fd f950 	bl	800b7e0 <ServoSetPulse>
		cylinder_retract;
 800e540:	4a21      	ldr	r2, [pc, #132]	; (800e5c8 <tune+0x5b0>)
 800e542:	7f13      	ldrb	r3, [r2, #28]
 800e544:	f36f 1386 	bfc	r3, #6, #1
 800e548:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800e54a:	f7ff fd09 	bl	800df60 <AdjustRings>
		adjust_servo;
 800e54e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e552:	481b      	ldr	r0, [pc, #108]	; (800e5c0 <tune+0x5a8>)
 800e554:	f7fd f944 	bl	800b7e0 <ServoSetPulse>
 800e558:	f640 0166 	movw	r1, #2150	; 0x866
 800e55c:	4819      	ldr	r0, [pc, #100]	; (800e5c4 <tune+0x5ac>)
 800e55e:	f7fd f93f 	bl	800b7e0 <ServoSetPulse>
	}

	if(ps4.button == CROSS)
 800e562:	4b0d      	ldr	r3, [pc, #52]	; (800e598 <tune+0x580>)
 800e564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e56a:	d105      	bne.n	800e578 <tune+0x560>
	{
		while(ps4.button == CROSS);
 800e56c:	bf00      	nop
 800e56e:	4b0a      	ldr	r3, [pc, #40]	; (800e598 <tune+0x580>)
 800e570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e576:	d0fa      	beq.n	800e56e <tune+0x556>
	}

	led9 = 1;
 800e578:	4a13      	ldr	r2, [pc, #76]	; (800e5c8 <tune+0x5b0>)
 800e57a:	7e13      	ldrb	r3, [r2, #24]
 800e57c:	f043 0310 	orr.w	r3, r3, #16
 800e580:	7613      	strb	r3, [r2, #24]
}
 800e582:	bf00      	nop
 800e584:	bdb0      	pop	{r4, r5, r7, pc}
 800e586:	bf00      	nop
 800e588:	eb1c432d 	.word	0xeb1c432d
 800e58c:	3f1a36e2 	.word	0x3f1a36e2
 800e590:	88e368f1 	.word	0x88e368f1
 800e594:	3ee4f8b5 	.word	0x3ee4f8b5
 800e598:	2000a244 	.word	0x2000a244
 800e59c:	20009a2c 	.word	0x20009a2c
 800e5a0:	20006a90 	.word	0x20006a90
 800e5a4:	200064fc 	.word	0x200064fc
 800e5a8:	2000a540 	.word	0x2000a540
 800e5ac:	20007320 	.word	0x20007320
 800e5b0:	20006500 	.word	0x20006500
 800e5b4:	20009cfc 	.word	0x20009cfc
 800e5b8:	200095c4 	.word	0x200095c4
 800e5bc:	200096c8 	.word	0x200096c8
 800e5c0:	200079e0 	.word	0x200079e0
 800e5c4:	2000a5e8 	.word	0x2000a5e8
 800e5c8:	200097dc 	.word	0x200097dc

0800e5cc <flywheelStop>:
	VESCPDC(leftU / 19999.00, &vesc1);
	VESCPDC(rightU / 19999.00, &vesc2);
}

void flywheelStop()
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	af00      	add	r7, sp, #0
	vesc_speed = 0;
 800e5d0:	4b0c      	ldr	r3, [pc, #48]	; (800e604 <flywheelStop+0x38>)
 800e5d2:	f04f 0200 	mov.w	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&left_PID);
 800e5d8:	480b      	ldr	r0, [pc, #44]	; (800e608 <flywheelStop+0x3c>)
 800e5da:	f7f7 f89e 	bl	800571a <PIDDelayInit>
	PIDDelayInit(&right_PID);
 800e5de:	480b      	ldr	r0, [pc, #44]	; (800e60c <flywheelStop+0x40>)
 800e5e0:	f7f7 f89b 	bl	800571a <PIDDelayInit>

	leftU = 0;
 800e5e4:	4b0a      	ldr	r3, [pc, #40]	; (800e610 <flywheelStop+0x44>)
 800e5e6:	f04f 0200 	mov.w	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]
	rightU = 0;
 800e5ec:	4b09      	ldr	r3, [pc, #36]	; (800e614 <flywheelStop+0x48>)
 800e5ee:	f04f 0200 	mov.w	r2, #0
 800e5f2:	601a      	str	r2, [r3, #0]

	VESCStop(&vesc1);
 800e5f4:	4808      	ldr	r0, [pc, #32]	; (800e618 <flywheelStop+0x4c>)
 800e5f6:	f000 fe6b 	bl	800f2d0 <VESCStop>
	VESCStop(&vesc2);
 800e5fa:	4808      	ldr	r0, [pc, #32]	; (800e61c <flywheelStop+0x50>)
 800e5fc:	f000 fe68 	bl	800f2d0 <VESCStop>
}
 800e600:	bf00      	nop
 800e602:	bd80      	pop	{r7, pc}
 800e604:	200065c0 	.word	0x200065c0
 800e608:	20009028 	.word	0x20009028
 800e60c:	2000a188 	.word	0x2000a188
 800e610:	200068ac 	.word	0x200068ac
 800e614:	20006b30 	.word	0x20006b30
 800e618:	20006b34 	.word	0x20006b34
 800e61c:	20009ba4 	.word	0x20009ba4

0800e620 <Shot>:

void Shot()
{
 800e620:	b580      	push	{r7, lr}
 800e622:	af00      	add	r7, sp, #0
	push_shoot;
 800e624:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800e628:	4805      	ldr	r0, [pc, #20]	; (800e640 <Shot+0x20>)
 800e62a:	f7f2 fdae 	bl	800118a <WriteBDC>
	shoot_start = 1;
 800e62e:	4b05      	ldr	r3, [pc, #20]	; (800e644 <Shot+0x24>)
 800e630:	2201      	movs	r2, #1
 800e632:	601a      	str	r2, [r3, #0]
	wait_load = 1;
 800e634:	4b04      	ldr	r3, [pc, #16]	; (800e648 <Shot+0x28>)
 800e636:	2201      	movs	r2, #1
 800e638:	601a      	str	r2, [r3, #0]
}
 800e63a:	bf00      	nop
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	2000989c 	.word	0x2000989c
 800e644:	20009454 	.word	0x20009454
 800e648:	200075a4 	.word	0x200075a4

0800e64c <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800e650:	4802      	ldr	r0, [pc, #8]	; (800e65c <DMA1_Stream0_IRQHandler+0x10>)
 800e652:	f008 fb79 	bl	8016d48 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800e656:	bf00      	nop
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	2000a1dc 	.word	0x2000a1dc

0800e660 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800e664:	4802      	ldr	r0, [pc, #8]	; (800e670 <DMA1_Stream3_IRQHandler+0x10>)
 800e666:	f008 fb6f 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e66a:	bf00      	nop
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20006560 	.word	0x20006560

0800e674 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800e678:	4802      	ldr	r0, [pc, #8]	; (800e684 <DMA1_Stream2_IRQHandler+0x10>)
 800e67a:	f008 fb65 	bl	8016d48 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800e67e:	bf00      	nop
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20005a20 	.word	0x20005a20

0800e688 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800e68c:	4802      	ldr	r0, [pc, #8]	; (800e698 <DMA1_Stream1_IRQHandler+0x10>)
 800e68e:	f008 fb5b 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e692:	bf00      	nop
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20005b64 	.word	0x20005b64

0800e69c <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800e6a0:	4802      	ldr	r0, [pc, #8]	; (800e6ac <DMA1_Stream4_IRQHandler+0x10>)
 800e6a2:	f008 fb51 	bl	8016d48 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800e6a6:	bf00      	nop
 800e6a8:	bd80      	pop	{r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	200061d8 	.word	0x200061d8

0800e6b0 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800e6b4:	4802      	ldr	r0, [pc, #8]	; (800e6c0 <DMA1_Stream5_IRQHandler+0x10>)
 800e6b6:	f008 fb47 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e6ba:	bf00      	nop
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	20005a80 	.word	0x20005a80

0800e6c4 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800e6c8:	4802      	ldr	r0, [pc, #8]	; (800e6d4 <DMA1_Stream6_IRQHandler+0x10>)
 800e6ca:	f008 fb3d 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e6ce:	bf00      	nop
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20005d6c 	.word	0x20005d6c

0800e6d8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800e6dc:	4802      	ldr	r0, [pc, #8]	; (800e6e8 <DMA1_Stream7_IRQHandler+0x10>)
 800e6de:	f008 fb33 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e6e2:	bf00      	nop
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20006238 	.word	0x20006238

0800e6ec <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800e6f0:	4802      	ldr	r0, [pc, #8]	; (800e6fc <DMA2_Stream0_IRQHandler+0x10>)
 800e6f2:	f008 fb29 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e6f6:	bf00      	nop
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	200063ec 	.word	0x200063ec

0800e700 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800e704:	4802      	ldr	r0, [pc, #8]	; (800e710 <DMA2_Stream1_IRQHandler+0x10>)
 800e706:	f008 fb1f 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e70a:	bf00      	nop
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	200062e0 	.word	0x200062e0

0800e714 <DMA2_Stream3_IRQHandler>:
//{
//	HAL_DMA_IRQHandler(&hdma_spi1_rx);
//}

void DMA2_Stream3_IRQHandler(void)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800e718:	4802      	ldr	r0, [pc, #8]	; (800e724 <DMA2_Stream3_IRQHandler+0x10>)
 800e71a:	f008 fb15 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e71e:	bf00      	nop
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	2000644c 	.word	0x2000644c

0800e728 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800e72c:	4802      	ldr	r0, [pc, #8]	; (800e738 <DMA2_Stream5_IRQHandler+0x10>)
 800e72e:	f008 fb0b 	bl	8016d48 <HAL_DMA_IRQHandler>
}
 800e732:	bf00      	nop
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	2000a56c 	.word	0x2000a56c

0800e73c <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800e73c:	b480      	push	{r7}
 800e73e:	af00      	add	r7, sp, #0

}
 800e740:	bf00      	nop
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800e74a:	b480      	push	{r7}
 800e74c:	af00      	add	r7, sp, #0

}
 800e74e:	bf00      	nop
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800e758:	b480      	push	{r7}
 800e75a:	af00      	add	r7, sp, #0

	while(1){
 800e75c:	e7fe      	b.n	800e75c <MemManage_Handler+0x4>

0800e75e <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800e75e:	b480      	push	{r7}
 800e760:	af00      	add	r7, sp, #0

}
 800e762:	bf00      	nop
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800e76c:	b480      	push	{r7}
 800e76e:	af00      	add	r7, sp, #0

}
 800e770:	bf00      	nop
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800e77a:	b480      	push	{r7}
 800e77c:	af00      	add	r7, sp, #0

}
 800e77e:	bf00      	nop
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800e78c:	4b14      	ldr	r3, [pc, #80]	; (800e7e0 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b81      	cmp	r3, #129	; 0x81
 800e794:	d109      	bne.n	800e7aa <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800e796:	4b13      	ldr	r3, [pc, #76]	; (800e7e4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800e798:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	3301      	adds	r3, #1
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	b21a      	sxth	r2, r3
 800e7a4:	4b0f      	ldr	r3, [pc, #60]	; (800e7e4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800e7a6:	805a      	strh	r2, [r3, #2]
 800e7a8:	e00d      	b.n	800e7c6 <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800e7aa:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b91      	cmp	r3, #145	; 0x91
 800e7b2:	d108      	bne.n	800e7c6 <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800e7b4:	4b0b      	ldr	r3, [pc, #44]	; (800e7e4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800e7b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	3b01      	subs	r3, #1
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	b21a      	sxth	r2, r3
 800e7c2:	4b08      	ldr	r3, [pc, #32]	; (800e7e4 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800e7c4:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800e7c6:	4b06      	ldr	r3, [pc, #24]	; (800e7e0 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800e7ce:	20c8      	movs	r0, #200	; 0xc8
 800e7d0:	f7f3 fa60 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800e7d4:	4804      	ldr	r0, [pc, #16]	; (800e7e8 <TIM1_UP_TIM10_IRQHandler+0x60>)
 800e7d6:	f00b ffbb 	bl	801a750 <HAL_TIM_IRQHandler>
	return;
 800e7da:	bf00      	nop
}
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	20005f34 	.word	0x20005f34
 800e7e4:	200064b0 	.word	0x200064b0
 800e7e8:	20005c04 	.word	0x20005c04

0800e7ec <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800e7f0:	4b12      	ldr	r3, [pc, #72]	; (800e83c <TIM4_IRQHandler+0x50>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b81      	cmp	r3, #129	; 0x81
 800e7f8:	d109      	bne.n	800e80e <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800e7fa:	4b11      	ldr	r3, [pc, #68]	; (800e840 <TIM4_IRQHandler+0x54>)
 800e7fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e800:	b29b      	uxth	r3, r3
 800e802:	3301      	adds	r3, #1
 800e804:	b29b      	uxth	r3, r3
 800e806:	b21a      	sxth	r2, r3
 800e808:	4b0d      	ldr	r3, [pc, #52]	; (800e840 <TIM4_IRQHandler+0x54>)
 800e80a:	805a      	strh	r2, [r3, #2]
 800e80c:	e00d      	b.n	800e82a <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <TIM4_IRQHandler+0x50>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b91      	cmp	r3, #145	; 0x91
 800e816:	d108      	bne.n	800e82a <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800e818:	4b09      	ldr	r3, [pc, #36]	; (800e840 <TIM4_IRQHandler+0x54>)
 800e81a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	3b01      	subs	r3, #1
 800e822:	b29b      	uxth	r3, r3
 800e824:	b21a      	sxth	r2, r3
 800e826:	4b06      	ldr	r3, [pc, #24]	; (800e840 <TIM4_IRQHandler+0x54>)
 800e828:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800e82a:	4b04      	ldr	r3, [pc, #16]	; (800e83c <TIM4_IRQHandler+0x50>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2200      	movs	r2, #0
 800e830:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800e832:	2064      	movs	r0, #100	; 0x64
 800e834:	f7f3 fa2e 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800e838:	bf00      	nop
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	20005b24 	.word	0x20005b24
 800e840:	200064d4 	.word	0x200064d4

0800e844 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800e848:	4803      	ldr	r0, [pc, #12]	; (800e858 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800e84a:	f00b ff81 	bl	801a750 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800e84e:	4803      	ldr	r0, [pc, #12]	; (800e85c <TIM8_UP_TIM13_IRQHandler+0x18>)
 800e850:	f00b ff7e 	bl	801a750 <HAL_TIM_IRQHandler>
	return;
 800e854:	bf00      	nop
}
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20005ae4 	.word	0x20005ae4
 800e85c:	20005dcc 	.word	0x20005dcc

0800e860 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800e864:	4802      	ldr	r0, [pc, #8]	; (800e870 <TIM2_IRQHandler+0x10>)
 800e866:	f00b ff73 	bl	801a750 <HAL_TIM_IRQHandler>
}
 800e86a:	bf00      	nop
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	20006038 	.word	0x20006038

0800e874 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e884:	d109      	bne.n	800e89a <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800e886:	f007 f8eb 	bl	8015a60 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800e88a:	4806      	ldr	r0, [pc, #24]	; (800e8a4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800e88c:	f7f3 facd 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800e890:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	3301      	adds	r3, #1
 800e896:	4a04      	ldr	r2, [pc, #16]	; (800e8a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800e898:	6013      	str	r3, [r2, #0]
	}
}
 800e89a:	bf00      	nop
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	200097dc 	.word	0x200097dc
 800e8a8:	20009918 	.word	0x20009918

0800e8ac <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800e8b4:	4b05      	ldr	r3, [pc, #20]	; (800e8cc <HAL_I2C_MasterRxCpltCallback+0x20>)
 800e8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d102      	bne.n	800e8c4 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800e8be:	4803      	ldr	r0, [pc, #12]	; (800e8cc <HAL_I2C_MasterRxCpltCallback+0x20>)
 800e8c0:	f7fb fe94 	bl	800a5ec <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800e8c4:	bf00      	nop
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	2000a244 	.word	0x2000a244

0800e8d0 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800e8d4:	4802      	ldr	r0, [pc, #8]	; (800e8e0 <I2C1_EV_IRQHandler+0x10>)
 800e8d6:	f009 fa0f 	bl	8017cf8 <HAL_I2C_EV_IRQHandler>

}
 800e8da:	bf00      	nop
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20006bb8 	.word	0x20006bb8

0800e8e4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800e8e8:	480a      	ldr	r0, [pc, #40]	; (800e914 <I2C1_ER_IRQHandler+0x30>)
 800e8ea:	f009 fb72 	bl	8017fd2 <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800e8ee:	480a      	ldr	r0, [pc, #40]	; (800e918 <I2C1_ER_IRQHandler+0x34>)
 800e8f0:	f008 f952 	bl	8016b98 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800e8f4:	4807      	ldr	r0, [pc, #28]	; (800e914 <I2C1_ER_IRQHandler+0x30>)
 800e8f6:	f009 f8b9 	bl	8017a6c <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800e8fa:	4b08      	ldr	r3, [pc, #32]	; (800e91c <I2C1_ER_IRQHandler+0x38>)
 800e8fc:	2208      	movs	r2, #8
 800e8fe:	4906      	ldr	r1, [pc, #24]	; (800e918 <I2C1_ER_IRQHandler+0x34>)
 800e900:	4804      	ldr	r0, [pc, #16]	; (800e914 <I2C1_ER_IRQHandler+0x30>)
 800e902:	f7f5 f9af 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800e906:	4903      	ldr	r1, [pc, #12]	; (800e914 <I2C1_ER_IRQHandler+0x30>)
 800e908:	4805      	ldr	r0, [pc, #20]	; (800e920 <I2C1_ER_IRQHandler+0x3c>)
 800e90a:	f7fb fe82 	bl	800a612 <PSxInitDMA>

}
 800e90e:	bf00      	nop
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	20006bb8 	.word	0x20006bb8
 800e918:	2000a1dc 	.word	0x2000a1dc
 800e91c:	00061a80 	.word	0x00061a80
 800e920:	2000a244 	.word	0x2000a244

0800e924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08c      	sub	sp, #48	; 0x30
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e930:	2300      	movs	r3, #0
 800e932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800e934:	2200      	movs	r2, #0
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	201c      	movs	r0, #28
 800e93a:	f008 f839 	bl	80169b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e93e:	201c      	movs	r0, #28
 800e940:	f008 f852 	bl	80169e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800e944:	2300      	movs	r3, #0
 800e946:	60fb      	str	r3, [r7, #12]
 800e948:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <HAL_InitTick+0xa8>)
 800e94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94c:	4a1f      	ldr	r2, [pc, #124]	; (800e9cc <HAL_InitTick+0xa8>)
 800e94e:	f043 0301 	orr.w	r3, r3, #1
 800e952:	6413      	str	r3, [r2, #64]	; 0x40
 800e954:	4b1d      	ldr	r3, [pc, #116]	; (800e9cc <HAL_InitTick+0xa8>)
 800e956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e960:	f107 0210 	add.w	r2, r7, #16
 800e964:	f107 0314 	add.w	r3, r7, #20
 800e968:	4611      	mov	r1, r2
 800e96a:	4618      	mov	r0, r3
 800e96c:	f00b fbfa 	bl	801a164 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800e970:	f00b fbd0 	bl	801a114 <HAL_RCC_GetPCLK1Freq>
 800e974:	4603      	mov	r3, r0
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	4a14      	ldr	r2, [pc, #80]	; (800e9d0 <HAL_InitTick+0xac>)
 800e97e:	fba2 2303 	umull	r2, r3, r2, r3
 800e982:	0c9b      	lsrs	r3, r3, #18
 800e984:	3b01      	subs	r3, #1
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800e988:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e98a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e98e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800e990:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e992:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e996:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800e998:	4a0e      	ldr	r2, [pc, #56]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800e99e:	4b0d      	ldr	r3, [pc, #52]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e9a4:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800e9aa:	480a      	ldr	r0, [pc, #40]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e9ac:	f00b fd2a 	bl	801a404 <HAL_TIM_Base_Init>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d104      	bne.n	800e9c0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800e9b6:	4807      	ldr	r0, [pc, #28]	; (800e9d4 <HAL_InitTick+0xb0>)
 800e9b8:	f00b fd73 	bl	801a4a2 <HAL_TIM_Base_Start_IT>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	e000      	b.n	800e9c2 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3730      	adds	r7, #48	; 0x30
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	40023800 	.word	0x40023800
 800e9d0:	431bde83 	.word	0x431bde83
 800e9d4:	20006038 	.word	0x20006038

0800e9d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
	return 1;
 800e9dc:	2301      	movs	r3, #1
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <_kill>:

int _kill(int pid, int sig)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800e9f2:	f010 f9f3 	bl	801eddc <__errno>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2216      	movs	r2, #22
 800e9fa:	601a      	str	r2, [r3, #0]
	return -1;
 800e9fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <_exit>:

void _exit (int status)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ea10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff ffe7 	bl	800e9e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ea1a:	e7fe      	b.n	800ea1a <_exit+0x12>

0800ea1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea28:	2300      	movs	r3, #0
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e00a      	b.n	800ea44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ea2e:	f3af 8000 	nop.w
 800ea32:	4601      	mov	r1, r0
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	60ba      	str	r2, [r7, #8]
 800ea3a:	b2ca      	uxtb	r2, r1
 800ea3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	3301      	adds	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	dbf0      	blt.n	800ea2e <_read+0x12>
	}

return len;
 800ea4c:	687b      	ldr	r3, [r7, #4]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b086      	sub	sp, #24
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	60f8      	str	r0, [r7, #12]
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea62:	2300      	movs	r3, #0
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e009      	b.n	800ea7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	1c5a      	adds	r2, r3, #1
 800ea6c:	60ba      	str	r2, [r7, #8]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	697a      	ldr	r2, [r7, #20]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	dbf1      	blt.n	800ea68 <_write+0x12>
	}
	return len;
 800ea84:	687b      	ldr	r3, [r7, #4]
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <_close>:

int _close(int file)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
	return -1;
 800ea96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b083      	sub	sp, #12
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eab6:	605a      	str	r2, [r3, #4]
	return 0;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	370c      	adds	r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <_isatty>:

int _isatty(int file)
{
 800eac6:	b480      	push	{r7}
 800eac8:	b083      	sub	sp, #12
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
	return 1;
 800eace:	2301      	movs	r3, #1
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eadc:	b480      	push	{r7}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	607a      	str	r2, [r7, #4]
	return 0;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
	...

0800eaf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800eb00:	4a14      	ldr	r2, [pc, #80]	; (800eb54 <_sbrk+0x5c>)
 800eb02:	4b15      	ldr	r3, [pc, #84]	; (800eb58 <_sbrk+0x60>)
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eb0c:	4b13      	ldr	r3, [pc, #76]	; (800eb5c <_sbrk+0x64>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eb14:	4b11      	ldr	r3, [pc, #68]	; (800eb5c <_sbrk+0x64>)
 800eb16:	4a12      	ldr	r2, [pc, #72]	; (800eb60 <_sbrk+0x68>)
 800eb18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eb1a:	4b10      	ldr	r3, [pc, #64]	; (800eb5c <_sbrk+0x64>)
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4413      	add	r3, r2
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d207      	bcs.n	800eb38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800eb28:	f010 f958 	bl	801eddc <__errno>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	220c      	movs	r2, #12
 800eb30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800eb32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb36:	e009      	b.n	800eb4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800eb38:	4b08      	ldr	r3, [pc, #32]	; (800eb5c <_sbrk+0x64>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800eb3e:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <_sbrk+0x64>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4413      	add	r3, r2
 800eb46:	4a05      	ldr	r2, [pc, #20]	; (800eb5c <_sbrk+0x64>)
 800eb48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3718      	adds	r7, #24
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	20020000 	.word	0x20020000
 800eb58:	00000400 	.word	0x00000400
 800eb5c:	200002e8 	.word	0x200002e8
 800eb60:	2000a960 	.word	0x2000a960

0800eb64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800eb64:	b480      	push	{r7}
 800eb66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eb68:	4b08      	ldr	r3, [pc, #32]	; (800eb8c <SystemInit+0x28>)
 800eb6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb6e:	4a07      	ldr	r2, [pc, #28]	; (800eb8c <SystemInit+0x28>)
 800eb70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800eb78:	4b04      	ldr	r3, [pc, #16]	; (800eb8c <SystemInit+0x28>)
 800eb7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eb7e:	609a      	str	r2, [r3, #8]
#endif
}
 800eb80:	bf00      	nop
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	e000ed00 	.word	0xe000ed00

0800eb90 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
	send_func = func;
 800eb98:	4a04      	ldr	r2, [pc, #16]	; (800ebac <bldc_interface_init+0x1c>)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6013      	str	r3, [r2, #0]
}
 800eb9e:	bf00      	nop
 800eba0:	370c      	adds	r7, #12
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop
 800ebac:	200002ec 	.word	0x200002ec

0800ebb0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	1618      	asrs	r0, r3, #24
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	1c59      	adds	r1, r3, #1
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	6011      	str	r1, [r2, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	4413      	add	r3, r2
 800ebd0:	b2c2      	uxtb	r2, r0
 800ebd2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	1418      	asrs	r0, r3, #16
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	1c59      	adds	r1, r3, #1
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	6011      	str	r1, [r2, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	b2c2      	uxtb	r2, r0
 800ebea:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	1218      	asrs	r0, r3, #8
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	1c59      	adds	r1, r3, #1
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	6011      	str	r1, [r2, #0]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	4413      	add	r3, r2
 800ec00:	b2c2      	uxtb	r2, r0
 800ec02:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	1c59      	adds	r1, r3, #1
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	6011      	str	r1, [r2, #0]
 800ec0e:	461a      	mov	r2, r3
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4413      	add	r3, r2
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	b2d2      	uxtb	r2, r2
 800ec18:	701a      	strb	r2, [r3, #0]
}
 800ec1a:	bf00      	nop
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	461a      	mov	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4413      	add	r3, r2
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	021b      	lsls	r3, r3, #8
 800ec3e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	3301      	adds	r3, #1
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	440b      	add	r3, r1
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	1c9a      	adds	r2, r3, #2
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	601a      	str	r2, [r3, #0]
	return res;
 800ec5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4413      	add	r3, r2
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	6879      	ldr	r1, [r7, #4]
 800ec8c:	440b      	add	r3, r1
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800ec92:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	3302      	adds	r3, #2
 800ec9a:	6879      	ldr	r1, [r7, #4]
 800ec9c:	440b      	add	r3, r1
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800eca2:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800eca4:	683a      	ldr	r2, [r7, #0]
 800eca6:	6812      	ldr	r2, [r2, #0]
 800eca8:	3203      	adds	r2, #3
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	440a      	add	r2, r1
 800ecae:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800ecb0:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800ecb2:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	1d1a      	adds	r2, r3, #4
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	601a      	str	r2, [r3, #0]
	return res;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	ed87 0a02 	vstr	s0, [r7, #8]
 800ecd8:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f7ff ffa2 	bl	800ec26 <buffer_get_int16>
 800ece2:	4603      	mov	r3, r0
 800ece4:	ee07 3a90 	vmov	s15, r3
 800ece8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ecec:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ecf4:	eef0 7a66 	vmov.f32	s15, s13
}
 800ecf8:	eeb0 0a67 	vmov.f32	s0, s15
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	60f8      	str	r0, [r7, #12]
 800ed0a:	ed87 0a02 	vstr	s0, [r7, #8]
 800ed0e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800ed10:	6879      	ldr	r1, [r7, #4]
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff ffaa 	bl	800ec6c <buffer_get_int32>
 800ed18:	ee07 0a90 	vmov	s15, r0
 800ed1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed20:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ed28:	eef0 7a66 	vmov.f32	s15, s13
}
 800ed2c:	eeb0 0a67 	vmov.f32	s0, s15
 800ed30:	3710      	adds	r7, #16
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800ed38:	b480      	push	{r7}
 800ed3a:	b085      	sub	sp, #20
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800ed46:	2300      	movs	r3, #0
 800ed48:	60fb      	str	r3, [r7, #12]
 800ed4a:	e016      	b.n	800ed7a <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800ed4c:	897b      	ldrh	r3, [r7, #10]
 800ed4e:	0a1b      	lsrs	r3, r3, #8
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	4619      	mov	r1, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	607a      	str	r2, [r7, #4]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	404b      	eors	r3, r1
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	4a0b      	ldr	r2, [pc, #44]	; (800ed90 <crc16+0x58>)
 800ed62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed66:	b21a      	sxth	r2, r3
 800ed68:	897b      	ldrh	r3, [r7, #10]
 800ed6a:	021b      	lsls	r3, r3, #8
 800ed6c:	b21b      	sxth	r3, r3
 800ed6e:	4053      	eors	r3, r2
 800ed70:	b21b      	sxth	r3, r3
 800ed72:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	3301      	adds	r3, #1
 800ed78:	60fb      	str	r3, [r7, #12]
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d3e4      	bcc.n	800ed4c <crc16+0x14>
	}
	return cksum;
 800ed82:	897b      	ldrh	r3, [r7, #10]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3714      	adds	r7, #20
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	08025598 	.word	0x08025598

0800ed94 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b08e      	sub	sp, #56	; 0x38
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60b9      	str	r1, [r7, #8]
 800ed9c:	607a      	str	r2, [r7, #4]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
 800eda4:	4613      	mov	r3, r2
 800eda6:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b06      	cmp	r3, #6
 800edac:	d82b      	bhi.n	800ee06 <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	61ba      	str	r2, [r7, #24]
 800edb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800edbc:	4413      	add	r3, r2
 800edbe:	221e      	movs	r2, #30
 800edc0:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	1c5a      	adds	r2, r3, #1
 800edc8:	61ba      	str	r2, [r7, #24]
 800edca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800edce:	4413      	add	r3, r2
 800edd0:	7bba      	ldrb	r2, [r7, #14]
 800edd2:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800edd6:	f107 0210 	add.w	r2, r7, #16
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	4413      	add	r3, r2
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	68b9      	ldr	r1, [r7, #8]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f010 f82c 	bl	801ee40 <memcpy>
		ind += len;
 800ede8:	69ba      	ldr	r2, [r7, #24]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4413      	add	r3, r2
 800edee:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
 800edf2:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	b2db      	uxtb	r3, r3
 800edfa:	f107 0210 	add.w	r2, r7, #16
 800edfe:	4872      	ldr	r0, [pc, #456]	; (800efc8 <comm_can_send_buffer+0x234>)
 800ee00:	f7f4 fd12 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800ee04:	e0dc      	b.n	800efc0 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	633b      	str	r3, [r7, #48]	; 0x30
 800ee0e:	e03d      	b.n	800ee8c <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800ee10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee12:	2bff      	cmp	r3, #255	; 0xff
 800ee14:	d83f      	bhi.n	800ee96 <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	3307      	adds	r3, #7
 800ee1a:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800ee1c:	2307      	movs	r3, #7
 800ee1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	3307      	adds	r3, #7
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d30b      	bcc.n	800ee4a <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800ee32:	f107 0310 	add.w	r3, r7, #16
 800ee36:	3301      	adds	r3, #1
 800ee38:	68b9      	ldr	r1, [r7, #8]
 800ee3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee3c:	4411      	add	r1, r2
 800ee3e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ee42:	4618      	mov	r0, r3
 800ee44:	f00f fffc 	bl	801ee40 <memcpy>
 800ee48:	e011      	b.n	800ee6e <comm_can_send_buffer+0xda>
				send_len = len - i;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	b2da      	uxtb	r2, r3
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800ee58:	f107 0310 	add.w	r3, r7, #16
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	68b9      	ldr	r1, [r7, #8]
 800ee60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee62:	4411      	add	r1, r2
 800ee64:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f00f ffe9 	bl	801ee40 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800ee6e:	7bfb      	ldrb	r3, [r7, #15]
 800ee70:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800ee74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee78:	3301      	adds	r3, #1
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	f107 0210 	add.w	r2, r7, #16
 800ee80:	4851      	ldr	r0, [pc, #324]	; (800efc8 <comm_can_send_buffer+0x234>)
 800ee82:	f7f4 fcd1 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800ee86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee88:	3307      	adds	r3, #7
 800ee8a:	633b      	str	r3, [r7, #48]	; 0x30
 800ee8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d3bd      	bcc.n	800ee10 <comm_can_send_buffer+0x7c>
 800ee94:	e000      	b.n	800ee98 <comm_can_send_buffer+0x104>
				break;
 800ee96:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800ee98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee9c:	e03b      	b.n	800ef16 <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800ee9e:	2306      	movs	r3, #6
 800eea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800eea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea6:	0a1b      	lsrs	r3, r3, #8
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	3306      	adds	r3, #6
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d30b      	bcc.n	800eed4 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800eebc:	f107 0310 	add.w	r3, r7, #16
 800eec0:	3302      	adds	r3, #2
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eec6:	4411      	add	r1, r2
 800eec8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eecc:	4618      	mov	r0, r3
 800eece:	f00f ffb7 	bl	801ee40 <memcpy>
 800eed2:	e011      	b.n	800eef8 <comm_can_send_buffer+0x164>
				send_len = len - i;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800eee2:	f107 0310 	add.w	r3, r7, #16
 800eee6:	3302      	adds	r3, #2
 800eee8:	68b9      	ldr	r1, [r7, #8]
 800eeea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeec:	4411      	add	r1, r2
 800eeee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eef2:	4618      	mov	r0, r3
 800eef4:	f00f ffa4 	bl	801ee40 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
 800eefa:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800eefe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef02:	3302      	adds	r3, #2
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	f107 0210 	add.w	r2, r7, #16
 800ef0a:	482f      	ldr	r0, [pc, #188]	; (800efc8 <comm_can_send_buffer+0x234>)
 800ef0c:	f7f4 fc8c 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	3306      	adds	r3, #6
 800ef14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d3bf      	bcc.n	800ee9e <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	1c5a      	adds	r2, r3, #1
 800ef26:	623a      	str	r2, [r7, #32]
 800ef28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ef2c:	4413      	add	r3, r2
 800ef2e:	221e      	movs	r2, #30
 800ef30:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800ef34:	6a3b      	ldr	r3, [r7, #32]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	623a      	str	r2, [r7, #32]
 800ef3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ef3e:	4413      	add	r3, r2
 800ef40:	7bba      	ldrb	r2, [r7, #14]
 800ef42:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	0a19      	lsrs	r1, r3, #8
 800ef4a:	6a3b      	ldr	r3, [r7, #32]
 800ef4c:	1c5a      	adds	r2, r3, #1
 800ef4e:	623a      	str	r2, [r7, #32]
 800ef50:	b2ca      	uxtb	r2, r1
 800ef52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ef56:	440b      	add	r3, r1
 800ef58:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	623a      	str	r2, [r7, #32]
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	b2d2      	uxtb	r2, r2
 800ef66:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ef6a:	440b      	add	r3, r1
 800ef6c:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800ef70:	6879      	ldr	r1, [r7, #4]
 800ef72:	68b8      	ldr	r0, [r7, #8]
 800ef74:	f7ff fee0 	bl	800ed38 <crc16>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800ef7c:	8bfb      	ldrh	r3, [r7, #30]
 800ef7e:	0a1b      	lsrs	r3, r3, #8
 800ef80:	b299      	uxth	r1, r3
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	623a      	str	r2, [r7, #32]
 800ef88:	b2ca      	uxtb	r2, r1
 800ef8a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ef8e:	440b      	add	r3, r1
 800ef90:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	1c5a      	adds	r2, r3, #1
 800ef98:	623a      	str	r2, [r7, #32]
 800ef9a:	8bfa      	ldrh	r2, [r7, #30]
 800ef9c:	b2d2      	uxtb	r2, r2
 800ef9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800efa2:	440b      	add	r3, r1
 800efa4:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800efa8:	7bfb      	ldrb	r3, [r7, #15]
 800efaa:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800efae:	6a3b      	ldr	r3, [r7, #32]
 800efb0:	1c5a      	adds	r2, r3, #1
 800efb2:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	f107 0210 	add.w	r2, r7, #16
 800efba:	4803      	ldr	r0, [pc, #12]	; (800efc8 <comm_can_send_buffer+0x234>)
 800efbc:	f7f4 fc34 	bl	8003828 <CAN_TxMsgEID>
}
 800efc0:	bf00      	nop
 800efc2:	3738      	adds	r7, #56	; 0x38
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	20009174 	.word	0x20009174
 800efcc:	00000000 	.word	0x00000000

0800efd0 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	ed87 0a00 	vstr	s0, [r7]
 800efdc:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800efde:	2300      	movs	r3, #0
 800efe0:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800efe2:	6838      	ldr	r0, [r7, #0]
 800efe4:	f7f1 fab0 	bl	8000548 <__aeabi_f2d>
 800efe8:	a310      	add	r3, pc, #64	; (adr r3, 800f02c <comm_can_set_duty+0x5c>)
 800efea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efee:	f7f1 fb03 	bl	80005f8 <__aeabi_dmul>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	4610      	mov	r0, r2
 800eff8:	4619      	mov	r1, r3
 800effa:	f7f1 fdad 	bl	8000b58 <__aeabi_d2iz>
 800effe:	4601      	mov	r1, r0
 800f000:	f107 020c 	add.w	r2, r7, #12
 800f004:	f107 0308 	add.w	r3, r7, #8
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff fdd1 	bl	800ebb0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800f00e:	79f9      	ldrb	r1, [r7, #7]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	b2db      	uxtb	r3, r3
 800f014:	f107 0208 	add.w	r2, r7, #8
 800f018:	4803      	ldr	r0, [pc, #12]	; (800f028 <comm_can_set_duty+0x58>)
 800f01a:	f7f4 fc05 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800f01e:	bf00      	nop
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	20009174 	.word	0x20009174
 800f02c:	00000000 	.word	0x00000000
 800f030:	40f86a00 	.word	0x40f86a00

0800f034 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	ed87 0a00 	vstr	s0, [r7]
 800f040:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800f046:	6838      	ldr	r0, [r7, #0]
 800f048:	f7f1 fa7e 	bl	8000548 <__aeabi_f2d>
 800f04c:	f04f 0200 	mov.w	r2, #0
 800f050:	4b0f      	ldr	r3, [pc, #60]	; (800f090 <comm_can_set_current+0x5c>)
 800f052:	f7f1 fad1 	bl	80005f8 <__aeabi_dmul>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4610      	mov	r0, r2
 800f05c:	4619      	mov	r1, r3
 800f05e:	f7f1 fd7b 	bl	8000b58 <__aeabi_d2iz>
 800f062:	4601      	mov	r1, r0
 800f064:	f107 020c 	add.w	r2, r7, #12
 800f068:	f107 0308 	add.w	r3, r7, #8
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7ff fd9f 	bl	800ebb0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800f072:	79fb      	ldrb	r3, [r7, #7]
 800f074:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	f107 0208 	add.w	r2, r7, #8
 800f080:	4804      	ldr	r0, [pc, #16]	; (800f094 <comm_can_set_current+0x60>)
 800f082:	f7f4 fbd1 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800f086:	bf00      	nop
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	408f4000 	.word	0x408f4000
 800f094:	20009174 	.word	0x20009174

0800f098 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	ed87 0a00 	vstr	s0, [r7]
 800f0a4:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800f0aa:	edd7 7a00 	vldr	s15, [r7]
 800f0ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0b2:	f107 020c 	add.w	r2, r7, #12
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	ee17 1a90 	vmov	r1, s15
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff fd76 	bl	800ebb0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	f107 0208 	add.w	r2, r7, #8
 800f0d2:	4803      	ldr	r0, [pc, #12]	; (800f0e0 <comm_can_set_rpm+0x48>)
 800f0d4:	f7f4 fba8 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800f0d8:	bf00      	nop
 800f0da:	3710      	adds	r7, #16
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	20009174 	.word	0x20009174

0800f0e4 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	603b      	str	r3, [r7, #0]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800f0ee:	4b30      	ldr	r3, [pc, #192]	; (800f1b0 <decode_VESC+0xcc>)
 800f0f0:	689b      	ldr	r3, [r3, #8]
 800f0f2:	2b04      	cmp	r3, #4
 800f0f4:	d158      	bne.n	800f1a8 <decode_VESC+0xc4>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800f0f6:	4b2e      	ldr	r3, [pc, #184]	; (800f1b0 <decode_VESC+0xcc>)
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	71fb      	strb	r3, [r7, #7]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800f0fc:	4b2c      	ldr	r3, [pc, #176]	; (800f1b0 <decode_VESC+0xcc>)
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	0a1b      	lsrs	r3, r3, #8
 800f102:	71bb      	strb	r3, [r7, #6]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800f104:	79bb      	ldrb	r3, [r7, #6]
 800f106:	2b09      	cmp	r3, #9
 800f108:	d14e      	bne.n	800f1a8 <decode_VESC+0xc4>
			{
				if(id == 111)
 800f10a:	79fb      	ldrb	r3, [r7, #7]
 800f10c:	2b6f      	cmp	r3, #111	; 0x6f
 800f10e:	d124      	bne.n	800f15a <decode_VESC+0x76>
				{
					vesc1.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800f110:	463b      	mov	r3, r7
 800f112:	4619      	mov	r1, r3
 800f114:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f118:	4826      	ldr	r0, [pc, #152]	; (800f1b4 <decode_VESC+0xd0>)
 800f11a:	f7ff fdf2 	bl	800ed02 <buffer_get_float32>
 800f11e:	eef0 7a40 	vmov.f32	s15, s0
 800f122:	4b25      	ldr	r3, [pc, #148]	; (800f1b8 <decode_VESC+0xd4>)
 800f124:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc1.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f128:	463b      	mov	r3, r7
 800f12a:	4619      	mov	r1, r3
 800f12c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f130:	4820      	ldr	r0, [pc, #128]	; (800f1b4 <decode_VESC+0xd0>)
 800f132:	f7ff fdcb 	bl	800eccc <buffer_get_float16>
 800f136:	eef0 7a40 	vmov.f32	s15, s0
 800f13a:	4b1f      	ldr	r3, [pc, #124]	; (800f1b8 <decode_VESC+0xd4>)
 800f13c:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc1.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f140:	463b      	mov	r3, r7
 800f142:	4619      	mov	r1, r3
 800f144:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f148:	481a      	ldr	r0, [pc, #104]	; (800f1b4 <decode_VESC+0xd0>)
 800f14a:	f7ff fdbf 	bl	800eccc <buffer_get_float16>
 800f14e:	eef0 7a40 	vmov.f32	s15, s0
 800f152:	4b19      	ldr	r3, [pc, #100]	; (800f1b8 <decode_VESC+0xd4>)
 800f154:	edc3 7a05 	vstr	s15, [r3, #20]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800f158:	e026      	b.n	800f1a8 <decode_VESC+0xc4>
				else if(id == 112)
 800f15a:	79fb      	ldrb	r3, [r7, #7]
 800f15c:	2b70      	cmp	r3, #112	; 0x70
 800f15e:	d123      	bne.n	800f1a8 <decode_VESC+0xc4>
					vesc2.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800f160:	463b      	mov	r3, r7
 800f162:	4619      	mov	r1, r3
 800f164:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f168:	4812      	ldr	r0, [pc, #72]	; (800f1b4 <decode_VESC+0xd0>)
 800f16a:	f7ff fdca 	bl	800ed02 <buffer_get_float32>
 800f16e:	eef0 7a40 	vmov.f32	s15, s0
 800f172:	4b12      	ldr	r3, [pc, #72]	; (800f1bc <decode_VESC+0xd8>)
 800f174:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f178:	463b      	mov	r3, r7
 800f17a:	4619      	mov	r1, r3
 800f17c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f180:	480c      	ldr	r0, [pc, #48]	; (800f1b4 <decode_VESC+0xd0>)
 800f182:	f7ff fda3 	bl	800eccc <buffer_get_float16>
 800f186:	eef0 7a40 	vmov.f32	s15, s0
 800f18a:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <decode_VESC+0xd8>)
 800f18c:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f190:	463b      	mov	r3, r7
 800f192:	4619      	mov	r1, r3
 800f194:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f198:	4806      	ldr	r0, [pc, #24]	; (800f1b4 <decode_VESC+0xd0>)
 800f19a:	f7ff fd97 	bl	800eccc <buffer_get_float16>
 800f19e:	eef0 7a40 	vmov.f32	s15, s0
 800f1a2:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <decode_VESC+0xd8>)
 800f1a4:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800f1a8:	bf00      	nop
 800f1aa:	3708      	adds	r7, #8
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}
 800f1b0:	200098ec 	.word	0x200098ec
 800f1b4:	20009908 	.word	0x20009908
 800f1b8:	20006b34 	.word	0x20006b34
 800f1bc:	20009ba4 	.word	0x20009ba4

0800f1c0 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800f1c0:	b4b0      	push	{r4, r5, r7}
 800f1c2:	b085      	sub	sp, #20
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800f1c8:	4b16      	ldr	r3, [pc, #88]	; (800f224 <set_rx_frames+0x64>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	1c53      	adds	r3, r2, #1
 800f1ce:	4915      	ldr	r1, [pc, #84]	; (800f224 <set_rx_frames+0x64>)
 800f1d0:	600b      	str	r3, [r1, #0]
 800f1d2:	4915      	ldr	r1, [pc, #84]	; (800f228 <set_rx_frames+0x68>)
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	00db      	lsls	r3, r3, #3
 800f1d8:	4413      	add	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	18ca      	adds	r2, r1, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4614      	mov	r4, r2
 800f1e2:	461d      	mov	r5, r3
 800f1e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800f1f0:	4b0c      	ldr	r3, [pc, #48]	; (800f224 <set_rx_frames+0x64>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b64      	cmp	r3, #100	; 0x64
 800f1f6:	d102      	bne.n	800f1fe <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <set_rx_frames+0x64>)
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	0a1b      	lsrs	r3, r3, #8
 800f204:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b07      	cmp	r3, #7
 800f20a:	d002      	beq.n	800f212 <set_rx_frames+0x52>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2b08      	cmp	r3, #8
 800f210:	d101      	bne.n	800f216 <set_rx_frames+0x56>
		return 112;
 800f212:	2370      	movs	r3, #112	; 0x70
 800f214:	e000      	b.n	800f218 <set_rx_frames+0x58>
	else
		return 0;
 800f216:	2300      	movs	r3, #0
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3714      	adds	r7, #20
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bcb0      	pop	{r4, r5, r7}
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	20001100 	.word	0x20001100
 800f228:	200002f0 	.word	0x200002f0

0800f22c <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	ed87 0a05 	vstr	s0, [r7, #20]
 800f236:	edc7 0a04 	vstr	s1, [r7, #16]
 800f23a:	ed87 1a03 	vstr	s2, [r7, #12]
 800f23e:	4603      	mov	r3, r0
 800f240:	6079      	str	r1, [r7, #4]
 800f242:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800f244:	4809      	ldr	r0, [pc, #36]	; (800f26c <VESCInit+0x40>)
 800f246:	f7ff fca3 	bl	800eb90 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	697a      	ldr	r2, [r7, #20]
 800f24e:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	897a      	ldrh	r2, [r7, #10]
 800f260:	819a      	strh	r2, [r3, #12]
}
 800f262:	bf00      	nop
 800f264:	3718      	adds	r7, #24
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	0800f34d 	.word	0x0800f34d

0800f270 <VESCRPM>:
 * 						  BRightRPM		speed of back right motor in revolution per minute
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCRPM(2000, 2000, 2000, 2000, &csev);
 */
void VESCRPM(float RPM, VESC_t* vesc) {
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	ed87 0a01 	vstr	s0, [r7, #4]
 800f27a:	6038      	str	r0, [r7, #0]

	if(RPM > vesc->max_rpm){
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	edd3 7a00 	vldr	s15, [r3]
 800f282:	ed97 7a01 	vldr	s14, [r7, #4]
 800f286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28e:	dd02      	ble.n	800f296 <VESCRPM+0x26>
		RPM = vesc->max_rpm;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	607b      	str	r3, [r7, #4]
	}

	RPM = RPM * vesc->pole_pairs;
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	edd3 7a01 	vldr	s15, [r3, #4]
 800f29c:	ed97 7a01 	vldr	s14, [r7, #4]
 800f2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2a4:	edc7 7a01 	vstr	s15, [r7, #4]

	comm_can_set_rpm(vesc->Instance, RPM);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	899b      	ldrh	r3, [r3, #12]
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	ed97 0a01 	vldr	s0, [r7, #4]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7ff fef0 	bl	800f098 <comm_can_set_rpm>

	vesc->rpm_flag = 1;
 800f2b8:	683a      	ldr	r2, [r7, #0]
 800f2ba:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f2be:	f043 0302 	orr.w	r3, r3, #2
 800f2c2:	f882 3020 	strb.w	r3, [r2, #32]
}
 800f2c6:	bf00      	nop
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
	...

0800f2d0 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f2de:	f003 0304 	and.w	r3, r3, #4
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d007      	beq.n	800f2f8 <VESCStop+0x28>
		comm_can_set_duty(vesc->Instance, 0.0);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	899b      	ldrh	r3, [r3, #12]
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800f348 <VESCStop+0x78>
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff fe6c 	bl	800efd0 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d007      	beq.n	800f318 <VESCStop+0x48>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	899b      	ldrh	r3, [r3, #12]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f348 <VESCStop+0x78>
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff fec0 	bl	800f098 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f31e:	f003 0301 	and.w	r3, r3, #1
 800f322:	b2db      	uxtb	r3, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d007      	beq.n	800f338 <VESCStop+0x68>
		comm_can_set_current(vesc->Instance, 0.0);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	899b      	ldrh	r3, [r3, #12]
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800f348 <VESCStop+0x78>
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff fe7e 	bl	800f034 <comm_can_set_current>
	}

	vesc->flags = 0;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 2020 	strb.w	r2, [r3, #32]
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	00000000 	.word	0x00000000

0800f34c <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800f35a:	7bf8      	ldrb	r0, [r7, #15]
 800f35c:	2300      	movs	r3, #0
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	68b9      	ldr	r1, [r7, #8]
 800f362:	f7ff fd17 	bl	800ed94 <comm_can_send_buffer>
}
 800f366:	bf00      	nop
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.25, 0.99, 1.19, 0.96, -1.5, 0.99, -0.25, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	460b      	mov	r3, r1
 800f37a:	607a      	str	r2, [r7, #4]
 800f37c:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	7afa      	ldrb	r2, [r7, #11]
 800f38a:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 800f394:	f36f 0382 	bfc	r3, #2, #1
 800f398:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0

	if(lidar->mode == CONTINUOUS)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d110      	bne.n	800f3c8 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	33c9      	adds	r3, #201	; 0xc9
 800f3b0:	2205      	movs	r2, #5
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	f00c f90c 	bl	801b5d0 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 800f3be:	f36f 0300 	bfc	r3, #0, #1
 800f3c2:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
		lidar->AdjEnb = 0;
		lidar->laser = 1;
		lidar->autoshot = 1;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800f3c6:	e0a5      	b.n	800f514 <LidarInit+0x1a4>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800f3c8:	4b54      	ldr	r3, [pc, #336]	; (800f51c <LidarInit+0x1ac>)
 800f3ca:	edd3 7a00 	vldr	s15, [r3]
 800f3ce:	4b53      	ldr	r3, [pc, #332]	; (800f51c <LidarInit+0x1ac>)
 800f3d0:	ed93 7a01 	vldr	s14, [r3, #4]
 800f3d4:	4b51      	ldr	r3, [pc, #324]	; (800f51c <LidarInit+0x1ac>)
 800f3d6:	edd3 6a02 	vldr	s13, [r3, #8]
 800f3da:	4b50      	ldr	r3, [pc, #320]	; (800f51c <LidarInit+0x1ac>)
 800f3dc:	ed93 6a03 	vldr	s12, [r3, #12]
 800f3e0:	4b4e      	ldr	r3, [pc, #312]	; (800f51c <LidarInit+0x1ac>)
 800f3e2:	edd3 5a04 	vldr	s11, [r3, #16]
 800f3e6:	4b4d      	ldr	r3, [pc, #308]	; (800f51c <LidarInit+0x1ac>)
 800f3e8:	ed93 5a05 	vldr	s10, [r3, #20]
 800f3ec:	4b4b      	ldr	r3, [pc, #300]	; (800f51c <LidarInit+0x1ac>)
 800f3ee:	ed93 3a06 	vldr	s6, [r3, #24]
 800f3f2:	4b4a      	ldr	r3, [pc, #296]	; (800f51c <LidarInit+0x1ac>)
 800f3f4:	edd3 3a07 	vldr	s7, [r3, #28]
 800f3f8:	4b48      	ldr	r3, [pc, #288]	; (800f51c <LidarInit+0x1ac>)
 800f3fa:	ed93 4a08 	vldr	s8, [r3, #32]
 800f3fe:	4b47      	ldr	r3, [pc, #284]	; (800f51c <LidarInit+0x1ac>)
 800f400:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	eef0 2a45 	vmov.f32	s5, s10
 800f40a:	eeb0 2a65 	vmov.f32	s4, s11
 800f40e:	eef0 1a46 	vmov.f32	s3, s12
 800f412:	eeb0 1a66 	vmov.f32	s2, s13
 800f416:	eef0 0a47 	vmov.f32	s1, s14
 800f41a:	eeb0 0a67 	vmov.f32	s0, s15
 800f41e:	f000 f8eb 	bl	800f5f8 <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800f422:	4b3f      	ldr	r3, [pc, #252]	; (800f520 <LidarInit+0x1b0>)
 800f424:	edd3 7a00 	vldr	s15, [r3]
 800f428:	4b3d      	ldr	r3, [pc, #244]	; (800f520 <LidarInit+0x1b0>)
 800f42a:	ed93 7a01 	vldr	s14, [r3, #4]
 800f42e:	4b3c      	ldr	r3, [pc, #240]	; (800f520 <LidarInit+0x1b0>)
 800f430:	edd3 6a02 	vldr	s13, [r3, #8]
 800f434:	4b3a      	ldr	r3, [pc, #232]	; (800f520 <LidarInit+0x1b0>)
 800f436:	ed93 6a03 	vldr	s12, [r3, #12]
 800f43a:	4b39      	ldr	r3, [pc, #228]	; (800f520 <LidarInit+0x1b0>)
 800f43c:	edd3 5a04 	vldr	s11, [r3, #16]
 800f440:	4b37      	ldr	r3, [pc, #220]	; (800f520 <LidarInit+0x1b0>)
 800f442:	ed93 5a05 	vldr	s10, [r3, #20]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	eef0 2a45 	vmov.f32	s5, s10
 800f44c:	eeb0 2a65 	vmov.f32	s4, s11
 800f450:	eef0 1a46 	vmov.f32	s3, s12
 800f454:	eeb0 1a66 	vmov.f32	s2, s13
 800f458:	eef0 0a47 	vmov.f32	s1, s14
 800f45c:	eeb0 0a67 	vmov.f32	s0, s15
 800f460:	f000 f862 	bl	800f528 <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800f464:	4b2f      	ldr	r3, [pc, #188]	; (800f524 <LidarInit+0x1b4>)
 800f466:	edd3 7a00 	vldr	s15, [r3]
 800f46a:	4b2e      	ldr	r3, [pc, #184]	; (800f524 <LidarInit+0x1b4>)
 800f46c:	ed93 7a01 	vldr	s14, [r3, #4]
 800f470:	4b2c      	ldr	r3, [pc, #176]	; (800f524 <LidarInit+0x1b4>)
 800f472:	edd3 6a02 	vldr	s13, [r3, #8]
 800f476:	4b2b      	ldr	r3, [pc, #172]	; (800f524 <LidarInit+0x1b4>)
 800f478:	ed93 6a03 	vldr	s12, [r3, #12]
 800f47c:	4b29      	ldr	r3, [pc, #164]	; (800f524 <LidarInit+0x1b4>)
 800f47e:	edd3 5a04 	vldr	s11, [r3, #16]
 800f482:	4b28      	ldr	r3, [pc, #160]	; (800f524 <LidarInit+0x1b4>)
 800f484:	ed93 5a05 	vldr	s10, [r3, #20]
 800f488:	4b26      	ldr	r3, [pc, #152]	; (800f524 <LidarInit+0x1b4>)
 800f48a:	edd3 4a06 	vldr	s9, [r3, #24]
 800f48e:	4b25      	ldr	r3, [pc, #148]	; (800f524 <LidarInit+0x1b4>)
 800f490:	ed93 4a07 	vldr	s8, [r3, #28]
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	eef0 3a44 	vmov.f32	s7, s8
 800f49a:	eeb0 3a64 	vmov.f32	s6, s9
 800f49e:	eef0 2a45 	vmov.f32	s5, s10
 800f4a2:	eeb0 2a65 	vmov.f32	s4, s11
 800f4a6:	eef0 1a46 	vmov.f32	s3, s12
 800f4aa:	eeb0 1a66 	vmov.f32	s2, s13
 800f4ae:	eef0 0a47 	vmov.f32	s1, s14
 800f4b2:	eeb0 0a67 	vmov.f32	s0, s15
 800f4b6:	f000 f865 	bl	800f584 <LidarCenterOffsetInit>
		lidar->response = NO;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->fail = 0;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		lidar->pos = PICK_LEFT;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = S;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2202      	movs	r2, #2
 800f4de:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2202      	movs	r2, #2
 800f4e6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		lidar->laser = 1;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		lidar->autoshot = 1;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	33c9      	adds	r3, #201	; 0xc9
 800f50c:	2202      	movs	r2, #2
 800f50e:	4619      	mov	r1, r3
 800f510:	f00c f85e 	bl	801b5d0 <HAL_UART_Receive_IT>
}
 800f514:	bf00      	nop
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20000070 	.word	0x20000070
 800f520:	20000058 	.word	0x20000058
 800f524:	20000098 	.word	0x20000098

0800f528 <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800f528:	b480      	push	{r7}
 800f52a:	b089      	sub	sp, #36	; 0x24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	ed87 0a07 	vstr	s0, [r7, #28]
 800f532:	edc7 0a06 	vstr	s1, [r7, #24]
 800f536:	ed87 1a05 	vstr	s2, [r7, #20]
 800f53a:	edc7 1a04 	vstr	s3, [r7, #16]
 800f53e:	ed87 2a03 	vstr	s4, [r7, #12]
 800f542:	edc7 2a02 	vstr	s5, [r7, #8]
 800f546:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	69fa      	ldr	r2, [r7, #28]
 800f54c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	69ba      	ldr	r2, [r7, #24]
 800f554:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	697a      	ldr	r2, [r7, #20]
 800f55c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	693a      	ldr	r2, [r7, #16]
 800f564:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800f578:	bf00      	nop
 800f57a:	3724      	adds	r7, #36	; 0x24
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800f584:	b480      	push	{r7}
 800f586:	b08b      	sub	sp, #44	; 0x2c
 800f588:	af00      	add	r7, sp, #0
 800f58a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800f58e:	edc7 0a08 	vstr	s1, [r7, #32]
 800f592:	ed87 1a07 	vstr	s2, [r7, #28]
 800f596:	edc7 1a06 	vstr	s3, [r7, #24]
 800f59a:	ed87 2a05 	vstr	s4, [r7, #20]
 800f59e:	edc7 2a04 	vstr	s5, [r7, #16]
 800f5a2:	ed87 3a03 	vstr	s6, [r7, #12]
 800f5a6:	edc7 3a02 	vstr	s7, [r7, #8]
 800f5aa:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a3a      	ldr	r2, [r7, #32]
 800f5b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	69fa      	ldr	r2, [r7, #28]
 800f5c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	69ba      	ldr	r2, [r7, #24]
 800f5c8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	693a      	ldr	r2, [r7, #16]
 800f5d8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	68fa      	ldr	r2, [r7, #12]
 800f5e0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800f5ec:	bf00      	nop
 800f5ee:	372c      	adds	r7, #44	; 0x2c
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b08d      	sub	sp, #52	; 0x34
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800f602:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800f606:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800f60a:	edc7 1a08 	vstr	s3, [r7, #32]
 800f60e:	ed87 2a07 	vstr	s4, [r7, #28]
 800f612:	edc7 2a06 	vstr	s5, [r7, #24]
 800f616:	ed87 3a05 	vstr	s6, [r7, #20]
 800f61a:	edc7 3a04 	vstr	s7, [r7, #16]
 800f61e:	ed87 4a03 	vstr	s8, [r7, #12]
 800f622:	edc7 4a02 	vstr	s9, [r7, #8]
 800f626:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f62c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f634:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f63c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a3a      	ldr	r2, [r7, #32]
 800f644:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	69fa      	ldr	r2, [r7, #28]
 800f64c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	69ba      	ldr	r2, [r7, #24]
 800f654:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800f678:	bf00      	nop
 800f67a:	3734      	adds	r7, #52	; 0x34
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	0000      	movs	r0, r0
	...

0800f688 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800f688:	b5b0      	push	{r4, r5, r7, lr}
 800f68a:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 800f68e:	af02      	add	r7, sp, #8
 800f690:	4602      	mov	r2, r0
 800f692:	463b      	mov	r3, r7
 800f694:	6019      	str	r1, [r3, #0]
 800f696:	1dfb      	adds	r3, r7, #7
 800f698:	701a      	strb	r2, [r3, #0]
	uint32_t before, after;

//	*******************************************************************************LASER*************************************************************************************
	float lsr_center_1[1][7] = {{0, 2.56, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800f69a:	f04f 0300 	mov.w	r3, #0
 800f69e:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 800f6a2:	6013      	str	r3, [r2, #0]
 800f6a4:	4bbe      	ldr	r3, [pc, #760]	; (800f9a0 <LidarSetPos+0x318>)
 800f6a6:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800f6aa:	6013      	str	r3, [r2, #0]
 800f6ac:	4bbd      	ldr	r3, [pc, #756]	; (800f9a4 <LidarSetPos+0x31c>)
 800f6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7f0 ff49 	bl	8000548 <__aeabi_f2d>
 800f6b6:	a3b8      	add	r3, pc, #736	; (adr r3, 800f998 <LidarSetPos+0x310>)
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	f7f0 fde6 	bl	800028c <__adddf3>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	f7f1 fa8e 	bl	8000be8 <__aeabi_d2f>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 800f6d2:	6013      	str	r3, [r2, #0]
 800f6d4:	4bb4      	ldr	r3, [pc, #720]	; (800f9a8 <LidarSetPos+0x320>)
 800f6d6:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800f6da:	6013      	str	r3, [r2, #0]
 800f6dc:	4bb3      	ldr	r3, [pc, #716]	; (800f9ac <LidarSetPos+0x324>)
 800f6de:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800f6e2:	6013      	str	r3, [r2, #0]
 800f6e4:	4bb2      	ldr	r3, [pc, #712]	; (800f9b0 <LidarSetPos+0x328>)
 800f6e6:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800f6ea:	6013      	str	r3, [r2, #0]
 800f6ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f6f0:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
 800f6f4:	6013      	str	r3, [r2, #0]
	float lsr_center_2[1][7] = {{0, 4.37, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800f6f6:	f04f 0300 	mov.w	r3, #0
 800f6fa:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800f6fe:	6013      	str	r3, [r2, #0]
 800f700:	4bac      	ldr	r3, [pc, #688]	; (800f9b4 <LidarSetPos+0x32c>)
 800f702:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 800f706:	6013      	str	r3, [r2, #0]
 800f708:	4ba6      	ldr	r3, [pc, #664]	; (800f9a4 <LidarSetPos+0x31c>)
 800f70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7f0 ff1b 	bl	8000548 <__aeabi_f2d>
 800f712:	a3a1      	add	r3, pc, #644	; (adr r3, 800f998 <LidarSetPos+0x310>)
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	f7f0 fdb8 	bl	800028c <__adddf3>
 800f71c:	4602      	mov	r2, r0
 800f71e:	460b      	mov	r3, r1
 800f720:	4610      	mov	r0, r2
 800f722:	4619      	mov	r1, r3
 800f724:	f7f1 fa60 	bl	8000be8 <__aeabi_d2f>
 800f728:	4603      	mov	r3, r0
 800f72a:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800f72e:	6013      	str	r3, [r2, #0]
 800f730:	4b9d      	ldr	r3, [pc, #628]	; (800f9a8 <LidarSetPos+0x320>)
 800f732:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	4b9c      	ldr	r3, [pc, #624]	; (800f9ac <LidarSetPos+0x324>)
 800f73a:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800f73e:	6013      	str	r3, [r2, #0]
 800f740:	4b9b      	ldr	r3, [pc, #620]	; (800f9b0 <LidarSetPos+0x328>)
 800f742:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f74c:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800f750:	6013      	str	r3, [r2, #0]
	float lsr_center[1][7] = {{0, 5.74, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800f752:	f04f 0300 	mov.w	r3, #0
 800f756:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 800f75a:	6013      	str	r3, [r2, #0]
 800f75c:	4b96      	ldr	r3, [pc, #600]	; (800f9b8 <LidarSetPos+0x330>)
 800f75e:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800f762:	6013      	str	r3, [r2, #0]
 800f764:	4b8f      	ldr	r3, [pc, #572]	; (800f9a4 <LidarSetPos+0x31c>)
 800f766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f768:	4618      	mov	r0, r3
 800f76a:	f7f0 feed 	bl	8000548 <__aeabi_f2d>
 800f76e:	a38a      	add	r3, pc, #552	; (adr r3, 800f998 <LidarSetPos+0x310>)
 800f770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f774:	f7f0 fd8a 	bl	800028c <__adddf3>
 800f778:	4602      	mov	r2, r0
 800f77a:	460b      	mov	r3, r1
 800f77c:	4610      	mov	r0, r2
 800f77e:	4619      	mov	r1, r3
 800f780:	f7f1 fa32 	bl	8000be8 <__aeabi_d2f>
 800f784:	4603      	mov	r3, r0
 800f786:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	4b86      	ldr	r3, [pc, #536]	; (800f9a8 <LidarSetPos+0x320>)
 800f78e:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	4b85      	ldr	r3, [pc, #532]	; (800f9ac <LidarSetPos+0x324>)
 800f796:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 800f79a:	6013      	str	r3, [r2, #0]
 800f79c:	4b84      	ldr	r3, [pc, #528]	; (800f9b0 <LidarSetPos+0x328>)
 800f79e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800f7a2:	6013      	str	r3, [r2, #0]
 800f7a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f7a8:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 800f7ac:	6013      	str	r3, [r2, #0]
	float lsr_center_right[1][7] = {{0, 5.86, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800f7ae:	f04f 0300 	mov.w	r3, #0
 800f7b2:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800f7b6:	6013      	str	r3, [r2, #0]
 800f7b8:	4b80      	ldr	r3, [pc, #512]	; (800f9bc <LidarSetPos+0x334>)
 800f7ba:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 800f7be:	6013      	str	r3, [r2, #0]
 800f7c0:	4b78      	ldr	r3, [pc, #480]	; (800f9a4 <LidarSetPos+0x31c>)
 800f7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7f0 febf 	bl	8000548 <__aeabi_f2d>
 800f7ca:	a373      	add	r3, pc, #460	; (adr r3, 800f998 <LidarSetPos+0x310>)
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	f7f0 fd5c 	bl	800028c <__adddf3>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	4610      	mov	r0, r2
 800f7da:	4619      	mov	r1, r3
 800f7dc:	f7f1 fa04 	bl	8000be8 <__aeabi_d2f>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800f7e6:	6013      	str	r3, [r2, #0]
 800f7e8:	4b6f      	ldr	r3, [pc, #444]	; (800f9a8 <LidarSetPos+0x320>)
 800f7ea:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800f7ee:	6013      	str	r3, [r2, #0]
 800f7f0:	4b6e      	ldr	r3, [pc, #440]	; (800f9ac <LidarSetPos+0x324>)
 800f7f2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800f7f6:	6013      	str	r3, [r2, #0]
 800f7f8:	4b6d      	ldr	r3, [pc, #436]	; (800f9b0 <LidarSetPos+0x328>)
 800f7fa:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f804:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800f808:	6013      	str	r3, [r2, #0]
	float lsr_center_3[1][7] = {{0, 4.60, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800f80a:	f04f 0300 	mov.w	r3, #0
 800f80e:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 800f812:	6013      	str	r3, [r2, #0]
 800f814:	4b6a      	ldr	r3, [pc, #424]	; (800f9c0 <LidarSetPos+0x338>)
 800f816:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	4b61      	ldr	r3, [pc, #388]	; (800f9a4 <LidarSetPos+0x31c>)
 800f81e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f820:	4618      	mov	r0, r3
 800f822:	f7f0 fe91 	bl	8000548 <__aeabi_f2d>
 800f826:	a35c      	add	r3, pc, #368	; (adr r3, 800f998 <LidarSetPos+0x310>)
 800f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82c:	f7f0 fd2e 	bl	800028c <__adddf3>
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	4610      	mov	r0, r2
 800f836:	4619      	mov	r1, r3
 800f838:	f7f1 f9d6 	bl	8000be8 <__aeabi_d2f>
 800f83c:	4603      	mov	r3, r0
 800f83e:	f207 4274 	addw	r2, r7, #1140	; 0x474
 800f842:	6013      	str	r3, [r2, #0]
 800f844:	4b58      	ldr	r3, [pc, #352]	; (800f9a8 <LidarSetPos+0x320>)
 800f846:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800f84a:	6013      	str	r3, [r2, #0]
 800f84c:	4b57      	ldr	r3, [pc, #348]	; (800f9ac <LidarSetPos+0x324>)
 800f84e:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	4b56      	ldr	r3, [pc, #344]	; (800f9b0 <LidarSetPos+0x328>)
 800f856:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f860:	f207 4284 	addw	r2, r7, #1156	; 0x484
 800f864:	6013      	str	r3, [r2, #0]
	float lsr_center_4[1][7] = {{0, 2.67, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	4b54      	ldr	r3, [pc, #336]	; (800f9c4 <LidarSetPos+0x33c>)
 800f872:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800f876:	6013      	str	r3, [r2, #0]
 800f878:	4b4a      	ldr	r3, [pc, #296]	; (800f9a4 <LidarSetPos+0x31c>)
 800f87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f0 fe63 	bl	8000548 <__aeabi_f2d>
 800f882:	a345      	add	r3, pc, #276	; (adr r3, 800f998 <LidarSetPos+0x310>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	f7f0 fd00 	bl	800028c <__adddf3>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	4610      	mov	r0, r2
 800f892:	4619      	mov	r1, r3
 800f894:	f7f1 f9a8 	bl	8000be8 <__aeabi_d2f>
 800f898:	4603      	mov	r3, r0
 800f89a:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	4b41      	ldr	r3, [pc, #260]	; (800f9a8 <LidarSetPos+0x320>)
 800f8a2:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 800f8a6:	6013      	str	r3, [r2, #0]
 800f8a8:	4b40      	ldr	r3, [pc, #256]	; (800f9ac <LidarSetPos+0x324>)
 800f8aa:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	4b3f      	ldr	r3, [pc, #252]	; (800f9b0 <LidarSetPos+0x328>)
 800f8b2:	f207 4264 	addw	r2, r7, #1124	; 0x464
 800f8b6:	6013      	str	r3, [r2, #0]
 800f8b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8bc:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800f8c0:	6013      	str	r3, [r2, #0]
//	*******************************************************************************LASER*************************************************************************************

	// Pick Left
	float pick_left_adjust[1][7] = {{3.5, 1.8, 0.6, -90.0, 0, 0, 0}};
 800f8c2:	4b41      	ldr	r3, [pc, #260]	; (800f9c8 <LidarSetPos+0x340>)
 800f8c4:	f207 4434 	addw	r4, r7, #1076	; 0x434
 800f8c8:	461d      	mov	r5, r3
 800f8ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f8d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float laser_adjust_center_4[1][7] = {{3.5, 5, 0.1, -90, 0, 0, 0}};
 800f8d6:	4b3d      	ldr	r3, [pc, #244]	; (800f9cc <LidarSetPos+0x344>)
 800f8d8:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 800f8dc:	461d      	mov	r5, r3
 800f8de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f8e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//	float bang_fence[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};

	// Only offset 1 pole
	float pick_left_to_center_1[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};
 800f8ea:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800f8ee:	4a38      	ldr	r2, [pc, #224]	; (800f9d0 <LidarSetPos+0x348>)
 800f8f0:	461c      	mov	r4, r3
 800f8f2:	4615      	mov	r5, r2
 800f8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f8fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{PoleSpeed, 1.35, 0.2, -90, 0, 0, 0}};
 800f900:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800f904:	4a33      	ldr	r2, [pc, #204]	; (800f9d4 <LidarSetPos+0x34c>)
 800f906:	461c      	mov	r4, r3
 800f908:	4615      	mov	r5, r2
 800f90a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f90c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f90e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_1[1][7] = {{PoleSpeed, -1.4, 0.2, -90, 0, 0, 0}};
 800f916:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800f91a:	4a2f      	ldr	r2, [pc, #188]	; (800f9d8 <LidarSetPos+0x350>)
 800f91c:	461c      	mov	r4, r3
 800f91e:	4615      	mov	r5, r2
 800f920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f928:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center[1][7] = {{PoleSpeed, 0.95, 0.2, -90, 0, 0, 0}};
 800f92c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800f930:	4a2a      	ldr	r2, [pc, #168]	; (800f9dc <LidarSetPos+0x354>)
 800f932:	461c      	mov	r4, r3
 800f934:	4615      	mov	r5, r2
 800f936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f93a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f93e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_2[1][7] = {{PoleSpeed, -1.0, 0.2, -90, 0, 0, 0}};
 800f942:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f946:	4a26      	ldr	r2, [pc, #152]	; (800f9e0 <LidarSetPos+0x358>)
 800f948:	461c      	mov	r4, r3
 800f94a:	4615      	mov	r5, r2
 800f94c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f94e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f950:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_3[1][7] = {{PoleSpeed, 0.9, 0.2, -90, 0, 0, 0}};
 800f958:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800f95c:	4a21      	ldr	r2, [pc, #132]	; (800f9e4 <LidarSetPos+0x35c>)
 800f95e:	461c      	mov	r4, r3
 800f960:	4615      	mov	r5, r2
 800f962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f96a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center[1][7] = {{PoleSpeed, -0.85, 0.2, -90, 0, 0, 0}};
 800f96e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800f972:	4a1d      	ldr	r2, [pc, #116]	; (800f9e8 <LidarSetPos+0x360>)
 800f974:	461c      	mov	r4, r3
 800f976:	4615      	mov	r5, r2
 800f978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f97a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f97c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_4[1][7] = {{PoleSpeed, 1.5, 0.2, -90, 0, 0, 0}};
 800f984:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800f988:	4a18      	ldr	r2, [pc, #96]	; (800f9ec <LidarSetPos+0x364>)
 800f98a:	461c      	mov	r4, r3
 800f98c:	4615      	mov	r5, r2
 800f98e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f992:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f996:	e02b      	b.n	800f9f0 <LidarSetPos+0x368>
 800f998:	33333333 	.word	0x33333333
 800f99c:	3fd33333 	.word	0x3fd33333
 800f9a0:	4023d70a 	.word	0x4023d70a
 800f9a4:	20006d4c 	.word	0x20006d4c
 800f9a8:	c2b40000 	.word	0xc2b40000
 800f9ac:	41080000 	.word	0x41080000
 800f9b0:	3d75c28f 	.word	0x3d75c28f
 800f9b4:	408bd70a 	.word	0x408bd70a
 800f9b8:	40b7ae14 	.word	0x40b7ae14
 800f9bc:	40bb851f 	.word	0x40bb851f
 800f9c0:	40933333 	.word	0x40933333
 800f9c4:	402ae148 	.word	0x402ae148
 800f9c8:	080250d0 	.word	0x080250d0
 800f9cc:	080250ec 	.word	0x080250ec
 800f9d0:	08025108 	.word	0x08025108
 800f9d4:	08025124 	.word	0x08025124
 800f9d8:	08025140 	.word	0x08025140
 800f9dc:	0802515c 	.word	0x0802515c
 800f9e0:	08025178 	.word	0x08025178
 800f9e4:	08025194 	.word	0x08025194
 800f9e8:	080251b0 	.word	0x080251b0
 800f9ec:	080251cc 	.word	0x080251cc
 800f9f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center_3[1][7] = {{PoleSpeed, -1.4, 0.1, -90, 0, 0, 0}};
 800f9f4:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800f9f8:	4abf      	ldr	r2, [pc, #764]	; (800fcf8 <LidarSetPos+0x670>)
 800f9fa:	461c      	mov	r4, r3
 800f9fc:	4615      	mov	r5, r2
 800f9fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_upper_right[1][7] = {{PoleSpeed, 1.55, 0.0, -90, 0, 0, 0}};
 800fa0a:	f507 7340 	add.w	r3, r7, #768	; 0x300
 800fa0e:	4abb      	ldr	r2, [pc, #748]	; (800fcfc <LidarSetPos+0x674>)
 800fa10:	461c      	mov	r4, r3
 800fa12:	4615      	mov	r5, r2
 800fa14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800fa20:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800fa24:	4ab6      	ldr	r2, [pc, #728]	; (800fd00 <LidarSetPos+0x678>)
 800fa26:	461c      	mov	r4, r3
 800fa28:	4615      	mov	r5, r2
 800fa2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4[1][7] = {{PoleSpeed, 0.5, -4.1, -90, 0, 0, 0}};
 800fa36:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800fa3a:	4ab2      	ldr	r2, [pc, #712]	; (800fd04 <LidarSetPos+0x67c>)
 800fa3c:	461c      	mov	r4, r3
 800fa3e:	4615      	mov	r5, r2
 800fa40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4_2[1][7] = {{PoleSpeed, -1.3, 0.0, -90.0, 0, 0, 0}};
 800fa4c:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800fa50:	4aad      	ldr	r2, [pc, #692]	; (800fd08 <LidarSetPos+0x680>)
 800fa52:	461c      	mov	r4, r3
 800fa54:	4615      	mov	r5, r2
 800fa56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_pick_right[1][7] = {{PoleSpeed, 0.5, -4.35, -180.0, 0, 0, 0}};
 800fa62:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800fa66:	4aa9      	ldr	r2, [pc, #676]	; (800fd0c <LidarSetPos+0x684>)
 800fa68:	461c      	mov	r4, r3
 800fa6a:	4615      	mov	r5, r2
 800fa6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right[1][7] = {{PoleSpeed, -0.2, 0.5, -90, 0, 0, 0}};
 800fa78:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800fa7c:	4aa4      	ldr	r2, [pc, #656]	; (800fd10 <LidarSetPos+0x688>)
 800fa7e:	461c      	mov	r4, r3
 800fa80:	4615      	mov	r5, r2
 800fa82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right_2[1][7] = {{PoleSpeed, 0.2, 6, -178.0, 0, 0, 0}};
 800fa8e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800fa92:	4aa0      	ldr	r2, [pc, #640]	; (800fd14 <LidarSetPos+0x68c>)
 800fa94:	461c      	mov	r4, r3
 800fa96:	4615      	mov	r5, r2
 800fa98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800faa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Offset 2 poles
	float center_1_to_center[1][7] = {{PoleSpeed, 2.6, 0.2, -90, 0, 0, 0}};
 800faa4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800faa8:	4a9b      	ldr	r2, [pc, #620]	; (800fd18 <LidarSetPos+0x690>)
 800faaa:	461c      	mov	r4, r3
 800faac:	4615      	mov	r5, r2
 800faae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_1[1][7] = {{PoleSpeed, -2.7, 0.2, -90, 0, 0, 0}};
 800faba:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800fabe:	4a97      	ldr	r2, [pc, #604]	; (800fd1c <LidarSetPos+0x694>)
 800fac0:	461c      	mov	r4, r3
 800fac2:	4615      	mov	r5, r2
 800fac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fac8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800facc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_4[1][7] = {{PoleSpeed, 2.55, 0.2, -90, 0, 0, 0}};
 800fad0:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800fad4:	4a92      	ldr	r2, [pc, #584]	; (800fd20 <LidarSetPos+0x698>)
 800fad6:	461c      	mov	r4, r3
 800fad8:	4615      	mov	r5, r2
 800fada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fadc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center[1][7] = {{PoleSpeed, -2.7, 0.2, -90, 0, 0, 0}};
 800fae6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800faea:	4a8c      	ldr	r2, [pc, #560]	; (800fd1c <LidarSetPos+0x694>)
 800faec:	461c      	mov	r4, r3
 800faee:	4615      	mov	r5, r2
 800faf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800faf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_3[1][7] = {{PoleSpeed, 2.0, 0.2, -90, 0, 0, 0}};
 800fafc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800fb00:	4a88      	ldr	r2, [pc, #544]	; (800fd24 <LidarSetPos+0x69c>)
 800fb02:	461c      	mov	r4, r3
 800fb04:	4615      	mov	r5, r2
 800fb06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_2[1][7] = {{PoleSpeed, -1.85, 0.2, -90, 0, 0, 0}};
 800fb12:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800fb16:	4a84      	ldr	r2, [pc, #528]	; (800fd28 <LidarSetPos+0x6a0>)
 800fb18:	461c      	mov	r4, r3
 800fb1a:	4615      	mov	r5, r2
 800fb1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_upper_right[1][7] = {{PoleSpeed, 3.4, 0.0, -90, 0, 0, 0}};
 800fb28:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800fb2c:	4a7f      	ldr	r2, [pc, #508]	; (800fd2c <LidarSetPos+0x6a4>)
 800fb2e:	461c      	mov	r4, r3
 800fb30:	4615      	mov	r5, r2
 800fb32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800fb3e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800fb42:	4a6f      	ldr	r2, [pc, #444]	; (800fd00 <LidarSetPos+0x678>)
 800fb44:	461c      	mov	r4, r3
 800fb46:	4615      	mov	r5, r2
 800fb48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3[1][7] = {{PoleSpeed, 0.5, -4.2, -90, 0, 0, 0}};
 800fb54:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800fb58:	4a75      	ldr	r2, [pc, #468]	; (800fd30 <LidarSetPos+0x6a8>)
 800fb5a:	461c      	mov	r4, r3
 800fb5c:	4615      	mov	r5, r2
 800fb5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3_2[1][7] = {{PoleSpeed, -3.3, 0.0, -90, 0, 0, 0}};
 800fb6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fb6e:	4a71      	ldr	r2, [pc, #452]	; (800fd34 <LidarSetPos+0x6ac>)
 800fb70:	461c      	mov	r4, r3
 800fb72:	4615      	mov	r5, r2
 800fb74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_pick_right[1][7] = {{PoleSpeed, 2.5, -0.35, -90, 0, 0, 0}};
 800fb80:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800fb84:	4a6c      	ldr	r2, [pc, #432]	; (800fd38 <LidarSetPos+0x6b0>)
 800fb86:	461c      	mov	r4, r3
 800fb88:	4615      	mov	r5, r2
 800fb8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb92:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float pick_right_to_center_4_servo[1][7] = {{4, 0, 0.4, -90, 0, 0, 0}};
 800fb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb9a:	4a68      	ldr	r2, [pc, #416]	; (800fd3c <LidarSetPos+0x6b4>)
 800fb9c:	461c      	mov	r4, r3
 800fb9e:	4615      	mov	r5, r2
 800fba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_4[1][7] = {{5, -2.1, 0.8, -90, 0, 0, 0}};
 800fbac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800fbb0:	4a63      	ldr	r2, [pc, #396]	; (800fd40 <LidarSetPos+0x6b8>)
 800fbb2:	461c      	mov	r4, r3
 800fbb4:	4615      	mov	r5, r2
 800fbb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_3[1][7] = {{5, -3.75, 0.8, -90, 0, 0, 0}};
 800fbc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800fbc6:	4a5f      	ldr	r2, [pc, #380]	; (800fd44 <LidarSetPos+0x6bc>)
 800fbc8:	461c      	mov	r4, r3
 800fbca:	4615      	mov	r5, r2
 800fbcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center[1][7] = {{5, -4.76, 0.8, -90, 0, 0, 0}};
 800fbd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fbdc:	4a5a      	ldr	r2, [pc, #360]	; (800fd48 <LidarSetPos+0x6c0>)
 800fbde:	461c      	mov	r4, r3
 800fbe0:	4615      	mov	r5, r2
 800fbe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbe6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_2[1][7] = {{5, -5.76, 0.8, -90, 0, 0, 0}};
 800fbee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fbf2:	4a56      	ldr	r2, [pc, #344]	; (800fd4c <LidarSetPos+0x6c4>)
 800fbf4:	461c      	mov	r4, r3
 800fbf6:	4615      	mov	r5, r2
 800fbf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc00:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	float center_3_to_pick_right[1][7] = {{PoleSpeed, 6, -0.25, -90, 0, 0, 0}};
 800fc04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800fc08:	4a51      	ldr	r2, [pc, #324]	; (800fd50 <LidarSetPos+0x6c8>)
 800fc0a:	461c      	mov	r4, r3
 800fc0c:	4615      	mov	r5, r2
 800fc0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_pick_right[1][7] = {{PoleSpeed, 7, -0.25, -90, 0, 0, 0}};
 800fc1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc1e:	4a4d      	ldr	r2, [pc, #308]	; (800fd54 <LidarSetPos+0x6cc>)
 800fc20:	461c      	mov	r4, r3
 800fc22:	4615      	mov	r5, r2
 800fc24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_pick_right[1][7] = {{PoleSpeed, 8.5, -0.25, -90, 0, 0, 0}};
 800fc30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800fc34:	4a48      	ldr	r2, [pc, #288]	; (800fd58 <LidarSetPos+0x6d0>)
 800fc36:	461c      	mov	r4, r3
 800fc38:	4615      	mov	r5, r2
 800fc3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_pick_right[1][7] = {{PoleSpeed, 10, -0.25, -90, 0, 0, 0}};
 800fc46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc4a:	4a44      	ldr	r2, [pc, #272]	; (800fd5c <LidarSetPos+0x6d4>)
 800fc4c:	461c      	mov	r4, r3
 800fc4e:	4615      	mov	r5, r2
 800fc50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc58:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float robot_center[1][7] = {{2.0, pp.real_x, pp.real_y + 0.1, -90, 0, 0, 0}};
 800fc5c:	f107 030c 	add.w	r3, r7, #12
 800fc60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fc64:	601a      	str	r2, [r3, #0]
 800fc66:	4b3e      	ldr	r3, [pc, #248]	; (800fd60 <LidarSetPos+0x6d8>)
 800fc68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc6a:	f107 030c 	add.w	r3, r7, #12
 800fc6e:	605a      	str	r2, [r3, #4]
 800fc70:	4b3b      	ldr	r3, [pc, #236]	; (800fd60 <LidarSetPos+0x6d8>)
 800fc72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7f0 fc67 	bl	8000548 <__aeabi_f2d>
 800fc7a:	a31d      	add	r3, pc, #116	; (adr r3, 800fcf0 <LidarSetPos+0x668>)
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	f7f0 fb04 	bl	800028c <__adddf3>
 800fc84:	4602      	mov	r2, r0
 800fc86:	460b      	mov	r3, r1
 800fc88:	4610      	mov	r0, r2
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	f7f0 ffac 	bl	8000be8 <__aeabi_d2f>
 800fc90:	4602      	mov	r2, r0
 800fc92:	f107 030c 	add.w	r3, r7, #12
 800fc96:	609a      	str	r2, [r3, #8]
 800fc98:	f107 030c 	add.w	r3, r7, #12
 800fc9c:	4a31      	ldr	r2, [pc, #196]	; (800fd64 <LidarSetPos+0x6dc>)
 800fc9e:	60da      	str	r2, [r3, #12]
 800fca0:	f107 030c 	add.w	r3, r7, #12
 800fca4:	f04f 0200 	mov.w	r2, #0
 800fca8:	611a      	str	r2, [r3, #16]
 800fcaa:	f107 030c 	add.w	r3, r7, #12
 800fcae:	f04f 0200 	mov.w	r2, #0
 800fcb2:	615a      	str	r2, [r3, #20]
 800fcb4:	f107 030c 	add.w	r3, r7, #12
 800fcb8:	f04f 0200 	mov.w	r2, #0
 800fcbc:	619a      	str	r2, [r3, #24]

	switch(pose) // Target Pose
 800fcbe:	1dfb      	adds	r3, r7, #7
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	3b02      	subs	r3, #2
 800fcc4:	2b07      	cmp	r3, #7
 800fcc6:	f204 80f9 	bhi.w	8013ebc <LidarSetPos+0x4834>
 800fcca:	a201      	add	r2, pc, #4	; (adr r2, 800fcd0 <LidarSetPos+0x648>)
 800fccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd0:	0800fd69 	.word	0x0800fd69
 800fcd4:	0800fdd7 	.word	0x0800fdd7
 800fcd8:	080105d3 	.word	0x080105d3
 800fcdc:	080112d9 	.word	0x080112d9
 800fce0:	08011fc1 	.word	0x08011fc1
 800fce4:	08012df1 	.word	0x08012df1
 800fce8:	0801381d 	.word	0x0801381d
 800fcec:	08013821 	.word	0x08013821
 800fcf0:	9999999a 	.word	0x9999999a
 800fcf4:	3fb99999 	.word	0x3fb99999
 800fcf8:	080251e8 	.word	0x080251e8
 800fcfc:	08025204 	.word	0x08025204
 800fd00:	08025220 	.word	0x08025220
 800fd04:	0802523c 	.word	0x0802523c
 800fd08:	08025258 	.word	0x08025258
 800fd0c:	08025274 	.word	0x08025274
 800fd10:	08025290 	.word	0x08025290
 800fd14:	080252ac 	.word	0x080252ac
 800fd18:	080252c8 	.word	0x080252c8
 800fd1c:	080252e4 	.word	0x080252e4
 800fd20:	08025300 	.word	0x08025300
 800fd24:	0802531c 	.word	0x0802531c
 800fd28:	08025338 	.word	0x08025338
 800fd2c:	08025354 	.word	0x08025354
 800fd30:	08025370 	.word	0x08025370
 800fd34:	0802538c 	.word	0x0802538c
 800fd38:	080253a8 	.word	0x080253a8
 800fd3c:	080253c4 	.word	0x080253c4
 800fd40:	080253e0 	.word	0x080253e0
 800fd44:	080253fc 	.word	0x080253fc
 800fd48:	08025418 	.word	0x08025418
 800fd4c:	08025434 	.word	0x08025434
 800fd50:	08025450 	.word	0x08025450
 800fd54:	0802546c 	.word	0x0802546c
 800fd58:	08025488 	.word	0x08025488
 800fd5c:	080254a4 	.word	0x080254a4
 800fd60:	20006d4c 	.word	0x20006d4c
 800fd64:	c2b40000 	.word	0xc2b40000
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 800fd68:	463b      	mov	r3, r7
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fd70:	3b01      	subs	r3, #1
 800fd72:	2b08      	cmp	r3, #8
 800fd74:	d82c      	bhi.n	800fdd0 <LidarSetPos+0x748>
 800fd76:	a201      	add	r2, pc, #4	; (adr r2, 800fd7c <LidarSetPos+0x6f4>)
 800fd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd7c:	0800fda1 	.word	0x0800fda1
 800fd80:	0800fdd1 	.word	0x0800fdd1
 800fd84:	0800fdd1 	.word	0x0800fdd1
 800fd88:	0800fdd1 	.word	0x0800fdd1
 800fd8c:	0800fdb9 	.word	0x0800fdb9
 800fd90:	0800fdd1 	.word	0x0800fdd1
 800fd94:	0800fdd1 	.word	0x0800fdd1
 800fd98:	0800fdc5 	.word	0x0800fdc5
 800fd9c:	0800fdad 	.word	0x0800fdad
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 800fda0:	463b      	mov	r3, r7
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2202      	movs	r2, #2
 800fda6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fdaa:	e012      	b.n	800fdd2 <LidarSetPos+0x74a>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 800fdac:	463b      	mov	r3, r7
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fdb6:	e00c      	b.n	800fdd2 <LidarSetPos+0x74a>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 800fdb8:	463b      	mov	r3, r7
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2202      	movs	r2, #2
 800fdbe:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fdc2:	e006      	b.n	800fdd2 <LidarSetPos+0x74a>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 800fdc4:	463b      	mov	r3, r7
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2202      	movs	r2, #2
 800fdca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fdce:	e000      	b.n	800fdd2 <LidarSetPos+0x74a>

				default:
					break;
 800fdd0:	bf00      	nop

			}
			break;
 800fdd2:	f004 b874 	b.w	8013ebe <LidarSetPos+0x4836>

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 800fdd6:	463b      	mov	r3, r7
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800fdde:	3b01      	subs	r3, #1
 800fde0:	2b08      	cmp	r3, #8
 800fde2:	f200 83e4 	bhi.w	80105ae <LidarSetPos+0xf26>
 800fde6:	a201      	add	r2, pc, #4	; (adr r2, 800fdec <LidarSetPos+0x764>)
 800fde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdec:	0800fe11 	.word	0x0800fe11
 800fdf0:	0800fea1 	.word	0x0800fea1
 800fdf4:	080105af 	.word	0x080105af
 800fdf8:	0800feb9 	.word	0x0800feb9
 800fdfc:	080100f5 	.word	0x080100f5
 800fe00:	08010305 	.word	0x08010305
 800fe04:	08010485 	.word	0x08010485
 800fe08:	0800fead 	.word	0x0800fead
 800fe0c:	0800fe95 	.word	0x0800fe95
			{
				case PICK_LEFT:
					lidar->fail = 0;
 800fe10:	463b      	mov	r3, r7
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 800fe1a:	4bab      	ldr	r3, [pc, #684]	; (80100c8 <LidarSetPos+0xa40>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800fe20:	4baa      	ldr	r3, [pc, #680]	; (80100cc <LidarSetPos+0xa44>)
 800fe22:	4aab      	ldr	r2, [pc, #684]	; (80100d0 <LidarSetPos+0xa48>)
 800fe24:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800fe26:	4bab      	ldr	r3, [pc, #684]	; (80100d4 <LidarSetPos+0xa4c>)
 800fe28:	4aab      	ldr	r2, [pc, #684]	; (80100d8 <LidarSetPos+0xa50>)
 800fe2a:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 800fe2c:	f7fe f8aa 	bl	800df84 <ResetCoordinate>
					lidar->pos = CENTER_1;
 800fe30:	463b      	mov	r3, r7
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2203      	movs	r2, #3
 800fe36:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					PP_start(pick_left_adjust, 1, &pp);
 800fe3a:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800fe3e:	4aa7      	ldr	r2, [pc, #668]	; (80100dc <LidarSetPos+0xa54>)
 800fe40:	2101      	movs	r1, #1
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7f5 ff0c 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 800fe48:	e00d      	b.n	800fe66 <LidarSetPos+0x7de>
					{
						if(ps4.button == SQUARE)
 800fe4a:	4ba5      	ldr	r3, [pc, #660]	; (80100e0 <LidarSetPos+0xa58>)
 800fe4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe52:	d108      	bne.n	800fe66 <LidarSetPos+0x7de>
						{
							while(ps4.button == SQUARE);
 800fe54:	bf00      	nop
 800fe56:	4ba2      	ldr	r3, [pc, #648]	; (80100e0 <LidarSetPos+0xa58>)
 800fe58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe5e:	d0fa      	beq.n	800fe56 <LidarSetPos+0x7ce>
							PP_stop(&pp);
 800fe60:	489e      	ldr	r0, [pc, #632]	; (80100dc <LidarSetPos+0xa54>)
 800fe62:	f7f6 fa35 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 800fe66:	4b9d      	ldr	r3, [pc, #628]	; (80100dc <LidarSetPos+0xa54>)
 800fe68:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800fe6c:	f003 0301 	and.w	r3, r3, #1
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d1e9      	bne.n	800fe4a <LidarSetPos+0x7c2>
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

//					Shot();
					stick_fence = 1;
 800fe76:	4b94      	ldr	r3, [pc, #592]	; (80100c8 <LidarSetPos+0xa40>)
 800fe78:	2201      	movs	r2, #1
 800fe7a:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 800fe7c:	463b      	mov	r3, r7
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f040 8395 	bne.w	80105b4 <LidarSetPos+0xf2c>
						LidarAdjust(lidar);
 800fe8a:	463b      	mov	r3, r7
 800fe8c:	6818      	ldr	r0, [r3, #0]
 800fe8e:	f004 ff6b 	bl	8014d68 <LidarAdjust>
					break;
 800fe92:	e38f      	b.n	80105b4 <LidarSetPos+0xf2c>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 800fe94:	463b      	mov	r3, r7
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2203      	movs	r2, #3
 800fe9a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800fe9e:	e396      	b.n	80105ce <LidarSetPos+0xf46>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 800fea0:	463b      	mov	r3, r7
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2203      	movs	r2, #3
 800fea6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800feaa:	e390      	b.n	80105ce <LidarSetPos+0xf46>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 800feac:	463b      	mov	r3, r7
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2203      	movs	r2, #3
 800feb2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 800feb6:	e38a      	b.n	80105ce <LidarSetPos+0xf46>

				case CENTER_2:
					lidar->fail = 0;
 800feb8:	463b      	mov	r3, r7
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2200      	movs	r2, #0
 800febe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 800fec2:	4b81      	ldr	r3, [pc, #516]	; (80100c8 <LidarSetPos+0xa40>)
 800fec4:	2200      	movs	r2, #0
 800fec6:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 800fec8:	4b80      	ldr	r3, [pc, #512]	; (80100cc <LidarSetPos+0xa44>)
 800feca:	4a81      	ldr	r2, [pc, #516]	; (80100d0 <LidarSetPos+0xa48>)
 800fecc:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 800fece:	4b81      	ldr	r3, [pc, #516]	; (80100d4 <LidarSetPos+0xa4c>)
 800fed0:	4a81      	ldr	r2, [pc, #516]	; (80100d8 <LidarSetPos+0xa50>)
 800fed2:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 800fed4:	463b      	mov	r3, r7
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d158      	bne.n	800ff92 <LidarSetPos+0x90a>
					{
						ResetCoordinate();
 800fee0:	f7fe f850 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_1;
 800fee4:	463b      	mov	r3, r7
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2203      	movs	r2, #3
 800feea:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_2_to_center_1, 1, &pp);
 800feee:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800fef2:	4a7a      	ldr	r2, [pc, #488]	; (80100dc <LidarSetPos+0xa54>)
 800fef4:	2101      	movs	r1, #1
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7f5 feb2 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 800fefc:	e040      	b.n	800ff80 <LidarSetPos+0x8f8>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 800fefe:	2108      	movs	r1, #8
 800ff00:	4878      	ldr	r0, [pc, #480]	; (80100e4 <LidarSetPos+0xa5c>)
 800ff02:	f007 fc3d 	bl	8017780 <HAL_GPIO_ReadPin>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d006      	beq.n	800ff1a <LidarSetPos+0x892>
 800ff0c:	2110      	movs	r1, #16
 800ff0e:	4875      	ldr	r0, [pc, #468]	; (80100e4 <LidarSetPos+0xa5c>)
 800ff10:	f007 fc36 	bl	8017780 <HAL_GPIO_ReadPin>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d109      	bne.n	800ff2e <LidarSetPos+0x8a6>
							{
								pp.target_y[0] = pp.real_y;
 800ff1a:	4b70      	ldr	r3, [pc, #448]	; (80100dc <LidarSetPos+0xa54>)
 800ff1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff1e:	4a6f      	ldr	r2, [pc, #444]	; (80100dc <LidarSetPos+0xa54>)
 800ff20:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 800ff24:	4b6d      	ldr	r3, [pc, #436]	; (80100dc <LidarSetPos+0xa54>)
 800ff26:	f04f 0200 	mov.w	r2, #0
 800ff2a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_2_to_center_1[0][1])
 800ff2e:	4b6b      	ldr	r3, [pc, #428]	; (80100dc <LidarSetPos+0xa54>)
 800ff30:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ff34:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800ff38:	edd3 7a01 	vldr	s15, [r3, #4]
 800ff3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff44:	d809      	bhi.n	800ff5a <LidarSetPos+0x8d2>
							{
								pp.target_y[0] = pp.real_y;
 800ff46:	4b65      	ldr	r3, [pc, #404]	; (80100dc <LidarSetPos+0xa54>)
 800ff48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff4a:	4a64      	ldr	r2, [pc, #400]	; (80100dc <LidarSetPos+0xa54>)
 800ff4c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 800ff50:	4b62      	ldr	r3, [pc, #392]	; (80100dc <LidarSetPos+0xa54>)
 800ff52:	f04f 0200 	mov.w	r2, #0
 800ff56:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 800ff5a:	4b61      	ldr	r3, [pc, #388]	; (80100e0 <LidarSetPos+0xa58>)
 800ff5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff62:	d10d      	bne.n	800ff80 <LidarSetPos+0x8f8>
							{
								while(ps4.button == SQUARE);
 800ff64:	bf00      	nop
 800ff66:	4b5e      	ldr	r3, [pc, #376]	; (80100e0 <LidarSetPos+0xa58>)
 800ff68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff6e:	d0fa      	beq.n	800ff66 <LidarSetPos+0x8de>
								PP_stop(&pp);
 800ff70:	485a      	ldr	r0, [pc, #360]	; (80100dc <LidarSetPos+0xa54>)
 800ff72:	f7f6 f9ad 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 800ff76:	463b      	mov	r3, r7
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 800ff80:	4b56      	ldr	r3, [pc, #344]	; (80100dc <LidarSetPos+0xa54>)
 800ff82:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1b6      	bne.n	800fefe <LidarSetPos+0x876>
 800ff90:	e043      	b.n	801001a <LidarSetPos+0x992>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_1;
 800ff92:	463b      	mov	r3, r7
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	2203      	movs	r2, #3
 800ff98:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_1, 1, &pp, 0, 0);
 800ff9c:	f207 40dc 	addw	r0, r7, #1244	; 0x4dc
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	9300      	str	r3, [sp, #0]
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4a4d      	ldr	r2, [pc, #308]	; (80100dc <LidarSetPos+0xa54>)
 800ffa8:	2101      	movs	r1, #1
 800ffaa:	f7f6 f81f 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 800ffae:	e02c      	b.n	801000a <LidarSetPos+0x982>
						{
							if(ps4.button == SQUARE)
 800ffb0:	4b4b      	ldr	r3, [pc, #300]	; (80100e0 <LidarSetPos+0xa58>)
 800ffb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffb8:	d108      	bne.n	800ffcc <LidarSetPos+0x944>
							{
								while(ps4.button == SQUARE);
 800ffba:	bf00      	nop
 800ffbc:	4b48      	ldr	r3, [pc, #288]	; (80100e0 <LidarSetPos+0xa58>)
 800ffbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffc4:	d0fa      	beq.n	800ffbc <LidarSetPos+0x934>
								PP_stop(&pp);
 800ffc6:	4845      	ldr	r0, [pc, #276]	; (80100dc <LidarSetPos+0xa54>)
 800ffc8:	f7f6 f982 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_1[0][1] + Offset)
 800ffcc:	4b46      	ldr	r3, [pc, #280]	; (80100e8 <LidarSetPos+0xa60>)
 800ffce:	69db      	ldr	r3, [r3, #28]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7f0 fab9 	bl	8000548 <__aeabi_f2d>
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	460d      	mov	r5, r1
 800ffda:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f0 fab1 	bl	8000548 <__aeabi_f2d>
 800ffe6:	f04f 0200 	mov.w	r2, #0
 800ffea:	4b40      	ldr	r3, [pc, #256]	; (80100ec <LidarSetPos+0xa64>)
 800ffec:	f7f0 f94e 	bl	800028c <__adddf3>
 800fff0:	4602      	mov	r2, r0
 800fff2:	460b      	mov	r3, r1
 800fff4:	4620      	mov	r0, r4
 800fff6:	4629      	mov	r1, r5
 800fff8:	f7f0 fd7a 	bl	8000af0 <__aeabi_dcmple>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d100      	bne.n	8010004 <LidarSetPos+0x97c>
 8010002:	e002      	b.n	801000a <LidarSetPos+0x982>
								PP_stop(&pp);
 8010004:	4835      	ldr	r0, [pc, #212]	; (80100dc <LidarSetPos+0xa54>)
 8010006:	f7f6 f963 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 801000a:	4b34      	ldr	r3, [pc, #208]	; (80100dc <LidarSetPos+0xa54>)
 801000c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010010:	f003 0310 	and.w	r3, r3, #16
 8010014:	b2db      	uxtb	r3, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1ca      	bne.n	800ffb0 <LidarSetPos+0x928>
						}
					}

					PP_start(robot_center, 1, &pp);
 801001a:	f107 030c 	add.w	r3, r7, #12
 801001e:	4a2f      	ldr	r2, [pc, #188]	; (80100dc <LidarSetPos+0xa54>)
 8010020:	2101      	movs	r1, #1
 8010022:	4618      	mov	r0, r3
 8010024:	f7f5 fe1c 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8010028:	f005 fd2e 	bl	8015a88 <HAL_GetTick>
 801002c:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8010030:	e026      	b.n	8010080 <LidarSetPos+0x9f8>
					{
						after = HAL_GetTick();
 8010032:	f005 fd29 	bl	8015a88 <HAL_GetTick>
 8010036:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 801003a:	4b28      	ldr	r3, [pc, #160]	; (80100dc <LidarSetPos+0xa54>)
 801003c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010040:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80100f0 <LidarSetPos+0xa68>
 8010044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004c:	d80a      	bhi.n	8010064 <LidarSetPos+0x9dc>
 801004e:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8010052:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010056:	1ad3      	subs	r3, r2, r3
 8010058:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801005c:	d302      	bcc.n	8010064 <LidarSetPos+0x9dc>
							PP_stop(&pp);
 801005e:	481f      	ldr	r0, [pc, #124]	; (80100dc <LidarSetPos+0xa54>)
 8010060:	f7f6 f936 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8010064:	4b1e      	ldr	r3, [pc, #120]	; (80100e0 <LidarSetPos+0xa58>)
 8010066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801006c:	d108      	bne.n	8010080 <LidarSetPos+0x9f8>
						{
							while(ps4.button == SQUARE);
 801006e:	bf00      	nop
 8010070:	4b1b      	ldr	r3, [pc, #108]	; (80100e0 <LidarSetPos+0xa58>)
 8010072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010078:	d0fa      	beq.n	8010070 <LidarSetPos+0x9e8>
							PP_stop(&pp);
 801007a:	4818      	ldr	r0, [pc, #96]	; (80100dc <LidarSetPos+0xa54>)
 801007c:	f7f6 f928 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8010080:	4b16      	ldr	r3, [pc, #88]	; (80100dc <LidarSetPos+0xa54>)
 8010082:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010086:	f003 0301 	and.w	r3, r3, #1
 801008a:	b2db      	uxtb	r3, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1d0      	bne.n	8010032 <LidarSetPos+0x9aa>
						}
					}

					stick_fence = 1;
 8010090:	4b0d      	ldr	r3, [pc, #52]	; (80100c8 <LidarSetPos+0xa40>)
 8010092:	2201      	movs	r2, #1
 8010094:	601a      	str	r2, [r3, #0]

					if(lidar->autoshot)
 8010096:	463b      	mov	r3, r7
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d005      	beq.n	80100ae <LidarSetPos+0xa26>
					{
						osDelay(300);
 80100a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80100a6:	f00c fa25 	bl	801c4f4 <osDelay>
						Shot();
 80100aa:	f7fe fab9 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 80100ae:	463b      	mov	r3, r7
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f040 827f 	bne.w	80105ba <LidarSetPos+0xf32>
						LidarAdjust(lidar);
 80100bc:	463b      	mov	r3, r7
 80100be:	6818      	ldr	r0, [r3, #0]
 80100c0:	f004 fe52 	bl	8014d68 <LidarAdjust>
					break;
 80100c4:	e279      	b.n	80105ba <LidarSetPos+0xf32>
 80100c6:	bf00      	nop
 80100c8:	200073d8 	.word	0x200073d8
 80100cc:	2000749c 	.word	0x2000749c
 80100d0:	445e8000 	.word	0x445e8000
 80100d4:	200065c0 	.word	0x200065c0
 80100d8:	406ccccd 	.word	0x406ccccd
 80100dc:	20006d4c 	.word	0x20006d4c
 80100e0:	2000a244 	.word	0x2000a244
 80100e4:	40020c00 	.word	0x40020c00
 80100e8:	20007730 	.word	0x20007730
 80100ec:	3fe00000 	.word	0x3fe00000
 80100f0:	c2b20000 	.word	0xc2b20000

				case CENTER:
					stick_fence = 0;
 80100f4:	4bb8      	ldr	r3, [pc, #736]	; (80103d8 <LidarSetPos+0xd50>)
 80100f6:	2200      	movs	r2, #0
 80100f8:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 80100fa:	4bb8      	ldr	r3, [pc, #736]	; (80103dc <LidarSetPos+0xd54>)
 80100fc:	4ab8      	ldr	r2, [pc, #736]	; (80103e0 <LidarSetPos+0xd58>)
 80100fe:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8010100:	4bb8      	ldr	r3, [pc, #736]	; (80103e4 <LidarSetPos+0xd5c>)
 8010102:	4ab9      	ldr	r2, [pc, #740]	; (80103e8 <LidarSetPos+0xd60>)
 8010104:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8010106:	463b      	mov	r3, r7
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	2200      	movs	r2, #0
 801010c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

					if(!lidar->laser)
 8010110:	463b      	mov	r3, r7
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010118:	2b00      	cmp	r3, #0
 801011a:	d159      	bne.n	80101d0 <LidarSetPos+0xb48>
					{
						ResetCoordinate();
 801011c:	f7fd ff32 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_1;
 8010120:	463b      	mov	r3, r7
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2203      	movs	r2, #3
 8010126:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_1, 1, &pp);
 801012a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801012e:	4aaf      	ldr	r2, [pc, #700]	; (80103ec <LidarSetPos+0xd64>)
 8010130:	2101      	movs	r1, #1
 8010132:	4618      	mov	r0, r3
 8010134:	f7f5 fd94 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8010138:	e041      	b.n	80101be <LidarSetPos+0xb36>
						{
							if(ps4.button == SQUARE)
 801013a:	4bad      	ldr	r3, [pc, #692]	; (80103f0 <LidarSetPos+0xd68>)
 801013c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801013e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010142:	d10d      	bne.n	8010160 <LidarSetPos+0xad8>
							{
								while(ps4.button == SQUARE);
 8010144:	bf00      	nop
 8010146:	4baa      	ldr	r3, [pc, #680]	; (80103f0 <LidarSetPos+0xd68>)
 8010148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801014a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801014e:	d0fa      	beq.n	8010146 <LidarSetPos+0xabe>
								PP_stop(&pp);
 8010150:	48a6      	ldr	r0, [pc, #664]	; (80103ec <LidarSetPos+0xd64>)
 8010152:	f7f6 f8bd 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 8010156:	463b      	mov	r3, r7
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2201      	movs	r2, #1
 801015c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER; // PP Failed
	//							lidar->pos_counter = CENTER;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010160:	2108      	movs	r1, #8
 8010162:	48a4      	ldr	r0, [pc, #656]	; (80103f4 <LidarSetPos+0xd6c>)
 8010164:	f007 fb0c 	bl	8017780 <HAL_GPIO_ReadPin>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d006      	beq.n	801017c <LidarSetPos+0xaf4>
 801016e:	2110      	movs	r1, #16
 8010170:	48a0      	ldr	r0, [pc, #640]	; (80103f4 <LidarSetPos+0xd6c>)
 8010172:	f007 fb05 	bl	8017780 <HAL_GPIO_ReadPin>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d109      	bne.n	8010190 <LidarSetPos+0xb08>
							{
								pp.target_y[0] = pp.real_y;
 801017c:	4b9b      	ldr	r3, [pc, #620]	; (80103ec <LidarSetPos+0xd64>)
 801017e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010180:	4a9a      	ldr	r2, [pc, #616]	; (80103ec <LidarSetPos+0xd64>)
 8010182:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010186:	4b99      	ldr	r3, [pc, #612]	; (80103ec <LidarSetPos+0xd64>)
 8010188:	f04f 0200 	mov.w	r2, #0
 801018c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_to_center_1[0][1])
 8010190:	4b96      	ldr	r3, [pc, #600]	; (80103ec <LidarSetPos+0xd64>)
 8010192:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010196:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801019a:	edd3 7a01 	vldr	s15, [r3, #4]
 801019e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	d900      	bls.n	80101aa <LidarSetPos+0xb22>
 80101a8:	e009      	b.n	80101be <LidarSetPos+0xb36>
							{
								pp.target_y[0] = pp.real_y;
 80101aa:	4b90      	ldr	r3, [pc, #576]	; (80103ec <LidarSetPos+0xd64>)
 80101ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101ae:	4a8f      	ldr	r2, [pc, #572]	; (80103ec <LidarSetPos+0xd64>)
 80101b0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 80101b4:	4b8d      	ldr	r3, [pc, #564]	; (80103ec <LidarSetPos+0xd64>)
 80101b6:	f04f 0200 	mov.w	r2, #0
 80101ba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 80101be:	4b8b      	ldr	r3, [pc, #556]	; (80103ec <LidarSetPos+0xd64>)
 80101c0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80101c4:	f003 0301 	and.w	r3, r3, #1
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1b5      	bne.n	801013a <LidarSetPos+0xab2>
 80101ce:	e043      	b.n	8010258 <LidarSetPos+0xbd0>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_1;
 80101d0:	463b      	mov	r3, r7
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2203      	movs	r2, #3
 80101d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_1, 1, &pp, 0, 0);
 80101da:	f207 40dc 	addw	r0, r7, #1244	; 0x4dc
 80101de:	2300      	movs	r3, #0
 80101e0:	9300      	str	r3, [sp, #0]
 80101e2:	2300      	movs	r3, #0
 80101e4:	4a81      	ldr	r2, [pc, #516]	; (80103ec <LidarSetPos+0xd64>)
 80101e6:	2101      	movs	r1, #1
 80101e8:	f7f5 ff00 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 80101ec:	e02c      	b.n	8010248 <LidarSetPos+0xbc0>
						{
							if(ps4.button == SQUARE)
 80101ee:	4b80      	ldr	r3, [pc, #512]	; (80103f0 <LidarSetPos+0xd68>)
 80101f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101f6:	d108      	bne.n	801020a <LidarSetPos+0xb82>
							{
								while(ps4.button == SQUARE);
 80101f8:	bf00      	nop
 80101fa:	4b7d      	ldr	r3, [pc, #500]	; (80103f0 <LidarSetPos+0xd68>)
 80101fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010202:	d0fa      	beq.n	80101fa <LidarSetPos+0xb72>
								PP_stop(&pp);
 8010204:	4879      	ldr	r0, [pc, #484]	; (80103ec <LidarSetPos+0xd64>)
 8010206:	f7f6 f863 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_1[0][1] + Offset_2)
 801020a:	4b7b      	ldr	r3, [pc, #492]	; (80103f8 <LidarSetPos+0xd70>)
 801020c:	69db      	ldr	r3, [r3, #28]
 801020e:	4618      	mov	r0, r3
 8010210:	f7f0 f99a 	bl	8000548 <__aeabi_f2d>
 8010214:	4604      	mov	r4, r0
 8010216:	460d      	mov	r5, r1
 8010218:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	4618      	mov	r0, r3
 8010220:	f7f0 f992 	bl	8000548 <__aeabi_f2d>
 8010224:	f04f 0200 	mov.w	r2, #0
 8010228:	4b74      	ldr	r3, [pc, #464]	; (80103fc <LidarSetPos+0xd74>)
 801022a:	f7f0 f82f 	bl	800028c <__adddf3>
 801022e:	4602      	mov	r2, r0
 8010230:	460b      	mov	r3, r1
 8010232:	4620      	mov	r0, r4
 8010234:	4629      	mov	r1, r5
 8010236:	f7f0 fc5b 	bl	8000af0 <__aeabi_dcmple>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d100      	bne.n	8010242 <LidarSetPos+0xbba>
 8010240:	e002      	b.n	8010248 <LidarSetPos+0xbc0>
								PP_stop(&pp);
 8010242:	486a      	ldr	r0, [pc, #424]	; (80103ec <LidarSetPos+0xd64>)
 8010244:	f7f6 f844 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8010248:	4b68      	ldr	r3, [pc, #416]	; (80103ec <LidarSetPos+0xd64>)
 801024a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801024e:	f003 0310 	and.w	r3, r3, #16
 8010252:	b2db      	uxtb	r3, r3
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1ca      	bne.n	80101ee <LidarSetPos+0xb66>
						}

					}

					PP_start(robot_center, 1, &pp);
 8010258:	f107 030c 	add.w	r3, r7, #12
 801025c:	4a63      	ldr	r2, [pc, #396]	; (80103ec <LidarSetPos+0xd64>)
 801025e:	2101      	movs	r1, #1
 8010260:	4618      	mov	r0, r3
 8010262:	f7f5 fcfd 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8010266:	f005 fc0f 	bl	8015a88 <HAL_GetTick>
 801026a:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 801026e:	e026      	b.n	80102be <LidarSetPos+0xc36>
					{
						after = HAL_GetTick();
 8010270:	f005 fc0a 	bl	8015a88 <HAL_GetTick>
 8010274:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 8010278:	4b5c      	ldr	r3, [pc, #368]	; (80103ec <LidarSetPos+0xd64>)
 801027a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801027e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8010400 <LidarSetPos+0xd78>
 8010282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801028a:	d80a      	bhi.n	80102a2 <LidarSetPos+0xc1a>
 801028c:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8010290:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801029a:	d302      	bcc.n	80102a2 <LidarSetPos+0xc1a>
							PP_stop(&pp);
 801029c:	4853      	ldr	r0, [pc, #332]	; (80103ec <LidarSetPos+0xd64>)
 801029e:	f7f6 f817 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 80102a2:	4b53      	ldr	r3, [pc, #332]	; (80103f0 <LidarSetPos+0xd68>)
 80102a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102aa:	d108      	bne.n	80102be <LidarSetPos+0xc36>
						{
							while(ps4.button == SQUARE);
 80102ac:	bf00      	nop
 80102ae:	4b50      	ldr	r3, [pc, #320]	; (80103f0 <LidarSetPos+0xd68>)
 80102b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102b6:	d0fa      	beq.n	80102ae <LidarSetPos+0xc26>
							PP_stop(&pp);
 80102b8:	484c      	ldr	r0, [pc, #304]	; (80103ec <LidarSetPos+0xd64>)
 80102ba:	f7f6 f809 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80102be:	4b4b      	ldr	r3, [pc, #300]	; (80103ec <LidarSetPos+0xd64>)
 80102c0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80102c4:	f003 0301 	and.w	r3, r3, #1
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d1d0      	bne.n	8010270 <LidarSetPos+0xbe8>
						}
					}

					stick_fence = 1;
 80102ce:	4b42      	ldr	r3, [pc, #264]	; (80103d8 <LidarSetPos+0xd50>)
 80102d0:	2201      	movs	r2, #1
 80102d2:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80102d4:	463b      	mov	r3, r7
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d005      	beq.n	80102ec <LidarSetPos+0xc64>
					{
						osDelay(300);
 80102e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80102e4:	f00c f906 	bl	801c4f4 <osDelay>
						Shot();
 80102e8:	f7fe f99a 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 80102ec:	463b      	mov	r3, r7
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f040 8163 	bne.w	80105c0 <LidarSetPos+0xf38>
						LidarAdjust(lidar);
 80102fa:	463b      	mov	r3, r7
 80102fc:	6818      	ldr	r0, [r3, #0]
 80102fe:	f004 fd33 	bl	8014d68 <LidarAdjust>
					break;
 8010302:	e15d      	b.n	80105c0 <LidarSetPos+0xf38>

				case CENTER_3:
					vesc_duty = type1Duty;
 8010304:	4b35      	ldr	r3, [pc, #212]	; (80103dc <LidarSetPos+0xd54>)
 8010306:	4a36      	ldr	r2, [pc, #216]	; (80103e0 <LidarSetPos+0xd58>)
 8010308:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 801030a:	4b36      	ldr	r3, [pc, #216]	; (80103e4 <LidarSetPos+0xd5c>)
 801030c:	4a36      	ldr	r2, [pc, #216]	; (80103e8 <LidarSetPos+0xd60>)
 801030e:	601a      	str	r2, [r3, #0]
					lidar->pos = CENTER_1;
 8010310:	463b      	mov	r3, r7
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2203      	movs	r2, #3
 8010316:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_1, 1, &pp, 0, 0);
 801031a:	f207 40dc 	addw	r0, r7, #1244	; 0x4dc
 801031e:	2300      	movs	r3, #0
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	2300      	movs	r3, #0
 8010324:	4a31      	ldr	r2, [pc, #196]	; (80103ec <LidarSetPos+0xd64>)
 8010326:	2101      	movs	r1, #1
 8010328:	f7f5 fe60 	bl	8005fec <LSR_start>
					while(pp.lsr_start)
 801032c:	e035      	b.n	801039a <LidarSetPos+0xd12>
					{
						if(ps4.button == SQUARE)
 801032e:	4b30      	ldr	r3, [pc, #192]	; (80103f0 <LidarSetPos+0xd68>)
 8010330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010336:	d108      	bne.n	801034a <LidarSetPos+0xcc2>
						{
							while(ps4.button == SQUARE);
 8010338:	bf00      	nop
 801033a:	4b2d      	ldr	r3, [pc, #180]	; (80103f0 <LidarSetPos+0xd68>)
 801033c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801033e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010342:	d0fa      	beq.n	801033a <LidarSetPos+0xcb2>
							PP_stop(&pp);
 8010344:	4829      	ldr	r0, [pc, #164]	; (80103ec <LidarSetPos+0xd64>)
 8010346:	f7f5 ffc3 	bl	80062d0 <PP_stop>
						}

						if(lsrL.dist <= lsr_center_1[0][1] + Offset_3 - 0.1)
 801034a:	4b2b      	ldr	r3, [pc, #172]	; (80103f8 <LidarSetPos+0xd70>)
 801034c:	69db      	ldr	r3, [r3, #28]
 801034e:	4618      	mov	r0, r3
 8010350:	f7f0 f8fa 	bl	8000548 <__aeabi_f2d>
 8010354:	4604      	mov	r4, r0
 8010356:	460d      	mov	r5, r1
 8010358:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4618      	mov	r0, r3
 8010360:	f7f0 f8f2 	bl	8000548 <__aeabi_f2d>
 8010364:	a318      	add	r3, pc, #96	; (adr r3, 80103c8 <LidarSetPos+0xd40>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	f7ef ff8f 	bl	800028c <__adddf3>
 801036e:	4602      	mov	r2, r0
 8010370:	460b      	mov	r3, r1
 8010372:	4610      	mov	r0, r2
 8010374:	4619      	mov	r1, r3
 8010376:	a316      	add	r3, pc, #88	; (adr r3, 80103d0 <LidarSetPos+0xd48>)
 8010378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037c:	f7ef ff84 	bl	8000288 <__aeabi_dsub>
 8010380:	4602      	mov	r2, r0
 8010382:	460b      	mov	r3, r1
 8010384:	4620      	mov	r0, r4
 8010386:	4629      	mov	r1, r5
 8010388:	f7f0 fbb2 	bl	8000af0 <__aeabi_dcmple>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d100      	bne.n	8010394 <LidarSetPos+0xd0c>
 8010392:	e002      	b.n	801039a <LidarSetPos+0xd12>
							PP_stop(&pp);
 8010394:	4815      	ldr	r0, [pc, #84]	; (80103ec <LidarSetPos+0xd64>)
 8010396:	f7f5 ff9b 	bl	80062d0 <PP_stop>
					while(pp.lsr_start)
 801039a:	4b14      	ldr	r3, [pc, #80]	; (80103ec <LidarSetPos+0xd64>)
 801039c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80103a0:	f003 0310 	and.w	r3, r3, #16
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1c1      	bne.n	801032e <LidarSetPos+0xca6>
					}


					PP_start(robot_center, 1, &pp);
 80103aa:	f107 030c 	add.w	r3, r7, #12
 80103ae:	4a0f      	ldr	r2, [pc, #60]	; (80103ec <LidarSetPos+0xd64>)
 80103b0:	2101      	movs	r1, #1
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7f5 fc54 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 80103b8:	f005 fb66 	bl	8015a88 <HAL_GetTick>
 80103bc:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 80103c0:	e047      	b.n	8010452 <LidarSetPos+0xdca>
 80103c2:	bf00      	nop
 80103c4:	f3af 8000 	nop.w
 80103c8:	9999999a 	.word	0x9999999a
 80103cc:	3fe99999 	.word	0x3fe99999
 80103d0:	9999999a 	.word	0x9999999a
 80103d4:	3fb99999 	.word	0x3fb99999
 80103d8:	200073d8 	.word	0x200073d8
 80103dc:	2000749c 	.word	0x2000749c
 80103e0:	445e8000 	.word	0x445e8000
 80103e4:	200065c0 	.word	0x200065c0
 80103e8:	406ccccd 	.word	0x406ccccd
 80103ec:	20006d4c 	.word	0x20006d4c
 80103f0:	2000a244 	.word	0x2000a244
 80103f4:	40020c00 	.word	0x40020c00
 80103f8:	20007730 	.word	0x20007730
 80103fc:	3fe80000 	.word	0x3fe80000
 8010400:	c2b20000 	.word	0xc2b20000
					{
						after = HAL_GetTick();
 8010404:	f005 fb40 	bl	8015a88 <HAL_GetTick>
 8010408:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 801040c:	4baa      	ldr	r3, [pc, #680]	; (80106b8 <LidarSetPos+0x1030>)
 801040e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010412:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80106bc <LidarSetPos+0x1034>
 8010416:	eef4 7ac7 	vcmpe.f32	s15, s14
 801041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801041e:	d80a      	bhi.n	8010436 <LidarSetPos+0xdae>
 8010420:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8010424:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801042e:	d302      	bcc.n	8010436 <LidarSetPos+0xdae>
							PP_stop(&pp);
 8010430:	48a1      	ldr	r0, [pc, #644]	; (80106b8 <LidarSetPos+0x1030>)
 8010432:	f7f5 ff4d 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8010436:	4ba2      	ldr	r3, [pc, #648]	; (80106c0 <LidarSetPos+0x1038>)
 8010438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801043a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801043e:	d108      	bne.n	8010452 <LidarSetPos+0xdca>
						{
							while(ps4.button == SQUARE);
 8010440:	bf00      	nop
 8010442:	4b9f      	ldr	r3, [pc, #636]	; (80106c0 <LidarSetPos+0x1038>)
 8010444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801044a:	d0fa      	beq.n	8010442 <LidarSetPos+0xdba>
							PP_stop(&pp);
 801044c:	489a      	ldr	r0, [pc, #616]	; (80106b8 <LidarSetPos+0x1030>)
 801044e:	f7f5 ff3f 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8010452:	4b99      	ldr	r3, [pc, #612]	; (80106b8 <LidarSetPos+0x1030>)
 8010454:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010458:	f003 0301 	and.w	r3, r3, #1
 801045c:	b2db      	uxtb	r3, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1d0      	bne.n	8010404 <LidarSetPos+0xd7c>
						}
					}

					stick_fence = 1;
 8010462:	4b98      	ldr	r3, [pc, #608]	; (80106c4 <LidarSetPos+0x103c>)
 8010464:	2201      	movs	r2, #1
 8010466:	601a      	str	r2, [r3, #0]

					if(lidar->autoshot)
 8010468:	463b      	mov	r3, r7
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8010470:	2b00      	cmp	r3, #0
 8010472:	f000 80a8 	beq.w	80105c6 <LidarSetPos+0xf3e>
					{
						osDelay(300);
 8010476:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801047a:	f00c f83b 	bl	801c4f4 <osDelay>
						Shot();
 801047e:	f7fe f8cf 	bl	800e620 <Shot>
					}
					break;
 8010482:	e0a0      	b.n	80105c6 <LidarSetPos+0xf3e>

				case CENTER_4:
					vesc_duty = type1Duty;
 8010484:	4b90      	ldr	r3, [pc, #576]	; (80106c8 <LidarSetPos+0x1040>)
 8010486:	4a91      	ldr	r2, [pc, #580]	; (80106cc <LidarSetPos+0x1044>)
 8010488:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 801048a:	4b91      	ldr	r3, [pc, #580]	; (80106d0 <LidarSetPos+0x1048>)
 801048c:	4a91      	ldr	r2, [pc, #580]	; (80106d4 <LidarSetPos+0x104c>)
 801048e:	601a      	str	r2, [r3, #0]
					lidar->pos = CENTER_1;
 8010490:	463b      	mov	r3, r7
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2203      	movs	r2, #3
 8010496:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_1, 1, &pp, 0, 0);
 801049a:	f207 40dc 	addw	r0, r7, #1244	; 0x4dc
 801049e:	2300      	movs	r3, #0
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	2300      	movs	r3, #0
 80104a4:	4a84      	ldr	r2, [pc, #528]	; (80106b8 <LidarSetPos+0x1030>)
 80104a6:	2101      	movs	r1, #1
 80104a8:	f7f5 fda0 	bl	8005fec <LSR_start>
					while(pp.lsr_start)
 80104ac:	e02c      	b.n	8010508 <LidarSetPos+0xe80>
					{
						if(ps4.button == SQUARE)
 80104ae:	4b84      	ldr	r3, [pc, #528]	; (80106c0 <LidarSetPos+0x1038>)
 80104b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104b6:	d108      	bne.n	80104ca <LidarSetPos+0xe42>
						{
							while(ps4.button == SQUARE);
 80104b8:	bf00      	nop
 80104ba:	4b81      	ldr	r3, [pc, #516]	; (80106c0 <LidarSetPos+0x1038>)
 80104bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104c2:	d0fa      	beq.n	80104ba <LidarSetPos+0xe32>
							PP_stop(&pp);
 80104c4:	487c      	ldr	r0, [pc, #496]	; (80106b8 <LidarSetPos+0x1030>)
 80104c6:	f7f5 ff03 	bl	80062d0 <PP_stop>
						}

						if(lsrL.dist <= lsr_center_1[0][1] + Offset_4)
 80104ca:	4b83      	ldr	r3, [pc, #524]	; (80106d8 <LidarSetPos+0x1050>)
 80104cc:	69db      	ldr	r3, [r3, #28]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7f0 f83a 	bl	8000548 <__aeabi_f2d>
 80104d4:	4604      	mov	r4, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4618      	mov	r0, r3
 80104e0:	f7f0 f832 	bl	8000548 <__aeabi_f2d>
 80104e4:	a372      	add	r3, pc, #456	; (adr r3, 80106b0 <LidarSetPos+0x1028>)
 80104e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ea:	f7ef fecf 	bl	800028c <__adddf3>
 80104ee:	4602      	mov	r2, r0
 80104f0:	460b      	mov	r3, r1
 80104f2:	4620      	mov	r0, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7f0 fafb 	bl	8000af0 <__aeabi_dcmple>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d100      	bne.n	8010502 <LidarSetPos+0xe7a>
 8010500:	e002      	b.n	8010508 <LidarSetPos+0xe80>
							PP_stop(&pp);
 8010502:	486d      	ldr	r0, [pc, #436]	; (80106b8 <LidarSetPos+0x1030>)
 8010504:	f7f5 fee4 	bl	80062d0 <PP_stop>
					while(pp.lsr_start)
 8010508:	4b6b      	ldr	r3, [pc, #428]	; (80106b8 <LidarSetPos+0x1030>)
 801050a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801050e:	f003 0310 	and.w	r3, r3, #16
 8010512:	b2db      	uxtb	r3, r3
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1ca      	bne.n	80104ae <LidarSetPos+0xe26>
					}


					PP_start(robot_center, 1, &pp);
 8010518:	f107 030c 	add.w	r3, r7, #12
 801051c:	4a66      	ldr	r2, [pc, #408]	; (80106b8 <LidarSetPos+0x1030>)
 801051e:	2101      	movs	r1, #1
 8010520:	4618      	mov	r0, r3
 8010522:	f7f5 fb9d 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8010526:	f005 faaf 	bl	8015a88 <HAL_GetTick>
 801052a:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 801052e:	e026      	b.n	801057e <LidarSetPos+0xef6>
					{
						after = HAL_GetTick();
 8010530:	f005 faaa 	bl	8015a88 <HAL_GetTick>
 8010534:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 8010538:	4b5f      	ldr	r3, [pc, #380]	; (80106b8 <LidarSetPos+0x1030>)
 801053a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801053e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80106bc <LidarSetPos+0x1034>
 8010542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054a:	d80a      	bhi.n	8010562 <LidarSetPos+0xeda>
 801054c:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8010550:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801055a:	d302      	bcc.n	8010562 <LidarSetPos+0xeda>
							PP_stop(&pp);
 801055c:	4856      	ldr	r0, [pc, #344]	; (80106b8 <LidarSetPos+0x1030>)
 801055e:	f7f5 feb7 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8010562:	4b57      	ldr	r3, [pc, #348]	; (80106c0 <LidarSetPos+0x1038>)
 8010564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801056a:	d108      	bne.n	801057e <LidarSetPos+0xef6>
						{
							while(ps4.button == SQUARE);
 801056c:	bf00      	nop
 801056e:	4b54      	ldr	r3, [pc, #336]	; (80106c0 <LidarSetPos+0x1038>)
 8010570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010576:	d0fa      	beq.n	801056e <LidarSetPos+0xee6>
							PP_stop(&pp);
 8010578:	484f      	ldr	r0, [pc, #316]	; (80106b8 <LidarSetPos+0x1030>)
 801057a:	f7f5 fea9 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801057e:	4b4e      	ldr	r3, [pc, #312]	; (80106b8 <LidarSetPos+0x1030>)
 8010580:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d1d0      	bne.n	8010530 <LidarSetPos+0xea8>
						}
					}

					stick_fence = 1;
 801058e:	4b4d      	ldr	r3, [pc, #308]	; (80106c4 <LidarSetPos+0x103c>)
 8010590:	2201      	movs	r2, #1
 8010592:	601a      	str	r2, [r3, #0]

					if(lidar->autoshot)
 8010594:	463b      	mov	r3, r7
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801059c:	2b00      	cmp	r3, #0
 801059e:	d015      	beq.n	80105cc <LidarSetPos+0xf44>
					{
						osDelay(300);
 80105a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80105a4:	f00b ffa6 	bl	801c4f4 <osDelay>
						Shot();
 80105a8:	f7fe f83a 	bl	800e620 <Shot>
					}
					break;
 80105ac:	e00e      	b.n	80105cc <LidarSetPos+0xf44>

				default:
					break;
 80105ae:	bf00      	nop
 80105b0:	f003 bc85 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80105b4:	bf00      	nop
 80105b6:	f003 bc82 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80105ba:	bf00      	nop
 80105bc:	f003 bc7f 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80105c0:	bf00      	nop
 80105c2:	f003 bc7c 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80105c6:	bf00      	nop
 80105c8:	f003 bc79 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80105cc:	bf00      	nop
			}
			break;
 80105ce:	f003 bc76 	b.w	8013ebe <LidarSetPos+0x4836>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 80105d2:	463b      	mov	r3, r7
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80105da:	3b01      	subs	r3, #1
 80105dc:	2b08      	cmp	r3, #8
 80105de:	f200 863f 	bhi.w	8011260 <LidarSetPos+0x1bd8>
 80105e2:	a201      	add	r2, pc, #4	; (adr r2, 80105e8 <LidarSetPos+0xf60>)
 80105e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105e8:	0801060d 	.word	0x0801060d
 80105ec:	0801084d 	.word	0x0801084d
 80105f0:	08010869 	.word	0x08010869
 80105f4:	08011261 	.word	0x08011261
 80105f8:	08010b1d 	.word	0x08010b1d
 80105fc:	08010e07 	.word	0x08010e07
 8010600:	080110c9 	.word	0x080110c9
 8010604:	0801085b 	.word	0x0801085b
 8010608:	0801061b 	.word	0x0801061b
			{
				case PICK_LEFT:
					lidar->pos = CENTER_2;
 801060c:	463b      	mov	r3, r7
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2204      	movs	r2, #4
 8010612:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010616:	f000 be5d 	b.w	80112d4 <LidarSetPos+0x1c4c>

				case PICK_RIGHT:
					stick_fence = 0;
 801061a:	4b2a      	ldr	r3, [pc, #168]	; (80106c4 <LidarSetPos+0x103c>)
 801061c:	2200      	movs	r2, #0
 801061e:	601a      	str	r2, [r3, #0]
					if(blue)
 8010620:	4b2e      	ldr	r3, [pc, #184]	; (80106dc <LidarSetPos+0x1054>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d006      	beq.n	8010636 <LidarSetPos+0xfae>
					{
						vesc_speed = BlueType2;
 8010628:	4b29      	ldr	r3, [pc, #164]	; (80106d0 <LidarSetPos+0x1048>)
 801062a:	4a2d      	ldr	r2, [pc, #180]	; (80106e0 <LidarSetPos+0x1058>)
 801062c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801062e:	4b26      	ldr	r3, [pc, #152]	; (80106c8 <LidarSetPos+0x1040>)
 8010630:	4a2c      	ldr	r2, [pc, #176]	; (80106e4 <LidarSetPos+0x105c>)
 8010632:	601a      	str	r2, [r3, #0]
 8010634:	e005      	b.n	8010642 <LidarSetPos+0xfba>
					}
					else
					{
						vesc_speed = RedType2;
 8010636:	4b26      	ldr	r3, [pc, #152]	; (80106d0 <LidarSetPos+0x1048>)
 8010638:	4a2b      	ldr	r2, [pc, #172]	; (80106e8 <LidarSetPos+0x1060>)
 801063a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 801063c:	4b22      	ldr	r3, [pc, #136]	; (80106c8 <LidarSetPos+0x1040>)
 801063e:	4a2b      	ldr	r2, [pc, #172]	; (80106ec <LidarSetPos+0x1064>)
 8010640:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8010642:	f7fd fc9f 	bl	800df84 <ResetCoordinate>
					lidar->pos = CENTER_2;
 8010646:	463b      	mov	r3, r7
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2204      	movs	r2, #4
 801064c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 8010650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010654:	4a18      	ldr	r2, [pc, #96]	; (80106b8 <LidarSetPos+0x1030>)
 8010656:	2101      	movs	r1, #1
 8010658:	4618      	mov	r0, r3
 801065a:	f7f5 fb01 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801065e:	e00d      	b.n	801067c <LidarSetPos+0xff4>
					{
						if(ps4.button == SQUARE)
 8010660:	4b17      	ldr	r3, [pc, #92]	; (80106c0 <LidarSetPos+0x1038>)
 8010662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010668:	d108      	bne.n	801067c <LidarSetPos+0xff4>
						{
							while(ps4.button == SQUARE);
 801066a:	bf00      	nop
 801066c:	4b14      	ldr	r3, [pc, #80]	; (80106c0 <LidarSetPos+0x1038>)
 801066e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010674:	d0fa      	beq.n	801066c <LidarSetPos+0xfe4>
							PP_stop(&pp);
 8010676:	4810      	ldr	r0, [pc, #64]	; (80106b8 <LidarSetPos+0x1030>)
 8010678:	f7f5 fe2a 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801067c:	4b0e      	ldr	r3, [pc, #56]	; (80106b8 <LidarSetPos+0x1030>)
 801067e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010682:	f003 0301 	and.w	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1e9      	bne.n	8010660 <LidarSetPos+0xfd8>
						}
					}
					LoadRing();
 801068c:	f7fd fc22 	bl	800ded4 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_2, 1, &pp);
 8010690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010694:	4a08      	ldr	r2, [pc, #32]	; (80106b8 <LidarSetPos+0x1030>)
 8010696:	2101      	movs	r1, #1
 8010698:	4618      	mov	r0, r3
 801069a:	f7f5 fae1 	bl	8005c60 <PP_start>

					load_adjust = 1;
 801069e:	4b14      	ldr	r3, [pc, #80]	; (80106f0 <LidarSetPos+0x1068>)
 80106a0:	2201      	movs	r2, #1
 80106a2:	601a      	str	r2, [r3, #0]
					AdjustRings();
 80106a4:	f7fd fc5c 	bl	800df60 <AdjustRings>
					while(pp.pp_start)
 80106a8:	e07a      	b.n	80107a0 <LidarSetPos+0x1118>
 80106aa:	bf00      	nop
 80106ac:	f3af 8000 	nop.w
 80106b0:	f5c28f5c 	.word	0xf5c28f5c
 80106b4:	3fe75c28 	.word	0x3fe75c28
 80106b8:	20006d4c 	.word	0x20006d4c
 80106bc:	c2b20000 	.word	0xc2b20000
 80106c0:	2000a244 	.word	0x2000a244
 80106c4:	200073d8 	.word	0x200073d8
 80106c8:	2000749c 	.word	0x2000749c
 80106cc:	445e8000 	.word	0x445e8000
 80106d0:	200065c0 	.word	0x200065c0
 80106d4:	406ccccd 	.word	0x406ccccd
 80106d8:	20007730 	.word	0x20007730
 80106dc:	20006a4c 	.word	0x20006a4c
 80106e0:	41026666 	.word	0x41026666
 80106e4:	44bea000 	.word	0x44bea000
 80106e8:	4104cccd 	.word	0x4104cccd
 80106ec:	44c1c000 	.word	0x44c1c000
 80106f0:	200095c4 	.word	0x200095c4
					{
						if(ps4.button == SQUARE)
 80106f4:	4baa      	ldr	r3, [pc, #680]	; (80109a0 <LidarSetPos+0x1318>)
 80106f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80106fc:	d108      	bne.n	8010710 <LidarSetPos+0x1088>
						{
							while(ps4.button == SQUARE);
 80106fe:	bf00      	nop
 8010700:	4ba7      	ldr	r3, [pc, #668]	; (80109a0 <LidarSetPos+0x1318>)
 8010702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010708:	d0fa      	beq.n	8010700 <LidarSetPos+0x1078>
							PP_stop(&pp);
 801070a:	48a6      	ldr	r0, [pc, #664]	; (80109a4 <LidarSetPos+0x131c>)
 801070c:	f7f5 fde0 	bl	80062d0 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 8010710:	2108      	movs	r1, #8
 8010712:	48a5      	ldr	r0, [pc, #660]	; (80109a8 <LidarSetPos+0x1320>)
 8010714:	f007 f834 	bl	8017780 <HAL_GPIO_ReadPin>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d006      	beq.n	801072c <LidarSetPos+0x10a4>
 801071e:	2110      	movs	r1, #16
 8010720:	48a1      	ldr	r0, [pc, #644]	; (80109a8 <LidarSetPos+0x1320>)
 8010722:	f007 f82d 	bl	8017780 <HAL_GPIO_ReadPin>
 8010726:	4603      	mov	r3, r0
 8010728:	2b00      	cmp	r3, #0
 801072a:	d109      	bne.n	8010740 <LidarSetPos+0x10b8>
						{
							pp.target_y[0] = pp.real_y;
 801072c:	4b9d      	ldr	r3, [pc, #628]	; (80109a4 <LidarSetPos+0x131c>)
 801072e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010730:	4a9c      	ldr	r2, [pc, #624]	; (80109a4 <LidarSetPos+0x131c>)
 8010732:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8010736:	4b9b      	ldr	r3, [pc, #620]	; (80109a4 <LidarSetPos+0x131c>)
 8010738:	f04f 0200 	mov.w	r2, #0
 801073c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(pp.real_x <= pick_right_to_center_2[0][1])
 8010740:	4b98      	ldr	r3, [pc, #608]	; (80109a4 <LidarSetPos+0x131c>)
 8010742:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010746:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801074a:	edd3 7a01 	vldr	s15, [r3, #4]
 801074e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010756:	d809      	bhi.n	801076c <LidarSetPos+0x10e4>
						{
							pp.target_y[0] = pp.real_y;
 8010758:	4b92      	ldr	r3, [pc, #584]	; (80109a4 <LidarSetPos+0x131c>)
 801075a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801075c:	4a91      	ldr	r2, [pc, #580]	; (80109a4 <LidarSetPos+0x131c>)
 801075e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8010762:	4b90      	ldr	r3, [pc, #576]	; (80109a4 <LidarSetPos+0x131c>)
 8010764:	f04f 0200 	mov.w	r2, #0
 8010768:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(ps4.button == UP)
 801076c:	4b8c      	ldr	r3, [pc, #560]	; (80109a0 <LidarSetPos+0x1318>)
 801076e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010770:	2b10      	cmp	r3, #16
 8010772:	d115      	bne.n	80107a0 <LidarSetPos+0x1118>
						{
							while(ps4.button == UP);
 8010774:	bf00      	nop
 8010776:	4b8a      	ldr	r3, [pc, #552]	; (80109a0 <LidarSetPos+0x1318>)
 8010778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077a:	2b10      	cmp	r3, #16
 801077c:	d0fb      	beq.n	8010776 <LidarSetPos+0x10ee>
							if(blue)
 801077e:	4b8b      	ldr	r3, [pc, #556]	; (80109ac <LidarSetPos+0x1324>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d006      	beq.n	8010794 <LidarSetPos+0x110c>
							{
								vesc_speed = BlueOppoType2;
 8010786:	4b8a      	ldr	r3, [pc, #552]	; (80109b0 <LidarSetPos+0x1328>)
 8010788:	4a8a      	ldr	r2, [pc, #552]	; (80109b4 <LidarSetPos+0x132c>)
 801078a:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 801078c:	4b8a      	ldr	r3, [pc, #552]	; (80109b8 <LidarSetPos+0x1330>)
 801078e:	4a8b      	ldr	r2, [pc, #556]	; (80109bc <LidarSetPos+0x1334>)
 8010790:	601a      	str	r2, [r3, #0]
 8010792:	e005      	b.n	80107a0 <LidarSetPos+0x1118>
							}
							else
							{
								vesc_speed = RedOppoType2;
 8010794:	4b86      	ldr	r3, [pc, #536]	; (80109b0 <LidarSetPos+0x1328>)
 8010796:	4a8a      	ldr	r2, [pc, #552]	; (80109c0 <LidarSetPos+0x1338>)
 8010798:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 801079a:	4b87      	ldr	r3, [pc, #540]	; (80109b8 <LidarSetPos+0x1330>)
 801079c:	4a89      	ldr	r2, [pc, #548]	; (80109c4 <LidarSetPos+0x133c>)
 801079e:	601a      	str	r2, [r3, #0]
					while(pp.pp_start)
 80107a0:	4b80      	ldr	r3, [pc, #512]	; (80109a4 <LidarSetPos+0x131c>)
 80107a2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80107a6:	f003 0301 	and.w	r3, r3, #1
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d1a1      	bne.n	80106f4 <LidarSetPos+0x106c>
							}
						}
					}

					adjust_servo;
 80107b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80107b4:	4884      	ldr	r0, [pc, #528]	; (80109c8 <LidarSetPos+0x1340>)
 80107b6:	f7fb f813 	bl	800b7e0 <ServoSetPulse>
 80107ba:	f640 0166 	movw	r1, #2150	; 0x866
 80107be:	4883      	ldr	r0, [pc, #524]	; (80109cc <LidarSetPos+0x1344>)
 80107c0:	f7fb f80e 	bl	800b7e0 <ServoSetPulse>

					PP_start(robot_center, 1, &pp);
 80107c4:	f107 030c 	add.w	r3, r7, #12
 80107c8:	4a76      	ldr	r2, [pc, #472]	; (80109a4 <LidarSetPos+0x131c>)
 80107ca:	2101      	movs	r1, #1
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7f5 fa47 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 80107d2:	f005 f959 	bl	8015a88 <HAL_GetTick>
 80107d6:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 80107da:	e026      	b.n	801082a <LidarSetPos+0x11a2>
					{
						after = HAL_GetTick();
 80107dc:	f005 f954 	bl	8015a88 <HAL_GetTick>
 80107e0:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 1000)
 80107e4:	4b6f      	ldr	r3, [pc, #444]	; (80109a4 <LidarSetPos+0x131c>)
 80107e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80107ea:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80109d0 <LidarSetPos+0x1348>
 80107ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f6:	d80a      	bhi.n	801080e <LidarSetPos+0x1186>
 80107f8:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80107fc:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010806:	d302      	bcc.n	801080e <LidarSetPos+0x1186>
							PP_stop(&pp);
 8010808:	4866      	ldr	r0, [pc, #408]	; (80109a4 <LidarSetPos+0x131c>)
 801080a:	f7f5 fd61 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 801080e:	4b64      	ldr	r3, [pc, #400]	; (80109a0 <LidarSetPos+0x1318>)
 8010810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010816:	d108      	bne.n	801082a <LidarSetPos+0x11a2>
						{
							while(ps4.button == SQUARE);
 8010818:	bf00      	nop
 801081a:	4b61      	ldr	r3, [pc, #388]	; (80109a0 <LidarSetPos+0x1318>)
 801081c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801081e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010822:	d0fa      	beq.n	801081a <LidarSetPos+0x1192>
							PP_stop(&pp);
 8010824:	485f      	ldr	r0, [pc, #380]	; (80109a4 <LidarSetPos+0x131c>)
 8010826:	f7f5 fd53 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801082a:	4b5e      	ldr	r3, [pc, #376]	; (80109a4 <LidarSetPos+0x131c>)
 801082c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1d0      	bne.n	80107dc <LidarSetPos+0x1154>
						}
					}

					stick_fence = 1;
 801083a:	4b66      	ldr	r3, [pc, #408]	; (80109d4 <LidarSetPos+0x134c>)
 801083c:	2201      	movs	r2, #1
 801083e:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 8010840:	463b      	mov	r3, r7
 8010842:	6818      	ldr	r0, [r3, #0]
 8010844:	f004 fa90 	bl	8014d68 <LidarAdjust>

					break;
 8010848:	f000 bd44 	b.w	80112d4 <LidarSetPos+0x1c4c>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 801084c:	463b      	mov	r3, r7
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2204      	movs	r2, #4
 8010852:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010856:	f000 bd3d 	b.w	80112d4 <LidarSetPos+0x1c4c>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 801085a:	463b      	mov	r3, r7
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2204      	movs	r2, #4
 8010860:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010864:	f000 bd36 	b.w	80112d4 <LidarSetPos+0x1c4c>

				case CENTER_1:
					stick_fence = 0;
 8010868:	4b5a      	ldr	r3, [pc, #360]	; (80109d4 <LidarSetPos+0x134c>)
 801086a:	2200      	movs	r2, #0
 801086c:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 801086e:	463b      	mov	r3, r7
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2200      	movs	r2, #0
 8010874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8010878:	4b4c      	ldr	r3, [pc, #304]	; (80109ac <LidarSetPos+0x1324>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d006      	beq.n	801088e <LidarSetPos+0x1206>
					{
						vesc_speed = BlueType2;
 8010880:	4b4b      	ldr	r3, [pc, #300]	; (80109b0 <LidarSetPos+0x1328>)
 8010882:	4a55      	ldr	r2, [pc, #340]	; (80109d8 <LidarSetPos+0x1350>)
 8010884:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8010886:	4b4c      	ldr	r3, [pc, #304]	; (80109b8 <LidarSetPos+0x1330>)
 8010888:	4a54      	ldr	r2, [pc, #336]	; (80109dc <LidarSetPos+0x1354>)
 801088a:	601a      	str	r2, [r3, #0]
 801088c:	e005      	b.n	801089a <LidarSetPos+0x1212>
					}
					else
					{
						vesc_speed = RedType2;
 801088e:	4b48      	ldr	r3, [pc, #288]	; (80109b0 <LidarSetPos+0x1328>)
 8010890:	4a53      	ldr	r2, [pc, #332]	; (80109e0 <LidarSetPos+0x1358>)
 8010892:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8010894:	4b48      	ldr	r3, [pc, #288]	; (80109b8 <LidarSetPos+0x1330>)
 8010896:	4a53      	ldr	r2, [pc, #332]	; (80109e4 <LidarSetPos+0x135c>)
 8010898:	601a      	str	r2, [r3, #0]
					}
					if(!lidar->laser)
 801089a:	463b      	mov	r3, r7
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d159      	bne.n	801095a <LidarSetPos+0x12d2>
					{
						ResetCoordinate();
 80108a6:	f7fd fb6d 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_2;
 80108aa:	463b      	mov	r3, r7
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2204      	movs	r2, #4
 80108b0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_1_to_center_2, 1, &pp);
 80108b4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80108b8:	4a3a      	ldr	r2, [pc, #232]	; (80109a4 <LidarSetPos+0x131c>)
 80108ba:	2101      	movs	r1, #1
 80108bc:	4618      	mov	r0, r3
 80108be:	f7f5 f9cf 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 80108c2:	e041      	b.n	8010948 <LidarSetPos+0x12c0>
						{
							if(ps4.button == SQUARE)
 80108c4:	4b36      	ldr	r3, [pc, #216]	; (80109a0 <LidarSetPos+0x1318>)
 80108c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108cc:	d10d      	bne.n	80108ea <LidarSetPos+0x1262>
							{
								while(ps4.button == SQUARE);
 80108ce:	bf00      	nop
 80108d0:	4b33      	ldr	r3, [pc, #204]	; (80109a0 <LidarSetPos+0x1318>)
 80108d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108d8:	d0fa      	beq.n	80108d0 <LidarSetPos+0x1248>
								PP_stop(&pp);
 80108da:	4832      	ldr	r0, [pc, #200]	; (80109a4 <LidarSetPos+0x131c>)
 80108dc:	f7f5 fcf8 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 80108e0:	463b      	mov	r3, r7
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_1;
	//							lidar->pos_counter = CENTER_1;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 80108ea:	2108      	movs	r1, #8
 80108ec:	482e      	ldr	r0, [pc, #184]	; (80109a8 <LidarSetPos+0x1320>)
 80108ee:	f006 ff47 	bl	8017780 <HAL_GPIO_ReadPin>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d006      	beq.n	8010906 <LidarSetPos+0x127e>
 80108f8:	2110      	movs	r1, #16
 80108fa:	482b      	ldr	r0, [pc, #172]	; (80109a8 <LidarSetPos+0x1320>)
 80108fc:	f006 ff40 	bl	8017780 <HAL_GPIO_ReadPin>
 8010900:	4603      	mov	r3, r0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d109      	bne.n	801091a <LidarSetPos+0x1292>
							{
								pp.target_y[0] = pp.real_y;
 8010906:	4b27      	ldr	r3, [pc, #156]	; (80109a4 <LidarSetPos+0x131c>)
 8010908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801090a:	4a26      	ldr	r2, [pc, #152]	; (80109a4 <LidarSetPos+0x131c>)
 801090c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010910:	4b24      	ldr	r3, [pc, #144]	; (80109a4 <LidarSetPos+0x131c>)
 8010912:	f04f 0200 	mov.w	r2, #0
 8010916:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_1_to_center_2[0][1])
 801091a:	4b22      	ldr	r3, [pc, #136]	; (80109a4 <LidarSetPos+0x131c>)
 801091c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010920:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8010924:	edd3 7a01 	vldr	s15, [r3, #4]
 8010928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801092c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010930:	da00      	bge.n	8010934 <LidarSetPos+0x12ac>
 8010932:	e009      	b.n	8010948 <LidarSetPos+0x12c0>
							{
								pp.target_y[0] = pp.real_y;
 8010934:	4b1b      	ldr	r3, [pc, #108]	; (80109a4 <LidarSetPos+0x131c>)
 8010936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010938:	4a1a      	ldr	r2, [pc, #104]	; (80109a4 <LidarSetPos+0x131c>)
 801093a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801093e:	4b19      	ldr	r3, [pc, #100]	; (80109a4 <LidarSetPos+0x131c>)
 8010940:	f04f 0200 	mov.w	r2, #0
 8010944:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8010948:	4b16      	ldr	r3, [pc, #88]	; (80109a4 <LidarSetPos+0x131c>)
 801094a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801094e:	f003 0301 	and.w	r3, r3, #1
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1b5      	bne.n	80108c4 <LidarSetPos+0x123c>
 8010958:	e08a      	b.n	8010a70 <LidarSetPos+0x13e8>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_2;
 801095a:	463b      	mov	r3, r7
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2204      	movs	r2, #4
 8010960:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_2, 1, &pp, 0, 0);
 8010964:	f507 6098 	add.w	r0, r7, #1216	; 0x4c0
 8010968:	2300      	movs	r3, #0
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	2300      	movs	r3, #0
 801096e:	4a0d      	ldr	r2, [pc, #52]	; (80109a4 <LidarSetPos+0x131c>)
 8010970:	2101      	movs	r1, #1
 8010972:	f7f5 fb3b 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8010976:	e073      	b.n	8010a60 <LidarSetPos+0x13d8>
						{
							if(ps4.button == UP)
 8010978:	4b09      	ldr	r3, [pc, #36]	; (80109a0 <LidarSetPos+0x1318>)
 801097a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801097c:	2b10      	cmp	r3, #16
 801097e:	d139      	bne.n	80109f4 <LidarSetPos+0x136c>
							{
								while(ps4.button == UP);
 8010980:	bf00      	nop
 8010982:	4b07      	ldr	r3, [pc, #28]	; (80109a0 <LidarSetPos+0x1318>)
 8010984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010986:	2b10      	cmp	r3, #16
 8010988:	d0fb      	beq.n	8010982 <LidarSetPos+0x12fa>
								if(blue)
 801098a:	4b08      	ldr	r3, [pc, #32]	; (80109ac <LidarSetPos+0x1324>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d02a      	beq.n	80109e8 <LidarSetPos+0x1360>
								{
									vesc_speed = BlueOppoType2;
 8010992:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <LidarSetPos+0x1328>)
 8010994:	4a07      	ldr	r2, [pc, #28]	; (80109b4 <LidarSetPos+0x132c>)
 8010996:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8010998:	4b07      	ldr	r3, [pc, #28]	; (80109b8 <LidarSetPos+0x1330>)
 801099a:	4a08      	ldr	r2, [pc, #32]	; (80109bc <LidarSetPos+0x1334>)
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	e029      	b.n	80109f4 <LidarSetPos+0x136c>
 80109a0:	2000a244 	.word	0x2000a244
 80109a4:	20006d4c 	.word	0x20006d4c
 80109a8:	40020c00 	.word	0x40020c00
 80109ac:	20006a4c 	.word	0x20006a4c
 80109b0:	200065c0 	.word	0x200065c0
 80109b4:	414f3333 	.word	0x414f3333
 80109b8:	2000749c 	.word	0x2000749c
 80109bc:	45020000 	.word	0x45020000
 80109c0:	4154cccd 	.word	0x4154cccd
 80109c4:	45039000 	.word	0x45039000
 80109c8:	200079e0 	.word	0x200079e0
 80109cc:	2000a5e8 	.word	0x2000a5e8
 80109d0:	c2b20000 	.word	0xc2b20000
 80109d4:	200073d8 	.word	0x200073d8
 80109d8:	41026666 	.word	0x41026666
 80109dc:	44bea000 	.word	0x44bea000
 80109e0:	4104cccd 	.word	0x4104cccd
 80109e4:	44c1c000 	.word	0x44c1c000
								}
								else
								{
									vesc_speed = RedOppoType2;
 80109e8:	4ba7      	ldr	r3, [pc, #668]	; (8010c88 <LidarSetPos+0x1600>)
 80109ea:	4aa8      	ldr	r2, [pc, #672]	; (8010c8c <LidarSetPos+0x1604>)
 80109ec:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 80109ee:	4ba8      	ldr	r3, [pc, #672]	; (8010c90 <LidarSetPos+0x1608>)
 80109f0:	4aa8      	ldr	r2, [pc, #672]	; (8010c94 <LidarSetPos+0x160c>)
 80109f2:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 80109f4:	4ba8      	ldr	r3, [pc, #672]	; (8010c98 <LidarSetPos+0x1610>)
 80109f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80109fc:	d108      	bne.n	8010a10 <LidarSetPos+0x1388>
							{
								while(ps4.button == SQUARE);
 80109fe:	bf00      	nop
 8010a00:	4ba5      	ldr	r3, [pc, #660]	; (8010c98 <LidarSetPos+0x1610>)
 8010a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a08:	d0fa      	beq.n	8010a00 <LidarSetPos+0x1378>
								PP_stop(&pp);
 8010a0a:	48a4      	ldr	r0, [pc, #656]	; (8010c9c <LidarSetPos+0x1614>)
 8010a0c:	f7f5 fc60 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist >= lsr_center_2[0][1] - Offset + 0.05)
 8010a10:	4ba3      	ldr	r3, [pc, #652]	; (8010ca0 <LidarSetPos+0x1618>)
 8010a12:	69db      	ldr	r3, [r3, #28]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ef fd97 	bl	8000548 <__aeabi_f2d>
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	460d      	mov	r5, r1
 8010a1e:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7ef fd8f 	bl	8000548 <__aeabi_f2d>
 8010a2a:	f04f 0200 	mov.w	r2, #0
 8010a2e:	4b9d      	ldr	r3, [pc, #628]	; (8010ca4 <LidarSetPos+0x161c>)
 8010a30:	f7ef fc2a 	bl	8000288 <__aeabi_dsub>
 8010a34:	4602      	mov	r2, r0
 8010a36:	460b      	mov	r3, r1
 8010a38:	4610      	mov	r0, r2
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	a390      	add	r3, pc, #576	; (adr r3, 8010c80 <LidarSetPos+0x15f8>)
 8010a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a42:	f7ef fc23 	bl	800028c <__adddf3>
 8010a46:	4602      	mov	r2, r0
 8010a48:	460b      	mov	r3, r1
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	4629      	mov	r1, r5
 8010a4e:	f7f0 f859 	bl	8000b04 <__aeabi_dcmpge>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d100      	bne.n	8010a5a <LidarSetPos+0x13d2>
 8010a58:	e002      	b.n	8010a60 <LidarSetPos+0x13d8>
								PP_stop(&pp);
 8010a5a:	4890      	ldr	r0, [pc, #576]	; (8010c9c <LidarSetPos+0x1614>)
 8010a5c:	f7f5 fc38 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8010a60:	4b8e      	ldr	r3, [pc, #568]	; (8010c9c <LidarSetPos+0x1614>)
 8010a62:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010a66:	f003 0310 	and.w	r3, r3, #16
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d183      	bne.n	8010978 <LidarSetPos+0x12f0>
						}
					}

					PP_start(robot_center, 1, &pp);
 8010a70:	f107 030c 	add.w	r3, r7, #12
 8010a74:	4a89      	ldr	r2, [pc, #548]	; (8010c9c <LidarSetPos+0x1614>)
 8010a76:	2101      	movs	r1, #1
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7f5 f8f1 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8010a7e:	f005 f803 	bl	8015a88 <HAL_GetTick>
 8010a82:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8010a86:	e026      	b.n	8010ad6 <LidarSetPos+0x144e>
					{
						after = HAL_GetTick();
 8010a88:	f004 fffe 	bl	8015a88 <HAL_GetTick>
 8010a8c:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 8010a90:	4b82      	ldr	r3, [pc, #520]	; (8010c9c <LidarSetPos+0x1614>)
 8010a92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010a96:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8010ca8 <LidarSetPos+0x1620>
 8010a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa2:	db0a      	blt.n	8010aba <LidarSetPos+0x1432>
 8010aa4:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8010aa8:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010ab2:	d302      	bcc.n	8010aba <LidarSetPos+0x1432>
							PP_stop(&pp);
 8010ab4:	4879      	ldr	r0, [pc, #484]	; (8010c9c <LidarSetPos+0x1614>)
 8010ab6:	f7f5 fc0b 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8010aba:	4b77      	ldr	r3, [pc, #476]	; (8010c98 <LidarSetPos+0x1610>)
 8010abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ac2:	d108      	bne.n	8010ad6 <LidarSetPos+0x144e>
						{
							while(ps4.button == SQUARE);
 8010ac4:	bf00      	nop
 8010ac6:	4b74      	ldr	r3, [pc, #464]	; (8010c98 <LidarSetPos+0x1610>)
 8010ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ace:	d0fa      	beq.n	8010ac6 <LidarSetPos+0x143e>
							PP_stop(&pp);
 8010ad0:	4872      	ldr	r0, [pc, #456]	; (8010c9c <LidarSetPos+0x1614>)
 8010ad2:	f7f5 fbfd 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8010ad6:	4b71      	ldr	r3, [pc, #452]	; (8010c9c <LidarSetPos+0x1614>)
 8010ad8:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010adc:	f003 0301 	and.w	r3, r3, #1
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1d0      	bne.n	8010a88 <LidarSetPos+0x1400>
						}
					}

					stick_fence = 1;
 8010ae6:	4b71      	ldr	r3, [pc, #452]	; (8010cac <LidarSetPos+0x1624>)
 8010ae8:	2201      	movs	r2, #1
 8010aea:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8010aec:	463b      	mov	r3, r7
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d005      	beq.n	8010b04 <LidarSetPos+0x147c>
					{
						osDelay(300);
 8010af8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010afc:	f00b fcfa 	bl	801c4f4 <osDelay>
						Shot();
 8010b00:	f7fd fd8e 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8010b04:	463b      	mov	r3, r7
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f040 83d7 	bne.w	80112c0 <LidarSetPos+0x1c38>
						LidarAdjust(lidar);
 8010b12:	463b      	mov	r3, r7
 8010b14:	6818      	ldr	r0, [r3, #0]
 8010b16:	f004 f927 	bl	8014d68 <LidarAdjust>
					break;
 8010b1a:	e3d1      	b.n	80112c0 <LidarSetPos+0x1c38>

				case CENTER:
					stick_fence = 0;
 8010b1c:	4b63      	ldr	r3, [pc, #396]	; (8010cac <LidarSetPos+0x1624>)
 8010b1e:	2200      	movs	r2, #0
 8010b20:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8010b22:	463b      	mov	r3, r7
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8010b2c:	4b60      	ldr	r3, [pc, #384]	; (8010cb0 <LidarSetPos+0x1628>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d006      	beq.n	8010b42 <LidarSetPos+0x14ba>
					{
						vesc_speed = BlueType2;
 8010b34:	4b54      	ldr	r3, [pc, #336]	; (8010c88 <LidarSetPos+0x1600>)
 8010b36:	4a5f      	ldr	r2, [pc, #380]	; (8010cb4 <LidarSetPos+0x162c>)
 8010b38:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8010b3a:	4b55      	ldr	r3, [pc, #340]	; (8010c90 <LidarSetPos+0x1608>)
 8010b3c:	4a5e      	ldr	r2, [pc, #376]	; (8010cb8 <LidarSetPos+0x1630>)
 8010b3e:	601a      	str	r2, [r3, #0]
 8010b40:	e005      	b.n	8010b4e <LidarSetPos+0x14c6>
					}
					else
					{
						vesc_speed = RedType2;
 8010b42:	4b51      	ldr	r3, [pc, #324]	; (8010c88 <LidarSetPos+0x1600>)
 8010b44:	4a5d      	ldr	r2, [pc, #372]	; (8010cbc <LidarSetPos+0x1634>)
 8010b46:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8010b48:	4b51      	ldr	r3, [pc, #324]	; (8010c90 <LidarSetPos+0x1608>)
 8010b4a:	4a5d      	ldr	r2, [pc, #372]	; (8010cc0 <LidarSetPos+0x1638>)
 8010b4c:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 8010b4e:	463b      	mov	r3, r7
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d16c      	bne.n	8010c34 <LidarSetPos+0x15ac>
					{
						ResetCoordinate();
 8010b5a:	f7fd fa13 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_2;
 8010b5e:	463b      	mov	r3, r7
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	2204      	movs	r2, #4
 8010b64:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_2, 1, &pp);
 8010b68:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010b6c:	4a4b      	ldr	r2, [pc, #300]	; (8010c9c <LidarSetPos+0x1614>)
 8010b6e:	2101      	movs	r1, #1
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7f5 f875 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8010b76:	e054      	b.n	8010c22 <LidarSetPos+0x159a>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010b78:	2108      	movs	r1, #8
 8010b7a:	4852      	ldr	r0, [pc, #328]	; (8010cc4 <LidarSetPos+0x163c>)
 8010b7c:	f006 fe00 	bl	8017780 <HAL_GPIO_ReadPin>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d006      	beq.n	8010b94 <LidarSetPos+0x150c>
 8010b86:	2110      	movs	r1, #16
 8010b88:	484e      	ldr	r0, [pc, #312]	; (8010cc4 <LidarSetPos+0x163c>)
 8010b8a:	f006 fdf9 	bl	8017780 <HAL_GPIO_ReadPin>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d104      	bne.n	8010b9e <LidarSetPos+0x1516>
								pp.error_y = 0;
 8010b94:	4b41      	ldr	r3, [pc, #260]	; (8010c9c <LidarSetPos+0x1614>)
 8010b96:	f04f 0200 	mov.w	r2, #0
 8010b9a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

							if(ps4.button == SQUARE)
 8010b9e:	4b3e      	ldr	r3, [pc, #248]	; (8010c98 <LidarSetPos+0x1610>)
 8010ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ba6:	d10d      	bne.n	8010bc4 <LidarSetPos+0x153c>
							{
								while(ps4.button == SQUARE);
 8010ba8:	bf00      	nop
 8010baa:	4b3b      	ldr	r3, [pc, #236]	; (8010c98 <LidarSetPos+0x1610>)
 8010bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010bb2:	d0fa      	beq.n	8010baa <LidarSetPos+0x1522>
								PP_stop(&pp);
 8010bb4:	4839      	ldr	r0, [pc, #228]	; (8010c9c <LidarSetPos+0x1614>)
 8010bb6:	f7f5 fb8b 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 8010bba:	463b      	mov	r3, r7
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER;
	//							lidar->pos_counter = CENTER;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010bc4:	2108      	movs	r1, #8
 8010bc6:	483f      	ldr	r0, [pc, #252]	; (8010cc4 <LidarSetPos+0x163c>)
 8010bc8:	f006 fdda 	bl	8017780 <HAL_GPIO_ReadPin>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d006      	beq.n	8010be0 <LidarSetPos+0x1558>
 8010bd2:	2110      	movs	r1, #16
 8010bd4:	483b      	ldr	r0, [pc, #236]	; (8010cc4 <LidarSetPos+0x163c>)
 8010bd6:	f006 fdd3 	bl	8017780 <HAL_GPIO_ReadPin>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d109      	bne.n	8010bf4 <LidarSetPos+0x156c>
							{
								pp.target_y[0] = pp.real_y;
 8010be0:	4b2e      	ldr	r3, [pc, #184]	; (8010c9c <LidarSetPos+0x1614>)
 8010be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010be4:	4a2d      	ldr	r2, [pc, #180]	; (8010c9c <LidarSetPos+0x1614>)
 8010be6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010bea:	4b2c      	ldr	r3, [pc, #176]	; (8010c9c <LidarSetPos+0x1614>)
 8010bec:	f04f 0200 	mov.w	r2, #0
 8010bf0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_to_center_2[0][1])
 8010bf4:	4b29      	ldr	r3, [pc, #164]	; (8010c9c <LidarSetPos+0x1614>)
 8010bf6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010bfa:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010bfe:	edd3 7a01 	vldr	s15, [r3, #4]
 8010c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	d900      	bls.n	8010c0e <LidarSetPos+0x1586>
 8010c0c:	e009      	b.n	8010c22 <LidarSetPos+0x159a>
							{
								pp.target_y[0] = pp.real_y;
 8010c0e:	4b23      	ldr	r3, [pc, #140]	; (8010c9c <LidarSetPos+0x1614>)
 8010c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c12:	4a22      	ldr	r2, [pc, #136]	; (8010c9c <LidarSetPos+0x1614>)
 8010c14:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010c18:	4b20      	ldr	r3, [pc, #128]	; (8010c9c <LidarSetPos+0x1614>)
 8010c1a:	f04f 0200 	mov.w	r2, #0
 8010c1e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8010c22:	4b1e      	ldr	r3, [pc, #120]	; (8010c9c <LidarSetPos+0x1614>)
 8010c24:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010c28:	f003 0301 	and.w	r3, r3, #1
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1a2      	bne.n	8010b78 <LidarSetPos+0x14f0>
 8010c32:	e092      	b.n	8010d5a <LidarSetPos+0x16d2>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_2;
 8010c34:	463b      	mov	r3, r7
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2204      	movs	r2, #4
 8010c3a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_2, 1, &pp, 0, 0);
 8010c3e:	f507 6098 	add.w	r0, r7, #1216	; 0x4c0
 8010c42:	2300      	movs	r3, #0
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	2300      	movs	r3, #0
 8010c48:	4a14      	ldr	r2, [pc, #80]	; (8010c9c <LidarSetPos+0x1614>)
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	f7f5 f9ce 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8010c50:	e07a      	b.n	8010d48 <LidarSetPos+0x16c0>
						{
							if(ps4.button == UP)
 8010c52:	4b11      	ldr	r3, [pc, #68]	; (8010c98 <LidarSetPos+0x1610>)
 8010c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c56:	2b10      	cmp	r3, #16
 8010c58:	d140      	bne.n	8010cdc <LidarSetPos+0x1654>
							{
								while(ps4.button == UP);
 8010c5a:	bf00      	nop
 8010c5c:	4b0e      	ldr	r3, [pc, #56]	; (8010c98 <LidarSetPos+0x1610>)
 8010c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c60:	2b10      	cmp	r3, #16
 8010c62:	d0fb      	beq.n	8010c5c <LidarSetPos+0x15d4>
								if(blue)
 8010c64:	4b12      	ldr	r3, [pc, #72]	; (8010cb0 <LidarSetPos+0x1628>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d031      	beq.n	8010cd0 <LidarSetPos+0x1648>
								{
									vesc_speed = BlueOppoType2;
 8010c6c:	4b06      	ldr	r3, [pc, #24]	; (8010c88 <LidarSetPos+0x1600>)
 8010c6e:	4a16      	ldr	r2, [pc, #88]	; (8010cc8 <LidarSetPos+0x1640>)
 8010c70:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8010c72:	4b07      	ldr	r3, [pc, #28]	; (8010c90 <LidarSetPos+0x1608>)
 8010c74:	4a15      	ldr	r2, [pc, #84]	; (8010ccc <LidarSetPos+0x1644>)
 8010c76:	601a      	str	r2, [r3, #0]
 8010c78:	e030      	b.n	8010cdc <LidarSetPos+0x1654>
 8010c7a:	bf00      	nop
 8010c7c:	f3af 8000 	nop.w
 8010c80:	9999999a 	.word	0x9999999a
 8010c84:	3fa99999 	.word	0x3fa99999
 8010c88:	200065c0 	.word	0x200065c0
 8010c8c:	4154cccd 	.word	0x4154cccd
 8010c90:	2000749c 	.word	0x2000749c
 8010c94:	45039000 	.word	0x45039000
 8010c98:	2000a244 	.word	0x2000a244
 8010c9c:	20006d4c 	.word	0x20006d4c
 8010ca0:	20007730 	.word	0x20007730
 8010ca4:	3fe00000 	.word	0x3fe00000
 8010ca8:	c2b60000 	.word	0xc2b60000
 8010cac:	200073d8 	.word	0x200073d8
 8010cb0:	20006a4c 	.word	0x20006a4c
 8010cb4:	41026666 	.word	0x41026666
 8010cb8:	44bea000 	.word	0x44bea000
 8010cbc:	4104cccd 	.word	0x4104cccd
 8010cc0:	44c1c000 	.word	0x44c1c000
 8010cc4:	40020c00 	.word	0x40020c00
 8010cc8:	414f3333 	.word	0x414f3333
 8010ccc:	45020000 	.word	0x45020000
								}
								else
								{
									vesc_speed = RedOppoType2;
 8010cd0:	4b9d      	ldr	r3, [pc, #628]	; (8010f48 <LidarSetPos+0x18c0>)
 8010cd2:	4a9e      	ldr	r2, [pc, #632]	; (8010f4c <LidarSetPos+0x18c4>)
 8010cd4:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8010cd6:	4b9e      	ldr	r3, [pc, #632]	; (8010f50 <LidarSetPos+0x18c8>)
 8010cd8:	4a9e      	ldr	r2, [pc, #632]	; (8010f54 <LidarSetPos+0x18cc>)
 8010cda:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8010cdc:	4b9e      	ldr	r3, [pc, #632]	; (8010f58 <LidarSetPos+0x18d0>)
 8010cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ce4:	d108      	bne.n	8010cf8 <LidarSetPos+0x1670>
							{
								while(ps4.button == SQUARE);
 8010ce6:	bf00      	nop
 8010ce8:	4b9b      	ldr	r3, [pc, #620]	; (8010f58 <LidarSetPos+0x18d0>)
 8010cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cf0:	d0fa      	beq.n	8010ce8 <LidarSetPos+0x1660>
								PP_stop(&pp);
 8010cf2:	489a      	ldr	r0, [pc, #616]	; (8010f5c <LidarSetPos+0x18d4>)
 8010cf4:	f7f5 faec 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_2[0][1] + Offset - 0.05)
 8010cf8:	4b99      	ldr	r3, [pc, #612]	; (8010f60 <LidarSetPos+0x18d8>)
 8010cfa:	69db      	ldr	r3, [r3, #28]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7ef fc23 	bl	8000548 <__aeabi_f2d>
 8010d02:	4604      	mov	r4, r0
 8010d04:	460d      	mov	r5, r1
 8010d06:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7ef fc1b 	bl	8000548 <__aeabi_f2d>
 8010d12:	f04f 0200 	mov.w	r2, #0
 8010d16:	4b93      	ldr	r3, [pc, #588]	; (8010f64 <LidarSetPos+0x18dc>)
 8010d18:	f7ef fab8 	bl	800028c <__adddf3>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	460b      	mov	r3, r1
 8010d20:	4610      	mov	r0, r2
 8010d22:	4619      	mov	r1, r3
 8010d24:	a386      	add	r3, pc, #536	; (adr r3, 8010f40 <LidarSetPos+0x18b8>)
 8010d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2a:	f7ef faad 	bl	8000288 <__aeabi_dsub>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	460b      	mov	r3, r1
 8010d32:	4620      	mov	r0, r4
 8010d34:	4629      	mov	r1, r5
 8010d36:	f7ef fedb 	bl	8000af0 <__aeabi_dcmple>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d100      	bne.n	8010d42 <LidarSetPos+0x16ba>
 8010d40:	e002      	b.n	8010d48 <LidarSetPos+0x16c0>
								PP_stop(&pp);
 8010d42:	4886      	ldr	r0, [pc, #536]	; (8010f5c <LidarSetPos+0x18d4>)
 8010d44:	f7f5 fac4 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8010d48:	4b84      	ldr	r3, [pc, #528]	; (8010f5c <LidarSetPos+0x18d4>)
 8010d4a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010d4e:	f003 0310 	and.w	r3, r3, #16
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f47f af7c 	bne.w	8010c52 <LidarSetPos+0x15ca>
						}

					}

					PP_start(robot_center, 1, &pp);
 8010d5a:	f107 030c 	add.w	r3, r7, #12
 8010d5e:	4a7f      	ldr	r2, [pc, #508]	; (8010f5c <LidarSetPos+0x18d4>)
 8010d60:	2101      	movs	r1, #1
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f4 ff7c 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8010d68:	f004 fe8e 	bl	8015a88 <HAL_GetTick>
 8010d6c:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8010d70:	e026      	b.n	8010dc0 <LidarSetPos+0x1738>
					{
						after = HAL_GetTick();
 8010d72:	f004 fe89 	bl	8015a88 <HAL_GetTick>
 8010d76:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 8010d7a:	4b78      	ldr	r3, [pc, #480]	; (8010f5c <LidarSetPos+0x18d4>)
 8010d7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010d80:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8010f68 <LidarSetPos+0x18e0>
 8010d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d8c:	d80a      	bhi.n	8010da4 <LidarSetPos+0x171c>
 8010d8e:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8010d92:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010d9c:	d302      	bcc.n	8010da4 <LidarSetPos+0x171c>
							PP_stop(&pp);
 8010d9e:	486f      	ldr	r0, [pc, #444]	; (8010f5c <LidarSetPos+0x18d4>)
 8010da0:	f7f5 fa96 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8010da4:	4b6c      	ldr	r3, [pc, #432]	; (8010f58 <LidarSetPos+0x18d0>)
 8010da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dac:	d108      	bne.n	8010dc0 <LidarSetPos+0x1738>
						{
							while(ps4.button == SQUARE);
 8010dae:	bf00      	nop
 8010db0:	4b69      	ldr	r3, [pc, #420]	; (8010f58 <LidarSetPos+0x18d0>)
 8010db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010db8:	d0fa      	beq.n	8010db0 <LidarSetPos+0x1728>
							PP_stop(&pp);
 8010dba:	4868      	ldr	r0, [pc, #416]	; (8010f5c <LidarSetPos+0x18d4>)
 8010dbc:	f7f5 fa88 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8010dc0:	4b66      	ldr	r3, [pc, #408]	; (8010f5c <LidarSetPos+0x18d4>)
 8010dc2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1d0      	bne.n	8010d72 <LidarSetPos+0x16ea>
						}
					}

					stick_fence = 1;
 8010dd0:	4b66      	ldr	r3, [pc, #408]	; (8010f6c <LidarSetPos+0x18e4>)
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8010dd6:	463b      	mov	r3, r7
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d005      	beq.n	8010dee <LidarSetPos+0x1766>
					{
						osDelay(300);
 8010de2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010de6:	f00b fb85 	bl	801c4f4 <osDelay>
						Shot();
 8010dea:	f7fd fc19 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8010dee:	463b      	mov	r3, r7
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f040 8265 	bne.w	80112c6 <LidarSetPos+0x1c3e>
						LidarAdjust(lidar);
 8010dfc:	463b      	mov	r3, r7
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	f003 ffb2 	bl	8014d68 <LidarAdjust>
					break;
 8010e04:	e25f      	b.n	80112c6 <LidarSetPos+0x1c3e>

				case CENTER_3:
					stick_fence = 0;
 8010e06:	4b59      	ldr	r3, [pc, #356]	; (8010f6c <LidarSetPos+0x18e4>)
 8010e08:	2200      	movs	r2, #0
 8010e0a:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8010e0c:	463b      	mov	r3, r7
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2200      	movs	r2, #0
 8010e12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8010e16:	4b56      	ldr	r3, [pc, #344]	; (8010f70 <LidarSetPos+0x18e8>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d006      	beq.n	8010e2c <LidarSetPos+0x17a4>
					{
						vesc_speed = BlueType2;
 8010e1e:	4b4a      	ldr	r3, [pc, #296]	; (8010f48 <LidarSetPos+0x18c0>)
 8010e20:	4a54      	ldr	r2, [pc, #336]	; (8010f74 <LidarSetPos+0x18ec>)
 8010e22:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8010e24:	4b4a      	ldr	r3, [pc, #296]	; (8010f50 <LidarSetPos+0x18c8>)
 8010e26:	4a54      	ldr	r2, [pc, #336]	; (8010f78 <LidarSetPos+0x18f0>)
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	e005      	b.n	8010e38 <LidarSetPos+0x17b0>
					}
					else
					{
						vesc_speed = RedType2;
 8010e2c:	4b46      	ldr	r3, [pc, #280]	; (8010f48 <LidarSetPos+0x18c0>)
 8010e2e:	4a53      	ldr	r2, [pc, #332]	; (8010f7c <LidarSetPos+0x18f4>)
 8010e30:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8010e32:	4b47      	ldr	r3, [pc, #284]	; (8010f50 <LidarSetPos+0x18c8>)
 8010e34:	4a52      	ldr	r2, [pc, #328]	; (8010f80 <LidarSetPos+0x18f8>)
 8010e36:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 8010e38:	463b      	mov	r3, r7
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d158      	bne.n	8010ef6 <LidarSetPos+0x186e>
					{
						ResetCoordinate();
 8010e44:	f7fd f89e 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_2;
 8010e48:	463b      	mov	r3, r7
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2204      	movs	r2, #4
 8010e4e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_3_to_center_2, 1, &pp);
 8010e52:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8010e56:	4a41      	ldr	r2, [pc, #260]	; (8010f5c <LidarSetPos+0x18d4>)
 8010e58:	2101      	movs	r1, #1
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7f4 ff00 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8010e60:	e040      	b.n	8010ee4 <LidarSetPos+0x185c>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010e62:	2108      	movs	r1, #8
 8010e64:	4847      	ldr	r0, [pc, #284]	; (8010f84 <LidarSetPos+0x18fc>)
 8010e66:	f006 fc8b 	bl	8017780 <HAL_GPIO_ReadPin>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d006      	beq.n	8010e7e <LidarSetPos+0x17f6>
 8010e70:	2110      	movs	r1, #16
 8010e72:	4844      	ldr	r0, [pc, #272]	; (8010f84 <LidarSetPos+0x18fc>)
 8010e74:	f006 fc84 	bl	8017780 <HAL_GPIO_ReadPin>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d109      	bne.n	8010e92 <LidarSetPos+0x180a>
							{
								pp.target_y[0] = pp.real_y;
 8010e7e:	4b37      	ldr	r3, [pc, #220]	; (8010f5c <LidarSetPos+0x18d4>)
 8010e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e82:	4a36      	ldr	r2, [pc, #216]	; (8010f5c <LidarSetPos+0x18d4>)
 8010e84:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010e88:	4b34      	ldr	r3, [pc, #208]	; (8010f5c <LidarSetPos+0x18d4>)
 8010e8a:	f04f 0200 	mov.w	r2, #0
 8010e8e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_3_to_center_2[0][1])
 8010e92:	4b32      	ldr	r3, [pc, #200]	; (8010f5c <LidarSetPos+0x18d4>)
 8010e94:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010e98:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8010e9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea8:	d809      	bhi.n	8010ebe <LidarSetPos+0x1836>
							{
								pp.target_y[0] = pp.real_y;
 8010eaa:	4b2c      	ldr	r3, [pc, #176]	; (8010f5c <LidarSetPos+0x18d4>)
 8010eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eae:	4a2b      	ldr	r2, [pc, #172]	; (8010f5c <LidarSetPos+0x18d4>)
 8010eb0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010eb4:	4b29      	ldr	r3, [pc, #164]	; (8010f5c <LidarSetPos+0x18d4>)
 8010eb6:	f04f 0200 	mov.w	r2, #0
 8010eba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 8010ebe:	4b26      	ldr	r3, [pc, #152]	; (8010f58 <LidarSetPos+0x18d0>)
 8010ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ec6:	d10d      	bne.n	8010ee4 <LidarSetPos+0x185c>
							{
								while(ps4.button == SQUARE);
 8010ec8:	bf00      	nop
 8010eca:	4b23      	ldr	r3, [pc, #140]	; (8010f58 <LidarSetPos+0x18d0>)
 8010ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ed2:	d0fa      	beq.n	8010eca <LidarSetPos+0x1842>
								PP_stop(&pp);
 8010ed4:	4821      	ldr	r0, [pc, #132]	; (8010f5c <LidarSetPos+0x18d4>)
 8010ed6:	f7f5 f9fb 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 8010eda:	463b      	mov	r3, r7
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 8010ee4:	4b1d      	ldr	r3, [pc, #116]	; (8010f5c <LidarSetPos+0x18d4>)
 8010ee6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010eea:	f003 0301 	and.w	r3, r3, #1
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d1b6      	bne.n	8010e62 <LidarSetPos+0x17da>
 8010ef4:	e091      	b.n	801101a <LidarSetPos+0x1992>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_2;
 8010ef6:	463b      	mov	r3, r7
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	2204      	movs	r2, #4
 8010efc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_2, 1, &pp, 0, 0);
 8010f00:	f507 6098 	add.w	r0, r7, #1216	; 0x4c0
 8010f04:	2300      	movs	r3, #0
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	2300      	movs	r3, #0
 8010f0a:	4a14      	ldr	r2, [pc, #80]	; (8010f5c <LidarSetPos+0x18d4>)
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	f7f5 f86d 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8010f12:	e079      	b.n	8011008 <LidarSetPos+0x1980>
						{
							if(ps4.button == UP)
 8010f14:	4b10      	ldr	r3, [pc, #64]	; (8010f58 <LidarSetPos+0x18d0>)
 8010f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f18:	2b10      	cmp	r3, #16
 8010f1a:	d13f      	bne.n	8010f9c <LidarSetPos+0x1914>
							{
								while(ps4.button == UP);
 8010f1c:	bf00      	nop
 8010f1e:	4b0e      	ldr	r3, [pc, #56]	; (8010f58 <LidarSetPos+0x18d0>)
 8010f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f22:	2b10      	cmp	r3, #16
 8010f24:	d0fb      	beq.n	8010f1e <LidarSetPos+0x1896>
								if(blue)
 8010f26:	4b12      	ldr	r3, [pc, #72]	; (8010f70 <LidarSetPos+0x18e8>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d030      	beq.n	8010f90 <LidarSetPos+0x1908>
								{
									vesc_speed = BlueOppoType2;
 8010f2e:	4b06      	ldr	r3, [pc, #24]	; (8010f48 <LidarSetPos+0x18c0>)
 8010f30:	4a15      	ldr	r2, [pc, #84]	; (8010f88 <LidarSetPos+0x1900>)
 8010f32:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8010f34:	4b06      	ldr	r3, [pc, #24]	; (8010f50 <LidarSetPos+0x18c8>)
 8010f36:	4a15      	ldr	r2, [pc, #84]	; (8010f8c <LidarSetPos+0x1904>)
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	e02f      	b.n	8010f9c <LidarSetPos+0x1914>
 8010f3c:	f3af 8000 	nop.w
 8010f40:	9999999a 	.word	0x9999999a
 8010f44:	3fa99999 	.word	0x3fa99999
 8010f48:	200065c0 	.word	0x200065c0
 8010f4c:	4154cccd 	.word	0x4154cccd
 8010f50:	2000749c 	.word	0x2000749c
 8010f54:	45039000 	.word	0x45039000
 8010f58:	2000a244 	.word	0x2000a244
 8010f5c:	20006d4c 	.word	0x20006d4c
 8010f60:	20007730 	.word	0x20007730
 8010f64:	3fe00000 	.word	0x3fe00000
 8010f68:	c2b20000 	.word	0xc2b20000
 8010f6c:	200073d8 	.word	0x200073d8
 8010f70:	20006a4c 	.word	0x20006a4c
 8010f74:	41026666 	.word	0x41026666
 8010f78:	44bea000 	.word	0x44bea000
 8010f7c:	4104cccd 	.word	0x4104cccd
 8010f80:	44c1c000 	.word	0x44c1c000
 8010f84:	40020c00 	.word	0x40020c00
 8010f88:	414f3333 	.word	0x414f3333
 8010f8c:	45020000 	.word	0x45020000
								}
								else
								{
									vesc_speed = RedOppoType2;
 8010f90:	4bb9      	ldr	r3, [pc, #740]	; (8011278 <LidarSetPos+0x1bf0>)
 8010f92:	4aba      	ldr	r2, [pc, #744]	; (801127c <LidarSetPos+0x1bf4>)
 8010f94:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8010f96:	4bba      	ldr	r3, [pc, #744]	; (8011280 <LidarSetPos+0x1bf8>)
 8010f98:	4aba      	ldr	r2, [pc, #744]	; (8011284 <LidarSetPos+0x1bfc>)
 8010f9a:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8010f9c:	4bba      	ldr	r3, [pc, #744]	; (8011288 <LidarSetPos+0x1c00>)
 8010f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fa4:	d108      	bne.n	8010fb8 <LidarSetPos+0x1930>
							{
								while(ps4.button == SQUARE);
 8010fa6:	bf00      	nop
 8010fa8:	4bb7      	ldr	r3, [pc, #732]	; (8011288 <LidarSetPos+0x1c00>)
 8010faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fb0:	d0fa      	beq.n	8010fa8 <LidarSetPos+0x1920>
								PP_stop(&pp);
 8010fb2:	48b6      	ldr	r0, [pc, #728]	; (801128c <LidarSetPos+0x1c04>)
 8010fb4:	f7f5 f98c 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_2[0][1] + Offset_2 - 0.4)
 8010fb8:	4bb5      	ldr	r3, [pc, #724]	; (8011290 <LidarSetPos+0x1c08>)
 8010fba:	69db      	ldr	r3, [r3, #28]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ef fac3 	bl	8000548 <__aeabi_f2d>
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	460d      	mov	r5, r1
 8010fc6:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7ef fabb 	bl	8000548 <__aeabi_f2d>
 8010fd2:	f04f 0200 	mov.w	r2, #0
 8010fd6:	4baf      	ldr	r3, [pc, #700]	; (8011294 <LidarSetPos+0x1c0c>)
 8010fd8:	f7ef f958 	bl	800028c <__adddf3>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	a3a0      	add	r3, pc, #640	; (adr r3, 8011268 <LidarSetPos+0x1be0>)
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	f7ef f94d 	bl	8000288 <__aeabi_dsub>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	4629      	mov	r1, r5
 8010ff6:	f7ef fd7b 	bl	8000af0 <__aeabi_dcmple>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d100      	bne.n	8011002 <LidarSetPos+0x197a>
 8011000:	e002      	b.n	8011008 <LidarSetPos+0x1980>
								PP_stop(&pp);
 8011002:	48a2      	ldr	r0, [pc, #648]	; (801128c <LidarSetPos+0x1c04>)
 8011004:	f7f5 f964 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8011008:	4ba0      	ldr	r3, [pc, #640]	; (801128c <LidarSetPos+0x1c04>)
 801100a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801100e:	f003 0310 	and.w	r3, r3, #16
 8011012:	b2db      	uxtb	r3, r3
 8011014:	2b00      	cmp	r3, #0
 8011016:	f47f af7d 	bne.w	8010f14 <LidarSetPos+0x188c>
						}
					}
					PP_start(robot_center, 1, &pp);
 801101a:	f107 030c 	add.w	r3, r7, #12
 801101e:	4a9b      	ldr	r2, [pc, #620]	; (801128c <LidarSetPos+0x1c04>)
 8011020:	2101      	movs	r1, #1
 8011022:	4618      	mov	r0, r3
 8011024:	f7f4 fe1c 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8011028:	f004 fd2e 	bl	8015a88 <HAL_GetTick>
 801102c:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8011030:	e027      	b.n	8011082 <LidarSetPos+0x19fa>
					{
						after = HAL_GetTick();
 8011032:	f004 fd29 	bl	8015a88 <HAL_GetTick>
 8011036:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 750)
 801103a:	4b94      	ldr	r3, [pc, #592]	; (801128c <LidarSetPos+0x1c04>)
 801103c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011040:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8011298 <LidarSetPos+0x1c10>
 8011044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801104c:	d80b      	bhi.n	8011066 <LidarSetPos+0x19de>
 801104e:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8011052:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	f240 22ed 	movw	r2, #749	; 0x2ed
 801105c:	4293      	cmp	r3, r2
 801105e:	d902      	bls.n	8011066 <LidarSetPos+0x19de>
							PP_stop(&pp);
 8011060:	488a      	ldr	r0, [pc, #552]	; (801128c <LidarSetPos+0x1c04>)
 8011062:	f7f5 f935 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8011066:	4b88      	ldr	r3, [pc, #544]	; (8011288 <LidarSetPos+0x1c00>)
 8011068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801106a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801106e:	d108      	bne.n	8011082 <LidarSetPos+0x19fa>
						{
							while(ps4.button == SQUARE);
 8011070:	bf00      	nop
 8011072:	4b85      	ldr	r3, [pc, #532]	; (8011288 <LidarSetPos+0x1c00>)
 8011074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801107a:	d0fa      	beq.n	8011072 <LidarSetPos+0x19ea>
							PP_stop(&pp);
 801107c:	4883      	ldr	r0, [pc, #524]	; (801128c <LidarSetPos+0x1c04>)
 801107e:	f7f5 f927 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8011082:	4b82      	ldr	r3, [pc, #520]	; (801128c <LidarSetPos+0x1c04>)
 8011084:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1cf      	bne.n	8011032 <LidarSetPos+0x19aa>
						}
					}

					stick_fence = 1;
 8011092:	4b82      	ldr	r3, [pc, #520]	; (801129c <LidarSetPos+0x1c14>)
 8011094:	2201      	movs	r2, #1
 8011096:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011098:	463b      	mov	r3, r7
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d005      	beq.n	80110b0 <LidarSetPos+0x1a28>
					{
						osDelay(300);
 80110a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80110a8:	f00b fa24 	bl	801c4f4 <osDelay>
						Shot();
 80110ac:	f7fd fab8 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 80110b0:	463b      	mov	r3, r7
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f040 8107 	bne.w	80112cc <LidarSetPos+0x1c44>
						LidarAdjust(lidar);
 80110be:	463b      	mov	r3, r7
 80110c0:	6818      	ldr	r0, [r3, #0]
 80110c2:	f003 fe51 	bl	8014d68 <LidarAdjust>

					break;
 80110c6:	e101      	b.n	80112cc <LidarSetPos+0x1c44>

				case CENTER_4:
					stick_fence = 0;
 80110c8:	4b74      	ldr	r3, [pc, #464]	; (801129c <LidarSetPos+0x1c14>)
 80110ca:	2200      	movs	r2, #0
 80110cc:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 80110ce:	463b      	mov	r3, r7
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 80110d8:	4b71      	ldr	r3, [pc, #452]	; (80112a0 <LidarSetPos+0x1c18>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d006      	beq.n	80110ee <LidarSetPos+0x1a66>
					{
						vesc_speed = BlueType2;
 80110e0:	4b65      	ldr	r3, [pc, #404]	; (8011278 <LidarSetPos+0x1bf0>)
 80110e2:	4a70      	ldr	r2, [pc, #448]	; (80112a4 <LidarSetPos+0x1c1c>)
 80110e4:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 80110e6:	4b66      	ldr	r3, [pc, #408]	; (8011280 <LidarSetPos+0x1bf8>)
 80110e8:	4a6f      	ldr	r2, [pc, #444]	; (80112a8 <LidarSetPos+0x1c20>)
 80110ea:	601a      	str	r2, [r3, #0]
 80110ec:	e005      	b.n	80110fa <LidarSetPos+0x1a72>
					}
					else
					{
						vesc_speed = RedType2;
 80110ee:	4b62      	ldr	r3, [pc, #392]	; (8011278 <LidarSetPos+0x1bf0>)
 80110f0:	4a6e      	ldr	r2, [pc, #440]	; (80112ac <LidarSetPos+0x1c24>)
 80110f2:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 80110f4:	4b62      	ldr	r3, [pc, #392]	; (8011280 <LidarSetPos+0x1bf8>)
 80110f6:	4a6e      	ldr	r2, [pc, #440]	; (80112b0 <LidarSetPos+0x1c28>)
 80110f8:	601a      	str	r2, [r3, #0]
					}

					lidar->pos = CENTER_2;
 80110fa:	463b      	mov	r3, r7
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2204      	movs	r2, #4
 8011100:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_2, 1, &pp, 0, 0);
 8011104:	f507 6098 	add.w	r0, r7, #1216	; 0x4c0
 8011108:	2300      	movs	r3, #0
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	2300      	movs	r3, #0
 801110e:	4a5f      	ldr	r2, [pc, #380]	; (801128c <LidarSetPos+0x1c04>)
 8011110:	2101      	movs	r1, #1
 8011112:	f7f4 ff6b 	bl	8005fec <LSR_start>
					while(pp.lsr_start)
 8011116:	e04f      	b.n	80111b8 <LidarSetPos+0x1b30>
					{
						if(ps4.button == UP)
 8011118:	4b5b      	ldr	r3, [pc, #364]	; (8011288 <LidarSetPos+0x1c00>)
 801111a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801111c:	2b10      	cmp	r3, #16
 801111e:	d115      	bne.n	801114c <LidarSetPos+0x1ac4>
						{
							while(ps4.button == UP);
 8011120:	bf00      	nop
 8011122:	4b59      	ldr	r3, [pc, #356]	; (8011288 <LidarSetPos+0x1c00>)
 8011124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011126:	2b10      	cmp	r3, #16
 8011128:	d0fb      	beq.n	8011122 <LidarSetPos+0x1a9a>
							if(blue)
 801112a:	4b5d      	ldr	r3, [pc, #372]	; (80112a0 <LidarSetPos+0x1c18>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d006      	beq.n	8011140 <LidarSetPos+0x1ab8>
							{
								vesc_speed = BlueOppoType2;
 8011132:	4b51      	ldr	r3, [pc, #324]	; (8011278 <LidarSetPos+0x1bf0>)
 8011134:	4a5f      	ldr	r2, [pc, #380]	; (80112b4 <LidarSetPos+0x1c2c>)
 8011136:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 8011138:	4b51      	ldr	r3, [pc, #324]	; (8011280 <LidarSetPos+0x1bf8>)
 801113a:	4a5f      	ldr	r2, [pc, #380]	; (80112b8 <LidarSetPos+0x1c30>)
 801113c:	601a      	str	r2, [r3, #0]
 801113e:	e005      	b.n	801114c <LidarSetPos+0x1ac4>
							}
							else
							{
								vesc_speed = RedOppoType2;
 8011140:	4b4d      	ldr	r3, [pc, #308]	; (8011278 <LidarSetPos+0x1bf0>)
 8011142:	4a4e      	ldr	r2, [pc, #312]	; (801127c <LidarSetPos+0x1bf4>)
 8011144:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 8011146:	4b4e      	ldr	r3, [pc, #312]	; (8011280 <LidarSetPos+0x1bf8>)
 8011148:	4a4e      	ldr	r2, [pc, #312]	; (8011284 <LidarSetPos+0x1bfc>)
 801114a:	601a      	str	r2, [r3, #0]
							}
						}

						if(ps4.button == SQUARE)
 801114c:	4b4e      	ldr	r3, [pc, #312]	; (8011288 <LidarSetPos+0x1c00>)
 801114e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011154:	d108      	bne.n	8011168 <LidarSetPos+0x1ae0>
						{
							while(ps4.button == SQUARE);
 8011156:	bf00      	nop
 8011158:	4b4b      	ldr	r3, [pc, #300]	; (8011288 <LidarSetPos+0x1c00>)
 801115a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801115c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011160:	d0fa      	beq.n	8011158 <LidarSetPos+0x1ad0>
							PP_stop(&pp);
 8011162:	484a      	ldr	r0, [pc, #296]	; (801128c <LidarSetPos+0x1c04>)
 8011164:	f7f5 f8b4 	bl	80062d0 <PP_stop>
						}

						if(lsrL.dist <= lsr_center_2[0][1] + Offset_3 - 0.5)
 8011168:	4b49      	ldr	r3, [pc, #292]	; (8011290 <LidarSetPos+0x1c08>)
 801116a:	69db      	ldr	r3, [r3, #28]
 801116c:	4618      	mov	r0, r3
 801116e:	f7ef f9eb 	bl	8000548 <__aeabi_f2d>
 8011172:	4604      	mov	r4, r0
 8011174:	460d      	mov	r5, r1
 8011176:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4618      	mov	r0, r3
 801117e:	f7ef f9e3 	bl	8000548 <__aeabi_f2d>
 8011182:	a33b      	add	r3, pc, #236	; (adr r3, 8011270 <LidarSetPos+0x1be8>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7ef f880 	bl	800028c <__adddf3>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	4610      	mov	r0, r2
 8011192:	4619      	mov	r1, r3
 8011194:	f04f 0200 	mov.w	r2, #0
 8011198:	4b48      	ldr	r3, [pc, #288]	; (80112bc <LidarSetPos+0x1c34>)
 801119a:	f7ef f875 	bl	8000288 <__aeabi_dsub>
 801119e:	4602      	mov	r2, r0
 80111a0:	460b      	mov	r3, r1
 80111a2:	4620      	mov	r0, r4
 80111a4:	4629      	mov	r1, r5
 80111a6:	f7ef fca3 	bl	8000af0 <__aeabi_dcmple>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d100      	bne.n	80111b2 <LidarSetPos+0x1b2a>
 80111b0:	e002      	b.n	80111b8 <LidarSetPos+0x1b30>
							PP_stop(&pp);
 80111b2:	4836      	ldr	r0, [pc, #216]	; (801128c <LidarSetPos+0x1c04>)
 80111b4:	f7f5 f88c 	bl	80062d0 <PP_stop>
					while(pp.lsr_start)
 80111b8:	4b34      	ldr	r3, [pc, #208]	; (801128c <LidarSetPos+0x1c04>)
 80111ba:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80111be:	f003 0310 	and.w	r3, r3, #16
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d1a7      	bne.n	8011118 <LidarSetPos+0x1a90>
					}

					PP_start(robot_center, 1, &pp);
 80111c8:	f107 030c 	add.w	r3, r7, #12
 80111cc:	4a2f      	ldr	r2, [pc, #188]	; (801128c <LidarSetPos+0x1c04>)
 80111ce:	2101      	movs	r1, #1
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7f4 fd45 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 80111d6:	f004 fc57 	bl	8015a88 <HAL_GetTick>
 80111da:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 80111de:	e027      	b.n	8011230 <LidarSetPos+0x1ba8>
					{
						after = HAL_GetTick();
 80111e0:	f004 fc52 	bl	8015a88 <HAL_GetTick>
 80111e4:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 750)
 80111e8:	4b28      	ldr	r3, [pc, #160]	; (801128c <LidarSetPos+0x1c04>)
 80111ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80111ee:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8011298 <LidarSetPos+0x1c10>
 80111f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fa:	d80b      	bhi.n	8011214 <LidarSetPos+0x1b8c>
 80111fc:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8011200:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8011204:	1ad3      	subs	r3, r2, r3
 8011206:	f240 22ed 	movw	r2, #749	; 0x2ed
 801120a:	4293      	cmp	r3, r2
 801120c:	d902      	bls.n	8011214 <LidarSetPos+0x1b8c>
							PP_stop(&pp);
 801120e:	481f      	ldr	r0, [pc, #124]	; (801128c <LidarSetPos+0x1c04>)
 8011210:	f7f5 f85e 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8011214:	4b1c      	ldr	r3, [pc, #112]	; (8011288 <LidarSetPos+0x1c00>)
 8011216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801121c:	d108      	bne.n	8011230 <LidarSetPos+0x1ba8>
						{
							while(ps4.button == SQUARE);
 801121e:	bf00      	nop
 8011220:	4b19      	ldr	r3, [pc, #100]	; (8011288 <LidarSetPos+0x1c00>)
 8011222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011228:	d0fa      	beq.n	8011220 <LidarSetPos+0x1b98>
							PP_stop(&pp);
 801122a:	4818      	ldr	r0, [pc, #96]	; (801128c <LidarSetPos+0x1c04>)
 801122c:	f7f5 f850 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8011230:	4b16      	ldr	r3, [pc, #88]	; (801128c <LidarSetPos+0x1c04>)
 8011232:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011236:	f003 0301 	and.w	r3, r3, #1
 801123a:	b2db      	uxtb	r3, r3
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1cf      	bne.n	80111e0 <LidarSetPos+0x1b58>
						}
					}

					stick_fence = 1;
 8011240:	4b16      	ldr	r3, [pc, #88]	; (801129c <LidarSetPos+0x1c14>)
 8011242:	2201      	movs	r2, #1
 8011244:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011246:	463b      	mov	r3, r7
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801124e:	2b00      	cmp	r3, #0
 8011250:	d03f      	beq.n	80112d2 <LidarSetPos+0x1c4a>
					{
						osDelay(300);
 8011252:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011256:	f00b f94d 	bl	801c4f4 <osDelay>
						Shot();
 801125a:	f7fd f9e1 	bl	800e620 <Shot>
					}
					break;
 801125e:	e038      	b.n	80112d2 <LidarSetPos+0x1c4a>

				default:
					break;
 8011260:	bf00      	nop
 8011262:	f002 be2c 	b.w	8013ebe <LidarSetPos+0x4836>
 8011266:	bf00      	nop
 8011268:	9999999a 	.word	0x9999999a
 801126c:	3fd99999 	.word	0x3fd99999
 8011270:	9999999a 	.word	0x9999999a
 8011274:	3fe99999 	.word	0x3fe99999
 8011278:	200065c0 	.word	0x200065c0
 801127c:	4154cccd 	.word	0x4154cccd
 8011280:	2000749c 	.word	0x2000749c
 8011284:	45039000 	.word	0x45039000
 8011288:	2000a244 	.word	0x2000a244
 801128c:	20006d4c 	.word	0x20006d4c
 8011290:	20007730 	.word	0x20007730
 8011294:	3fe80000 	.word	0x3fe80000
 8011298:	c2b20000 	.word	0xc2b20000
 801129c:	200073d8 	.word	0x200073d8
 80112a0:	20006a4c 	.word	0x20006a4c
 80112a4:	41026666 	.word	0x41026666
 80112a8:	44bea000 	.word	0x44bea000
 80112ac:	4104cccd 	.word	0x4104cccd
 80112b0:	44c1c000 	.word	0x44c1c000
 80112b4:	414f3333 	.word	0x414f3333
 80112b8:	45020000 	.word	0x45020000
 80112bc:	3fe00000 	.word	0x3fe00000
					break;
 80112c0:	bf00      	nop
 80112c2:	f002 bdfc 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80112c6:	bf00      	nop
 80112c8:	f002 bdf9 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80112cc:	bf00      	nop
 80112ce:	f002 bdf6 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 80112d2:	bf00      	nop
			}
			break;
 80112d4:	f002 bdf3 	b.w	8013ebe <LidarSetPos+0x4836>

		case CENTER:
			switch(lidar->pos) // Self Pose
 80112d8:	463b      	mov	r3, r7
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80112e0:	3b01      	subs	r3, #1
 80112e2:	2b08      	cmp	r3, #8
 80112e4:	f200 865d 	bhi.w	8011fa2 <LidarSetPos+0x291a>
 80112e8:	a201      	add	r2, pc, #4	; (adr r2, 80112f0 <LidarSetPos+0x1c68>)
 80112ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ee:	bf00      	nop
 80112f0:	08011315 	.word	0x08011315
 80112f4:	080114db 	.word	0x080114db
 80112f8:	080114f7 	.word	0x080114f7
 80112fc:	0801179b 	.word	0x0801179b
 8011300:	08011fa3 	.word	0x08011fa3
 8011304:	08011a3b 	.word	0x08011a3b
 8011308:	08011d0b 	.word	0x08011d0b
 801130c:	080114e9 	.word	0x080114e9
 8011310:	08011323 	.word	0x08011323
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 8011314:	463b      	mov	r3, r7
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2205      	movs	r2, #5
 801131a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801131e:	f000 be4d 	b.w	8011fbc <LidarSetPos+0x2934>

				case PICK_RIGHT:
					stick_fence = 0;
 8011322:	4bb5      	ldr	r3, [pc, #724]	; (80115f8 <LidarSetPos+0x1f70>)
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]
					if(blue)
 8011328:	4bb4      	ldr	r3, [pc, #720]	; (80115fc <LidarSetPos+0x1f74>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d006      	beq.n	801133e <LidarSetPos+0x1cb6>
					{
						vesc_speed = BlueType3;
 8011330:	4bb3      	ldr	r3, [pc, #716]	; (8011600 <LidarSetPos+0x1f78>)
 8011332:	4ab4      	ldr	r2, [pc, #720]	; (8011604 <LidarSetPos+0x1f7c>)
 8011334:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 8011336:	4bb4      	ldr	r3, [pc, #720]	; (8011608 <LidarSetPos+0x1f80>)
 8011338:	4ab4      	ldr	r2, [pc, #720]	; (801160c <LidarSetPos+0x1f84>)
 801133a:	601a      	str	r2, [r3, #0]
 801133c:	e005      	b.n	801134a <LidarSetPos+0x1cc2>
					}
					else
					{
						vesc_speed = RedType3;
 801133e:	4bb0      	ldr	r3, [pc, #704]	; (8011600 <LidarSetPos+0x1f78>)
 8011340:	4ab3      	ldr	r2, [pc, #716]	; (8011610 <LidarSetPos+0x1f88>)
 8011342:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 8011344:	4bb0      	ldr	r3, [pc, #704]	; (8011608 <LidarSetPos+0x1f80>)
 8011346:	4ab3      	ldr	r2, [pc, #716]	; (8011614 <LidarSetPos+0x1f8c>)
 8011348:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801134a:	f7fc fe1b 	bl	800df84 <ResetCoordinate>
					lidar->pos = CENTER;
 801134e:	463b      	mov	r3, r7
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2205      	movs	r2, #5
 8011354:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 8011358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135c:	4aae      	ldr	r2, [pc, #696]	; (8011618 <LidarSetPos+0x1f90>)
 801135e:	2101      	movs	r1, #1
 8011360:	4618      	mov	r0, r3
 8011362:	f7f4 fc7d 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8011366:	e00d      	b.n	8011384 <LidarSetPos+0x1cfc>
					{
						if(ps4.button == SQUARE)
 8011368:	4bac      	ldr	r3, [pc, #688]	; (801161c <LidarSetPos+0x1f94>)
 801136a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801136c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011370:	d108      	bne.n	8011384 <LidarSetPos+0x1cfc>
						{
							while(ps4.button == SQUARE);
 8011372:	bf00      	nop
 8011374:	4ba9      	ldr	r3, [pc, #676]	; (801161c <LidarSetPos+0x1f94>)
 8011376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801137c:	d0fa      	beq.n	8011374 <LidarSetPos+0x1cec>
							PP_stop(&pp);
 801137e:	48a6      	ldr	r0, [pc, #664]	; (8011618 <LidarSetPos+0x1f90>)
 8011380:	f7f4 ffa6 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8011384:	4ba4      	ldr	r3, [pc, #656]	; (8011618 <LidarSetPos+0x1f90>)
 8011386:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	b2db      	uxtb	r3, r3
 8011390:	2b00      	cmp	r3, #0
 8011392:	d1e9      	bne.n	8011368 <LidarSetPos+0x1ce0>
						}
					}
					LoadRing();
 8011394:	f7fc fd9e 	bl	800ded4 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center, 1, &pp);
 8011398:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801139c:	4a9e      	ldr	r2, [pc, #632]	; (8011618 <LidarSetPos+0x1f90>)
 801139e:	2101      	movs	r1, #1
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7f4 fc5d 	bl	8005c60 <PP_start>

					load_adjust = 1;
 80113a6:	4b9e      	ldr	r3, [pc, #632]	; (8011620 <LidarSetPos+0x1f98>)
 80113a8:	2201      	movs	r2, #1
 80113aa:	601a      	str	r2, [r3, #0]
					AdjustRings();
 80113ac:	f7fc fdd8 	bl	800df60 <AdjustRings>
					while(pp.pp_start)
 80113b0:	e03d      	b.n	801142e <LidarSetPos+0x1da6>
					{
						if(ps4.button == SQUARE)
 80113b2:	4b9a      	ldr	r3, [pc, #616]	; (801161c <LidarSetPos+0x1f94>)
 80113b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113ba:	d108      	bne.n	80113ce <LidarSetPos+0x1d46>
						{
							while(ps4.button == SQUARE);
 80113bc:	bf00      	nop
 80113be:	4b97      	ldr	r3, [pc, #604]	; (801161c <LidarSetPos+0x1f94>)
 80113c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113c6:	d0fa      	beq.n	80113be <LidarSetPos+0x1d36>
							PP_stop(&pp);
 80113c8:	4893      	ldr	r0, [pc, #588]	; (8011618 <LidarSetPos+0x1f90>)
 80113ca:	f7f4 ff81 	bl	80062d0 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 80113ce:	2108      	movs	r1, #8
 80113d0:	4894      	ldr	r0, [pc, #592]	; (8011624 <LidarSetPos+0x1f9c>)
 80113d2:	f006 f9d5 	bl	8017780 <HAL_GPIO_ReadPin>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d006      	beq.n	80113ea <LidarSetPos+0x1d62>
 80113dc:	2110      	movs	r1, #16
 80113de:	4891      	ldr	r0, [pc, #580]	; (8011624 <LidarSetPos+0x1f9c>)
 80113e0:	f006 f9ce 	bl	8017780 <HAL_GPIO_ReadPin>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d109      	bne.n	80113fe <LidarSetPos+0x1d76>
						{
							pp.target_y[0] = pp.real_y;
 80113ea:	4b8b      	ldr	r3, [pc, #556]	; (8011618 <LidarSetPos+0x1f90>)
 80113ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113ee:	4a8a      	ldr	r2, [pc, #552]	; (8011618 <LidarSetPos+0x1f90>)
 80113f0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 80113f4:	4b88      	ldr	r3, [pc, #544]	; (8011618 <LidarSetPos+0x1f90>)
 80113f6:	f04f 0200 	mov.w	r2, #0
 80113fa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(pp.real_x <= -4.6)
 80113fe:	4b86      	ldr	r3, [pc, #536]	; (8011618 <LidarSetPos+0x1f90>)
 8011400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011402:	4618      	mov	r0, r3
 8011404:	f7ef f8a0 	bl	8000548 <__aeabi_f2d>
 8011408:	a379      	add	r3, pc, #484	; (adr r3, 80115f0 <LidarSetPos+0x1f68>)
 801140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140e:	f7ef fb6f 	bl	8000af0 <__aeabi_dcmple>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d100      	bne.n	801141a <LidarSetPos+0x1d92>
 8011418:	e009      	b.n	801142e <LidarSetPos+0x1da6>
						{
							pp.target_y[0] = pp.real_y;
 801141a:	4b7f      	ldr	r3, [pc, #508]	; (8011618 <LidarSetPos+0x1f90>)
 801141c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801141e:	4a7e      	ldr	r2, [pc, #504]	; (8011618 <LidarSetPos+0x1f90>)
 8011420:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8011424:	4b7c      	ldr	r3, [pc, #496]	; (8011618 <LidarSetPos+0x1f90>)
 8011426:	f04f 0200 	mov.w	r2, #0
 801142a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 801142e:	4b7a      	ldr	r3, [pc, #488]	; (8011618 <LidarSetPos+0x1f90>)
 8011430:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011434:	f003 0301 	and.w	r3, r3, #1
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	d1b9      	bne.n	80113b2 <LidarSetPos+0x1d2a>
						}
					}

					adjust_servo;
 801143e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8011442:	4879      	ldr	r0, [pc, #484]	; (8011628 <LidarSetPos+0x1fa0>)
 8011444:	f7fa f9cc 	bl	800b7e0 <ServoSetPulse>
 8011448:	f640 0166 	movw	r1, #2150	; 0x866
 801144c:	4877      	ldr	r0, [pc, #476]	; (801162c <LidarSetPos+0x1fa4>)
 801144e:	f7fa f9c7 	bl	800b7e0 <ServoSetPulse>

					PP_start(robot_center, 1, &pp);
 8011452:	f107 030c 	add.w	r3, r7, #12
 8011456:	4a70      	ldr	r2, [pc, #448]	; (8011618 <LidarSetPos+0x1f90>)
 8011458:	2101      	movs	r1, #1
 801145a:	4618      	mov	r0, r3
 801145c:	f7f4 fc00 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8011460:	f004 fb12 	bl	8015a88 <HAL_GetTick>
 8011464:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8011468:	e026      	b.n	80114b8 <LidarSetPos+0x1e30>
					{
						after = HAL_GetTick();
 801146a:	f004 fb0d 	bl	8015a88 <HAL_GetTick>
 801146e:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 1000)
 8011472:	4b69      	ldr	r3, [pc, #420]	; (8011618 <LidarSetPos+0x1f90>)
 8011474:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011478:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8011630 <LidarSetPos+0x1fa8>
 801147c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011484:	d80a      	bhi.n	801149c <LidarSetPos+0x1e14>
 8011486:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 801148a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011494:	d302      	bcc.n	801149c <LidarSetPos+0x1e14>
							PP_stop(&pp);
 8011496:	4860      	ldr	r0, [pc, #384]	; (8011618 <LidarSetPos+0x1f90>)
 8011498:	f7f4 ff1a 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 801149c:	4b5f      	ldr	r3, [pc, #380]	; (801161c <LidarSetPos+0x1f94>)
 801149e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114a4:	d108      	bne.n	80114b8 <LidarSetPos+0x1e30>
						{
							while(ps4.button == SQUARE);
 80114a6:	bf00      	nop
 80114a8:	4b5c      	ldr	r3, [pc, #368]	; (801161c <LidarSetPos+0x1f94>)
 80114aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114b0:	d0fa      	beq.n	80114a8 <LidarSetPos+0x1e20>
							PP_stop(&pp);
 80114b2:	4859      	ldr	r0, [pc, #356]	; (8011618 <LidarSetPos+0x1f90>)
 80114b4:	f7f4 ff0c 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80114b8:	4b57      	ldr	r3, [pc, #348]	; (8011618 <LidarSetPos+0x1f90>)
 80114ba:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80114be:	f003 0301 	and.w	r3, r3, #1
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d1d0      	bne.n	801146a <LidarSetPos+0x1de2>
						}
					}

					stick_fence = 1;
 80114c8:	4b4b      	ldr	r3, [pc, #300]	; (80115f8 <LidarSetPos+0x1f70>)
 80114ca:	2201      	movs	r2, #1
 80114cc:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 80114ce:	463b      	mov	r3, r7
 80114d0:	6818      	ldr	r0, [r3, #0]
 80114d2:	f003 fc49 	bl	8014d68 <LidarAdjust>

					break;
 80114d6:	f000 bd71 	b.w	8011fbc <LidarSetPos+0x2934>

				case UPPER_LEFT:
					lidar->pos = CENTER;
 80114da:	463b      	mov	r3, r7
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	2205      	movs	r2, #5
 80114e0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80114e4:	f000 bd6a 	b.w	8011fbc <LidarSetPos+0x2934>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 80114e8:	463b      	mov	r3, r7
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	2205      	movs	r2, #5
 80114ee:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80114f2:	f000 bd63 	b.w	8011fbc <LidarSetPos+0x2934>

				case CENTER_1:
					stick_fence = 0;
 80114f6:	4b40      	ldr	r3, [pc, #256]	; (80115f8 <LidarSetPos+0x1f70>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 80114fc:	4b42      	ldr	r3, [pc, #264]	; (8011608 <LidarSetPos+0x1f80>)
 80114fe:	4a4d      	ldr	r2, [pc, #308]	; (8011634 <LidarSetPos+0x1fac>)
 8011500:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011502:	463b      	mov	r3, r7
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2200      	movs	r2, #0
 8011508:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 801150c:	4b3c      	ldr	r3, [pc, #240]	; (8011600 <LidarSetPos+0x1f78>)
 801150e:	4a4a      	ldr	r2, [pc, #296]	; (8011638 <LidarSetPos+0x1fb0>)
 8011510:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8011512:	463b      	mov	r3, r7
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801151a:	2b00      	cmp	r3, #0
 801151c:	d158      	bne.n	80115d0 <LidarSetPos+0x1f48>
					{
						ResetCoordinate();
 801151e:	f7fc fd31 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER;
 8011522:	463b      	mov	r3, r7
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2205      	movs	r2, #5
 8011528:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_1_to_center, 1, &pp);
 801152c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8011530:	4a39      	ldr	r2, [pc, #228]	; (8011618 <LidarSetPos+0x1f90>)
 8011532:	2101      	movs	r1, #1
 8011534:	4618      	mov	r0, r3
 8011536:	f7f4 fb93 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 801153a:	e040      	b.n	80115be <LidarSetPos+0x1f36>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 801153c:	2108      	movs	r1, #8
 801153e:	4839      	ldr	r0, [pc, #228]	; (8011624 <LidarSetPos+0x1f9c>)
 8011540:	f006 f91e 	bl	8017780 <HAL_GPIO_ReadPin>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d006      	beq.n	8011558 <LidarSetPos+0x1ed0>
 801154a:	2110      	movs	r1, #16
 801154c:	4835      	ldr	r0, [pc, #212]	; (8011624 <LidarSetPos+0x1f9c>)
 801154e:	f006 f917 	bl	8017780 <HAL_GPIO_ReadPin>
 8011552:	4603      	mov	r3, r0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d109      	bne.n	801156c <LidarSetPos+0x1ee4>
							{
								pp.target_y[0] = pp.real_y;
 8011558:	4b2f      	ldr	r3, [pc, #188]	; (8011618 <LidarSetPos+0x1f90>)
 801155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801155c:	4a2e      	ldr	r2, [pc, #184]	; (8011618 <LidarSetPos+0x1f90>)
 801155e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011562:	4b2d      	ldr	r3, [pc, #180]	; (8011618 <LidarSetPos+0x1f90>)
 8011564:	f04f 0200 	mov.w	r2, #0
 8011568:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_1_to_center[0][1])
 801156c:	4b2a      	ldr	r3, [pc, #168]	; (8011618 <LidarSetPos+0x1f90>)
 801156e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011572:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8011576:	edd3 7a01 	vldr	s15, [r3, #4]
 801157a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011582:	db09      	blt.n	8011598 <LidarSetPos+0x1f10>
							{
								pp.target_y[0] = pp.real_y;
 8011584:	4b24      	ldr	r3, [pc, #144]	; (8011618 <LidarSetPos+0x1f90>)
 8011586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011588:	4a23      	ldr	r2, [pc, #140]	; (8011618 <LidarSetPos+0x1f90>)
 801158a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801158e:	4b22      	ldr	r3, [pc, #136]	; (8011618 <LidarSetPos+0x1f90>)
 8011590:	f04f 0200 	mov.w	r2, #0
 8011594:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 8011598:	4b20      	ldr	r3, [pc, #128]	; (801161c <LidarSetPos+0x1f94>)
 801159a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801159c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115a0:	d10d      	bne.n	80115be <LidarSetPos+0x1f36>
							{
								while(ps4.button == SQUARE);
 80115a2:	bf00      	nop
 80115a4:	4b1d      	ldr	r3, [pc, #116]	; (801161c <LidarSetPos+0x1f94>)
 80115a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115ac:	d0fa      	beq.n	80115a4 <LidarSetPos+0x1f1c>
								PP_stop(&pp);
 80115ae:	481a      	ldr	r0, [pc, #104]	; (8011618 <LidarSetPos+0x1f90>)
 80115b0:	f7f4 fe8e 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 80115b4:	463b      	mov	r3, r7
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2201      	movs	r2, #1
 80115ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 80115be:	4b16      	ldr	r3, [pc, #88]	; (8011618 <LidarSetPos+0x1f90>)
 80115c0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80115c4:	f003 0301 	and.w	r3, r3, #1
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1b6      	bne.n	801153c <LidarSetPos+0x1eb4>
 80115ce:	e08d      	b.n	80116ec <LidarSetPos+0x2064>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 80115d0:	463b      	mov	r3, r7
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2205      	movs	r2, #5
 80115d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center, 1, &pp, 0, 0);
 80115da:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 80115de:	2300      	movs	r3, #0
 80115e0:	9300      	str	r3, [sp, #0]
 80115e2:	2300      	movs	r3, #0
 80115e4:	4a0c      	ldr	r2, [pc, #48]	; (8011618 <LidarSetPos+0x1f90>)
 80115e6:	2101      	movs	r1, #1
 80115e8:	f7f4 fd00 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 80115ec:	e076      	b.n	80116dc <LidarSetPos+0x2054>
 80115ee:	bf00      	nop
 80115f0:	66666666 	.word	0x66666666
 80115f4:	c0126666 	.word	0xc0126666
 80115f8:	200073d8 	.word	0x200073d8
 80115fc:	20006a4c 	.word	0x20006a4c
 8011600:	200065c0 	.word	0x200065c0
 8011604:	4151999a 	.word	0x4151999a
 8011608:	2000749c 	.word	0x2000749c
 801160c:	44f78000 	.word	0x44f78000
 8011610:	41540000 	.word	0x41540000
 8011614:	44fbe000 	.word	0x44fbe000
 8011618:	20006d4c 	.word	0x20006d4c
 801161c:	2000a244 	.word	0x2000a244
 8011620:	200095c4 	.word	0x200095c4
 8011624:	40020c00 	.word	0x40020c00
 8011628:	200079e0 	.word	0x200079e0
 801162c:	2000a5e8 	.word	0x2000a5e8
 8011630:	c2b20000 	.word	0xc2b20000
 8011634:	445e8000 	.word	0x445e8000
 8011638:	406ccccd 	.word	0x406ccccd
						{
							if(ps4.button == UP)
 801163c:	4b98      	ldr	r3, [pc, #608]	; (80118a0 <LidarSetPos+0x2218>)
 801163e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011640:	2b10      	cmp	r3, #16
 8011642:	d115      	bne.n	8011670 <LidarSetPos+0x1fe8>
							{
								while(ps4.button == UP);
 8011644:	bf00      	nop
 8011646:	4b96      	ldr	r3, [pc, #600]	; (80118a0 <LidarSetPos+0x2218>)
 8011648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801164a:	2b10      	cmp	r3, #16
 801164c:	d0fb      	beq.n	8011646 <LidarSetPos+0x1fbe>
								if(blue)
 801164e:	4b95      	ldr	r3, [pc, #596]	; (80118a4 <LidarSetPos+0x221c>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d006      	beq.n	8011664 <LidarSetPos+0x1fdc>
								{
									vesc_speed = BlueType3;
 8011656:	4b94      	ldr	r3, [pc, #592]	; (80118a8 <LidarSetPos+0x2220>)
 8011658:	4a94      	ldr	r2, [pc, #592]	; (80118ac <LidarSetPos+0x2224>)
 801165a:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 801165c:	4b94      	ldr	r3, [pc, #592]	; (80118b0 <LidarSetPos+0x2228>)
 801165e:	4a95      	ldr	r2, [pc, #596]	; (80118b4 <LidarSetPos+0x222c>)
 8011660:	601a      	str	r2, [r3, #0]
 8011662:	e005      	b.n	8011670 <LidarSetPos+0x1fe8>
								}
								else
								{
									vesc_speed = RedType3;
 8011664:	4b90      	ldr	r3, [pc, #576]	; (80118a8 <LidarSetPos+0x2220>)
 8011666:	4a94      	ldr	r2, [pc, #592]	; (80118b8 <LidarSetPos+0x2230>)
 8011668:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 801166a:	4b91      	ldr	r3, [pc, #580]	; (80118b0 <LidarSetPos+0x2228>)
 801166c:	4a93      	ldr	r2, [pc, #588]	; (80118bc <LidarSetPos+0x2234>)
 801166e:	601a      	str	r2, [r3, #0]
								}
							}
							if(ps4.button == SQUARE)
 8011670:	4b8b      	ldr	r3, [pc, #556]	; (80118a0 <LidarSetPos+0x2218>)
 8011672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011678:	d108      	bne.n	801168c <LidarSetPos+0x2004>
							{
								while(ps4.button == SQUARE);
 801167a:	bf00      	nop
 801167c:	4b88      	ldr	r3, [pc, #544]	; (80118a0 <LidarSetPos+0x2218>)
 801167e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011684:	d0fa      	beq.n	801167c <LidarSetPos+0x1ff4>
								PP_stop(&pp);
 8011686:	488e      	ldr	r0, [pc, #568]	; (80118c0 <LidarSetPos+0x2238>)
 8011688:	f7f4 fe22 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist >= lsr_center[0][1] - Offset_2 - 0.1)
 801168c:	4b8d      	ldr	r3, [pc, #564]	; (80118c4 <LidarSetPos+0x223c>)
 801168e:	69db      	ldr	r3, [r3, #28]
 8011690:	4618      	mov	r0, r3
 8011692:	f7ee ff59 	bl	8000548 <__aeabi_f2d>
 8011696:	4604      	mov	r4, r0
 8011698:	460d      	mov	r5, r1
 801169a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7ee ff51 	bl	8000548 <__aeabi_f2d>
 80116a6:	f04f 0200 	mov.w	r2, #0
 80116aa:	4b87      	ldr	r3, [pc, #540]	; (80118c8 <LidarSetPos+0x2240>)
 80116ac:	f7ee fdec 	bl	8000288 <__aeabi_dsub>
 80116b0:	4602      	mov	r2, r0
 80116b2:	460b      	mov	r3, r1
 80116b4:	4610      	mov	r0, r2
 80116b6:	4619      	mov	r1, r3
 80116b8:	a377      	add	r3, pc, #476	; (adr r3, 8011898 <LidarSetPos+0x2210>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ee fde3 	bl	8000288 <__aeabi_dsub>
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	4620      	mov	r0, r4
 80116c8:	4629      	mov	r1, r5
 80116ca:	f7ef fa1b 	bl	8000b04 <__aeabi_dcmpge>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d100      	bne.n	80116d6 <LidarSetPos+0x204e>
 80116d4:	e002      	b.n	80116dc <LidarSetPos+0x2054>
								PP_stop(&pp);
 80116d6:	487a      	ldr	r0, [pc, #488]	; (80118c0 <LidarSetPos+0x2238>)
 80116d8:	f7f4 fdfa 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 80116dc:	4b78      	ldr	r3, [pc, #480]	; (80118c0 <LidarSetPos+0x2238>)
 80116de:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80116e2:	f003 0310 	and.w	r3, r3, #16
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d1a7      	bne.n	801163c <LidarSetPos+0x1fb4>
						}
					}

					PP_start(robot_center, 1, &pp);
 80116ec:	f107 030c 	add.w	r3, r7, #12
 80116f0:	4a73      	ldr	r2, [pc, #460]	; (80118c0 <LidarSetPos+0x2238>)
 80116f2:	2101      	movs	r1, #1
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7f4 fab3 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 80116fa:	f004 f9c5 	bl	8015a88 <HAL_GetTick>
 80116fe:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8011702:	e026      	b.n	8011752 <LidarSetPos+0x20ca>
					{
						after = HAL_GetTick();
 8011704:	f004 f9c0 	bl	8015a88 <HAL_GetTick>
 8011708:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 801170c:	4b6c      	ldr	r3, [pc, #432]	; (80118c0 <LidarSetPos+0x2238>)
 801170e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011712:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80118cc <LidarSetPos+0x2244>
 8011716:	eef4 7ac7 	vcmpe.f32	s15, s14
 801171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171e:	db0a      	blt.n	8011736 <LidarSetPos+0x20ae>
 8011720:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8011724:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801172e:	d302      	bcc.n	8011736 <LidarSetPos+0x20ae>
							PP_stop(&pp);
 8011730:	4863      	ldr	r0, [pc, #396]	; (80118c0 <LidarSetPos+0x2238>)
 8011732:	f7f4 fdcd 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8011736:	4b5a      	ldr	r3, [pc, #360]	; (80118a0 <LidarSetPos+0x2218>)
 8011738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801173a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801173e:	d108      	bne.n	8011752 <LidarSetPos+0x20ca>
						{
							while(ps4.button == SQUARE);
 8011740:	bf00      	nop
 8011742:	4b57      	ldr	r3, [pc, #348]	; (80118a0 <LidarSetPos+0x2218>)
 8011744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801174a:	d0fa      	beq.n	8011742 <LidarSetPos+0x20ba>
							PP_stop(&pp);
 801174c:	485c      	ldr	r0, [pc, #368]	; (80118c0 <LidarSetPos+0x2238>)
 801174e:	f7f4 fdbf 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8011752:	4b5b      	ldr	r3, [pc, #364]	; (80118c0 <LidarSetPos+0x2238>)
 8011754:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1d0      	bne.n	8011704 <LidarSetPos+0x207c>
						}
					}

					stick_fence = 1;
 8011762:	4b5b      	ldr	r3, [pc, #364]	; (80118d0 <LidarSetPos+0x2248>)
 8011764:	2201      	movs	r2, #1
 8011766:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011768:	463b      	mov	r3, r7
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011770:	2b00      	cmp	r3, #0
 8011772:	d005      	beq.n	8011780 <LidarSetPos+0x20f8>
					{
						osDelay(300);
 8011774:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011778:	f00a febc 	bl	801c4f4 <osDelay>
						Shot();
 801177c:	f7fc ff50 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011780:	463b      	mov	r3, r7
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011788:	2b00      	cmp	r3, #0
 801178a:	f040 840d 	bne.w	8011fa8 <LidarSetPos+0x2920>
						LidarAdjust(lidar);
 801178e:	463b      	mov	r3, r7
 8011790:	6818      	ldr	r0, [r3, #0]
 8011792:	f003 fae9 	bl	8014d68 <LidarAdjust>
					break;
 8011796:	f000 bc07 	b.w	8011fa8 <LidarSetPos+0x2920>


				case CENTER_2:
					stick_fence = 0;
 801179a:	4b4d      	ldr	r3, [pc, #308]	; (80118d0 <LidarSetPos+0x2248>)
 801179c:	2200      	movs	r2, #0
 801179e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 80117a0:	4b43      	ldr	r3, [pc, #268]	; (80118b0 <LidarSetPos+0x2228>)
 80117a2:	4a4c      	ldr	r2, [pc, #304]	; (80118d4 <LidarSetPos+0x224c>)
 80117a4:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 80117a6:	463b      	mov	r3, r7
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2200      	movs	r2, #0
 80117ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 80117b0:	4b3d      	ldr	r3, [pc, #244]	; (80118a8 <LidarSetPos+0x2220>)
 80117b2:	4a49      	ldr	r2, [pc, #292]	; (80118d8 <LidarSetPos+0x2250>)
 80117b4:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 80117b6:	463b      	mov	r3, r7
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d159      	bne.n	8011876 <LidarSetPos+0x21ee>
					{
						ResetCoordinate();
 80117c2:	f7fc fbdf 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER;
 80117c6:	463b      	mov	r3, r7
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2205      	movs	r2, #5
 80117cc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_2_to_center, 1, &pp);
 80117d0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80117d4:	4a3a      	ldr	r2, [pc, #232]	; (80118c0 <LidarSetPos+0x2238>)
 80117d6:	2101      	movs	r1, #1
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f4 fa41 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 80117de:	e041      	b.n	8011864 <LidarSetPos+0x21dc>
						{
							if(ps4.button == SQUARE)
 80117e0:	4b2f      	ldr	r3, [pc, #188]	; (80118a0 <LidarSetPos+0x2218>)
 80117e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117e8:	d10d      	bne.n	8011806 <LidarSetPos+0x217e>
							{
								while(ps4.button == SQUARE);
 80117ea:	bf00      	nop
 80117ec:	4b2c      	ldr	r3, [pc, #176]	; (80118a0 <LidarSetPos+0x2218>)
 80117ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117f4:	d0fa      	beq.n	80117ec <LidarSetPos+0x2164>
								PP_stop(&pp);
 80117f6:	4832      	ldr	r0, [pc, #200]	; (80118c0 <LidarSetPos+0x2238>)
 80117f8:	f7f4 fd6a 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 80117fc:	463b      	mov	r3, r7
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2201      	movs	r2, #1
 8011802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_2;
	//							lidar->pos_counter = CENTER_2;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8011806:	2108      	movs	r1, #8
 8011808:	4834      	ldr	r0, [pc, #208]	; (80118dc <LidarSetPos+0x2254>)
 801180a:	f005 ffb9 	bl	8017780 <HAL_GPIO_ReadPin>
 801180e:	4603      	mov	r3, r0
 8011810:	2b00      	cmp	r3, #0
 8011812:	d006      	beq.n	8011822 <LidarSetPos+0x219a>
 8011814:	2110      	movs	r1, #16
 8011816:	4831      	ldr	r0, [pc, #196]	; (80118dc <LidarSetPos+0x2254>)
 8011818:	f005 ffb2 	bl	8017780 <HAL_GPIO_ReadPin>
 801181c:	4603      	mov	r3, r0
 801181e:	2b00      	cmp	r3, #0
 8011820:	d109      	bne.n	8011836 <LidarSetPos+0x21ae>
							{
								pp.target_y[0] = pp.real_y;
 8011822:	4b27      	ldr	r3, [pc, #156]	; (80118c0 <LidarSetPos+0x2238>)
 8011824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011826:	4a26      	ldr	r2, [pc, #152]	; (80118c0 <LidarSetPos+0x2238>)
 8011828:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801182c:	4b24      	ldr	r3, [pc, #144]	; (80118c0 <LidarSetPos+0x2238>)
 801182e:	f04f 0200 	mov.w	r2, #0
 8011832:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_2_to_center[0][1])
 8011836:	4b22      	ldr	r3, [pc, #136]	; (80118c0 <LidarSetPos+0x2238>)
 8011838:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801183c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8011840:	edd3 7a01 	vldr	s15, [r3, #4]
 8011844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801184c:	da00      	bge.n	8011850 <LidarSetPos+0x21c8>
 801184e:	e009      	b.n	8011864 <LidarSetPos+0x21dc>
							{
								pp.target_y[0] = pp.real_y;
 8011850:	4b1b      	ldr	r3, [pc, #108]	; (80118c0 <LidarSetPos+0x2238>)
 8011852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011854:	4a1a      	ldr	r2, [pc, #104]	; (80118c0 <LidarSetPos+0x2238>)
 8011856:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801185a:	4b19      	ldr	r3, [pc, #100]	; (80118c0 <LidarSetPos+0x2238>)
 801185c:	f04f 0200 	mov.w	r2, #0
 8011860:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8011864:	4b16      	ldr	r3, [pc, #88]	; (80118c0 <LidarSetPos+0x2238>)
 8011866:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801186a:	f003 0301 	and.w	r3, r3, #1
 801186e:	b2db      	uxtb	r3, r3
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1b5      	bne.n	80117e0 <LidarSetPos+0x2158>
 8011874:	e08b      	b.n	801198e <LidarSetPos+0x2306>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8011876:	463b      	mov	r3, r7
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2205      	movs	r2, #5
 801187c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center, 1, &pp, 0, 0);
 8011880:	f207 40a4 	addw	r0, r7, #1188	; 0x4a4
 8011884:	2300      	movs	r3, #0
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	2300      	movs	r3, #0
 801188a:	4a0d      	ldr	r2, [pc, #52]	; (80118c0 <LidarSetPos+0x2238>)
 801188c:	2101      	movs	r1, #1
 801188e:	f7f4 fbad 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8011892:	e074      	b.n	801197e <LidarSetPos+0x22f6>
 8011894:	f3af 8000 	nop.w
 8011898:	9999999a 	.word	0x9999999a
 801189c:	3fb99999 	.word	0x3fb99999
 80118a0:	2000a244 	.word	0x2000a244
 80118a4:	20006a4c 	.word	0x20006a4c
 80118a8:	200065c0 	.word	0x200065c0
 80118ac:	4151999a 	.word	0x4151999a
 80118b0:	2000749c 	.word	0x2000749c
 80118b4:	44f78000 	.word	0x44f78000
 80118b8:	41540000 	.word	0x41540000
 80118bc:	44fbe000 	.word	0x44fbe000
 80118c0:	20006d4c 	.word	0x20006d4c
 80118c4:	20007730 	.word	0x20007730
 80118c8:	3fe80000 	.word	0x3fe80000
 80118cc:	c2b60000 	.word	0xc2b60000
 80118d0:	200073d8 	.word	0x200073d8
 80118d4:	445e8000 	.word	0x445e8000
 80118d8:	406ccccd 	.word	0x406ccccd
 80118dc:	40020c00 	.word	0x40020c00
						{
							if(ps4.button == SQUARE)
 80118e0:	4ba3      	ldr	r3, [pc, #652]	; (8011b70 <LidarSetPos+0x24e8>)
 80118e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118e8:	d108      	bne.n	80118fc <LidarSetPos+0x2274>
							{
								while(ps4.button == SQUARE);
 80118ea:	bf00      	nop
 80118ec:	4ba0      	ldr	r3, [pc, #640]	; (8011b70 <LidarSetPos+0x24e8>)
 80118ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118f4:	d0fa      	beq.n	80118ec <LidarSetPos+0x2264>
								PP_stop(&pp);
 80118f6:	489f      	ldr	r0, [pc, #636]	; (8011b74 <LidarSetPos+0x24ec>)
 80118f8:	f7f4 fcea 	bl	80062d0 <PP_stop>
							}

							if(lsrL.dist >= lsr_center[0][1] - Offset + 0.15)
 80118fc:	4b9e      	ldr	r3, [pc, #632]	; (8011b78 <LidarSetPos+0x24f0>)
 80118fe:	69db      	ldr	r3, [r3, #28]
 8011900:	4618      	mov	r0, r3
 8011902:	f7ee fe21 	bl	8000548 <__aeabi_f2d>
 8011906:	4604      	mov	r4, r0
 8011908:	460d      	mov	r5, r1
 801190a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	4618      	mov	r0, r3
 8011912:	f7ee fe19 	bl	8000548 <__aeabi_f2d>
 8011916:	f04f 0200 	mov.w	r2, #0
 801191a:	4b98      	ldr	r3, [pc, #608]	; (8011b7c <LidarSetPos+0x24f4>)
 801191c:	f7ee fcb4 	bl	8000288 <__aeabi_dsub>
 8011920:	4602      	mov	r2, r0
 8011922:	460b      	mov	r3, r1
 8011924:	4610      	mov	r0, r2
 8011926:	4619      	mov	r1, r3
 8011928:	a38f      	add	r3, pc, #572	; (adr r3, 8011b68 <LidarSetPos+0x24e0>)
 801192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192e:	f7ee fcad 	bl	800028c <__adddf3>
 8011932:	4602      	mov	r2, r0
 8011934:	460b      	mov	r3, r1
 8011936:	4620      	mov	r0, r4
 8011938:	4629      	mov	r1, r5
 801193a:	f7ef f8e3 	bl	8000b04 <__aeabi_dcmpge>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <LidarSetPos+0x22c2>
								PP_stop(&pp);
 8011944:	488b      	ldr	r0, [pc, #556]	; (8011b74 <LidarSetPos+0x24ec>)
 8011946:	f7f4 fcc3 	bl	80062d0 <PP_stop>

							if(ps4.button == UP)
 801194a:	4b89      	ldr	r3, [pc, #548]	; (8011b70 <LidarSetPos+0x24e8>)
 801194c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801194e:	2b10      	cmp	r3, #16
 8011950:	d115      	bne.n	801197e <LidarSetPos+0x22f6>
							{
								while(ps4.button == UP);
 8011952:	bf00      	nop
 8011954:	4b86      	ldr	r3, [pc, #536]	; (8011b70 <LidarSetPos+0x24e8>)
 8011956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011958:	2b10      	cmp	r3, #16
 801195a:	d0fb      	beq.n	8011954 <LidarSetPos+0x22cc>
								if(blue)
 801195c:	4b88      	ldr	r3, [pc, #544]	; (8011b80 <LidarSetPos+0x24f8>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d006      	beq.n	8011972 <LidarSetPos+0x22ea>
								{
									vesc_speed = BlueType3;
 8011964:	4b87      	ldr	r3, [pc, #540]	; (8011b84 <LidarSetPos+0x24fc>)
 8011966:	4a88      	ldr	r2, [pc, #544]	; (8011b88 <LidarSetPos+0x2500>)
 8011968:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 801196a:	4b88      	ldr	r3, [pc, #544]	; (8011b8c <LidarSetPos+0x2504>)
 801196c:	4a88      	ldr	r2, [pc, #544]	; (8011b90 <LidarSetPos+0x2508>)
 801196e:	601a      	str	r2, [r3, #0]
 8011970:	e005      	b.n	801197e <LidarSetPos+0x22f6>
								}
								else
								{
									vesc_speed = RedType3;
 8011972:	4b84      	ldr	r3, [pc, #528]	; (8011b84 <LidarSetPos+0x24fc>)
 8011974:	4a87      	ldr	r2, [pc, #540]	; (8011b94 <LidarSetPos+0x250c>)
 8011976:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011978:	4b84      	ldr	r3, [pc, #528]	; (8011b8c <LidarSetPos+0x2504>)
 801197a:	4a87      	ldr	r2, [pc, #540]	; (8011b98 <LidarSetPos+0x2510>)
 801197c:	601a      	str	r2, [r3, #0]
						while(pp.lsr_start)
 801197e:	4b7d      	ldr	r3, [pc, #500]	; (8011b74 <LidarSetPos+0x24ec>)
 8011980:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011984:	f003 0310 	and.w	r3, r3, #16
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1a8      	bne.n	80118e0 <LidarSetPos+0x2258>
								}
							}
						}
					}

					PP_start(robot_center, 1, &pp);
 801198e:	f107 030c 	add.w	r3, r7, #12
 8011992:	4a78      	ldr	r2, [pc, #480]	; (8011b74 <LidarSetPos+0x24ec>)
 8011994:	2101      	movs	r1, #1
 8011996:	4618      	mov	r0, r3
 8011998:	f7f4 f962 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 801199c:	f004 f874 	bl	8015a88 <HAL_GetTick>
 80119a0:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 80119a4:	e026      	b.n	80119f4 <LidarSetPos+0x236c>
					{
						after = HAL_GetTick();
 80119a6:	f004 f86f 	bl	8015a88 <HAL_GetTick>
 80119aa:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 80119ae:	4b71      	ldr	r3, [pc, #452]	; (8011b74 <LidarSetPos+0x24ec>)
 80119b0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80119b4:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8011b9c <LidarSetPos+0x2514>
 80119b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80119bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c0:	db0a      	blt.n	80119d8 <LidarSetPos+0x2350>
 80119c2:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80119c6:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80119d0:	d302      	bcc.n	80119d8 <LidarSetPos+0x2350>
							PP_stop(&pp);
 80119d2:	4868      	ldr	r0, [pc, #416]	; (8011b74 <LidarSetPos+0x24ec>)
 80119d4:	f7f4 fc7c 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 80119d8:	4b65      	ldr	r3, [pc, #404]	; (8011b70 <LidarSetPos+0x24e8>)
 80119da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119e0:	d108      	bne.n	80119f4 <LidarSetPos+0x236c>
						{
							while(ps4.button == SQUARE);
 80119e2:	bf00      	nop
 80119e4:	4b62      	ldr	r3, [pc, #392]	; (8011b70 <LidarSetPos+0x24e8>)
 80119e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119ec:	d0fa      	beq.n	80119e4 <LidarSetPos+0x235c>
							PP_stop(&pp);
 80119ee:	4861      	ldr	r0, [pc, #388]	; (8011b74 <LidarSetPos+0x24ec>)
 80119f0:	f7f4 fc6e 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80119f4:	4b5f      	ldr	r3, [pc, #380]	; (8011b74 <LidarSetPos+0x24ec>)
 80119f6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80119fa:	f003 0301 	and.w	r3, r3, #1
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1d0      	bne.n	80119a6 <LidarSetPos+0x231e>
						}
					}

					stick_fence = 1;
 8011a04:	4b66      	ldr	r3, [pc, #408]	; (8011ba0 <LidarSetPos+0x2518>)
 8011a06:	2201      	movs	r2, #1
 8011a08:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011a0a:	463b      	mov	r3, r7
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d005      	beq.n	8011a22 <LidarSetPos+0x239a>
					{
						osDelay(300);
 8011a16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011a1a:	f00a fd6b 	bl	801c4f4 <osDelay>
						Shot();
 8011a1e:	f7fc fdff 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011a22:	463b      	mov	r3, r7
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f040 82bf 	bne.w	8011fae <LidarSetPos+0x2926>
						LidarAdjust(lidar);
 8011a30:	463b      	mov	r3, r7
 8011a32:	6818      	ldr	r0, [r3, #0]
 8011a34:	f003 f998 	bl	8014d68 <LidarAdjust>
					break;
 8011a38:	e2b9      	b.n	8011fae <LidarSetPos+0x2926>

				case CENTER_3:
					stick_fence = 0;
 8011a3a:	4b59      	ldr	r3, [pc, #356]	; (8011ba0 <LidarSetPos+0x2518>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8011a40:	4b52      	ldr	r3, [pc, #328]	; (8011b8c <LidarSetPos+0x2504>)
 8011a42:	4a58      	ldr	r2, [pc, #352]	; (8011ba4 <LidarSetPos+0x251c>)
 8011a44:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011a46:	463b      	mov	r3, r7
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 8011a50:	4b4c      	ldr	r3, [pc, #304]	; (8011b84 <LidarSetPos+0x24fc>)
 8011a52:	4a55      	ldr	r2, [pc, #340]	; (8011ba8 <LidarSetPos+0x2520>)
 8011a54:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8011a56:	463b      	mov	r3, r7
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d172      	bne.n	8011b48 <LidarSetPos+0x24c0>
					{
						ResetCoordinate();
 8011a62:	f7fc fa8f 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER;
 8011a66:	463b      	mov	r3, r7
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2205      	movs	r2, #5
 8011a6c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_3_to_center, 1, &pp);
 8011a70:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8011a74:	4a3f      	ldr	r2, [pc, #252]	; (8011b74 <LidarSetPos+0x24ec>)
 8011a76:	2101      	movs	r1, #1
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7f4 f8f1 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8011a7e:	e05a      	b.n	8011b36 <LidarSetPos+0x24ae>
						{
							if(ps4.button == SQUARE)
 8011a80:	4b3b      	ldr	r3, [pc, #236]	; (8011b70 <LidarSetPos+0x24e8>)
 8011a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a88:	d10d      	bne.n	8011aa6 <LidarSetPos+0x241e>
							{
								while(ps4.button == SQUARE);
 8011a8a:	bf00      	nop
 8011a8c:	4b38      	ldr	r3, [pc, #224]	; (8011b70 <LidarSetPos+0x24e8>)
 8011a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a94:	d0fa      	beq.n	8011a8c <LidarSetPos+0x2404>
								PP_stop(&pp);
 8011a96:	4837      	ldr	r0, [pc, #220]	; (8011b74 <LidarSetPos+0x24ec>)
 8011a98:	f7f4 fc1a 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 8011a9c:	463b      	mov	r3, r7
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_3;
	//							lidar->pos_counter = CENTER_3;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8011aa6:	2108      	movs	r1, #8
 8011aa8:	4840      	ldr	r0, [pc, #256]	; (8011bac <LidarSetPos+0x2524>)
 8011aaa:	f005 fe69 	bl	8017780 <HAL_GPIO_ReadPin>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d006      	beq.n	8011ac2 <LidarSetPos+0x243a>
 8011ab4:	2110      	movs	r1, #16
 8011ab6:	483d      	ldr	r0, [pc, #244]	; (8011bac <LidarSetPos+0x2524>)
 8011ab8:	f005 fe62 	bl	8017780 <HAL_GPIO_ReadPin>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d109      	bne.n	8011ad6 <LidarSetPos+0x244e>
							{
								pp.target_y[0] = pp.real_y;
 8011ac2:	4b2c      	ldr	r3, [pc, #176]	; (8011b74 <LidarSetPos+0x24ec>)
 8011ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ac6:	4a2b      	ldr	r2, [pc, #172]	; (8011b74 <LidarSetPos+0x24ec>)
 8011ac8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011acc:	4b29      	ldr	r3, [pc, #164]	; (8011b74 <LidarSetPos+0x24ec>)
 8011ace:	f04f 0200 	mov.w	r2, #0
 8011ad2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_3_to_center[0][1])
 8011ad6:	4b27      	ldr	r3, [pc, #156]	; (8011b74 <LidarSetPos+0x24ec>)
 8011ad8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011adc:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8011ae0:	edd3 7a01 	vldr	s15, [r3, #4]
 8011ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aec:	d809      	bhi.n	8011b02 <LidarSetPos+0x247a>
							{
								pp.target_y[0] = pp.real_y;
 8011aee:	4b21      	ldr	r3, [pc, #132]	; (8011b74 <LidarSetPos+0x24ec>)
 8011af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011af2:	4a20      	ldr	r2, [pc, #128]	; (8011b74 <LidarSetPos+0x24ec>)
 8011af4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011af8:	4b1e      	ldr	r3, [pc, #120]	; (8011b74 <LidarSetPos+0x24ec>)
 8011afa:	f04f 0200 	mov.w	r2, #0
 8011afe:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == UP)
 8011b02:	4b1b      	ldr	r3, [pc, #108]	; (8011b70 <LidarSetPos+0x24e8>)
 8011b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b06:	2b10      	cmp	r3, #16
 8011b08:	d115      	bne.n	8011b36 <LidarSetPos+0x24ae>
							{
								while(ps4.button == UP);
 8011b0a:	bf00      	nop
 8011b0c:	4b18      	ldr	r3, [pc, #96]	; (8011b70 <LidarSetPos+0x24e8>)
 8011b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b10:	2b10      	cmp	r3, #16
 8011b12:	d0fb      	beq.n	8011b0c <LidarSetPos+0x2484>
								if(blue)
 8011b14:	4b1a      	ldr	r3, [pc, #104]	; (8011b80 <LidarSetPos+0x24f8>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d006      	beq.n	8011b2a <LidarSetPos+0x24a2>
								{
									vesc_speed = BlueType3;
 8011b1c:	4b19      	ldr	r3, [pc, #100]	; (8011b84 <LidarSetPos+0x24fc>)
 8011b1e:	4a1a      	ldr	r2, [pc, #104]	; (8011b88 <LidarSetPos+0x2500>)
 8011b20:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8011b22:	4b1a      	ldr	r3, [pc, #104]	; (8011b8c <LidarSetPos+0x2504>)
 8011b24:	4a1a      	ldr	r2, [pc, #104]	; (8011b90 <LidarSetPos+0x2508>)
 8011b26:	601a      	str	r2, [r3, #0]
 8011b28:	e005      	b.n	8011b36 <LidarSetPos+0x24ae>
								}
								else
								{
									vesc_speed = RedType3;
 8011b2a:	4b16      	ldr	r3, [pc, #88]	; (8011b84 <LidarSetPos+0x24fc>)
 8011b2c:	4a19      	ldr	r2, [pc, #100]	; (8011b94 <LidarSetPos+0x250c>)
 8011b2e:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011b30:	4b16      	ldr	r3, [pc, #88]	; (8011b8c <LidarSetPos+0x2504>)
 8011b32:	4a19      	ldr	r2, [pc, #100]	; (8011b98 <LidarSetPos+0x2510>)
 8011b34:	601a      	str	r2, [r3, #0]
						while(pp.pp_start)
 8011b36:	4b0f      	ldr	r3, [pc, #60]	; (8011b74 <LidarSetPos+0x24ec>)
 8011b38:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011b3c:	f003 0301 	and.w	r3, r3, #1
 8011b40:	b2db      	uxtb	r3, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d19c      	bne.n	8011a80 <LidarSetPos+0x23f8>
 8011b46:	e08a      	b.n	8011c5e <LidarSetPos+0x25d6>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8011b48:	463b      	mov	r3, r7
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2205      	movs	r2, #5
 8011b4e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_right, 1, &pp, 0, 1);
 8011b52:	f507 6091 	add.w	r0, r7, #1160	; 0x488
 8011b56:	2301      	movs	r3, #1
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	4a05      	ldr	r2, [pc, #20]	; (8011b74 <LidarSetPos+0x24ec>)
 8011b5e:	2101      	movs	r1, #1
 8011b60:	f7f4 fa44 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8011b64:	e073      	b.n	8011c4e <LidarSetPos+0x25c6>
 8011b66:	bf00      	nop
 8011b68:	33333333 	.word	0x33333333
 8011b6c:	3fc33333 	.word	0x3fc33333
 8011b70:	2000a244 	.word	0x2000a244
 8011b74:	20006d4c 	.word	0x20006d4c
 8011b78:	20007730 	.word	0x20007730
 8011b7c:	3fe00000 	.word	0x3fe00000
 8011b80:	20006a4c 	.word	0x20006a4c
 8011b84:	200065c0 	.word	0x200065c0
 8011b88:	4151999a 	.word	0x4151999a
 8011b8c:	2000749c 	.word	0x2000749c
 8011b90:	44f78000 	.word	0x44f78000
 8011b94:	41540000 	.word	0x41540000
 8011b98:	44fbe000 	.word	0x44fbe000
 8011b9c:	c2b60000 	.word	0xc2b60000
 8011ba0:	200073d8 	.word	0x200073d8
 8011ba4:	445e8000 	.word	0x445e8000
 8011ba8:	406ccccd 	.word	0x406ccccd
 8011bac:	40020c00 	.word	0x40020c00
						{
							if(ps4.button == SQUARE)
 8011bb0:	4b94      	ldr	r3, [pc, #592]	; (8011e04 <LidarSetPos+0x277c>)
 8011bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bb8:	d108      	bne.n	8011bcc <LidarSetPos+0x2544>
							{
								while(ps4.button == SQUARE);
 8011bba:	bf00      	nop
 8011bbc:	4b91      	ldr	r3, [pc, #580]	; (8011e04 <LidarSetPos+0x277c>)
 8011bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bc4:	d0fa      	beq.n	8011bbc <LidarSetPos+0x2534>
								PP_stop(&pp);
 8011bc6:	4890      	ldr	r0, [pc, #576]	; (8011e08 <LidarSetPos+0x2780>)
 8011bc8:	f7f4 fb82 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist >= lsr_center_right[0][1] - Offset + 0.25)
 8011bcc:	4b8f      	ldr	r3, [pc, #572]	; (8011e0c <LidarSetPos+0x2784>)
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7ee fcb9 	bl	8000548 <__aeabi_f2d>
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	460d      	mov	r5, r1
 8011bda:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7ee fcb1 	bl	8000548 <__aeabi_f2d>
 8011be6:	f04f 0200 	mov.w	r2, #0
 8011bea:	4b89      	ldr	r3, [pc, #548]	; (8011e10 <LidarSetPos+0x2788>)
 8011bec:	f7ee fb4c 	bl	8000288 <__aeabi_dsub>
 8011bf0:	4602      	mov	r2, r0
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	4610      	mov	r0, r2
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	f04f 0200 	mov.w	r2, #0
 8011bfc:	4b85      	ldr	r3, [pc, #532]	; (8011e14 <LidarSetPos+0x278c>)
 8011bfe:	f7ee fb45 	bl	800028c <__adddf3>
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4620      	mov	r0, r4
 8011c08:	4629      	mov	r1, r5
 8011c0a:	f7ee ff7b 	bl	8000b04 <__aeabi_dcmpge>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d002      	beq.n	8011c1a <LidarSetPos+0x2592>
								PP_stop(&pp);
 8011c14:	487c      	ldr	r0, [pc, #496]	; (8011e08 <LidarSetPos+0x2780>)
 8011c16:	f7f4 fb5b 	bl	80062d0 <PP_stop>

							if(ps4.button == UP)
 8011c1a:	4b7a      	ldr	r3, [pc, #488]	; (8011e04 <LidarSetPos+0x277c>)
 8011c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c1e:	2b10      	cmp	r3, #16
 8011c20:	d115      	bne.n	8011c4e <LidarSetPos+0x25c6>
							{
								while(ps4.button == UP);
 8011c22:	bf00      	nop
 8011c24:	4b77      	ldr	r3, [pc, #476]	; (8011e04 <LidarSetPos+0x277c>)
 8011c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c28:	2b10      	cmp	r3, #16
 8011c2a:	d0fb      	beq.n	8011c24 <LidarSetPos+0x259c>
								if(blue)
 8011c2c:	4b7a      	ldr	r3, [pc, #488]	; (8011e18 <LidarSetPos+0x2790>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d006      	beq.n	8011c42 <LidarSetPos+0x25ba>
								{
									vesc_speed = BlueType3;
 8011c34:	4b79      	ldr	r3, [pc, #484]	; (8011e1c <LidarSetPos+0x2794>)
 8011c36:	4a7a      	ldr	r2, [pc, #488]	; (8011e20 <LidarSetPos+0x2798>)
 8011c38:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8011c3a:	4b7a      	ldr	r3, [pc, #488]	; (8011e24 <LidarSetPos+0x279c>)
 8011c3c:	4a7a      	ldr	r2, [pc, #488]	; (8011e28 <LidarSetPos+0x27a0>)
 8011c3e:	601a      	str	r2, [r3, #0]
 8011c40:	e005      	b.n	8011c4e <LidarSetPos+0x25c6>
								}
								else
								{
									vesc_speed = RedType3;
 8011c42:	4b76      	ldr	r3, [pc, #472]	; (8011e1c <LidarSetPos+0x2794>)
 8011c44:	4a79      	ldr	r2, [pc, #484]	; (8011e2c <LidarSetPos+0x27a4>)
 8011c46:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011c48:	4b76      	ldr	r3, [pc, #472]	; (8011e24 <LidarSetPos+0x279c>)
 8011c4a:	4a79      	ldr	r2, [pc, #484]	; (8011e30 <LidarSetPos+0x27a8>)
 8011c4c:	601a      	str	r2, [r3, #0]
						while(pp.lsr_start)
 8011c4e:	4b6e      	ldr	r3, [pc, #440]	; (8011e08 <LidarSetPos+0x2780>)
 8011c50:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011c54:	f003 0310 	and.w	r3, r3, #16
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d1a8      	bne.n	8011bb0 <LidarSetPos+0x2528>
								}
							}
						}
					}

					PP_start(robot_center, 1, &pp);
 8011c5e:	f107 030c 	add.w	r3, r7, #12
 8011c62:	4a69      	ldr	r2, [pc, #420]	; (8011e08 <LidarSetPos+0x2780>)
 8011c64:	2101      	movs	r1, #1
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f3 fffa 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8011c6c:	f003 ff0c 	bl	8015a88 <HAL_GetTick>
 8011c70:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8011c74:	e026      	b.n	8011cc4 <LidarSetPos+0x263c>
					{
						after = HAL_GetTick();
 8011c76:	f003 ff07 	bl	8015a88 <HAL_GetTick>
 8011c7a:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 8011c7e:	4b62      	ldr	r3, [pc, #392]	; (8011e08 <LidarSetPos+0x2780>)
 8011c80:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011c84:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8011e34 <LidarSetPos+0x27ac>
 8011c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c90:	d80a      	bhi.n	8011ca8 <LidarSetPos+0x2620>
 8011c92:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8011c96:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8011c9a:	1ad3      	subs	r3, r2, r3
 8011c9c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011ca0:	d302      	bcc.n	8011ca8 <LidarSetPos+0x2620>
							PP_stop(&pp);
 8011ca2:	4859      	ldr	r0, [pc, #356]	; (8011e08 <LidarSetPos+0x2780>)
 8011ca4:	f7f4 fb14 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8011ca8:	4b56      	ldr	r3, [pc, #344]	; (8011e04 <LidarSetPos+0x277c>)
 8011caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011cb0:	d108      	bne.n	8011cc4 <LidarSetPos+0x263c>
						{
							while(ps4.button == SQUARE);
 8011cb2:	bf00      	nop
 8011cb4:	4b53      	ldr	r3, [pc, #332]	; (8011e04 <LidarSetPos+0x277c>)
 8011cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011cbc:	d0fa      	beq.n	8011cb4 <LidarSetPos+0x262c>
							PP_stop(&pp);
 8011cbe:	4852      	ldr	r0, [pc, #328]	; (8011e08 <LidarSetPos+0x2780>)
 8011cc0:	f7f4 fb06 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8011cc4:	4b50      	ldr	r3, [pc, #320]	; (8011e08 <LidarSetPos+0x2780>)
 8011cc6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011cca:	f003 0301 	and.w	r3, r3, #1
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1d0      	bne.n	8011c76 <LidarSetPos+0x25ee>
						}
					}

					stick_fence = 1;
 8011cd4:	4b58      	ldr	r3, [pc, #352]	; (8011e38 <LidarSetPos+0x27b0>)
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011cda:	463b      	mov	r3, r7
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d005      	beq.n	8011cf2 <LidarSetPos+0x266a>
					{
						osDelay(300);
 8011ce6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011cea:	f00a fc03 	bl	801c4f4 <osDelay>
						Shot();
 8011cee:	f7fc fc97 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011cf2:	463b      	mov	r3, r7
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	f040 815a 	bne.w	8011fb4 <LidarSetPos+0x292c>
						LidarAdjust(lidar);
 8011d00:	463b      	mov	r3, r7
 8011d02:	6818      	ldr	r0, [r3, #0]
 8011d04:	f003 f830 	bl	8014d68 <LidarAdjust>
					break;
 8011d08:	e154      	b.n	8011fb4 <LidarSetPos+0x292c>

				case CENTER_4:
					stick_fence = 0;
 8011d0a:	4b4b      	ldr	r3, [pc, #300]	; (8011e38 <LidarSetPos+0x27b0>)
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8011d10:	4b44      	ldr	r3, [pc, #272]	; (8011e24 <LidarSetPos+0x279c>)
 8011d12:	4a4a      	ldr	r2, [pc, #296]	; (8011e3c <LidarSetPos+0x27b4>)
 8011d14:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8011d16:	4b41      	ldr	r3, [pc, #260]	; (8011e1c <LidarSetPos+0x2794>)
 8011d18:	4a49      	ldr	r2, [pc, #292]	; (8011e40 <LidarSetPos+0x27b8>)
 8011d1a:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011d1c:	463b      	mov	r3, r7
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

					if(!lidar->laser)
 8011d26:	463b      	mov	r3, r7
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d158      	bne.n	8011de4 <LidarSetPos+0x275c>
					{
						ResetCoordinate();
 8011d32:	f7fc f927 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER;
 8011d36:	463b      	mov	r3, r7
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	2205      	movs	r2, #5
 8011d3c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_4_to_center, 1, &pp);
 8011d40:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8011d44:	4a30      	ldr	r2, [pc, #192]	; (8011e08 <LidarSetPos+0x2780>)
 8011d46:	2101      	movs	r1, #1
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7f3 ff89 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8011d4e:	e040      	b.n	8011dd2 <LidarSetPos+0x274a>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 8011d50:	2108      	movs	r1, #8
 8011d52:	483c      	ldr	r0, [pc, #240]	; (8011e44 <LidarSetPos+0x27bc>)
 8011d54:	f005 fd14 	bl	8017780 <HAL_GPIO_ReadPin>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <LidarSetPos+0x26e4>
 8011d5e:	2110      	movs	r1, #16
 8011d60:	4838      	ldr	r0, [pc, #224]	; (8011e44 <LidarSetPos+0x27bc>)
 8011d62:	f005 fd0d 	bl	8017780 <HAL_GPIO_ReadPin>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d109      	bne.n	8011d80 <LidarSetPos+0x26f8>
							{
								pp.target_y[0] = pp.real_y;
 8011d6c:	4b26      	ldr	r3, [pc, #152]	; (8011e08 <LidarSetPos+0x2780>)
 8011d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d70:	4a25      	ldr	r2, [pc, #148]	; (8011e08 <LidarSetPos+0x2780>)
 8011d72:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011d76:	4b24      	ldr	r3, [pc, #144]	; (8011e08 <LidarSetPos+0x2780>)
 8011d78:	f04f 0200 	mov.w	r2, #0
 8011d7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_4_to_center[0][1])
 8011d80:	4b21      	ldr	r3, [pc, #132]	; (8011e08 <LidarSetPos+0x2780>)
 8011d82:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011d86:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8011d8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8011d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d96:	d809      	bhi.n	8011dac <LidarSetPos+0x2724>
							{
								pp.target_y[0] = pp.real_y;
 8011d98:	4b1b      	ldr	r3, [pc, #108]	; (8011e08 <LidarSetPos+0x2780>)
 8011d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d9c:	4a1a      	ldr	r2, [pc, #104]	; (8011e08 <LidarSetPos+0x2780>)
 8011d9e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011da2:	4b19      	ldr	r3, [pc, #100]	; (8011e08 <LidarSetPos+0x2780>)
 8011da4:	f04f 0200 	mov.w	r2, #0
 8011da8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 8011dac:	4b15      	ldr	r3, [pc, #84]	; (8011e04 <LidarSetPos+0x277c>)
 8011dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011db4:	d10d      	bne.n	8011dd2 <LidarSetPos+0x274a>
							{
								while(ps4.button == SQUARE);
 8011db6:	bf00      	nop
 8011db8:	4b12      	ldr	r3, [pc, #72]	; (8011e04 <LidarSetPos+0x277c>)
 8011dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011dc0:	d0fa      	beq.n	8011db8 <LidarSetPos+0x2730>
								PP_stop(&pp);
 8011dc2:	4811      	ldr	r0, [pc, #68]	; (8011e08 <LidarSetPos+0x2780>)
 8011dc4:	f7f4 fa84 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 8011dc8:	463b      	mov	r3, r7
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2201      	movs	r2, #1
 8011dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 8011dd2:	4b0d      	ldr	r3, [pc, #52]	; (8011e08 <LidarSetPos+0x2780>)
 8011dd4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d1b6      	bne.n	8011d50 <LidarSetPos+0x26c8>
 8011de2:	e089      	b.n	8011ef8 <LidarSetPos+0x2870>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8011de4:	463b      	mov	r3, r7
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2205      	movs	r2, #5
 8011dea:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_right, 1, &pp, 0, 1);
 8011dee:	f507 6091 	add.w	r0, r7, #1160	; 0x488
 8011df2:	2301      	movs	r3, #1
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	2300      	movs	r3, #0
 8011df8:	4a03      	ldr	r2, [pc, #12]	; (8011e08 <LidarSetPos+0x2780>)
 8011dfa:	2101      	movs	r1, #1
 8011dfc:	f7f4 f8f6 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8011e00:	e072      	b.n	8011ee8 <LidarSetPos+0x2860>
 8011e02:	bf00      	nop
 8011e04:	2000a244 	.word	0x2000a244
 8011e08:	20006d4c 	.word	0x20006d4c
 8011e0c:	20009600 	.word	0x20009600
 8011e10:	3fe00000 	.word	0x3fe00000
 8011e14:	3fd00000 	.word	0x3fd00000
 8011e18:	20006a4c 	.word	0x20006a4c
 8011e1c:	200065c0 	.word	0x200065c0
 8011e20:	4151999a 	.word	0x4151999a
 8011e24:	2000749c 	.word	0x2000749c
 8011e28:	44f78000 	.word	0x44f78000
 8011e2c:	41540000 	.word	0x41540000
 8011e30:	44fbe000 	.word	0x44fbe000
 8011e34:	c2b20000 	.word	0xc2b20000
 8011e38:	200073d8 	.word	0x200073d8
 8011e3c:	445e8000 	.word	0x445e8000
 8011e40:	406ccccd 	.word	0x406ccccd
 8011e44:	40020c00 	.word	0x40020c00
						{
							if(ps4.button == SQUARE)
 8011e48:	4b9e      	ldr	r3, [pc, #632]	; (80120c4 <LidarSetPos+0x2a3c>)
 8011e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e50:	d108      	bne.n	8011e64 <LidarSetPos+0x27dc>
							{
								while(ps4.button == SQUARE);
 8011e52:	bf00      	nop
 8011e54:	4b9b      	ldr	r3, [pc, #620]	; (80120c4 <LidarSetPos+0x2a3c>)
 8011e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e5c:	d0fa      	beq.n	8011e54 <LidarSetPos+0x27cc>
								PP_stop(&pp);
 8011e5e:	489a      	ldr	r0, [pc, #616]	; (80120c8 <LidarSetPos+0x2a40>)
 8011e60:	f7f4 fa36 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist >= lsr_center_right[0][1] - Offset_2)
 8011e64:	4b99      	ldr	r3, [pc, #612]	; (80120cc <LidarSetPos+0x2a44>)
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7ee fb6d 	bl	8000548 <__aeabi_f2d>
 8011e6e:	4604      	mov	r4, r0
 8011e70:	460d      	mov	r5, r1
 8011e72:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7ee fb65 	bl	8000548 <__aeabi_f2d>
 8011e7e:	f04f 0200 	mov.w	r2, #0
 8011e82:	4b93      	ldr	r3, [pc, #588]	; (80120d0 <LidarSetPos+0x2a48>)
 8011e84:	f7ee fa00 	bl	8000288 <__aeabi_dsub>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	4629      	mov	r1, r5
 8011e90:	f7ee fe38 	bl	8000b04 <__aeabi_dcmpge>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00c      	beq.n	8011eb4 <LidarSetPos+0x282c>
							{
								pp.target_y[0] = pp.real_y;
 8011e9a:	4b8b      	ldr	r3, [pc, #556]	; (80120c8 <LidarSetPos+0x2a40>)
 8011e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e9e:	4a8a      	ldr	r2, [pc, #552]	; (80120c8 <LidarSetPos+0x2a40>)
 8011ea0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011ea4:	4b88      	ldr	r3, [pc, #544]	; (80120c8 <LidarSetPos+0x2a40>)
 8011ea6:	f04f 0200 	mov.w	r2, #0
 8011eaa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
								PP_stop(&pp);
 8011eae:	4886      	ldr	r0, [pc, #536]	; (80120c8 <LidarSetPos+0x2a40>)
 8011eb0:	f7f4 fa0e 	bl	80062d0 <PP_stop>
							}

							if(ps4.button == UP)
 8011eb4:	4b83      	ldr	r3, [pc, #524]	; (80120c4 <LidarSetPos+0x2a3c>)
 8011eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eb8:	2b10      	cmp	r3, #16
 8011eba:	d115      	bne.n	8011ee8 <LidarSetPos+0x2860>
							{
								while(ps4.button == UP);
 8011ebc:	bf00      	nop
 8011ebe:	4b81      	ldr	r3, [pc, #516]	; (80120c4 <LidarSetPos+0x2a3c>)
 8011ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ec2:	2b10      	cmp	r3, #16
 8011ec4:	d0fb      	beq.n	8011ebe <LidarSetPos+0x2836>
								if(blue)
 8011ec6:	4b83      	ldr	r3, [pc, #524]	; (80120d4 <LidarSetPos+0x2a4c>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d006      	beq.n	8011edc <LidarSetPos+0x2854>
								{
									vesc_speed = BlueType3;
 8011ece:	4b82      	ldr	r3, [pc, #520]	; (80120d8 <LidarSetPos+0x2a50>)
 8011ed0:	4a82      	ldr	r2, [pc, #520]	; (80120dc <LidarSetPos+0x2a54>)
 8011ed2:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8011ed4:	4b82      	ldr	r3, [pc, #520]	; (80120e0 <LidarSetPos+0x2a58>)
 8011ed6:	4a83      	ldr	r2, [pc, #524]	; (80120e4 <LidarSetPos+0x2a5c>)
 8011ed8:	601a      	str	r2, [r3, #0]
 8011eda:	e005      	b.n	8011ee8 <LidarSetPos+0x2860>
								}
								else
								{
									vesc_speed = RedType3;
 8011edc:	4b7e      	ldr	r3, [pc, #504]	; (80120d8 <LidarSetPos+0x2a50>)
 8011ede:	4a82      	ldr	r2, [pc, #520]	; (80120e8 <LidarSetPos+0x2a60>)
 8011ee0:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011ee2:	4b7f      	ldr	r3, [pc, #508]	; (80120e0 <LidarSetPos+0x2a58>)
 8011ee4:	4a81      	ldr	r2, [pc, #516]	; (80120ec <LidarSetPos+0x2a64>)
 8011ee6:	601a      	str	r2, [r3, #0]
						while(pp.lsr_start)
 8011ee8:	4b77      	ldr	r3, [pc, #476]	; (80120c8 <LidarSetPos+0x2a40>)
 8011eea:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011eee:	f003 0310 	and.w	r3, r3, #16
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d1a7      	bne.n	8011e48 <LidarSetPos+0x27c0>
								}
							}
						}
					}

					PP_start(robot_center, 1, &pp);
 8011ef8:	f107 030c 	add.w	r3, r7, #12
 8011efc:	4a72      	ldr	r2, [pc, #456]	; (80120c8 <LidarSetPos+0x2a40>)
 8011efe:	2101      	movs	r1, #1
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7f3 fead 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8011f06:	f003 fdbf 	bl	8015a88 <HAL_GetTick>
 8011f0a:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8011f0e:	e026      	b.n	8011f5e <LidarSetPos+0x28d6>
					{
						after = HAL_GetTick();
 8011f10:	f003 fdba 	bl	8015a88 <HAL_GetTick>
 8011f14:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 8011f18:	4b6b      	ldr	r3, [pc, #428]	; (80120c8 <LidarSetPos+0x2a40>)
 8011f1a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011f1e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80120f0 <LidarSetPos+0x2a68>
 8011f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f2a:	d80a      	bhi.n	8011f42 <LidarSetPos+0x28ba>
 8011f2c:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8011f30:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011f3a:	d302      	bcc.n	8011f42 <LidarSetPos+0x28ba>
							PP_stop(&pp);
 8011f3c:	4862      	ldr	r0, [pc, #392]	; (80120c8 <LidarSetPos+0x2a40>)
 8011f3e:	f7f4 f9c7 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8011f42:	4b60      	ldr	r3, [pc, #384]	; (80120c4 <LidarSetPos+0x2a3c>)
 8011f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f4a:	d108      	bne.n	8011f5e <LidarSetPos+0x28d6>
						{
							while(ps4.button == SQUARE);
 8011f4c:	bf00      	nop
 8011f4e:	4b5d      	ldr	r3, [pc, #372]	; (80120c4 <LidarSetPos+0x2a3c>)
 8011f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f56:	d0fa      	beq.n	8011f4e <LidarSetPos+0x28c6>
							PP_stop(&pp);
 8011f58:	485b      	ldr	r0, [pc, #364]	; (80120c8 <LidarSetPos+0x2a40>)
 8011f5a:	f7f4 f9b9 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8011f5e:	4b5a      	ldr	r3, [pc, #360]	; (80120c8 <LidarSetPos+0x2a40>)
 8011f60:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011f64:	f003 0301 	and.w	r3, r3, #1
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1d0      	bne.n	8011f10 <LidarSetPos+0x2888>
						}
					}

					stick_fence = 1;
 8011f6e:	4b61      	ldr	r3, [pc, #388]	; (80120f4 <LidarSetPos+0x2a6c>)
 8011f70:	2201      	movs	r2, #1
 8011f72:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011f74:	463b      	mov	r3, r7
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d005      	beq.n	8011f8c <LidarSetPos+0x2904>
					{
						osDelay(300);
 8011f80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011f84:	f00a fab6 	bl	801c4f4 <osDelay>
						Shot();
 8011f88:	f7fc fb4a 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011f8c:	463b      	mov	r3, r7
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d110      	bne.n	8011fba <LidarSetPos+0x2932>
						LidarAdjust(lidar);
 8011f98:	463b      	mov	r3, r7
 8011f9a:	6818      	ldr	r0, [r3, #0]
 8011f9c:	f002 fee4 	bl	8014d68 <LidarAdjust>
					break;
 8011fa0:	e00b      	b.n	8011fba <LidarSetPos+0x2932>

				default:
					break;
 8011fa2:	bf00      	nop
 8011fa4:	f001 bf8b 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8011fa8:	bf00      	nop
 8011faa:	f001 bf88 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8011fae:	bf00      	nop
 8011fb0:	f001 bf85 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8011fb4:	bf00      	nop
 8011fb6:	f001 bf82 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8011fba:	bf00      	nop
			}
			break;
 8011fbc:	f001 bf7f 	b.w	8013ebe <LidarSetPos+0x4836>

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 8011fc0:	463b      	mov	r3, r7
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8011fc8:	3b01      	subs	r3, #1
 8011fca:	2b08      	cmp	r3, #8
 8011fcc:	f200 8701 	bhi.w	8012dd2 <LidarSetPos+0x374a>
 8011fd0:	a201      	add	r2, pc, #4	; (adr r2, 8011fd8 <LidarSetPos+0x2950>)
 8011fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd6:	bf00      	nop
 8011fd8:	08011ffd 	.word	0x08011ffd
 8011fdc:	08012249 	.word	0x08012249
 8011fe0:	0801237f 	.word	0x0801237f
 8011fe4:	0801282b 	.word	0x0801282b
 8011fe8:	08012567 	.word	0x08012567
 8011fec:	08012dd3 	.word	0x08012dd3
 8011ff0:	08012b0b 	.word	0x08012b0b
 8011ff4:	08012257 	.word	0x08012257
 8011ff8:	0801200b 	.word	0x0801200b
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 8011ffc:	463b      	mov	r3, r7
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	2206      	movs	r2, #6
 8012002:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8012006:	f000 bef1 	b.w	8012dec <LidarSetPos+0x3764>

				case PICK_RIGHT:
					stick_fence = 0;
 801200a:	4b3a      	ldr	r3, [pc, #232]	; (80120f4 <LidarSetPos+0x2a6c>)
 801200c:	2200      	movs	r2, #0
 801200e:	601a      	str	r2, [r3, #0]
					if(blue)
 8012010:	4b30      	ldr	r3, [pc, #192]	; (80120d4 <LidarSetPos+0x2a4c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d006      	beq.n	8012026 <LidarSetPos+0x299e>
					{
						vesc_speed = BlueType2;
 8012018:	4b2f      	ldr	r3, [pc, #188]	; (80120d8 <LidarSetPos+0x2a50>)
 801201a:	4a37      	ldr	r2, [pc, #220]	; (80120f8 <LidarSetPos+0x2a70>)
 801201c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801201e:	4b30      	ldr	r3, [pc, #192]	; (80120e0 <LidarSetPos+0x2a58>)
 8012020:	4a36      	ldr	r2, [pc, #216]	; (80120fc <LidarSetPos+0x2a74>)
 8012022:	601a      	str	r2, [r3, #0]
 8012024:	e005      	b.n	8012032 <LidarSetPos+0x29aa>
					}
					else
					{
						vesc_speed = RedType2;
 8012026:	4b2c      	ldr	r3, [pc, #176]	; (80120d8 <LidarSetPos+0x2a50>)
 8012028:	4a35      	ldr	r2, [pc, #212]	; (8012100 <LidarSetPos+0x2a78>)
 801202a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 801202c:	4b2c      	ldr	r3, [pc, #176]	; (80120e0 <LidarSetPos+0x2a58>)
 801202e:	4a35      	ldr	r2, [pc, #212]	; (8012104 <LidarSetPos+0x2a7c>)
 8012030:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8012032:	f7fb ffa7 	bl	800df84 <ResetCoordinate>
					lidar->pos = CENTER_3;
 8012036:	463b      	mov	r3, r7
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2206      	movs	r2, #6
 801203c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 8012040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012044:	4a20      	ldr	r2, [pc, #128]	; (80120c8 <LidarSetPos+0x2a40>)
 8012046:	2101      	movs	r1, #1
 8012048:	4618      	mov	r0, r3
 801204a:	f7f3 fe09 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801204e:	e00d      	b.n	801206c <LidarSetPos+0x29e4>
					{
						if(ps4.button == SQUARE)
 8012050:	4b1c      	ldr	r3, [pc, #112]	; (80120c4 <LidarSetPos+0x2a3c>)
 8012052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012058:	d108      	bne.n	801206c <LidarSetPos+0x29e4>
						{
							while(ps4.button == SQUARE);
 801205a:	bf00      	nop
 801205c:	4b19      	ldr	r3, [pc, #100]	; (80120c4 <LidarSetPos+0x2a3c>)
 801205e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012064:	d0fa      	beq.n	801205c <LidarSetPos+0x29d4>
							PP_stop(&pp);
 8012066:	4818      	ldr	r0, [pc, #96]	; (80120c8 <LidarSetPos+0x2a40>)
 8012068:	f7f4 f932 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801206c:	4b16      	ldr	r3, [pc, #88]	; (80120c8 <LidarSetPos+0x2a40>)
 801206e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012072:	f003 0301 	and.w	r3, r3, #1
 8012076:	b2db      	uxtb	r3, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	d1e9      	bne.n	8012050 <LidarSetPos+0x29c8>
						}
					}
					LoadRing();
 801207c:	f7fb ff2a 	bl	800ded4 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_3, 1, &pp);
 8012080:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012084:	4a10      	ldr	r2, [pc, #64]	; (80120c8 <LidarSetPos+0x2a40>)
 8012086:	2101      	movs	r1, #1
 8012088:	4618      	mov	r0, r3
 801208a:	f7f3 fde9 	bl	8005c60 <PP_start>

					load_adjust = 1;
 801208e:	4b1e      	ldr	r3, [pc, #120]	; (8012108 <LidarSetPos+0x2a80>)
 8012090:	2201      	movs	r2, #1
 8012092:	601a      	str	r2, [r3, #0]
					AdjustRings();
 8012094:	f7fb ff64 	bl	800df60 <AdjustRings>
					while(pp.pp_start)
 8012098:	e07f      	b.n	801219a <LidarSetPos+0x2b12>
					{
						if(ps4.button == UP)
 801209a:	4b0a      	ldr	r3, [pc, #40]	; (80120c4 <LidarSetPos+0x2a3c>)
 801209c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801209e:	2b10      	cmp	r3, #16
 80120a0:	d13e      	bne.n	8012120 <LidarSetPos+0x2a98>
						{
							while(ps4.button == UP);
 80120a2:	bf00      	nop
 80120a4:	4b07      	ldr	r3, [pc, #28]	; (80120c4 <LidarSetPos+0x2a3c>)
 80120a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120a8:	2b10      	cmp	r3, #16
 80120aa:	d0fb      	beq.n	80120a4 <LidarSetPos+0x2a1c>
							if(blue)
 80120ac:	4b09      	ldr	r3, [pc, #36]	; (80120d4 <LidarSetPos+0x2a4c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d02f      	beq.n	8012114 <LidarSetPos+0x2a8c>
							{
								vesc_speed = BlueOppoType2;
 80120b4:	4b08      	ldr	r3, [pc, #32]	; (80120d8 <LidarSetPos+0x2a50>)
 80120b6:	4a15      	ldr	r2, [pc, #84]	; (801210c <LidarSetPos+0x2a84>)
 80120b8:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 80120ba:	4b09      	ldr	r3, [pc, #36]	; (80120e0 <LidarSetPos+0x2a58>)
 80120bc:	4a14      	ldr	r2, [pc, #80]	; (8012110 <LidarSetPos+0x2a88>)
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	e02e      	b.n	8012120 <LidarSetPos+0x2a98>
 80120c2:	bf00      	nop
 80120c4:	2000a244 	.word	0x2000a244
 80120c8:	20006d4c 	.word	0x20006d4c
 80120cc:	20009600 	.word	0x20009600
 80120d0:	3fe80000 	.word	0x3fe80000
 80120d4:	20006a4c 	.word	0x20006a4c
 80120d8:	200065c0 	.word	0x200065c0
 80120dc:	4151999a 	.word	0x4151999a
 80120e0:	2000749c 	.word	0x2000749c
 80120e4:	44f78000 	.word	0x44f78000
 80120e8:	41540000 	.word	0x41540000
 80120ec:	44fbe000 	.word	0x44fbe000
 80120f0:	c2b20000 	.word	0xc2b20000
 80120f4:	200073d8 	.word	0x200073d8
 80120f8:	41026666 	.word	0x41026666
 80120fc:	44bea000 	.word	0x44bea000
 8012100:	4104cccd 	.word	0x4104cccd
 8012104:	44c1c000 	.word	0x44c1c000
 8012108:	200095c4 	.word	0x200095c4
 801210c:	414f3333 	.word	0x414f3333
 8012110:	45020000 	.word	0x45020000
							}
							else
							{
								vesc_speed = RedOppoType2;
 8012114:	4bb0      	ldr	r3, [pc, #704]	; (80123d8 <LidarSetPos+0x2d50>)
 8012116:	4ab1      	ldr	r2, [pc, #708]	; (80123dc <LidarSetPos+0x2d54>)
 8012118:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 801211a:	4bb1      	ldr	r3, [pc, #708]	; (80123e0 <LidarSetPos+0x2d58>)
 801211c:	4ab1      	ldr	r2, [pc, #708]	; (80123e4 <LidarSetPos+0x2d5c>)
 801211e:	601a      	str	r2, [r3, #0]
							}
						}

						if(ps4.button == SQUARE)
 8012120:	4bb1      	ldr	r3, [pc, #708]	; (80123e8 <LidarSetPos+0x2d60>)
 8012122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012128:	d108      	bne.n	801213c <LidarSetPos+0x2ab4>
						{
							while(ps4.button == SQUARE);
 801212a:	bf00      	nop
 801212c:	4bae      	ldr	r3, [pc, #696]	; (80123e8 <LidarSetPos+0x2d60>)
 801212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012134:	d0fa      	beq.n	801212c <LidarSetPos+0x2aa4>
							PP_stop(&pp);
 8012136:	48ad      	ldr	r0, [pc, #692]	; (80123ec <LidarSetPos+0x2d64>)
 8012138:	f7f4 f8ca 	bl	80062d0 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 801213c:	2108      	movs	r1, #8
 801213e:	48ac      	ldr	r0, [pc, #688]	; (80123f0 <LidarSetPos+0x2d68>)
 8012140:	f005 fb1e 	bl	8017780 <HAL_GPIO_ReadPin>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	d006      	beq.n	8012158 <LidarSetPos+0x2ad0>
 801214a:	2110      	movs	r1, #16
 801214c:	48a8      	ldr	r0, [pc, #672]	; (80123f0 <LidarSetPos+0x2d68>)
 801214e:	f005 fb17 	bl	8017780 <HAL_GPIO_ReadPin>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d109      	bne.n	801216c <LidarSetPos+0x2ae4>
						{
							pp.target_y[0] = pp.real_y;
 8012158:	4ba4      	ldr	r3, [pc, #656]	; (80123ec <LidarSetPos+0x2d64>)
 801215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801215c:	4aa3      	ldr	r2, [pc, #652]	; (80123ec <LidarSetPos+0x2d64>)
 801215e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8012162:	4ba2      	ldr	r3, [pc, #648]	; (80123ec <LidarSetPos+0x2d64>)
 8012164:	f04f 0200 	mov.w	r2, #0
 8012168:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(pp.real_x <= pick_right_to_center_3[0][1])
 801216c:	4b9f      	ldr	r3, [pc, #636]	; (80123ec <LidarSetPos+0x2d64>)
 801216e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012172:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012176:	edd3 7a01 	vldr	s15, [r3, #4]
 801217a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012182:	d900      	bls.n	8012186 <LidarSetPos+0x2afe>
 8012184:	e009      	b.n	801219a <LidarSetPos+0x2b12>
						{
							pp.target_y[0] = pp.real_y;
 8012186:	4b99      	ldr	r3, [pc, #612]	; (80123ec <LidarSetPos+0x2d64>)
 8012188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801218a:	4a98      	ldr	r2, [pc, #608]	; (80123ec <LidarSetPos+0x2d64>)
 801218c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8012190:	4b96      	ldr	r3, [pc, #600]	; (80123ec <LidarSetPos+0x2d64>)
 8012192:	f04f 0200 	mov.w	r2, #0
 8012196:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 801219a:	4b94      	ldr	r3, [pc, #592]	; (80123ec <LidarSetPos+0x2d64>)
 801219c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80121a0:	f003 0301 	and.w	r3, r3, #1
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f47f af77 	bne.w	801209a <LidarSetPos+0x2a12>
						}
					}

					adjust_servo;
 80121ac:	f44f 7148 	mov.w	r1, #800	; 0x320
 80121b0:	4890      	ldr	r0, [pc, #576]	; (80123f4 <LidarSetPos+0x2d6c>)
 80121b2:	f7f9 fb15 	bl	800b7e0 <ServoSetPulse>
 80121b6:	f640 0166 	movw	r1, #2150	; 0x866
 80121ba:	488f      	ldr	r0, [pc, #572]	; (80123f8 <LidarSetPos+0x2d70>)
 80121bc:	f7f9 fb10 	bl	800b7e0 <ServoSetPulse>

					PP_start(robot_center, 1, &pp);
 80121c0:	f107 030c 	add.w	r3, r7, #12
 80121c4:	4a89      	ldr	r2, [pc, #548]	; (80123ec <LidarSetPos+0x2d64>)
 80121c6:	2101      	movs	r1, #1
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f3 fd49 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 80121ce:	f003 fc5b 	bl	8015a88 <HAL_GetTick>
 80121d2:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 80121d6:	e026      	b.n	8012226 <LidarSetPos+0x2b9e>
					{
						after = HAL_GetTick();
 80121d8:	f003 fc56 	bl	8015a88 <HAL_GetTick>
 80121dc:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 1000)
 80121e0:	4b82      	ldr	r3, [pc, #520]	; (80123ec <LidarSetPos+0x2d64>)
 80121e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80121e6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80123fc <LidarSetPos+0x2d74>
 80121ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80121ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f2:	d80a      	bhi.n	801220a <LidarSetPos+0x2b82>
 80121f4:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80121f8:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80121fc:	1ad3      	subs	r3, r2, r3
 80121fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012202:	d302      	bcc.n	801220a <LidarSetPos+0x2b82>
							PP_stop(&pp);
 8012204:	4879      	ldr	r0, [pc, #484]	; (80123ec <LidarSetPos+0x2d64>)
 8012206:	f7f4 f863 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 801220a:	4b77      	ldr	r3, [pc, #476]	; (80123e8 <LidarSetPos+0x2d60>)
 801220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012212:	d108      	bne.n	8012226 <LidarSetPos+0x2b9e>
						{
							while(ps4.button == SQUARE);
 8012214:	bf00      	nop
 8012216:	4b74      	ldr	r3, [pc, #464]	; (80123e8 <LidarSetPos+0x2d60>)
 8012218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801221a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801221e:	d0fa      	beq.n	8012216 <LidarSetPos+0x2b8e>
							PP_stop(&pp);
 8012220:	4872      	ldr	r0, [pc, #456]	; (80123ec <LidarSetPos+0x2d64>)
 8012222:	f7f4 f855 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8012226:	4b71      	ldr	r3, [pc, #452]	; (80123ec <LidarSetPos+0x2d64>)
 8012228:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801222c:	f003 0301 	and.w	r3, r3, #1
 8012230:	b2db      	uxtb	r3, r3
 8012232:	2b00      	cmp	r3, #0
 8012234:	d1d0      	bne.n	80121d8 <LidarSetPos+0x2b50>
						}
					}

					stick_fence = 1;
 8012236:	4b72      	ldr	r3, [pc, #456]	; (8012400 <LidarSetPos+0x2d78>)
 8012238:	2201      	movs	r2, #1
 801223a:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 801223c:	463b      	mov	r3, r7
 801223e:	6818      	ldr	r0, [r3, #0]
 8012240:	f002 fd92 	bl	8014d68 <LidarAdjust>

					break;
 8012244:	f000 bdd2 	b.w	8012dec <LidarSetPos+0x3764>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 8012248:	463b      	mov	r3, r7
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2206      	movs	r2, #6
 801224e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8012252:	f000 bdcb 	b.w	8012dec <LidarSetPos+0x3764>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 8012256:	463b      	mov	r3, r7
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2206      	movs	r2, #6
 801225c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->fail = 0;
 8012260:	463b      	mov	r3, r7
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2200      	movs	r2, #0
 8012266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 801226a:	4b66      	ldr	r3, [pc, #408]	; (8012404 <LidarSetPos+0x2d7c>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d006      	beq.n	8012280 <LidarSetPos+0x2bf8>
					{
						vesc_speed = BlueType2;
 8012272:	4b59      	ldr	r3, [pc, #356]	; (80123d8 <LidarSetPos+0x2d50>)
 8012274:	4a64      	ldr	r2, [pc, #400]	; (8012408 <LidarSetPos+0x2d80>)
 8012276:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2Duty;
 8012278:	4b59      	ldr	r3, [pc, #356]	; (80123e0 <LidarSetPos+0x2d58>)
 801227a:	4a64      	ldr	r2, [pc, #400]	; (801240c <LidarSetPos+0x2d84>)
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	e005      	b.n	801228c <LidarSetPos+0x2c04>
					}
					else
					{
						vesc_speed = RedType2;
 8012280:	4b55      	ldr	r3, [pc, #340]	; (80123d8 <LidarSetPos+0x2d50>)
 8012282:	4a63      	ldr	r2, [pc, #396]	; (8012410 <LidarSetPos+0x2d88>)
 8012284:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2Duty;
 8012286:	4b56      	ldr	r3, [pc, #344]	; (80123e0 <LidarSetPos+0x2d58>)
 8012288:	4a56      	ldr	r2, [pc, #344]	; (80123e4 <LidarSetPos+0x2d5c>)
 801228a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801228c:	f7fb fe7a 	bl	800df84 <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 8012290:	2000      	movs	r0, #0
 8012292:	f7f2 fddd 	bl	8004e50 <setOrientationMODN>
					PP_start(upper_right_to_center_3, 1, &pp);
 8012296:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801229a:	4a54      	ldr	r2, [pc, #336]	; (80123ec <LidarSetPos+0x2d64>)
 801229c:	2101      	movs	r1, #1
 801229e:	4618      	mov	r0, r3
 80122a0:	f7f3 fcde 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80122a4:	e020      	b.n	80122e8 <LidarSetPos+0x2c60>
					{
						if(ps4.button == SQUARE)
 80122a6:	4b50      	ldr	r3, [pc, #320]	; (80123e8 <LidarSetPos+0x2d60>)
 80122a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122ae:	d108      	bne.n	80122c2 <LidarSetPos+0x2c3a>
						{
							while(ps4.button == SQUARE);
 80122b0:	bf00      	nop
 80122b2:	4b4d      	ldr	r3, [pc, #308]	; (80123e8 <LidarSetPos+0x2d60>)
 80122b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122ba:	d0fa      	beq.n	80122b2 <LidarSetPos+0x2c2a>
							PP_stop(&pp);
 80122bc:	484b      	ldr	r0, [pc, #300]	; (80123ec <LidarSetPos+0x2d64>)
 80122be:	f7f4 f807 	bl	80062d0 <PP_stop>
						}

						if(pp.real_y <= -2.7)
 80122c2:	4b4a      	ldr	r3, [pc, #296]	; (80123ec <LidarSetPos+0x2d64>)
 80122c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7ee f93e 	bl	8000548 <__aeabi_f2d>
 80122cc:	a340      	add	r3, pc, #256	; (adr r3, 80123d0 <LidarSetPos+0x2d48>)
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	f7ee fc0d 	bl	8000af0 <__aeabi_dcmple>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d100      	bne.n	80122de <LidarSetPos+0x2c56>
 80122dc:	e004      	b.n	80122e8 <LidarSetPos+0x2c60>
							pp.target_vel[0] = 2.0;
 80122de:	4b43      	ldr	r3, [pc, #268]	; (80123ec <LidarSetPos+0x2d64>)
 80122e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80122e4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					while(pp.pp_start)
 80122e8:	4b40      	ldr	r3, [pc, #256]	; (80123ec <LidarSetPos+0x2d64>)
 80122ea:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80122ee:	f003 0301 	and.w	r3, r3, #1
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d1d6      	bne.n	80122a6 <LidarSetPos+0x2c1e>
					}

					PP_start(upper_right_to_center_3_2, 1, &pp);
 80122f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80122fc:	4a3b      	ldr	r2, [pc, #236]	; (80123ec <LidarSetPos+0x2d64>)
 80122fe:	2101      	movs	r1, #1
 8012300:	4618      	mov	r0, r3
 8012302:	f7f3 fcad 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8012306:	e020      	b.n	801234a <LidarSetPos+0x2cc2>
					{
						if(ps4.button == SQUARE)
 8012308:	4b37      	ldr	r3, [pc, #220]	; (80123e8 <LidarSetPos+0x2d60>)
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012310:	d108      	bne.n	8012324 <LidarSetPos+0x2c9c>
						{
							while(ps4.button == SQUARE);
 8012312:	bf00      	nop
 8012314:	4b34      	ldr	r3, [pc, #208]	; (80123e8 <LidarSetPos+0x2d60>)
 8012316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801231c:	d0fa      	beq.n	8012314 <LidarSetPos+0x2c8c>
							PP_stop(&pp);
 801231e:	4833      	ldr	r0, [pc, #204]	; (80123ec <LidarSetPos+0x2d64>)
 8012320:	f7f3 ffd6 	bl	80062d0 <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 8012324:	2108      	movs	r1, #8
 8012326:	4832      	ldr	r0, [pc, #200]	; (80123f0 <LidarSetPos+0x2d68>)
 8012328:	f005 fa2a 	bl	8017780 <HAL_GPIO_ReadPin>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d006      	beq.n	8012340 <LidarSetPos+0x2cb8>
 8012332:	2110      	movs	r1, #16
 8012334:	482e      	ldr	r0, [pc, #184]	; (80123f0 <LidarSetPos+0x2d68>)
 8012336:	f005 fa23 	bl	8017780 <HAL_GPIO_ReadPin>
 801233a:	4603      	mov	r3, r0
 801233c:	2b00      	cmp	r3, #0
 801233e:	d104      	bne.n	801234a <LidarSetPos+0x2cc2>
							pp.error_y = 0;
 8012340:	4b2a      	ldr	r3, [pc, #168]	; (80123ec <LidarSetPos+0x2d64>)
 8012342:	f04f 0200 	mov.w	r2, #0
 8012346:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 801234a:	4b28      	ldr	r3, [pc, #160]	; (80123ec <LidarSetPos+0x2d64>)
 801234c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012350:	f003 0301 	and.w	r3, r3, #1
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1d6      	bne.n	8012308 <LidarSetPos+0x2c80>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					AdjustRings();
 801235a:	f7fb fe01 	bl	800df60 <AdjustRings>
					adjust_servo;
 801235e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8012362:	4824      	ldr	r0, [pc, #144]	; (80123f4 <LidarSetPos+0x2d6c>)
 8012364:	f7f9 fa3c 	bl	800b7e0 <ServoSetPulse>
 8012368:	f640 0166 	movw	r1, #2150	; 0x866
 801236c:	4822      	ldr	r0, [pc, #136]	; (80123f8 <LidarSetPos+0x2d70>)
 801236e:	f7f9 fa37 	bl	800b7e0 <ServoSetPulse>

					LidarAdjust(lidar);
 8012372:	463b      	mov	r3, r7
 8012374:	6818      	ldr	r0, [r3, #0]
 8012376:	f002 fcf7 	bl	8014d68 <LidarAdjust>

					break;
 801237a:	f000 bd37 	b.w	8012dec <LidarSetPos+0x3764>

				case CENTER_1:
					stick_fence = 0;
 801237e:	4b20      	ldr	r3, [pc, #128]	; (8012400 <LidarSetPos+0x2d78>)
 8012380:	2200      	movs	r2, #0
 8012382:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012384:	463b      	mov	r3, r7
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2200      	movs	r2, #0
 801238a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 801238e:	4b1d      	ldr	r3, [pc, #116]	; (8012404 <LidarSetPos+0x2d7c>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d006      	beq.n	80123a4 <LidarSetPos+0x2d1c>
					{
						vesc_speed = BlueType2;
 8012396:	4b10      	ldr	r3, [pc, #64]	; (80123d8 <LidarSetPos+0x2d50>)
 8012398:	4a1b      	ldr	r2, [pc, #108]	; (8012408 <LidarSetPos+0x2d80>)
 801239a:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801239c:	4b10      	ldr	r3, [pc, #64]	; (80123e0 <LidarSetPos+0x2d58>)
 801239e:	4a1d      	ldr	r2, [pc, #116]	; (8012414 <LidarSetPos+0x2d8c>)
 80123a0:	601a      	str	r2, [r3, #0]
 80123a2:	e005      	b.n	80123b0 <LidarSetPos+0x2d28>
					}
					else
					{
						vesc_speed = RedType2;
 80123a4:	4b0c      	ldr	r3, [pc, #48]	; (80123d8 <LidarSetPos+0x2d50>)
 80123a6:	4a1a      	ldr	r2, [pc, #104]	; (8012410 <LidarSetPos+0x2d88>)
 80123a8:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 80123aa:	4b0d      	ldr	r3, [pc, #52]	; (80123e0 <LidarSetPos+0x2d58>)
 80123ac:	4a1a      	ldr	r2, [pc, #104]	; (8012418 <LidarSetPos+0x2d90>)
 80123ae:	601a      	str	r2, [r3, #0]
					}

					lidar->pos = CENTER_3;
 80123b0:	463b      	mov	r3, r7
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2206      	movs	r2, #6
 80123b6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_3, 1, &pp, 0, 1);
 80123ba:	f207 406c 	addw	r0, r7, #1132	; 0x46c
 80123be:	2301      	movs	r3, #1
 80123c0:	9300      	str	r3, [sp, #0]
 80123c2:	2300      	movs	r3, #0
 80123c4:	4a09      	ldr	r2, [pc, #36]	; (80123ec <LidarSetPos+0x2d64>)
 80123c6:	2101      	movs	r1, #1
 80123c8:	f7f3 fe10 	bl	8005fec <LSR_start>
					while(pp.lsr_start)
 80123cc:	e076      	b.n	80124bc <LidarSetPos+0x2e34>
 80123ce:	bf00      	nop
 80123d0:	9999999a 	.word	0x9999999a
 80123d4:	c0059999 	.word	0xc0059999
 80123d8:	200065c0 	.word	0x200065c0
 80123dc:	4154cccd 	.word	0x4154cccd
 80123e0:	2000749c 	.word	0x2000749c
 80123e4:	45039000 	.word	0x45039000
 80123e8:	2000a244 	.word	0x2000a244
 80123ec:	20006d4c 	.word	0x20006d4c
 80123f0:	40020c00 	.word	0x40020c00
 80123f4:	200079e0 	.word	0x200079e0
 80123f8:	2000a5e8 	.word	0x2000a5e8
 80123fc:	c2b20000 	.word	0xc2b20000
 8012400:	200073d8 	.word	0x200073d8
 8012404:	20006a4c 	.word	0x20006a4c
 8012408:	41026666 	.word	0x41026666
 801240c:	45020000 	.word	0x45020000
 8012410:	4104cccd 	.word	0x4104cccd
 8012414:	44bea000 	.word	0x44bea000
 8012418:	44c1c000 	.word	0x44c1c000
					{
						if(ps4.button == UP)
 801241c:	4ba4      	ldr	r3, [pc, #656]	; (80126b0 <LidarSetPos+0x3028>)
 801241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012420:	2b10      	cmp	r3, #16
 8012422:	d115      	bne.n	8012450 <LidarSetPos+0x2dc8>
						{
							while(ps4.button == UP);
 8012424:	bf00      	nop
 8012426:	4ba2      	ldr	r3, [pc, #648]	; (80126b0 <LidarSetPos+0x3028>)
 8012428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801242a:	2b10      	cmp	r3, #16
 801242c:	d0fb      	beq.n	8012426 <LidarSetPos+0x2d9e>
							if(blue)
 801242e:	4ba1      	ldr	r3, [pc, #644]	; (80126b4 <LidarSetPos+0x302c>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d006      	beq.n	8012444 <LidarSetPos+0x2dbc>
							{
								vesc_speed = BlueOppoType2;
 8012436:	4ba0      	ldr	r3, [pc, #640]	; (80126b8 <LidarSetPos+0x3030>)
 8012438:	4aa0      	ldr	r2, [pc, #640]	; (80126bc <LidarSetPos+0x3034>)
 801243a:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 801243c:	4ba0      	ldr	r3, [pc, #640]	; (80126c0 <LidarSetPos+0x3038>)
 801243e:	4aa1      	ldr	r2, [pc, #644]	; (80126c4 <LidarSetPos+0x303c>)
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	e005      	b.n	8012450 <LidarSetPos+0x2dc8>
							}
							else
							{
								vesc_speed = RedOppoType2;
 8012444:	4b9c      	ldr	r3, [pc, #624]	; (80126b8 <LidarSetPos+0x3030>)
 8012446:	4aa0      	ldr	r2, [pc, #640]	; (80126c8 <LidarSetPos+0x3040>)
 8012448:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 801244a:	4b9d      	ldr	r3, [pc, #628]	; (80126c0 <LidarSetPos+0x3038>)
 801244c:	4a9f      	ldr	r2, [pc, #636]	; (80126cc <LidarSetPos+0x3044>)
 801244e:	601a      	str	r2, [r3, #0]
							}
						}

						if(ps4.button == SQUARE)
 8012450:	4b97      	ldr	r3, [pc, #604]	; (80126b0 <LidarSetPos+0x3028>)
 8012452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012458:	d108      	bne.n	801246c <LidarSetPos+0x2de4>
						{
							while(ps4.button == SQUARE);
 801245a:	bf00      	nop
 801245c:	4b94      	ldr	r3, [pc, #592]	; (80126b0 <LidarSetPos+0x3028>)
 801245e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012464:	d0fa      	beq.n	801245c <LidarSetPos+0x2dd4>
							PP_stop(&pp);
 8012466:	489a      	ldr	r0, [pc, #616]	; (80126d0 <LidarSetPos+0x3048>)
 8012468:	f7f3 ff32 	bl	80062d0 <PP_stop>
						}

						if(lsrR.dist <= lsr_center_3[0][1] + Offset_3 - 0.45)
 801246c:	4b99      	ldr	r3, [pc, #612]	; (80126d4 <LidarSetPos+0x304c>)
 801246e:	69db      	ldr	r3, [r3, #28]
 8012470:	4618      	mov	r0, r3
 8012472:	f7ee f869 	bl	8000548 <__aeabi_f2d>
 8012476:	4604      	mov	r4, r0
 8012478:	460d      	mov	r5, r1
 801247a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4618      	mov	r0, r3
 8012482:	f7ee f861 	bl	8000548 <__aeabi_f2d>
 8012486:	a386      	add	r3, pc, #536	; (adr r3, 80126a0 <LidarSetPos+0x3018>)
 8012488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801248c:	f7ed fefe 	bl	800028c <__adddf3>
 8012490:	4602      	mov	r2, r0
 8012492:	460b      	mov	r3, r1
 8012494:	4610      	mov	r0, r2
 8012496:	4619      	mov	r1, r3
 8012498:	a383      	add	r3, pc, #524	; (adr r3, 80126a8 <LidarSetPos+0x3020>)
 801249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249e:	f7ed fef3 	bl	8000288 <__aeabi_dsub>
 80124a2:	4602      	mov	r2, r0
 80124a4:	460b      	mov	r3, r1
 80124a6:	4620      	mov	r0, r4
 80124a8:	4629      	mov	r1, r5
 80124aa:	f7ee fb21 	bl	8000af0 <__aeabi_dcmple>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d100      	bne.n	80124b6 <LidarSetPos+0x2e2e>
 80124b4:	e002      	b.n	80124bc <LidarSetPos+0x2e34>
							PP_stop(&pp);
 80124b6:	4886      	ldr	r0, [pc, #536]	; (80126d0 <LidarSetPos+0x3048>)
 80124b8:	f7f3 ff0a 	bl	80062d0 <PP_stop>
					while(pp.lsr_start)
 80124bc:	4b84      	ldr	r3, [pc, #528]	; (80126d0 <LidarSetPos+0x3048>)
 80124be:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80124c2:	f003 0310 	and.w	r3, r3, #16
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d1a7      	bne.n	801241c <LidarSetPos+0x2d94>
					}


					PP_start(robot_center, 1, &pp);
 80124cc:	f107 030c 	add.w	r3, r7, #12
 80124d0:	4a7f      	ldr	r2, [pc, #508]	; (80126d0 <LidarSetPos+0x3048>)
 80124d2:	2101      	movs	r1, #1
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7f3 fbc3 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 80124da:	f003 fad5 	bl	8015a88 <HAL_GetTick>
 80124de:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 80124e2:	e026      	b.n	8012532 <LidarSetPos+0x2eaa>
					{
						after = HAL_GetTick();
 80124e4:	f003 fad0 	bl	8015a88 <HAL_GetTick>
 80124e8:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 80124ec:	4b78      	ldr	r3, [pc, #480]	; (80126d0 <LidarSetPos+0x3048>)
 80124ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80124f2:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80126d8 <LidarSetPos+0x3050>
 80124f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80124fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fe:	db0a      	blt.n	8012516 <LidarSetPos+0x2e8e>
 8012500:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8012504:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801250e:	d302      	bcc.n	8012516 <LidarSetPos+0x2e8e>
							PP_stop(&pp);
 8012510:	486f      	ldr	r0, [pc, #444]	; (80126d0 <LidarSetPos+0x3048>)
 8012512:	f7f3 fedd 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8012516:	4b66      	ldr	r3, [pc, #408]	; (80126b0 <LidarSetPos+0x3028>)
 8012518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801251a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801251e:	d108      	bne.n	8012532 <LidarSetPos+0x2eaa>
						{
							while(ps4.button == SQUARE);
 8012520:	bf00      	nop
 8012522:	4b63      	ldr	r3, [pc, #396]	; (80126b0 <LidarSetPos+0x3028>)
 8012524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801252a:	d0fa      	beq.n	8012522 <LidarSetPos+0x2e9a>
							PP_stop(&pp);
 801252c:	4868      	ldr	r0, [pc, #416]	; (80126d0 <LidarSetPos+0x3048>)
 801252e:	f7f3 fecf 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8012532:	4b67      	ldr	r3, [pc, #412]	; (80126d0 <LidarSetPos+0x3048>)
 8012534:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012538:	f003 0301 	and.w	r3, r3, #1
 801253c:	b2db      	uxtb	r3, r3
 801253e:	2b00      	cmp	r3, #0
 8012540:	d1d0      	bne.n	80124e4 <LidarSetPos+0x2e5c>
						}
					}

					stick_fence = 1;
 8012542:	4b66      	ldr	r3, [pc, #408]	; (80126dc <LidarSetPos+0x3054>)
 8012544:	2201      	movs	r2, #1
 8012546:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8012548:	463b      	mov	r3, r7
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012550:	2b00      	cmp	r3, #0
 8012552:	f000 8441 	beq.w	8012dd8 <LidarSetPos+0x3750>
					{
						osDelay(300);
 8012556:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801255a:	f009 ffcb 	bl	801c4f4 <osDelay>
						Shot();
 801255e:	f7fc f85f 	bl	800e620 <Shot>
					}

					break;
 8012562:	f000 bc39 	b.w	8012dd8 <LidarSetPos+0x3750>

				case CENTER:
					stick_fence = 0;
 8012566:	4b5d      	ldr	r3, [pc, #372]	; (80126dc <LidarSetPos+0x3054>)
 8012568:	2200      	movs	r2, #0
 801256a:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 801256c:	463b      	mov	r3, r7
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2200      	movs	r2, #0
 8012572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8012576:	4b4f      	ldr	r3, [pc, #316]	; (80126b4 <LidarSetPos+0x302c>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d006      	beq.n	801258c <LidarSetPos+0x2f04>
					{
						vesc_speed = BlueType2;
 801257e:	4b4e      	ldr	r3, [pc, #312]	; (80126b8 <LidarSetPos+0x3030>)
 8012580:	4a57      	ldr	r2, [pc, #348]	; (80126e0 <LidarSetPos+0x3058>)
 8012582:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8012584:	4b4e      	ldr	r3, [pc, #312]	; (80126c0 <LidarSetPos+0x3038>)
 8012586:	4a57      	ldr	r2, [pc, #348]	; (80126e4 <LidarSetPos+0x305c>)
 8012588:	601a      	str	r2, [r3, #0]
 801258a:	e005      	b.n	8012598 <LidarSetPos+0x2f10>
					}
					else
					{
						vesc_speed = RedType2;
 801258c:	4b4a      	ldr	r3, [pc, #296]	; (80126b8 <LidarSetPos+0x3030>)
 801258e:	4a56      	ldr	r2, [pc, #344]	; (80126e8 <LidarSetPos+0x3060>)
 8012590:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8012592:	4b4b      	ldr	r3, [pc, #300]	; (80126c0 <LidarSetPos+0x3038>)
 8012594:	4a55      	ldr	r2, [pc, #340]	; (80126ec <LidarSetPos+0x3064>)
 8012596:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 8012598:	463b      	mov	r3, r7
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d158      	bne.n	8012656 <LidarSetPos+0x2fce>
					{
						ResetCoordinate();
 80125a4:	f7fb fcee 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_3;
 80125a8:	463b      	mov	r3, r7
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2206      	movs	r2, #6
 80125ae:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_3, 1, &pp);
 80125b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80125b6:	4a46      	ldr	r2, [pc, #280]	; (80126d0 <LidarSetPos+0x3048>)
 80125b8:	2101      	movs	r1, #1
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7f3 fb50 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 80125c0:	e040      	b.n	8012644 <LidarSetPos+0x2fbc>
						{
							if(ps4.button == SQUARE)
 80125c2:	4b3b      	ldr	r3, [pc, #236]	; (80126b0 <LidarSetPos+0x3028>)
 80125c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80125ca:	d10c      	bne.n	80125e6 <LidarSetPos+0x2f5e>
							{
								while(ps4.button == SQUARE);
 80125cc:	bf00      	nop
 80125ce:	4b38      	ldr	r3, [pc, #224]	; (80126b0 <LidarSetPos+0x3028>)
 80125d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80125d6:	d0fa      	beq.n	80125ce <LidarSetPos+0x2f46>
								StopAutoPP();
 80125d8:	f7fb fc92 	bl	800df00 <StopAutoPP>
								lidar->fail = 1;
 80125dc:	463b      	mov	r3, r7
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	2201      	movs	r2, #1
 80125e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER;
	//							lidar->pos_counter = CENTER;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 80125e6:	2108      	movs	r1, #8
 80125e8:	4841      	ldr	r0, [pc, #260]	; (80126f0 <LidarSetPos+0x3068>)
 80125ea:	f005 f8c9 	bl	8017780 <HAL_GPIO_ReadPin>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d006      	beq.n	8012602 <LidarSetPos+0x2f7a>
 80125f4:	2110      	movs	r1, #16
 80125f6:	483e      	ldr	r0, [pc, #248]	; (80126f0 <LidarSetPos+0x3068>)
 80125f8:	f005 f8c2 	bl	8017780 <HAL_GPIO_ReadPin>
 80125fc:	4603      	mov	r3, r0
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d109      	bne.n	8012616 <LidarSetPos+0x2f8e>
							{
								pp.target_y[0] = pp.real_y;
 8012602:	4b33      	ldr	r3, [pc, #204]	; (80126d0 <LidarSetPos+0x3048>)
 8012604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012606:	4a32      	ldr	r2, [pc, #200]	; (80126d0 <LidarSetPos+0x3048>)
 8012608:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801260c:	4b30      	ldr	r3, [pc, #192]	; (80126d0 <LidarSetPos+0x3048>)
 801260e:	f04f 0200 	mov.w	r2, #0
 8012612:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_to_center_3[0][1])
 8012616:	4b2e      	ldr	r3, [pc, #184]	; (80126d0 <LidarSetPos+0x3048>)
 8012618:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801261c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8012620:	edd3 7a01 	vldr	s15, [r3, #4]
 8012624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801262c:	da00      	bge.n	8012630 <LidarSetPos+0x2fa8>
 801262e:	e009      	b.n	8012644 <LidarSetPos+0x2fbc>
							{
								pp.target_y[0] = pp.real_y;
 8012630:	4b27      	ldr	r3, [pc, #156]	; (80126d0 <LidarSetPos+0x3048>)
 8012632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012634:	4a26      	ldr	r2, [pc, #152]	; (80126d0 <LidarSetPos+0x3048>)
 8012636:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801263a:	4b25      	ldr	r3, [pc, #148]	; (80126d0 <LidarSetPos+0x3048>)
 801263c:	f04f 0200 	mov.w	r2, #0
 8012640:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8012644:	4b22      	ldr	r3, [pc, #136]	; (80126d0 <LidarSetPos+0x3048>)
 8012646:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801264a:	f003 0301 	and.w	r3, r3, #1
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b00      	cmp	r3, #0
 8012652:	d1b6      	bne.n	80125c2 <LidarSetPos+0x2f3a>
 8012654:	e093      	b.n	801277e <LidarSetPos+0x30f6>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_3;
 8012656:	463b      	mov	r3, r7
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	2206      	movs	r2, #6
 801265c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_3, 1, &pp, 0, 1);
 8012660:	f207 406c 	addw	r0, r7, #1132	; 0x46c
 8012664:	2301      	movs	r3, #1
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	2300      	movs	r3, #0
 801266a:	4a19      	ldr	r2, [pc, #100]	; (80126d0 <LidarSetPos+0x3048>)
 801266c:	2101      	movs	r1, #1
 801266e:	f7f3 fcbd 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8012672:	e07b      	b.n	801276c <LidarSetPos+0x30e4>
						{
							if(ps4.button == UP)
 8012674:	4b0e      	ldr	r3, [pc, #56]	; (80126b0 <LidarSetPos+0x3028>)
 8012676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012678:	2b10      	cmp	r3, #16
 801267a:	d141      	bne.n	8012700 <LidarSetPos+0x3078>
							{
								while(ps4.button == UP);
 801267c:	bf00      	nop
 801267e:	4b0c      	ldr	r3, [pc, #48]	; (80126b0 <LidarSetPos+0x3028>)
 8012680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012682:	2b10      	cmp	r3, #16
 8012684:	d0fb      	beq.n	801267e <LidarSetPos+0x2ff6>
								if(blue)
 8012686:	4b0b      	ldr	r3, [pc, #44]	; (80126b4 <LidarSetPos+0x302c>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d032      	beq.n	80126f4 <LidarSetPos+0x306c>
								{
									vesc_speed = BlueOppoType2;
 801268e:	4b0a      	ldr	r3, [pc, #40]	; (80126b8 <LidarSetPos+0x3030>)
 8012690:	4a0a      	ldr	r2, [pc, #40]	; (80126bc <LidarSetPos+0x3034>)
 8012692:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8012694:	4b0a      	ldr	r3, [pc, #40]	; (80126c0 <LidarSetPos+0x3038>)
 8012696:	4a0b      	ldr	r2, [pc, #44]	; (80126c4 <LidarSetPos+0x303c>)
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	e031      	b.n	8012700 <LidarSetPos+0x3078>
 801269c:	f3af 8000 	nop.w
 80126a0:	9999999a 	.word	0x9999999a
 80126a4:	3fe99999 	.word	0x3fe99999
 80126a8:	cccccccd 	.word	0xcccccccd
 80126ac:	3fdccccc 	.word	0x3fdccccc
 80126b0:	2000a244 	.word	0x2000a244
 80126b4:	20006a4c 	.word	0x20006a4c
 80126b8:	200065c0 	.word	0x200065c0
 80126bc:	414f3333 	.word	0x414f3333
 80126c0:	2000749c 	.word	0x2000749c
 80126c4:	45020000 	.word	0x45020000
 80126c8:	4154cccd 	.word	0x4154cccd
 80126cc:	45039000 	.word	0x45039000
 80126d0:	20006d4c 	.word	0x20006d4c
 80126d4:	20009600 	.word	0x20009600
 80126d8:	c2b60000 	.word	0xc2b60000
 80126dc:	200073d8 	.word	0x200073d8
 80126e0:	41026666 	.word	0x41026666
 80126e4:	44bea000 	.word	0x44bea000
 80126e8:	4104cccd 	.word	0x4104cccd
 80126ec:	44c1c000 	.word	0x44c1c000
 80126f0:	40020c00 	.word	0x40020c00
								}
								else
								{
									vesc_speed = RedOppoType2;
 80126f4:	4baa      	ldr	r3, [pc, #680]	; (80129a0 <LidarSetPos+0x3318>)
 80126f6:	4aab      	ldr	r2, [pc, #684]	; (80129a4 <LidarSetPos+0x331c>)
 80126f8:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 80126fa:	4bab      	ldr	r3, [pc, #684]	; (80129a8 <LidarSetPos+0x3320>)
 80126fc:	4aab      	ldr	r2, [pc, #684]	; (80129ac <LidarSetPos+0x3324>)
 80126fe:	601a      	str	r2, [r3, #0]
								}
							}
							if(ps4.button == SQUARE)
 8012700:	4bab      	ldr	r3, [pc, #684]	; (80129b0 <LidarSetPos+0x3328>)
 8012702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012708:	d108      	bne.n	801271c <LidarSetPos+0x3094>
							{
								while(ps4.button == SQUARE);
 801270a:	bf00      	nop
 801270c:	4ba8      	ldr	r3, [pc, #672]	; (80129b0 <LidarSetPos+0x3328>)
 801270e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012714:	d0fa      	beq.n	801270c <LidarSetPos+0x3084>
								PP_stop(&pp);
 8012716:	48a7      	ldr	r0, [pc, #668]	; (80129b4 <LidarSetPos+0x332c>)
 8012718:	f7f3 fdda 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_3[0][1] + Offset - 0.2)
 801271c:	4ba6      	ldr	r3, [pc, #664]	; (80129b8 <LidarSetPos+0x3330>)
 801271e:	69db      	ldr	r3, [r3, #28]
 8012720:	4618      	mov	r0, r3
 8012722:	f7ed ff11 	bl	8000548 <__aeabi_f2d>
 8012726:	4604      	mov	r4, r0
 8012728:	460d      	mov	r5, r1
 801272a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4618      	mov	r0, r3
 8012732:	f7ed ff09 	bl	8000548 <__aeabi_f2d>
 8012736:	f04f 0200 	mov.w	r2, #0
 801273a:	4ba0      	ldr	r3, [pc, #640]	; (80129bc <LidarSetPos+0x3334>)
 801273c:	f7ed fda6 	bl	800028c <__adddf3>
 8012740:	4602      	mov	r2, r0
 8012742:	460b      	mov	r3, r1
 8012744:	4610      	mov	r0, r2
 8012746:	4619      	mov	r1, r3
 8012748:	a393      	add	r3, pc, #588	; (adr r3, 8012998 <LidarSetPos+0x3310>)
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	f7ed fd9b 	bl	8000288 <__aeabi_dsub>
 8012752:	4602      	mov	r2, r0
 8012754:	460b      	mov	r3, r1
 8012756:	4620      	mov	r0, r4
 8012758:	4629      	mov	r1, r5
 801275a:	f7ee f9c9 	bl	8000af0 <__aeabi_dcmple>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d100      	bne.n	8012766 <LidarSetPos+0x30de>
 8012764:	e002      	b.n	801276c <LidarSetPos+0x30e4>
								PP_stop(&pp);
 8012766:	4893      	ldr	r0, [pc, #588]	; (80129b4 <LidarSetPos+0x332c>)
 8012768:	f7f3 fdb2 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 801276c:	4b91      	ldr	r3, [pc, #580]	; (80129b4 <LidarSetPos+0x332c>)
 801276e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012772:	f003 0310 	and.w	r3, r3, #16
 8012776:	b2db      	uxtb	r3, r3
 8012778:	2b00      	cmp	r3, #0
 801277a:	f47f af7b 	bne.w	8012674 <LidarSetPos+0x2fec>
						}
					}

					PP_start(robot_center, 1, &pp);
 801277e:	f107 030c 	add.w	r3, r7, #12
 8012782:	4a8c      	ldr	r2, [pc, #560]	; (80129b4 <LidarSetPos+0x332c>)
 8012784:	2101      	movs	r1, #1
 8012786:	4618      	mov	r0, r3
 8012788:	f7f3 fa6a 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 801278c:	f003 f97c 	bl	8015a88 <HAL_GetTick>
 8012790:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8012794:	e026      	b.n	80127e4 <LidarSetPos+0x315c>
					{
						after = HAL_GetTick();
 8012796:	f003 f977 	bl	8015a88 <HAL_GetTick>
 801279a:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 801279e:	4b85      	ldr	r3, [pc, #532]	; (80129b4 <LidarSetPos+0x332c>)
 80127a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80127a4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80129c0 <LidarSetPos+0x3338>
 80127a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b0:	db0a      	blt.n	80127c8 <LidarSetPos+0x3140>
 80127b2:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80127b6:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80127ba:	1ad3      	subs	r3, r2, r3
 80127bc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80127c0:	d302      	bcc.n	80127c8 <LidarSetPos+0x3140>
							PP_stop(&pp);
 80127c2:	487c      	ldr	r0, [pc, #496]	; (80129b4 <LidarSetPos+0x332c>)
 80127c4:	f7f3 fd84 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 80127c8:	4b79      	ldr	r3, [pc, #484]	; (80129b0 <LidarSetPos+0x3328>)
 80127ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127d0:	d108      	bne.n	80127e4 <LidarSetPos+0x315c>
						{
							while(ps4.button == SQUARE);
 80127d2:	bf00      	nop
 80127d4:	4b76      	ldr	r3, [pc, #472]	; (80129b0 <LidarSetPos+0x3328>)
 80127d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127dc:	d0fa      	beq.n	80127d4 <LidarSetPos+0x314c>
							PP_stop(&pp);
 80127de:	4875      	ldr	r0, [pc, #468]	; (80129b4 <LidarSetPos+0x332c>)
 80127e0:	f7f3 fd76 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80127e4:	4b73      	ldr	r3, [pc, #460]	; (80129b4 <LidarSetPos+0x332c>)
 80127e6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80127ea:	f003 0301 	and.w	r3, r3, #1
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d1d0      	bne.n	8012796 <LidarSetPos+0x310e>
						}
					}

					stick_fence = 1;
 80127f4:	4b73      	ldr	r3, [pc, #460]	; (80129c4 <LidarSetPos+0x333c>)
 80127f6:	2201      	movs	r2, #1
 80127f8:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80127fa:	463b      	mov	r3, r7
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012802:	2b00      	cmp	r3, #0
 8012804:	d005      	beq.n	8012812 <LidarSetPos+0x318a>
					{
						osDelay(300);
 8012806:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801280a:	f009 fe73 	bl	801c4f4 <osDelay>
						Shot();
 801280e:	f7fb ff07 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8012812:	463b      	mov	r3, r7
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801281a:	2b00      	cmp	r3, #0
 801281c:	f040 82df 	bne.w	8012dde <LidarSetPos+0x3756>
						LidarAdjust(lidar);
 8012820:	463b      	mov	r3, r7
 8012822:	6818      	ldr	r0, [r3, #0]
 8012824:	f002 faa0 	bl	8014d68 <LidarAdjust>
					break;
 8012828:	e2d9      	b.n	8012dde <LidarSetPos+0x3756>

				case CENTER_2:
					stick_fence = 0;
 801282a:	4b66      	ldr	r3, [pc, #408]	; (80129c4 <LidarSetPos+0x333c>)
 801282c:	2200      	movs	r2, #0
 801282e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012830:	463b      	mov	r3, r7
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2200      	movs	r2, #0
 8012836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 801283a:	4b63      	ldr	r3, [pc, #396]	; (80129c8 <LidarSetPos+0x3340>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d006      	beq.n	8012850 <LidarSetPos+0x31c8>
					{
						vesc_speed = BlueType2;
 8012842:	4b57      	ldr	r3, [pc, #348]	; (80129a0 <LidarSetPos+0x3318>)
 8012844:	4a61      	ldr	r2, [pc, #388]	; (80129cc <LidarSetPos+0x3344>)
 8012846:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8012848:	4b57      	ldr	r3, [pc, #348]	; (80129a8 <LidarSetPos+0x3320>)
 801284a:	4a61      	ldr	r2, [pc, #388]	; (80129d0 <LidarSetPos+0x3348>)
 801284c:	601a      	str	r2, [r3, #0]
 801284e:	e005      	b.n	801285c <LidarSetPos+0x31d4>
					}
					else
					{
						vesc_speed = RedType2;
 8012850:	4b53      	ldr	r3, [pc, #332]	; (80129a0 <LidarSetPos+0x3318>)
 8012852:	4a60      	ldr	r2, [pc, #384]	; (80129d4 <LidarSetPos+0x334c>)
 8012854:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8012856:	4b54      	ldr	r3, [pc, #336]	; (80129a8 <LidarSetPos+0x3320>)
 8012858:	4a5f      	ldr	r2, [pc, #380]	; (80129d8 <LidarSetPos+0x3350>)
 801285a:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 801285c:	463b      	mov	r3, r7
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012864:	2b00      	cmp	r3, #0
 8012866:	d173      	bne.n	8012950 <LidarSetPos+0x32c8>
					{
						ResetCoordinate();
 8012868:	f7fb fb8c 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_3;
 801286c:	463b      	mov	r3, r7
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2206      	movs	r2, #6
 8012872:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_2_to_center_3, 1, &pp);
 8012876:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801287a:	4a4e      	ldr	r2, [pc, #312]	; (80129b4 <LidarSetPos+0x332c>)
 801287c:	2101      	movs	r1, #1
 801287e:	4618      	mov	r0, r3
 8012880:	f7f3 f9ee 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8012884:	e05b      	b.n	801293e <LidarSetPos+0x32b6>
						{
							if(ps4.button == UP)
 8012886:	4b4a      	ldr	r3, [pc, #296]	; (80129b0 <LidarSetPos+0x3328>)
 8012888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801288a:	2b10      	cmp	r3, #16
 801288c:	d115      	bne.n	80128ba <LidarSetPos+0x3232>
							{
								while(ps4.button == UP);
 801288e:	bf00      	nop
 8012890:	4b47      	ldr	r3, [pc, #284]	; (80129b0 <LidarSetPos+0x3328>)
 8012892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012894:	2b10      	cmp	r3, #16
 8012896:	d0fb      	beq.n	8012890 <LidarSetPos+0x3208>
								if(blue)
 8012898:	4b4b      	ldr	r3, [pc, #300]	; (80129c8 <LidarSetPos+0x3340>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d006      	beq.n	80128ae <LidarSetPos+0x3226>
								{
									vesc_speed = BlueOppoType2;
 80128a0:	4b3f      	ldr	r3, [pc, #252]	; (80129a0 <LidarSetPos+0x3318>)
 80128a2:	4a4e      	ldr	r2, [pc, #312]	; (80129dc <LidarSetPos+0x3354>)
 80128a4:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 80128a6:	4b40      	ldr	r3, [pc, #256]	; (80129a8 <LidarSetPos+0x3320>)
 80128a8:	4a4d      	ldr	r2, [pc, #308]	; (80129e0 <LidarSetPos+0x3358>)
 80128aa:	601a      	str	r2, [r3, #0]
 80128ac:	e005      	b.n	80128ba <LidarSetPos+0x3232>
								}
								else
								{
									vesc_speed = RedOppoType2;
 80128ae:	4b3c      	ldr	r3, [pc, #240]	; (80129a0 <LidarSetPos+0x3318>)
 80128b0:	4a3c      	ldr	r2, [pc, #240]	; (80129a4 <LidarSetPos+0x331c>)
 80128b2:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 80128b4:	4b3c      	ldr	r3, [pc, #240]	; (80129a8 <LidarSetPos+0x3320>)
 80128b6:	4a3d      	ldr	r2, [pc, #244]	; (80129ac <LidarSetPos+0x3324>)
 80128b8:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 80128ba:	4b3d      	ldr	r3, [pc, #244]	; (80129b0 <LidarSetPos+0x3328>)
 80128bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128c2:	d10d      	bne.n	80128e0 <LidarSetPos+0x3258>
							{
								while(ps4.button == SQUARE);
 80128c4:	bf00      	nop
 80128c6:	4b3a      	ldr	r3, [pc, #232]	; (80129b0 <LidarSetPos+0x3328>)
 80128c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128ce:	d0fa      	beq.n	80128c6 <LidarSetPos+0x323e>
								PP_stop(&pp);
 80128d0:	4838      	ldr	r0, [pc, #224]	; (80129b4 <LidarSetPos+0x332c>)
 80128d2:	f7f3 fcfd 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 80128d6:	463b      	mov	r3, r7
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2201      	movs	r2, #1
 80128dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_2; // PP Failed
	//							lidar->pos_counter = CENTER_2;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 80128e0:	2108      	movs	r1, #8
 80128e2:	4840      	ldr	r0, [pc, #256]	; (80129e4 <LidarSetPos+0x335c>)
 80128e4:	f004 ff4c 	bl	8017780 <HAL_GPIO_ReadPin>
 80128e8:	4603      	mov	r3, r0
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d006      	beq.n	80128fc <LidarSetPos+0x3274>
 80128ee:	2110      	movs	r1, #16
 80128f0:	483c      	ldr	r0, [pc, #240]	; (80129e4 <LidarSetPos+0x335c>)
 80128f2:	f004 ff45 	bl	8017780 <HAL_GPIO_ReadPin>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d109      	bne.n	8012910 <LidarSetPos+0x3288>
							{
								pp.target_y[0] = pp.real_y;
 80128fc:	4b2d      	ldr	r3, [pc, #180]	; (80129b4 <LidarSetPos+0x332c>)
 80128fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012900:	4a2c      	ldr	r2, [pc, #176]	; (80129b4 <LidarSetPos+0x332c>)
 8012902:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012906:	4b2b      	ldr	r3, [pc, #172]	; (80129b4 <LidarSetPos+0x332c>)
 8012908:	f04f 0200 	mov.w	r2, #0
 801290c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_2_to_center_3[0][1])
 8012910:	4b28      	ldr	r3, [pc, #160]	; (80129b4 <LidarSetPos+0x332c>)
 8012912:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012916:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801291a:	edd3 7a01 	vldr	s15, [r3, #4]
 801291e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012926:	da00      	bge.n	801292a <LidarSetPos+0x32a2>
 8012928:	e009      	b.n	801293e <LidarSetPos+0x32b6>
							{
								pp.target_y[0] = pp.real_y;
 801292a:	4b22      	ldr	r3, [pc, #136]	; (80129b4 <LidarSetPos+0x332c>)
 801292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801292e:	4a21      	ldr	r2, [pc, #132]	; (80129b4 <LidarSetPos+0x332c>)
 8012930:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012934:	4b1f      	ldr	r3, [pc, #124]	; (80129b4 <LidarSetPos+0x332c>)
 8012936:	f04f 0200 	mov.w	r2, #0
 801293a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 801293e:	4b1d      	ldr	r3, [pc, #116]	; (80129b4 <LidarSetPos+0x332c>)
 8012940:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012944:	f003 0301 	and.w	r3, r3, #1
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	d19b      	bne.n	8012886 <LidarSetPos+0x31fe>
 801294e:	e090      	b.n	8012a72 <LidarSetPos+0x33ea>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_3;
 8012950:	463b      	mov	r3, r7
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2206      	movs	r2, #6
 8012956:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_3, 1, &pp, 0, 1);
 801295a:	f207 406c 	addw	r0, r7, #1132	; 0x46c
 801295e:	2301      	movs	r3, #1
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	2300      	movs	r3, #0
 8012964:	4a13      	ldr	r2, [pc, #76]	; (80129b4 <LidarSetPos+0x332c>)
 8012966:	2101      	movs	r1, #1
 8012968:	f7f3 fb40 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 801296c:	e078      	b.n	8012a60 <LidarSetPos+0x33d8>
						{
							if(ps4.button == UP)
 801296e:	4b10      	ldr	r3, [pc, #64]	; (80129b0 <LidarSetPos+0x3328>)
 8012970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012972:	2b10      	cmp	r3, #16
 8012974:	d13e      	bne.n	80129f4 <LidarSetPos+0x336c>
							{
								while(ps4.button == UP);
 8012976:	bf00      	nop
 8012978:	4b0d      	ldr	r3, [pc, #52]	; (80129b0 <LidarSetPos+0x3328>)
 801297a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801297c:	2b10      	cmp	r3, #16
 801297e:	d0fb      	beq.n	8012978 <LidarSetPos+0x32f0>
								if(blue)
 8012980:	4b11      	ldr	r3, [pc, #68]	; (80129c8 <LidarSetPos+0x3340>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d02f      	beq.n	80129e8 <LidarSetPos+0x3360>
								{
									vesc_speed = BlueOppoType2;
 8012988:	4b05      	ldr	r3, [pc, #20]	; (80129a0 <LidarSetPos+0x3318>)
 801298a:	4a14      	ldr	r2, [pc, #80]	; (80129dc <LidarSetPos+0x3354>)
 801298c:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 801298e:	4b06      	ldr	r3, [pc, #24]	; (80129a8 <LidarSetPos+0x3320>)
 8012990:	4a13      	ldr	r2, [pc, #76]	; (80129e0 <LidarSetPos+0x3358>)
 8012992:	601a      	str	r2, [r3, #0]
 8012994:	e02e      	b.n	80129f4 <LidarSetPos+0x336c>
 8012996:	bf00      	nop
 8012998:	9999999a 	.word	0x9999999a
 801299c:	3fc99999 	.word	0x3fc99999
 80129a0:	200065c0 	.word	0x200065c0
 80129a4:	4154cccd 	.word	0x4154cccd
 80129a8:	2000749c 	.word	0x2000749c
 80129ac:	45039000 	.word	0x45039000
 80129b0:	2000a244 	.word	0x2000a244
 80129b4:	20006d4c 	.word	0x20006d4c
 80129b8:	20009600 	.word	0x20009600
 80129bc:	3fe00000 	.word	0x3fe00000
 80129c0:	c2b60000 	.word	0xc2b60000
 80129c4:	200073d8 	.word	0x200073d8
 80129c8:	20006a4c 	.word	0x20006a4c
 80129cc:	41026666 	.word	0x41026666
 80129d0:	44bea000 	.word	0x44bea000
 80129d4:	4104cccd 	.word	0x4104cccd
 80129d8:	44c1c000 	.word	0x44c1c000
 80129dc:	414f3333 	.word	0x414f3333
 80129e0:	45020000 	.word	0x45020000
 80129e4:	40020c00 	.word	0x40020c00
								}
								else
								{
									vesc_speed = RedOppoType2;
 80129e8:	4bb7      	ldr	r3, [pc, #732]	; (8012cc8 <LidarSetPos+0x3640>)
 80129ea:	4ab8      	ldr	r2, [pc, #736]	; (8012ccc <LidarSetPos+0x3644>)
 80129ec:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 80129ee:	4bb8      	ldr	r3, [pc, #736]	; (8012cd0 <LidarSetPos+0x3648>)
 80129f0:	4ab8      	ldr	r2, [pc, #736]	; (8012cd4 <LidarSetPos+0x364c>)
 80129f2:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 80129f4:	4bb8      	ldr	r3, [pc, #736]	; (8012cd8 <LidarSetPos+0x3650>)
 80129f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129fc:	d108      	bne.n	8012a10 <LidarSetPos+0x3388>
							{
								while(ps4.button == SQUARE);
 80129fe:	bf00      	nop
 8012a00:	4bb5      	ldr	r3, [pc, #724]	; (8012cd8 <LidarSetPos+0x3650>)
 8012a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a08:	d0fa      	beq.n	8012a00 <LidarSetPos+0x3378>
								PP_stop(&pp);
 8012a0a:	48b4      	ldr	r0, [pc, #720]	; (8012cdc <LidarSetPos+0x3654>)
 8012a0c:	f7f3 fc60 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_3[0][1] + Offset_2 - 0.4)
 8012a10:	4bb3      	ldr	r3, [pc, #716]	; (8012ce0 <LidarSetPos+0x3658>)
 8012a12:	69db      	ldr	r3, [r3, #28]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7ed fd97 	bl	8000548 <__aeabi_f2d>
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ed fd8f 	bl	8000548 <__aeabi_f2d>
 8012a2a:	f04f 0200 	mov.w	r2, #0
 8012a2e:	4bad      	ldr	r3, [pc, #692]	; (8012ce4 <LidarSetPos+0x365c>)
 8012a30:	f7ed fc2c 	bl	800028c <__adddf3>
 8012a34:	4602      	mov	r2, r0
 8012a36:	460b      	mov	r3, r1
 8012a38:	4610      	mov	r0, r2
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	a39e      	add	r3, pc, #632	; (adr r3, 8012cb8 <LidarSetPos+0x3630>)
 8012a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a42:	f7ed fc21 	bl	8000288 <__aeabi_dsub>
 8012a46:	4602      	mov	r2, r0
 8012a48:	460b      	mov	r3, r1
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	4629      	mov	r1, r5
 8012a4e:	f7ee f84f 	bl	8000af0 <__aeabi_dcmple>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d100      	bne.n	8012a5a <LidarSetPos+0x33d2>
 8012a58:	e002      	b.n	8012a60 <LidarSetPos+0x33d8>
								PP_stop(&pp);
 8012a5a:	48a0      	ldr	r0, [pc, #640]	; (8012cdc <LidarSetPos+0x3654>)
 8012a5c:	f7f3 fc38 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8012a60:	4b9e      	ldr	r3, [pc, #632]	; (8012cdc <LidarSetPos+0x3654>)
 8012a62:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012a66:	f003 0310 	and.w	r3, r3, #16
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f47f af7e 	bne.w	801296e <LidarSetPos+0x32e6>
						}
					}

					PP_start(robot_center, 1, &pp);
 8012a72:	f107 030c 	add.w	r3, r7, #12
 8012a76:	4a99      	ldr	r2, [pc, #612]	; (8012cdc <LidarSetPos+0x3654>)
 8012a78:	2101      	movs	r1, #1
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7f3 f8f0 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8012a80:	f003 f802 	bl	8015a88 <HAL_GetTick>
 8012a84:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8012a88:	e01c      	b.n	8012ac4 <LidarSetPos+0x343c>
					{
						after = HAL_GetTick();
 8012a8a:	f002 fffd 	bl	8015a88 <HAL_GetTick>
 8012a8e:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(after - before >= 1000)
 8012a92:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8012a96:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012aa0:	d302      	bcc.n	8012aa8 <LidarSetPos+0x3420>
							PP_stop(&pp);
 8012aa2:	488e      	ldr	r0, [pc, #568]	; (8012cdc <LidarSetPos+0x3654>)
 8012aa4:	f7f3 fc14 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8012aa8:	4b8b      	ldr	r3, [pc, #556]	; (8012cd8 <LidarSetPos+0x3650>)
 8012aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ab0:	d108      	bne.n	8012ac4 <LidarSetPos+0x343c>
						{
							while(ps4.button == SQUARE);
 8012ab2:	bf00      	nop
 8012ab4:	4b88      	ldr	r3, [pc, #544]	; (8012cd8 <LidarSetPos+0x3650>)
 8012ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012abc:	d0fa      	beq.n	8012ab4 <LidarSetPos+0x342c>
							PP_stop(&pp);
 8012abe:	4887      	ldr	r0, [pc, #540]	; (8012cdc <LidarSetPos+0x3654>)
 8012ac0:	f7f3 fc06 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8012ac4:	4b85      	ldr	r3, [pc, #532]	; (8012cdc <LidarSetPos+0x3654>)
 8012ac6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012aca:	f003 0301 	and.w	r3, r3, #1
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d1da      	bne.n	8012a8a <LidarSetPos+0x3402>
						}
					}
					if(lidar->autoshot)
 8012ad4:	463b      	mov	r3, r7
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d005      	beq.n	8012aec <LidarSetPos+0x3464>
					{
						osDelay(300);
 8012ae0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012ae4:	f009 fd06 	bl	801c4f4 <osDelay>
						Shot();
 8012ae8:	f7fb fd9a 	bl	800e620 <Shot>
					}
					stick_fence = 1;
 8012aec:	4b7e      	ldr	r3, [pc, #504]	; (8012ce8 <LidarSetPos+0x3660>)
 8012aee:	2201      	movs	r2, #1
 8012af0:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 8012af2:	463b      	mov	r3, r7
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f040 8172 	bne.w	8012de4 <LidarSetPos+0x375c>
						LidarAdjust(lidar);
 8012b00:	463b      	mov	r3, r7
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	f002 f930 	bl	8014d68 <LidarAdjust>
					break;
 8012b08:	e16c      	b.n	8012de4 <LidarSetPos+0x375c>


				case CENTER_4:
					stick_fence = 0;
 8012b0a:	4b77      	ldr	r3, [pc, #476]	; (8012ce8 <LidarSetPos+0x3660>)
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012b10:	463b      	mov	r3, r7
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	2200      	movs	r2, #0
 8012b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8012b1a:	4b74      	ldr	r3, [pc, #464]	; (8012cec <LidarSetPos+0x3664>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d006      	beq.n	8012b30 <LidarSetPos+0x34a8>
					{
						vesc_speed = BlueType2;
 8012b22:	4b69      	ldr	r3, [pc, #420]	; (8012cc8 <LidarSetPos+0x3640>)
 8012b24:	4a72      	ldr	r2, [pc, #456]	; (8012cf0 <LidarSetPos+0x3668>)
 8012b26:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8012b28:	4b69      	ldr	r3, [pc, #420]	; (8012cd0 <LidarSetPos+0x3648>)
 8012b2a:	4a72      	ldr	r2, [pc, #456]	; (8012cf4 <LidarSetPos+0x366c>)
 8012b2c:	601a      	str	r2, [r3, #0]
 8012b2e:	e005      	b.n	8012b3c <LidarSetPos+0x34b4>
					}
					else
					{
						vesc_speed = RedType2;
 8012b30:	4b65      	ldr	r3, [pc, #404]	; (8012cc8 <LidarSetPos+0x3640>)
 8012b32:	4a71      	ldr	r2, [pc, #452]	; (8012cf8 <LidarSetPos+0x3670>)
 8012b34:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8012b36:	4b66      	ldr	r3, [pc, #408]	; (8012cd0 <LidarSetPos+0x3648>)
 8012b38:	4a70      	ldr	r2, [pc, #448]	; (8012cfc <LidarSetPos+0x3674>)
 8012b3a:	601a      	str	r2, [r3, #0]
					}
					if(!lidar->laser)
 8012b3c:	463b      	mov	r3, r7
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d159      	bne.n	8012bfc <LidarSetPos+0x3574>
					{
						ResetCoordinate();
 8012b48:	f7fb fa1c 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_3;
 8012b4c:	463b      	mov	r3, r7
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2206      	movs	r2, #6
 8012b52:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_4_to_center_3, 1, &pp);
 8012b56:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8012b5a:	4a60      	ldr	r2, [pc, #384]	; (8012cdc <LidarSetPos+0x3654>)
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7f3 f87e 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8012b64:	e041      	b.n	8012bea <LidarSetPos+0x3562>
						{
							if(ps4.button == SQUARE)
 8012b66:	4b5c      	ldr	r3, [pc, #368]	; (8012cd8 <LidarSetPos+0x3650>)
 8012b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b6e:	d10d      	bne.n	8012b8c <LidarSetPos+0x3504>
							{
								while(ps4.button == SQUARE);
 8012b70:	bf00      	nop
 8012b72:	4b59      	ldr	r3, [pc, #356]	; (8012cd8 <LidarSetPos+0x3650>)
 8012b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b7a:	d0fa      	beq.n	8012b72 <LidarSetPos+0x34ea>
								PP_stop(&pp);
 8012b7c:	4857      	ldr	r0, [pc, #348]	; (8012cdc <LidarSetPos+0x3654>)
 8012b7e:	f7f3 fba7 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 8012b82:	463b      	mov	r3, r7
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2201      	movs	r2, #1
 8012b88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_4;
	//							lidar->pos_counter = CENTER_4;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8012b8c:	2108      	movs	r1, #8
 8012b8e:	485c      	ldr	r0, [pc, #368]	; (8012d00 <LidarSetPos+0x3678>)
 8012b90:	f004 fdf6 	bl	8017780 <HAL_GPIO_ReadPin>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d006      	beq.n	8012ba8 <LidarSetPos+0x3520>
 8012b9a:	2110      	movs	r1, #16
 8012b9c:	4858      	ldr	r0, [pc, #352]	; (8012d00 <LidarSetPos+0x3678>)
 8012b9e:	f004 fdef 	bl	8017780 <HAL_GPIO_ReadPin>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d109      	bne.n	8012bbc <LidarSetPos+0x3534>
							{
								pp.target_y[0] = pp.real_y;
 8012ba8:	4b4c      	ldr	r3, [pc, #304]	; (8012cdc <LidarSetPos+0x3654>)
 8012baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bac:	4a4b      	ldr	r2, [pc, #300]	; (8012cdc <LidarSetPos+0x3654>)
 8012bae:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012bb2:	4b4a      	ldr	r3, [pc, #296]	; (8012cdc <LidarSetPos+0x3654>)
 8012bb4:	f04f 0200 	mov.w	r2, #0
 8012bb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_4_to_center_3[0][1])
 8012bbc:	4b47      	ldr	r3, [pc, #284]	; (8012cdc <LidarSetPos+0x3654>)
 8012bbe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012bc2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8012bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8012bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd2:	d900      	bls.n	8012bd6 <LidarSetPos+0x354e>
 8012bd4:	e009      	b.n	8012bea <LidarSetPos+0x3562>
							{
								pp.target_y[0] = pp.real_y;
 8012bd6:	4b41      	ldr	r3, [pc, #260]	; (8012cdc <LidarSetPos+0x3654>)
 8012bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bda:	4a40      	ldr	r2, [pc, #256]	; (8012cdc <LidarSetPos+0x3654>)
 8012bdc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012be0:	4b3e      	ldr	r3, [pc, #248]	; (8012cdc <LidarSetPos+0x3654>)
 8012be2:	f04f 0200 	mov.w	r2, #0
 8012be6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8012bea:	4b3c      	ldr	r3, [pc, #240]	; (8012cdc <LidarSetPos+0x3654>)
 8012bec:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012bf0:	f003 0301 	and.w	r3, r3, #1
 8012bf4:	b2db      	uxtb	r3, r3
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1b5      	bne.n	8012b66 <LidarSetPos+0x34de>
 8012bfa:	e095      	b.n	8012d28 <LidarSetPos+0x36a0>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_3;
 8012bfc:	463b      	mov	r3, r7
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2206      	movs	r2, #6
 8012c02:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_3, 1, &pp, 0, 1);
 8012c06:	f207 406c 	addw	r0, r7, #1132	; 0x46c
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	9300      	str	r3, [sp, #0]
 8012c0e:	2300      	movs	r3, #0
 8012c10:	4a32      	ldr	r2, [pc, #200]	; (8012cdc <LidarSetPos+0x3654>)
 8012c12:	2101      	movs	r1, #1
 8012c14:	f7f3 f9ea 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 8012c18:	e07d      	b.n	8012d16 <LidarSetPos+0x368e>
						{
							if(ps4.button == UP)
 8012c1a:	4b2f      	ldr	r3, [pc, #188]	; (8012cd8 <LidarSetPos+0x3650>)
 8012c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c1e:	2b10      	cmp	r3, #16
 8012c20:	d115      	bne.n	8012c4e <LidarSetPos+0x35c6>
							{
								while(ps4.button == UP);
 8012c22:	bf00      	nop
 8012c24:	4b2c      	ldr	r3, [pc, #176]	; (8012cd8 <LidarSetPos+0x3650>)
 8012c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c28:	2b10      	cmp	r3, #16
 8012c2a:	d0fb      	beq.n	8012c24 <LidarSetPos+0x359c>
								if(blue)
 8012c2c:	4b2f      	ldr	r3, [pc, #188]	; (8012cec <LidarSetPos+0x3664>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d006      	beq.n	8012c42 <LidarSetPos+0x35ba>
								{
									vesc_speed = BlueOppoType2;
 8012c34:	4b24      	ldr	r3, [pc, #144]	; (8012cc8 <LidarSetPos+0x3640>)
 8012c36:	4a33      	ldr	r2, [pc, #204]	; (8012d04 <LidarSetPos+0x367c>)
 8012c38:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8012c3a:	4b25      	ldr	r3, [pc, #148]	; (8012cd0 <LidarSetPos+0x3648>)
 8012c3c:	4a32      	ldr	r2, [pc, #200]	; (8012d08 <LidarSetPos+0x3680>)
 8012c3e:	601a      	str	r2, [r3, #0]
 8012c40:	e005      	b.n	8012c4e <LidarSetPos+0x35c6>
								}
								else
								{
									vesc_speed = RedOppoType2;
 8012c42:	4b21      	ldr	r3, [pc, #132]	; (8012cc8 <LidarSetPos+0x3640>)
 8012c44:	4a21      	ldr	r2, [pc, #132]	; (8012ccc <LidarSetPos+0x3644>)
 8012c46:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8012c48:	4b21      	ldr	r3, [pc, #132]	; (8012cd0 <LidarSetPos+0x3648>)
 8012c4a:	4a22      	ldr	r2, [pc, #136]	; (8012cd4 <LidarSetPos+0x364c>)
 8012c4c:	601a      	str	r2, [r3, #0]
								}
							}
							if(ps4.button == SQUARE)
 8012c4e:	4b22      	ldr	r3, [pc, #136]	; (8012cd8 <LidarSetPos+0x3650>)
 8012c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c56:	d108      	bne.n	8012c6a <LidarSetPos+0x35e2>
							{
								while(ps4.button == SQUARE);
 8012c58:	bf00      	nop
 8012c5a:	4b1f      	ldr	r3, [pc, #124]	; (8012cd8 <LidarSetPos+0x3650>)
 8012c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c62:	d0fa      	beq.n	8012c5a <LidarSetPos+0x35d2>
								PP_stop(&pp);
 8012c64:	481d      	ldr	r0, [pc, #116]	; (8012cdc <LidarSetPos+0x3654>)
 8012c66:	f7f3 fb33 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist >= lsr_center_3[0][1] - Offset - 0.05)
 8012c6a:	4b1d      	ldr	r3, [pc, #116]	; (8012ce0 <LidarSetPos+0x3658>)
 8012c6c:	69db      	ldr	r3, [r3, #28]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ed fc6a 	bl	8000548 <__aeabi_f2d>
 8012c74:	4604      	mov	r4, r0
 8012c76:	460d      	mov	r5, r1
 8012c78:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ed fc62 	bl	8000548 <__aeabi_f2d>
 8012c84:	f04f 0200 	mov.w	r2, #0
 8012c88:	4b20      	ldr	r3, [pc, #128]	; (8012d0c <LidarSetPos+0x3684>)
 8012c8a:	f7ed fafd 	bl	8000288 <__aeabi_dsub>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	460b      	mov	r3, r1
 8012c92:	4610      	mov	r0, r2
 8012c94:	4619      	mov	r1, r3
 8012c96:	a30a      	add	r3, pc, #40	; (adr r3, 8012cc0 <LidarSetPos+0x3638>)
 8012c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9c:	f7ed faf4 	bl	8000288 <__aeabi_dsub>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	460b      	mov	r3, r1
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	f7ed ff2c 	bl	8000b04 <__aeabi_dcmpge>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d12e      	bne.n	8012d10 <LidarSetPos+0x3688>
 8012cb2:	e030      	b.n	8012d16 <LidarSetPos+0x368e>
 8012cb4:	f3af 8000 	nop.w
 8012cb8:	9999999a 	.word	0x9999999a
 8012cbc:	3fd99999 	.word	0x3fd99999
 8012cc0:	9999999a 	.word	0x9999999a
 8012cc4:	3fa99999 	.word	0x3fa99999
 8012cc8:	200065c0 	.word	0x200065c0
 8012ccc:	4154cccd 	.word	0x4154cccd
 8012cd0:	2000749c 	.word	0x2000749c
 8012cd4:	45039000 	.word	0x45039000
 8012cd8:	2000a244 	.word	0x2000a244
 8012cdc:	20006d4c 	.word	0x20006d4c
 8012ce0:	20009600 	.word	0x20009600
 8012ce4:	3fe80000 	.word	0x3fe80000
 8012ce8:	200073d8 	.word	0x200073d8
 8012cec:	20006a4c 	.word	0x20006a4c
 8012cf0:	41026666 	.word	0x41026666
 8012cf4:	44bea000 	.word	0x44bea000
 8012cf8:	4104cccd 	.word	0x4104cccd
 8012cfc:	44c1c000 	.word	0x44c1c000
 8012d00:	40020c00 	.word	0x40020c00
 8012d04:	414f3333 	.word	0x414f3333
 8012d08:	45020000 	.word	0x45020000
 8012d0c:	3fe00000 	.word	0x3fe00000
								PP_stop(&pp);
 8012d10:	48b1      	ldr	r0, [pc, #708]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d12:	f7f3 fadd 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8012d16:	4bb0      	ldr	r3, [pc, #704]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d18:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012d1c:	f003 0310 	and.w	r3, r3, #16
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	f47f af79 	bne.w	8012c1a <LidarSetPos+0x3592>
						}
					}

					// Robot will slanted to right after path plan, need to fix the slanted right problem
					PP_start(robot_center, 1, &pp);
 8012d28:	f107 030c 	add.w	r3, r7, #12
 8012d2c:	4aaa      	ldr	r2, [pc, #680]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d2e:	2101      	movs	r1, #1
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f2 ff95 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8012d36:	f002 fea7 	bl	8015a88 <HAL_GetTick>
 8012d3a:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8012d3e:	e026      	b.n	8012d8e <LidarSetPos+0x3706>
					{
						after = HAL_GetTick();
 8012d40:	f002 fea2 	bl	8015a88 <HAL_GetTick>
 8012d44:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z <= -89 && (after - before) >= 700)
 8012d48:	4ba3      	ldr	r3, [pc, #652]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d4a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012d4e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8012fdc <LidarSetPos+0x3954>
 8012d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d5a:	d80a      	bhi.n	8012d72 <LidarSetPos+0x36ea>
 8012d5c:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8012d60:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012d64:	1ad3      	subs	r3, r2, r3
 8012d66:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012d6a:	d302      	bcc.n	8012d72 <LidarSetPos+0x36ea>
							PP_stop(&pp);
 8012d6c:	489a      	ldr	r0, [pc, #616]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d6e:	f7f3 faaf 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8012d72:	4b9b      	ldr	r3, [pc, #620]	; (8012fe0 <LidarSetPos+0x3958>)
 8012d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d7a:	d108      	bne.n	8012d8e <LidarSetPos+0x3706>
						{
							while(ps4.button == SQUARE);
 8012d7c:	bf00      	nop
 8012d7e:	4b98      	ldr	r3, [pc, #608]	; (8012fe0 <LidarSetPos+0x3958>)
 8012d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d86:	d0fa      	beq.n	8012d7e <LidarSetPos+0x36f6>
							PP_stop(&pp);
 8012d88:	4893      	ldr	r0, [pc, #588]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d8a:	f7f3 faa1 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8012d8e:	4b92      	ldr	r3, [pc, #584]	; (8012fd8 <LidarSetPos+0x3950>)
 8012d90:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d1d0      	bne.n	8012d40 <LidarSetPos+0x36b8>
						}
					}
					stick_fence = 1;
 8012d9e:	4b91      	ldr	r3, [pc, #580]	; (8012fe4 <LidarSetPos+0x395c>)
 8012da0:	2201      	movs	r2, #1
 8012da2:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8012da4:	463b      	mov	r3, r7
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d005      	beq.n	8012dbc <LidarSetPos+0x3734>
					{
						osDelay(300);
 8012db0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012db4:	f009 fb9e 	bl	801c4f4 <osDelay>
						Shot();
 8012db8:	f7fb fc32 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8012dbc:	463b      	mov	r3, r7
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d110      	bne.n	8012dea <LidarSetPos+0x3762>
						LidarAdjust(lidar);
 8012dc8:	463b      	mov	r3, r7
 8012dca:	6818      	ldr	r0, [r3, #0]
 8012dcc:	f001 ffcc 	bl	8014d68 <LidarAdjust>
					break;
 8012dd0:	e00b      	b.n	8012dea <LidarSetPos+0x3762>
				default:
					break;
 8012dd2:	bf00      	nop
 8012dd4:	f001 b873 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8012dd8:	bf00      	nop
 8012dda:	f001 b870 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8012dde:	bf00      	nop
 8012de0:	f001 b86d 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8012de4:	bf00      	nop
 8012de6:	f001 b86a 	b.w	8013ebe <LidarSetPos+0x4836>
					break;
 8012dea:	bf00      	nop
			}
			break;
 8012dec:	f001 b867 	b.w	8013ebe <LidarSetPos+0x4836>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 8012df0:	463b      	mov	r3, r7
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	2b08      	cmp	r3, #8
 8012dfc:	f200 8504 	bhi.w	8013808 <LidarSetPos+0x4180>
 8012e00:	a201      	add	r2, pc, #4	; (adr r2, 8012e08 <LidarSetPos+0x3780>)
 8012e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e06:	bf00      	nop
 8012e08:	08012e2d 	.word	0x08012e2d
 8012e0c:	08013491 	.word	0x08013491
 8012e10:	08012e3b 	.word	0x08012e3b
 8012e14:	08012f8b 	.word	0x08012f8b
 8012e18:	08013115 	.word	0x08013115
 8012e1c:	080135e9 	.word	0x080135e9
 8012e20:	08013809 	.word	0x08013809
 8012e24:	0801349d 	.word	0x0801349d
 8012e28:	08013371 	.word	0x08013371
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 8012e2c:	463b      	mov	r3, r7
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2207      	movs	r2, #7
 8012e32:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8012e36:	f000 bcf0 	b.w	801381a <LidarSetPos+0x4192>

				case CENTER_1:
					stick_fence = 0;
 8012e3a:	4b6a      	ldr	r3, [pc, #424]	; (8012fe4 <LidarSetPos+0x395c>)
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012e40:	463b      	mov	r3, r7
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2200      	movs	r2, #0
 8012e46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 8012e4a:	4b67      	ldr	r3, [pc, #412]	; (8012fe8 <LidarSetPos+0x3960>)
 8012e4c:	4a67      	ldr	r2, [pc, #412]	; (8012fec <LidarSetPos+0x3964>)
 8012e4e:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8012e50:	4b67      	ldr	r3, [pc, #412]	; (8012ff0 <LidarSetPos+0x3968>)
 8012e52:	4a68      	ldr	r2, [pc, #416]	; (8012ff4 <LidarSetPos+0x396c>)
 8012e54:	601a      	str	r2, [r3, #0]

					lidar->pos = CENTER_4;
 8012e56:	463b      	mov	r3, r7
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2207      	movs	r2, #7
 8012e5c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_4, 1, &pp, 0, 1);
 8012e60:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 8012e64:	2301      	movs	r3, #1
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4a5b      	ldr	r2, [pc, #364]	; (8012fd8 <LidarSetPos+0x3950>)
 8012e6c:	2101      	movs	r1, #1
 8012e6e:	f7f3 f8bd 	bl	8005fec <LSR_start>
					while(pp.lsr_start)
 8012e72:	e035      	b.n	8012ee0 <LidarSetPos+0x3858>
					{
						if(ps4.button == SQUARE)
 8012e74:	4b5a      	ldr	r3, [pc, #360]	; (8012fe0 <LidarSetPos+0x3958>)
 8012e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e7c:	d108      	bne.n	8012e90 <LidarSetPos+0x3808>
						{
							while(ps4.button == SQUARE);
 8012e7e:	bf00      	nop
 8012e80:	4b57      	ldr	r3, [pc, #348]	; (8012fe0 <LidarSetPos+0x3958>)
 8012e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e88:	d0fa      	beq.n	8012e80 <LidarSetPos+0x37f8>
							PP_stop(&pp);
 8012e8a:	4853      	ldr	r0, [pc, #332]	; (8012fd8 <LidarSetPos+0x3950>)
 8012e8c:	f7f3 fa20 	bl	80062d0 <PP_stop>
						}

						if(lsrR.dist <= lsr_center_4[0][1] + Offset_4 + 0.08)
 8012e90:	4b59      	ldr	r3, [pc, #356]	; (8012ff8 <LidarSetPos+0x3970>)
 8012e92:	69db      	ldr	r3, [r3, #28]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7ed fb57 	bl	8000548 <__aeabi_f2d>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	460d      	mov	r5, r1
 8012e9e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7ed fb4f 	bl	8000548 <__aeabi_f2d>
 8012eaa:	a347      	add	r3, pc, #284	; (adr r3, 8012fc8 <LidarSetPos+0x3940>)
 8012eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb0:	f7ed f9ec 	bl	800028c <__adddf3>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	4610      	mov	r0, r2
 8012eba:	4619      	mov	r1, r3
 8012ebc:	a344      	add	r3, pc, #272	; (adr r3, 8012fd0 <LidarSetPos+0x3948>)
 8012ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec2:	f7ed f9e3 	bl	800028c <__adddf3>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4620      	mov	r0, r4
 8012ecc:	4629      	mov	r1, r5
 8012ece:	f7ed fe0f 	bl	8000af0 <__aeabi_dcmple>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d100      	bne.n	8012eda <LidarSetPos+0x3852>
 8012ed8:	e002      	b.n	8012ee0 <LidarSetPos+0x3858>
							PP_stop(&pp);
 8012eda:	483f      	ldr	r0, [pc, #252]	; (8012fd8 <LidarSetPos+0x3950>)
 8012edc:	f7f3 f9f8 	bl	80062d0 <PP_stop>
					while(pp.lsr_start)
 8012ee0:	4b3d      	ldr	r3, [pc, #244]	; (8012fd8 <LidarSetPos+0x3950>)
 8012ee2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012ee6:	f003 0310 	and.w	r3, r3, #16
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1c1      	bne.n	8012e74 <LidarSetPos+0x37ec>
					}


					PP_start(robot_center, 1, &pp);
 8012ef0:	f107 030c 	add.w	r3, r7, #12
 8012ef4:	4a38      	ldr	r2, [pc, #224]	; (8012fd8 <LidarSetPos+0x3950>)
 8012ef6:	2101      	movs	r1, #1
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7f2 feb1 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8012efe:	f002 fdc3 	bl	8015a88 <HAL_GetTick>
 8012f02:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8012f06:	e026      	b.n	8012f56 <LidarSetPos+0x38ce>
					{
						after = HAL_GetTick();
 8012f08:	f002 fdbe 	bl	8015a88 <HAL_GetTick>
 8012f0c:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 8012f10:	4b31      	ldr	r3, [pc, #196]	; (8012fd8 <LidarSetPos+0x3950>)
 8012f12:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012f16:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012ffc <LidarSetPos+0x3974>
 8012f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f22:	db0a      	blt.n	8012f3a <LidarSetPos+0x38b2>
 8012f24:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8012f28:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012f32:	d302      	bcc.n	8012f3a <LidarSetPos+0x38b2>
							PP_stop(&pp);
 8012f34:	4828      	ldr	r0, [pc, #160]	; (8012fd8 <LidarSetPos+0x3950>)
 8012f36:	f7f3 f9cb 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 8012f3a:	4b29      	ldr	r3, [pc, #164]	; (8012fe0 <LidarSetPos+0x3958>)
 8012f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f42:	d108      	bne.n	8012f56 <LidarSetPos+0x38ce>
						{
							while(ps4.button == SQUARE);
 8012f44:	bf00      	nop
 8012f46:	4b26      	ldr	r3, [pc, #152]	; (8012fe0 <LidarSetPos+0x3958>)
 8012f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f4e:	d0fa      	beq.n	8012f46 <LidarSetPos+0x38be>
							PP_stop(&pp);
 8012f50:	4821      	ldr	r0, [pc, #132]	; (8012fd8 <LidarSetPos+0x3950>)
 8012f52:	f7f3 f9bd 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8012f56:	4b20      	ldr	r3, [pc, #128]	; (8012fd8 <LidarSetPos+0x3950>)
 8012f58:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012f5c:	f003 0301 	and.w	r3, r3, #1
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d1d0      	bne.n	8012f08 <LidarSetPos+0x3880>
						}
					}

					stick_fence = 1;
 8012f66:	4b1f      	ldr	r3, [pc, #124]	; (8012fe4 <LidarSetPos+0x395c>)
 8012f68:	2201      	movs	r2, #1
 8012f6a:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8012f6c:	463b      	mov	r3, r7
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f000 8449 	beq.w	801380c <LidarSetPos+0x4184>
					{
						osDelay(300);
 8012f7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012f7e:	f009 fab9 	bl	801c4f4 <osDelay>
						Shot();
 8012f82:	f7fb fb4d 	bl	800e620 <Shot>
					}
					break;
 8012f86:	f000 bc41 	b.w	801380c <LidarSetPos+0x4184>

				case CENTER_2:
					stick_fence = 0;
 8012f8a:	4b16      	ldr	r3, [pc, #88]	; (8012fe4 <LidarSetPos+0x395c>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012f90:	463b      	mov	r3, r7
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2200      	movs	r2, #0
 8012f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 8012f9a:	4b13      	ldr	r3, [pc, #76]	; (8012fe8 <LidarSetPos+0x3960>)
 8012f9c:	4a13      	ldr	r2, [pc, #76]	; (8012fec <LidarSetPos+0x3964>)
 8012f9e:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8012fa0:	4b13      	ldr	r3, [pc, #76]	; (8012ff0 <LidarSetPos+0x3968>)
 8012fa2:	4a14      	ldr	r2, [pc, #80]	; (8012ff4 <LidarSetPos+0x396c>)
 8012fa4:	601a      	str	r2, [r3, #0]

					lidar->pos = CENTER_4;
 8012fa6:	463b      	mov	r3, r7
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	2207      	movs	r2, #7
 8012fac:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_4, 1, &pp, 0, 1);
 8012fb0:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	2300      	movs	r3, #0
 8012fba:	4a07      	ldr	r2, [pc, #28]	; (8012fd8 <LidarSetPos+0x3950>)
 8012fbc:	2101      	movs	r1, #1
 8012fbe:	f7f3 f815 	bl	8005fec <LSR_start>
					while(pp.lsr_start)
 8012fc2:	e053      	b.n	801306c <LidarSetPos+0x39e4>
 8012fc4:	f3af 8000 	nop.w
 8012fc8:	f5c28f5c 	.word	0xf5c28f5c
 8012fcc:	3fe75c28 	.word	0x3fe75c28
 8012fd0:	47ae147b 	.word	0x47ae147b
 8012fd4:	3fb47ae1 	.word	0x3fb47ae1
 8012fd8:	20006d4c 	.word	0x20006d4c
 8012fdc:	c2b20000 	.word	0xc2b20000
 8012fe0:	2000a244 	.word	0x2000a244
 8012fe4:	200073d8 	.word	0x200073d8
 8012fe8:	2000749c 	.word	0x2000749c
 8012fec:	445e8000 	.word	0x445e8000
 8012ff0:	200065c0 	.word	0x200065c0
 8012ff4:	406ccccd 	.word	0x406ccccd
 8012ff8:	20009600 	.word	0x20009600
 8012ffc:	c2b60000 	.word	0xc2b60000
					{
						if(ps4.button == SQUARE)
 8013000:	4bab      	ldr	r3, [pc, #684]	; (80132b0 <LidarSetPos+0x3c28>)
 8013002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013008:	d108      	bne.n	801301c <LidarSetPos+0x3994>
						{
							while(ps4.button == SQUARE);
 801300a:	bf00      	nop
 801300c:	4ba8      	ldr	r3, [pc, #672]	; (80132b0 <LidarSetPos+0x3c28>)
 801300e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013014:	d0fa      	beq.n	801300c <LidarSetPos+0x3984>
							PP_stop(&pp);
 8013016:	48a7      	ldr	r0, [pc, #668]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013018:	f7f3 f95a 	bl	80062d0 <PP_stop>
						}

						if(lsrR.dist <= lsr_center_4[0][1] + Offset_3 + 0.1)
 801301c:	4ba6      	ldr	r3, [pc, #664]	; (80132b8 <LidarSetPos+0x3c30>)
 801301e:	69db      	ldr	r3, [r3, #28]
 8013020:	4618      	mov	r0, r3
 8013022:	f7ed fa91 	bl	8000548 <__aeabi_f2d>
 8013026:	4604      	mov	r4, r0
 8013028:	460d      	mov	r5, r1
 801302a:	f207 4354 	addw	r3, r7, #1108	; 0x454
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	4618      	mov	r0, r3
 8013032:	f7ed fa89 	bl	8000548 <__aeabi_f2d>
 8013036:	a39a      	add	r3, pc, #616	; (adr r3, 80132a0 <LidarSetPos+0x3c18>)
 8013038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303c:	f7ed f926 	bl	800028c <__adddf3>
 8013040:	4602      	mov	r2, r0
 8013042:	460b      	mov	r3, r1
 8013044:	4610      	mov	r0, r2
 8013046:	4619      	mov	r1, r3
 8013048:	a397      	add	r3, pc, #604	; (adr r3, 80132a8 <LidarSetPos+0x3c20>)
 801304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304e:	f7ed f91d 	bl	800028c <__adddf3>
 8013052:	4602      	mov	r2, r0
 8013054:	460b      	mov	r3, r1
 8013056:	4620      	mov	r0, r4
 8013058:	4629      	mov	r1, r5
 801305a:	f7ed fd49 	bl	8000af0 <__aeabi_dcmple>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d100      	bne.n	8013066 <LidarSetPos+0x39de>
 8013064:	e002      	b.n	801306c <LidarSetPos+0x39e4>
							PP_stop(&pp);
 8013066:	4893      	ldr	r0, [pc, #588]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013068:	f7f3 f932 	bl	80062d0 <PP_stop>
					while(pp.lsr_start)
 801306c:	4b91      	ldr	r3, [pc, #580]	; (80132b4 <LidarSetPos+0x3c2c>)
 801306e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013072:	f003 0310 	and.w	r3, r3, #16
 8013076:	b2db      	uxtb	r3, r3
 8013078:	2b00      	cmp	r3, #0
 801307a:	d1c1      	bne.n	8013000 <LidarSetPos+0x3978>
					}


					PP_start(robot_center, 1, &pp);
 801307c:	f107 030c 	add.w	r3, r7, #12
 8013080:	4a8c      	ldr	r2, [pc, #560]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013082:	2101      	movs	r1, #1
 8013084:	4618      	mov	r0, r3
 8013086:	f7f2 fdeb 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 801308a:	f002 fcfd 	bl	8015a88 <HAL_GetTick>
 801308e:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8013092:	e026      	b.n	80130e2 <LidarSetPos+0x3a5a>
					{
						after = HAL_GetTick();
 8013094:	f002 fcf8 	bl	8015a88 <HAL_GetTick>
 8013098:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 801309c:	4b85      	ldr	r3, [pc, #532]	; (80132b4 <LidarSetPos+0x3c2c>)
 801309e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80130a2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80132bc <LidarSetPos+0x3c34>
 80130a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ae:	db0a      	blt.n	80130c6 <LidarSetPos+0x3a3e>
 80130b0:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80130b4:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80130b8:	1ad3      	subs	r3, r2, r3
 80130ba:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80130be:	d302      	bcc.n	80130c6 <LidarSetPos+0x3a3e>
							PP_stop(&pp);
 80130c0:	487c      	ldr	r0, [pc, #496]	; (80132b4 <LidarSetPos+0x3c2c>)
 80130c2:	f7f3 f905 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 80130c6:	4b7a      	ldr	r3, [pc, #488]	; (80132b0 <LidarSetPos+0x3c28>)
 80130c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130ce:	d108      	bne.n	80130e2 <LidarSetPos+0x3a5a>
						{
							while(ps4.button == SQUARE);
 80130d0:	bf00      	nop
 80130d2:	4b77      	ldr	r3, [pc, #476]	; (80132b0 <LidarSetPos+0x3c28>)
 80130d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130da:	d0fa      	beq.n	80130d2 <LidarSetPos+0x3a4a>
							PP_stop(&pp);
 80130dc:	4875      	ldr	r0, [pc, #468]	; (80132b4 <LidarSetPos+0x3c2c>)
 80130de:	f7f3 f8f7 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80130e2:	4b74      	ldr	r3, [pc, #464]	; (80132b4 <LidarSetPos+0x3c2c>)
 80130e4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80130e8:	f003 0301 	and.w	r3, r3, #1
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d1d0      	bne.n	8013094 <LidarSetPos+0x3a0c>
						}
					}

					stick_fence = 1;
 80130f2:	4b73      	ldr	r3, [pc, #460]	; (80132c0 <LidarSetPos+0x3c38>)
 80130f4:	2201      	movs	r2, #1
 80130f6:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80130f8:	463b      	mov	r3, r7
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8013100:	2b00      	cmp	r3, #0
 8013102:	f000 8385 	beq.w	8013810 <LidarSetPos+0x4188>
					{
						osDelay(300);
 8013106:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801310a:	f009 f9f3 	bl	801c4f4 <osDelay>
						Shot();
 801310e:	f7fb fa87 	bl	800e620 <Shot>
					}

					break;
 8013112:	e37d      	b.n	8013810 <LidarSetPos+0x4188>

				case CENTER:
					stick_fence = 0;
 8013114:	4b6a      	ldr	r3, [pc, #424]	; (80132c0 <LidarSetPos+0x3c38>)
 8013116:	2200      	movs	r2, #0
 8013118:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 801311a:	463b      	mov	r3, r7
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2200      	movs	r2, #0
 8013120:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 8013124:	4b67      	ldr	r3, [pc, #412]	; (80132c4 <LidarSetPos+0x3c3c>)
 8013126:	4a68      	ldr	r2, [pc, #416]	; (80132c8 <LidarSetPos+0x3c40>)
 8013128:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 801312a:	4b68      	ldr	r3, [pc, #416]	; (80132cc <LidarSetPos+0x3c44>)
 801312c:	4a68      	ldr	r2, [pc, #416]	; (80132d0 <LidarSetPos+0x3c48>)
 801312e:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8013130:	463b      	mov	r3, r7
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013138:	2b00      	cmp	r3, #0
 801313a:	d158      	bne.n	80131ee <LidarSetPos+0x3b66>
					{
						ResetCoordinate();
 801313c:	f7fa ff22 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_4;
 8013140:	463b      	mov	r3, r7
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2207      	movs	r2, #7
 8013146:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_4, 1, &pp);
 801314a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801314e:	4a59      	ldr	r2, [pc, #356]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013150:	2101      	movs	r1, #1
 8013152:	4618      	mov	r0, r3
 8013154:	f7f2 fd84 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 8013158:	e040      	b.n	80131dc <LidarSetPos+0x3b54>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 801315a:	2108      	movs	r1, #8
 801315c:	485d      	ldr	r0, [pc, #372]	; (80132d4 <LidarSetPos+0x3c4c>)
 801315e:	f004 fb0f 	bl	8017780 <HAL_GPIO_ReadPin>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d006      	beq.n	8013176 <LidarSetPos+0x3aee>
 8013168:	2110      	movs	r1, #16
 801316a:	485a      	ldr	r0, [pc, #360]	; (80132d4 <LidarSetPos+0x3c4c>)
 801316c:	f004 fb08 	bl	8017780 <HAL_GPIO_ReadPin>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d109      	bne.n	801318a <LidarSetPos+0x3b02>
							{
								pp.target_y[0] = pp.real_y;
 8013176:	4b4f      	ldr	r3, [pc, #316]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801317a:	4a4e      	ldr	r2, [pc, #312]	; (80132b4 <LidarSetPos+0x3c2c>)
 801317c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8013180:	4b4c      	ldr	r3, [pc, #304]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013182:	f04f 0200 	mov.w	r2, #0
 8013186:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_to_center_4[0][1])
 801318a:	4b4a      	ldr	r3, [pc, #296]	; (80132b4 <LidarSetPos+0x3c2c>)
 801318c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8013190:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8013194:	edd3 7a01 	vldr	s15, [r3, #4]
 8013198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a0:	db09      	blt.n	80131b6 <LidarSetPos+0x3b2e>
							{
								pp.target_y[0] = pp.real_y;
 80131a2:	4b44      	ldr	r3, [pc, #272]	; (80132b4 <LidarSetPos+0x3c2c>)
 80131a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131a6:	4a43      	ldr	r2, [pc, #268]	; (80132b4 <LidarSetPos+0x3c2c>)
 80131a8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 80131ac:	4b41      	ldr	r3, [pc, #260]	; (80132b4 <LidarSetPos+0x3c2c>)
 80131ae:	f04f 0200 	mov.w	r2, #0
 80131b2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 80131b6:	4b3e      	ldr	r3, [pc, #248]	; (80132b0 <LidarSetPos+0x3c28>)
 80131b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131be:	d10d      	bne.n	80131dc <LidarSetPos+0x3b54>
							{
								while(ps4.button == SQUARE);
 80131c0:	bf00      	nop
 80131c2:	4b3b      	ldr	r3, [pc, #236]	; (80132b0 <LidarSetPos+0x3c28>)
 80131c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131ca:	d0fa      	beq.n	80131c2 <LidarSetPos+0x3b3a>
								PP_stop(&pp);
 80131cc:	4839      	ldr	r0, [pc, #228]	; (80132b4 <LidarSetPos+0x3c2c>)
 80131ce:	f7f3 f87f 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 80131d2:	463b      	mov	r3, r7
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2201      	movs	r2, #1
 80131d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 80131dc:	4b35      	ldr	r3, [pc, #212]	; (80132b4 <LidarSetPos+0x3c2c>)
 80131de:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80131e2:	f003 0301 	and.w	r3, r3, #1
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d1b6      	bne.n	801315a <LidarSetPos+0x3ad2>
 80131ec:	e04c      	b.n	8013288 <LidarSetPos+0x3c00>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_4;
 80131ee:	463b      	mov	r3, r7
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2207      	movs	r2, #7
 80131f4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_4, 1, &pp, 0, 1);
 80131f8:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 80131fc:	2301      	movs	r3, #1
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	2300      	movs	r3, #0
 8013202:	4a2c      	ldr	r2, [pc, #176]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013204:	2101      	movs	r1, #1
 8013206:	f7f2 fef1 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 801320a:	e035      	b.n	8013278 <LidarSetPos+0x3bf0>
						{
							if(ps4.button == SQUARE)
 801320c:	4b28      	ldr	r3, [pc, #160]	; (80132b0 <LidarSetPos+0x3c28>)
 801320e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013214:	d108      	bne.n	8013228 <LidarSetPos+0x3ba0>
							{
								while(ps4.button == SQUARE);
 8013216:	bf00      	nop
 8013218:	4b25      	ldr	r3, [pc, #148]	; (80132b0 <LidarSetPos+0x3c28>)
 801321a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013220:	d0fa      	beq.n	8013218 <LidarSetPos+0x3b90>
								PP_stop(&pp);
 8013222:	4824      	ldr	r0, [pc, #144]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013224:	f7f3 f854 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_4[0][1] + Offset_2 + 0.1)
 8013228:	4b23      	ldr	r3, [pc, #140]	; (80132b8 <LidarSetPos+0x3c30>)
 801322a:	69db      	ldr	r3, [r3, #28]
 801322c:	4618      	mov	r0, r3
 801322e:	f7ed f98b 	bl	8000548 <__aeabi_f2d>
 8013232:	4604      	mov	r4, r0
 8013234:	460d      	mov	r5, r1
 8013236:	f207 4354 	addw	r3, r7, #1108	; 0x454
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4618      	mov	r0, r3
 801323e:	f7ed f983 	bl	8000548 <__aeabi_f2d>
 8013242:	f04f 0200 	mov.w	r2, #0
 8013246:	4b24      	ldr	r3, [pc, #144]	; (80132d8 <LidarSetPos+0x3c50>)
 8013248:	f7ed f820 	bl	800028c <__adddf3>
 801324c:	4602      	mov	r2, r0
 801324e:	460b      	mov	r3, r1
 8013250:	4610      	mov	r0, r2
 8013252:	4619      	mov	r1, r3
 8013254:	a314      	add	r3, pc, #80	; (adr r3, 80132a8 <LidarSetPos+0x3c20>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	f7ed f817 	bl	800028c <__adddf3>
 801325e:	4602      	mov	r2, r0
 8013260:	460b      	mov	r3, r1
 8013262:	4620      	mov	r0, r4
 8013264:	4629      	mov	r1, r5
 8013266:	f7ed fc43 	bl	8000af0 <__aeabi_dcmple>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d100      	bne.n	8013272 <LidarSetPos+0x3bea>
 8013270:	e002      	b.n	8013278 <LidarSetPos+0x3bf0>
								PP_stop(&pp);
 8013272:	4810      	ldr	r0, [pc, #64]	; (80132b4 <LidarSetPos+0x3c2c>)
 8013274:	f7f3 f82c 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 8013278:	4b0e      	ldr	r3, [pc, #56]	; (80132b4 <LidarSetPos+0x3c2c>)
 801327a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801327e:	f003 0310 	and.w	r3, r3, #16
 8013282:	b2db      	uxtb	r3, r3
 8013284:	2b00      	cmp	r3, #0
 8013286:	d1c1      	bne.n	801320c <LidarSetPos+0x3b84>
						}
					}

					PP_start(robot_center, 1, &pp);
 8013288:	f107 030c 	add.w	r3, r7, #12
 801328c:	4a09      	ldr	r2, [pc, #36]	; (80132b4 <LidarSetPos+0x3c2c>)
 801328e:	2101      	movs	r1, #1
 8013290:	4618      	mov	r0, r3
 8013292:	f7f2 fce5 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 8013296:	f002 fbf7 	bl	8015a88 <HAL_GetTick>
 801329a:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 801329e:	e044      	b.n	801332a <LidarSetPos+0x3ca2>
 80132a0:	9999999a 	.word	0x9999999a
 80132a4:	3fe99999 	.word	0x3fe99999
 80132a8:	9999999a 	.word	0x9999999a
 80132ac:	3fb99999 	.word	0x3fb99999
 80132b0:	2000a244 	.word	0x2000a244
 80132b4:	20006d4c 	.word	0x20006d4c
 80132b8:	20009600 	.word	0x20009600
 80132bc:	c2b60000 	.word	0xc2b60000
 80132c0:	200073d8 	.word	0x200073d8
 80132c4:	2000749c 	.word	0x2000749c
 80132c8:	445e8000 	.word	0x445e8000
 80132cc:	200065c0 	.word	0x200065c0
 80132d0:	406ccccd 	.word	0x406ccccd
 80132d4:	40020c00 	.word	0x40020c00
 80132d8:	3fe80000 	.word	0x3fe80000
					{
						after = HAL_GetTick();
 80132dc:	f002 fbd4 	bl	8015a88 <HAL_GetTick>
 80132e0:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 80132e4:	4bb4      	ldr	r3, [pc, #720]	; (80135b8 <LidarSetPos+0x3f30>)
 80132e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80132ea:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80135bc <LidarSetPos+0x3f34>
 80132ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f6:	db0a      	blt.n	801330e <LidarSetPos+0x3c86>
 80132f8:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80132fc:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8013306:	d302      	bcc.n	801330e <LidarSetPos+0x3c86>
							PP_stop(&pp);
 8013308:	48ab      	ldr	r0, [pc, #684]	; (80135b8 <LidarSetPos+0x3f30>)
 801330a:	f7f2 ffe1 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 801330e:	4bac      	ldr	r3, [pc, #688]	; (80135c0 <LidarSetPos+0x3f38>)
 8013310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013316:	d108      	bne.n	801332a <LidarSetPos+0x3ca2>
						{
							while(ps4.button == SQUARE);
 8013318:	bf00      	nop
 801331a:	4ba9      	ldr	r3, [pc, #676]	; (80135c0 <LidarSetPos+0x3f38>)
 801331c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801331e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013322:	d0fa      	beq.n	801331a <LidarSetPos+0x3c92>
							PP_stop(&pp);
 8013324:	48a4      	ldr	r0, [pc, #656]	; (80135b8 <LidarSetPos+0x3f30>)
 8013326:	f7f2 ffd3 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801332a:	4ba3      	ldr	r3, [pc, #652]	; (80135b8 <LidarSetPos+0x3f30>)
 801332c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013330:	f003 0301 	and.w	r3, r3, #1
 8013334:	b2db      	uxtb	r3, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1d0      	bne.n	80132dc <LidarSetPos+0x3c54>
						}
					}

					stick_fence = 1;
 801333a:	4ba2      	ldr	r3, [pc, #648]	; (80135c4 <LidarSetPos+0x3f3c>)
 801333c:	2201      	movs	r2, #1
 801333e:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8013340:	463b      	mov	r3, r7
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8013348:	2b00      	cmp	r3, #0
 801334a:	d005      	beq.n	8013358 <LidarSetPos+0x3cd0>
					{
						osDelay(300);
 801334c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013350:	f009 f8d0 	bl	801c4f4 <osDelay>
						Shot();
 8013354:	f7fb f964 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8013358:	463b      	mov	r3, r7
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013360:	2b00      	cmp	r3, #0
 8013362:	f040 8257 	bne.w	8013814 <LidarSetPos+0x418c>
						LidarAdjust(lidar);
 8013366:	463b      	mov	r3, r7
 8013368:	6818      	ldr	r0, [r3, #0]
 801336a:	f001 fcfd 	bl	8014d68 <LidarAdjust>
					break;
 801336e:	e251      	b.n	8013814 <LidarSetPos+0x418c>

				case PICK_RIGHT:
					stick_fence = 0;
 8013370:	4b94      	ldr	r3, [pc, #592]	; (80135c4 <LidarSetPos+0x3f3c>)
 8013372:	2200      	movs	r2, #0
 8013374:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8013376:	4b94      	ldr	r3, [pc, #592]	; (80135c8 <LidarSetPos+0x3f40>)
 8013378:	4a94      	ldr	r2, [pc, #592]	; (80135cc <LidarSetPos+0x3f44>)
 801337a:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 801337c:	4b94      	ldr	r3, [pc, #592]	; (80135d0 <LidarSetPos+0x3f48>)
 801337e:	4a95      	ldr	r2, [pc, #596]	; (80135d4 <LidarSetPos+0x3f4c>)
 8013380:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 8013382:	f7fa fdff 	bl	800df84 <ResetCoordinate>
					lidar->pos = CENTER_4;
 8013386:	463b      	mov	r3, r7
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	2207      	movs	r2, #7
 801338c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 8013390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013394:	4a88      	ldr	r2, [pc, #544]	; (80135b8 <LidarSetPos+0x3f30>)
 8013396:	2101      	movs	r1, #1
 8013398:	4618      	mov	r0, r3
 801339a:	f7f2 fc61 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801339e:	e00d      	b.n	80133bc <LidarSetPos+0x3d34>
					{
						if(ps4.button == SQUARE)
 80133a0:	4b87      	ldr	r3, [pc, #540]	; (80135c0 <LidarSetPos+0x3f38>)
 80133a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133a8:	d108      	bne.n	80133bc <LidarSetPos+0x3d34>
						{
							while(ps4.button == SQUARE);
 80133aa:	bf00      	nop
 80133ac:	4b84      	ldr	r3, [pc, #528]	; (80135c0 <LidarSetPos+0x3f38>)
 80133ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133b4:	d0fa      	beq.n	80133ac <LidarSetPos+0x3d24>
							PP_stop(&pp);
 80133b6:	4880      	ldr	r0, [pc, #512]	; (80135b8 <LidarSetPos+0x3f30>)
 80133b8:	f7f2 ff8a 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80133bc:	4b7e      	ldr	r3, [pc, #504]	; (80135b8 <LidarSetPos+0x3f30>)
 80133be:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80133c2:	f003 0301 	and.w	r3, r3, #1
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d1e9      	bne.n	80133a0 <LidarSetPos+0x3d18>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}
					}
					LoadRing();
 80133cc:	f7fa fd82 	bl	800ded4 <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_4, 1, &pp);
 80133d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80133d4:	4a78      	ldr	r2, [pc, #480]	; (80135b8 <LidarSetPos+0x3f30>)
 80133d6:	2101      	movs	r1, #1
 80133d8:	4618      	mov	r0, r3
 80133da:	f7f2 fc41 	bl	8005c60 <PP_start>
//
					load_adjust = 1;
 80133de:	4b7e      	ldr	r3, [pc, #504]	; (80135d8 <LidarSetPos+0x3f50>)
 80133e0:	2201      	movs	r2, #1
 80133e2:	601a      	str	r2, [r3, #0]
					AdjustRings();
 80133e4:	f7fa fdbc 	bl	800df60 <AdjustRings>
					while(pp.pp_start)
 80133e8:	e038      	b.n	801345c <LidarSetPos+0x3dd4>
					{
						if(ps4.button == SQUARE)
 80133ea:	4b75      	ldr	r3, [pc, #468]	; (80135c0 <LidarSetPos+0x3f38>)
 80133ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133f2:	d108      	bne.n	8013406 <LidarSetPos+0x3d7e>
						{
							while(ps4.button == SQUARE);
 80133f4:	bf00      	nop
 80133f6:	4b72      	ldr	r3, [pc, #456]	; (80135c0 <LidarSetPos+0x3f38>)
 80133f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133fe:	d0fa      	beq.n	80133f6 <LidarSetPos+0x3d6e>
							PP_stop(&pp);
 8013400:	486d      	ldr	r0, [pc, #436]	; (80135b8 <LidarSetPos+0x3f30>)
 8013402:	f7f2 ff65 	bl	80062d0 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 8013406:	2108      	movs	r1, #8
 8013408:	4874      	ldr	r0, [pc, #464]	; (80135dc <LidarSetPos+0x3f54>)
 801340a:	f004 f9b9 	bl	8017780 <HAL_GPIO_ReadPin>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d006      	beq.n	8013422 <LidarSetPos+0x3d9a>
 8013414:	2110      	movs	r1, #16
 8013416:	4871      	ldr	r0, [pc, #452]	; (80135dc <LidarSetPos+0x3f54>)
 8013418:	f004 f9b2 	bl	8017780 <HAL_GPIO_ReadPin>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d104      	bne.n	801342c <LidarSetPos+0x3da4>
							pp.error_y = 0;
 8013422:	4b65      	ldr	r3, [pc, #404]	; (80135b8 <LidarSetPos+0x3f30>)
 8013424:	f04f 0200 	mov.w	r2, #0
 8013428:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

						if(pp.real_x <= -1.9)
 801342c:	4b62      	ldr	r3, [pc, #392]	; (80135b8 <LidarSetPos+0x3f30>)
 801342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013430:	4618      	mov	r0, r3
 8013432:	f7ed f889 	bl	8000548 <__aeabi_f2d>
 8013436:	a35c      	add	r3, pc, #368	; (adr r3, 80135a8 <LidarSetPos+0x3f20>)
 8013438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343c:	f7ed fb58 	bl	8000af0 <__aeabi_dcmple>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d100      	bne.n	8013448 <LidarSetPos+0x3dc0>
 8013446:	e009      	b.n	801345c <LidarSetPos+0x3dd4>
						{
							pp.target_y[0] = pp.real_y;
 8013448:	4b5b      	ldr	r3, [pc, #364]	; (80135b8 <LidarSetPos+0x3f30>)
 801344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801344c:	4a5a      	ldr	r2, [pc, #360]	; (80135b8 <LidarSetPos+0x3f30>)
 801344e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8013452:	4b59      	ldr	r3, [pc, #356]	; (80135b8 <LidarSetPos+0x3f30>)
 8013454:	f04f 0200 	mov.w	r2, #0
 8013458:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 801345c:	4b56      	ldr	r3, [pc, #344]	; (80135b8 <LidarSetPos+0x3f30>)
 801345e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013462:	f003 0301 	and.w	r3, r3, #1
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b00      	cmp	r3, #0
 801346a:	d1be      	bne.n	80133ea <LidarSetPos+0x3d62>
//						load_adjust_servo;
//						osDelay(100);
//						close_servo;
//						osDelay(100);
//					}
					adjust_servo;
 801346c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013470:	485b      	ldr	r0, [pc, #364]	; (80135e0 <LidarSetPos+0x3f58>)
 8013472:	f7f8 f9b5 	bl	800b7e0 <ServoSetPulse>
 8013476:	f640 0166 	movw	r1, #2150	; 0x866
 801347a:	485a      	ldr	r0, [pc, #360]	; (80135e4 <LidarSetPos+0x3f5c>)
 801347c:	f7f8 f9b0 	bl	800b7e0 <ServoSetPulse>
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					stick_fence = 1;
 8013480:	4b50      	ldr	r3, [pc, #320]	; (80135c4 <LidarSetPos+0x3f3c>)
 8013482:	2201      	movs	r2, #1
 8013484:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 8013486:	463b      	mov	r3, r7
 8013488:	6818      	ldr	r0, [r3, #0]
 801348a:	f001 fc6d 	bl	8014d68 <LidarAdjust>
					break;
 801348e:	e1c4      	b.n	801381a <LidarSetPos+0x4192>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 8013490:	463b      	mov	r3, r7
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	2207      	movs	r2, #7
 8013496:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801349a:	e1be      	b.n	801381a <LidarSetPos+0x4192>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 801349c:	463b      	mov	r3, r7
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2207      	movs	r2, #7
 80134a2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 80134a6:	2000      	movs	r0, #0
 80134a8:	f7f1 fcd2 	bl	8004e50 <setOrientationMODN>
					vesc_duty = type1Duty;
 80134ac:	4b46      	ldr	r3, [pc, #280]	; (80135c8 <LidarSetPos+0x3f40>)
 80134ae:	4a47      	ldr	r2, [pc, #284]	; (80135cc <LidarSetPos+0x3f44>)
 80134b0:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80134b2:	4b47      	ldr	r3, [pc, #284]	; (80135d0 <LidarSetPos+0x3f48>)
 80134b4:	4a47      	ldr	r2, [pc, #284]	; (80135d4 <LidarSetPos+0x3f4c>)
 80134b6:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 80134b8:	f7fa fd64 	bl	800df84 <ResetCoordinate>
					PP_start(upper_right_to_center_4, 1, &pp);
 80134bc:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80134c0:	4a3d      	ldr	r2, [pc, #244]	; (80135b8 <LidarSetPos+0x3f30>)
 80134c2:	2101      	movs	r1, #1
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f2 fbcb 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80134ca:	e020      	b.n	801350e <LidarSetPos+0x3e86>
					{
						if(ps4.button == SQUARE)
 80134cc:	4b3c      	ldr	r3, [pc, #240]	; (80135c0 <LidarSetPos+0x3f38>)
 80134ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134d4:	d108      	bne.n	80134e8 <LidarSetPos+0x3e60>
						{
							while(ps4.button == SQUARE);
 80134d6:	bf00      	nop
 80134d8:	4b39      	ldr	r3, [pc, #228]	; (80135c0 <LidarSetPos+0x3f38>)
 80134da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134e0:	d0fa      	beq.n	80134d8 <LidarSetPos+0x3e50>
							PP_stop(&pp);
 80134e2:	4835      	ldr	r0, [pc, #212]	; (80135b8 <LidarSetPos+0x3f30>)
 80134e4:	f7f2 fef4 	bl	80062d0 <PP_stop>
						}

						if(pp.real_y <= -3.1)
 80134e8:	4b33      	ldr	r3, [pc, #204]	; (80135b8 <LidarSetPos+0x3f30>)
 80134ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ed f82b 	bl	8000548 <__aeabi_f2d>
 80134f2:	a32f      	add	r3, pc, #188	; (adr r3, 80135b0 <LidarSetPos+0x3f28>)
 80134f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f8:	f7ed fafa 	bl	8000af0 <__aeabi_dcmple>
 80134fc:	4603      	mov	r3, r0
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d100      	bne.n	8013504 <LidarSetPos+0x3e7c>
 8013502:	e004      	b.n	801350e <LidarSetPos+0x3e86>
						{
							pp.target_vel[0] = 2.0;
 8013504:	4b2c      	ldr	r3, [pc, #176]	; (80135b8 <LidarSetPos+0x3f30>)
 8013506:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801350a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					while(pp.pp_start)
 801350e:	4b2a      	ldr	r3, [pc, #168]	; (80135b8 <LidarSetPos+0x3f30>)
 8013510:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013514:	f003 0301 	and.w	r3, r3, #1
 8013518:	b2db      	uxtb	r3, r3
 801351a:	2b00      	cmp	r3, #0
 801351c:	d1d6      	bne.n	80134cc <LidarSetPos+0x3e44>
						}
					}

					PP_start(upper_right_to_center_4_2, 1, &pp);
 801351e:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8013522:	4a25      	ldr	r2, [pc, #148]	; (80135b8 <LidarSetPos+0x3f30>)
 8013524:	2101      	movs	r1, #1
 8013526:	4618      	mov	r0, r3
 8013528:	f7f2 fb9a 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801352c:	e020      	b.n	8013570 <LidarSetPos+0x3ee8>
					{
						if(ps4.button == SQUARE)
 801352e:	4b24      	ldr	r3, [pc, #144]	; (80135c0 <LidarSetPos+0x3f38>)
 8013530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013536:	d108      	bne.n	801354a <LidarSetPos+0x3ec2>
						{
							while(ps4.button == SQUARE);
 8013538:	bf00      	nop
 801353a:	4b21      	ldr	r3, [pc, #132]	; (80135c0 <LidarSetPos+0x3f38>)
 801353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801353e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013542:	d0fa      	beq.n	801353a <LidarSetPos+0x3eb2>
							PP_stop(&pp);
 8013544:	481c      	ldr	r0, [pc, #112]	; (80135b8 <LidarSetPos+0x3f30>)
 8013546:	f7f2 fec3 	bl	80062d0 <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 801354a:	2108      	movs	r1, #8
 801354c:	4823      	ldr	r0, [pc, #140]	; (80135dc <LidarSetPos+0x3f54>)
 801354e:	f004 f917 	bl	8017780 <HAL_GPIO_ReadPin>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d006      	beq.n	8013566 <LidarSetPos+0x3ede>
 8013558:	2110      	movs	r1, #16
 801355a:	4820      	ldr	r0, [pc, #128]	; (80135dc <LidarSetPos+0x3f54>)
 801355c:	f004 f910 	bl	8017780 <HAL_GPIO_ReadPin>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d104      	bne.n	8013570 <LidarSetPos+0x3ee8>
							pp.error_y = 0;
 8013566:	4b14      	ldr	r3, [pc, #80]	; (80135b8 <LidarSetPos+0x3f30>)
 8013568:	f04f 0200 	mov.w	r2, #0
 801356c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 8013570:	4b11      	ldr	r3, [pc, #68]	; (80135b8 <LidarSetPos+0x3f30>)
 8013572:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013576:	f003 0301 	and.w	r3, r3, #1
 801357a:	b2db      	uxtb	r3, r3
 801357c:	2b00      	cmp	r3, #0
 801357e:	d1d6      	bne.n	801352e <LidarSetPos+0x3ea6>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					LidarAdjust(lidar);
 8013580:	463b      	mov	r3, r7
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	f001 fbf0 	bl	8014d68 <LidarAdjust>

					AdjustRings();
 8013588:	f7fa fcea 	bl	800df60 <AdjustRings>
					adjust_servo;
 801358c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013590:	4813      	ldr	r0, [pc, #76]	; (80135e0 <LidarSetPos+0x3f58>)
 8013592:	f7f8 f925 	bl	800b7e0 <ServoSetPulse>
 8013596:	f640 0166 	movw	r1, #2150	; 0x866
 801359a:	4812      	ldr	r0, [pc, #72]	; (80135e4 <LidarSetPos+0x3f5c>)
 801359c:	f7f8 f920 	bl	800b7e0 <ServoSetPulse>

					break;
 80135a0:	e13b      	b.n	801381a <LidarSetPos+0x4192>
 80135a2:	bf00      	nop
 80135a4:	f3af 8000 	nop.w
 80135a8:	66666666 	.word	0x66666666
 80135ac:	bffe6666 	.word	0xbffe6666
 80135b0:	cccccccd 	.word	0xcccccccd
 80135b4:	c008cccc 	.word	0xc008cccc
 80135b8:	20006d4c 	.word	0x20006d4c
 80135bc:	c2b60000 	.word	0xc2b60000
 80135c0:	2000a244 	.word	0x2000a244
 80135c4:	200073d8 	.word	0x200073d8
 80135c8:	2000749c 	.word	0x2000749c
 80135cc:	445e8000 	.word	0x445e8000
 80135d0:	200065c0 	.word	0x200065c0
 80135d4:	406ccccd 	.word	0x406ccccd
 80135d8:	200095c4 	.word	0x200095c4
 80135dc:	40020c00 	.word	0x40020c00
 80135e0:	200079e0 	.word	0x200079e0
 80135e4:	2000a5e8 	.word	0x2000a5e8

				case CENTER_3:
					stick_fence = 0;
 80135e8:	4bc1      	ldr	r3, [pc, #772]	; (80138f0 <LidarSetPos+0x4268>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 80135ee:	463b      	mov	r3, r7
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2200      	movs	r2, #0
 80135f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 80135f8:	4bbe      	ldr	r3, [pc, #760]	; (80138f4 <LidarSetPos+0x426c>)
 80135fa:	4abf      	ldr	r2, [pc, #764]	; (80138f8 <LidarSetPos+0x4270>)
 80135fc:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80135fe:	4bbf      	ldr	r3, [pc, #764]	; (80138fc <LidarSetPos+0x4274>)
 8013600:	4abf      	ldr	r2, [pc, #764]	; (8013900 <LidarSetPos+0x4278>)
 8013602:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8013604:	463b      	mov	r3, r7
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801360c:	2b00      	cmp	r3, #0
 801360e:	d159      	bne.n	80136c4 <LidarSetPos+0x403c>
					{
						ResetCoordinate();
 8013610:	f7fa fcb8 	bl	800df84 <ResetCoordinate>
						lidar->pos = CENTER_4;
 8013614:	463b      	mov	r3, r7
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2207      	movs	r2, #7
 801361a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_3_to_center_4, 1, &pp);
 801361e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8013622:	4ab8      	ldr	r2, [pc, #736]	; (8013904 <LidarSetPos+0x427c>)
 8013624:	2101      	movs	r1, #1
 8013626:	4618      	mov	r0, r3
 8013628:	f7f2 fb1a 	bl	8005c60 <PP_start>
						while(pp.pp_start)
 801362c:	e041      	b.n	80136b2 <LidarSetPos+0x402a>
						{
							if(ps4.button == SQUARE)
 801362e:	4bb6      	ldr	r3, [pc, #728]	; (8013908 <LidarSetPos+0x4280>)
 8013630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013636:	d10d      	bne.n	8013654 <LidarSetPos+0x3fcc>
							{
								while(ps4.button == SQUARE);
 8013638:	bf00      	nop
 801363a:	4bb3      	ldr	r3, [pc, #716]	; (8013908 <LidarSetPos+0x4280>)
 801363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013642:	d0fa      	beq.n	801363a <LidarSetPos+0x3fb2>
								PP_stop(&pp);
 8013644:	48af      	ldr	r0, [pc, #700]	; (8013904 <LidarSetPos+0x427c>)
 8013646:	f7f2 fe43 	bl	80062d0 <PP_stop>
								lidar->fail = 1;
 801364a:	463b      	mov	r3, r7
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2201      	movs	r2, #1
 8013650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_3;
	//							lidar->pos_counter = CENTER_3;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8013654:	2108      	movs	r1, #8
 8013656:	48ad      	ldr	r0, [pc, #692]	; (801390c <LidarSetPos+0x4284>)
 8013658:	f004 f892 	bl	8017780 <HAL_GPIO_ReadPin>
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	d006      	beq.n	8013670 <LidarSetPos+0x3fe8>
 8013662:	2110      	movs	r1, #16
 8013664:	48a9      	ldr	r0, [pc, #676]	; (801390c <LidarSetPos+0x4284>)
 8013666:	f004 f88b 	bl	8017780 <HAL_GPIO_ReadPin>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d109      	bne.n	8013684 <LidarSetPos+0x3ffc>
							{
								pp.target_y[0] = pp.real_y;
 8013670:	4ba4      	ldr	r3, [pc, #656]	; (8013904 <LidarSetPos+0x427c>)
 8013672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013674:	4aa3      	ldr	r2, [pc, #652]	; (8013904 <LidarSetPos+0x427c>)
 8013676:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801367a:	4ba2      	ldr	r3, [pc, #648]	; (8013904 <LidarSetPos+0x427c>)
 801367c:	f04f 0200 	mov.w	r2, #0
 8013680:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_3_to_center_4[0][1])
 8013684:	4b9f      	ldr	r3, [pc, #636]	; (8013904 <LidarSetPos+0x427c>)
 8013686:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801368a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801368e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369a:	da00      	bge.n	801369e <LidarSetPos+0x4016>
 801369c:	e009      	b.n	80136b2 <LidarSetPos+0x402a>
							{
								pp.target_y[0] = pp.real_y;
 801369e:	4b99      	ldr	r3, [pc, #612]	; (8013904 <LidarSetPos+0x427c>)
 80136a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136a2:	4a98      	ldr	r2, [pc, #608]	; (8013904 <LidarSetPos+0x427c>)
 80136a4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 80136a8:	4b96      	ldr	r3, [pc, #600]	; (8013904 <LidarSetPos+0x427c>)
 80136aa:	f04f 0200 	mov.w	r2, #0
 80136ae:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 80136b2:	4b94      	ldr	r3, [pc, #592]	; (8013904 <LidarSetPos+0x427c>)
 80136b4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1b5      	bne.n	801362e <LidarSetPos+0x3fa6>
 80136c2:	e04c      	b.n	801375e <LidarSetPos+0x40d6>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_4;
 80136c4:	463b      	mov	r3, r7
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2207      	movs	r2, #7
 80136ca:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_4, 1, &pp, 0, 1);
 80136ce:	f507 608a 	add.w	r0, r7, #1104	; 0x450
 80136d2:	2301      	movs	r3, #1
 80136d4:	9300      	str	r3, [sp, #0]
 80136d6:	2300      	movs	r3, #0
 80136d8:	4a8a      	ldr	r2, [pc, #552]	; (8013904 <LidarSetPos+0x427c>)
 80136da:	2101      	movs	r1, #1
 80136dc:	f7f2 fc86 	bl	8005fec <LSR_start>
						while(pp.lsr_start)
 80136e0:	e035      	b.n	801374e <LidarSetPos+0x40c6>
						{
							if(ps4.button == SQUARE)
 80136e2:	4b89      	ldr	r3, [pc, #548]	; (8013908 <LidarSetPos+0x4280>)
 80136e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136ea:	d108      	bne.n	80136fe <LidarSetPos+0x4076>
							{
								while(ps4.button == SQUARE);
 80136ec:	bf00      	nop
 80136ee:	4b86      	ldr	r3, [pc, #536]	; (8013908 <LidarSetPos+0x4280>)
 80136f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136f6:	d0fa      	beq.n	80136ee <LidarSetPos+0x4066>
								PP_stop(&pp);
 80136f8:	4882      	ldr	r0, [pc, #520]	; (8013904 <LidarSetPos+0x427c>)
 80136fa:	f7f2 fde9 	bl	80062d0 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_4[0][1] + Offset + 0.05)
 80136fe:	4b84      	ldr	r3, [pc, #528]	; (8013910 <LidarSetPos+0x4288>)
 8013700:	69db      	ldr	r3, [r3, #28]
 8013702:	4618      	mov	r0, r3
 8013704:	f7ec ff20 	bl	8000548 <__aeabi_f2d>
 8013708:	4604      	mov	r4, r0
 801370a:	460d      	mov	r5, r1
 801370c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	4618      	mov	r0, r3
 8013714:	f7ec ff18 	bl	8000548 <__aeabi_f2d>
 8013718:	f04f 0200 	mov.w	r2, #0
 801371c:	4b7d      	ldr	r3, [pc, #500]	; (8013914 <LidarSetPos+0x428c>)
 801371e:	f7ec fdb5 	bl	800028c <__adddf3>
 8013722:	4602      	mov	r2, r0
 8013724:	460b      	mov	r3, r1
 8013726:	4610      	mov	r0, r2
 8013728:	4619      	mov	r1, r3
 801372a:	a36f      	add	r3, pc, #444	; (adr r3, 80138e8 <LidarSetPos+0x4260>)
 801372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013730:	f7ec fdac 	bl	800028c <__adddf3>
 8013734:	4602      	mov	r2, r0
 8013736:	460b      	mov	r3, r1
 8013738:	4620      	mov	r0, r4
 801373a:	4629      	mov	r1, r5
 801373c:	f7ed f9d8 	bl	8000af0 <__aeabi_dcmple>
 8013740:	4603      	mov	r3, r0
 8013742:	2b00      	cmp	r3, #0
 8013744:	d100      	bne.n	8013748 <LidarSetPos+0x40c0>
 8013746:	e002      	b.n	801374e <LidarSetPos+0x40c6>
								PP_stop(&pp);
 8013748:	486e      	ldr	r0, [pc, #440]	; (8013904 <LidarSetPos+0x427c>)
 801374a:	f7f2 fdc1 	bl	80062d0 <PP_stop>
						while(pp.lsr_start)
 801374e:	4b6d      	ldr	r3, [pc, #436]	; (8013904 <LidarSetPos+0x427c>)
 8013750:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013754:	f003 0310 	and.w	r3, r3, #16
 8013758:	b2db      	uxtb	r3, r3
 801375a:	2b00      	cmp	r3, #0
 801375c:	d1c1      	bne.n	80136e2 <LidarSetPos+0x405a>
						}
					}

					PP_start(robot_center, 1, &pp);
 801375e:	f107 030c 	add.w	r3, r7, #12
 8013762:	4a68      	ldr	r2, [pc, #416]	; (8013904 <LidarSetPos+0x427c>)
 8013764:	2101      	movs	r1, #1
 8013766:	4618      	mov	r0, r3
 8013768:	f7f2 fa7a 	bl	8005c60 <PP_start>
					before = HAL_GetTick();
 801376c:	f002 f98c 	bl	8015a88 <HAL_GetTick>
 8013770:	f8c7 04fc 	str.w	r0, [r7, #1276]	; 0x4fc
					while(pp.pp_start)
 8013774:	e026      	b.n	80137c4 <LidarSetPos+0x413c>
					{
						after = HAL_GetTick();
 8013776:	f002 f987 	bl	8015a88 <HAL_GetTick>
 801377a:	f8c7 04f8 	str.w	r0, [r7, #1272]	; 0x4f8

						if(pp.real_z >= -91 && (after - before) >= 700)
 801377e:	4b61      	ldr	r3, [pc, #388]	; (8013904 <LidarSetPos+0x427c>)
 8013780:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013784:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8013918 <LidarSetPos+0x4290>
 8013788:	eef4 7ac7 	vcmpe.f32	s15, s14
 801378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013790:	db0a      	blt.n	80137a8 <LidarSetPos+0x4120>
 8013792:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8013796:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80137a0:	d302      	bcc.n	80137a8 <LidarSetPos+0x4120>
							PP_stop(&pp);
 80137a2:	4858      	ldr	r0, [pc, #352]	; (8013904 <LidarSetPos+0x427c>)
 80137a4:	f7f2 fd94 	bl	80062d0 <PP_stop>

						if(ps4.button == SQUARE)
 80137a8:	4b57      	ldr	r3, [pc, #348]	; (8013908 <LidarSetPos+0x4280>)
 80137aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137b0:	d108      	bne.n	80137c4 <LidarSetPos+0x413c>
						{
							while(ps4.button == SQUARE);
 80137b2:	bf00      	nop
 80137b4:	4b54      	ldr	r3, [pc, #336]	; (8013908 <LidarSetPos+0x4280>)
 80137b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137bc:	d0fa      	beq.n	80137b4 <LidarSetPos+0x412c>
							PP_stop(&pp);
 80137be:	4851      	ldr	r0, [pc, #324]	; (8013904 <LidarSetPos+0x427c>)
 80137c0:	f7f2 fd86 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80137c4:	4b4f      	ldr	r3, [pc, #316]	; (8013904 <LidarSetPos+0x427c>)
 80137c6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80137ca:	f003 0301 	and.w	r3, r3, #1
 80137ce:	b2db      	uxtb	r3, r3
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d1d0      	bne.n	8013776 <LidarSetPos+0x40ee>
						}
					}

					stick_fence = 1;
 80137d4:	4b46      	ldr	r3, [pc, #280]	; (80138f0 <LidarSetPos+0x4268>)
 80137d6:	2201      	movs	r2, #1
 80137d8:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80137da:	463b      	mov	r3, r7
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d005      	beq.n	80137f2 <LidarSetPos+0x416a>
					{
						osDelay(300);
 80137e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80137ea:	f008 fe83 	bl	801c4f4 <osDelay>
						Shot();
 80137ee:	f7fa ff17 	bl	800e620 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 80137f2:	463b      	mov	r3, r7
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d10c      	bne.n	8013818 <LidarSetPos+0x4190>
						LidarAdjust(lidar);
 80137fe:	463b      	mov	r3, r7
 8013800:	6818      	ldr	r0, [r3, #0]
 8013802:	f001 fab1 	bl	8014d68 <LidarAdjust>
					break;
 8013806:	e007      	b.n	8013818 <LidarSetPos+0x4190>

				default:
					break;
 8013808:	bf00      	nop
 801380a:	e358      	b.n	8013ebe <LidarSetPos+0x4836>
					break;
 801380c:	bf00      	nop
 801380e:	e356      	b.n	8013ebe <LidarSetPos+0x4836>
					break;
 8013810:	bf00      	nop
 8013812:	e354      	b.n	8013ebe <LidarSetPos+0x4836>
					break;
 8013814:	bf00      	nop
 8013816:	e352      	b.n	8013ebe <LidarSetPos+0x4836>
					break;
 8013818:	bf00      	nop
			}
			break;
 801381a:	e350      	b.n	8013ebe <LidarSetPos+0x4836>

		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
			{
				default:
					break;
 801381c:	bf00      	nop
			}
			break;
 801381e:	e34e      	b.n	8013ebe <LidarSetPos+0x4836>

		case PICK_RIGHT:
			switch(lidar->pos)
 8013820:	463b      	mov	r3, r7
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8013828:	3b03      	subs	r3, #3
 801382a:	2b05      	cmp	r3, #5
 801382c:	f200 8345 	bhi.w	8013eba <LidarSetPos+0x4832>
 8013830:	a201      	add	r2, pc, #4	; (adr r2, 8013838 <LidarSetPos+0x41b0>)
 8013832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013836:	bf00      	nop
 8013838:	0801394d 	.word	0x0801394d
 801383c:	08013a55 	.word	0x08013a55
 8013840:	08013b5d 	.word	0x08013b5d
 8013844:	08013cab 	.word	0x08013cab
 8013848:	08013db3 	.word	0x08013db3
 801384c:	08013851 	.word	0x08013851
			{
				case UPPER_RIGHT:
					lidar->pos = PICK_RIGHT;
 8013850:	463b      	mov	r3, r7
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2209      	movs	r2, #9
 8013856:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 801385a:	f7fa fb93 	bl	800df84 <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 801385e:	2000      	movs	r0, #0
 8013860:	f7f1 faf6 	bl	8004e50 <setOrientationMODN>
					loaded = 0;
 8013864:	4b2d      	ldr	r3, [pc, #180]	; (801391c <LidarSetPos+0x4294>)
 8013866:	2200      	movs	r2, #0
 8013868:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 801386a:	4b22      	ldr	r3, [pc, #136]	; (80138f4 <LidarSetPos+0x426c>)
 801386c:	f04f 0200 	mov.w	r2, #0
 8013870:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013872:	4b22      	ldr	r3, [pc, #136]	; (80138fc <LidarSetPos+0x4274>)
 8013874:	f04f 0200 	mov.w	r2, #0
 8013878:	601a      	str	r2, [r3, #0]
					setPick(1000);
 801387a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801387e:	f7f9 fe91 	bl	800d5a4 <setPick>
					open_servo;
 8013882:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013886:	4826      	ldr	r0, [pc, #152]	; (8013920 <LidarSetPos+0x4298>)
 8013888:	f7f7 ffaa 	bl	800b7e0 <ServoSetPulse>
 801388c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013890:	4824      	ldr	r0, [pc, #144]	; (8013924 <LidarSetPos+0x429c>)
 8013892:	f7f7 ffa5 	bl	800b7e0 <ServoSetPulse>
					cylinder_retract;
 8013896:	4a24      	ldr	r2, [pc, #144]	; (8013928 <LidarSetPos+0x42a0>)
 8013898:	7f13      	ldrb	r3, [r2, #28]
 801389a:	f36f 1386 	bfc	r3, #6, #1
 801389e:	7713      	strb	r3, [r2, #28]
					PP_start(upper_right_to_pick_right, 1, &pp);
 80138a0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80138a4:	4a17      	ldr	r2, [pc, #92]	; (8013904 <LidarSetPos+0x427c>)
 80138a6:	2101      	movs	r1, #1
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7f2 f9d9 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80138ae:	e041      	b.n	8013934 <LidarSetPos+0x42ac>
					{
						if(ps4.button == SQUARE)
 80138b0:	4b15      	ldr	r3, [pc, #84]	; (8013908 <LidarSetPos+0x4280>)
 80138b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138b8:	d108      	bne.n	80138cc <LidarSetPos+0x4244>
						{
							while(ps4.button == SQUARE);
 80138ba:	bf00      	nop
 80138bc:	4b12      	ldr	r3, [pc, #72]	; (8013908 <LidarSetPos+0x4280>)
 80138be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138c4:	d0fa      	beq.n	80138bc <LidarSetPos+0x4234>
							PP_stop(&pp);
 80138c6:	480f      	ldr	r0, [pc, #60]	; (8013904 <LidarSetPos+0x427c>)
 80138c8:	f7f2 fd02 	bl	80062d0 <PP_stop>
						}

						if(pp.real_y <= -2.5)
 80138cc:	4b0d      	ldr	r3, [pc, #52]	; (8013904 <LidarSetPos+0x427c>)
 80138ce:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80138d2:	eeb8 7a04 	vmov.f32	s14, #132	; 0xc0200000 -2.5
 80138d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80138da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138de:	d925      	bls.n	801392c <LidarSetPos+0x42a4>
 80138e0:	e028      	b.n	8013934 <LidarSetPos+0x42ac>
 80138e2:	bf00      	nop
 80138e4:	f3af 8000 	nop.w
 80138e8:	9999999a 	.word	0x9999999a
 80138ec:	3fa99999 	.word	0x3fa99999
 80138f0:	200073d8 	.word	0x200073d8
 80138f4:	2000749c 	.word	0x2000749c
 80138f8:	445e8000 	.word	0x445e8000
 80138fc:	200065c0 	.word	0x200065c0
 8013900:	406ccccd 	.word	0x406ccccd
 8013904:	20006d4c 	.word	0x20006d4c
 8013908:	2000a244 	.word	0x2000a244
 801390c:	40020c00 	.word	0x40020c00
 8013910:	20009600 	.word	0x20009600
 8013914:	3fe00000 	.word	0x3fe00000
 8013918:	c2b60000 	.word	0xc2b60000
 801391c:	200095b0 	.word	0x200095b0
 8013920:	200079e0 	.word	0x200079e0
 8013924:	2000a5e8 	.word	0x2000a5e8
 8013928:	200097dc 	.word	0x200097dc
							pp.target_vel[0] = 1.2;
 801392c:	4ba6      	ldr	r3, [pc, #664]	; (8013bc8 <LidarSetPos+0x4540>)
 801392e:	4aa7      	ldr	r2, [pc, #668]	; (8013bcc <LidarSetPos+0x4544>)
 8013930:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					while(pp.pp_start)
 8013934:	4ba4      	ldr	r3, [pc, #656]	; (8013bc8 <LidarSetPos+0x4540>)
 8013936:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801393a:	f003 0301 	and.w	r3, r3, #1
 801393e:	b2db      	uxtb	r3, r3
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1b5      	bne.n	80138b0 <LidarSetPos+0x4228>
					}
					pick_right = 1;
 8013944:	4ba2      	ldr	r3, [pc, #648]	; (8013bd0 <LidarSetPos+0x4548>)
 8013946:	2201      	movs	r2, #1
 8013948:	601a      	str	r2, [r3, #0]
					break;
 801394a:	e2b7      	b.n	8013ebc <LidarSetPos+0x4834>

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 801394c:	463b      	mov	r3, r7
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	2209      	movs	r2, #9
 8013952:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013956:	f7fa fb15 	bl	800df84 <ResetCoordinate>
					loaded = 0;
 801395a:	4b9e      	ldr	r3, [pc, #632]	; (8013bd4 <LidarSetPos+0x454c>)
 801395c:	2200      	movs	r2, #0
 801395e:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013960:	4b9d      	ldr	r3, [pc, #628]	; (8013bd8 <LidarSetPos+0x4550>)
 8013962:	f04f 0200 	mov.w	r2, #0
 8013966:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013968:	4b9c      	ldr	r3, [pc, #624]	; (8013bdc <LidarSetPos+0x4554>)
 801396a:	f04f 0200 	mov.w	r2, #0
 801396e:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013974:	f7f9 fe16 	bl	800d5a4 <setPick>
					open_servo;
 8013978:	f640 01ac 	movw	r1, #2220	; 0x8ac
 801397c:	4898      	ldr	r0, [pc, #608]	; (8013be0 <LidarSetPos+0x4558>)
 801397e:	f7f7 ff2f 	bl	800b7e0 <ServoSetPulse>
 8013982:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013986:	4897      	ldr	r0, [pc, #604]	; (8013be4 <LidarSetPos+0x455c>)
 8013988:	f7f7 ff2a 	bl	800b7e0 <ServoSetPulse>
					cylinder_retract;
 801398c:	4a96      	ldr	r2, [pc, #600]	; (8013be8 <LidarSetPos+0x4560>)
 801398e:	7f13      	ldrb	r3, [r2, #28]
 8013990:	f36f 1386 	bfc	r3, #6, #1
 8013994:	7713      	strb	r3, [r2, #28]
					PP_start(center_1_to_pick_right, 1, &pp);
 8013996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801399a:	4a8b      	ldr	r2, [pc, #556]	; (8013bc8 <LidarSetPos+0x4540>)
 801399c:	2101      	movs	r1, #1
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f2 f95e 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80139a4:	e04a      	b.n	8013a3c <LidarSetPos+0x43b4>
					{
						if(ps4.button == SQUARE)
 80139a6:	4b91      	ldr	r3, [pc, #580]	; (8013bec <LidarSetPos+0x4564>)
 80139a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139ae:	d108      	bne.n	80139c2 <LidarSetPos+0x433a>
						{
							while(ps4.button == SQUARE);
 80139b0:	bf00      	nop
 80139b2:	4b8e      	ldr	r3, [pc, #568]	; (8013bec <LidarSetPos+0x4564>)
 80139b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139ba:	d0fa      	beq.n	80139b2 <LidarSetPos+0x432a>
							PP_stop(&pp);
 80139bc:	4882      	ldr	r0, [pc, #520]	; (8013bc8 <LidarSetPos+0x4540>)
 80139be:	f7f2 fc87 	bl	80062d0 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 80139c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80139c6:	488a      	ldr	r0, [pc, #552]	; (8013bf0 <LidarSetPos+0x4568>)
 80139c8:	f003 feda 	bl	8017780 <HAL_GPIO_ReadPin>
 80139cc:	4603      	mov	r3, r0
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d007      	beq.n	80139e2 <LidarSetPos+0x435a>
 80139d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80139d6:	4886      	ldr	r0, [pc, #536]	; (8013bf0 <LidarSetPos+0x4568>)
 80139d8:	f003 fed2 	bl	8017780 <HAL_GPIO_ReadPin>
 80139dc:	4603      	mov	r3, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d10c      	bne.n	80139fc <LidarSetPos+0x4374>
 80139e2:	4b84      	ldr	r3, [pc, #528]	; (8013bf4 <LidarSetPos+0x456c>)
 80139e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80139e8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80139ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80139f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f4:	d802      	bhi.n	80139fc <LidarSetPos+0x4374>
							PP_stop(&pp);
 80139f6:	4874      	ldr	r0, [pc, #464]	; (8013bc8 <LidarSetPos+0x4540>)
 80139f8:	f7f2 fc6a 	bl	80062d0 <PP_stop>

						if(lsrR.dist <= 2.7)
 80139fc:	4b7d      	ldr	r3, [pc, #500]	; (8013bf4 <LidarSetPos+0x456c>)
 80139fe:	69db      	ldr	r3, [r3, #28]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ec fda1 	bl	8000548 <__aeabi_f2d>
 8013a06:	a36c      	add	r3, pc, #432	; (adr r3, 8013bb8 <LidarSetPos+0x4530>)
 8013a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0c:	f7ed f870 	bl	8000af0 <__aeabi_dcmple>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d004      	beq.n	8013a20 <LidarSetPos+0x4398>
							pp.target_vel[0] = 0.5;
 8013a16:	4b6c      	ldr	r3, [pc, #432]	; (8013bc8 <LidarSetPos+0x4540>)
 8013a18:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013a1c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013a20:	4b72      	ldr	r3, [pc, #456]	; (8013bec <LidarSetPos+0x4564>)
 8013a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a24:	2b10      	cmp	r3, #16
 8013a26:	d109      	bne.n	8013a3c <LidarSetPos+0x43b4>
						{
							while(ps4.button == UP);
 8013a28:	bf00      	nop
 8013a2a:	4b70      	ldr	r3, [pc, #448]	; (8013bec <LidarSetPos+0x4564>)
 8013a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a2e:	2b10      	cmp	r3, #16
 8013a30:	d0fb      	beq.n	8013a2a <LidarSetPos+0x43a2>
							go_type_3++;
 8013a32:	4b71      	ldr	r3, [pc, #452]	; (8013bf8 <LidarSetPos+0x4570>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	3301      	adds	r3, #1
 8013a38:	4a6f      	ldr	r2, [pc, #444]	; (8013bf8 <LidarSetPos+0x4570>)
 8013a3a:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013a3c:	4b62      	ldr	r3, [pc, #392]	; (8013bc8 <LidarSetPos+0x4540>)
 8013a3e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d1ac      	bne.n	80139a6 <LidarSetPos+0x431e>
						}
					}
					pick_right = 1;
 8013a4c:	4b60      	ldr	r3, [pc, #384]	; (8013bd0 <LidarSetPos+0x4548>)
 8013a4e:	2201      	movs	r2, #1
 8013a50:	601a      	str	r2, [r3, #0]
					break;
 8013a52:	e233      	b.n	8013ebc <LidarSetPos+0x4834>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 8013a54:	463b      	mov	r3, r7
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2209      	movs	r2, #9
 8013a5a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013a5e:	f7fa fa91 	bl	800df84 <ResetCoordinate>
					loaded = 0;
 8013a62:	4b5c      	ldr	r3, [pc, #368]	; (8013bd4 <LidarSetPos+0x454c>)
 8013a64:	2200      	movs	r2, #0
 8013a66:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013a68:	4b5b      	ldr	r3, [pc, #364]	; (8013bd8 <LidarSetPos+0x4550>)
 8013a6a:	f04f 0200 	mov.w	r2, #0
 8013a6e:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013a70:	4b5a      	ldr	r3, [pc, #360]	; (8013bdc <LidarSetPos+0x4554>)
 8013a72:	f04f 0200 	mov.w	r2, #0
 8013a76:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013a7c:	f7f9 fd92 	bl	800d5a4 <setPick>
					open_servo;
 8013a80:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013a84:	4856      	ldr	r0, [pc, #344]	; (8013be0 <LidarSetPos+0x4558>)
 8013a86:	f7f7 feab 	bl	800b7e0 <ServoSetPulse>
 8013a8a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013a8e:	4855      	ldr	r0, [pc, #340]	; (8013be4 <LidarSetPos+0x455c>)
 8013a90:	f7f7 fea6 	bl	800b7e0 <ServoSetPulse>
					cylinder_retract;
 8013a94:	4a54      	ldr	r2, [pc, #336]	; (8013be8 <LidarSetPos+0x4560>)
 8013a96:	7f13      	ldrb	r3, [r2, #28]
 8013a98:	f36f 1386 	bfc	r3, #6, #1
 8013a9c:	7713      	strb	r3, [r2, #28]
					PP_start(center_2_to_pick_right, 1, &pp);
 8013a9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013aa2:	4a49      	ldr	r2, [pc, #292]	; (8013bc8 <LidarSetPos+0x4540>)
 8013aa4:	2101      	movs	r1, #1
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7f2 f8da 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8013aac:	e04a      	b.n	8013b44 <LidarSetPos+0x44bc>
					{
						if(ps4.button == SQUARE)
 8013aae:	4b4f      	ldr	r3, [pc, #316]	; (8013bec <LidarSetPos+0x4564>)
 8013ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ab6:	d108      	bne.n	8013aca <LidarSetPos+0x4442>
						{
							while(ps4.button == SQUARE);
 8013ab8:	bf00      	nop
 8013aba:	4b4c      	ldr	r3, [pc, #304]	; (8013bec <LidarSetPos+0x4564>)
 8013abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ac2:	d0fa      	beq.n	8013aba <LidarSetPos+0x4432>
							PP_stop(&pp);
 8013ac4:	4840      	ldr	r0, [pc, #256]	; (8013bc8 <LidarSetPos+0x4540>)
 8013ac6:	f7f2 fc03 	bl	80062d0 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 8013aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013ace:	4848      	ldr	r0, [pc, #288]	; (8013bf0 <LidarSetPos+0x4568>)
 8013ad0:	f003 fe56 	bl	8017780 <HAL_GPIO_ReadPin>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d007      	beq.n	8013aea <LidarSetPos+0x4462>
 8013ada:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013ade:	4844      	ldr	r0, [pc, #272]	; (8013bf0 <LidarSetPos+0x4568>)
 8013ae0:	f003 fe4e 	bl	8017780 <HAL_GPIO_ReadPin>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d10c      	bne.n	8013b04 <LidarSetPos+0x447c>
 8013aea:	4b42      	ldr	r3, [pc, #264]	; (8013bf4 <LidarSetPos+0x456c>)
 8013aec:	edd3 7a07 	vldr	s15, [r3, #28]
 8013af0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afc:	d802      	bhi.n	8013b04 <LidarSetPos+0x447c>
							PP_stop(&pp);
 8013afe:	4832      	ldr	r0, [pc, #200]	; (8013bc8 <LidarSetPos+0x4540>)
 8013b00:	f7f2 fbe6 	bl	80062d0 <PP_stop>

						if(lsrR.dist <= 2.6)
 8013b04:	4b3b      	ldr	r3, [pc, #236]	; (8013bf4 <LidarSetPos+0x456c>)
 8013b06:	69db      	ldr	r3, [r3, #28]
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ec fd1d 	bl	8000548 <__aeabi_f2d>
 8013b0e:	a32c      	add	r3, pc, #176	; (adr r3, 8013bc0 <LidarSetPos+0x4538>)
 8013b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b14:	f7ec ffec 	bl	8000af0 <__aeabi_dcmple>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d004      	beq.n	8013b28 <LidarSetPos+0x44a0>
							pp.target_vel[0] = 0.5;
 8013b1e:	4b2a      	ldr	r3, [pc, #168]	; (8013bc8 <LidarSetPos+0x4540>)
 8013b20:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013b24:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013b28:	4b30      	ldr	r3, [pc, #192]	; (8013bec <LidarSetPos+0x4564>)
 8013b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b2c:	2b10      	cmp	r3, #16
 8013b2e:	d109      	bne.n	8013b44 <LidarSetPos+0x44bc>
						{
							while(ps4.button == UP);
 8013b30:	bf00      	nop
 8013b32:	4b2e      	ldr	r3, [pc, #184]	; (8013bec <LidarSetPos+0x4564>)
 8013b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b36:	2b10      	cmp	r3, #16
 8013b38:	d0fb      	beq.n	8013b32 <LidarSetPos+0x44aa>
							go_type_3++;
 8013b3a:	4b2f      	ldr	r3, [pc, #188]	; (8013bf8 <LidarSetPos+0x4570>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	3301      	adds	r3, #1
 8013b40:	4a2d      	ldr	r2, [pc, #180]	; (8013bf8 <LidarSetPos+0x4570>)
 8013b42:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013b44:	4b20      	ldr	r3, [pc, #128]	; (8013bc8 <LidarSetPos+0x4540>)
 8013b46:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013b4a:	f003 0301 	and.w	r3, r3, #1
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d1ac      	bne.n	8013aae <LidarSetPos+0x4426>
						}
					}
					pick_right = 1;
 8013b54:	4b1e      	ldr	r3, [pc, #120]	; (8013bd0 <LidarSetPos+0x4548>)
 8013b56:	2201      	movs	r2, #1
 8013b58:	601a      	str	r2, [r3, #0]
					break;
 8013b5a:	e1af      	b.n	8013ebc <LidarSetPos+0x4834>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 8013b5c:	463b      	mov	r3, r7
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2209      	movs	r2, #9
 8013b62:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013b66:	f7fa fa0d 	bl	800df84 <ResetCoordinate>
					loaded = 0;
 8013b6a:	4b1a      	ldr	r3, [pc, #104]	; (8013bd4 <LidarSetPos+0x454c>)
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013b70:	4b19      	ldr	r3, [pc, #100]	; (8013bd8 <LidarSetPos+0x4550>)
 8013b72:	f04f 0200 	mov.w	r2, #0
 8013b76:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013b78:	4b18      	ldr	r3, [pc, #96]	; (8013bdc <LidarSetPos+0x4554>)
 8013b7a:	f04f 0200 	mov.w	r2, #0
 8013b7e:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013b80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013b84:	f7f9 fd0e 	bl	800d5a4 <setPick>
					open_servo;
 8013b88:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013b8c:	4814      	ldr	r0, [pc, #80]	; (8013be0 <LidarSetPos+0x4558>)
 8013b8e:	f7f7 fe27 	bl	800b7e0 <ServoSetPulse>
 8013b92:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013b96:	4813      	ldr	r0, [pc, #76]	; (8013be4 <LidarSetPos+0x455c>)
 8013b98:	f7f7 fe22 	bl	800b7e0 <ServoSetPulse>
					cylinder_retract;
 8013b9c:	4a12      	ldr	r2, [pc, #72]	; (8013be8 <LidarSetPos+0x4560>)
 8013b9e:	7f13      	ldrb	r3, [r2, #28]
 8013ba0:	f36f 1386 	bfc	r3, #6, #1
 8013ba4:	7713      	strb	r3, [r2, #28]
					PP_start(center_to_pick_right, 1, &pp);
 8013ba6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013baa:	4a07      	ldr	r2, [pc, #28]	; (8013bc8 <LidarSetPos+0x4540>)
 8013bac:	2101      	movs	r1, #1
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7f2 f856 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8013bb4:	e06d      	b.n	8013c92 <LidarSetPos+0x460a>
 8013bb6:	bf00      	nop
 8013bb8:	9999999a 	.word	0x9999999a
 8013bbc:	40059999 	.word	0x40059999
 8013bc0:	cccccccd 	.word	0xcccccccd
 8013bc4:	4004cccc 	.word	0x4004cccc
 8013bc8:	20006d4c 	.word	0x20006d4c
 8013bcc:	3f99999a 	.word	0x3f99999a
 8013bd0:	2000a89c 	.word	0x2000a89c
 8013bd4:	200095b0 	.word	0x200095b0
 8013bd8:	2000749c 	.word	0x2000749c
 8013bdc:	200065c0 	.word	0x200065c0
 8013be0:	200079e0 	.word	0x200079e0
 8013be4:	2000a5e8 	.word	0x2000a5e8
 8013be8:	200097dc 	.word	0x200097dc
 8013bec:	2000a244 	.word	0x2000a244
 8013bf0:	40020c00 	.word	0x40020c00
 8013bf4:	20009600 	.word	0x20009600
 8013bf8:	20006d48 	.word	0x20006d48
					{
						if(ps4.button == SQUARE)
 8013bfc:	4bb8      	ldr	r3, [pc, #736]	; (8013ee0 <LidarSetPos+0x4858>)
 8013bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c04:	d108      	bne.n	8013c18 <LidarSetPos+0x4590>
						{
							while(ps4.button == SQUARE);
 8013c06:	bf00      	nop
 8013c08:	4bb5      	ldr	r3, [pc, #724]	; (8013ee0 <LidarSetPos+0x4858>)
 8013c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c10:	d0fa      	beq.n	8013c08 <LidarSetPos+0x4580>
							PP_stop(&pp);
 8013c12:	48b4      	ldr	r0, [pc, #720]	; (8013ee4 <LidarSetPos+0x485c>)
 8013c14:	f7f2 fb5c 	bl	80062d0 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 8013c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013c1c:	48b2      	ldr	r0, [pc, #712]	; (8013ee8 <LidarSetPos+0x4860>)
 8013c1e:	f003 fdaf 	bl	8017780 <HAL_GPIO_ReadPin>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d007      	beq.n	8013c38 <LidarSetPos+0x45b0>
 8013c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013c2c:	48ae      	ldr	r0, [pc, #696]	; (8013ee8 <LidarSetPos+0x4860>)
 8013c2e:	f003 fda7 	bl	8017780 <HAL_GPIO_ReadPin>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d10c      	bne.n	8013c52 <LidarSetPos+0x45ca>
 8013c38:	4bac      	ldr	r3, [pc, #688]	; (8013eec <LidarSetPos+0x4864>)
 8013c3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8013c3e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4a:	d802      	bhi.n	8013c52 <LidarSetPos+0x45ca>
							PP_stop(&pp);
 8013c4c:	48a5      	ldr	r0, [pc, #660]	; (8013ee4 <LidarSetPos+0x485c>)
 8013c4e:	f7f2 fb3f 	bl	80062d0 <PP_stop>

						if(lsrR.dist <= 2.4)
 8013c52:	4ba6      	ldr	r3, [pc, #664]	; (8013eec <LidarSetPos+0x4864>)
 8013c54:	69db      	ldr	r3, [r3, #28]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ec fc76 	bl	8000548 <__aeabi_f2d>
 8013c5c:	a39a      	add	r3, pc, #616	; (adr r3, 8013ec8 <LidarSetPos+0x4840>)
 8013c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c62:	f7ec ff45 	bl	8000af0 <__aeabi_dcmple>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d004      	beq.n	8013c76 <LidarSetPos+0x45ee>
							pp.target_vel[0] = 0.5;
 8013c6c:	4b9d      	ldr	r3, [pc, #628]	; (8013ee4 <LidarSetPos+0x485c>)
 8013c6e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013c72:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013c76:	4b9a      	ldr	r3, [pc, #616]	; (8013ee0 <LidarSetPos+0x4858>)
 8013c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c7a:	2b10      	cmp	r3, #16
 8013c7c:	d109      	bne.n	8013c92 <LidarSetPos+0x460a>
						{
							while(ps4.button == UP);
 8013c7e:	bf00      	nop
 8013c80:	4b97      	ldr	r3, [pc, #604]	; (8013ee0 <LidarSetPos+0x4858>)
 8013c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c84:	2b10      	cmp	r3, #16
 8013c86:	d0fb      	beq.n	8013c80 <LidarSetPos+0x45f8>
							go_type_3++;
 8013c88:	4b99      	ldr	r3, [pc, #612]	; (8013ef0 <LidarSetPos+0x4868>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	4a98      	ldr	r2, [pc, #608]	; (8013ef0 <LidarSetPos+0x4868>)
 8013c90:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013c92:	4b94      	ldr	r3, [pc, #592]	; (8013ee4 <LidarSetPos+0x485c>)
 8013c94:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013c98:	f003 0301 	and.w	r3, r3, #1
 8013c9c:	b2db      	uxtb	r3, r3
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d1ac      	bne.n	8013bfc <LidarSetPos+0x4574>
						}
					}
					pick_right = 1;
 8013ca2:	4b94      	ldr	r3, [pc, #592]	; (8013ef4 <LidarSetPos+0x486c>)
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	601a      	str	r2, [r3, #0]
					break;
 8013ca8:	e108      	b.n	8013ebc <LidarSetPos+0x4834>

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 8013caa:	463b      	mov	r3, r7
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2209      	movs	r2, #9
 8013cb0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013cb4:	f7fa f966 	bl	800df84 <ResetCoordinate>
					loaded = 0;
 8013cb8:	4b8f      	ldr	r3, [pc, #572]	; (8013ef8 <LidarSetPos+0x4870>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013cbe:	4b8f      	ldr	r3, [pc, #572]	; (8013efc <LidarSetPos+0x4874>)
 8013cc0:	f04f 0200 	mov.w	r2, #0
 8013cc4:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013cc6:	4b8e      	ldr	r3, [pc, #568]	; (8013f00 <LidarSetPos+0x4878>)
 8013cc8:	f04f 0200 	mov.w	r2, #0
 8013ccc:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013cd2:	f7f9 fc67 	bl	800d5a4 <setPick>
					open_servo;
 8013cd6:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013cda:	488a      	ldr	r0, [pc, #552]	; (8013f04 <LidarSetPos+0x487c>)
 8013cdc:	f7f7 fd80 	bl	800b7e0 <ServoSetPulse>
 8013ce0:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013ce4:	4888      	ldr	r0, [pc, #544]	; (8013f08 <LidarSetPos+0x4880>)
 8013ce6:	f7f7 fd7b 	bl	800b7e0 <ServoSetPulse>
					cylinder_retract;
 8013cea:	4a88      	ldr	r2, [pc, #544]	; (8013f0c <LidarSetPos+0x4884>)
 8013cec:	7f13      	ldrb	r3, [r2, #28]
 8013cee:	f36f 1386 	bfc	r3, #6, #1
 8013cf2:	7713      	strb	r3, [r2, #28]
					PP_start(center_3_to_pick_right, 1, &pp);
 8013cf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013cf8:	4a7a      	ldr	r2, [pc, #488]	; (8013ee4 <LidarSetPos+0x485c>)
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f1 ffaf 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8013d02:	e04a      	b.n	8013d9a <LidarSetPos+0x4712>
					{
						if(ps4.button == SQUARE)
 8013d04:	4b76      	ldr	r3, [pc, #472]	; (8013ee0 <LidarSetPos+0x4858>)
 8013d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d0c:	d108      	bne.n	8013d20 <LidarSetPos+0x4698>
						{
							while(ps4.button == SQUARE);
 8013d0e:	bf00      	nop
 8013d10:	4b73      	ldr	r3, [pc, #460]	; (8013ee0 <LidarSetPos+0x4858>)
 8013d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d18:	d0fa      	beq.n	8013d10 <LidarSetPos+0x4688>
							PP_stop(&pp);
 8013d1a:	4872      	ldr	r0, [pc, #456]	; (8013ee4 <LidarSetPos+0x485c>)
 8013d1c:	f7f2 fad8 	bl	80062d0 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 8013d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013d24:	4870      	ldr	r0, [pc, #448]	; (8013ee8 <LidarSetPos+0x4860>)
 8013d26:	f003 fd2b 	bl	8017780 <HAL_GPIO_ReadPin>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d007      	beq.n	8013d40 <LidarSetPos+0x46b8>
 8013d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013d34:	486c      	ldr	r0, [pc, #432]	; (8013ee8 <LidarSetPos+0x4860>)
 8013d36:	f003 fd23 	bl	8017780 <HAL_GPIO_ReadPin>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d10c      	bne.n	8013d5a <LidarSetPos+0x46d2>
 8013d40:	4b6a      	ldr	r3, [pc, #424]	; (8013eec <LidarSetPos+0x4864>)
 8013d42:	edd3 7a07 	vldr	s15, [r3, #28]
 8013d46:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d52:	d802      	bhi.n	8013d5a <LidarSetPos+0x46d2>
							PP_stop(&pp);
 8013d54:	4863      	ldr	r0, [pc, #396]	; (8013ee4 <LidarSetPos+0x485c>)
 8013d56:	f7f2 fabb 	bl	80062d0 <PP_stop>

						if(lsrR.dist <= 2.15)
 8013d5a:	4b64      	ldr	r3, [pc, #400]	; (8013eec <LidarSetPos+0x4864>)
 8013d5c:	69db      	ldr	r3, [r3, #28]
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7ec fbf2 	bl	8000548 <__aeabi_f2d>
 8013d64:	a35a      	add	r3, pc, #360	; (adr r3, 8013ed0 <LidarSetPos+0x4848>)
 8013d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6a:	f7ec fec1 	bl	8000af0 <__aeabi_dcmple>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d004      	beq.n	8013d7e <LidarSetPos+0x46f6>
							pp.target_vel[0] = 0.5;
 8013d74:	4b5b      	ldr	r3, [pc, #364]	; (8013ee4 <LidarSetPos+0x485c>)
 8013d76:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013d7a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013d7e:	4b58      	ldr	r3, [pc, #352]	; (8013ee0 <LidarSetPos+0x4858>)
 8013d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d82:	2b10      	cmp	r3, #16
 8013d84:	d109      	bne.n	8013d9a <LidarSetPos+0x4712>
						{
							while(ps4.button == UP);
 8013d86:	bf00      	nop
 8013d88:	4b55      	ldr	r3, [pc, #340]	; (8013ee0 <LidarSetPos+0x4858>)
 8013d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d8c:	2b10      	cmp	r3, #16
 8013d8e:	d0fb      	beq.n	8013d88 <LidarSetPos+0x4700>
							go_type_3++;
 8013d90:	4b57      	ldr	r3, [pc, #348]	; (8013ef0 <LidarSetPos+0x4868>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	3301      	adds	r3, #1
 8013d96:	4a56      	ldr	r2, [pc, #344]	; (8013ef0 <LidarSetPos+0x4868>)
 8013d98:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013d9a:	4b52      	ldr	r3, [pc, #328]	; (8013ee4 <LidarSetPos+0x485c>)
 8013d9c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013da0:	f003 0301 	and.w	r3, r3, #1
 8013da4:	b2db      	uxtb	r3, r3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1ac      	bne.n	8013d04 <LidarSetPos+0x467c>
						}
					}
					pick_right = 1;
 8013daa:	4b52      	ldr	r3, [pc, #328]	; (8013ef4 <LidarSetPos+0x486c>)
 8013dac:	2201      	movs	r2, #1
 8013dae:	601a      	str	r2, [r3, #0]

					break;
 8013db0:	e084      	b.n	8013ebc <LidarSetPos+0x4834>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 8013db2:	463b      	mov	r3, r7
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	2209      	movs	r2, #9
 8013db8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013dbc:	f7fa f8e2 	bl	800df84 <ResetCoordinate>
					loaded = 0;
 8013dc0:	4b4d      	ldr	r3, [pc, #308]	; (8013ef8 <LidarSetPos+0x4870>)
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013dc6:	4b4d      	ldr	r3, [pc, #308]	; (8013efc <LidarSetPos+0x4874>)
 8013dc8:	f04f 0200 	mov.w	r2, #0
 8013dcc:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013dce:	4b4c      	ldr	r3, [pc, #304]	; (8013f00 <LidarSetPos+0x4878>)
 8013dd0:	f04f 0200 	mov.w	r2, #0
 8013dd4:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013dda:	f7f9 fbe3 	bl	800d5a4 <setPick>
					open_servo;
 8013dde:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013de2:	4848      	ldr	r0, [pc, #288]	; (8013f04 <LidarSetPos+0x487c>)
 8013de4:	f7f7 fcfc 	bl	800b7e0 <ServoSetPulse>
 8013de8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013dec:	4846      	ldr	r0, [pc, #280]	; (8013f08 <LidarSetPos+0x4880>)
 8013dee:	f7f7 fcf7 	bl	800b7e0 <ServoSetPulse>
					cylinder_retract;
 8013df2:	4a46      	ldr	r2, [pc, #280]	; (8013f0c <LidarSetPos+0x4884>)
 8013df4:	7f13      	ldrb	r3, [r2, #28]
 8013df6:	f36f 1386 	bfc	r3, #6, #1
 8013dfa:	7713      	strb	r3, [r2, #28]
					PP_start(center_4_to_pick_right, 1, &pp);
 8013dfc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8013e00:	4a38      	ldr	r2, [pc, #224]	; (8013ee4 <LidarSetPos+0x485c>)
 8013e02:	2101      	movs	r1, #1
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f1 ff2b 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8013e0a:	e04a      	b.n	8013ea2 <LidarSetPos+0x481a>
					{
						if(ps4.button == SQUARE)
 8013e0c:	4b34      	ldr	r3, [pc, #208]	; (8013ee0 <LidarSetPos+0x4858>)
 8013e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e14:	d108      	bne.n	8013e28 <LidarSetPos+0x47a0>
						{
							while(ps4.button == SQUARE);
 8013e16:	bf00      	nop
 8013e18:	4b31      	ldr	r3, [pc, #196]	; (8013ee0 <LidarSetPos+0x4858>)
 8013e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e20:	d0fa      	beq.n	8013e18 <LidarSetPos+0x4790>
							PP_stop(&pp);
 8013e22:	4830      	ldr	r0, [pc, #192]	; (8013ee4 <LidarSetPos+0x485c>)
 8013e24:	f7f2 fa54 	bl	80062d0 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.0)
 8013e28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013e2c:	482e      	ldr	r0, [pc, #184]	; (8013ee8 <LidarSetPos+0x4860>)
 8013e2e:	f003 fca7 	bl	8017780 <HAL_GPIO_ReadPin>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d007      	beq.n	8013e48 <LidarSetPos+0x47c0>
 8013e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013e3c:	482a      	ldr	r0, [pc, #168]	; (8013ee8 <LidarSetPos+0x4860>)
 8013e3e:	f003 fc9f 	bl	8017780 <HAL_GPIO_ReadPin>
 8013e42:	4603      	mov	r3, r0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10c      	bne.n	8013e62 <LidarSetPos+0x47da>
 8013e48:	4b28      	ldr	r3, [pc, #160]	; (8013eec <LidarSetPos+0x4864>)
 8013e4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8013e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5a:	d802      	bhi.n	8013e62 <LidarSetPos+0x47da>
							PP_stop(&pp);
 8013e5c:	4821      	ldr	r0, [pc, #132]	; (8013ee4 <LidarSetPos+0x485c>)
 8013e5e:	f7f2 fa37 	bl	80062d0 <PP_stop>

						if(lsrR.dist <= 1.7)
 8013e62:	4b22      	ldr	r3, [pc, #136]	; (8013eec <LidarSetPos+0x4864>)
 8013e64:	69db      	ldr	r3, [r3, #28]
 8013e66:	4618      	mov	r0, r3
 8013e68:	f7ec fb6e 	bl	8000548 <__aeabi_f2d>
 8013e6c:	a31a      	add	r3, pc, #104	; (adr r3, 8013ed8 <LidarSetPos+0x4850>)
 8013e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e72:	f7ec fe3d 	bl	8000af0 <__aeabi_dcmple>
 8013e76:	4603      	mov	r3, r0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d004      	beq.n	8013e86 <LidarSetPos+0x47fe>
							pp.target_vel[0] = 0.5;
 8013e7c:	4b19      	ldr	r3, [pc, #100]	; (8013ee4 <LidarSetPos+0x485c>)
 8013e7e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013e82:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013e86:	4b16      	ldr	r3, [pc, #88]	; (8013ee0 <LidarSetPos+0x4858>)
 8013e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e8a:	2b10      	cmp	r3, #16
 8013e8c:	d109      	bne.n	8013ea2 <LidarSetPos+0x481a>
						{
							while(ps4.button == UP);
 8013e8e:	bf00      	nop
 8013e90:	4b13      	ldr	r3, [pc, #76]	; (8013ee0 <LidarSetPos+0x4858>)
 8013e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e94:	2b10      	cmp	r3, #16
 8013e96:	d0fb      	beq.n	8013e90 <LidarSetPos+0x4808>
							go_type_3++;
 8013e98:	4b15      	ldr	r3, [pc, #84]	; (8013ef0 <LidarSetPos+0x4868>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	4a14      	ldr	r2, [pc, #80]	; (8013ef0 <LidarSetPos+0x4868>)
 8013ea0:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013ea2:	4b10      	ldr	r3, [pc, #64]	; (8013ee4 <LidarSetPos+0x485c>)
 8013ea4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013ea8:	f003 0301 	and.w	r3, r3, #1
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d1ac      	bne.n	8013e0c <LidarSetPos+0x4784>
						}
					}

					pick_right = 1;
 8013eb2:	4b10      	ldr	r3, [pc, #64]	; (8013ef4 <LidarSetPos+0x486c>)
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	601a      	str	r2, [r3, #0]
					break;
 8013eb8:	e000      	b.n	8013ebc <LidarSetPos+0x4834>

				default:
					break;
 8013eba:	bf00      	nop
			}

		default:
			break;
 8013ebc:	bf00      	nop
		}
}
 8013ebe:	bf00      	nop
 8013ec0:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ec8:	33333333 	.word	0x33333333
 8013ecc:	40033333 	.word	0x40033333
 8013ed0:	33333333 	.word	0x33333333
 8013ed4:	40013333 	.word	0x40013333
 8013ed8:	33333333 	.word	0x33333333
 8013edc:	3ffb3333 	.word	0x3ffb3333
 8013ee0:	2000a244 	.word	0x2000a244
 8013ee4:	20006d4c 	.word	0x20006d4c
 8013ee8:	40020c00 	.word	0x40020c00
 8013eec:	20009600 	.word	0x20009600
 8013ef0:	20006d48 	.word	0x20006d48
 8013ef4:	2000a89c 	.word	0x2000a89c
 8013ef8:	200095b0 	.word	0x200095b0
 8013efc:	2000749c 	.word	0x2000749c
 8013f00:	200065c0 	.word	0x200065c0
 8013f04:	200079e0 	.word	0x200079e0
 8013f08:	2000a5e8 	.word	0x2000a5e8
 8013f0c:	200097dc 	.word	0x200097dc

08013f10 <LidarSetAngle>:
 * Initial angle will be B (-90 degree)
 * After pick rings from left, directly go to aim self Type-2(B), Type-1-Left(A), Type-1-Right(C)
 * Then go to right self Type-2 repeat again
 */
void LidarSetAngle(Angle_t angle, Lidar_t* lidar)
{
 8013f10:	b5b0      	push	{r4, r5, r7, lr}
 8013f12:	b0a6      	sub	sp, #152	; 0x98
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	4603      	mov	r3, r0
 8013f18:	6039      	str	r1, [r7, #0]
 8013f1a:	71fb      	strb	r3, [r7, #7]
	float angle_BL[1][7] = {{1.0, 0, 0, -113.41, 0, 0, 0}};
 8013f1c:	4bb1      	ldr	r3, [pc, #708]	; (80141e4 <LidarSetAngle+0x2d4>)
 8013f1e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8013f22:	461d      	mov	r5, r3
 8013f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_FL[1][7] = {{1.0, 0, 0, -103.26, 0, 0, 0}};
 8013f30:	4bad      	ldr	r3, [pc, #692]	; (80141e8 <LidarSetAngle+0x2d8>)
 8013f32:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8013f36:	461d      	mov	r5, r3
 8013f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_S[1][7] = {{1.0, 0, 0, -91, 0, 0, 0}};
 8013f44:	4ba9      	ldr	r3, [pc, #676]	; (80141ec <LidarSetAngle+0x2dc>)
 8013f46:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8013f4a:	461d      	mov	r5, r3
 8013f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_FR[1][7] = {{1.0, 0, 0, -80.28, 0, 0, 0}};
 8013f58:	4ba5      	ldr	r3, [pc, #660]	; (80141f0 <LidarSetAngle+0x2e0>)
 8013f5a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8013f5e:	461d      	mov	r5, r3
 8013f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_BR[1][7] = {{1.0, 0, 0, -70.85, 0, 0, 0}};
 8013f6c:	4ba1      	ldr	r3, [pc, #644]	; (80141f4 <LidarSetAngle+0x2e4>)
 8013f6e:	f107 040c 	add.w	r4, r7, #12
 8013f72:	461d      	mov	r5, r3
 8013f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	switch(angle) // Target Angle
 8013f80:	79fb      	ldrb	r3, [r7, #7]
 8013f82:	2b04      	cmp	r3, #4
 8013f84:	f200 86d4 	bhi.w	8014d30 <LidarSetAngle+0xe20>
 8013f88:	a201      	add	r2, pc, #4	; (adr r2, 8013f90 <LidarSetAngle+0x80>)
 8013f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f8e:	bf00      	nop
 8013f90:	08013fa5 	.word	0x08013fa5
 8013f94:	0801426f 	.word	0x0801426f
 8013f98:	08014529 	.word	0x08014529
 8013f9c:	080147b5 	.word	0x080147b5
 8013fa0:	08014a77 	.word	0x08014a77
	{
		case BL:
			switch(lidar->angle) // Current Angle
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8013faa:	3b01      	subs	r3, #1
 8013fac:	2b03      	cmp	r3, #3
 8013fae:	f200 815b 	bhi.w	8014268 <LidarSetAngle+0x358>
 8013fb2:	a201      	add	r2, pc, #4	; (adr r2, 8013fb8 <LidarSetAngle+0xa8>)
 8013fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb8:	08013fc9 	.word	0x08013fc9
 8013fbc:	08014061 	.word	0x08014061
 8013fc0:	080140f9 	.word	0x080140f9
 8013fc4:	08014191 	.word	0x08014191
			{
				case FL:
					lidar->angle = BL;
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8013fd0:	4b89      	ldr	r3, [pc, #548]	; (80141f8 <LidarSetAngle+0x2e8>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d006      	beq.n	8013fe6 <LidarSetAngle+0xd6>
					{
						vesc_speed = BlueType2;
 8013fd8:	4b88      	ldr	r3, [pc, #544]	; (80141fc <LidarSetAngle+0x2ec>)
 8013fda:	4a89      	ldr	r2, [pc, #548]	; (8014200 <LidarSetAngle+0x2f0>)
 8013fdc:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8013fde:	4b89      	ldr	r3, [pc, #548]	; (8014204 <LidarSetAngle+0x2f4>)
 8013fe0:	4a89      	ldr	r2, [pc, #548]	; (8014208 <LidarSetAngle+0x2f8>)
 8013fe2:	601a      	str	r2, [r3, #0]
 8013fe4:	e005      	b.n	8013ff2 <LidarSetAngle+0xe2>
					}
					else
					{
						vesc_speed = RedType2;
 8013fe6:	4b85      	ldr	r3, [pc, #532]	; (80141fc <LidarSetAngle+0x2ec>)
 8013fe8:	4a88      	ldr	r2, [pc, #544]	; (801420c <LidarSetAngle+0x2fc>)
 8013fea:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8013fec:	4b85      	ldr	r3, [pc, #532]	; (8014204 <LidarSetAngle+0x2f4>)
 8013fee:	4a88      	ldr	r2, [pc, #544]	; (8014210 <LidarSetAngle+0x300>)
 8013ff0:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8013ff2:	f7f9 ffc7 	bl	800df84 <ResetCoordinate>

					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8013ff6:	4887      	ldr	r0, [pc, #540]	; (8014214 <LidarSetAngle+0x304>)
 8013ff8:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8013ffc:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8014218 <LidarSetAngle+0x308>
 8014000:	eddf 0a86 	vldr	s1, [pc, #536]	; 801421c <LidarSetAngle+0x30c>
 8014004:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014008:	f7f1 fda0 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 801400c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014010:	4a80      	ldr	r2, [pc, #512]	; (8014214 <LidarSetAngle+0x304>)
 8014012:	2101      	movs	r1, #1
 8014014:	4618      	mov	r0, r3
 8014016:	f7f1 fe23 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801401a:	e00d      	b.n	8014038 <LidarSetAngle+0x128>
					{
						if(ps4.button == SQUARE)
 801401c:	4b80      	ldr	r3, [pc, #512]	; (8014220 <LidarSetAngle+0x310>)
 801401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014024:	d108      	bne.n	8014038 <LidarSetAngle+0x128>
						{
							while(ps4.button == SQUARE);
 8014026:	bf00      	nop
 8014028:	4b7d      	ldr	r3, [pc, #500]	; (8014220 <LidarSetAngle+0x310>)
 801402a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801402c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014030:	d0fa      	beq.n	8014028 <LidarSetAngle+0x118>
							PP_stop(&pp);
 8014032:	4878      	ldr	r0, [pc, #480]	; (8014214 <LidarSetAngle+0x304>)
 8014034:	f7f2 f94c 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014038:	4b76      	ldr	r3, [pc, #472]	; (8014214 <LidarSetAngle+0x304>)
 801403a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801403e:	f003 0301 	and.w	r3, r3, #1
 8014042:	b2db      	uxtb	r3, r3
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1e9      	bne.n	801401c <LidarSetAngle+0x10c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014048:	4872      	ldr	r0, [pc, #456]	; (8014214 <LidarSetAngle+0x304>)
 801404a:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801404e:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8014218 <LidarSetAngle+0x308>
 8014052:	eddf 0a72 	vldr	s1, [pc, #456]	; 801421c <LidarSetAngle+0x30c>
 8014056:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801405a:	f7f1 fd77 	bl	8005b4c <PP_PIDZSet>
					break;
 801405e:	e104      	b.n	801426a <LidarSetAngle+0x35a>

				case S:
					lidar->angle = BL;
 8014060:	683b      	ldr	r3, [r7, #0]
 8014062:	2200      	movs	r2, #0
 8014064:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014068:	4b63      	ldr	r3, [pc, #396]	; (80141f8 <LidarSetAngle+0x2e8>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d006      	beq.n	801407e <LidarSetAngle+0x16e>
					{
						vesc_speed = BlueType2;
 8014070:	4b62      	ldr	r3, [pc, #392]	; (80141fc <LidarSetAngle+0x2ec>)
 8014072:	4a63      	ldr	r2, [pc, #396]	; (8014200 <LidarSetAngle+0x2f0>)
 8014074:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014076:	4b63      	ldr	r3, [pc, #396]	; (8014204 <LidarSetAngle+0x2f4>)
 8014078:	4a63      	ldr	r2, [pc, #396]	; (8014208 <LidarSetAngle+0x2f8>)
 801407a:	601a      	str	r2, [r3, #0]
 801407c:	e005      	b.n	801408a <LidarSetAngle+0x17a>
					}
					else
					{
						vesc_speed = RedType2;
 801407e:	4b5f      	ldr	r3, [pc, #380]	; (80141fc <LidarSetAngle+0x2ec>)
 8014080:	4a62      	ldr	r2, [pc, #392]	; (801420c <LidarSetAngle+0x2fc>)
 8014082:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014084:	4b5f      	ldr	r3, [pc, #380]	; (8014204 <LidarSetAngle+0x2f4>)
 8014086:	4a62      	ldr	r2, [pc, #392]	; (8014210 <LidarSetAngle+0x300>)
 8014088:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801408a:	f7f9 ff7b 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801408e:	4861      	ldr	r0, [pc, #388]	; (8014214 <LidarSetAngle+0x304>)
 8014090:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014094:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8014218 <LidarSetAngle+0x308>
 8014098:	eddf 0a60 	vldr	s1, [pc, #384]	; 801421c <LidarSetAngle+0x30c>
 801409c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80140a0:	f7f1 fd54 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 80140a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80140a8:	4a5a      	ldr	r2, [pc, #360]	; (8014214 <LidarSetAngle+0x304>)
 80140aa:	2101      	movs	r1, #1
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7f1 fdd7 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80140b2:	e00d      	b.n	80140d0 <LidarSetAngle+0x1c0>
					{
						if(ps4.button == SQUARE)
 80140b4:	4b5a      	ldr	r3, [pc, #360]	; (8014220 <LidarSetAngle+0x310>)
 80140b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140bc:	d108      	bne.n	80140d0 <LidarSetAngle+0x1c0>
						{
							while(ps4.button == SQUARE);
 80140be:	bf00      	nop
 80140c0:	4b57      	ldr	r3, [pc, #348]	; (8014220 <LidarSetAngle+0x310>)
 80140c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80140c8:	d0fa      	beq.n	80140c0 <LidarSetAngle+0x1b0>
							PP_stop(&pp);
 80140ca:	4852      	ldr	r0, [pc, #328]	; (8014214 <LidarSetAngle+0x304>)
 80140cc:	f7f2 f900 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80140d0:	4b50      	ldr	r3, [pc, #320]	; (8014214 <LidarSetAngle+0x304>)
 80140d2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80140d6:	f003 0301 	and.w	r3, r3, #1
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d1e9      	bne.n	80140b4 <LidarSetAngle+0x1a4>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80140e0:	484c      	ldr	r0, [pc, #304]	; (8014214 <LidarSetAngle+0x304>)
 80140e2:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80140e6:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8014218 <LidarSetAngle+0x308>
 80140ea:	eddf 0a4c 	vldr	s1, [pc, #304]	; 801421c <LidarSetAngle+0x30c>
 80140ee:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80140f2:	f7f1 fd2b 	bl	8005b4c <PP_PIDZSet>
					break;
 80140f6:	e0b8      	b.n	801426a <LidarSetAngle+0x35a>

				case FR:
					lidar->angle = BL;
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	2200      	movs	r2, #0
 80140fc:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014100:	4b3d      	ldr	r3, [pc, #244]	; (80141f8 <LidarSetAngle+0x2e8>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d006      	beq.n	8014116 <LidarSetAngle+0x206>
					{
						vesc_speed = BlueType2;
 8014108:	4b3c      	ldr	r3, [pc, #240]	; (80141fc <LidarSetAngle+0x2ec>)
 801410a:	4a3d      	ldr	r2, [pc, #244]	; (8014200 <LidarSetAngle+0x2f0>)
 801410c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 801410e:	4b3d      	ldr	r3, [pc, #244]	; (8014204 <LidarSetAngle+0x2f4>)
 8014110:	4a3d      	ldr	r2, [pc, #244]	; (8014208 <LidarSetAngle+0x2f8>)
 8014112:	601a      	str	r2, [r3, #0]
 8014114:	e005      	b.n	8014122 <LidarSetAngle+0x212>
					}
					else
					{
						vesc_speed = RedType2;
 8014116:	4b39      	ldr	r3, [pc, #228]	; (80141fc <LidarSetAngle+0x2ec>)
 8014118:	4a3c      	ldr	r2, [pc, #240]	; (801420c <LidarSetAngle+0x2fc>)
 801411a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 801411c:	4b39      	ldr	r3, [pc, #228]	; (8014204 <LidarSetAngle+0x2f4>)
 801411e:	4a3c      	ldr	r2, [pc, #240]	; (8014210 <LidarSetAngle+0x300>)
 8014120:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014122:	f7f9 ff2f 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014126:	483b      	ldr	r0, [pc, #236]	; (8014214 <LidarSetAngle+0x304>)
 8014128:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 801412c:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8014218 <LidarSetAngle+0x308>
 8014130:	eddf 0a3a 	vldr	s1, [pc, #232]	; 801421c <LidarSetAngle+0x30c>
 8014134:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014138:	f7f1 fd08 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 801413c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014140:	4a34      	ldr	r2, [pc, #208]	; (8014214 <LidarSetAngle+0x304>)
 8014142:	2101      	movs	r1, #1
 8014144:	4618      	mov	r0, r3
 8014146:	f7f1 fd8b 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801414a:	e00d      	b.n	8014168 <LidarSetAngle+0x258>
					{
						if(ps4.button == SQUARE)
 801414c:	4b34      	ldr	r3, [pc, #208]	; (8014220 <LidarSetAngle+0x310>)
 801414e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014154:	d108      	bne.n	8014168 <LidarSetAngle+0x258>
						{
							while(ps4.button == SQUARE);
 8014156:	bf00      	nop
 8014158:	4b31      	ldr	r3, [pc, #196]	; (8014220 <LidarSetAngle+0x310>)
 801415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801415c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014160:	d0fa      	beq.n	8014158 <LidarSetAngle+0x248>
							PP_stop(&pp);
 8014162:	482c      	ldr	r0, [pc, #176]	; (8014214 <LidarSetAngle+0x304>)
 8014164:	f7f2 f8b4 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014168:	4b2a      	ldr	r3, [pc, #168]	; (8014214 <LidarSetAngle+0x304>)
 801416a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801416e:	f003 0301 	and.w	r3, r3, #1
 8014172:	b2db      	uxtb	r3, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d1e9      	bne.n	801414c <LidarSetAngle+0x23c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014178:	4826      	ldr	r0, [pc, #152]	; (8014214 <LidarSetAngle+0x304>)
 801417a:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801417e:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8014218 <LidarSetAngle+0x308>
 8014182:	eddf 0a26 	vldr	s1, [pc, #152]	; 801421c <LidarSetAngle+0x30c>
 8014186:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801418a:	f7f1 fcdf 	bl	8005b4c <PP_PIDZSet>
					break;
 801418e:	e06c      	b.n	801426a <LidarSetAngle+0x35a>

				case BR:
					lidar->angle = BL;
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	2200      	movs	r2, #0
 8014194:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014198:	4b17      	ldr	r3, [pc, #92]	; (80141f8 <LidarSetAngle+0x2e8>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d006      	beq.n	80141ae <LidarSetAngle+0x29e>
					{
						vesc_speed = BlueType2;
 80141a0:	4b16      	ldr	r3, [pc, #88]	; (80141fc <LidarSetAngle+0x2ec>)
 80141a2:	4a17      	ldr	r2, [pc, #92]	; (8014200 <LidarSetAngle+0x2f0>)
 80141a4:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 80141a6:	4b17      	ldr	r3, [pc, #92]	; (8014204 <LidarSetAngle+0x2f4>)
 80141a8:	4a17      	ldr	r2, [pc, #92]	; (8014208 <LidarSetAngle+0x2f8>)
 80141aa:	601a      	str	r2, [r3, #0]
 80141ac:	e005      	b.n	80141ba <LidarSetAngle+0x2aa>
					}
					else
					{
						vesc_speed = RedType2;
 80141ae:	4b13      	ldr	r3, [pc, #76]	; (80141fc <LidarSetAngle+0x2ec>)
 80141b0:	4a16      	ldr	r2, [pc, #88]	; (801420c <LidarSetAngle+0x2fc>)
 80141b2:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 80141b4:	4b13      	ldr	r3, [pc, #76]	; (8014204 <LidarSetAngle+0x2f4>)
 80141b6:	4a16      	ldr	r2, [pc, #88]	; (8014210 <LidarSetAngle+0x300>)
 80141b8:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80141ba:	f7f9 fee3 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80141be:	4815      	ldr	r0, [pc, #84]	; (8014214 <LidarSetAngle+0x304>)
 80141c0:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80141c4:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8014218 <LidarSetAngle+0x308>
 80141c8:	eddf 0a14 	vldr	s1, [pc, #80]	; 801421c <LidarSetAngle+0x30c>
 80141cc:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80141d0:	f7f1 fcbc 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 80141d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80141d8:	4a0e      	ldr	r2, [pc, #56]	; (8014214 <LidarSetAngle+0x304>)
 80141da:	2101      	movs	r1, #1
 80141dc:	4618      	mov	r0, r3
 80141de:	f7f1 fd3f 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80141e2:	e02d      	b.n	8014240 <LidarSetAngle+0x330>
 80141e4:	080254c0 	.word	0x080254c0
 80141e8:	080254dc 	.word	0x080254dc
 80141ec:	080254f8 	.word	0x080254f8
 80141f0:	08025514 	.word	0x08025514
 80141f4:	08025530 	.word	0x08025530
 80141f8:	20006a4c 	.word	0x20006a4c
 80141fc:	200065c0 	.word	0x200065c0
 8014200:	41026666 	.word	0x41026666
 8014204:	2000749c 	.word	0x2000749c
 8014208:	44da2000 	.word	0x44da2000
 801420c:	4104cccd 	.word	0x4104cccd
 8014210:	44dc0000 	.word	0x44dc0000
 8014214:	20006d4c 	.word	0x20006d4c
 8014218:	3e4ccccd 	.word	0x3e4ccccd
 801421c:	3d4ccccd 	.word	0x3d4ccccd
 8014220:	2000a244 	.word	0x2000a244
					{
						if(ps4.button == SQUARE)
 8014224:	4bb5      	ldr	r3, [pc, #724]	; (80144fc <LidarSetAngle+0x5ec>)
 8014226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801422c:	d108      	bne.n	8014240 <LidarSetAngle+0x330>
						{
							while(ps4.button == SQUARE);
 801422e:	bf00      	nop
 8014230:	4bb2      	ldr	r3, [pc, #712]	; (80144fc <LidarSetAngle+0x5ec>)
 8014232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014238:	d0fa      	beq.n	8014230 <LidarSetAngle+0x320>
							PP_stop(&pp);
 801423a:	48b1      	ldr	r0, [pc, #708]	; (8014500 <LidarSetAngle+0x5f0>)
 801423c:	f7f2 f848 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014240:	4baf      	ldr	r3, [pc, #700]	; (8014500 <LidarSetAngle+0x5f0>)
 8014242:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014246:	f003 0301 	and.w	r3, r3, #1
 801424a:	b2db      	uxtb	r3, r3
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1e9      	bne.n	8014224 <LidarSetAngle+0x314>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014250:	48ab      	ldr	r0, [pc, #684]	; (8014500 <LidarSetAngle+0x5f0>)
 8014252:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014256:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8014504 <LidarSetAngle+0x5f4>
 801425a:	eddf 0aab 	vldr	s1, [pc, #684]	; 8014508 <LidarSetAngle+0x5f8>
 801425e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014262:	f7f1 fc73 	bl	8005b4c <PP_PIDZSet>
					break;
 8014266:	e000      	b.n	801426a <LidarSetAngle+0x35a>

				default:
					break;
 8014268:	bf00      	nop
			}
			break;
 801426a:	f000 bd62 	b.w	8014d32 <LidarSetAngle+0xe22>

		case FL:
			switch(lidar->angle) // Current Angle
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8014274:	2b04      	cmp	r3, #4
 8014276:	f200 813d 	bhi.w	80144f4 <LidarSetAngle+0x5e4>
 801427a:	a201      	add	r2, pc, #4	; (adr r2, 8014280 <LidarSetAngle+0x370>)
 801427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014280:	08014295 	.word	0x08014295
 8014284:	080144f5 	.word	0x080144f5
 8014288:	0801432d 	.word	0x0801432d
 801428c:	080143c5 	.word	0x080143c5
 8014290:	0801445d 	.word	0x0801445d
			{
				case BL:
					lidar->angle = FL;
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	2201      	movs	r2, #1
 8014298:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 801429c:	4b9b      	ldr	r3, [pc, #620]	; (801450c <LidarSetAngle+0x5fc>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d006      	beq.n	80142b2 <LidarSetAngle+0x3a2>
					{
						vesc_speed = BlueType2;
 80142a4:	4b9a      	ldr	r3, [pc, #616]	; (8014510 <LidarSetAngle+0x600>)
 80142a6:	4a9b      	ldr	r2, [pc, #620]	; (8014514 <LidarSetAngle+0x604>)
 80142a8:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80142aa:	4b9b      	ldr	r3, [pc, #620]	; (8014518 <LidarSetAngle+0x608>)
 80142ac:	4a9b      	ldr	r2, [pc, #620]	; (801451c <LidarSetAngle+0x60c>)
 80142ae:	601a      	str	r2, [r3, #0]
 80142b0:	e005      	b.n	80142be <LidarSetAngle+0x3ae>
					}
					else
					{
						vesc_speed = RedType2;
 80142b2:	4b97      	ldr	r3, [pc, #604]	; (8014510 <LidarSetAngle+0x600>)
 80142b4:	4a9a      	ldr	r2, [pc, #616]	; (8014520 <LidarSetAngle+0x610>)
 80142b6:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 80142b8:	4b97      	ldr	r3, [pc, #604]	; (8014518 <LidarSetAngle+0x608>)
 80142ba:	4a9a      	ldr	r2, [pc, #616]	; (8014524 <LidarSetAngle+0x614>)
 80142bc:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80142be:	f7f9 fe61 	bl	800df84 <ResetCoordinate>

					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80142c2:	488f      	ldr	r0, [pc, #572]	; (8014500 <LidarSetAngle+0x5f0>)
 80142c4:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80142c8:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 8014504 <LidarSetAngle+0x5f4>
 80142cc:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8014508 <LidarSetAngle+0x5f8>
 80142d0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80142d4:	f7f1 fc3a 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 80142d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80142dc:	4a88      	ldr	r2, [pc, #544]	; (8014500 <LidarSetAngle+0x5f0>)
 80142de:	2101      	movs	r1, #1
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7f1 fcbd 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80142e6:	e00d      	b.n	8014304 <LidarSetAngle+0x3f4>
					{
						if(ps4.button == SQUARE)
 80142e8:	4b84      	ldr	r3, [pc, #528]	; (80144fc <LidarSetAngle+0x5ec>)
 80142ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142f0:	d108      	bne.n	8014304 <LidarSetAngle+0x3f4>
						{
							while(ps4.button == SQUARE);
 80142f2:	bf00      	nop
 80142f4:	4b81      	ldr	r3, [pc, #516]	; (80144fc <LidarSetAngle+0x5ec>)
 80142f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142fc:	d0fa      	beq.n	80142f4 <LidarSetAngle+0x3e4>
							PP_stop(&pp);
 80142fe:	4880      	ldr	r0, [pc, #512]	; (8014500 <LidarSetAngle+0x5f0>)
 8014300:	f7f1 ffe6 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014304:	4b7e      	ldr	r3, [pc, #504]	; (8014500 <LidarSetAngle+0x5f0>)
 8014306:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801430a:	f003 0301 	and.w	r3, r3, #1
 801430e:	b2db      	uxtb	r3, r3
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1e9      	bne.n	80142e8 <LidarSetAngle+0x3d8>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014314:	487a      	ldr	r0, [pc, #488]	; (8014500 <LidarSetAngle+0x5f0>)
 8014316:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801431a:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8014504 <LidarSetAngle+0x5f4>
 801431e:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8014508 <LidarSetAngle+0x5f8>
 8014322:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014326:	f7f1 fc11 	bl	8005b4c <PP_PIDZSet>
					break;
 801432a:	e0e4      	b.n	80144f6 <LidarSetAngle+0x5e6>

				case S:
					lidar->angle = FL;
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	2201      	movs	r2, #1
 8014330:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014334:	4b75      	ldr	r3, [pc, #468]	; (801450c <LidarSetAngle+0x5fc>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d006      	beq.n	801434a <LidarSetAngle+0x43a>
					{
						vesc_speed = BlueType2;
 801433c:	4b74      	ldr	r3, [pc, #464]	; (8014510 <LidarSetAngle+0x600>)
 801433e:	4a75      	ldr	r2, [pc, #468]	; (8014514 <LidarSetAngle+0x604>)
 8014340:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014342:	4b75      	ldr	r3, [pc, #468]	; (8014518 <LidarSetAngle+0x608>)
 8014344:	4a75      	ldr	r2, [pc, #468]	; (801451c <LidarSetAngle+0x60c>)
 8014346:	601a      	str	r2, [r3, #0]
 8014348:	e005      	b.n	8014356 <LidarSetAngle+0x446>
					}
					else
					{
						vesc_speed = RedType2;
 801434a:	4b71      	ldr	r3, [pc, #452]	; (8014510 <LidarSetAngle+0x600>)
 801434c:	4a74      	ldr	r2, [pc, #464]	; (8014520 <LidarSetAngle+0x610>)
 801434e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014350:	4b71      	ldr	r3, [pc, #452]	; (8014518 <LidarSetAngle+0x608>)
 8014352:	4a74      	ldr	r2, [pc, #464]	; (8014524 <LidarSetAngle+0x614>)
 8014354:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014356:	f7f9 fe15 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801435a:	4869      	ldr	r0, [pc, #420]	; (8014500 <LidarSetAngle+0x5f0>)
 801435c:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014360:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8014504 <LidarSetAngle+0x5f4>
 8014364:	eddf 0a68 	vldr	s1, [pc, #416]	; 8014508 <LidarSetAngle+0x5f8>
 8014368:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801436c:	f7f1 fbee 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 8014370:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014374:	4a62      	ldr	r2, [pc, #392]	; (8014500 <LidarSetAngle+0x5f0>)
 8014376:	2101      	movs	r1, #1
 8014378:	4618      	mov	r0, r3
 801437a:	f7f1 fc71 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801437e:	e00d      	b.n	801439c <LidarSetAngle+0x48c>
					{
						if(ps4.button == SQUARE)
 8014380:	4b5e      	ldr	r3, [pc, #376]	; (80144fc <LidarSetAngle+0x5ec>)
 8014382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014388:	d108      	bne.n	801439c <LidarSetAngle+0x48c>
						{
							while(ps4.button == SQUARE);
 801438a:	bf00      	nop
 801438c:	4b5b      	ldr	r3, [pc, #364]	; (80144fc <LidarSetAngle+0x5ec>)
 801438e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014394:	d0fa      	beq.n	801438c <LidarSetAngle+0x47c>
							PP_stop(&pp);
 8014396:	485a      	ldr	r0, [pc, #360]	; (8014500 <LidarSetAngle+0x5f0>)
 8014398:	f7f1 ff9a 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801439c:	4b58      	ldr	r3, [pc, #352]	; (8014500 <LidarSetAngle+0x5f0>)
 801439e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80143a2:	f003 0301 	and.w	r3, r3, #1
 80143a6:	b2db      	uxtb	r3, r3
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1e9      	bne.n	8014380 <LidarSetAngle+0x470>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80143ac:	4854      	ldr	r0, [pc, #336]	; (8014500 <LidarSetAngle+0x5f0>)
 80143ae:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80143b2:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8014504 <LidarSetAngle+0x5f4>
 80143b6:	eddf 0a54 	vldr	s1, [pc, #336]	; 8014508 <LidarSetAngle+0x5f8>
 80143ba:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80143be:	f7f1 fbc5 	bl	8005b4c <PP_PIDZSet>
					break;
 80143c2:	e098      	b.n	80144f6 <LidarSetAngle+0x5e6>

				case FR:
					lidar->angle = FL;
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	2201      	movs	r2, #1
 80143c8:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80143cc:	4b4f      	ldr	r3, [pc, #316]	; (801450c <LidarSetAngle+0x5fc>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d006      	beq.n	80143e2 <LidarSetAngle+0x4d2>
					{
						vesc_speed = BlueType2;
 80143d4:	4b4e      	ldr	r3, [pc, #312]	; (8014510 <LidarSetAngle+0x600>)
 80143d6:	4a4f      	ldr	r2, [pc, #316]	; (8014514 <LidarSetAngle+0x604>)
 80143d8:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80143da:	4b4f      	ldr	r3, [pc, #316]	; (8014518 <LidarSetAngle+0x608>)
 80143dc:	4a4f      	ldr	r2, [pc, #316]	; (801451c <LidarSetAngle+0x60c>)
 80143de:	601a      	str	r2, [r3, #0]
 80143e0:	e005      	b.n	80143ee <LidarSetAngle+0x4de>
					}
					else
					{
						vesc_speed = RedType2;
 80143e2:	4b4b      	ldr	r3, [pc, #300]	; (8014510 <LidarSetAngle+0x600>)
 80143e4:	4a4e      	ldr	r2, [pc, #312]	; (8014520 <LidarSetAngle+0x610>)
 80143e6:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 80143e8:	4b4b      	ldr	r3, [pc, #300]	; (8014518 <LidarSetAngle+0x608>)
 80143ea:	4a4e      	ldr	r2, [pc, #312]	; (8014524 <LidarSetAngle+0x614>)
 80143ec:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80143ee:	f7f9 fdc9 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80143f2:	4843      	ldr	r0, [pc, #268]	; (8014500 <LidarSetAngle+0x5f0>)
 80143f4:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80143f8:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8014504 <LidarSetAngle+0x5f4>
 80143fc:	eddf 0a42 	vldr	s1, [pc, #264]	; 8014508 <LidarSetAngle+0x5f8>
 8014400:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014404:	f7f1 fba2 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 8014408:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801440c:	4a3c      	ldr	r2, [pc, #240]	; (8014500 <LidarSetAngle+0x5f0>)
 801440e:	2101      	movs	r1, #1
 8014410:	4618      	mov	r0, r3
 8014412:	f7f1 fc25 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014416:	e00d      	b.n	8014434 <LidarSetAngle+0x524>
					{
						if(ps4.button == SQUARE)
 8014418:	4b38      	ldr	r3, [pc, #224]	; (80144fc <LidarSetAngle+0x5ec>)
 801441a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801441c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014420:	d108      	bne.n	8014434 <LidarSetAngle+0x524>
						{
							while(ps4.button == SQUARE);
 8014422:	bf00      	nop
 8014424:	4b35      	ldr	r3, [pc, #212]	; (80144fc <LidarSetAngle+0x5ec>)
 8014426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801442c:	d0fa      	beq.n	8014424 <LidarSetAngle+0x514>
							PP_stop(&pp);
 801442e:	4834      	ldr	r0, [pc, #208]	; (8014500 <LidarSetAngle+0x5f0>)
 8014430:	f7f1 ff4e 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014434:	4b32      	ldr	r3, [pc, #200]	; (8014500 <LidarSetAngle+0x5f0>)
 8014436:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801443a:	f003 0301 	and.w	r3, r3, #1
 801443e:	b2db      	uxtb	r3, r3
 8014440:	2b00      	cmp	r3, #0
 8014442:	d1e9      	bne.n	8014418 <LidarSetAngle+0x508>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014444:	482e      	ldr	r0, [pc, #184]	; (8014500 <LidarSetAngle+0x5f0>)
 8014446:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801444a:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8014504 <LidarSetAngle+0x5f4>
 801444e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8014508 <LidarSetAngle+0x5f8>
 8014452:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014456:	f7f1 fb79 	bl	8005b4c <PP_PIDZSet>
					break;
 801445a:	e04c      	b.n	80144f6 <LidarSetAngle+0x5e6>

				case BR:
					lidar->angle = FL;
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2201      	movs	r2, #1
 8014460:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014464:	4b29      	ldr	r3, [pc, #164]	; (801450c <LidarSetAngle+0x5fc>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d006      	beq.n	801447a <LidarSetAngle+0x56a>
					{
						vesc_speed = BlueType2;
 801446c:	4b28      	ldr	r3, [pc, #160]	; (8014510 <LidarSetAngle+0x600>)
 801446e:	4a29      	ldr	r2, [pc, #164]	; (8014514 <LidarSetAngle+0x604>)
 8014470:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014472:	4b29      	ldr	r3, [pc, #164]	; (8014518 <LidarSetAngle+0x608>)
 8014474:	4a29      	ldr	r2, [pc, #164]	; (801451c <LidarSetAngle+0x60c>)
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	e005      	b.n	8014486 <LidarSetAngle+0x576>
					}
					else
					{
						vesc_speed = RedType2;
 801447a:	4b25      	ldr	r3, [pc, #148]	; (8014510 <LidarSetAngle+0x600>)
 801447c:	4a28      	ldr	r2, [pc, #160]	; (8014520 <LidarSetAngle+0x610>)
 801447e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014480:	4b25      	ldr	r3, [pc, #148]	; (8014518 <LidarSetAngle+0x608>)
 8014482:	4a28      	ldr	r2, [pc, #160]	; (8014524 <LidarSetAngle+0x614>)
 8014484:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014486:	f7f9 fd7d 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801448a:	481d      	ldr	r0, [pc, #116]	; (8014500 <LidarSetAngle+0x5f0>)
 801448c:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014490:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8014504 <LidarSetAngle+0x5f4>
 8014494:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8014508 <LidarSetAngle+0x5f8>
 8014498:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801449c:	f7f1 fb56 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 80144a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80144a4:	4a16      	ldr	r2, [pc, #88]	; (8014500 <LidarSetAngle+0x5f0>)
 80144a6:	2101      	movs	r1, #1
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7f1 fbd9 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80144ae:	e00d      	b.n	80144cc <LidarSetAngle+0x5bc>
					{
						if(ps4.button == SQUARE)
 80144b0:	4b12      	ldr	r3, [pc, #72]	; (80144fc <LidarSetAngle+0x5ec>)
 80144b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144b8:	d108      	bne.n	80144cc <LidarSetAngle+0x5bc>
						{
							while(ps4.button == SQUARE);
 80144ba:	bf00      	nop
 80144bc:	4b0f      	ldr	r3, [pc, #60]	; (80144fc <LidarSetAngle+0x5ec>)
 80144be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144c4:	d0fa      	beq.n	80144bc <LidarSetAngle+0x5ac>
							PP_stop(&pp);
 80144c6:	480e      	ldr	r0, [pc, #56]	; (8014500 <LidarSetAngle+0x5f0>)
 80144c8:	f7f1 ff02 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80144cc:	4b0c      	ldr	r3, [pc, #48]	; (8014500 <LidarSetAngle+0x5f0>)
 80144ce:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80144d2:	f003 0301 	and.w	r3, r3, #1
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d1e9      	bne.n	80144b0 <LidarSetAngle+0x5a0>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80144dc:	4808      	ldr	r0, [pc, #32]	; (8014500 <LidarSetAngle+0x5f0>)
 80144de:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80144e2:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8014504 <LidarSetAngle+0x5f4>
 80144e6:	eddf 0a08 	vldr	s1, [pc, #32]	; 8014508 <LidarSetAngle+0x5f8>
 80144ea:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80144ee:	f7f1 fb2d 	bl	8005b4c <PP_PIDZSet>
					break;
 80144f2:	e000      	b.n	80144f6 <LidarSetAngle+0x5e6>

				default:
					break;
 80144f4:	bf00      	nop
			}
			break;
 80144f6:	f000 bc1c 	b.w	8014d32 <LidarSetAngle+0xe22>
 80144fa:	bf00      	nop
 80144fc:	2000a244 	.word	0x2000a244
 8014500:	20006d4c 	.word	0x20006d4c
 8014504:	3e4ccccd 	.word	0x3e4ccccd
 8014508:	3d4ccccd 	.word	0x3d4ccccd
 801450c:	20006a4c 	.word	0x20006a4c
 8014510:	200065c0 	.word	0x200065c0
 8014514:	41026666 	.word	0x41026666
 8014518:	2000749c 	.word	0x2000749c
 801451c:	45101000 	.word	0x45101000
 8014520:	4104cccd 	.word	0x4104cccd
 8014524:	4511a000 	.word	0x4511a000

		case S:
			switch(lidar->angle)
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 801452e:	2b04      	cmp	r3, #4
 8014530:	f200 813e 	bhi.w	80147b0 <LidarSetAngle+0x8a0>
 8014534:	a201      	add	r2, pc, #4	; (adr r2, 801453c <LidarSetAngle+0x62c>)
 8014536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801453a:	bf00      	nop
 801453c:	080145e9 	.word	0x080145e9
 8014540:	08014551 	.word	0x08014551
 8014544:	080147b1 	.word	0x080147b1
 8014548:	08014681 	.word	0x08014681
 801454c:	08014719 	.word	0x08014719
			{
				case FL:
					lidar->angle = S;
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	2202      	movs	r2, #2
 8014554:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014558:	4ba8      	ldr	r3, [pc, #672]	; (80147fc <LidarSetAngle+0x8ec>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d006      	beq.n	801456e <LidarSetAngle+0x65e>
					{
						vesc_speed = BlueType3;
 8014560:	4ba7      	ldr	r3, [pc, #668]	; (8014800 <LidarSetAngle+0x8f0>)
 8014562:	4aa8      	ldr	r2, [pc, #672]	; (8014804 <LidarSetAngle+0x8f4>)
 8014564:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 8014566:	4ba8      	ldr	r3, [pc, #672]	; (8014808 <LidarSetAngle+0x8f8>)
 8014568:	4aa8      	ldr	r2, [pc, #672]	; (801480c <LidarSetAngle+0x8fc>)
 801456a:	601a      	str	r2, [r3, #0]
 801456c:	e005      	b.n	801457a <LidarSetAngle+0x66a>
					}
					else
					{
						vesc_speed = RedType3;
 801456e:	4ba4      	ldr	r3, [pc, #656]	; (8014800 <LidarSetAngle+0x8f0>)
 8014570:	4aa7      	ldr	r2, [pc, #668]	; (8014810 <LidarSetAngle+0x900>)
 8014572:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 8014574:	4ba4      	ldr	r3, [pc, #656]	; (8014808 <LidarSetAngle+0x8f8>)
 8014576:	4aa7      	ldr	r2, [pc, #668]	; (8014814 <LidarSetAngle+0x904>)
 8014578:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801457a:	f7f9 fd03 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801457e:	48a6      	ldr	r0, [pc, #664]	; (8014818 <LidarSetAngle+0x908>)
 8014580:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014584:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 801481c <LidarSetAngle+0x90c>
 8014588:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8014820 <LidarSetAngle+0x910>
 801458c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014590:	f7f1 fadc 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 8014594:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014598:	4a9f      	ldr	r2, [pc, #636]	; (8014818 <LidarSetAngle+0x908>)
 801459a:	2101      	movs	r1, #1
 801459c:	4618      	mov	r0, r3
 801459e:	f7f1 fb5f 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80145a2:	e00d      	b.n	80145c0 <LidarSetAngle+0x6b0>
					{
						if(ps4.button == SQUARE)
 80145a4:	4b9f      	ldr	r3, [pc, #636]	; (8014824 <LidarSetAngle+0x914>)
 80145a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145ac:	d108      	bne.n	80145c0 <LidarSetAngle+0x6b0>
						{
							while(ps4.button == SQUARE);
 80145ae:	bf00      	nop
 80145b0:	4b9c      	ldr	r3, [pc, #624]	; (8014824 <LidarSetAngle+0x914>)
 80145b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145b8:	d0fa      	beq.n	80145b0 <LidarSetAngle+0x6a0>
							PP_stop(&pp);
 80145ba:	4897      	ldr	r0, [pc, #604]	; (8014818 <LidarSetAngle+0x908>)
 80145bc:	f7f1 fe88 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80145c0:	4b95      	ldr	r3, [pc, #596]	; (8014818 <LidarSetAngle+0x908>)
 80145c2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80145c6:	f003 0301 	and.w	r3, r3, #1
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d1e9      	bne.n	80145a4 <LidarSetAngle+0x694>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80145d0:	4891      	ldr	r0, [pc, #580]	; (8014818 <LidarSetAngle+0x908>)
 80145d2:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80145d6:	ed9f 1a91 	vldr	s2, [pc, #580]	; 801481c <LidarSetAngle+0x90c>
 80145da:	eddf 0a91 	vldr	s1, [pc, #580]	; 8014820 <LidarSetAngle+0x910>
 80145de:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80145e2:	f7f1 fab3 	bl	8005b4c <PP_PIDZSet>
					break;
 80145e6:	e0e4      	b.n	80147b2 <LidarSetAngle+0x8a2>

				case BL:
					lidar->angle = S;
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	2202      	movs	r2, #2
 80145ec:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80145f0:	4b82      	ldr	r3, [pc, #520]	; (80147fc <LidarSetAngle+0x8ec>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d006      	beq.n	8014606 <LidarSetAngle+0x6f6>
					{
						vesc_speed = BlueType3;
 80145f8:	4b81      	ldr	r3, [pc, #516]	; (8014800 <LidarSetAngle+0x8f0>)
 80145fa:	4a82      	ldr	r2, [pc, #520]	; (8014804 <LidarSetAngle+0x8f4>)
 80145fc:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 80145fe:	4b82      	ldr	r3, [pc, #520]	; (8014808 <LidarSetAngle+0x8f8>)
 8014600:	4a82      	ldr	r2, [pc, #520]	; (801480c <LidarSetAngle+0x8fc>)
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	e005      	b.n	8014612 <LidarSetAngle+0x702>
					}
					else
					{
						vesc_speed = RedType3;
 8014606:	4b7e      	ldr	r3, [pc, #504]	; (8014800 <LidarSetAngle+0x8f0>)
 8014608:	4a81      	ldr	r2, [pc, #516]	; (8014810 <LidarSetAngle+0x900>)
 801460a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 801460c:	4b7e      	ldr	r3, [pc, #504]	; (8014808 <LidarSetAngle+0x8f8>)
 801460e:	4a81      	ldr	r2, [pc, #516]	; (8014814 <LidarSetAngle+0x904>)
 8014610:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014612:	f7f9 fcb7 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014616:	4880      	ldr	r0, [pc, #512]	; (8014818 <LidarSetAngle+0x908>)
 8014618:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 801461c:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 801481c <LidarSetAngle+0x90c>
 8014620:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8014820 <LidarSetAngle+0x910>
 8014624:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014628:	f7f1 fa90 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 801462c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014630:	4a79      	ldr	r2, [pc, #484]	; (8014818 <LidarSetAngle+0x908>)
 8014632:	2101      	movs	r1, #1
 8014634:	4618      	mov	r0, r3
 8014636:	f7f1 fb13 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801463a:	e00d      	b.n	8014658 <LidarSetAngle+0x748>
					{
						if(ps4.button == SQUARE)
 801463c:	4b79      	ldr	r3, [pc, #484]	; (8014824 <LidarSetAngle+0x914>)
 801463e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014644:	d108      	bne.n	8014658 <LidarSetAngle+0x748>
						{
							while(ps4.button == SQUARE);
 8014646:	bf00      	nop
 8014648:	4b76      	ldr	r3, [pc, #472]	; (8014824 <LidarSetAngle+0x914>)
 801464a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014650:	d0fa      	beq.n	8014648 <LidarSetAngle+0x738>
							PP_stop(&pp);
 8014652:	4871      	ldr	r0, [pc, #452]	; (8014818 <LidarSetAngle+0x908>)
 8014654:	f7f1 fe3c 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014658:	4b6f      	ldr	r3, [pc, #444]	; (8014818 <LidarSetAngle+0x908>)
 801465a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801465e:	f003 0301 	and.w	r3, r3, #1
 8014662:	b2db      	uxtb	r3, r3
 8014664:	2b00      	cmp	r3, #0
 8014666:	d1e9      	bne.n	801463c <LidarSetAngle+0x72c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014668:	486b      	ldr	r0, [pc, #428]	; (8014818 <LidarSetAngle+0x908>)
 801466a:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801466e:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 801481c <LidarSetAngle+0x90c>
 8014672:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8014820 <LidarSetAngle+0x910>
 8014676:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801467a:	f7f1 fa67 	bl	8005b4c <PP_PIDZSet>
					break;
 801467e:	e098      	b.n	80147b2 <LidarSetAngle+0x8a2>

				case FR:
					lidar->angle = S;
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	2202      	movs	r2, #2
 8014684:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014688:	4b5c      	ldr	r3, [pc, #368]	; (80147fc <LidarSetAngle+0x8ec>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d006      	beq.n	801469e <LidarSetAngle+0x78e>
					{
						vesc_speed = BlueType3;
 8014690:	4b5b      	ldr	r3, [pc, #364]	; (8014800 <LidarSetAngle+0x8f0>)
 8014692:	4a5c      	ldr	r2, [pc, #368]	; (8014804 <LidarSetAngle+0x8f4>)
 8014694:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 8014696:	4b5c      	ldr	r3, [pc, #368]	; (8014808 <LidarSetAngle+0x8f8>)
 8014698:	4a5c      	ldr	r2, [pc, #368]	; (801480c <LidarSetAngle+0x8fc>)
 801469a:	601a      	str	r2, [r3, #0]
 801469c:	e005      	b.n	80146aa <LidarSetAngle+0x79a>
					}
					else
					{
						vesc_speed = RedType3;
 801469e:	4b58      	ldr	r3, [pc, #352]	; (8014800 <LidarSetAngle+0x8f0>)
 80146a0:	4a5b      	ldr	r2, [pc, #364]	; (8014810 <LidarSetAngle+0x900>)
 80146a2:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 80146a4:	4b58      	ldr	r3, [pc, #352]	; (8014808 <LidarSetAngle+0x8f8>)
 80146a6:	4a5b      	ldr	r2, [pc, #364]	; (8014814 <LidarSetAngle+0x904>)
 80146a8:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80146aa:	f7f9 fc6b 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80146ae:	485a      	ldr	r0, [pc, #360]	; (8014818 <LidarSetAngle+0x908>)
 80146b0:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80146b4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 801481c <LidarSetAngle+0x90c>
 80146b8:	eddf 0a59 	vldr	s1, [pc, #356]	; 8014820 <LidarSetAngle+0x910>
 80146bc:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80146c0:	f7f1 fa44 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 80146c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80146c8:	4a53      	ldr	r2, [pc, #332]	; (8014818 <LidarSetAngle+0x908>)
 80146ca:	2101      	movs	r1, #1
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7f1 fac7 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80146d2:	e00d      	b.n	80146f0 <LidarSetAngle+0x7e0>
					{
						if(ps4.button == SQUARE)
 80146d4:	4b53      	ldr	r3, [pc, #332]	; (8014824 <LidarSetAngle+0x914>)
 80146d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80146dc:	d108      	bne.n	80146f0 <LidarSetAngle+0x7e0>
						{
							while(ps4.button == SQUARE);
 80146de:	bf00      	nop
 80146e0:	4b50      	ldr	r3, [pc, #320]	; (8014824 <LidarSetAngle+0x914>)
 80146e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80146e8:	d0fa      	beq.n	80146e0 <LidarSetAngle+0x7d0>
							PP_stop(&pp);
 80146ea:	484b      	ldr	r0, [pc, #300]	; (8014818 <LidarSetAngle+0x908>)
 80146ec:	f7f1 fdf0 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80146f0:	4b49      	ldr	r3, [pc, #292]	; (8014818 <LidarSetAngle+0x908>)
 80146f2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80146f6:	f003 0301 	and.w	r3, r3, #1
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d1e9      	bne.n	80146d4 <LidarSetAngle+0x7c4>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014700:	4845      	ldr	r0, [pc, #276]	; (8014818 <LidarSetAngle+0x908>)
 8014702:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014706:	ed9f 1a45 	vldr	s2, [pc, #276]	; 801481c <LidarSetAngle+0x90c>
 801470a:	eddf 0a45 	vldr	s1, [pc, #276]	; 8014820 <LidarSetAngle+0x910>
 801470e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014712:	f7f1 fa1b 	bl	8005b4c <PP_PIDZSet>
					break;
 8014716:	e04c      	b.n	80147b2 <LidarSetAngle+0x8a2>

				case BR:
					lidar->angle = S;
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	2202      	movs	r2, #2
 801471c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014720:	4b36      	ldr	r3, [pc, #216]	; (80147fc <LidarSetAngle+0x8ec>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d006      	beq.n	8014736 <LidarSetAngle+0x826>
					{
						vesc_speed = BlueType3;
 8014728:	4b35      	ldr	r3, [pc, #212]	; (8014800 <LidarSetAngle+0x8f0>)
 801472a:	4a36      	ldr	r2, [pc, #216]	; (8014804 <LidarSetAngle+0x8f4>)
 801472c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 801472e:	4b36      	ldr	r3, [pc, #216]	; (8014808 <LidarSetAngle+0x8f8>)
 8014730:	4a36      	ldr	r2, [pc, #216]	; (801480c <LidarSetAngle+0x8fc>)
 8014732:	601a      	str	r2, [r3, #0]
 8014734:	e005      	b.n	8014742 <LidarSetAngle+0x832>
					}
					else
					{
						vesc_speed = RedType3;
 8014736:	4b32      	ldr	r3, [pc, #200]	; (8014800 <LidarSetAngle+0x8f0>)
 8014738:	4a35      	ldr	r2, [pc, #212]	; (8014810 <LidarSetAngle+0x900>)
 801473a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 801473c:	4b32      	ldr	r3, [pc, #200]	; (8014808 <LidarSetAngle+0x8f8>)
 801473e:	4a35      	ldr	r2, [pc, #212]	; (8014814 <LidarSetAngle+0x904>)
 8014740:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014742:	f7f9 fc1f 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014746:	4834      	ldr	r0, [pc, #208]	; (8014818 <LidarSetAngle+0x908>)
 8014748:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 801474c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 801481c <LidarSetAngle+0x90c>
 8014750:	eddf 0a33 	vldr	s1, [pc, #204]	; 8014820 <LidarSetAngle+0x910>
 8014754:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014758:	f7f1 f9f8 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 801475c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014760:	4a2d      	ldr	r2, [pc, #180]	; (8014818 <LidarSetAngle+0x908>)
 8014762:	2101      	movs	r1, #1
 8014764:	4618      	mov	r0, r3
 8014766:	f7f1 fa7b 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 801476a:	e00d      	b.n	8014788 <LidarSetAngle+0x878>
					{
						if(ps4.button == SQUARE)
 801476c:	4b2d      	ldr	r3, [pc, #180]	; (8014824 <LidarSetAngle+0x914>)
 801476e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014774:	d108      	bne.n	8014788 <LidarSetAngle+0x878>
						{
							while(ps4.button == SQUARE);
 8014776:	bf00      	nop
 8014778:	4b2a      	ldr	r3, [pc, #168]	; (8014824 <LidarSetAngle+0x914>)
 801477a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801477c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014780:	d0fa      	beq.n	8014778 <LidarSetAngle+0x868>
							PP_stop(&pp);
 8014782:	4825      	ldr	r0, [pc, #148]	; (8014818 <LidarSetAngle+0x908>)
 8014784:	f7f1 fda4 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014788:	4b23      	ldr	r3, [pc, #140]	; (8014818 <LidarSetAngle+0x908>)
 801478a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801478e:	f003 0301 	and.w	r3, r3, #1
 8014792:	b2db      	uxtb	r3, r3
 8014794:	2b00      	cmp	r3, #0
 8014796:	d1e9      	bne.n	801476c <LidarSetAngle+0x85c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014798:	481f      	ldr	r0, [pc, #124]	; (8014818 <LidarSetAngle+0x908>)
 801479a:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801479e:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 801481c <LidarSetAngle+0x90c>
 80147a2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8014820 <LidarSetAngle+0x910>
 80147a6:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80147aa:	f7f1 f9cf 	bl	8005b4c <PP_PIDZSet>
					break;
 80147ae:	e000      	b.n	80147b2 <LidarSetAngle+0x8a2>

				default:
					break;
 80147b0:	bf00      	nop
			}
			break;
 80147b2:	e2be      	b.n	8014d32 <LidarSetAngle+0xe22>

		case FR:
			switch(lidar->angle)
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80147ba:	2b04      	cmp	r3, #4
 80147bc:	f200 8159 	bhi.w	8014a72 <LidarSetAngle+0xb62>
 80147c0:	a201      	add	r2, pc, #4	; (adr r2, 80147c8 <LidarSetAngle+0x8b8>)
 80147c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c6:	bf00      	nop
 80147c8:	080147dd 	.word	0x080147dd
 80147cc:	080148ab 	.word	0x080148ab
 80147d0:	08014943 	.word	0x08014943
 80147d4:	08014a73 	.word	0x08014a73
 80147d8:	080149db 	.word	0x080149db
			{
				case BL:
					lidar->angle = FR;
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	2203      	movs	r2, #3
 80147e0:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80147e4:	4b05      	ldr	r3, [pc, #20]	; (80147fc <LidarSetAngle+0x8ec>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d021      	beq.n	8014830 <LidarSetAngle+0x920>
					{
						vesc_speed = BlueType2;
 80147ec:	4b04      	ldr	r3, [pc, #16]	; (8014800 <LidarSetAngle+0x8f0>)
 80147ee:	4a0e      	ldr	r2, [pc, #56]	; (8014828 <LidarSetAngle+0x918>)
 80147f0:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80147f2:	4b05      	ldr	r3, [pc, #20]	; (8014808 <LidarSetAngle+0x8f8>)
 80147f4:	4a0d      	ldr	r2, [pc, #52]	; (801482c <LidarSetAngle+0x91c>)
 80147f6:	601a      	str	r2, [r3, #0]
 80147f8:	e020      	b.n	801483c <LidarSetAngle+0x92c>
 80147fa:	bf00      	nop
 80147fc:	20006a4c 	.word	0x20006a4c
 8014800:	200065c0 	.word	0x200065c0
 8014804:	4151999a 	.word	0x4151999a
 8014808:	2000749c 	.word	0x2000749c
 801480c:	4507a000 	.word	0x4507a000
 8014810:	41540000 	.word	0x41540000
 8014814:	4508e000 	.word	0x4508e000
 8014818:	20006d4c 	.word	0x20006d4c
 801481c:	3e4ccccd 	.word	0x3e4ccccd
 8014820:	3d4ccccd 	.word	0x3d4ccccd
 8014824:	2000a244 	.word	0x2000a244
 8014828:	41026666 	.word	0x41026666
 801482c:	45101000 	.word	0x45101000
					}
					else
					{
						vesc_speed = RedType2;
 8014830:	4bae      	ldr	r3, [pc, #696]	; (8014aec <LidarSetAngle+0xbdc>)
 8014832:	4aaf      	ldr	r2, [pc, #700]	; (8014af0 <LidarSetAngle+0xbe0>)
 8014834:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014836:	4baf      	ldr	r3, [pc, #700]	; (8014af4 <LidarSetAngle+0xbe4>)
 8014838:	4aaf      	ldr	r2, [pc, #700]	; (8014af8 <LidarSetAngle+0xbe8>)
 801483a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801483c:	f7f9 fba2 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014840:	48ae      	ldr	r0, [pc, #696]	; (8014afc <LidarSetAngle+0xbec>)
 8014842:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014846:	ed9f 1aae 	vldr	s2, [pc, #696]	; 8014b00 <LidarSetAngle+0xbf0>
 801484a:	eddf 0aae 	vldr	s1, [pc, #696]	; 8014b04 <LidarSetAngle+0xbf4>
 801484e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014852:	f7f1 f97b 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801485a:	4aa8      	ldr	r2, [pc, #672]	; (8014afc <LidarSetAngle+0xbec>)
 801485c:	2101      	movs	r1, #1
 801485e:	4618      	mov	r0, r3
 8014860:	f7f1 f9fe 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014864:	e00d      	b.n	8014882 <LidarSetAngle+0x972>
					{
						if(ps4.button == SQUARE)
 8014866:	4ba8      	ldr	r3, [pc, #672]	; (8014b08 <LidarSetAngle+0xbf8>)
 8014868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801486a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801486e:	d108      	bne.n	8014882 <LidarSetAngle+0x972>
						{
							while(ps4.button == SQUARE);
 8014870:	bf00      	nop
 8014872:	4ba5      	ldr	r3, [pc, #660]	; (8014b08 <LidarSetAngle+0xbf8>)
 8014874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801487a:	d0fa      	beq.n	8014872 <LidarSetAngle+0x962>
							PP_stop(&pp);
 801487c:	489f      	ldr	r0, [pc, #636]	; (8014afc <LidarSetAngle+0xbec>)
 801487e:	f7f1 fd27 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014882:	4b9e      	ldr	r3, [pc, #632]	; (8014afc <LidarSetAngle+0xbec>)
 8014884:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014888:	f003 0301 	and.w	r3, r3, #1
 801488c:	b2db      	uxtb	r3, r3
 801488e:	2b00      	cmp	r3, #0
 8014890:	d1e9      	bne.n	8014866 <LidarSetAngle+0x956>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014892:	489a      	ldr	r0, [pc, #616]	; (8014afc <LidarSetAngle+0xbec>)
 8014894:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014898:	ed9f 1a99 	vldr	s2, [pc, #612]	; 8014b00 <LidarSetAngle+0xbf0>
 801489c:	eddf 0a99 	vldr	s1, [pc, #612]	; 8014b04 <LidarSetAngle+0xbf4>
 80148a0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80148a4:	f7f1 f952 	bl	8005b4c <PP_PIDZSet>
					break;
 80148a8:	e0e4      	b.n	8014a74 <LidarSetAngle+0xb64>

				case FL:
					lidar->angle = FR;
 80148aa:	683b      	ldr	r3, [r7, #0]
 80148ac:	2203      	movs	r2, #3
 80148ae:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80148b2:	4b96      	ldr	r3, [pc, #600]	; (8014b0c <LidarSetAngle+0xbfc>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d006      	beq.n	80148c8 <LidarSetAngle+0x9b8>
					{
						vesc_speed = BlueType2;
 80148ba:	4b8c      	ldr	r3, [pc, #560]	; (8014aec <LidarSetAngle+0xbdc>)
 80148bc:	4a94      	ldr	r2, [pc, #592]	; (8014b10 <LidarSetAngle+0xc00>)
 80148be:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80148c0:	4b8c      	ldr	r3, [pc, #560]	; (8014af4 <LidarSetAngle+0xbe4>)
 80148c2:	4a94      	ldr	r2, [pc, #592]	; (8014b14 <LidarSetAngle+0xc04>)
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	e005      	b.n	80148d4 <LidarSetAngle+0x9c4>
					}
					else
					{
						vesc_speed = RedType2;
 80148c8:	4b88      	ldr	r3, [pc, #544]	; (8014aec <LidarSetAngle+0xbdc>)
 80148ca:	4a89      	ldr	r2, [pc, #548]	; (8014af0 <LidarSetAngle+0xbe0>)
 80148cc:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 80148ce:	4b89      	ldr	r3, [pc, #548]	; (8014af4 <LidarSetAngle+0xbe4>)
 80148d0:	4a89      	ldr	r2, [pc, #548]	; (8014af8 <LidarSetAngle+0xbe8>)
 80148d2:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80148d4:	f7f9 fb56 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80148d8:	4888      	ldr	r0, [pc, #544]	; (8014afc <LidarSetAngle+0xbec>)
 80148da:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80148de:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8014b00 <LidarSetAngle+0xbf0>
 80148e2:	eddf 0a88 	vldr	s1, [pc, #544]	; 8014b04 <LidarSetAngle+0xbf4>
 80148e6:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80148ea:	f7f1 f92f 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 80148ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80148f2:	4a82      	ldr	r2, [pc, #520]	; (8014afc <LidarSetAngle+0xbec>)
 80148f4:	2101      	movs	r1, #1
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7f1 f9b2 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 80148fc:	e00d      	b.n	801491a <LidarSetAngle+0xa0a>
					{
						if(ps4.button == SQUARE)
 80148fe:	4b82      	ldr	r3, [pc, #520]	; (8014b08 <LidarSetAngle+0xbf8>)
 8014900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014906:	d108      	bne.n	801491a <LidarSetAngle+0xa0a>
						{
							while(ps4.button == SQUARE);
 8014908:	bf00      	nop
 801490a:	4b7f      	ldr	r3, [pc, #508]	; (8014b08 <LidarSetAngle+0xbf8>)
 801490c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801490e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014912:	d0fa      	beq.n	801490a <LidarSetAngle+0x9fa>
							PP_stop(&pp);
 8014914:	4879      	ldr	r0, [pc, #484]	; (8014afc <LidarSetAngle+0xbec>)
 8014916:	f7f1 fcdb 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 801491a:	4b78      	ldr	r3, [pc, #480]	; (8014afc <LidarSetAngle+0xbec>)
 801491c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014920:	f003 0301 	and.w	r3, r3, #1
 8014924:	b2db      	uxtb	r3, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	d1e9      	bne.n	80148fe <LidarSetAngle+0x9ee>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 801492a:	4874      	ldr	r0, [pc, #464]	; (8014afc <LidarSetAngle+0xbec>)
 801492c:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014930:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8014b00 <LidarSetAngle+0xbf0>
 8014934:	eddf 0a73 	vldr	s1, [pc, #460]	; 8014b04 <LidarSetAngle+0xbf4>
 8014938:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801493c:	f7f1 f906 	bl	8005b4c <PP_PIDZSet>
					break;
 8014940:	e098      	b.n	8014a74 <LidarSetAngle+0xb64>

				case S:
					lidar->angle = FR;
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	2203      	movs	r2, #3
 8014946:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 801494a:	4b70      	ldr	r3, [pc, #448]	; (8014b0c <LidarSetAngle+0xbfc>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d006      	beq.n	8014960 <LidarSetAngle+0xa50>
					{
						vesc_speed = BlueType2;
 8014952:	4b66      	ldr	r3, [pc, #408]	; (8014aec <LidarSetAngle+0xbdc>)
 8014954:	4a6e      	ldr	r2, [pc, #440]	; (8014b10 <LidarSetAngle+0xc00>)
 8014956:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014958:	4b66      	ldr	r3, [pc, #408]	; (8014af4 <LidarSetAngle+0xbe4>)
 801495a:	4a6e      	ldr	r2, [pc, #440]	; (8014b14 <LidarSetAngle+0xc04>)
 801495c:	601a      	str	r2, [r3, #0]
 801495e:	e005      	b.n	801496c <LidarSetAngle+0xa5c>
					}
					else
					{
						vesc_speed = RedType2;
 8014960:	4b62      	ldr	r3, [pc, #392]	; (8014aec <LidarSetAngle+0xbdc>)
 8014962:	4a63      	ldr	r2, [pc, #396]	; (8014af0 <LidarSetAngle+0xbe0>)
 8014964:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014966:	4b63      	ldr	r3, [pc, #396]	; (8014af4 <LidarSetAngle+0xbe4>)
 8014968:	4a63      	ldr	r2, [pc, #396]	; (8014af8 <LidarSetAngle+0xbe8>)
 801496a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801496c:	f7f9 fb0a 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014970:	4862      	ldr	r0, [pc, #392]	; (8014afc <LidarSetAngle+0xbec>)
 8014972:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014976:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8014b00 <LidarSetAngle+0xbf0>
 801497a:	eddf 0a62 	vldr	s1, [pc, #392]	; 8014b04 <LidarSetAngle+0xbf4>
 801497e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014982:	f7f1 f8e3 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801498a:	4a5c      	ldr	r2, [pc, #368]	; (8014afc <LidarSetAngle+0xbec>)
 801498c:	2101      	movs	r1, #1
 801498e:	4618      	mov	r0, r3
 8014990:	f7f1 f966 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014994:	e00d      	b.n	80149b2 <LidarSetAngle+0xaa2>
					{
						if(ps4.button == SQUARE)
 8014996:	4b5c      	ldr	r3, [pc, #368]	; (8014b08 <LidarSetAngle+0xbf8>)
 8014998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801499e:	d108      	bne.n	80149b2 <LidarSetAngle+0xaa2>
						{
							while(ps4.button == SQUARE);
 80149a0:	bf00      	nop
 80149a2:	4b59      	ldr	r3, [pc, #356]	; (8014b08 <LidarSetAngle+0xbf8>)
 80149a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80149aa:	d0fa      	beq.n	80149a2 <LidarSetAngle+0xa92>
							PP_stop(&pp);
 80149ac:	4853      	ldr	r0, [pc, #332]	; (8014afc <LidarSetAngle+0xbec>)
 80149ae:	f7f1 fc8f 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 80149b2:	4b52      	ldr	r3, [pc, #328]	; (8014afc <LidarSetAngle+0xbec>)
 80149b4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80149b8:	f003 0301 	and.w	r3, r3, #1
 80149bc:	b2db      	uxtb	r3, r3
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d1e9      	bne.n	8014996 <LidarSetAngle+0xa86>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80149c2:	484e      	ldr	r0, [pc, #312]	; (8014afc <LidarSetAngle+0xbec>)
 80149c4:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80149c8:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8014b00 <LidarSetAngle+0xbf0>
 80149cc:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8014b04 <LidarSetAngle+0xbf4>
 80149d0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80149d4:	f7f1 f8ba 	bl	8005b4c <PP_PIDZSet>
					break;
 80149d8:	e04c      	b.n	8014a74 <LidarSetAngle+0xb64>

				case BR:
					lidar->angle = FR;
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	2203      	movs	r2, #3
 80149de:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80149e2:	4b4a      	ldr	r3, [pc, #296]	; (8014b0c <LidarSetAngle+0xbfc>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d006      	beq.n	80149f8 <LidarSetAngle+0xae8>
					{
						vesc_speed = BlueType2;
 80149ea:	4b40      	ldr	r3, [pc, #256]	; (8014aec <LidarSetAngle+0xbdc>)
 80149ec:	4a48      	ldr	r2, [pc, #288]	; (8014b10 <LidarSetAngle+0xc00>)
 80149ee:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80149f0:	4b40      	ldr	r3, [pc, #256]	; (8014af4 <LidarSetAngle+0xbe4>)
 80149f2:	4a48      	ldr	r2, [pc, #288]	; (8014b14 <LidarSetAngle+0xc04>)
 80149f4:	601a      	str	r2, [r3, #0]
 80149f6:	e005      	b.n	8014a04 <LidarSetAngle+0xaf4>
					}
					else
					{
						vesc_speed = RedType2;
 80149f8:	4b3c      	ldr	r3, [pc, #240]	; (8014aec <LidarSetAngle+0xbdc>)
 80149fa:	4a3d      	ldr	r2, [pc, #244]	; (8014af0 <LidarSetAngle+0xbe0>)
 80149fc:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 80149fe:	4b3d      	ldr	r3, [pc, #244]	; (8014af4 <LidarSetAngle+0xbe4>)
 8014a00:	4a3d      	ldr	r2, [pc, #244]	; (8014af8 <LidarSetAngle+0xbe8>)
 8014a02:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014a04:	f7f9 fabe 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014a08:	483c      	ldr	r0, [pc, #240]	; (8014afc <LidarSetAngle+0xbec>)
 8014a0a:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014a0e:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8014b00 <LidarSetAngle+0xbf0>
 8014a12:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8014b04 <LidarSetAngle+0xbf4>
 8014a16:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014a1a:	f7f1 f897 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014a22:	4a36      	ldr	r2, [pc, #216]	; (8014afc <LidarSetAngle+0xbec>)
 8014a24:	2101      	movs	r1, #1
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7f1 f91a 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014a2c:	e00d      	b.n	8014a4a <LidarSetAngle+0xb3a>
					{
						if(ps4.button == SQUARE)
 8014a2e:	4b36      	ldr	r3, [pc, #216]	; (8014b08 <LidarSetAngle+0xbf8>)
 8014a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a36:	d108      	bne.n	8014a4a <LidarSetAngle+0xb3a>
						{
							while(ps4.button == SQUARE);
 8014a38:	bf00      	nop
 8014a3a:	4b33      	ldr	r3, [pc, #204]	; (8014b08 <LidarSetAngle+0xbf8>)
 8014a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a42:	d0fa      	beq.n	8014a3a <LidarSetAngle+0xb2a>
							PP_stop(&pp);
 8014a44:	482d      	ldr	r0, [pc, #180]	; (8014afc <LidarSetAngle+0xbec>)
 8014a46:	f7f1 fc43 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014a4a:	4b2c      	ldr	r3, [pc, #176]	; (8014afc <LidarSetAngle+0xbec>)
 8014a4c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014a50:	f003 0301 	and.w	r3, r3, #1
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d1e9      	bne.n	8014a2e <LidarSetAngle+0xb1e>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014a5a:	4828      	ldr	r0, [pc, #160]	; (8014afc <LidarSetAngle+0xbec>)
 8014a5c:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014a60:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8014b00 <LidarSetAngle+0xbf0>
 8014a64:	eddf 0a27 	vldr	s1, [pc, #156]	; 8014b04 <LidarSetAngle+0xbf4>
 8014a68:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014a6c:	f7f1 f86e 	bl	8005b4c <PP_PIDZSet>
					break;
 8014a70:	e000      	b.n	8014a74 <LidarSetAngle+0xb64>

				default:
					break;
 8014a72:	bf00      	nop
			}
			break;
 8014a74:	e15d      	b.n	8014d32 <LidarSetAngle+0xe22>

		case BR:
			switch(lidar->angle)
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8014a7c:	2b03      	cmp	r3, #3
 8014a7e:	f200 8155 	bhi.w	8014d2c <LidarSetAngle+0xe1c>
 8014a82:	a201      	add	r2, pc, #4	; (adr r2, 8014a88 <LidarSetAngle+0xb78>)
 8014a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a88:	08014b65 	.word	0x08014b65
 8014a8c:	08014a99 	.word	0x08014a99
 8014a90:	08014bfd 	.word	0x08014bfd
 8014a94:	08014c95 	.word	0x08014c95
			{
				case FL:
					lidar->angle = BR;
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	2204      	movs	r2, #4
 8014a9c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014aa0:	4b1a      	ldr	r3, [pc, #104]	; (8014b0c <LidarSetAngle+0xbfc>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d006      	beq.n	8014ab6 <LidarSetAngle+0xba6>
					{
						vesc_speed = BlueType2;
 8014aa8:	4b10      	ldr	r3, [pc, #64]	; (8014aec <LidarSetAngle+0xbdc>)
 8014aaa:	4a19      	ldr	r2, [pc, #100]	; (8014b10 <LidarSetAngle+0xc00>)
 8014aac:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014aae:	4b11      	ldr	r3, [pc, #68]	; (8014af4 <LidarSetAngle+0xbe4>)
 8014ab0:	4a19      	ldr	r2, [pc, #100]	; (8014b18 <LidarSetAngle+0xc08>)
 8014ab2:	601a      	str	r2, [r3, #0]
 8014ab4:	e005      	b.n	8014ac2 <LidarSetAngle+0xbb2>
					}
					else
					{
						vesc_speed = RedType2;
 8014ab6:	4b0d      	ldr	r3, [pc, #52]	; (8014aec <LidarSetAngle+0xbdc>)
 8014ab8:	4a0d      	ldr	r2, [pc, #52]	; (8014af0 <LidarSetAngle+0xbe0>)
 8014aba:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014abc:	4b0d      	ldr	r3, [pc, #52]	; (8014af4 <LidarSetAngle+0xbe4>)
 8014abe:	4a17      	ldr	r2, [pc, #92]	; (8014b1c <LidarSetAngle+0xc0c>)
 8014ac0:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014ac2:	f7f9 fa5f 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014ac6:	480d      	ldr	r0, [pc, #52]	; (8014afc <LidarSetAngle+0xbec>)
 8014ac8:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014acc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8014b00 <LidarSetAngle+0xbf0>
 8014ad0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8014b04 <LidarSetAngle+0xbf4>
 8014ad4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014ad8:	f7f1 f838 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8014adc:	f107 030c 	add.w	r3, r7, #12
 8014ae0:	4a06      	ldr	r2, [pc, #24]	; (8014afc <LidarSetAngle+0xbec>)
 8014ae2:	2101      	movs	r1, #1
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7f1 f8bb 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014aea:	e027      	b.n	8014b3c <LidarSetAngle+0xc2c>
 8014aec:	200065c0 	.word	0x200065c0
 8014af0:	4104cccd 	.word	0x4104cccd
 8014af4:	2000749c 	.word	0x2000749c
 8014af8:	4511a000 	.word	0x4511a000
 8014afc:	20006d4c 	.word	0x20006d4c
 8014b00:	3e4ccccd 	.word	0x3e4ccccd
 8014b04:	3d4ccccd 	.word	0x3d4ccccd
 8014b08:	2000a244 	.word	0x2000a244
 8014b0c:	20006a4c 	.word	0x20006a4c
 8014b10:	41026666 	.word	0x41026666
 8014b14:	45101000 	.word	0x45101000
 8014b18:	44da2000 	.word	0x44da2000
 8014b1c:	44dc0000 	.word	0x44dc0000
					{
						if(ps4.button == SQUARE)
 8014b20:	4b86      	ldr	r3, [pc, #536]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b28:	d108      	bne.n	8014b3c <LidarSetAngle+0xc2c>
						{
							while(ps4.button == SQUARE);
 8014b2a:	bf00      	nop
 8014b2c:	4b83      	ldr	r3, [pc, #524]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b34:	d0fa      	beq.n	8014b2c <LidarSetAngle+0xc1c>
							PP_stop(&pp);
 8014b36:	4882      	ldr	r0, [pc, #520]	; (8014d40 <LidarSetAngle+0xe30>)
 8014b38:	f7f1 fbca 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014b3c:	4b80      	ldr	r3, [pc, #512]	; (8014d40 <LidarSetAngle+0xe30>)
 8014b3e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014b42:	f003 0301 	and.w	r3, r3, #1
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d1e9      	bne.n	8014b20 <LidarSetAngle+0xc10>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014b4c:	487c      	ldr	r0, [pc, #496]	; (8014d40 <LidarSetAngle+0xe30>)
 8014b4e:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014b52:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8014d44 <LidarSetAngle+0xe34>
 8014b56:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8014d48 <LidarSetAngle+0xe38>
 8014b5a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014b5e:	f7f0 fff5 	bl	8005b4c <PP_PIDZSet>
					break;
 8014b62:	e0e4      	b.n	8014d2e <LidarSetAngle+0xe1e>

				case BL:
					lidar->angle = BR;
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	2204      	movs	r2, #4
 8014b68:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014b6c:	4b77      	ldr	r3, [pc, #476]	; (8014d4c <LidarSetAngle+0xe3c>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d006      	beq.n	8014b82 <LidarSetAngle+0xc72>
					{
						vesc_speed = BlueType2;
 8014b74:	4b76      	ldr	r3, [pc, #472]	; (8014d50 <LidarSetAngle+0xe40>)
 8014b76:	4a77      	ldr	r2, [pc, #476]	; (8014d54 <LidarSetAngle+0xe44>)
 8014b78:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014b7a:	4b77      	ldr	r3, [pc, #476]	; (8014d58 <LidarSetAngle+0xe48>)
 8014b7c:	4a77      	ldr	r2, [pc, #476]	; (8014d5c <LidarSetAngle+0xe4c>)
 8014b7e:	601a      	str	r2, [r3, #0]
 8014b80:	e005      	b.n	8014b8e <LidarSetAngle+0xc7e>
					}
					else
					{
						vesc_speed = RedType2;
 8014b82:	4b73      	ldr	r3, [pc, #460]	; (8014d50 <LidarSetAngle+0xe40>)
 8014b84:	4a76      	ldr	r2, [pc, #472]	; (8014d60 <LidarSetAngle+0xe50>)
 8014b86:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014b88:	4b73      	ldr	r3, [pc, #460]	; (8014d58 <LidarSetAngle+0xe48>)
 8014b8a:	4a76      	ldr	r2, [pc, #472]	; (8014d64 <LidarSetAngle+0xe54>)
 8014b8c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014b8e:	f7f9 f9f9 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014b92:	486b      	ldr	r0, [pc, #428]	; (8014d40 <LidarSetAngle+0xe30>)
 8014b94:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014b98:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8014d44 <LidarSetAngle+0xe34>
 8014b9c:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8014d48 <LidarSetAngle+0xe38>
 8014ba0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014ba4:	f7f0 ffd2 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8014ba8:	f107 030c 	add.w	r3, r7, #12
 8014bac:	4a64      	ldr	r2, [pc, #400]	; (8014d40 <LidarSetAngle+0xe30>)
 8014bae:	2101      	movs	r1, #1
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7f1 f855 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014bb6:	e00d      	b.n	8014bd4 <LidarSetAngle+0xcc4>
					{
						if(ps4.button == SQUARE)
 8014bb8:	4b60      	ldr	r3, [pc, #384]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014bc0:	d108      	bne.n	8014bd4 <LidarSetAngle+0xcc4>
						{
							while(ps4.button == SQUARE);
 8014bc2:	bf00      	nop
 8014bc4:	4b5d      	ldr	r3, [pc, #372]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014bcc:	d0fa      	beq.n	8014bc4 <LidarSetAngle+0xcb4>
							PP_stop(&pp);
 8014bce:	485c      	ldr	r0, [pc, #368]	; (8014d40 <LidarSetAngle+0xe30>)
 8014bd0:	f7f1 fb7e 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014bd4:	4b5a      	ldr	r3, [pc, #360]	; (8014d40 <LidarSetAngle+0xe30>)
 8014bd6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014bda:	f003 0301 	and.w	r3, r3, #1
 8014bde:	b2db      	uxtb	r3, r3
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1e9      	bne.n	8014bb8 <LidarSetAngle+0xca8>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014be4:	4856      	ldr	r0, [pc, #344]	; (8014d40 <LidarSetAngle+0xe30>)
 8014be6:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014bea:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8014d44 <LidarSetAngle+0xe34>
 8014bee:	eddf 0a56 	vldr	s1, [pc, #344]	; 8014d48 <LidarSetAngle+0xe38>
 8014bf2:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014bf6:	f7f0 ffa9 	bl	8005b4c <PP_PIDZSet>
					break;
 8014bfa:	e098      	b.n	8014d2e <LidarSetAngle+0xe1e>

				case S:
					lidar->angle = BR;
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	2204      	movs	r2, #4
 8014c00:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014c04:	4b51      	ldr	r3, [pc, #324]	; (8014d4c <LidarSetAngle+0xe3c>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d006      	beq.n	8014c1a <LidarSetAngle+0xd0a>
					{
						vesc_speed = BlueType2;
 8014c0c:	4b50      	ldr	r3, [pc, #320]	; (8014d50 <LidarSetAngle+0xe40>)
 8014c0e:	4a51      	ldr	r2, [pc, #324]	; (8014d54 <LidarSetAngle+0xe44>)
 8014c10:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014c12:	4b51      	ldr	r3, [pc, #324]	; (8014d58 <LidarSetAngle+0xe48>)
 8014c14:	4a51      	ldr	r2, [pc, #324]	; (8014d5c <LidarSetAngle+0xe4c>)
 8014c16:	601a      	str	r2, [r3, #0]
 8014c18:	e005      	b.n	8014c26 <LidarSetAngle+0xd16>
					}
					else
					{
						vesc_speed = RedType2;
 8014c1a:	4b4d      	ldr	r3, [pc, #308]	; (8014d50 <LidarSetAngle+0xe40>)
 8014c1c:	4a50      	ldr	r2, [pc, #320]	; (8014d60 <LidarSetAngle+0xe50>)
 8014c1e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014c20:	4b4d      	ldr	r3, [pc, #308]	; (8014d58 <LidarSetAngle+0xe48>)
 8014c22:	4a50      	ldr	r2, [pc, #320]	; (8014d64 <LidarSetAngle+0xe54>)
 8014c24:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014c26:	f7f9 f9ad 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014c2a:	4845      	ldr	r0, [pc, #276]	; (8014d40 <LidarSetAngle+0xe30>)
 8014c2c:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014c30:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8014d44 <LidarSetAngle+0xe34>
 8014c34:	eddf 0a44 	vldr	s1, [pc, #272]	; 8014d48 <LidarSetAngle+0xe38>
 8014c38:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014c3c:	f7f0 ff86 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8014c40:	f107 030c 	add.w	r3, r7, #12
 8014c44:	4a3e      	ldr	r2, [pc, #248]	; (8014d40 <LidarSetAngle+0xe30>)
 8014c46:	2101      	movs	r1, #1
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7f1 f809 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014c4e:	e00d      	b.n	8014c6c <LidarSetAngle+0xd5c>
					{
						if(ps4.button == SQUARE)
 8014c50:	4b3a      	ldr	r3, [pc, #232]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c58:	d108      	bne.n	8014c6c <LidarSetAngle+0xd5c>
						{
							while(ps4.button == SQUARE);
 8014c5a:	bf00      	nop
 8014c5c:	4b37      	ldr	r3, [pc, #220]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c64:	d0fa      	beq.n	8014c5c <LidarSetAngle+0xd4c>
							PP_stop(&pp);
 8014c66:	4836      	ldr	r0, [pc, #216]	; (8014d40 <LidarSetAngle+0xe30>)
 8014c68:	f7f1 fb32 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014c6c:	4b34      	ldr	r3, [pc, #208]	; (8014d40 <LidarSetAngle+0xe30>)
 8014c6e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d1e9      	bne.n	8014c50 <LidarSetAngle+0xd40>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014c7c:	4830      	ldr	r0, [pc, #192]	; (8014d40 <LidarSetAngle+0xe30>)
 8014c7e:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014c82:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8014d44 <LidarSetAngle+0xe34>
 8014c86:	eddf 0a30 	vldr	s1, [pc, #192]	; 8014d48 <LidarSetAngle+0xe38>
 8014c8a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014c8e:	f7f0 ff5d 	bl	8005b4c <PP_PIDZSet>
					break;
 8014c92:	e04c      	b.n	8014d2e <LidarSetAngle+0xe1e>

				case FR:
					lidar->angle = BR;
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	2204      	movs	r2, #4
 8014c98:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014c9c:	4b2b      	ldr	r3, [pc, #172]	; (8014d4c <LidarSetAngle+0xe3c>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d006      	beq.n	8014cb2 <LidarSetAngle+0xda2>
					{
						vesc_speed = BlueType2;
 8014ca4:	4b2a      	ldr	r3, [pc, #168]	; (8014d50 <LidarSetAngle+0xe40>)
 8014ca6:	4a2b      	ldr	r2, [pc, #172]	; (8014d54 <LidarSetAngle+0xe44>)
 8014ca8:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014caa:	4b2b      	ldr	r3, [pc, #172]	; (8014d58 <LidarSetAngle+0xe48>)
 8014cac:	4a2b      	ldr	r2, [pc, #172]	; (8014d5c <LidarSetAngle+0xe4c>)
 8014cae:	601a      	str	r2, [r3, #0]
 8014cb0:	e005      	b.n	8014cbe <LidarSetAngle+0xdae>
					}
					else
					{
						vesc_speed = RedType2;
 8014cb2:	4b27      	ldr	r3, [pc, #156]	; (8014d50 <LidarSetAngle+0xe40>)
 8014cb4:	4a2a      	ldr	r2, [pc, #168]	; (8014d60 <LidarSetAngle+0xe50>)
 8014cb6:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014cb8:	4b27      	ldr	r3, [pc, #156]	; (8014d58 <LidarSetAngle+0xe48>)
 8014cba:	4a2a      	ldr	r2, [pc, #168]	; (8014d64 <LidarSetAngle+0xe54>)
 8014cbc:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014cbe:	f7f9 f961 	bl	800df84 <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014cc2:	481f      	ldr	r0, [pc, #124]	; (8014d40 <LidarSetAngle+0xe30>)
 8014cc4:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014cc8:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8014d44 <LidarSetAngle+0xe34>
 8014ccc:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8014d48 <LidarSetAngle+0xe38>
 8014cd0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014cd4:	f7f0 ff3a 	bl	8005b4c <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8014cd8:	f107 030c 	add.w	r3, r7, #12
 8014cdc:	4a18      	ldr	r2, [pc, #96]	; (8014d40 <LidarSetAngle+0xe30>)
 8014cde:	2101      	movs	r1, #1
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f0 ffbd 	bl	8005c60 <PP_start>
					while(pp.pp_start)
 8014ce6:	e00d      	b.n	8014d04 <LidarSetAngle+0xdf4>
					{
						if(ps4.button == SQUARE)
 8014ce8:	4b14      	ldr	r3, [pc, #80]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cf0:	d108      	bne.n	8014d04 <LidarSetAngle+0xdf4>
						{
							while(ps4.button == SQUARE);
 8014cf2:	bf00      	nop
 8014cf4:	4b11      	ldr	r3, [pc, #68]	; (8014d3c <LidarSetAngle+0xe2c>)
 8014cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cfc:	d0fa      	beq.n	8014cf4 <LidarSetAngle+0xde4>
							PP_stop(&pp);
 8014cfe:	4810      	ldr	r0, [pc, #64]	; (8014d40 <LidarSetAngle+0xe30>)
 8014d00:	f7f1 fae6 	bl	80062d0 <PP_stop>
					while(pp.pp_start)
 8014d04:	4b0e      	ldr	r3, [pc, #56]	; (8014d40 <LidarSetAngle+0xe30>)
 8014d06:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014d0a:	f003 0301 	and.w	r3, r3, #1
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d1e9      	bne.n	8014ce8 <LidarSetAngle+0xdd8>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014d14:	480a      	ldr	r0, [pc, #40]	; (8014d40 <LidarSetAngle+0xe30>)
 8014d16:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014d1a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8014d44 <LidarSetAngle+0xe34>
 8014d1e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8014d48 <LidarSetAngle+0xe38>
 8014d22:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014d26:	f7f0 ff11 	bl	8005b4c <PP_PIDZSet>
					break;
 8014d2a:	e000      	b.n	8014d2e <LidarSetAngle+0xe1e>

				default:
					break;
 8014d2c:	bf00      	nop
			}
			break;
 8014d2e:	e000      	b.n	8014d32 <LidarSetAngle+0xe22>

		default:
			break;
 8014d30:	bf00      	nop
	}
}
 8014d32:	bf00      	nop
 8014d34:	3798      	adds	r7, #152	; 0x98
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bdb0      	pop	{r4, r5, r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	2000a244 	.word	0x2000a244
 8014d40:	20006d4c 	.word	0x20006d4c
 8014d44:	3e4ccccd 	.word	0x3e4ccccd
 8014d48:	3d4ccccd 	.word	0x3d4ccccd
 8014d4c:	20006a4c 	.word	0x20006a4c
 8014d50:	200065c0 	.word	0x200065c0
 8014d54:	41026666 	.word	0x41026666
 8014d58:	2000749c 	.word	0x2000749c
 8014d5c:	44da2000 	.word	0x44da2000
 8014d60:	4104cccd 	.word	0x4104cccd
 8014d64:	44dc0000 	.word	0x44dc0000

08014d68 <LidarAdjust>:

void LidarAdjust(Lidar_t* lidar)
{
 8014d68:	b5b0      	push	{r4, r5, r7, lr}
 8014d6a:	b08a      	sub	sp, #40	; 0x28
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	f000 81b6 	beq.w	80150e8 <LidarAdjust+0x380>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 8014d7c:	4bb2      	ldr	r3, [pc, #712]	; (8015048 <LidarAdjust+0x2e0>)
 8014d7e:	f107 040c 	add.w	r4, r7, #12
 8014d82:	461d      	mov	r5, r3
 8014d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014d8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 8014d90:	f107 030c 	add.w	r3, r7, #12
 8014d94:	4aad      	ldr	r2, [pc, #692]	; (801504c <LidarAdjust+0x2e4>)
 8014d96:	2101      	movs	r1, #1
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7f0 ff61 	bl	8005c60 <PP_start>
		while(pp.pp_start)
 8014d9e:	e01e      	b.n	8014dde <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 8014da0:	4bab      	ldr	r3, [pc, #684]	; (8015050 <LidarAdjust+0x2e8>)
 8014da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014da8:	d108      	bne.n	8014dbc <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 8014daa:	bf00      	nop
 8014dac:	4ba8      	ldr	r3, [pc, #672]	; (8015050 <LidarAdjust+0x2e8>)
 8014dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014db4:	d0fa      	beq.n	8014dac <LidarAdjust+0x44>
				PP_stop(&pp);
 8014db6:	48a5      	ldr	r0, [pc, #660]	; (801504c <LidarAdjust+0x2e4>)
 8014db8:	f7f1 fa8a 	bl	80062d0 <PP_stop>
			}

			if(In_LS_Shot_1 || In_LS_Shot_2)
 8014dbc:	2108      	movs	r1, #8
 8014dbe:	48a5      	ldr	r0, [pc, #660]	; (8015054 <LidarAdjust+0x2ec>)
 8014dc0:	f002 fcde 	bl	8017780 <HAL_GPIO_ReadPin>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d006      	beq.n	8014dd8 <LidarAdjust+0x70>
 8014dca:	2110      	movs	r1, #16
 8014dcc:	48a1      	ldr	r0, [pc, #644]	; (8015054 <LidarAdjust+0x2ec>)
 8014dce:	f002 fcd7 	bl	8017780 <HAL_GPIO_ReadPin>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d102      	bne.n	8014dde <LidarAdjust+0x76>
				PP_stop(&pp);
 8014dd8:	489c      	ldr	r0, [pc, #624]	; (801504c <LidarAdjust+0x2e4>)
 8014dda:	f7f1 fa79 	bl	80062d0 <PP_stop>
		while(pp.pp_start)
 8014dde:	4b9b      	ldr	r3, [pc, #620]	; (801504c <LidarAdjust+0x2e4>)
 8014de0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014de4:	f003 0301 	and.w	r3, r3, #1
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1d8      	bne.n	8014da0 <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8014df4:	3b02      	subs	r3, #2
 8014df6:	2b06      	cmp	r3, #6
 8014df8:	f200 8175 	bhi.w	80150e6 <LidarAdjust+0x37e>
 8014dfc:	a201      	add	r2, pc, #4	; (adr r2, 8014e04 <LidarAdjust+0x9c>)
 8014dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e02:	bf00      	nop
 8014e04:	080150e7 	.word	0x080150e7
 8014e08:	08014e21 	.word	0x08014e21
 8014e0c:	08014eab 	.word	0x08014eab
 8014e10:	08014f35 	.word	0x08014f35
 8014e14:	08014fbf 	.word	0x08014fbf
 8014e18:	0801505d 	.word	0x0801505d
 8014e1c:	080150e7 	.word	0x080150e7
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	2001      	movs	r0, #1
 8014e24:	f000 fb8a 	bl	801553c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7eb fb87 	bl	8000548 <__aeabi_f2d>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	4620      	mov	r0, r4
 8014e40:	4629      	mov	r1, r5
 8014e42:	f7eb fa21 	bl	8000288 <__aeabi_dsub>
 8014e46:	4602      	mov	r2, r0
 8014e48:	460b      	mov	r3, r1
 8014e4a:	4610      	mov	r0, r2
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	f7eb fecb 	bl	8000be8 <__aeabi_d2f>
 8014e52:	4602      	mov	r2, r0
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7eb fb6e 	bl	8000548 <__aeabi_f2d>
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	460b      	mov	r3, r1
 8014e70:	4620      	mov	r0, r4
 8014e72:	4629      	mov	r1, r5
 8014e74:	f7eb fa08 	bl	8000288 <__aeabi_dsub>
 8014e78:	4602      	mov	r2, r0
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	4619      	mov	r1, r3
 8014e80:	f7eb feb2 	bl	8000be8 <__aeabi_d2f>
 8014e84:	4602      	mov	r2, r0
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8014e98:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8015058 <LidarAdjust+0x2f0>
 8014e9c:	eef0 0a47 	vmov.f32	s1, s14
 8014ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8014ea4:	f000 f924 	bl	80150f0 <LidarAdjustPP>
				break;
 8014ea8:	e11e      	b.n	80150e8 <LidarAdjust+0x380>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 8014eaa:	6879      	ldr	r1, [r7, #4]
 8014eac:	2001      	movs	r0, #1
 8014eae:	f000 fb45 	bl	801553c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7eb fb42 	bl	8000548 <__aeabi_f2d>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4629      	mov	r1, r5
 8014ecc:	f7eb f9dc 	bl	8000288 <__aeabi_dsub>
 8014ed0:	4602      	mov	r2, r0
 8014ed2:	460b      	mov	r3, r1
 8014ed4:	4610      	mov	r0, r2
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	f7eb fe86 	bl	8000be8 <__aeabi_d2f>
 8014edc:	4602      	mov	r2, r0
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7eb fb29 	bl	8000548 <__aeabi_f2d>
 8014ef6:	4602      	mov	r2, r0
 8014ef8:	460b      	mov	r3, r1
 8014efa:	4620      	mov	r0, r4
 8014efc:	4629      	mov	r1, r5
 8014efe:	f7eb f9c3 	bl	8000288 <__aeabi_dsub>
 8014f02:	4602      	mov	r2, r0
 8014f04:	460b      	mov	r3, r1
 8014f06:	4610      	mov	r0, r2
 8014f08:	4619      	mov	r1, r3
 8014f0a:	f7eb fe6d 	bl	8000be8 <__aeabi_d2f>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8014f22:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8015058 <LidarAdjust+0x2f0>
 8014f26:	eef0 0a47 	vmov.f32	s1, s14
 8014f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8014f2e:	f000 f8df 	bl	80150f0 <LidarAdjustPP>
				break;
 8014f32:	e0d9      	b.n	80150e8 <LidarAdjust+0x380>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 8014f34:	6879      	ldr	r1, [r7, #4]
 8014f36:	2001      	movs	r0, #1
 8014f38:	f000 fb00 	bl	801553c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7eb fafd 	bl	8000548 <__aeabi_f2d>
 8014f4e:	4602      	mov	r2, r0
 8014f50:	460b      	mov	r3, r1
 8014f52:	4620      	mov	r0, r4
 8014f54:	4629      	mov	r1, r5
 8014f56:	f7eb f997 	bl	8000288 <__aeabi_dsub>
 8014f5a:	4602      	mov	r2, r0
 8014f5c:	460b      	mov	r3, r1
 8014f5e:	4610      	mov	r0, r2
 8014f60:	4619      	mov	r1, r3
 8014f62:	f7eb fe41 	bl	8000be8 <__aeabi_d2f>
 8014f66:	4602      	mov	r2, r0
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7eb fae4 	bl	8000548 <__aeabi_f2d>
 8014f80:	4602      	mov	r2, r0
 8014f82:	460b      	mov	r3, r1
 8014f84:	4620      	mov	r0, r4
 8014f86:	4629      	mov	r1, r5
 8014f88:	f7eb f97e 	bl	8000288 <__aeabi_dsub>
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	460b      	mov	r3, r1
 8014f90:	4610      	mov	r0, r2
 8014f92:	4619      	mov	r1, r3
 8014f94:	f7eb fe28 	bl	8000be8 <__aeabi_d2f>
 8014f98:	4602      	mov	r2, r0
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8014fac:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8015058 <LidarAdjust+0x2f0>
 8014fb0:	eef0 0a47 	vmov.f32	s1, s14
 8014fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8014fb8:	f000 f89a 	bl	80150f0 <LidarAdjustPP>
				break;
 8014fbc:	e094      	b.n	80150e8 <LidarAdjust+0x380>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 8014fbe:	6879      	ldr	r1, [r7, #4]
 8014fc0:	2001      	movs	r0, #1
 8014fc2:	f000 fabb 	bl	801553c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7eb fab8 	bl	8000548 <__aeabi_f2d>
 8014fd8:	4602      	mov	r2, r0
 8014fda:	460b      	mov	r3, r1
 8014fdc:	4620      	mov	r0, r4
 8014fde:	4629      	mov	r1, r5
 8014fe0:	f7eb f952 	bl	8000288 <__aeabi_dsub>
 8014fe4:	4602      	mov	r2, r0
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	4610      	mov	r0, r2
 8014fea:	4619      	mov	r1, r3
 8014fec:	f7eb fdfc 	bl	8000be8 <__aeabi_d2f>
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8015004:	4618      	mov	r0, r3
 8015006:	f7eb fa9f 	bl	8000548 <__aeabi_f2d>
 801500a:	4602      	mov	r2, r0
 801500c:	460b      	mov	r3, r1
 801500e:	4620      	mov	r0, r4
 8015010:	4629      	mov	r1, r5
 8015012:	f7eb f939 	bl	8000288 <__aeabi_dsub>
 8015016:	4602      	mov	r2, r0
 8015018:	460b      	mov	r3, r1
 801501a:	4610      	mov	r0, r2
 801501c:	4619      	mov	r1, r3
 801501e:	f7eb fde3 	bl	8000be8 <__aeabi_d2f>
 8015022:	4602      	mov	r2, r0
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8015036:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8015058 <LidarAdjust+0x2f0>
 801503a:	eef0 0a47 	vmov.f32	s1, s14
 801503e:	eeb0 0a67 	vmov.f32	s0, s15
 8015042:	f000 f855 	bl	80150f0 <LidarAdjustPP>
				break;
 8015046:	e04f      	b.n	80150e8 <LidarAdjust+0x380>
 8015048:	0802554c 	.word	0x0802554c
 801504c:	20006d4c 	.word	0x20006d4c
 8015050:	2000a244 	.word	0x2000a244
 8015054:	40020c00 	.word	0x40020c00
 8015058:	c2b40000 	.word	0xc2b40000

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 801505c:	6879      	ldr	r1, [r7, #4]
 801505e:	2001      	movs	r0, #1
 8015060:	f000 fa6c 	bl	801553c <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8015070:	4618      	mov	r0, r3
 8015072:	f7eb fa69 	bl	8000548 <__aeabi_f2d>
 8015076:	4602      	mov	r2, r0
 8015078:	460b      	mov	r3, r1
 801507a:	4620      	mov	r0, r4
 801507c:	4629      	mov	r1, r5
 801507e:	f7eb f903 	bl	8000288 <__aeabi_dsub>
 8015082:	4602      	mov	r2, r0
 8015084:	460b      	mov	r3, r1
 8015086:	4610      	mov	r0, r2
 8015088:	4619      	mov	r1, r3
 801508a:	f7eb fdad 	bl	8000be8 <__aeabi_d2f>
 801508e:	4602      	mov	r2, r0
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7eb fa50 	bl	8000548 <__aeabi_f2d>
 80150a8:	4602      	mov	r2, r0
 80150aa:	460b      	mov	r3, r1
 80150ac:	4620      	mov	r0, r4
 80150ae:	4629      	mov	r1, r5
 80150b0:	f7eb f8ea 	bl	8000288 <__aeabi_dsub>
 80150b4:	4602      	mov	r2, r0
 80150b6:	460b      	mov	r3, r1
 80150b8:	4610      	mov	r0, r2
 80150ba:	4619      	mov	r1, r3
 80150bc:	f7eb fd94 	bl	8000be8 <__aeabi_d2f>
 80150c0:	4602      	mov	r2, r0
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80150d4:	ed1f 1a20 	vldr	s2, [pc, #-128]	; 8015058 <LidarAdjust+0x2f0>
 80150d8:	eef0 0a47 	vmov.f32	s1, s14
 80150dc:	eeb0 0a67 	vmov.f32	s0, s15
 80150e0:	f000 f806 	bl	80150f0 <LidarAdjustPP>
				break;
 80150e4:	e000      	b.n	80150e8 <LidarAdjust+0x380>

			case UPPER_RIGHT:
				break;

			default:
				break;
 80150e6:	bf00      	nop
		}
	}
}
 80150e8:	bf00      	nop
 80150ea:	3728      	adds	r7, #40	; 0x28
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bdb0      	pop	{r4, r5, r7, pc}

080150f0 <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b08c      	sub	sp, #48	; 0x30
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80150fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80150fe:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 8015102:	f7f8 ff3f 	bl	800df84 <ResetCoordinate>

	float adj_point[1][7] = {{1.5, adj_x, adj_y, z, 0, 1, 0}};
 8015106:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801510a:	617b      	str	r3, [r7, #20]
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	61bb      	str	r3, [r7, #24]
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	61fb      	str	r3, [r7, #28]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	623b      	str	r3, [r7, #32]
 8015118:	f04f 0300 	mov.w	r3, #0
 801511c:	627b      	str	r3, [r7, #36]	; 0x24
 801511e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015122:	62bb      	str	r3, [r7, #40]	; 0x28
 8015124:	f04f 0300 	mov.w	r3, #0
 8015128:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 801512a:	f107 0314 	add.w	r3, r7, #20
 801512e:	4a1c      	ldr	r2, [pc, #112]	; (80151a0 <LidarAdjustPP+0xb0>)
 8015130:	2101      	movs	r1, #1
 8015132:	4618      	mov	r0, r3
 8015134:	f7f0 fd94 	bl	8005c60 <PP_start>

	while(pp.pp_start)
 8015138:	e025      	b.n	8015186 <LidarAdjustPP+0x96>
	{
		if(ps4.button == SQUARE)
 801513a:	4b1a      	ldr	r3, [pc, #104]	; (80151a4 <LidarAdjustPP+0xb4>)
 801513c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801513e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015142:	d108      	bne.n	8015156 <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 8015144:	bf00      	nop
 8015146:	4b17      	ldr	r3, [pc, #92]	; (80151a4 <LidarAdjustPP+0xb4>)
 8015148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801514e:	d0fa      	beq.n	8015146 <LidarAdjustPP+0x56>
			PP_stop(&pp);
 8015150:	4813      	ldr	r0, [pc, #76]	; (80151a0 <LidarAdjustPP+0xb0>)
 8015152:	f7f1 f8bd 	bl	80062d0 <PP_stop>
		}

		if(In_LS_Shot_1 || In_LS_Shot_2)
 8015156:	2108      	movs	r1, #8
 8015158:	4813      	ldr	r0, [pc, #76]	; (80151a8 <LidarAdjustPP+0xb8>)
 801515a:	f002 fb11 	bl	8017780 <HAL_GPIO_ReadPin>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d006      	beq.n	8015172 <LidarAdjustPP+0x82>
 8015164:	2110      	movs	r1, #16
 8015166:	4810      	ldr	r0, [pc, #64]	; (80151a8 <LidarAdjustPP+0xb8>)
 8015168:	f002 fb0a 	bl	8017780 <HAL_GPIO_ReadPin>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d109      	bne.n	8015186 <LidarAdjustPP+0x96>
		{
			pp.error_y = 0;
 8015172:	4b0b      	ldr	r3, [pc, #44]	; (80151a0 <LidarAdjustPP+0xb0>)
 8015174:	f04f 0200 	mov.w	r2, #0
 8015178:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
			pp.target_y[0] = pp.real_y;
 801517c:	4b08      	ldr	r3, [pc, #32]	; (80151a0 <LidarAdjustPP+0xb0>)
 801517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015180:	4a07      	ldr	r2, [pc, #28]	; (80151a0 <LidarAdjustPP+0xb0>)
 8015182:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	while(pp.pp_start)
 8015186:	4b06      	ldr	r3, [pc, #24]	; (80151a0 <LidarAdjustPP+0xb0>)
 8015188:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801518c:	f003 0301 	and.w	r3, r3, #1
 8015190:	b2db      	uxtb	r3, r3
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1d1      	bne.n	801513a <LidarAdjustPP+0x4a>
		}
	}
}
 8015196:	bf00      	nop
 8015198:	bf00      	nop
 801519a:	3730      	adds	r7, #48	; 0x30
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	20006d4c 	.word	0x20006d4c
 80151a4:	2000a244 	.word	0x2000a244
 80151a8:	40020c00 	.word	0x40020c00

080151ac <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
	uint32_t before, after;

	if(angle_shoot)
 80151b4:	4b9e      	ldr	r3, [pc, #632]	; (8015430 <LidarControl+0x284>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 8092 	beq.w	80152e2 <LidarControl+0x136>
	{
		if(ps4.button == LEFT)
 80151be:	4b9d      	ldr	r3, [pc, #628]	; (8015434 <LidarControl+0x288>)
 80151c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151c2:	2b80      	cmp	r3, #128	; 0x80
 80151c4:	d11f      	bne.n	8015206 <LidarControl+0x5a>
		{
			before = HAL_GetTick();
 80151c6:	f000 fc5f 	bl	8015a88 <HAL_GetTick>
 80151ca:	60b8      	str	r0, [r7, #8]
			while(ps4.button == LEFT)
 80151cc:	e002      	b.n	80151d4 <LidarControl+0x28>
			{
				after = HAL_GetTick();
 80151ce:	f000 fc5b 	bl	8015a88 <HAL_GetTick>
 80151d2:	60f8      	str	r0, [r7, #12]
			while(ps4.button == LEFT)
 80151d4:	4b97      	ldr	r3, [pc, #604]	; (8015434 <LidarControl+0x288>)
 80151d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151d8:	2b80      	cmp	r3, #128	; 0x80
 80151da:	d0f8      	beq.n	80151ce <LidarControl+0x22>
			}
			if(after - before > 500)
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	1ad3      	subs	r3, r2, r3
 80151e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80151e6:	d907      	bls.n	80151f8 <LidarControl+0x4c>
				lidar->angle_counter -= 3;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80151ee:	1eda      	subs	r2, r3, #3
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 80151f6:	e006      	b.n	8015206 <LidarControl+0x5a>
			else
				lidar->angle_counter--;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80151fe:	1e5a      	subs	r2, r3, #1
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		}

		if(ps4.button == RIGHT)
 8015206:	4b8b      	ldr	r3, [pc, #556]	; (8015434 <LidarControl+0x288>)
 8015208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801520a:	2b20      	cmp	r3, #32
 801520c:	d11f      	bne.n	801524e <LidarControl+0xa2>
		{
			before = HAL_GetTick();
 801520e:	f000 fc3b 	bl	8015a88 <HAL_GetTick>
 8015212:	60b8      	str	r0, [r7, #8]
			while(ps4.button == RIGHT)
 8015214:	e002      	b.n	801521c <LidarControl+0x70>
			{
				after = HAL_GetTick();
 8015216:	f000 fc37 	bl	8015a88 <HAL_GetTick>
 801521a:	60f8      	str	r0, [r7, #12]
			while(ps4.button == RIGHT)
 801521c:	4b85      	ldr	r3, [pc, #532]	; (8015434 <LidarControl+0x288>)
 801521e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015220:	2b20      	cmp	r3, #32
 8015222:	d0f8      	beq.n	8015216 <LidarControl+0x6a>
			}
			if(after - before > 500)
 8015224:	68fa      	ldr	r2, [r7, #12]
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	1ad3      	subs	r3, r2, r3
 801522a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801522e:	d907      	bls.n	8015240 <LidarControl+0x94>
				lidar->angle_counter += 3;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8015236:	1cda      	adds	r2, r3, #3
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 801523e:	e006      	b.n	801524e <LidarControl+0xa2>
			else
				lidar->angle_counter++;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8015246:	1c5a      	adds	r2, r3, #1
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		}

		if(ps4.button == UP)
 801524e:	4b79      	ldr	r3, [pc, #484]	; (8015434 <LidarControl+0x288>)
 8015250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015252:	2b10      	cmp	r3, #16
 8015254:	d11f      	bne.n	8015296 <LidarControl+0xea>
		{
			before = HAL_GetTick();
 8015256:	f000 fc17 	bl	8015a88 <HAL_GetTick>
 801525a:	60b8      	str	r0, [r7, #8]
			while(ps4.button == UP)
 801525c:	e002      	b.n	8015264 <LidarControl+0xb8>
			{
				after = HAL_GetTick();
 801525e:	f000 fc13 	bl	8015a88 <HAL_GetTick>
 8015262:	60f8      	str	r0, [r7, #12]
			while(ps4.button == UP)
 8015264:	4b73      	ldr	r3, [pc, #460]	; (8015434 <LidarControl+0x288>)
 8015266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015268:	2b10      	cmp	r3, #16
 801526a:	d0f8      	beq.n	801525e <LidarControl+0xb2>
			}
			if(after - before > 500)
 801526c:	68fa      	ldr	r2, [r7, #12]
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015276:	d907      	bls.n	8015288 <LidarControl+0xdc>
				lidar->angle_counter += 4;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801527e:	1d1a      	adds	r2, r3, #4
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8015286:	e006      	b.n	8015296 <LidarControl+0xea>
			else
				lidar->angle_counter += 2;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801528e:	1c9a      	adds	r2, r3, #2
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		}

		if(ps4.button == DOWN)
 8015296:	4b67      	ldr	r3, [pc, #412]	; (8015434 <LidarControl+0x288>)
 8015298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801529a:	2b40      	cmp	r3, #64	; 0x40
 801529c:	f040 80bd 	bne.w	801541a <LidarControl+0x26e>
		{
			before = HAL_GetTick();
 80152a0:	f000 fbf2 	bl	8015a88 <HAL_GetTick>
 80152a4:	60b8      	str	r0, [r7, #8]
			while(ps4.button == DOWN)
 80152a6:	e002      	b.n	80152ae <LidarControl+0x102>
			{
				after = HAL_GetTick();
 80152a8:	f000 fbee 	bl	8015a88 <HAL_GetTick>
 80152ac:	60f8      	str	r0, [r7, #12]
			while(ps4.button == DOWN)
 80152ae:	4b61      	ldr	r3, [pc, #388]	; (8015434 <LidarControl+0x288>)
 80152b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b2:	2b40      	cmp	r3, #64	; 0x40
 80152b4:	d0f8      	beq.n	80152a8 <LidarControl+0xfc>
			}
			if(after - before > 500)
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	1ad3      	subs	r3, r2, r3
 80152bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80152c0:	d907      	bls.n	80152d2 <LidarControl+0x126>
				lidar->angle_counter -= 4;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80152c8:	1f1a      	subs	r2, r3, #4
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 80152d0:	e0a3      	b.n	801541a <LidarControl+0x26e>
			else
				lidar->angle_counter -= 2;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80152d8:	1e9a      	subs	r2, r3, #2
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 80152e0:	e09b      	b.n	801541a <LidarControl+0x26e>
		}
	}
	else
	{
		if(ps4.button == LEFT)
 80152e2:	4b54      	ldr	r3, [pc, #336]	; (8015434 <LidarControl+0x288>)
 80152e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152e6:	2b80      	cmp	r3, #128	; 0x80
 80152e8:	d122      	bne.n	8015330 <LidarControl+0x184>
		{
			before = HAL_GetTick();
 80152ea:	f000 fbcd 	bl	8015a88 <HAL_GetTick>
 80152ee:	60b8      	str	r0, [r7, #8]
			while(ps4.button == LEFT)
 80152f0:	e002      	b.n	80152f8 <LidarControl+0x14c>
			{
				after = HAL_GetTick();
 80152f2:	f000 fbc9 	bl	8015a88 <HAL_GetTick>
 80152f6:	60f8      	str	r0, [r7, #12]
			while(ps4.button == LEFT)
 80152f8:	4b4e      	ldr	r3, [pc, #312]	; (8015434 <LidarControl+0x288>)
 80152fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152fc:	2b80      	cmp	r3, #128	; 0x80
 80152fe:	d0f8      	beq.n	80152f2 <LidarControl+0x146>
			}
			shot_count = 0;
 8015300:	4b4d      	ldr	r3, [pc, #308]	; (8015438 <LidarControl+0x28c>)
 8015302:	2200      	movs	r2, #0
 8015304:	601a      	str	r2, [r3, #0]

			if(after - before > 500)
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	1ad3      	subs	r3, r2, r3
 801530c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015310:	d907      	bls.n	8015322 <LidarControl+0x176>
				lidar->pos_counter -= 3;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015318:	1eda      	subs	r2, r3, #3
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015320:	e006      	b.n	8015330 <LidarControl+0x184>
			else
				lidar->pos_counter--;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015328:	1e5a      	subs	r2, r3, #1
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		}

		if(ps4.button == RIGHT)
 8015330:	4b40      	ldr	r3, [pc, #256]	; (8015434 <LidarControl+0x288>)
 8015332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015334:	2b20      	cmp	r3, #32
 8015336:	d122      	bne.n	801537e <LidarControl+0x1d2>
		{
			before = HAL_GetTick();
 8015338:	f000 fba6 	bl	8015a88 <HAL_GetTick>
 801533c:	60b8      	str	r0, [r7, #8]
			while(ps4.button == RIGHT)
 801533e:	e002      	b.n	8015346 <LidarControl+0x19a>
			{
				after = HAL_GetTick();
 8015340:	f000 fba2 	bl	8015a88 <HAL_GetTick>
 8015344:	60f8      	str	r0, [r7, #12]
			while(ps4.button == RIGHT)
 8015346:	4b3b      	ldr	r3, [pc, #236]	; (8015434 <LidarControl+0x288>)
 8015348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801534a:	2b20      	cmp	r3, #32
 801534c:	d0f8      	beq.n	8015340 <LidarControl+0x194>
			}

			if(after - before > 500)
 801534e:	68fa      	ldr	r2, [r7, #12]
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015358:	d907      	bls.n	801536a <LidarControl+0x1be>
				lidar->pos_counter += 3;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015360:	1cda      	adds	r2, r3, #3
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015368:	e006      	b.n	8015378 <LidarControl+0x1cc>
			else
				lidar->pos_counter++;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015370:	1c5a      	adds	r2, r3, #1
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			shot_count = 0;
 8015378:	4b2f      	ldr	r3, [pc, #188]	; (8015438 <LidarControl+0x28c>)
 801537a:	2200      	movs	r2, #0
 801537c:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == UP)
 801537e:	4b2d      	ldr	r3, [pc, #180]	; (8015434 <LidarControl+0x288>)
 8015380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015382:	2b10      	cmp	r3, #16
 8015384:	d122      	bne.n	80153cc <LidarControl+0x220>
		{
			before = HAL_GetTick();
 8015386:	f000 fb7f 	bl	8015a88 <HAL_GetTick>
 801538a:	60b8      	str	r0, [r7, #8]
			while(ps4.button == UP)
 801538c:	e002      	b.n	8015394 <LidarControl+0x1e8>
			{
				after = HAL_GetTick();
 801538e:	f000 fb7b 	bl	8015a88 <HAL_GetTick>
 8015392:	60f8      	str	r0, [r7, #12]
			while(ps4.button == UP)
 8015394:	4b27      	ldr	r3, [pc, #156]	; (8015434 <LidarControl+0x288>)
 8015396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015398:	2b10      	cmp	r3, #16
 801539a:	d0f8      	beq.n	801538e <LidarControl+0x1e2>
			}

			if(after - before > 500)
 801539c:	68fa      	ldr	r2, [r7, #12]
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80153a6:	d907      	bls.n	80153b8 <LidarControl+0x20c>
				lidar->pos_counter += 4;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80153ae:	1d1a      	adds	r2, r3, #4
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80153b6:	e006      	b.n	80153c6 <LidarControl+0x21a>
			else
				lidar->pos_counter += 2;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80153be:	1c9a      	adds	r2, r3, #2
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			shot_count = 0;
 80153c6:	4b1c      	ldr	r3, [pc, #112]	; (8015438 <LidarControl+0x28c>)
 80153c8:	2200      	movs	r2, #0
 80153ca:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == DOWN)
 80153cc:	4b19      	ldr	r3, [pc, #100]	; (8015434 <LidarControl+0x288>)
 80153ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153d0:	2b40      	cmp	r3, #64	; 0x40
 80153d2:	d122      	bne.n	801541a <LidarControl+0x26e>
		{
			before = HAL_GetTick();
 80153d4:	f000 fb58 	bl	8015a88 <HAL_GetTick>
 80153d8:	60b8      	str	r0, [r7, #8]
			while(ps4.button == DOWN)
 80153da:	e002      	b.n	80153e2 <LidarControl+0x236>
			{
				after = HAL_GetTick();
 80153dc:	f000 fb54 	bl	8015a88 <HAL_GetTick>
 80153e0:	60f8      	str	r0, [r7, #12]
			while(ps4.button == DOWN)
 80153e2:	4b14      	ldr	r3, [pc, #80]	; (8015434 <LidarControl+0x288>)
 80153e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153e6:	2b40      	cmp	r3, #64	; 0x40
 80153e8:	d0f8      	beq.n	80153dc <LidarControl+0x230>
			}

			if(after - before > 500)
 80153ea:	68fa      	ldr	r2, [r7, #12]
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	1ad3      	subs	r3, r2, r3
 80153f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80153f4:	d907      	bls.n	8015406 <LidarControl+0x25a>
				lidar->pos_counter -= 4;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80153fc:	1f1a      	subs	r2, r3, #4
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015404:	e006      	b.n	8015414 <LidarControl+0x268>
			else
				lidar->pos_counter -= 2;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801540c:	1e9a      	subs	r2, r3, #2
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			shot_count = 0;
 8015414:	4b08      	ldr	r3, [pc, #32]	; (8015438 <LidarControl+0x28c>)
 8015416:	2200      	movs	r2, #0
 8015418:	601a      	str	r2, [r3, #0]
		}
	}
	LidarCheckPos(lidar);
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f842 	bl	80154a4 <LidarCheckPos>
	LidarCheckAngle(lidar);
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f000 f80b 	bl	801543c <LidarCheckAngle>
}
 8015426:	bf00      	nop
 8015428:	3710      	adds	r7, #16
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}
 801542e:	bf00      	nop
 8015430:	200076e4 	.word	0x200076e4
 8015434:	2000a244 	.word	0x2000a244
 8015438:	200068e0 	.word	0x200068e0

0801543c <LidarCheckAngle>:

void LidarCheckAngle(Lidar_t* lidar)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b082      	sub	sp, #8
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
	switch(lidar->angle_counter)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801544a:	2b04      	cmp	r3, #4
 801544c:	d825      	bhi.n	801549a <LidarCheckAngle+0x5e>
 801544e:	a201      	add	r2, pc, #4	; (adr r2, 8015454 <LidarCheckAngle+0x18>)
 8015450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015454:	08015469 	.word	0x08015469
 8015458:	08015473 	.word	0x08015473
 801545c:	0801547d 	.word	0x0801547d
 8015460:	08015487 	.word	0x08015487
 8015464:	08015491 	.word	0x08015491
	{
		case BL:
			LidarSetAngle(BL, lidar);
 8015468:	6879      	ldr	r1, [r7, #4]
 801546a:	2000      	movs	r0, #0
 801546c:	f7fe fd50 	bl	8013f10 <LidarSetAngle>
			break;
 8015470:	e014      	b.n	801549c <LidarCheckAngle+0x60>

		case FL:
			LidarSetAngle(FL, lidar);
 8015472:	6879      	ldr	r1, [r7, #4]
 8015474:	2001      	movs	r0, #1
 8015476:	f7fe fd4b 	bl	8013f10 <LidarSetAngle>
			break;
 801547a:	e00f      	b.n	801549c <LidarCheckAngle+0x60>

		case S:
			LidarSetAngle(S, lidar);
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	2002      	movs	r0, #2
 8015480:	f7fe fd46 	bl	8013f10 <LidarSetAngle>
			break;
 8015484:	e00a      	b.n	801549c <LidarCheckAngle+0x60>

		case FR:
			LidarSetAngle(FR, lidar);
 8015486:	6879      	ldr	r1, [r7, #4]
 8015488:	2003      	movs	r0, #3
 801548a:	f7fe fd41 	bl	8013f10 <LidarSetAngle>
			break;
 801548e:	e005      	b.n	801549c <LidarCheckAngle+0x60>

		case BR:
			LidarSetAngle(BR, lidar);
 8015490:	6879      	ldr	r1, [r7, #4]
 8015492:	2004      	movs	r0, #4
 8015494:	f7fe fd3c 	bl	8013f10 <LidarSetAngle>
			break;
 8015498:	e000      	b.n	801549c <LidarCheckAngle+0x60>

		default:
			break;
 801549a:	bf00      	nop
	}
}
 801549c:	bf00      	nop
 801549e:	3708      	adds	r7, #8
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <LidarCheckPos>:

void LidarCheckPos(Lidar_t* lidar)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80154b2:	3b02      	subs	r3, #2
 80154b4:	2b07      	cmp	r3, #7
 80154b6:	d83b      	bhi.n	8015530 <LidarCheckPos+0x8c>
 80154b8:	a201      	add	r2, pc, #4	; (adr r2, 80154c0 <LidarCheckPos+0x1c>)
 80154ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154be:	bf00      	nop
 80154c0:	080154eb 	.word	0x080154eb
 80154c4:	080154f5 	.word	0x080154f5
 80154c8:	080154ff 	.word	0x080154ff
 80154cc:	08015509 	.word	0x08015509
 80154d0:	08015513 	.word	0x08015513
 80154d4:	0801551d 	.word	0x0801551d
 80154d8:	08015527 	.word	0x08015527
 80154dc:	080154e1 	.word	0x080154e1
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 80154e0:	6879      	ldr	r1, [r7, #4]
 80154e2:	2009      	movs	r0, #9
 80154e4:	f7fa f8d0 	bl	800f688 <LidarSetPos>
			break;
 80154e8:	e023      	b.n	8015532 <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 80154ea:	6879      	ldr	r1, [r7, #4]
 80154ec:	2002      	movs	r0, #2
 80154ee:	f7fa f8cb 	bl	800f688 <LidarSetPos>
			break;
 80154f2:	e01e      	b.n	8015532 <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 80154f4:	6879      	ldr	r1, [r7, #4]
 80154f6:	2003      	movs	r0, #3
 80154f8:	f7fa f8c6 	bl	800f688 <LidarSetPos>
			break;
 80154fc:	e019      	b.n	8015532 <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 80154fe:	6879      	ldr	r1, [r7, #4]
 8015500:	2004      	movs	r0, #4
 8015502:	f7fa f8c1 	bl	800f688 <LidarSetPos>
			break;
 8015506:	e014      	b.n	8015532 <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 8015508:	6879      	ldr	r1, [r7, #4]
 801550a:	2005      	movs	r0, #5
 801550c:	f7fa f8bc 	bl	800f688 <LidarSetPos>
			break;
 8015510:	e00f      	b.n	8015532 <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 8015512:	6879      	ldr	r1, [r7, #4]
 8015514:	2006      	movs	r0, #6
 8015516:	f7fa f8b7 	bl	800f688 <LidarSetPos>
			break;
 801551a:	e00a      	b.n	8015532 <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 801551c:	6879      	ldr	r1, [r7, #4]
 801551e:	2007      	movs	r0, #7
 8015520:	f7fa f8b2 	bl	800f688 <LidarSetPos>
			break;
 8015524:	e005      	b.n	8015532 <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 8015526:	6879      	ldr	r1, [r7, #4]
 8015528:	2008      	movs	r0, #8
 801552a:	f7fa f8ad 	bl	800f688 <LidarSetPos>
			break;
 801552e:	e000      	b.n	8015532 <LidarCheckPos+0x8e>

		default:
			break;
 8015530:	bf00      	nop
	}
}
 8015532:	bf00      	nop
 8015534:	3708      	adds	r7, #8
 8015536:	46bd      	mov	sp, r7
 8015538:	bd80      	pop	{r7, pc}
 801553a:	bf00      	nop

0801553c <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	4603      	mov	r3, r0
 8015544:	6039      	str	r1, [r7, #0]
 8015546:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	2201      	movs	r2, #1
 801554c:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	79fa      	ldrb	r2, [r7, #7]
 8015554:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	2201      	movs	r2, #1
 801555c:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	3302      	adds	r3, #2
 8015562:	683a      	ldr	r2, [r7, #0]
 8015564:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8015568:	7812      	ldrb	r2, [r2, #0]
 801556a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	1c59      	adds	r1, r3, #1
 8015576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801557a:	2202      	movs	r2, #2
 801557c:	f005 ff8f 	bl	801b49e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	33c9      	adds	r3, #201	; 0xc9
 801558a:	2219      	movs	r2, #25
 801558c:	4619      	mov	r1, r3
 801558e:	f006 f81f 	bl	801b5d0 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 8015592:	e004      	b.n	801559e <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 8015594:	4b07      	ldr	r3, [pc, #28]	; (80155b4 <LidarSendIns+0x78>)
 8015596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801559c:	d005      	beq.n	80155aa <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d0f5      	beq.n	8015594 <LidarSendIns+0x58>
			break;
	}
}
 80155a8:	e000      	b.n	80155ac <LidarSendIns+0x70>
			break;
 80155aa:	bf00      	nop
}
 80155ac:	bf00      	nop
 80155ae:	3708      	adds	r7, #8
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	2000a244 	.word	0x2000a244

080155b8 <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 80155b8:	b5b0      	push	{r4, r5, r7, lr}
 80155ba:	b086      	sub	sp, #24
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	f040 8115 	bne.w	80157f6 <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 80155cc:	4baa      	ldr	r3, [pc, #680]	; (8015878 <ObstacleHandler+0x2c0>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d002      	beq.n	80155da <ObstacleHandler+0x22>
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d061      	beq.n	801569c <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 80155d8:	e1f1      	b.n	80159be <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80155e0:	2b01      	cmp	r3, #1
 80155e2:	f040 81eb 	bne.w	80159bc <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	32ca      	adds	r2, #202	; 0xca
 80155f0:	6812      	ldr	r2, [r2, #0]
 80155f2:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80155fa:	f003 0301 	and.w	r3, r3, #1
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	2b00      	cmp	r3, #0
 8015602:	d110      	bne.n	8015626 <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 801560a:	461a      	mov	r2, r3
 801560c:	4613      	mov	r3, r2
 801560e:	005b      	lsls	r3, r3, #1
 8015610:	4413      	add	r3, r2
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	4618      	mov	r0, r3
 8015616:	f009 fc0b 	bl	801ee30 <malloc>
 801561a:	4603      	mov	r3, r0
 801561c:	461a      	mov	r2, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8015624:	e012      	b.n	801564c <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015632:	4619      	mov	r1, r3
 8015634:	460b      	mov	r3, r1
 8015636:	005b      	lsls	r3, r3, #1
 8015638:	440b      	add	r3, r1
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	4619      	mov	r1, r3
 801563e:	4610      	mov	r0, r2
 8015640:	f00a fb38 	bl	801fcb4 <realloc>
 8015644:	4602      	mov	r2, r0
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 8015658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801565c:	2204      	movs	r2, #4
 801565e:	f005 ff1e 	bl	801b49e <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015674:	b29b      	uxth	r3, r3
 8015676:	461a      	mov	r2, r3
 8015678:	0052      	lsls	r2, r2, #1
 801567a:	4413      	add	r3, r2
 801567c:	009b      	lsls	r3, r3, #2
 801567e:	b29b      	uxth	r3, r3
 8015680:	461a      	mov	r2, r3
 8015682:	f005 ffa5 	bl	801b5d0 <HAL_UART_Receive_IT>
					mode = 1;
 8015686:	4b7c      	ldr	r3, [pc, #496]	; (8015878 <ObstacleHandler+0x2c0>)
 8015688:	2201      	movs	r2, #1
 801568a:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 801568c:	687a      	ldr	r2, [r7, #4]
 801568e:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 8015692:	f043 0301 	orr.w	r3, r3, #1
 8015696:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
				break;
 801569a:	e18f      	b.n	80159bc <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 801569c:	2300      	movs	r3, #0
 801569e:	617b      	str	r3, [r7, #20]
 80156a0:	e05b      	b.n	801575a <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 80156a8:	697a      	ldr	r2, [r7, #20]
 80156aa:	4613      	mov	r3, r2
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	4413      	add	r3, r2
 80156b0:	009b      	lsls	r3, r3, #2
 80156b2:	33c8      	adds	r3, #200	; 0xc8
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	4413      	add	r3, r2
 80156b8:	3301      	adds	r3, #1
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 80156c4:	697a      	ldr	r2, [r7, #20]
 80156c6:	4613      	mov	r3, r2
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	4413      	add	r3, r2
 80156cc:	009b      	lsls	r3, r3, #2
 80156ce:	3304      	adds	r3, #4
 80156d0:	33c8      	adds	r3, #200	; 0xc8
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	4413      	add	r3, r2
 80156d6:	3301      	adds	r3, #1
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80156e2:	697a      	ldr	r2, [r7, #20]
 80156e4:	4613      	mov	r3, r2
 80156e6:	005b      	lsls	r3, r3, #1
 80156e8:	4413      	add	r3, r2
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	3308      	adds	r3, #8
 80156ee:	33c8      	adds	r3, #200	; 0xc8
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	4413      	add	r3, r2
 80156f4:	3301      	adds	r3, #1
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8015706:	f7eb f8a1 	bl	800084c <__aeabi_ddiv>
 801570a:	4602      	mov	r2, r0
 801570c:	460b      	mov	r3, r1
 801570e:	4610      	mov	r0, r2
 8015710:	4619      	mov	r1, r3
 8015712:	f7eb fa69 	bl	8000be8 <__aeabi_d2f>
 8015716:	4603      	mov	r3, r0
 8015718:	ee00 3a10 	vmov	s0, r3
 801571c:	f00e f848 	bl	80237b0 <atanf>
 8015720:	ee10 3a10 	vmov	r3, s0
 8015724:	4618      	mov	r0, r3
 8015726:	f7ea ff0f 	bl	8000548 <__aeabi_f2d>
 801572a:	4602      	mov	r2, r0
 801572c:	460b      	mov	r3, r1
 801572e:	6879      	ldr	r1, [r7, #4]
 8015730:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	015b      	lsls	r3, r3, #5
 801573e:	441a      	add	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	4615      	mov	r5, r2
 8015744:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8015748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801574a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801574c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015750:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	3301      	adds	r3, #1
 8015758:	617b      	str	r3, [r7, #20]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015760:	697a      	ldr	r2, [r7, #20]
 8015762:	429a      	cmp	r2, r3
 8015764:	db9d      	blt.n	80156a2 <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8015766:	2300      	movs	r3, #0
 8015768:	613b      	str	r3, [r7, #16]
 801576a:	e031      	b.n	80157d0 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	015b      	lsls	r3, r3, #5
 801577c:	4413      	add	r3, r2
 801577e:	4619      	mov	r1, r3
 8015780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015784:	2204      	movs	r2, #4
 8015786:	f005 fe8a 	bl	801b49e <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	015b      	lsls	r3, r3, #5
 801579a:	4413      	add	r3, r2
 801579c:	f103 0108 	add.w	r1, r3, #8
 80157a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157a4:	2204      	movs	r2, #4
 80157a6:	f005 fe7a 	bl	801b49e <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80157b6:	693b      	ldr	r3, [r7, #16]
 80157b8:	015b      	lsls	r3, r3, #5
 80157ba:	4413      	add	r3, r2
 80157bc:	f103 0110 	add.w	r1, r3, #16
 80157c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157c4:	2204      	movs	r2, #4
 80157c6:	f005 fe6a 	bl	801b49e <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 80157ca:	693b      	ldr	r3, [r7, #16]
 80157cc:	3301      	adds	r3, #1
 80157ce:	613b      	str	r3, [r7, #16]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80157d6:	693a      	ldr	r2, [r7, #16]
 80157d8:	429a      	cmp	r2, r3
 80157da:	dbc7      	blt.n	801576c <ObstacleHandler+0x1b4>
				mode = 0;
 80157dc:	4b26      	ldr	r3, [pc, #152]	; (8015878 <ObstacleHandler+0x2c0>)
 80157de:	2200      	movs	r2, #0
 80157e0:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	33c9      	adds	r3, #201	; 0xc9
 80157ec:	2205      	movs	r2, #5
 80157ee:	4619      	mov	r1, r3
 80157f0:	f005 feee 	bl	801b5d0 <HAL_UART_Receive_IT>
				break;
 80157f4:	e0e3      	b.n	80159be <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80157fc:	f003 0304 	and.w	r3, r3, #4
 8015800:	b2db      	uxtb	r3, r3
 8015802:	2b00      	cmp	r3, #0
 8015804:	d13a      	bne.n	801587c <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801580c:	2b01      	cmp	r3, #1
 801580e:	f040 80d6 	bne.w	80159be <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f203 1399 	addw	r3, r3, #409	; 0x199
 8015818:	687a      	ldr	r2, [r7, #4]
 801581a:	32ca      	adds	r2, #202	; 0xca
 801581c:	7812      	ldrb	r2, [r2, #0]
 801581e:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8015832:	2b00      	cmp	r3, #0
 8015834:	f040 80c3 	bne.w	80159be <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f203 1199 	addw	r1, r3, #409	; 0x199
 8015844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015848:	2201      	movs	r2, #1
 801584a:	f005 fe28 	bl	801b49e <HAL_UART_Transmit>
					lidar->start = 1;
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 8015854:	f043 0304 	orr.w	r3, r3, #4
 8015858:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
					lidar->response = NO;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2201      	movs	r2, #1
 8015860:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	33c9      	adds	r3, #201	; 0xc9
 801586e:	2219      	movs	r2, #25
 8015870:	4619      	mov	r1, r3
 8015872:	f005 fead 	bl	801b5d0 <HAL_UART_Receive_IT>
}
 8015876:	e0a2      	b.n	80159be <ObstacleHandler+0x406>
 8015878:	20001104 	.word	0x20001104
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f203 1399 	addw	r3, r3, #409	; 0x199
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	32c9      	adds	r2, #201	; 0xc9
 8015886:	7812      	ldrb	r2, [r2, #0]
 8015888:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 801589c:	2b00      	cmp	r3, #0
 801589e:	d152      	bne.n	8015946 <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	33ca      	adds	r3, #202	; 0xca
 80158aa:	2208      	movs	r2, #8
 80158ac:	4619      	mov	r1, r3
 80158ae:	f009 fac7 	bl	801ee40 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	33d2      	adds	r3, #210	; 0xd2
 80158bc:	2208      	movs	r2, #8
 80158be:	4619      	mov	r1, r3
 80158c0:	f009 fabe 	bl	801ee40 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	33da      	adds	r3, #218	; 0xda
 80158ce:	2208      	movs	r2, #8
 80158d0:	4619      	mov	r1, r3
 80158d2:	f009 fab5 	bl	801ee40 <memcpy>
				float temp = lidar->pole.x;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 80158dc:	4610      	mov	r0, r2
 80158de:	4619      	mov	r1, r3
 80158e0:	f7eb f982 	bl	8000be8 <__aeabi_d2f>
 80158e4:	4603      	mov	r3, r0
 80158e6:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 80158ee:	4614      	mov	r4, r2
 80158f0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 80158fa:	68f8      	ldr	r0, [r7, #12]
 80158fc:	f7ea fe24 	bl	8000548 <__aeabi_f2d>
 8015900:	4602      	mov	r2, r0
 8015902:	460b      	mov	r3, r1
 8015904:	6879      	ldr	r1, [r7, #4]
 8015906:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8015916:	f7ea ff99 	bl	800084c <__aeabi_ddiv>
 801591a:	4602      	mov	r2, r0
 801591c:	460b      	mov	r3, r1
 801591e:	4610      	mov	r0, r2
 8015920:	4619      	mov	r1, r3
 8015922:	f7eb f961 	bl	8000be8 <__aeabi_d2f>
 8015926:	4603      	mov	r3, r0
 8015928:	ee00 3a10 	vmov	s0, r3
 801592c:	f00d ff40 	bl	80237b0 <atanf>
 8015930:	ee10 3a10 	vmov	r3, s0
 8015934:	4618      	mov	r0, r3
 8015936:	f7ea fe07 	bl	8000548 <__aeabi_f2d>
 801593a:	4602      	mov	r2, r0
 801593c:	460b      	mov	r3, r1
 801593e:	6879      	ldr	r1, [r7, #4]
 8015940:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8015944:	e00d      	b.n	8015962 <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 801594c:	f043 0302 	orr.w	r3, r3, #2
 8015950:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
				LidarSendIns(lidar->inst, lidar);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 801595a:	6879      	ldr	r1, [r7, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	f7ff fded 	bl	801553c <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	f203 1199 	addw	r1, r3, #409	; 0x199
 801596e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015972:	2201      	movs	r2, #1
 8015974:	f005 fd93 	bl	801b49e <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8015984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015988:	2208      	movs	r2, #8
 801598a:	f005 fd88 	bl	801b49e <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 801599a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801599e:	2208      	movs	r2, #8
 80159a0:	f005 fd7d 	bl	801b49e <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 80159b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159b4:	2208      	movs	r2, #8
 80159b6:	f005 fd72 	bl	801b49e <HAL_UART_Transmit>
}
 80159ba:	e000      	b.n	80159be <ObstacleHandler+0x406>
				break;
 80159bc:	bf00      	nop
}
 80159be:	bf00      	nop
 80159c0:	3718      	adds	r7, #24
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bdb0      	pop	{r4, r5, r7, pc}
 80159c6:	bf00      	nop

080159c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80159c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80159cc:	480d      	ldr	r0, [pc, #52]	; (8015a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80159ce:	490e      	ldr	r1, [pc, #56]	; (8015a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80159d0:	4a0e      	ldr	r2, [pc, #56]	; (8015a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80159d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80159d4:	e002      	b.n	80159dc <LoopCopyDataInit>

080159d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80159d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80159d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80159da:	3304      	adds	r3, #4

080159dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80159dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80159de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80159e0:	d3f9      	bcc.n	80159d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80159e2:	4a0b      	ldr	r2, [pc, #44]	; (8015a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80159e4:	4c0b      	ldr	r4, [pc, #44]	; (8015a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80159e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80159e8:	e001      	b.n	80159ee <LoopFillZerobss>

080159ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80159ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80159ec:	3204      	adds	r2, #4

080159ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80159ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80159f0:	d3fb      	bcc.n	80159ea <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80159f2:	f7f9 f8b7 	bl	800eb64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80159f6:	f009 f9f7 	bl	801ede8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80159fa:	f7ee fae5 	bl	8003fc8 <main>
  bx  lr    
 80159fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8015a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8015a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015a08:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8015a0c:	0802608c 	.word	0x0802608c
  ldr r2, =_sbss
 8015a10:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8015a14:	2000a95c 	.word	0x2000a95c

08015a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015a18:	e7fe      	b.n	8015a18 <ADC_IRQHandler>
	...

08015a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015a20:	4b0e      	ldr	r3, [pc, #56]	; (8015a5c <HAL_Init+0x40>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	4a0d      	ldr	r2, [pc, #52]	; (8015a5c <HAL_Init+0x40>)
 8015a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015a2c:	4b0b      	ldr	r3, [pc, #44]	; (8015a5c <HAL_Init+0x40>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	4a0a      	ldr	r2, [pc, #40]	; (8015a5c <HAL_Init+0x40>)
 8015a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015a38:	4b08      	ldr	r3, [pc, #32]	; (8015a5c <HAL_Init+0x40>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4a07      	ldr	r2, [pc, #28]	; (8015a5c <HAL_Init+0x40>)
 8015a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015a44:	2003      	movs	r0, #3
 8015a46:	f000 ffa8 	bl	801699a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015a4a:	2000      	movs	r0, #0
 8015a4c:	f7f8 ff6a 	bl	800e924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015a50:	f7ec fa52 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	40023c00 	.word	0x40023c00

08015a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015a60:	b480      	push	{r7}
 8015a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015a64:	4b06      	ldr	r3, [pc, #24]	; (8015a80 <HAL_IncTick+0x20>)
 8015a66:	781b      	ldrb	r3, [r3, #0]
 8015a68:	461a      	mov	r2, r3
 8015a6a:	4b06      	ldr	r3, [pc, #24]	; (8015a84 <HAL_IncTick+0x24>)
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	4413      	add	r3, r2
 8015a70:	4a04      	ldr	r2, [pc, #16]	; (8015a84 <HAL_IncTick+0x24>)
 8015a72:	6013      	str	r3, [r2, #0]
}
 8015a74:	bf00      	nop
 8015a76:	46bd      	mov	sp, r7
 8015a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	200000bc 	.word	0x200000bc
 8015a84:	2000a908 	.word	0x2000a908

08015a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015a88:	b480      	push	{r7}
 8015a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8015a8c:	4b03      	ldr	r3, [pc, #12]	; (8015a9c <HAL_GetTick+0x14>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	46bd      	mov	sp, r7
 8015a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a98:	4770      	bx	lr
 8015a9a:	bf00      	nop
 8015a9c:	2000a908 	.word	0x2000a908

08015aa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b084      	sub	sp, #16
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d101      	bne.n	8015ab2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e0ed      	b.n	8015c8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ab8:	b2db      	uxtb	r3, r3
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d102      	bne.n	8015ac4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f7ec fa46 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f022 0202 	bic.w	r2, r2, #2
 8015ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015ad4:	f7ff ffd8 	bl	8015a88 <HAL_GetTick>
 8015ad8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015ada:	e012      	b.n	8015b02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015adc:	f7ff ffd4 	bl	8015a88 <HAL_GetTick>
 8015ae0:	4602      	mov	r2, r0
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	1ad3      	subs	r3, r2, r3
 8015ae6:	2b0a      	cmp	r3, #10
 8015ae8:	d90b      	bls.n	8015b02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	2205      	movs	r2, #5
 8015afa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015afe:	2301      	movs	r3, #1
 8015b00:	e0c5      	b.n	8015c8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	f003 0302 	and.w	r3, r3, #2
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d1e5      	bne.n	8015adc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	681a      	ldr	r2, [r3, #0]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f042 0201 	orr.w	r2, r2, #1
 8015b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015b20:	f7ff ffb2 	bl	8015a88 <HAL_GetTick>
 8015b24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015b26:	e012      	b.n	8015b4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015b28:	f7ff ffae 	bl	8015a88 <HAL_GetTick>
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	1ad3      	subs	r3, r2, r3
 8015b32:	2b0a      	cmp	r3, #10
 8015b34:	d90b      	bls.n	8015b4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2205      	movs	r2, #5
 8015b46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	e09f      	b.n	8015c8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	685b      	ldr	r3, [r3, #4]
 8015b54:	f003 0301 	and.w	r3, r3, #1
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d0e5      	beq.n	8015b28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	7e1b      	ldrb	r3, [r3, #24]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d108      	bne.n	8015b76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015b72:	601a      	str	r2, [r3, #0]
 8015b74:	e007      	b.n	8015b86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	681a      	ldr	r2, [r3, #0]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	7e5b      	ldrb	r3, [r3, #25]
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d108      	bne.n	8015ba0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015b9c:	601a      	str	r2, [r3, #0]
 8015b9e:	e007      	b.n	8015bb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015bae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	7e9b      	ldrb	r3, [r3, #26]
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d108      	bne.n	8015bca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f042 0220 	orr.w	r2, r2, #32
 8015bc6:	601a      	str	r2, [r3, #0]
 8015bc8:	e007      	b.n	8015bda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f022 0220 	bic.w	r2, r2, #32
 8015bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	7edb      	ldrb	r3, [r3, #27]
 8015bde:	2b01      	cmp	r3, #1
 8015be0:	d108      	bne.n	8015bf4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	f022 0210 	bic.w	r2, r2, #16
 8015bf0:	601a      	str	r2, [r3, #0]
 8015bf2:	e007      	b.n	8015c04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	f042 0210 	orr.w	r2, r2, #16
 8015c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	7f1b      	ldrb	r3, [r3, #28]
 8015c08:	2b01      	cmp	r3, #1
 8015c0a:	d108      	bne.n	8015c1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	f042 0208 	orr.w	r2, r2, #8
 8015c1a:	601a      	str	r2, [r3, #0]
 8015c1c:	e007      	b.n	8015c2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	681a      	ldr	r2, [r3, #0]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	f022 0208 	bic.w	r2, r2, #8
 8015c2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	7f5b      	ldrb	r3, [r3, #29]
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	d108      	bne.n	8015c48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	f042 0204 	orr.w	r2, r2, #4
 8015c44:	601a      	str	r2, [r3, #0]
 8015c46:	e007      	b.n	8015c58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f022 0204 	bic.w	r2, r2, #4
 8015c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	689a      	ldr	r2, [r3, #8]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	68db      	ldr	r3, [r3, #12]
 8015c60:	431a      	orrs	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	691b      	ldr	r3, [r3, #16]
 8015c66:	431a      	orrs	r2, r3
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	695b      	ldr	r3, [r3, #20]
 8015c6c:	ea42 0103 	orr.w	r1, r2, r3
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	1e5a      	subs	r2, r3, #1
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	430a      	orrs	r2, r1
 8015c7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2200      	movs	r2, #0
 8015c82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2201      	movs	r2, #1
 8015c88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8015c8c:	2300      	movs	r3, #0
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
	...

08015c98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b087      	sub	sp, #28
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015cb0:	7cfb      	ldrb	r3, [r7, #19]
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d003      	beq.n	8015cbe <HAL_CAN_ConfigFilter+0x26>
 8015cb6:	7cfb      	ldrb	r3, [r7, #19]
 8015cb8:	2b02      	cmp	r3, #2
 8015cba:	f040 80be 	bne.w	8015e3a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8015cbe:	4b65      	ldr	r3, [pc, #404]	; (8015e54 <HAL_CAN_ConfigFilter+0x1bc>)
 8015cc0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015cc8:	f043 0201 	orr.w	r2, r3, #1
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015cd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cec:	021b      	lsls	r3, r3, #8
 8015cee:	431a      	orrs	r2, r3
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	695b      	ldr	r3, [r3, #20]
 8015cfa:	f003 031f 	and.w	r3, r3, #31
 8015cfe:	2201      	movs	r2, #1
 8015d00:	fa02 f303 	lsl.w	r3, r2, r3
 8015d04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8015d06:	697b      	ldr	r3, [r7, #20]
 8015d08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	43db      	mvns	r3, r3
 8015d10:	401a      	ands	r2, r3
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	69db      	ldr	r3, [r3, #28]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d123      	bne.n	8015d68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	43db      	mvns	r3, r3
 8015d2a:	401a      	ands	r2, r3
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	68db      	ldr	r3, [r3, #12]
 8015d36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	685b      	ldr	r3, [r3, #4]
 8015d3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d3e:	683a      	ldr	r2, [r7, #0]
 8015d40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015d42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	3248      	adds	r2, #72	; 0x48
 8015d48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015d5e:	6979      	ldr	r1, [r7, #20]
 8015d60:	3348      	adds	r3, #72	; 0x48
 8015d62:	00db      	lsls	r3, r3, #3
 8015d64:	440b      	add	r3, r1
 8015d66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	69db      	ldr	r3, [r3, #28]
 8015d6c:	2b01      	cmp	r3, #1
 8015d6e:	d122      	bne.n	8015db6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	431a      	orrs	r2, r3
 8015d7a:	697b      	ldr	r3, [r7, #20]
 8015d7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015d86:	683b      	ldr	r3, [r7, #0]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d8c:	683a      	ldr	r2, [r7, #0]
 8015d8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015d90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	3248      	adds	r2, #72	; 0x48
 8015d96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	689b      	ldr	r3, [r3, #8]
 8015d9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	68db      	ldr	r3, [r3, #12]
 8015da4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015daa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015dac:	6979      	ldr	r1, [r7, #20]
 8015dae:	3348      	adds	r3, #72	; 0x48
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	440b      	add	r3, r1
 8015db4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	699b      	ldr	r3, [r3, #24]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d109      	bne.n	8015dd2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	43db      	mvns	r3, r3
 8015dc8:	401a      	ands	r2, r3
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8015dd0:	e007      	b.n	8015de2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	431a      	orrs	r2, r3
 8015ddc:	697b      	ldr	r3, [r7, #20]
 8015dde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	691b      	ldr	r3, [r3, #16]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d109      	bne.n	8015dfe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	43db      	mvns	r3, r3
 8015df4:	401a      	ands	r2, r3
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8015dfc:	e007      	b.n	8015e0e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	431a      	orrs	r2, r3
 8015e08:	697b      	ldr	r3, [r7, #20]
 8015e0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	6a1b      	ldr	r3, [r3, #32]
 8015e12:	2b01      	cmp	r3, #1
 8015e14:	d107      	bne.n	8015e26 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015e16:	697b      	ldr	r3, [r7, #20]
 8015e18:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	431a      	orrs	r2, r3
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e2c:	f023 0201 	bic.w	r2, r3, #1
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e006      	b.n	8015e48 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015e46:	2301      	movs	r3, #1
  }
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	371c      	adds	r7, #28
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e52:	4770      	bx	lr
 8015e54:	40006400 	.word	0x40006400

08015e58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e66:	b2db      	uxtb	r3, r3
 8015e68:	2b01      	cmp	r3, #1
 8015e6a:	d12e      	bne.n	8015eca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2202      	movs	r2, #2
 8015e70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	f022 0201 	bic.w	r2, r2, #1
 8015e82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015e84:	f7ff fe00 	bl	8015a88 <HAL_GetTick>
 8015e88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015e8a:	e012      	b.n	8015eb2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015e8c:	f7ff fdfc 	bl	8015a88 <HAL_GetTick>
 8015e90:	4602      	mov	r2, r0
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	2b0a      	cmp	r3, #10
 8015e98:	d90b      	bls.n	8015eb2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2205      	movs	r2, #5
 8015eaa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e012      	b.n	8015ed8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	685b      	ldr	r3, [r3, #4]
 8015eb8:	f003 0301 	and.w	r3, r3, #1
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d1e5      	bne.n	8015e8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	e006      	b.n	8015ed8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ece:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015ed6:	2301      	movs	r3, #1
  }
}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3710      	adds	r7, #16
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b089      	sub	sp, #36	; 0x24
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
 8015eec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ef4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	689b      	ldr	r3, [r3, #8]
 8015efc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015efe:	7ffb      	ldrb	r3, [r7, #31]
 8015f00:	2b01      	cmp	r3, #1
 8015f02:	d003      	beq.n	8015f0c <HAL_CAN_AddTxMessage+0x2c>
 8015f04:	7ffb      	ldrb	r3, [r7, #31]
 8015f06:	2b02      	cmp	r3, #2
 8015f08:	f040 80b8 	bne.w	801607c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015f0c:	69bb      	ldr	r3, [r7, #24]
 8015f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d10a      	bne.n	8015f2c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d105      	bne.n	8015f2c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015f20:	69bb      	ldr	r3, [r7, #24]
 8015f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	f000 80a0 	beq.w	801606c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	0e1b      	lsrs	r3, r3, #24
 8015f30:	f003 0303 	and.w	r3, r3, #3
 8015f34:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	2b02      	cmp	r3, #2
 8015f3a:	d907      	bls.n	8015f4c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f40:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e09e      	b.n	801608a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8015f4c:	2201      	movs	r2, #1
 8015f4e:	697b      	ldr	r3, [r7, #20]
 8015f50:	409a      	lsls	r2, r3
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	689b      	ldr	r3, [r3, #8]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d10d      	bne.n	8015f7a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015f5e:	68bb      	ldr	r3, [r7, #8]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015f64:	68bb      	ldr	r3, [r7, #8]
 8015f66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015f68:	68f9      	ldr	r1, [r7, #12]
 8015f6a:	6809      	ldr	r1, [r1, #0]
 8015f6c:	431a      	orrs	r2, r3
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	3318      	adds	r3, #24
 8015f72:	011b      	lsls	r3, r3, #4
 8015f74:	440b      	add	r3, r1
 8015f76:	601a      	str	r2, [r3, #0]
 8015f78:	e00f      	b.n	8015f9a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f84:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f8a:	68f9      	ldr	r1, [r7, #12]
 8015f8c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8015f8e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	3318      	adds	r3, #24
 8015f94:	011b      	lsls	r3, r3, #4
 8015f96:	440b      	add	r3, r1
 8015f98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	6819      	ldr	r1, [r3, #0]
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	691a      	ldr	r2, [r3, #16]
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	3318      	adds	r3, #24
 8015fa6:	011b      	lsls	r3, r3, #4
 8015fa8:	440b      	add	r3, r1
 8015faa:	3304      	adds	r3, #4
 8015fac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	7d1b      	ldrb	r3, [r3, #20]
 8015fb2:	2b01      	cmp	r3, #1
 8015fb4:	d111      	bne.n	8015fda <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	3318      	adds	r3, #24
 8015fbe:	011b      	lsls	r3, r3, #4
 8015fc0:	4413      	add	r3, r2
 8015fc2:	3304      	adds	r3, #4
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	68fa      	ldr	r2, [r7, #12]
 8015fc8:	6811      	ldr	r1, [r2, #0]
 8015fca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	3318      	adds	r3, #24
 8015fd2:	011b      	lsls	r3, r3, #4
 8015fd4:	440b      	add	r3, r1
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	3307      	adds	r3, #7
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	061a      	lsls	r2, r3, #24
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3306      	adds	r3, #6
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	041b      	lsls	r3, r3, #16
 8015fea:	431a      	orrs	r2, r3
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	3305      	adds	r3, #5
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	021b      	lsls	r3, r3, #8
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	687a      	ldr	r2, [r7, #4]
 8015ff8:	3204      	adds	r2, #4
 8015ffa:	7812      	ldrb	r2, [r2, #0]
 8015ffc:	4610      	mov	r0, r2
 8015ffe:	68fa      	ldr	r2, [r7, #12]
 8016000:	6811      	ldr	r1, [r2, #0]
 8016002:	ea43 0200 	orr.w	r2, r3, r0
 8016006:	697b      	ldr	r3, [r7, #20]
 8016008:	011b      	lsls	r3, r3, #4
 801600a:	440b      	add	r3, r1
 801600c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8016010:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	3303      	adds	r3, #3
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	061a      	lsls	r2, r3, #24
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	3302      	adds	r3, #2
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	041b      	lsls	r3, r3, #16
 8016022:	431a      	orrs	r2, r3
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	3301      	adds	r3, #1
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	021b      	lsls	r3, r3, #8
 801602c:	4313      	orrs	r3, r2
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	7812      	ldrb	r2, [r2, #0]
 8016032:	4610      	mov	r0, r2
 8016034:	68fa      	ldr	r2, [r7, #12]
 8016036:	6811      	ldr	r1, [r2, #0]
 8016038:	ea43 0200 	orr.w	r2, r3, r0
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	011b      	lsls	r3, r3, #4
 8016040:	440b      	add	r3, r1
 8016042:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016046:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	681a      	ldr	r2, [r3, #0]
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	3318      	adds	r3, #24
 8016050:	011b      	lsls	r3, r3, #4
 8016052:	4413      	add	r3, r2
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	68fa      	ldr	r2, [r7, #12]
 8016058:	6811      	ldr	r1, [r2, #0]
 801605a:	f043 0201 	orr.w	r2, r3, #1
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	3318      	adds	r3, #24
 8016062:	011b      	lsls	r3, r3, #4
 8016064:	440b      	add	r3, r1
 8016066:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8016068:	2300      	movs	r3, #0
 801606a:	e00e      	b.n	801608a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016070:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8016078:	2301      	movs	r3, #1
 801607a:	e006      	b.n	801608a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016080:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016088:	2301      	movs	r3, #1
  }
}
 801608a:	4618      	mov	r0, r3
 801608c:	3724      	adds	r7, #36	; 0x24
 801608e:	46bd      	mov	sp, r7
 8016090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016094:	4770      	bx	lr

08016096 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8016096:	b480      	push	{r7}
 8016098:	b085      	sub	sp, #20
 801609a:	af00      	add	r7, sp, #0
 801609c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 801609e:	2300      	movs	r3, #0
 80160a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160a8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80160aa:	7afb      	ldrb	r3, [r7, #11]
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d002      	beq.n	80160b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80160b0:	7afb      	ldrb	r3, [r7, #11]
 80160b2:	2b02      	cmp	r3, #2
 80160b4:	d11d      	bne.n	80160f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	689b      	ldr	r3, [r3, #8]
 80160bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d002      	beq.n	80160ca <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	3301      	adds	r3, #1
 80160c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	689b      	ldr	r3, [r3, #8]
 80160d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d002      	beq.n	80160de <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	3301      	adds	r3, #1
 80160dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	689b      	ldr	r3, [r3, #8]
 80160e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d002      	beq.n	80160f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	3301      	adds	r3, #1
 80160f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80160f2:	68fb      	ldr	r3, [r7, #12]
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	3714      	adds	r7, #20
 80160f8:	46bd      	mov	sp, r7
 80160fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fe:	4770      	bx	lr

08016100 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8016100:	b480      	push	{r7}
 8016102:	b087      	sub	sp, #28
 8016104:	af00      	add	r7, sp, #0
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	60b9      	str	r1, [r7, #8]
 801610a:	607a      	str	r2, [r7, #4]
 801610c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016114:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8016116:	7dfb      	ldrb	r3, [r7, #23]
 8016118:	2b01      	cmp	r3, #1
 801611a:	d003      	beq.n	8016124 <HAL_CAN_GetRxMessage+0x24>
 801611c:	7dfb      	ldrb	r3, [r7, #23]
 801611e:	2b02      	cmp	r3, #2
 8016120:	f040 80f3 	bne.w	801630a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d10e      	bne.n	8016148 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	68db      	ldr	r3, [r3, #12]
 8016130:	f003 0303 	and.w	r3, r3, #3
 8016134:	2b00      	cmp	r3, #0
 8016136:	d116      	bne.n	8016166 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801613c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8016144:	2301      	movs	r3, #1
 8016146:	e0e7      	b.n	8016318 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	691b      	ldr	r3, [r3, #16]
 801614e:	f003 0303 	and.w	r3, r3, #3
 8016152:	2b00      	cmp	r3, #0
 8016154:	d107      	bne.n	8016166 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801615a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8016162:	2301      	movs	r3, #1
 8016164:	e0d8      	b.n	8016318 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681a      	ldr	r2, [r3, #0]
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	331b      	adds	r3, #27
 801616e:	011b      	lsls	r3, r3, #4
 8016170:	4413      	add	r3, r2
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	f003 0204 	and.w	r2, r3, #4
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	689b      	ldr	r3, [r3, #8]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d10c      	bne.n	801619e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	68bb      	ldr	r3, [r7, #8]
 801618a:	331b      	adds	r3, #27
 801618c:	011b      	lsls	r3, r3, #4
 801618e:	4413      	add	r3, r2
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	0d5b      	lsrs	r3, r3, #21
 8016194:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	601a      	str	r2, [r3, #0]
 801619c:	e00b      	b.n	80161b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	331b      	adds	r3, #27
 80161a6:	011b      	lsls	r3, r3, #4
 80161a8:	4413      	add	r3, r2
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	08db      	lsrs	r3, r3, #3
 80161ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	331b      	adds	r3, #27
 80161be:	011b      	lsls	r3, r3, #4
 80161c0:	4413      	add	r3, r2
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f003 0202 	and.w	r2, r3, #2
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	681a      	ldr	r2, [r3, #0]
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	331b      	adds	r3, #27
 80161d4:	011b      	lsls	r3, r3, #4
 80161d6:	4413      	add	r3, r2
 80161d8:	3304      	adds	r3, #4
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	f003 020f 	and.w	r2, r3, #15
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681a      	ldr	r2, [r3, #0]
 80161e8:	68bb      	ldr	r3, [r7, #8]
 80161ea:	331b      	adds	r3, #27
 80161ec:	011b      	lsls	r3, r3, #4
 80161ee:	4413      	add	r3, r2
 80161f0:	3304      	adds	r3, #4
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	0a1b      	lsrs	r3, r3, #8
 80161f6:	b2da      	uxtb	r2, r3
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	681a      	ldr	r2, [r3, #0]
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	331b      	adds	r3, #27
 8016204:	011b      	lsls	r3, r3, #4
 8016206:	4413      	add	r3, r2
 8016208:	3304      	adds	r3, #4
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	0c1b      	lsrs	r3, r3, #16
 801620e:	b29a      	uxth	r2, r3
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	011b      	lsls	r3, r3, #4
 801621c:	4413      	add	r3, r2
 801621e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	b2da      	uxtb	r2, r3
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	011b      	lsls	r3, r3, #4
 8016232:	4413      	add	r3, r2
 8016234:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	0a1a      	lsrs	r2, r3, #8
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	3301      	adds	r3, #1
 8016240:	b2d2      	uxtb	r2, r2
 8016242:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	011b      	lsls	r3, r3, #4
 801624c:	4413      	add	r3, r2
 801624e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	0c1a      	lsrs	r2, r3, #16
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	3302      	adds	r3, #2
 801625a:	b2d2      	uxtb	r2, r2
 801625c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	011b      	lsls	r3, r3, #4
 8016266:	4413      	add	r3, r2
 8016268:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	0e1a      	lsrs	r2, r3, #24
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	3303      	adds	r3, #3
 8016274:	b2d2      	uxtb	r2, r2
 8016276:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	681a      	ldr	r2, [r3, #0]
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	011b      	lsls	r3, r3, #4
 8016280:	4413      	add	r3, r2
 8016282:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8016286:	681a      	ldr	r2, [r3, #0]
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	3304      	adds	r3, #4
 801628c:	b2d2      	uxtb	r2, r2
 801628e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	681a      	ldr	r2, [r3, #0]
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	011b      	lsls	r3, r3, #4
 8016298:	4413      	add	r3, r2
 801629a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	0a1a      	lsrs	r2, r3, #8
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	3305      	adds	r3, #5
 80162a6:	b2d2      	uxtb	r2, r2
 80162a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	011b      	lsls	r3, r3, #4
 80162b2:	4413      	add	r3, r2
 80162b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	0c1a      	lsrs	r2, r3, #16
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	3306      	adds	r3, #6
 80162c0:	b2d2      	uxtb	r2, r2
 80162c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	681a      	ldr	r2, [r3, #0]
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	011b      	lsls	r3, r3, #4
 80162cc:	4413      	add	r3, r2
 80162ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	0e1a      	lsrs	r2, r3, #24
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	3307      	adds	r3, #7
 80162da:	b2d2      	uxtb	r2, r2
 80162dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d108      	bne.n	80162f6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	68da      	ldr	r2, [r3, #12]
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	f042 0220 	orr.w	r2, r2, #32
 80162f2:	60da      	str	r2, [r3, #12]
 80162f4:	e007      	b.n	8016306 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	691a      	ldr	r2, [r3, #16]
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f042 0220 	orr.w	r2, r2, #32
 8016304:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8016306:	2300      	movs	r3, #0
 8016308:	e006      	b.n	8016318 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016316:	2301      	movs	r3, #1
  }
}
 8016318:	4618      	mov	r0, r3
 801631a:	371c      	adds	r7, #28
 801631c:	46bd      	mov	sp, r7
 801631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016322:	4770      	bx	lr

08016324 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8016324:	b480      	push	{r7}
 8016326:	b085      	sub	sp, #20
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016334:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8016336:	7bfb      	ldrb	r3, [r7, #15]
 8016338:	2b01      	cmp	r3, #1
 801633a:	d002      	beq.n	8016342 <HAL_CAN_ActivateNotification+0x1e>
 801633c:	7bfb      	ldrb	r3, [r7, #15]
 801633e:	2b02      	cmp	r3, #2
 8016340:	d109      	bne.n	8016356 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	6959      	ldr	r1, [r3, #20]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	683a      	ldr	r2, [r7, #0]
 801634e:	430a      	orrs	r2, r1
 8016350:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8016352:	2300      	movs	r3, #0
 8016354:	e006      	b.n	8016364 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801635a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016362:	2301      	movs	r3, #1
  }
}
 8016364:	4618      	mov	r0, r3
 8016366:	3714      	adds	r7, #20
 8016368:	46bd      	mov	sp, r7
 801636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636e:	4770      	bx	lr

08016370 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b08a      	sub	sp, #40	; 0x28
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8016378:	2300      	movs	r3, #0
 801637a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	695b      	ldr	r3, [r3, #20]
 8016382:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	685b      	ldr	r3, [r3, #4]
 801638a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	689b      	ldr	r3, [r3, #8]
 8016392:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	68db      	ldr	r3, [r3, #12]
 801639a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	691b      	ldr	r3, [r3, #16]
 80163a2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	699b      	ldr	r3, [r3, #24]
 80163aa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80163ac:	6a3b      	ldr	r3, [r7, #32]
 80163ae:	f003 0301 	and.w	r3, r3, #1
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d07c      	beq.n	80164b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80163b6:	69bb      	ldr	r3, [r7, #24]
 80163b8:	f003 0301 	and.w	r3, r3, #1
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d023      	beq.n	8016408 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	2201      	movs	r2, #1
 80163c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80163c8:	69bb      	ldr	r3, [r7, #24]
 80163ca:	f003 0302 	and.w	r3, r3, #2
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d003      	beq.n	80163da <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f000 f983 	bl	80166de <HAL_CAN_TxMailbox0CompleteCallback>
 80163d8:	e016      	b.n	8016408 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80163da:	69bb      	ldr	r3, [r7, #24]
 80163dc:	f003 0304 	and.w	r3, r3, #4
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d004      	beq.n	80163ee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80163e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80163ea:	627b      	str	r3, [r7, #36]	; 0x24
 80163ec:	e00c      	b.n	8016408 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80163ee:	69bb      	ldr	r3, [r7, #24]
 80163f0:	f003 0308 	and.w	r3, r3, #8
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d004      	beq.n	8016402 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80163fe:	627b      	str	r3, [r7, #36]	; 0x24
 8016400:	e002      	b.n	8016408 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f000 f989 	bl	801671a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801640e:	2b00      	cmp	r3, #0
 8016410:	d024      	beq.n	801645c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	f44f 7280 	mov.w	r2, #256	; 0x100
 801641a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801641c:	69bb      	ldr	r3, [r7, #24]
 801641e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016422:	2b00      	cmp	r3, #0
 8016424:	d003      	beq.n	801642e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f000 f963 	bl	80166f2 <HAL_CAN_TxMailbox1CompleteCallback>
 801642c:	e016      	b.n	801645c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016434:	2b00      	cmp	r3, #0
 8016436:	d004      	beq.n	8016442 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8016438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801643e:	627b      	str	r3, [r7, #36]	; 0x24
 8016440:	e00c      	b.n	801645c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8016442:	69bb      	ldr	r3, [r7, #24]
 8016444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016448:	2b00      	cmp	r3, #0
 801644a:	d004      	beq.n	8016456 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 801644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801644e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016452:	627b      	str	r3, [r7, #36]	; 0x24
 8016454:	e002      	b.n	801645c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8016456:	6878      	ldr	r0, [r7, #4]
 8016458:	f000 f969 	bl	801672e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801645c:	69bb      	ldr	r3, [r7, #24]
 801645e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016462:	2b00      	cmp	r3, #0
 8016464:	d024      	beq.n	80164b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801646e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8016470:	69bb      	ldr	r3, [r7, #24]
 8016472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016476:	2b00      	cmp	r3, #0
 8016478:	d003      	beq.n	8016482 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f000 f943 	bl	8016706 <HAL_CAN_TxMailbox2CompleteCallback>
 8016480:	e016      	b.n	80164b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8016482:	69bb      	ldr	r3, [r7, #24]
 8016484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016488:	2b00      	cmp	r3, #0
 801648a:	d004      	beq.n	8016496 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016492:	627b      	str	r3, [r7, #36]	; 0x24
 8016494:	e00c      	b.n	80164b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8016496:	69bb      	ldr	r3, [r7, #24]
 8016498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801649c:	2b00      	cmp	r3, #0
 801649e:	d004      	beq.n	80164aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80164a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80164a6:	627b      	str	r3, [r7, #36]	; 0x24
 80164a8:	e002      	b.n	80164b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f000 f949 	bl	8016742 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80164b0:	6a3b      	ldr	r3, [r7, #32]
 80164b2:	f003 0308 	and.w	r3, r3, #8
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d00c      	beq.n	80164d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	f003 0310 	and.w	r3, r3, #16
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d007      	beq.n	80164d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80164c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80164ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2210      	movs	r2, #16
 80164d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80164d4:	6a3b      	ldr	r3, [r7, #32]
 80164d6:	f003 0304 	and.w	r3, r3, #4
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d00b      	beq.n	80164f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80164de:	697b      	ldr	r3, [r7, #20]
 80164e0:	f003 0308 	and.w	r3, r3, #8
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d006      	beq.n	80164f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2208      	movs	r2, #8
 80164ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f000 f930 	bl	8016756 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80164f6:	6a3b      	ldr	r3, [r7, #32]
 80164f8:	f003 0302 	and.w	r3, r3, #2
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d009      	beq.n	8016514 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	f003 0303 	and.w	r3, r3, #3
 801650a:	2b00      	cmp	r3, #0
 801650c:	d002      	beq.n	8016514 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f7f5 fc70 	bl	800bdf4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8016514:	6a3b      	ldr	r3, [r7, #32]
 8016516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00c      	beq.n	8016538 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	f003 0310 	and.w	r3, r3, #16
 8016524:	2b00      	cmp	r3, #0
 8016526:	d007      	beq.n	8016538 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8016528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801652e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2210      	movs	r2, #16
 8016536:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8016538:	6a3b      	ldr	r3, [r7, #32]
 801653a:	f003 0320 	and.w	r3, r3, #32
 801653e:	2b00      	cmp	r3, #0
 8016540:	d00b      	beq.n	801655a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	f003 0308 	and.w	r3, r3, #8
 8016548:	2b00      	cmp	r3, #0
 801654a:	d006      	beq.n	801655a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2208      	movs	r2, #8
 8016552:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f000 f908 	bl	801676a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801655a:	6a3b      	ldr	r3, [r7, #32]
 801655c:	f003 0310 	and.w	r3, r3, #16
 8016560:	2b00      	cmp	r3, #0
 8016562:	d009      	beq.n	8016578 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	691b      	ldr	r3, [r3, #16]
 801656a:	f003 0303 	and.w	r3, r3, #3
 801656e:	2b00      	cmp	r3, #0
 8016570:	d002      	beq.n	8016578 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7f5 fdce 	bl	800c114 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8016578:	6a3b      	ldr	r3, [r7, #32]
 801657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801657e:	2b00      	cmp	r3, #0
 8016580:	d00b      	beq.n	801659a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8016582:	69fb      	ldr	r3, [r7, #28]
 8016584:	f003 0310 	and.w	r3, r3, #16
 8016588:	2b00      	cmp	r3, #0
 801658a:	d006      	beq.n	801659a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	2210      	movs	r2, #16
 8016592:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f000 f8f2 	bl	801677e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801659a:	6a3b      	ldr	r3, [r7, #32]
 801659c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d00b      	beq.n	80165bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80165a4:	69fb      	ldr	r3, [r7, #28]
 80165a6:	f003 0308 	and.w	r3, r3, #8
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d006      	beq.n	80165bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	2208      	movs	r2, #8
 80165b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f000 f8eb 	bl	8016792 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80165bc:	6a3b      	ldr	r3, [r7, #32]
 80165be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d07b      	beq.n	80166be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	f003 0304 	and.w	r3, r3, #4
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d072      	beq.n	80166b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80165d0:	6a3b      	ldr	r3, [r7, #32]
 80165d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d008      	beq.n	80165ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d003      	beq.n	80165ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80165e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e6:	f043 0301 	orr.w	r3, r3, #1
 80165ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80165ec:	6a3b      	ldr	r3, [r7, #32]
 80165ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d008      	beq.n	8016608 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d003      	beq.n	8016608 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8016600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016602:	f043 0302 	orr.w	r3, r3, #2
 8016606:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8016608:	6a3b      	ldr	r3, [r7, #32]
 801660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801660e:	2b00      	cmp	r3, #0
 8016610:	d008      	beq.n	8016624 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8016618:	2b00      	cmp	r3, #0
 801661a:	d003      	beq.n	8016624 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661e:	f043 0304 	orr.w	r3, r3, #4
 8016622:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016624:	6a3b      	ldr	r3, [r7, #32]
 8016626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801662a:	2b00      	cmp	r3, #0
 801662c:	d043      	beq.n	80166b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016634:	2b00      	cmp	r3, #0
 8016636:	d03e      	beq.n	80166b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801663e:	2b60      	cmp	r3, #96	; 0x60
 8016640:	d02b      	beq.n	801669a <HAL_CAN_IRQHandler+0x32a>
 8016642:	2b60      	cmp	r3, #96	; 0x60
 8016644:	d82e      	bhi.n	80166a4 <HAL_CAN_IRQHandler+0x334>
 8016646:	2b50      	cmp	r3, #80	; 0x50
 8016648:	d022      	beq.n	8016690 <HAL_CAN_IRQHandler+0x320>
 801664a:	2b50      	cmp	r3, #80	; 0x50
 801664c:	d82a      	bhi.n	80166a4 <HAL_CAN_IRQHandler+0x334>
 801664e:	2b40      	cmp	r3, #64	; 0x40
 8016650:	d019      	beq.n	8016686 <HAL_CAN_IRQHandler+0x316>
 8016652:	2b40      	cmp	r3, #64	; 0x40
 8016654:	d826      	bhi.n	80166a4 <HAL_CAN_IRQHandler+0x334>
 8016656:	2b30      	cmp	r3, #48	; 0x30
 8016658:	d010      	beq.n	801667c <HAL_CAN_IRQHandler+0x30c>
 801665a:	2b30      	cmp	r3, #48	; 0x30
 801665c:	d822      	bhi.n	80166a4 <HAL_CAN_IRQHandler+0x334>
 801665e:	2b10      	cmp	r3, #16
 8016660:	d002      	beq.n	8016668 <HAL_CAN_IRQHandler+0x2f8>
 8016662:	2b20      	cmp	r3, #32
 8016664:	d005      	beq.n	8016672 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8016666:	e01d      	b.n	80166a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8016668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666a:	f043 0308 	orr.w	r3, r3, #8
 801666e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016670:	e019      	b.n	80166a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8016672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016674:	f043 0310 	orr.w	r3, r3, #16
 8016678:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801667a:	e014      	b.n	80166a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 801667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667e:	f043 0320 	orr.w	r3, r3, #32
 8016682:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016684:	e00f      	b.n	80166a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8016686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801668c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801668e:	e00a      	b.n	80166a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8016690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016696:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016698:	e005      	b.n	80166a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 801669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80166a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80166a2:	e000      	b.n	80166a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80166a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	699a      	ldr	r2, [r3, #24]
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80166b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2204      	movs	r2, #4
 80166bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80166be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d008      	beq.n	80166d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80166c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ca:	431a      	orrs	r2, r3
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f000 f868 	bl	80167a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80166d6:	bf00      	nop
 80166d8:	3728      	adds	r7, #40	; 0x28
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80166de:	b480      	push	{r7}
 80166e0:	b083      	sub	sp, #12
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80166e6:	bf00      	nop
 80166e8:	370c      	adds	r7, #12
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr

080166f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80166f2:	b480      	push	{r7}
 80166f4:	b083      	sub	sp, #12
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80166fa:	bf00      	nop
 80166fc:	370c      	adds	r7, #12
 80166fe:	46bd      	mov	sp, r7
 8016700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016704:	4770      	bx	lr

08016706 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016706:	b480      	push	{r7}
 8016708:	b083      	sub	sp, #12
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr

0801671a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801671a:	b480      	push	{r7}
 801671c:	b083      	sub	sp, #12
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8016722:	bf00      	nop
 8016724:	370c      	adds	r7, #12
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr

0801672e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801672e:	b480      	push	{r7}
 8016730:	b083      	sub	sp, #12
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8016736:	bf00      	nop
 8016738:	370c      	adds	r7, #12
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr

08016742 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016742:	b480      	push	{r7}
 8016744:	b083      	sub	sp, #12
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801674a:	bf00      	nop
 801674c:	370c      	adds	r7, #12
 801674e:	46bd      	mov	sp, r7
 8016750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016754:	4770      	bx	lr

08016756 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8016756:	b480      	push	{r7}
 8016758:	b083      	sub	sp, #12
 801675a:	af00      	add	r7, sp, #0
 801675c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801675e:	bf00      	nop
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr

0801676a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801676a:	b480      	push	{r7}
 801676c:	b083      	sub	sp, #12
 801676e:	af00      	add	r7, sp, #0
 8016770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8016772:	bf00      	nop
 8016774:	370c      	adds	r7, #12
 8016776:	46bd      	mov	sp, r7
 8016778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677c:	4770      	bx	lr

0801677e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801677e:	b480      	push	{r7}
 8016780:	b083      	sub	sp, #12
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8016786:	bf00      	nop
 8016788:	370c      	adds	r7, #12
 801678a:	46bd      	mov	sp, r7
 801678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016790:	4770      	bx	lr

08016792 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8016792:	b480      	push	{r7}
 8016794:	b083      	sub	sp, #12
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801679a:	bf00      	nop
 801679c:	370c      	adds	r7, #12
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr

080167a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80167a6:	b480      	push	{r7}
 80167a8:	b083      	sub	sp, #12
 80167aa:	af00      	add	r7, sp, #0
 80167ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80167ae:	bf00      	nop
 80167b0:	370c      	adds	r7, #12
 80167b2:	46bd      	mov	sp, r7
 80167b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b8:	4770      	bx	lr
	...

080167bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80167bc:	b480      	push	{r7}
 80167be:	b085      	sub	sp, #20
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f003 0307 	and.w	r3, r3, #7
 80167ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80167cc:	4b0c      	ldr	r3, [pc, #48]	; (8016800 <__NVIC_SetPriorityGrouping+0x44>)
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80167d2:	68ba      	ldr	r2, [r7, #8]
 80167d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80167d8:	4013      	ands	r3, r2
 80167da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80167e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80167e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80167ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80167ee:	4a04      	ldr	r2, [pc, #16]	; (8016800 <__NVIC_SetPriorityGrouping+0x44>)
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	60d3      	str	r3, [r2, #12]
}
 80167f4:	bf00      	nop
 80167f6:	3714      	adds	r7, #20
 80167f8:	46bd      	mov	sp, r7
 80167fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fe:	4770      	bx	lr
 8016800:	e000ed00 	.word	0xe000ed00

08016804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016804:	b480      	push	{r7}
 8016806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016808:	4b04      	ldr	r3, [pc, #16]	; (801681c <__NVIC_GetPriorityGrouping+0x18>)
 801680a:	68db      	ldr	r3, [r3, #12]
 801680c:	0a1b      	lsrs	r3, r3, #8
 801680e:	f003 0307 	and.w	r3, r3, #7
}
 8016812:	4618      	mov	r0, r3
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr
 801681c:	e000ed00 	.word	0xe000ed00

08016820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016820:	b480      	push	{r7}
 8016822:	b083      	sub	sp, #12
 8016824:	af00      	add	r7, sp, #0
 8016826:	4603      	mov	r3, r0
 8016828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801682a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801682e:	2b00      	cmp	r3, #0
 8016830:	db0b      	blt.n	801684a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016832:	79fb      	ldrb	r3, [r7, #7]
 8016834:	f003 021f 	and.w	r2, r3, #31
 8016838:	4907      	ldr	r1, [pc, #28]	; (8016858 <__NVIC_EnableIRQ+0x38>)
 801683a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801683e:	095b      	lsrs	r3, r3, #5
 8016840:	2001      	movs	r0, #1
 8016842:	fa00 f202 	lsl.w	r2, r0, r2
 8016846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801684a:	bf00      	nop
 801684c:	370c      	adds	r7, #12
 801684e:	46bd      	mov	sp, r7
 8016850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	e000e100 	.word	0xe000e100

0801685c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801685c:	b480      	push	{r7}
 801685e:	b083      	sub	sp, #12
 8016860:	af00      	add	r7, sp, #0
 8016862:	4603      	mov	r3, r0
 8016864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801686a:	2b00      	cmp	r3, #0
 801686c:	db12      	blt.n	8016894 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801686e:	79fb      	ldrb	r3, [r7, #7]
 8016870:	f003 021f 	and.w	r2, r3, #31
 8016874:	490a      	ldr	r1, [pc, #40]	; (80168a0 <__NVIC_DisableIRQ+0x44>)
 8016876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801687a:	095b      	lsrs	r3, r3, #5
 801687c:	2001      	movs	r0, #1
 801687e:	fa00 f202 	lsl.w	r2, r0, r2
 8016882:	3320      	adds	r3, #32
 8016884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8016888:	f3bf 8f4f 	dsb	sy
}
 801688c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801688e:	f3bf 8f6f 	isb	sy
}
 8016892:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8016894:	bf00      	nop
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr
 80168a0:	e000e100 	.word	0xe000e100

080168a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80168a4:	b480      	push	{r7}
 80168a6:	b083      	sub	sp, #12
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	4603      	mov	r3, r0
 80168ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80168ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	db0c      	blt.n	80168d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80168b6:	79fb      	ldrb	r3, [r7, #7]
 80168b8:	f003 021f 	and.w	r2, r3, #31
 80168bc:	4907      	ldr	r1, [pc, #28]	; (80168dc <__NVIC_ClearPendingIRQ+0x38>)
 80168be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168c2:	095b      	lsrs	r3, r3, #5
 80168c4:	2001      	movs	r0, #1
 80168c6:	fa00 f202 	lsl.w	r2, r0, r2
 80168ca:	3360      	adds	r3, #96	; 0x60
 80168cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80168d0:	bf00      	nop
 80168d2:	370c      	adds	r7, #12
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr
 80168dc:	e000e100 	.word	0xe000e100

080168e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b083      	sub	sp, #12
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	4603      	mov	r3, r0
 80168e8:	6039      	str	r1, [r7, #0]
 80168ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80168ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	db0a      	blt.n	801690a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	b2da      	uxtb	r2, r3
 80168f8:	490c      	ldr	r1, [pc, #48]	; (801692c <__NVIC_SetPriority+0x4c>)
 80168fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168fe:	0112      	lsls	r2, r2, #4
 8016900:	b2d2      	uxtb	r2, r2
 8016902:	440b      	add	r3, r1
 8016904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016908:	e00a      	b.n	8016920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	b2da      	uxtb	r2, r3
 801690e:	4908      	ldr	r1, [pc, #32]	; (8016930 <__NVIC_SetPriority+0x50>)
 8016910:	79fb      	ldrb	r3, [r7, #7]
 8016912:	f003 030f 	and.w	r3, r3, #15
 8016916:	3b04      	subs	r3, #4
 8016918:	0112      	lsls	r2, r2, #4
 801691a:	b2d2      	uxtb	r2, r2
 801691c:	440b      	add	r3, r1
 801691e:	761a      	strb	r2, [r3, #24]
}
 8016920:	bf00      	nop
 8016922:	370c      	adds	r7, #12
 8016924:	46bd      	mov	sp, r7
 8016926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692a:	4770      	bx	lr
 801692c:	e000e100 	.word	0xe000e100
 8016930:	e000ed00 	.word	0xe000ed00

08016934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016934:	b480      	push	{r7}
 8016936:	b089      	sub	sp, #36	; 0x24
 8016938:	af00      	add	r7, sp, #0
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	f003 0307 	and.w	r3, r3, #7
 8016946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	f1c3 0307 	rsb	r3, r3, #7
 801694e:	2b04      	cmp	r3, #4
 8016950:	bf28      	it	cs
 8016952:	2304      	movcs	r3, #4
 8016954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	3304      	adds	r3, #4
 801695a:	2b06      	cmp	r3, #6
 801695c:	d902      	bls.n	8016964 <NVIC_EncodePriority+0x30>
 801695e:	69fb      	ldr	r3, [r7, #28]
 8016960:	3b03      	subs	r3, #3
 8016962:	e000      	b.n	8016966 <NVIC_EncodePriority+0x32>
 8016964:	2300      	movs	r3, #0
 8016966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	fa02 f303 	lsl.w	r3, r2, r3
 8016972:	43da      	mvns	r2, r3
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	401a      	ands	r2, r3
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801697c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	fa01 f303 	lsl.w	r3, r1, r3
 8016986:	43d9      	mvns	r1, r3
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801698c:	4313      	orrs	r3, r2
         );
}
 801698e:	4618      	mov	r0, r3
 8016990:	3724      	adds	r7, #36	; 0x24
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr

0801699a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801699a:	b580      	push	{r7, lr}
 801699c:	b082      	sub	sp, #8
 801699e:	af00      	add	r7, sp, #0
 80169a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f7ff ff0a 	bl	80167bc <__NVIC_SetPriorityGrouping>
}
 80169a8:	bf00      	nop
 80169aa:	3708      	adds	r7, #8
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b086      	sub	sp, #24
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	4603      	mov	r3, r0
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
 80169bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80169be:	2300      	movs	r3, #0
 80169c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80169c2:	f7ff ff1f 	bl	8016804 <__NVIC_GetPriorityGrouping>
 80169c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80169c8:	687a      	ldr	r2, [r7, #4]
 80169ca:	68b9      	ldr	r1, [r7, #8]
 80169cc:	6978      	ldr	r0, [r7, #20]
 80169ce:	f7ff ffb1 	bl	8016934 <NVIC_EncodePriority>
 80169d2:	4602      	mov	r2, r0
 80169d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169d8:	4611      	mov	r1, r2
 80169da:	4618      	mov	r0, r3
 80169dc:	f7ff ff80 	bl	80168e0 <__NVIC_SetPriority>
}
 80169e0:	bf00      	nop
 80169e2:	3718      	adds	r7, #24
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b082      	sub	sp, #8
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	4603      	mov	r3, r0
 80169f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80169f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7ff ff12 	bl	8016820 <__NVIC_EnableIRQ>
}
 80169fc:	bf00      	nop
 80169fe:	3708      	adds	r7, #8
 8016a00:	46bd      	mov	sp, r7
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8016a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7ff ff22 	bl	801685c <__NVIC_DisableIRQ>
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	4603      	mov	r3, r0
 8016a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8016a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f7ff ff38 	bl	80168a4 <__NVIC_ClearPendingIRQ>
}
 8016a34:	bf00      	nop
 8016a36:	3708      	adds	r7, #8
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}

08016a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b086      	sub	sp, #24
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016a44:	2300      	movs	r3, #0
 8016a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016a48:	f7ff f81e 	bl	8015a88 <HAL_GetTick>
 8016a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d101      	bne.n	8016a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016a54:	2301      	movs	r3, #1
 8016a56:	e099      	b.n	8016b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2202      	movs	r2, #2
 8016a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	f022 0201 	bic.w	r2, r2, #1
 8016a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a78:	e00f      	b.n	8016a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016a7a:	f7ff f805 	bl	8015a88 <HAL_GetTick>
 8016a7e:	4602      	mov	r2, r0
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	1ad3      	subs	r3, r2, r3
 8016a84:	2b05      	cmp	r3, #5
 8016a86:	d908      	bls.n	8016a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2220      	movs	r2, #32
 8016a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2203      	movs	r2, #3
 8016a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016a96:	2303      	movs	r3, #3
 8016a98:	e078      	b.n	8016b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	f003 0301 	and.w	r3, r3, #1
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d1e8      	bne.n	8016a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016ab0:	697a      	ldr	r2, [r7, #20]
 8016ab2:	4b38      	ldr	r3, [pc, #224]	; (8016b94 <HAL_DMA_Init+0x158>)
 8016ab4:	4013      	ands	r3, r2
 8016ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	685a      	ldr	r2, [r3, #4]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	689b      	ldr	r3, [r3, #8]
 8016ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	691b      	ldr	r3, [r3, #16]
 8016acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	699b      	ldr	r3, [r3, #24]
 8016ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6a1b      	ldr	r3, [r3, #32]
 8016ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016ae6:	697a      	ldr	r2, [r7, #20]
 8016ae8:	4313      	orrs	r3, r2
 8016aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016af0:	2b04      	cmp	r3, #4
 8016af2:	d107      	bne.n	8016b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016afc:	4313      	orrs	r3, r2
 8016afe:	697a      	ldr	r2, [r7, #20]
 8016b00:	4313      	orrs	r3, r2
 8016b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	697a      	ldr	r2, [r7, #20]
 8016b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	695b      	ldr	r3, [r3, #20]
 8016b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	f023 0307 	bic.w	r3, r3, #7
 8016b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b20:	697a      	ldr	r2, [r7, #20]
 8016b22:	4313      	orrs	r3, r2
 8016b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b2a:	2b04      	cmp	r3, #4
 8016b2c:	d117      	bne.n	8016b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b32:	697a      	ldr	r2, [r7, #20]
 8016b34:	4313      	orrs	r3, r2
 8016b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00e      	beq.n	8016b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f000 fb09 	bl	8017158 <DMA_CheckFifoParam>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d008      	beq.n	8016b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2240      	movs	r2, #64	; 0x40
 8016b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2201      	movs	r2, #1
 8016b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	e016      	b.n	8016b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	697a      	ldr	r2, [r7, #20]
 8016b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016b66:	6878      	ldr	r0, [r7, #4]
 8016b68:	f000 fac0 	bl	80170ec <DMA_CalcBaseAndBitshift>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b74:	223f      	movs	r2, #63	; 0x3f
 8016b76:	409a      	lsls	r2, r3
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2200      	movs	r2, #0
 8016b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2201      	movs	r2, #1
 8016b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016b8a:	2300      	movs	r3, #0
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3718      	adds	r7, #24
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}
 8016b94:	f010803f 	.word	0xf010803f

08016b98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b084      	sub	sp, #16
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d101      	bne.n	8016baa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8016ba6:	2301      	movs	r3, #1
 8016ba8:	e050      	b.n	8016c4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016bb0:	b2db      	uxtb	r3, r3
 8016bb2:	2b02      	cmp	r3, #2
 8016bb4:	d101      	bne.n	8016bba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8016bb6:	2302      	movs	r3, #2
 8016bb8:	e048      	b.n	8016c4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	681a      	ldr	r2, [r3, #0]
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f022 0201 	bic.w	r2, r2, #1
 8016bc8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	2200      	movs	r2, #0
 8016bd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2200      	movs	r2, #0
 8016be0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2200      	movs	r2, #0
 8016be8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2200      	movs	r2, #0
 8016bf0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	2221      	movs	r2, #33	; 0x21
 8016bf8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fa76 	bl	80170ec <DMA_CalcBaseAndBitshift>
 8016c00:	4603      	mov	r3, r0
 8016c02:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2200      	movs	r2, #0
 8016c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2200      	movs	r2, #0
 8016c14:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2200      	movs	r2, #0
 8016c1a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2200      	movs	r2, #0
 8016c26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016c2c:	223f      	movs	r2, #63	; 0x3f
 8016c2e:	409a      	lsls	r2, r3
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2200      	movs	r2, #0
 8016c38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2200      	movs	r2, #0
 8016c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8016c4a:	2300      	movs	r3, #0
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3710      	adds	r7, #16
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	60f8      	str	r0, [r7, #12]
 8016c5c:	60b9      	str	r1, [r7, #8]
 8016c5e:	607a      	str	r2, [r7, #4]
 8016c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016c62:	2300      	movs	r3, #0
 8016c64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016c72:	2b01      	cmp	r3, #1
 8016c74:	d101      	bne.n	8016c7a <HAL_DMA_Start_IT+0x26>
 8016c76:	2302      	movs	r3, #2
 8016c78:	e040      	b.n	8016cfc <HAL_DMA_Start_IT+0xa8>
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	2201      	movs	r2, #1
 8016c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c88:	b2db      	uxtb	r3, r3
 8016c8a:	2b01      	cmp	r3, #1
 8016c8c:	d12f      	bne.n	8016cee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	2202      	movs	r2, #2
 8016c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	68b9      	ldr	r1, [r7, #8]
 8016ca2:	68f8      	ldr	r0, [r7, #12]
 8016ca4:	f000 f9f4 	bl	8017090 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cac:	223f      	movs	r2, #63	; 0x3f
 8016cae:	409a      	lsls	r2, r3
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	681a      	ldr	r2, [r3, #0]
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	f042 0216 	orr.w	r2, r2, #22
 8016cc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d007      	beq.n	8016cdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	f042 0208 	orr.w	r2, r2, #8
 8016cda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	681a      	ldr	r2, [r3, #0]
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	f042 0201 	orr.w	r2, r2, #1
 8016cea:	601a      	str	r2, [r3, #0]
 8016cec:	e005      	b.n	8016cfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8016cf6:	2302      	movs	r3, #2
 8016cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3718      	adds	r7, #24
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016d04:	b480      	push	{r7}
 8016d06:	b083      	sub	sp, #12
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	2b02      	cmp	r3, #2
 8016d16:	d004      	beq.n	8016d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	2280      	movs	r2, #128	; 0x80
 8016d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016d1e:	2301      	movs	r3, #1
 8016d20:	e00c      	b.n	8016d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	2205      	movs	r2, #5
 8016d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	681a      	ldr	r2, [r3, #0]
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	f022 0201 	bic.w	r2, r2, #1
 8016d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016d3a:	2300      	movs	r3, #0
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	370c      	adds	r7, #12
 8016d40:	46bd      	mov	sp, r7
 8016d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d46:	4770      	bx	lr

08016d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b086      	sub	sp, #24
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016d50:	2300      	movs	r3, #0
 8016d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016d54:	4b92      	ldr	r3, [pc, #584]	; (8016fa0 <HAL_DMA_IRQHandler+0x258>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	4a92      	ldr	r2, [pc, #584]	; (8016fa4 <HAL_DMA_IRQHandler+0x25c>)
 8016d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8016d5e:	0a9b      	lsrs	r3, r3, #10
 8016d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016d68:	693b      	ldr	r3, [r7, #16]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d72:	2208      	movs	r2, #8
 8016d74:	409a      	lsls	r2, r3
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	4013      	ands	r3, r2
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d01a      	beq.n	8016db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f003 0304 	and.w	r3, r3, #4
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d013      	beq.n	8016db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	681a      	ldr	r2, [r3, #0]
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	f022 0204 	bic.w	r2, r2, #4
 8016d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016da0:	2208      	movs	r2, #8
 8016da2:	409a      	lsls	r2, r3
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016dac:	f043 0201 	orr.w	r2, r3, #1
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016db8:	2201      	movs	r2, #1
 8016dba:	409a      	lsls	r2, r3
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	4013      	ands	r3, r2
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d012      	beq.n	8016dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	695b      	ldr	r3, [r3, #20]
 8016dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d00b      	beq.n	8016dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016dd6:	2201      	movs	r2, #1
 8016dd8:	409a      	lsls	r2, r3
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016de2:	f043 0202 	orr.w	r2, r3, #2
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016dee:	2204      	movs	r2, #4
 8016df0:	409a      	lsls	r2, r3
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	4013      	ands	r3, r2
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d012      	beq.n	8016e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f003 0302 	and.w	r3, r3, #2
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d00b      	beq.n	8016e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e0c:	2204      	movs	r2, #4
 8016e0e:	409a      	lsls	r2, r3
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e18:	f043 0204 	orr.w	r2, r3, #4
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e24:	2210      	movs	r2, #16
 8016e26:	409a      	lsls	r2, r3
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	4013      	ands	r3, r2
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d043      	beq.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	f003 0308 	and.w	r3, r3, #8
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d03c      	beq.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e42:	2210      	movs	r2, #16
 8016e44:	409a      	lsls	r2, r3
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d018      	beq.n	8016e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d108      	bne.n	8016e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d024      	beq.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e72:	6878      	ldr	r0, [r7, #4]
 8016e74:	4798      	blx	r3
 8016e76:	e01f      	b.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d01b      	beq.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e84:	6878      	ldr	r0, [r7, #4]
 8016e86:	4798      	blx	r3
 8016e88:	e016      	b.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d107      	bne.n	8016ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	681a      	ldr	r2, [r3, #0]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	f022 0208 	bic.w	r2, r2, #8
 8016ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d003      	beq.n	8016eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ebc:	2220      	movs	r2, #32
 8016ebe:	409a      	lsls	r2, r3
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	4013      	ands	r3, r2
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	f000 808e 	beq.w	8016fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	f003 0310 	and.w	r3, r3, #16
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f000 8086 	beq.w	8016fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ede:	2220      	movs	r2, #32
 8016ee0:	409a      	lsls	r2, r3
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016eec:	b2db      	uxtb	r3, r3
 8016eee:	2b05      	cmp	r3, #5
 8016ef0:	d136      	bne.n	8016f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	681a      	ldr	r2, [r3, #0]
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	f022 0216 	bic.w	r2, r2, #22
 8016f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	695a      	ldr	r2, [r3, #20]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d103      	bne.n	8016f22 <HAL_DMA_IRQHandler+0x1da>
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d007      	beq.n	8016f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	681a      	ldr	r2, [r3, #0]
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f022 0208 	bic.w	r2, r2, #8
 8016f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f36:	223f      	movs	r2, #63	; 0x3f
 8016f38:	409a      	lsls	r2, r3
 8016f3a:	693b      	ldr	r3, [r7, #16]
 8016f3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2200      	movs	r2, #0
 8016f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	2201      	movs	r2, #1
 8016f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d07d      	beq.n	8017052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	4798      	blx	r3
        }
        return;
 8016f5e:	e078      	b.n	8017052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d01c      	beq.n	8016fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d108      	bne.n	8016f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d030      	beq.n	8016fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	4798      	blx	r3
 8016f8c:	e02b      	b.n	8016fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d027      	beq.n	8016fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f9a:	6878      	ldr	r0, [r7, #4]
 8016f9c:	4798      	blx	r3
 8016f9e:	e022      	b.n	8016fe6 <HAL_DMA_IRQHandler+0x29e>
 8016fa0:	20000054 	.word	0x20000054
 8016fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d10f      	bne.n	8016fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	681a      	ldr	r2, [r3, #0]
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	f022 0210 	bic.w	r2, r2, #16
 8016fc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	2200      	movs	r2, #0
 8016fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2201      	movs	r2, #1
 8016fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d003      	beq.n	8016fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fe2:	6878      	ldr	r0, [r7, #4]
 8016fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d032      	beq.n	8017054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ff2:	f003 0301 	and.w	r3, r3, #1
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d022      	beq.n	8017040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2205      	movs	r2, #5
 8016ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	681a      	ldr	r2, [r3, #0]
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	f022 0201 	bic.w	r2, r2, #1
 8017010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	3301      	adds	r3, #1
 8017016:	60bb      	str	r3, [r7, #8]
 8017018:	697a      	ldr	r2, [r7, #20]
 801701a:	429a      	cmp	r2, r3
 801701c:	d307      	bcc.n	801702e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	f003 0301 	and.w	r3, r3, #1
 8017028:	2b00      	cmp	r3, #0
 801702a:	d1f2      	bne.n	8017012 <HAL_DMA_IRQHandler+0x2ca>
 801702c:	e000      	b.n	8017030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801702e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2200      	movs	r2, #0
 8017034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	2201      	movs	r2, #1
 801703c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017044:	2b00      	cmp	r3, #0
 8017046:	d005      	beq.n	8017054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	4798      	blx	r3
 8017050:	e000      	b.n	8017054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8017052:	bf00      	nop
    }
  }
}
 8017054:	3718      	adds	r7, #24
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}
 801705a:	bf00      	nop

0801705c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801705c:	b480      	push	{r7}
 801705e:	b083      	sub	sp, #12
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801706a:	b2db      	uxtb	r3, r3
}
 801706c:	4618      	mov	r0, r3
 801706e:	370c      	adds	r7, #12
 8017070:	46bd      	mov	sp, r7
 8017072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017076:	4770      	bx	lr

08017078 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8017078:	b480      	push	{r7}
 801707a:	b083      	sub	sp, #12
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8017084:	4618      	mov	r0, r3
 8017086:	370c      	adds	r7, #12
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr

08017090 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017090:	b480      	push	{r7}
 8017092:	b085      	sub	sp, #20
 8017094:	af00      	add	r7, sp, #0
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	60b9      	str	r1, [r7, #8]
 801709a:	607a      	str	r2, [r7, #4]
 801709c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80170ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	683a      	ldr	r2, [r7, #0]
 80170b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	689b      	ldr	r3, [r3, #8]
 80170ba:	2b40      	cmp	r3, #64	; 0x40
 80170bc:	d108      	bne.n	80170d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	687a      	ldr	r2, [r7, #4]
 80170c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	68ba      	ldr	r2, [r7, #8]
 80170cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80170ce:	e007      	b.n	80170e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	68ba      	ldr	r2, [r7, #8]
 80170d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	687a      	ldr	r2, [r7, #4]
 80170de:	60da      	str	r2, [r3, #12]
}
 80170e0:	bf00      	nop
 80170e2:	3714      	adds	r7, #20
 80170e4:	46bd      	mov	sp, r7
 80170e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ea:	4770      	bx	lr

080170ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80170ec:	b480      	push	{r7}
 80170ee:	b085      	sub	sp, #20
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	3b10      	subs	r3, #16
 80170fc:	4a14      	ldr	r2, [pc, #80]	; (8017150 <DMA_CalcBaseAndBitshift+0x64>)
 80170fe:	fba2 2303 	umull	r2, r3, r2, r3
 8017102:	091b      	lsrs	r3, r3, #4
 8017104:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8017106:	4a13      	ldr	r2, [pc, #76]	; (8017154 <DMA_CalcBaseAndBitshift+0x68>)
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	4413      	add	r3, r2
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	461a      	mov	r2, r3
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	2b03      	cmp	r3, #3
 8017118:	d909      	bls.n	801712e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8017122:	f023 0303 	bic.w	r3, r3, #3
 8017126:	1d1a      	adds	r2, r3, #4
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	659a      	str	r2, [r3, #88]	; 0x58
 801712c:	e007      	b.n	801713e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8017136:	f023 0303 	bic.w	r3, r3, #3
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8017142:	4618      	mov	r0, r3
 8017144:	3714      	adds	r7, #20
 8017146:	46bd      	mov	sp, r7
 8017148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714c:	4770      	bx	lr
 801714e:	bf00      	nop
 8017150:	aaaaaaab 	.word	0xaaaaaaab
 8017154:	08025798 	.word	0x08025798

08017158 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8017158:	b480      	push	{r7}
 801715a:	b085      	sub	sp, #20
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017160:	2300      	movs	r3, #0
 8017162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017168:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	699b      	ldr	r3, [r3, #24]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d11f      	bne.n	80171b2 <DMA_CheckFifoParam+0x5a>
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	2b03      	cmp	r3, #3
 8017176:	d856      	bhi.n	8017226 <DMA_CheckFifoParam+0xce>
 8017178:	a201      	add	r2, pc, #4	; (adr r2, 8017180 <DMA_CheckFifoParam+0x28>)
 801717a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801717e:	bf00      	nop
 8017180:	08017191 	.word	0x08017191
 8017184:	080171a3 	.word	0x080171a3
 8017188:	08017191 	.word	0x08017191
 801718c:	08017227 	.word	0x08017227
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017198:	2b00      	cmp	r3, #0
 801719a:	d046      	beq.n	801722a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801719c:	2301      	movs	r3, #1
 801719e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80171a0:	e043      	b.n	801722a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80171aa:	d140      	bne.n	801722e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80171ac:	2301      	movs	r3, #1
 80171ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80171b0:	e03d      	b.n	801722e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	699b      	ldr	r3, [r3, #24]
 80171b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80171ba:	d121      	bne.n	8017200 <DMA_CheckFifoParam+0xa8>
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	2b03      	cmp	r3, #3
 80171c0:	d837      	bhi.n	8017232 <DMA_CheckFifoParam+0xda>
 80171c2:	a201      	add	r2, pc, #4	; (adr r2, 80171c8 <DMA_CheckFifoParam+0x70>)
 80171c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171c8:	080171d9 	.word	0x080171d9
 80171cc:	080171df 	.word	0x080171df
 80171d0:	080171d9 	.word	0x080171d9
 80171d4:	080171f1 	.word	0x080171f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80171d8:	2301      	movs	r3, #1
 80171da:	73fb      	strb	r3, [r7, #15]
      break;
 80171dc:	e030      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d025      	beq.n	8017236 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80171ea:	2301      	movs	r3, #1
 80171ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80171ee:	e022      	b.n	8017236 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80171f8:	d11f      	bne.n	801723a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80171fa:	2301      	movs	r3, #1
 80171fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80171fe:	e01c      	b.n	801723a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	2b02      	cmp	r3, #2
 8017204:	d903      	bls.n	801720e <DMA_CheckFifoParam+0xb6>
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	2b03      	cmp	r3, #3
 801720a:	d003      	beq.n	8017214 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801720c:	e018      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801720e:	2301      	movs	r3, #1
 8017210:	73fb      	strb	r3, [r7, #15]
      break;
 8017212:	e015      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801721c:	2b00      	cmp	r3, #0
 801721e:	d00e      	beq.n	801723e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8017220:	2301      	movs	r3, #1
 8017222:	73fb      	strb	r3, [r7, #15]
      break;
 8017224:	e00b      	b.n	801723e <DMA_CheckFifoParam+0xe6>
      break;
 8017226:	bf00      	nop
 8017228:	e00a      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      break;
 801722a:	bf00      	nop
 801722c:	e008      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      break;
 801722e:	bf00      	nop
 8017230:	e006      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      break;
 8017232:	bf00      	nop
 8017234:	e004      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      break;
 8017236:	bf00      	nop
 8017238:	e002      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      break;   
 801723a:	bf00      	nop
 801723c:	e000      	b.n	8017240 <DMA_CheckFifoParam+0xe8>
      break;
 801723e:	bf00      	nop
    }
  } 
  
  return status; 
 8017240:	7bfb      	ldrb	r3, [r7, #15]
}
 8017242:	4618      	mov	r0, r3
 8017244:	3714      	adds	r7, #20
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop

08017250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017250:	b480      	push	{r7}
 8017252:	b089      	sub	sp, #36	; 0x24
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801725a:	2300      	movs	r3, #0
 801725c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801725e:	2300      	movs	r3, #0
 8017260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8017262:	2300      	movs	r3, #0
 8017264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017266:	2300      	movs	r3, #0
 8017268:	61fb      	str	r3, [r7, #28]
 801726a:	e16b      	b.n	8017544 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801726c:	2201      	movs	r2, #1
 801726e:	69fb      	ldr	r3, [r7, #28]
 8017270:	fa02 f303 	lsl.w	r3, r2, r3
 8017274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	697a      	ldr	r2, [r7, #20]
 801727c:	4013      	ands	r3, r2
 801727e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017280:	693a      	ldr	r2, [r7, #16]
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	429a      	cmp	r2, r3
 8017286:	f040 815a 	bne.w	801753e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	2b01      	cmp	r3, #1
 8017290:	d00b      	beq.n	80172aa <HAL_GPIO_Init+0x5a>
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	685b      	ldr	r3, [r3, #4]
 8017296:	2b02      	cmp	r3, #2
 8017298:	d007      	beq.n	80172aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801729e:	2b11      	cmp	r3, #17
 80172a0:	d003      	beq.n	80172aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	685b      	ldr	r3, [r3, #4]
 80172a6:	2b12      	cmp	r3, #18
 80172a8:	d130      	bne.n	801730c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	689b      	ldr	r3, [r3, #8]
 80172ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80172b0:	69fb      	ldr	r3, [r7, #28]
 80172b2:	005b      	lsls	r3, r3, #1
 80172b4:	2203      	movs	r2, #3
 80172b6:	fa02 f303 	lsl.w	r3, r2, r3
 80172ba:	43db      	mvns	r3, r3
 80172bc:	69ba      	ldr	r2, [r7, #24]
 80172be:	4013      	ands	r3, r2
 80172c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	68da      	ldr	r2, [r3, #12]
 80172c6:	69fb      	ldr	r3, [r7, #28]
 80172c8:	005b      	lsls	r3, r3, #1
 80172ca:	fa02 f303 	lsl.w	r3, r2, r3
 80172ce:	69ba      	ldr	r2, [r7, #24]
 80172d0:	4313      	orrs	r3, r2
 80172d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	69ba      	ldr	r2, [r7, #24]
 80172d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	685b      	ldr	r3, [r3, #4]
 80172de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80172e0:	2201      	movs	r2, #1
 80172e2:	69fb      	ldr	r3, [r7, #28]
 80172e4:	fa02 f303 	lsl.w	r3, r2, r3
 80172e8:	43db      	mvns	r3, r3
 80172ea:	69ba      	ldr	r2, [r7, #24]
 80172ec:	4013      	ands	r3, r2
 80172ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	091b      	lsrs	r3, r3, #4
 80172f6:	f003 0201 	and.w	r2, r3, #1
 80172fa:	69fb      	ldr	r3, [r7, #28]
 80172fc:	fa02 f303 	lsl.w	r3, r2, r3
 8017300:	69ba      	ldr	r2, [r7, #24]
 8017302:	4313      	orrs	r3, r2
 8017304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	69ba      	ldr	r2, [r7, #24]
 801730a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017312:	69fb      	ldr	r3, [r7, #28]
 8017314:	005b      	lsls	r3, r3, #1
 8017316:	2203      	movs	r2, #3
 8017318:	fa02 f303 	lsl.w	r3, r2, r3
 801731c:	43db      	mvns	r3, r3
 801731e:	69ba      	ldr	r2, [r7, #24]
 8017320:	4013      	ands	r3, r2
 8017322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	689a      	ldr	r2, [r3, #8]
 8017328:	69fb      	ldr	r3, [r7, #28]
 801732a:	005b      	lsls	r3, r3, #1
 801732c:	fa02 f303 	lsl.w	r3, r2, r3
 8017330:	69ba      	ldr	r2, [r7, #24]
 8017332:	4313      	orrs	r3, r2
 8017334:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	69ba      	ldr	r2, [r7, #24]
 801733a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	2b02      	cmp	r3, #2
 8017342:	d003      	beq.n	801734c <HAL_GPIO_Init+0xfc>
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	685b      	ldr	r3, [r3, #4]
 8017348:	2b12      	cmp	r3, #18
 801734a:	d123      	bne.n	8017394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801734c:	69fb      	ldr	r3, [r7, #28]
 801734e:	08da      	lsrs	r2, r3, #3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	3208      	adds	r2, #8
 8017354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801735a:	69fb      	ldr	r3, [r7, #28]
 801735c:	f003 0307 	and.w	r3, r3, #7
 8017360:	009b      	lsls	r3, r3, #2
 8017362:	220f      	movs	r2, #15
 8017364:	fa02 f303 	lsl.w	r3, r2, r3
 8017368:	43db      	mvns	r3, r3
 801736a:	69ba      	ldr	r2, [r7, #24]
 801736c:	4013      	ands	r3, r2
 801736e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8017370:	683b      	ldr	r3, [r7, #0]
 8017372:	691a      	ldr	r2, [r3, #16]
 8017374:	69fb      	ldr	r3, [r7, #28]
 8017376:	f003 0307 	and.w	r3, r3, #7
 801737a:	009b      	lsls	r3, r3, #2
 801737c:	fa02 f303 	lsl.w	r3, r2, r3
 8017380:	69ba      	ldr	r2, [r7, #24]
 8017382:	4313      	orrs	r3, r2
 8017384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017386:	69fb      	ldr	r3, [r7, #28]
 8017388:	08da      	lsrs	r2, r3, #3
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	3208      	adds	r2, #8
 801738e:	69b9      	ldr	r1, [r7, #24]
 8017390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801739a:	69fb      	ldr	r3, [r7, #28]
 801739c:	005b      	lsls	r3, r3, #1
 801739e:	2203      	movs	r2, #3
 80173a0:	fa02 f303 	lsl.w	r3, r2, r3
 80173a4:	43db      	mvns	r3, r3
 80173a6:	69ba      	ldr	r2, [r7, #24]
 80173a8:	4013      	ands	r3, r2
 80173aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	685b      	ldr	r3, [r3, #4]
 80173b0:	f003 0203 	and.w	r2, r3, #3
 80173b4:	69fb      	ldr	r3, [r7, #28]
 80173b6:	005b      	lsls	r3, r3, #1
 80173b8:	fa02 f303 	lsl.w	r3, r2, r3
 80173bc:	69ba      	ldr	r2, [r7, #24]
 80173be:	4313      	orrs	r3, r2
 80173c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	69ba      	ldr	r2, [r7, #24]
 80173c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	685b      	ldr	r3, [r3, #4]
 80173cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	f000 80b4 	beq.w	801753e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80173d6:	2300      	movs	r3, #0
 80173d8:	60fb      	str	r3, [r7, #12]
 80173da:	4b60      	ldr	r3, [pc, #384]	; (801755c <HAL_GPIO_Init+0x30c>)
 80173dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173de:	4a5f      	ldr	r2, [pc, #380]	; (801755c <HAL_GPIO_Init+0x30c>)
 80173e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80173e4:	6453      	str	r3, [r2, #68]	; 0x44
 80173e6:	4b5d      	ldr	r3, [pc, #372]	; (801755c <HAL_GPIO_Init+0x30c>)
 80173e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80173ee:	60fb      	str	r3, [r7, #12]
 80173f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80173f2:	4a5b      	ldr	r2, [pc, #364]	; (8017560 <HAL_GPIO_Init+0x310>)
 80173f4:	69fb      	ldr	r3, [r7, #28]
 80173f6:	089b      	lsrs	r3, r3, #2
 80173f8:	3302      	adds	r3, #2
 80173fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80173fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8017400:	69fb      	ldr	r3, [r7, #28]
 8017402:	f003 0303 	and.w	r3, r3, #3
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	220f      	movs	r2, #15
 801740a:	fa02 f303 	lsl.w	r3, r2, r3
 801740e:	43db      	mvns	r3, r3
 8017410:	69ba      	ldr	r2, [r7, #24]
 8017412:	4013      	ands	r3, r2
 8017414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	4a52      	ldr	r2, [pc, #328]	; (8017564 <HAL_GPIO_Init+0x314>)
 801741a:	4293      	cmp	r3, r2
 801741c:	d02b      	beq.n	8017476 <HAL_GPIO_Init+0x226>
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	4a51      	ldr	r2, [pc, #324]	; (8017568 <HAL_GPIO_Init+0x318>)
 8017422:	4293      	cmp	r3, r2
 8017424:	d025      	beq.n	8017472 <HAL_GPIO_Init+0x222>
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	4a50      	ldr	r2, [pc, #320]	; (801756c <HAL_GPIO_Init+0x31c>)
 801742a:	4293      	cmp	r3, r2
 801742c:	d01f      	beq.n	801746e <HAL_GPIO_Init+0x21e>
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	4a4f      	ldr	r2, [pc, #316]	; (8017570 <HAL_GPIO_Init+0x320>)
 8017432:	4293      	cmp	r3, r2
 8017434:	d019      	beq.n	801746a <HAL_GPIO_Init+0x21a>
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	4a4e      	ldr	r2, [pc, #312]	; (8017574 <HAL_GPIO_Init+0x324>)
 801743a:	4293      	cmp	r3, r2
 801743c:	d013      	beq.n	8017466 <HAL_GPIO_Init+0x216>
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	4a4d      	ldr	r2, [pc, #308]	; (8017578 <HAL_GPIO_Init+0x328>)
 8017442:	4293      	cmp	r3, r2
 8017444:	d00d      	beq.n	8017462 <HAL_GPIO_Init+0x212>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	4a4c      	ldr	r2, [pc, #304]	; (801757c <HAL_GPIO_Init+0x32c>)
 801744a:	4293      	cmp	r3, r2
 801744c:	d007      	beq.n	801745e <HAL_GPIO_Init+0x20e>
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	4a4b      	ldr	r2, [pc, #300]	; (8017580 <HAL_GPIO_Init+0x330>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d101      	bne.n	801745a <HAL_GPIO_Init+0x20a>
 8017456:	2307      	movs	r3, #7
 8017458:	e00e      	b.n	8017478 <HAL_GPIO_Init+0x228>
 801745a:	2308      	movs	r3, #8
 801745c:	e00c      	b.n	8017478 <HAL_GPIO_Init+0x228>
 801745e:	2306      	movs	r3, #6
 8017460:	e00a      	b.n	8017478 <HAL_GPIO_Init+0x228>
 8017462:	2305      	movs	r3, #5
 8017464:	e008      	b.n	8017478 <HAL_GPIO_Init+0x228>
 8017466:	2304      	movs	r3, #4
 8017468:	e006      	b.n	8017478 <HAL_GPIO_Init+0x228>
 801746a:	2303      	movs	r3, #3
 801746c:	e004      	b.n	8017478 <HAL_GPIO_Init+0x228>
 801746e:	2302      	movs	r3, #2
 8017470:	e002      	b.n	8017478 <HAL_GPIO_Init+0x228>
 8017472:	2301      	movs	r3, #1
 8017474:	e000      	b.n	8017478 <HAL_GPIO_Init+0x228>
 8017476:	2300      	movs	r3, #0
 8017478:	69fa      	ldr	r2, [r7, #28]
 801747a:	f002 0203 	and.w	r2, r2, #3
 801747e:	0092      	lsls	r2, r2, #2
 8017480:	4093      	lsls	r3, r2
 8017482:	69ba      	ldr	r2, [r7, #24]
 8017484:	4313      	orrs	r3, r2
 8017486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017488:	4935      	ldr	r1, [pc, #212]	; (8017560 <HAL_GPIO_Init+0x310>)
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	089b      	lsrs	r3, r3, #2
 801748e:	3302      	adds	r3, #2
 8017490:	69ba      	ldr	r2, [r7, #24]
 8017492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017496:	4b3b      	ldr	r3, [pc, #236]	; (8017584 <HAL_GPIO_Init+0x334>)
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	43db      	mvns	r3, r3
 80174a0:	69ba      	ldr	r2, [r7, #24]
 80174a2:	4013      	ands	r3, r2
 80174a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d003      	beq.n	80174ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80174b2:	69ba      	ldr	r2, [r7, #24]
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	4313      	orrs	r3, r2
 80174b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80174ba:	4a32      	ldr	r2, [pc, #200]	; (8017584 <HAL_GPIO_Init+0x334>)
 80174bc:	69bb      	ldr	r3, [r7, #24]
 80174be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80174c0:	4b30      	ldr	r3, [pc, #192]	; (8017584 <HAL_GPIO_Init+0x334>)
 80174c2:	685b      	ldr	r3, [r3, #4]
 80174c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80174c6:	693b      	ldr	r3, [r7, #16]
 80174c8:	43db      	mvns	r3, r3
 80174ca:	69ba      	ldr	r2, [r7, #24]
 80174cc:	4013      	ands	r3, r2
 80174ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	685b      	ldr	r3, [r3, #4]
 80174d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d003      	beq.n	80174e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80174dc:	69ba      	ldr	r2, [r7, #24]
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	4313      	orrs	r3, r2
 80174e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80174e4:	4a27      	ldr	r2, [pc, #156]	; (8017584 <HAL_GPIO_Init+0x334>)
 80174e6:	69bb      	ldr	r3, [r7, #24]
 80174e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80174ea:	4b26      	ldr	r3, [pc, #152]	; (8017584 <HAL_GPIO_Init+0x334>)
 80174ec:	689b      	ldr	r3, [r3, #8]
 80174ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	43db      	mvns	r3, r3
 80174f4:	69ba      	ldr	r2, [r7, #24]
 80174f6:	4013      	ands	r3, r2
 80174f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	685b      	ldr	r3, [r3, #4]
 80174fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017502:	2b00      	cmp	r3, #0
 8017504:	d003      	beq.n	801750e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8017506:	69ba      	ldr	r2, [r7, #24]
 8017508:	693b      	ldr	r3, [r7, #16]
 801750a:	4313      	orrs	r3, r2
 801750c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801750e:	4a1d      	ldr	r2, [pc, #116]	; (8017584 <HAL_GPIO_Init+0x334>)
 8017510:	69bb      	ldr	r3, [r7, #24]
 8017512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017514:	4b1b      	ldr	r3, [pc, #108]	; (8017584 <HAL_GPIO_Init+0x334>)
 8017516:	68db      	ldr	r3, [r3, #12]
 8017518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801751a:	693b      	ldr	r3, [r7, #16]
 801751c:	43db      	mvns	r3, r3
 801751e:	69ba      	ldr	r2, [r7, #24]
 8017520:	4013      	ands	r3, r2
 8017522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	685b      	ldr	r3, [r3, #4]
 8017528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801752c:	2b00      	cmp	r3, #0
 801752e:	d003      	beq.n	8017538 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8017530:	69ba      	ldr	r2, [r7, #24]
 8017532:	693b      	ldr	r3, [r7, #16]
 8017534:	4313      	orrs	r3, r2
 8017536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017538:	4a12      	ldr	r2, [pc, #72]	; (8017584 <HAL_GPIO_Init+0x334>)
 801753a:	69bb      	ldr	r3, [r7, #24]
 801753c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801753e:	69fb      	ldr	r3, [r7, #28]
 8017540:	3301      	adds	r3, #1
 8017542:	61fb      	str	r3, [r7, #28]
 8017544:	69fb      	ldr	r3, [r7, #28]
 8017546:	2b0f      	cmp	r3, #15
 8017548:	f67f ae90 	bls.w	801726c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801754c:	bf00      	nop
 801754e:	bf00      	nop
 8017550:	3724      	adds	r7, #36	; 0x24
 8017552:	46bd      	mov	sp, r7
 8017554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017558:	4770      	bx	lr
 801755a:	bf00      	nop
 801755c:	40023800 	.word	0x40023800
 8017560:	40013800 	.word	0x40013800
 8017564:	40020000 	.word	0x40020000
 8017568:	40020400 	.word	0x40020400
 801756c:	40020800 	.word	0x40020800
 8017570:	40020c00 	.word	0x40020c00
 8017574:	40021000 	.word	0x40021000
 8017578:	40021400 	.word	0x40021400
 801757c:	40021800 	.word	0x40021800
 8017580:	40021c00 	.word	0x40021c00
 8017584:	40013c00 	.word	0x40013c00

08017588 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8017588:	b480      	push	{r7}
 801758a:	b087      	sub	sp, #28
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8017592:	2300      	movs	r3, #0
 8017594:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8017596:	2300      	movs	r3, #0
 8017598:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801759a:	2300      	movs	r3, #0
 801759c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801759e:	2300      	movs	r3, #0
 80175a0:	617b      	str	r3, [r7, #20]
 80175a2:	e0cd      	b.n	8017740 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80175a4:	2201      	movs	r2, #1
 80175a6:	697b      	ldr	r3, [r7, #20]
 80175a8:	fa02 f303 	lsl.w	r3, r2, r3
 80175ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80175ae:	683a      	ldr	r2, [r7, #0]
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	4013      	ands	r3, r2
 80175b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80175b6:	68fa      	ldr	r2, [r7, #12]
 80175b8:	693b      	ldr	r3, [r7, #16]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	f040 80bd 	bne.w	801773a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80175c0:	4a65      	ldr	r2, [pc, #404]	; (8017758 <HAL_GPIO_DeInit+0x1d0>)
 80175c2:	697b      	ldr	r3, [r7, #20]
 80175c4:	089b      	lsrs	r3, r3, #2
 80175c6:	3302      	adds	r3, #2
 80175c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80175cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80175ce:	697b      	ldr	r3, [r7, #20]
 80175d0:	f003 0303 	and.w	r3, r3, #3
 80175d4:	009b      	lsls	r3, r3, #2
 80175d6:	220f      	movs	r2, #15
 80175d8:	fa02 f303 	lsl.w	r3, r2, r3
 80175dc:	68ba      	ldr	r2, [r7, #8]
 80175de:	4013      	ands	r3, r2
 80175e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	4a5d      	ldr	r2, [pc, #372]	; (801775c <HAL_GPIO_DeInit+0x1d4>)
 80175e6:	4293      	cmp	r3, r2
 80175e8:	d02b      	beq.n	8017642 <HAL_GPIO_DeInit+0xba>
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	4a5c      	ldr	r2, [pc, #368]	; (8017760 <HAL_GPIO_DeInit+0x1d8>)
 80175ee:	4293      	cmp	r3, r2
 80175f0:	d025      	beq.n	801763e <HAL_GPIO_DeInit+0xb6>
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	4a5b      	ldr	r2, [pc, #364]	; (8017764 <HAL_GPIO_DeInit+0x1dc>)
 80175f6:	4293      	cmp	r3, r2
 80175f8:	d01f      	beq.n	801763a <HAL_GPIO_DeInit+0xb2>
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	4a5a      	ldr	r2, [pc, #360]	; (8017768 <HAL_GPIO_DeInit+0x1e0>)
 80175fe:	4293      	cmp	r3, r2
 8017600:	d019      	beq.n	8017636 <HAL_GPIO_DeInit+0xae>
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	4a59      	ldr	r2, [pc, #356]	; (801776c <HAL_GPIO_DeInit+0x1e4>)
 8017606:	4293      	cmp	r3, r2
 8017608:	d013      	beq.n	8017632 <HAL_GPIO_DeInit+0xaa>
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	4a58      	ldr	r2, [pc, #352]	; (8017770 <HAL_GPIO_DeInit+0x1e8>)
 801760e:	4293      	cmp	r3, r2
 8017610:	d00d      	beq.n	801762e <HAL_GPIO_DeInit+0xa6>
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	4a57      	ldr	r2, [pc, #348]	; (8017774 <HAL_GPIO_DeInit+0x1ec>)
 8017616:	4293      	cmp	r3, r2
 8017618:	d007      	beq.n	801762a <HAL_GPIO_DeInit+0xa2>
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	4a56      	ldr	r2, [pc, #344]	; (8017778 <HAL_GPIO_DeInit+0x1f0>)
 801761e:	4293      	cmp	r3, r2
 8017620:	d101      	bne.n	8017626 <HAL_GPIO_DeInit+0x9e>
 8017622:	2307      	movs	r3, #7
 8017624:	e00e      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 8017626:	2308      	movs	r3, #8
 8017628:	e00c      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 801762a:	2306      	movs	r3, #6
 801762c:	e00a      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 801762e:	2305      	movs	r3, #5
 8017630:	e008      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 8017632:	2304      	movs	r3, #4
 8017634:	e006      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 8017636:	2303      	movs	r3, #3
 8017638:	e004      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 801763a:	2302      	movs	r3, #2
 801763c:	e002      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 801763e:	2301      	movs	r3, #1
 8017640:	e000      	b.n	8017644 <HAL_GPIO_DeInit+0xbc>
 8017642:	2300      	movs	r3, #0
 8017644:	697a      	ldr	r2, [r7, #20]
 8017646:	f002 0203 	and.w	r2, r2, #3
 801764a:	0092      	lsls	r2, r2, #2
 801764c:	4093      	lsls	r3, r2
 801764e:	68ba      	ldr	r2, [r7, #8]
 8017650:	429a      	cmp	r2, r3
 8017652:	d132      	bne.n	80176ba <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8017654:	4b49      	ldr	r3, [pc, #292]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	43db      	mvns	r3, r3
 801765c:	4947      	ldr	r1, [pc, #284]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 801765e:	4013      	ands	r3, r2
 8017660:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8017662:	4b46      	ldr	r3, [pc, #280]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 8017664:	685a      	ldr	r2, [r3, #4]
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	43db      	mvns	r3, r3
 801766a:	4944      	ldr	r1, [pc, #272]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 801766c:	4013      	ands	r3, r2
 801766e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8017670:	4b42      	ldr	r3, [pc, #264]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 8017672:	689a      	ldr	r2, [r3, #8]
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	43db      	mvns	r3, r3
 8017678:	4940      	ldr	r1, [pc, #256]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 801767a:	4013      	ands	r3, r2
 801767c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801767e:	4b3f      	ldr	r3, [pc, #252]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 8017680:	68da      	ldr	r2, [r3, #12]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	43db      	mvns	r3, r3
 8017686:	493d      	ldr	r1, [pc, #244]	; (801777c <HAL_GPIO_DeInit+0x1f4>)
 8017688:	4013      	ands	r3, r2
 801768a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	f003 0303 	and.w	r3, r3, #3
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	220f      	movs	r2, #15
 8017696:	fa02 f303 	lsl.w	r3, r2, r3
 801769a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801769c:	4a2e      	ldr	r2, [pc, #184]	; (8017758 <HAL_GPIO_DeInit+0x1d0>)
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	089b      	lsrs	r3, r3, #2
 80176a2:	3302      	adds	r3, #2
 80176a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	43da      	mvns	r2, r3
 80176ac:	482a      	ldr	r0, [pc, #168]	; (8017758 <HAL_GPIO_DeInit+0x1d0>)
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	089b      	lsrs	r3, r3, #2
 80176b2:	400a      	ands	r2, r1
 80176b4:	3302      	adds	r3, #2
 80176b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	005b      	lsls	r3, r3, #1
 80176c2:	2103      	movs	r1, #3
 80176c4:	fa01 f303 	lsl.w	r3, r1, r3
 80176c8:	43db      	mvns	r3, r3
 80176ca:	401a      	ands	r2, r3
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	08da      	lsrs	r2, r3, #3
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	3208      	adds	r2, #8
 80176d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80176dc:	697b      	ldr	r3, [r7, #20]
 80176de:	f003 0307 	and.w	r3, r3, #7
 80176e2:	009b      	lsls	r3, r3, #2
 80176e4:	220f      	movs	r2, #15
 80176e6:	fa02 f303 	lsl.w	r3, r2, r3
 80176ea:	43db      	mvns	r3, r3
 80176ec:	697a      	ldr	r2, [r7, #20]
 80176ee:	08d2      	lsrs	r2, r2, #3
 80176f0:	4019      	ands	r1, r3
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	3208      	adds	r2, #8
 80176f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	68da      	ldr	r2, [r3, #12]
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	005b      	lsls	r3, r3, #1
 8017702:	2103      	movs	r1, #3
 8017704:	fa01 f303 	lsl.w	r3, r1, r3
 8017708:	43db      	mvns	r3, r3
 801770a:	401a      	ands	r2, r3
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	685a      	ldr	r2, [r3, #4]
 8017714:	2101      	movs	r1, #1
 8017716:	697b      	ldr	r3, [r7, #20]
 8017718:	fa01 f303 	lsl.w	r3, r1, r3
 801771c:	43db      	mvns	r3, r3
 801771e:	401a      	ands	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	689a      	ldr	r2, [r3, #8]
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	005b      	lsls	r3, r3, #1
 801772c:	2103      	movs	r1, #3
 801772e:	fa01 f303 	lsl.w	r3, r1, r3
 8017732:	43db      	mvns	r3, r3
 8017734:	401a      	ands	r2, r3
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801773a:	697b      	ldr	r3, [r7, #20]
 801773c:	3301      	adds	r3, #1
 801773e:	617b      	str	r3, [r7, #20]
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	2b0f      	cmp	r3, #15
 8017744:	f67f af2e 	bls.w	80175a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8017748:	bf00      	nop
 801774a:	bf00      	nop
 801774c:	371c      	adds	r7, #28
 801774e:	46bd      	mov	sp, r7
 8017750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	40013800 	.word	0x40013800
 801775c:	40020000 	.word	0x40020000
 8017760:	40020400 	.word	0x40020400
 8017764:	40020800 	.word	0x40020800
 8017768:	40020c00 	.word	0x40020c00
 801776c:	40021000 	.word	0x40021000
 8017770:	40021400 	.word	0x40021400
 8017774:	40021800 	.word	0x40021800
 8017778:	40021c00 	.word	0x40021c00
 801777c:	40013c00 	.word	0x40013c00

08017780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017780:	b480      	push	{r7}
 8017782:	b085      	sub	sp, #20
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	460b      	mov	r3, r1
 801778a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	691a      	ldr	r2, [r3, #16]
 8017790:	887b      	ldrh	r3, [r7, #2]
 8017792:	4013      	ands	r3, r2
 8017794:	2b00      	cmp	r3, #0
 8017796:	d002      	beq.n	801779e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017798:	2301      	movs	r3, #1
 801779a:	73fb      	strb	r3, [r7, #15]
 801779c:	e001      	b.n	80177a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801779e:	2300      	movs	r3, #0
 80177a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80177a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3714      	adds	r7, #20
 80177a8:	46bd      	mov	sp, r7
 80177aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ae:	4770      	bx	lr

080177b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80177b0:	b480      	push	{r7}
 80177b2:	b083      	sub	sp, #12
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
 80177b8:	460b      	mov	r3, r1
 80177ba:	807b      	strh	r3, [r7, #2]
 80177bc:	4613      	mov	r3, r2
 80177be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80177c0:	787b      	ldrb	r3, [r7, #1]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d003      	beq.n	80177ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80177c6:	887a      	ldrh	r2, [r7, #2]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80177cc:	e003      	b.n	80177d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80177ce:	887b      	ldrh	r3, [r7, #2]
 80177d0:	041a      	lsls	r2, r3, #16
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	619a      	str	r2, [r3, #24]
}
 80177d6:	bf00      	nop
 80177d8:	370c      	adds	r7, #12
 80177da:	46bd      	mov	sp, r7
 80177dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e0:	4770      	bx	lr
	...

080177e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d101      	bne.n	80177f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80177f2:	2301      	movs	r3, #1
 80177f4:	e12b      	b.n	8017a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d106      	bne.n	8017810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2200      	movs	r2, #0
 8017806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f7ea fc40 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2224      	movs	r2, #36	; 0x24
 8017814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	f022 0201 	bic.w	r2, r2, #1
 8017826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	681a      	ldr	r2, [r3, #0]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	681a      	ldr	r2, [r3, #0]
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017848:	f002 fc64 	bl	801a114 <HAL_RCC_GetPCLK1Freq>
 801784c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	4a81      	ldr	r2, [pc, #516]	; (8017a58 <HAL_I2C_Init+0x274>)
 8017854:	4293      	cmp	r3, r2
 8017856:	d807      	bhi.n	8017868 <HAL_I2C_Init+0x84>
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	4a80      	ldr	r2, [pc, #512]	; (8017a5c <HAL_I2C_Init+0x278>)
 801785c:	4293      	cmp	r3, r2
 801785e:	bf94      	ite	ls
 8017860:	2301      	movls	r3, #1
 8017862:	2300      	movhi	r3, #0
 8017864:	b2db      	uxtb	r3, r3
 8017866:	e006      	b.n	8017876 <HAL_I2C_Init+0x92>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	4a7d      	ldr	r2, [pc, #500]	; (8017a60 <HAL_I2C_Init+0x27c>)
 801786c:	4293      	cmp	r3, r2
 801786e:	bf94      	ite	ls
 8017870:	2301      	movls	r3, #1
 8017872:	2300      	movhi	r3, #0
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2b00      	cmp	r3, #0
 8017878:	d001      	beq.n	801787e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801787a:	2301      	movs	r3, #1
 801787c:	e0e7      	b.n	8017a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	4a78      	ldr	r2, [pc, #480]	; (8017a64 <HAL_I2C_Init+0x280>)
 8017882:	fba2 2303 	umull	r2, r3, r2, r3
 8017886:	0c9b      	lsrs	r3, r3, #18
 8017888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	685b      	ldr	r3, [r3, #4]
 8017890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	68ba      	ldr	r2, [r7, #8]
 801789a:	430a      	orrs	r2, r1
 801789c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	6a1b      	ldr	r3, [r3, #32]
 80178a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	685b      	ldr	r3, [r3, #4]
 80178ac:	4a6a      	ldr	r2, [pc, #424]	; (8017a58 <HAL_I2C_Init+0x274>)
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d802      	bhi.n	80178b8 <HAL_I2C_Init+0xd4>
 80178b2:	68bb      	ldr	r3, [r7, #8]
 80178b4:	3301      	adds	r3, #1
 80178b6:	e009      	b.n	80178cc <HAL_I2C_Init+0xe8>
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80178be:	fb02 f303 	mul.w	r3, r2, r3
 80178c2:	4a69      	ldr	r2, [pc, #420]	; (8017a68 <HAL_I2C_Init+0x284>)
 80178c4:	fba2 2303 	umull	r2, r3, r2, r3
 80178c8:	099b      	lsrs	r3, r3, #6
 80178ca:	3301      	adds	r3, #1
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	6812      	ldr	r2, [r2, #0]
 80178d0:	430b      	orrs	r3, r1
 80178d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	69db      	ldr	r3, [r3, #28]
 80178da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80178de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	685b      	ldr	r3, [r3, #4]
 80178e6:	495c      	ldr	r1, [pc, #368]	; (8017a58 <HAL_I2C_Init+0x274>)
 80178e8:	428b      	cmp	r3, r1
 80178ea:	d819      	bhi.n	8017920 <HAL_I2C_Init+0x13c>
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	1e59      	subs	r1, r3, #1
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	005b      	lsls	r3, r3, #1
 80178f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80178fa:	1c59      	adds	r1, r3, #1
 80178fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8017900:	400b      	ands	r3, r1
 8017902:	2b00      	cmp	r3, #0
 8017904:	d00a      	beq.n	801791c <HAL_I2C_Init+0x138>
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	1e59      	subs	r1, r3, #1
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	685b      	ldr	r3, [r3, #4]
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	fbb1 f3f3 	udiv	r3, r1, r3
 8017914:	3301      	adds	r3, #1
 8017916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801791a:	e051      	b.n	80179c0 <HAL_I2C_Init+0x1dc>
 801791c:	2304      	movs	r3, #4
 801791e:	e04f      	b.n	80179c0 <HAL_I2C_Init+0x1dc>
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	689b      	ldr	r3, [r3, #8]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d111      	bne.n	801794c <HAL_I2C_Init+0x168>
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	1e58      	subs	r0, r3, #1
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6859      	ldr	r1, [r3, #4]
 8017930:	460b      	mov	r3, r1
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	440b      	add	r3, r1
 8017936:	fbb0 f3f3 	udiv	r3, r0, r3
 801793a:	3301      	adds	r3, #1
 801793c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017940:	2b00      	cmp	r3, #0
 8017942:	bf0c      	ite	eq
 8017944:	2301      	moveq	r3, #1
 8017946:	2300      	movne	r3, #0
 8017948:	b2db      	uxtb	r3, r3
 801794a:	e012      	b.n	8017972 <HAL_I2C_Init+0x18e>
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	1e58      	subs	r0, r3, #1
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6859      	ldr	r1, [r3, #4]
 8017954:	460b      	mov	r3, r1
 8017956:	009b      	lsls	r3, r3, #2
 8017958:	440b      	add	r3, r1
 801795a:	0099      	lsls	r1, r3, #2
 801795c:	440b      	add	r3, r1
 801795e:	fbb0 f3f3 	udiv	r3, r0, r3
 8017962:	3301      	adds	r3, #1
 8017964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017968:	2b00      	cmp	r3, #0
 801796a:	bf0c      	ite	eq
 801796c:	2301      	moveq	r3, #1
 801796e:	2300      	movne	r3, #0
 8017970:	b2db      	uxtb	r3, r3
 8017972:	2b00      	cmp	r3, #0
 8017974:	d001      	beq.n	801797a <HAL_I2C_Init+0x196>
 8017976:	2301      	movs	r3, #1
 8017978:	e022      	b.n	80179c0 <HAL_I2C_Init+0x1dc>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	689b      	ldr	r3, [r3, #8]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d10e      	bne.n	80179a0 <HAL_I2C_Init+0x1bc>
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	1e58      	subs	r0, r3, #1
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	6859      	ldr	r1, [r3, #4]
 801798a:	460b      	mov	r3, r1
 801798c:	005b      	lsls	r3, r3, #1
 801798e:	440b      	add	r3, r1
 8017990:	fbb0 f3f3 	udiv	r3, r0, r3
 8017994:	3301      	adds	r3, #1
 8017996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801799a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801799e:	e00f      	b.n	80179c0 <HAL_I2C_Init+0x1dc>
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	1e58      	subs	r0, r3, #1
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6859      	ldr	r1, [r3, #4]
 80179a8:	460b      	mov	r3, r1
 80179aa:	009b      	lsls	r3, r3, #2
 80179ac:	440b      	add	r3, r1
 80179ae:	0099      	lsls	r1, r3, #2
 80179b0:	440b      	add	r3, r1
 80179b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80179b6:	3301      	adds	r3, #1
 80179b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80179bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80179c0:	6879      	ldr	r1, [r7, #4]
 80179c2:	6809      	ldr	r1, [r1, #0]
 80179c4:	4313      	orrs	r3, r2
 80179c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	69da      	ldr	r2, [r3, #28]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6a1b      	ldr	r3, [r3, #32]
 80179da:	431a      	orrs	r2, r3
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	430a      	orrs	r2, r1
 80179e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	689b      	ldr	r3, [r3, #8]
 80179ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80179ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	6911      	ldr	r1, [r2, #16]
 80179f6:	687a      	ldr	r2, [r7, #4]
 80179f8:	68d2      	ldr	r2, [r2, #12]
 80179fa:	4311      	orrs	r1, r2
 80179fc:	687a      	ldr	r2, [r7, #4]
 80179fe:	6812      	ldr	r2, [r2, #0]
 8017a00:	430b      	orrs	r3, r1
 8017a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	68db      	ldr	r3, [r3, #12]
 8017a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	695a      	ldr	r2, [r3, #20]
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	699b      	ldr	r3, [r3, #24]
 8017a16:	431a      	orrs	r2, r3
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	430a      	orrs	r2, r1
 8017a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	681a      	ldr	r2, [r3, #0]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f042 0201 	orr.w	r2, r2, #1
 8017a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	2200      	movs	r2, #0
 8017a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2220      	movs	r2, #32
 8017a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2200      	movs	r2, #0
 8017a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	2200      	movs	r2, #0
 8017a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8017a4c:	2300      	movs	r3, #0
}
 8017a4e:	4618      	mov	r0, r3
 8017a50:	3710      	adds	r7, #16
 8017a52:	46bd      	mov	sp, r7
 8017a54:	bd80      	pop	{r7, pc}
 8017a56:	bf00      	nop
 8017a58:	000186a0 	.word	0x000186a0
 8017a5c:	001e847f 	.word	0x001e847f
 8017a60:	003d08ff 	.word	0x003d08ff
 8017a64:	431bde83 	.word	0x431bde83
 8017a68:	10624dd3 	.word	0x10624dd3

08017a6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d101      	bne.n	8017a7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	e021      	b.n	8017ac2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2224      	movs	r2, #36	; 0x24
 8017a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	f022 0201 	bic.w	r2, r2, #1
 8017a94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f7ea fbd0 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	2200      	movs	r2, #0
 8017aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2200      	movs	r2, #0
 8017abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017ac0:	2300      	movs	r3, #0
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3708      	adds	r7, #8
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd80      	pop	{r7, pc}
	...

08017acc <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b086      	sub	sp, #24
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	60f8      	str	r0, [r7, #12]
 8017ad4:	607a      	str	r2, [r7, #4]
 8017ad6:	461a      	mov	r2, r3
 8017ad8:	460b      	mov	r3, r1
 8017ada:	817b      	strh	r3, [r7, #10]
 8017adc:	4613      	mov	r3, r2
 8017ade:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017aea:	b2db      	uxtb	r3, r3
 8017aec:	2b20      	cmp	r3, #32
 8017aee:	f040 80f4 	bne.w	8017cda <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017af2:	4b7c      	ldr	r3, [pc, #496]	; (8017ce4 <HAL_I2C_Master_Receive_DMA+0x218>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	08db      	lsrs	r3, r3, #3
 8017af8:	4a7b      	ldr	r2, [pc, #492]	; (8017ce8 <HAL_I2C_Master_Receive_DMA+0x21c>)
 8017afa:	fba2 2303 	umull	r2, r3, r2, r3
 8017afe:	0a1a      	lsrs	r2, r3, #8
 8017b00:	4613      	mov	r3, r2
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	4413      	add	r3, r2
 8017b06:	009a      	lsls	r2, r3, #2
 8017b08:	4413      	add	r3, r2
 8017b0a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	3b01      	subs	r3, #1
 8017b10:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8017b12:	693b      	ldr	r3, [r7, #16]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d116      	bne.n	8017b46 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	2220      	movs	r2, #32
 8017b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b32:	f043 0220 	orr.w	r2, r3, #32
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017b42:	2301      	movs	r3, #1
 8017b44:	e0ca      	b.n	8017cdc <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	699b      	ldr	r3, [r3, #24]
 8017b4c:	f003 0302 	and.w	r3, r3, #2
 8017b50:	2b02      	cmp	r3, #2
 8017b52:	d0db      	beq.n	8017b0c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017b5a:	2b01      	cmp	r3, #1
 8017b5c:	d101      	bne.n	8017b62 <HAL_I2C_Master_Receive_DMA+0x96>
 8017b5e:	2302      	movs	r3, #2
 8017b60:	e0bc      	b.n	8017cdc <HAL_I2C_Master_Receive_DMA+0x210>
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	2201      	movs	r2, #1
 8017b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	f003 0301 	and.w	r3, r3, #1
 8017b74:	2b01      	cmp	r3, #1
 8017b76:	d007      	beq.n	8017b88 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	f042 0201 	orr.w	r2, r2, #1
 8017b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	681a      	ldr	r2, [r3, #0]
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	2222      	movs	r2, #34	; 0x22
 8017b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	2210      	movs	r2, #16
 8017ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2200      	movs	r2, #0
 8017bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	687a      	ldr	r2, [r7, #4]
 8017bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	893a      	ldrh	r2, [r7, #8]
 8017bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017bbe:	b29a      	uxth	r2, r3
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	4a49      	ldr	r2, [pc, #292]	; (8017cec <HAL_I2C_Master_Receive_DMA+0x220>)
 8017bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017bca:	897a      	ldrh	r2, [r7, #10]
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d062      	beq.n	8017c9e <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bdc:	4a44      	ldr	r2, [pc, #272]	; (8017cf0 <HAL_I2C_Master_Receive_DMA+0x224>)
 8017bde:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017be4:	4a43      	ldr	r2, [pc, #268]	; (8017cf4 <HAL_I2C_Master_Receive_DMA+0x228>)
 8017be6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bec:	2200      	movs	r2, #0
 8017bee:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c04:	2200      	movs	r2, #0
 8017c06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	3310      	adds	r3, #16
 8017c12:	4619      	mov	r1, r3
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c18:	461a      	mov	r2, r3
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017c1e:	f7ff f819 	bl	8016c54 <HAL_DMA_Start_IT>
 8017c22:	4603      	mov	r3, r0
 8017c24:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8017c26:	7dfb      	ldrb	r3, [r7, #23]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d124      	bne.n	8017c76 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	681a      	ldr	r2, [r3, #0]
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017c3a:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	681a      	ldr	r2, [r3, #0]
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c4a:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	2200      	movs	r2, #0
 8017c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	685a      	ldr	r2, [r3, #4]
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8017c62:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	685a      	ldr	r2, [r3, #4]
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017c72:	605a      	str	r2, [r3, #4]
 8017c74:	e02f      	b.n	8017cd6 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	2220      	movs	r2, #32
 8017c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2200      	movs	r2, #0
 8017c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c8a:	f043 0210 	orr.w	r2, r3, #16
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	2200      	movs	r2, #0
 8017c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	e01e      	b.n	8017cdc <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	681a      	ldr	r2, [r3, #0]
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017cac:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	681a      	ldr	r2, [r3, #0]
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017cbc:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	685a      	ldr	r2, [r3, #4]
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017cd4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	e000      	b.n	8017cdc <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8017cda:	2302      	movs	r3, #2
  }
}
 8017cdc:	4618      	mov	r0, r3
 8017cde:	3718      	adds	r7, #24
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}
 8017ce4:	20000054 	.word	0x20000054
 8017ce8:	14f8b589 	.word	0x14f8b589
 8017cec:	ffff0000 	.word	0xffff0000
 8017cf0:	08019465 	.word	0x08019465
 8017cf4:	0801960f 	.word	0x0801960f

08017cf8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b088      	sub	sp, #32
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8017d00:	2300      	movs	r3, #0
 8017d02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	685b      	ldr	r3, [r3, #4]
 8017d0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017d18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017d20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017d22:	7bfb      	ldrb	r3, [r7, #15]
 8017d24:	2b10      	cmp	r3, #16
 8017d26:	d003      	beq.n	8017d30 <HAL_I2C_EV_IRQHandler+0x38>
 8017d28:	7bfb      	ldrb	r3, [r7, #15]
 8017d2a:	2b40      	cmp	r3, #64	; 0x40
 8017d2c:	f040 80bd 	bne.w	8017eaa <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	699b      	ldr	r3, [r3, #24]
 8017d36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	695b      	ldr	r3, [r3, #20]
 8017d3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017d40:	69fb      	ldr	r3, [r7, #28]
 8017d42:	f003 0301 	and.w	r3, r3, #1
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d10d      	bne.n	8017d66 <HAL_I2C_EV_IRQHandler+0x6e>
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017d50:	d003      	beq.n	8017d5a <HAL_I2C_EV_IRQHandler+0x62>
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017d58:	d101      	bne.n	8017d5e <HAL_I2C_EV_IRQHandler+0x66>
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	e000      	b.n	8017d60 <HAL_I2C_EV_IRQHandler+0x68>
 8017d5e:	2300      	movs	r3, #0
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	f000 812e 	beq.w	8017fc2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017d66:	69fb      	ldr	r3, [r7, #28]
 8017d68:	f003 0301 	and.w	r3, r3, #1
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d00c      	beq.n	8017d8a <HAL_I2C_EV_IRQHandler+0x92>
 8017d70:	697b      	ldr	r3, [r7, #20]
 8017d72:	0a5b      	lsrs	r3, r3, #9
 8017d74:	f003 0301 	and.w	r3, r3, #1
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d006      	beq.n	8017d8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8017d7c:	6878      	ldr	r0, [r7, #4]
 8017d7e:	f001 fd5d 	bl	801983c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f000 fd58 	bl	8018838 <I2C_Master_SB>
 8017d88:	e08e      	b.n	8017ea8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	08db      	lsrs	r3, r3, #3
 8017d8e:	f003 0301 	and.w	r3, r3, #1
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d009      	beq.n	8017daa <HAL_I2C_EV_IRQHandler+0xb2>
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	0a5b      	lsrs	r3, r3, #9
 8017d9a:	f003 0301 	and.w	r3, r3, #1
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d003      	beq.n	8017daa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8017da2:	6878      	ldr	r0, [r7, #4]
 8017da4:	f000 fdce 	bl	8018944 <I2C_Master_ADD10>
 8017da8:	e07e      	b.n	8017ea8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	085b      	lsrs	r3, r3, #1
 8017dae:	f003 0301 	and.w	r3, r3, #1
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d009      	beq.n	8017dca <HAL_I2C_EV_IRQHandler+0xd2>
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	0a5b      	lsrs	r3, r3, #9
 8017dba:	f003 0301 	and.w	r3, r3, #1
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d003      	beq.n	8017dca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f000 fde8 	bl	8018998 <I2C_Master_ADDR>
 8017dc8:	e06e      	b.n	8017ea8 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	089b      	lsrs	r3, r3, #2
 8017dce:	f003 0301 	and.w	r3, r3, #1
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d037      	beq.n	8017e46 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017de4:	f000 80ef 	beq.w	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017de8:	69fb      	ldr	r3, [r7, #28]
 8017dea:	09db      	lsrs	r3, r3, #7
 8017dec:	f003 0301 	and.w	r3, r3, #1
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d00f      	beq.n	8017e14 <HAL_I2C_EV_IRQHandler+0x11c>
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	0a9b      	lsrs	r3, r3, #10
 8017df8:	f003 0301 	and.w	r3, r3, #1
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d009      	beq.n	8017e14 <HAL_I2C_EV_IRQHandler+0x11c>
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	089b      	lsrs	r3, r3, #2
 8017e04:	f003 0301 	and.w	r3, r3, #1
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d103      	bne.n	8017e14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	f000 f9e5 	bl	80181dc <I2C_MasterTransmit_TXE>
 8017e12:	e049      	b.n	8017ea8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	089b      	lsrs	r3, r3, #2
 8017e18:	f003 0301 	and.w	r3, r3, #1
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f000 80d2 	beq.w	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	0a5b      	lsrs	r3, r3, #9
 8017e26:	f003 0301 	and.w	r3, r3, #1
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f000 80cb 	beq.w	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8017e30:	7bfb      	ldrb	r3, [r7, #15]
 8017e32:	2b10      	cmp	r3, #16
 8017e34:	d103      	bne.n	8017e3e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f000 fa6c 	bl	8018314 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e3c:	e0c3      	b.n	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f000 fad0 	bl	80183e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e44:	e0bf      	b.n	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017e54:	f000 80b7 	beq.w	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017e58:	69fb      	ldr	r3, [r7, #28]
 8017e5a:	099b      	lsrs	r3, r3, #6
 8017e5c:	f003 0301 	and.w	r3, r3, #1
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d00f      	beq.n	8017e84 <HAL_I2C_EV_IRQHandler+0x18c>
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	0a9b      	lsrs	r3, r3, #10
 8017e68:	f003 0301 	and.w	r3, r3, #1
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d009      	beq.n	8017e84 <HAL_I2C_EV_IRQHandler+0x18c>
 8017e70:	69fb      	ldr	r3, [r7, #28]
 8017e72:	089b      	lsrs	r3, r3, #2
 8017e74:	f003 0301 	and.w	r3, r3, #1
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d103      	bne.n	8017e84 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f000 fb40 	bl	8018502 <I2C_MasterReceive_RXNE>
 8017e82:	e011      	b.n	8017ea8 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	089b      	lsrs	r3, r3, #2
 8017e88:	f003 0301 	and.w	r3, r3, #1
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	f000 809a 	beq.w	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	0a5b      	lsrs	r3, r3, #9
 8017e96:	f003 0301 	and.w	r3, r3, #1
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	f000 8093 	beq.w	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	f000 fbdf 	bl	8018664 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ea6:	e08e      	b.n	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8017ea8:	e08d      	b.n	8017fc6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d004      	beq.n	8017ebc <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	695b      	ldr	r3, [r3, #20]
 8017eb8:	61fb      	str	r3, [r7, #28]
 8017eba:	e007      	b.n	8017ecc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	699b      	ldr	r3, [r3, #24]
 8017ec2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	695b      	ldr	r3, [r3, #20]
 8017eca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ecc:	69fb      	ldr	r3, [r7, #28]
 8017ece:	085b      	lsrs	r3, r3, #1
 8017ed0:	f003 0301 	and.w	r3, r3, #1
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d012      	beq.n	8017efe <HAL_I2C_EV_IRQHandler+0x206>
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	0a5b      	lsrs	r3, r3, #9
 8017edc:	f003 0301 	and.w	r3, r3, #1
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d00c      	beq.n	8017efe <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d003      	beq.n	8017ef4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	699b      	ldr	r3, [r3, #24]
 8017ef2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8017ef4:	69b9      	ldr	r1, [r7, #24]
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	f000 ff9d 	bl	8018e36 <I2C_Slave_ADDR>
 8017efc:	e066      	b.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017efe:	69fb      	ldr	r3, [r7, #28]
 8017f00:	091b      	lsrs	r3, r3, #4
 8017f02:	f003 0301 	and.w	r3, r3, #1
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d009      	beq.n	8017f1e <HAL_I2C_EV_IRQHandler+0x226>
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	0a5b      	lsrs	r3, r3, #9
 8017f0e:	f003 0301 	and.w	r3, r3, #1
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d003      	beq.n	8017f1e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8017f16:	6878      	ldr	r0, [r7, #4]
 8017f18:	f000 ffd2 	bl	8018ec0 <I2C_Slave_STOPF>
 8017f1c:	e056      	b.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017f1e:	7bbb      	ldrb	r3, [r7, #14]
 8017f20:	2b21      	cmp	r3, #33	; 0x21
 8017f22:	d002      	beq.n	8017f2a <HAL_I2C_EV_IRQHandler+0x232>
 8017f24:	7bbb      	ldrb	r3, [r7, #14]
 8017f26:	2b29      	cmp	r3, #41	; 0x29
 8017f28:	d125      	bne.n	8017f76 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f2a:	69fb      	ldr	r3, [r7, #28]
 8017f2c:	09db      	lsrs	r3, r3, #7
 8017f2e:	f003 0301 	and.w	r3, r3, #1
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d00f      	beq.n	8017f56 <HAL_I2C_EV_IRQHandler+0x25e>
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	0a9b      	lsrs	r3, r3, #10
 8017f3a:	f003 0301 	and.w	r3, r3, #1
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d009      	beq.n	8017f56 <HAL_I2C_EV_IRQHandler+0x25e>
 8017f42:	69fb      	ldr	r3, [r7, #28]
 8017f44:	089b      	lsrs	r3, r3, #2
 8017f46:	f003 0301 	and.w	r3, r3, #1
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d103      	bne.n	8017f56 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f000 feb3 	bl	8018cba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f54:	e039      	b.n	8017fca <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	089b      	lsrs	r3, r3, #2
 8017f5a:	f003 0301 	and.w	r3, r3, #1
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d033      	beq.n	8017fca <HAL_I2C_EV_IRQHandler+0x2d2>
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	0a5b      	lsrs	r3, r3, #9
 8017f66:	f003 0301 	and.w	r3, r3, #1
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d02d      	beq.n	8017fca <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f000 fee0 	bl	8018d34 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f74:	e029      	b.n	8017fca <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017f76:	69fb      	ldr	r3, [r7, #28]
 8017f78:	099b      	lsrs	r3, r3, #6
 8017f7a:	f003 0301 	and.w	r3, r3, #1
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d00f      	beq.n	8017fa2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	0a9b      	lsrs	r3, r3, #10
 8017f86:	f003 0301 	and.w	r3, r3, #1
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d009      	beq.n	8017fa2 <HAL_I2C_EV_IRQHandler+0x2aa>
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	089b      	lsrs	r3, r3, #2
 8017f92:	f003 0301 	and.w	r3, r3, #1
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d103      	bne.n	8017fa2 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8017f9a:	6878      	ldr	r0, [r7, #4]
 8017f9c:	f000 feeb 	bl	8018d76 <I2C_SlaveReceive_RXNE>
 8017fa0:	e014      	b.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017fa2:	69fb      	ldr	r3, [r7, #28]
 8017fa4:	089b      	lsrs	r3, r3, #2
 8017fa6:	f003 0301 	and.w	r3, r3, #1
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d00e      	beq.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	0a5b      	lsrs	r3, r3, #9
 8017fb2:	f003 0301 	and.w	r3, r3, #1
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d008      	beq.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f000 ff19 	bl	8018df2 <I2C_SlaveReceive_BTF>
 8017fc0:	e004      	b.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8017fc2:	bf00      	nop
 8017fc4:	e002      	b.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017fc6:	bf00      	nop
 8017fc8:	e000      	b.n	8017fcc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017fca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8017fcc:	3720      	adds	r7, #32
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}

08017fd2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017fd2:	b580      	push	{r7, lr}
 8017fd4:	b08a      	sub	sp, #40	; 0x28
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	695b      	ldr	r3, [r3, #20]
 8017fe0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	685b      	ldr	r3, [r3, #4]
 8017fe8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8017fea:	2300      	movs	r3, #0
 8017fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ff4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017ff6:	6a3b      	ldr	r3, [r7, #32]
 8017ff8:	0a1b      	lsrs	r3, r3, #8
 8017ffa:	f003 0301 	and.w	r3, r3, #1
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00e      	beq.n	8018020 <HAL_I2C_ER_IRQHandler+0x4e>
 8018002:	69fb      	ldr	r3, [r7, #28]
 8018004:	0a1b      	lsrs	r3, r3, #8
 8018006:	f003 0301 	and.w	r3, r3, #1
 801800a:	2b00      	cmp	r3, #0
 801800c:	d008      	beq.n	8018020 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018010:	f043 0301 	orr.w	r3, r3, #1
 8018014:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801801e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018020:	6a3b      	ldr	r3, [r7, #32]
 8018022:	0a5b      	lsrs	r3, r3, #9
 8018024:	f003 0301 	and.w	r3, r3, #1
 8018028:	2b00      	cmp	r3, #0
 801802a:	d00e      	beq.n	801804a <HAL_I2C_ER_IRQHandler+0x78>
 801802c:	69fb      	ldr	r3, [r7, #28]
 801802e:	0a1b      	lsrs	r3, r3, #8
 8018030:	f003 0301 	and.w	r3, r3, #1
 8018034:	2b00      	cmp	r3, #0
 8018036:	d008      	beq.n	801804a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803a:	f043 0302 	orr.w	r3, r3, #2
 801803e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8018048:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801804a:	6a3b      	ldr	r3, [r7, #32]
 801804c:	0a9b      	lsrs	r3, r3, #10
 801804e:	f003 0301 	and.w	r3, r3, #1
 8018052:	2b00      	cmp	r3, #0
 8018054:	d03f      	beq.n	80180d6 <HAL_I2C_ER_IRQHandler+0x104>
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	0a1b      	lsrs	r3, r3, #8
 801805a:	f003 0301 	and.w	r3, r3, #1
 801805e:	2b00      	cmp	r3, #0
 8018060:	d039      	beq.n	80180d6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8018062:	7efb      	ldrb	r3, [r7, #27]
 8018064:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801806a:	b29b      	uxth	r3, r3
 801806c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018074:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801807a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801807c:	7ebb      	ldrb	r3, [r7, #26]
 801807e:	2b20      	cmp	r3, #32
 8018080:	d112      	bne.n	80180a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d10f      	bne.n	80180a8 <HAL_I2C_ER_IRQHandler+0xd6>
 8018088:	7cfb      	ldrb	r3, [r7, #19]
 801808a:	2b21      	cmp	r3, #33	; 0x21
 801808c:	d008      	beq.n	80180a0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801808e:	7cfb      	ldrb	r3, [r7, #19]
 8018090:	2b29      	cmp	r3, #41	; 0x29
 8018092:	d005      	beq.n	80180a0 <HAL_I2C_ER_IRQHandler+0xce>
 8018094:	7cfb      	ldrb	r3, [r7, #19]
 8018096:	2b28      	cmp	r3, #40	; 0x28
 8018098:	d106      	bne.n	80180a8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	2b21      	cmp	r3, #33	; 0x21
 801809e:	d103      	bne.n	80180a8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80180a0:	6878      	ldr	r0, [r7, #4]
 80180a2:	f001 f83d 	bl	8019120 <I2C_Slave_AF>
 80180a6:	e016      	b.n	80180d6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80180b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80180b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b4:	f043 0304 	orr.w	r3, r3, #4
 80180b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80180ba:	7efb      	ldrb	r3, [r7, #27]
 80180bc:	2b10      	cmp	r3, #16
 80180be:	d002      	beq.n	80180c6 <HAL_I2C_ER_IRQHandler+0xf4>
 80180c0:	7efb      	ldrb	r3, [r7, #27]
 80180c2:	2b40      	cmp	r3, #64	; 0x40
 80180c4:	d107      	bne.n	80180d6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	681a      	ldr	r2, [r3, #0]
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80180d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80180d6:	6a3b      	ldr	r3, [r7, #32]
 80180d8:	0adb      	lsrs	r3, r3, #11
 80180da:	f003 0301 	and.w	r3, r3, #1
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d00e      	beq.n	8018100 <HAL_I2C_ER_IRQHandler+0x12e>
 80180e2:	69fb      	ldr	r3, [r7, #28]
 80180e4:	0a1b      	lsrs	r3, r3, #8
 80180e6:	f003 0301 	and.w	r3, r3, #1
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d008      	beq.n	8018100 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80180ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f0:	f043 0308 	orr.w	r3, r3, #8
 80180f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80180fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8018100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018102:	2b00      	cmp	r3, #0
 8018104:	d008      	beq.n	8018118 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801810c:	431a      	orrs	r2, r3
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8018112:	6878      	ldr	r0, [r7, #4]
 8018114:	f001 f874 	bl	8019200 <I2C_ITError>
  }
}
 8018118:	bf00      	nop
 801811a:	3728      	adds	r7, #40	; 0x28
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}

08018120 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018120:	b480      	push	{r7}
 8018122:	b083      	sub	sp, #12
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018128:	bf00      	nop
 801812a:	370c      	adds	r7, #12
 801812c:	46bd      	mov	sp, r7
 801812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018132:	4770      	bx	lr

08018134 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018134:	b480      	push	{r7}
 8018136:	b083      	sub	sp, #12
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801813c:	bf00      	nop
 801813e:	370c      	adds	r7, #12
 8018140:	46bd      	mov	sp, r7
 8018142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018146:	4770      	bx	lr

08018148 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018148:	b480      	push	{r7}
 801814a:	b083      	sub	sp, #12
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8018150:	bf00      	nop
 8018152:	370c      	adds	r7, #12
 8018154:	46bd      	mov	sp, r7
 8018156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815a:	4770      	bx	lr

0801815c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801815c:	b480      	push	{r7}
 801815e:	b083      	sub	sp, #12
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
 8018164:	460b      	mov	r3, r1
 8018166:	70fb      	strb	r3, [r7, #3]
 8018168:	4613      	mov	r3, r2
 801816a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801816c:	bf00      	nop
 801816e:	370c      	adds	r7, #12
 8018170:	46bd      	mov	sp, r7
 8018172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018176:	4770      	bx	lr

08018178 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018178:	b480      	push	{r7}
 801817a:	b083      	sub	sp, #12
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8018180:	bf00      	nop
 8018182:	370c      	adds	r7, #12
 8018184:	46bd      	mov	sp, r7
 8018186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818a:	4770      	bx	lr

0801818c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801818c:	b480      	push	{r7}
 801818e:	b083      	sub	sp, #12
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8018194:	bf00      	nop
 8018196:	370c      	adds	r7, #12
 8018198:	46bd      	mov	sp, r7
 801819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819e:	4770      	bx	lr

080181a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80181a0:	b480      	push	{r7}
 80181a2:	b083      	sub	sp, #12
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80181a8:	bf00      	nop
 80181aa:	370c      	adds	r7, #12
 80181ac:	46bd      	mov	sp, r7
 80181ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b2:	4770      	bx	lr

080181b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80181b4:	b480      	push	{r7}
 80181b6:	b083      	sub	sp, #12
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80181bc:	bf00      	nop
 80181be:	370c      	adds	r7, #12
 80181c0:	46bd      	mov	sp, r7
 80181c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c6:	4770      	bx	lr

080181c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80181c8:	b480      	push	{r7}
 80181ca:	b083      	sub	sp, #12
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80181d0:	bf00      	nop
 80181d2:	370c      	adds	r7, #12
 80181d4:	46bd      	mov	sp, r7
 80181d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181da:	4770      	bx	lr

080181dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b084      	sub	sp, #16
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80181ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80181f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d150      	bne.n	80182a4 <I2C_MasterTransmit_TXE+0xc8>
 8018202:	7bfb      	ldrb	r3, [r7, #15]
 8018204:	2b21      	cmp	r3, #33	; 0x21
 8018206:	d14d      	bne.n	80182a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	2b08      	cmp	r3, #8
 801820c:	d01d      	beq.n	801824a <I2C_MasterTransmit_TXE+0x6e>
 801820e:	68bb      	ldr	r3, [r7, #8]
 8018210:	2b20      	cmp	r3, #32
 8018212:	d01a      	beq.n	801824a <I2C_MasterTransmit_TXE+0x6e>
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801821a:	d016      	beq.n	801824a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	685a      	ldr	r2, [r3, #4]
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801822a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2211      	movs	r2, #17
 8018230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	2200      	movs	r2, #0
 8018236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2220      	movs	r2, #32
 801823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f7ff ff6c 	bl	8018120 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018248:	e060      	b.n	801830c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	685a      	ldr	r2, [r3, #4]
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018258:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	681a      	ldr	r2, [r3, #0]
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018268:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2200      	movs	r2, #0
 801826e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2220      	movs	r2, #32
 8018274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b40      	cmp	r3, #64	; 0x40
 8018282:	d107      	bne.n	8018294 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	2200      	movs	r2, #0
 8018288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f7ff ff7d 	bl	801818c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018292:	e03b      	b.n	801830c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2200      	movs	r2, #0
 8018298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	f7ff ff3f 	bl	8018120 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80182a2:	e033      	b.n	801830c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80182a4:	7bfb      	ldrb	r3, [r7, #15]
 80182a6:	2b21      	cmp	r3, #33	; 0x21
 80182a8:	d005      	beq.n	80182b6 <I2C_MasterTransmit_TXE+0xda>
 80182aa:	7bbb      	ldrb	r3, [r7, #14]
 80182ac:	2b40      	cmp	r3, #64	; 0x40
 80182ae:	d12d      	bne.n	801830c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80182b0:	7bfb      	ldrb	r3, [r7, #15]
 80182b2:	2b22      	cmp	r3, #34	; 0x22
 80182b4:	d12a      	bne.n	801830c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d108      	bne.n	80182d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	685a      	ldr	r2, [r3, #4]
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80182ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80182d0:	e01c      	b.n	801830c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80182d8:	b2db      	uxtb	r3, r3
 80182da:	2b40      	cmp	r3, #64	; 0x40
 80182dc:	d103      	bne.n	80182e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80182de:	6878      	ldr	r0, [r7, #4]
 80182e0:	f000 f880 	bl	80183e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80182e4:	e012      	b.n	801830c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182ea:	781a      	ldrb	r2, [r3, #0]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182f6:	1c5a      	adds	r2, r3, #1
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018300:	b29b      	uxth	r3, r3
 8018302:	3b01      	subs	r3, #1
 8018304:	b29a      	uxth	r2, r3
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801830a:	e7ff      	b.n	801830c <I2C_MasterTransmit_TXE+0x130>
 801830c:	bf00      	nop
 801830e:	3710      	adds	r7, #16
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b084      	sub	sp, #16
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018320:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018328:	b2db      	uxtb	r3, r3
 801832a:	2b21      	cmp	r3, #33	; 0x21
 801832c:	d156      	bne.n	80183dc <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018332:	b29b      	uxth	r3, r3
 8018334:	2b00      	cmp	r3, #0
 8018336:	d012      	beq.n	801835e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801833c:	781a      	ldrb	r2, [r3, #0]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018348:	1c5a      	adds	r2, r3, #1
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018352:	b29b      	uxth	r3, r3
 8018354:	3b01      	subs	r3, #1
 8018356:	b29a      	uxth	r2, r3
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801835c:	e03e      	b.n	80183dc <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	2b08      	cmp	r3, #8
 8018362:	d01d      	beq.n	80183a0 <I2C_MasterTransmit_BTF+0x8c>
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	2b20      	cmp	r3, #32
 8018368:	d01a      	beq.n	80183a0 <I2C_MasterTransmit_BTF+0x8c>
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018370:	d016      	beq.n	80183a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	685a      	ldr	r2, [r3, #4]
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018380:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	2211      	movs	r2, #17
 8018386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2200      	movs	r2, #0
 801838c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	2220      	movs	r2, #32
 8018394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018398:	6878      	ldr	r0, [r7, #4]
 801839a:	f7ff fec1 	bl	8018120 <HAL_I2C_MasterTxCpltCallback>
}
 801839e:	e01d      	b.n	80183dc <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	685a      	ldr	r2, [r3, #4]
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80183ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	681a      	ldr	r2, [r3, #0]
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80183be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	2200      	movs	r2, #0
 80183c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2220      	movs	r2, #32
 80183ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	2200      	movs	r2, #0
 80183d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80183d6:	6878      	ldr	r0, [r7, #4]
 80183d8:	f7ff fea2 	bl	8018120 <HAL_I2C_MasterTxCpltCallback>
}
 80183dc:	bf00      	nop
 80183de:	3710      	adds	r7, #16
 80183e0:	46bd      	mov	sp, r7
 80183e2:	bd80      	pop	{r7, pc}

080183e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b084      	sub	sp, #16
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d11d      	bne.n	8018438 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018400:	2b01      	cmp	r3, #1
 8018402:	d10b      	bne.n	801841c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018408:	b2da      	uxtb	r2, r3
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018414:	1c9a      	adds	r2, r3, #2
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801841a:	e06e      	b.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018420:	b29b      	uxth	r3, r3
 8018422:	121b      	asrs	r3, r3, #8
 8018424:	b2da      	uxtb	r2, r3
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018430:	1c5a      	adds	r2, r3, #1
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018436:	e060      	b.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801843c:	2b01      	cmp	r3, #1
 801843e:	d10b      	bne.n	8018458 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018444:	b2da      	uxtb	r2, r3
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018450:	1c5a      	adds	r2, r3, #1
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018456:	e050      	b.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801845c:	2b02      	cmp	r3, #2
 801845e:	d14c      	bne.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018460:	7bfb      	ldrb	r3, [r7, #15]
 8018462:	2b22      	cmp	r3, #34	; 0x22
 8018464:	d108      	bne.n	8018478 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	681a      	ldr	r2, [r3, #0]
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018474:	601a      	str	r2, [r3, #0]
}
 8018476:	e040      	b.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801847c:	b29b      	uxth	r3, r3
 801847e:	2b00      	cmp	r3, #0
 8018480:	d015      	beq.n	80184ae <I2C_MemoryTransmit_TXE_BTF+0xca>
 8018482:	7bfb      	ldrb	r3, [r7, #15]
 8018484:	2b21      	cmp	r3, #33	; 0x21
 8018486:	d112      	bne.n	80184ae <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801848c:	781a      	ldrb	r2, [r3, #0]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018498:	1c5a      	adds	r2, r3, #1
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	3b01      	subs	r3, #1
 80184a6:	b29a      	uxth	r2, r3
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80184ac:	e025      	b.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d120      	bne.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
 80184b8:	7bfb      	ldrb	r3, [r7, #15]
 80184ba:	2b21      	cmp	r3, #33	; 0x21
 80184bc:	d11d      	bne.n	80184fa <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	685a      	ldr	r2, [r3, #4]
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80184cc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80184dc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2200      	movs	r2, #0
 80184e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2220      	movs	r2, #32
 80184e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2200      	movs	r2, #0
 80184f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80184f4:	6878      	ldr	r0, [r7, #4]
 80184f6:	f7ff fe49 	bl	801818c <HAL_I2C_MemTxCpltCallback>
}
 80184fa:	bf00      	nop
 80184fc:	3710      	adds	r7, #16
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}

08018502 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018502:	b580      	push	{r7, lr}
 8018504:	b084      	sub	sp, #16
 8018506:	af00      	add	r7, sp, #0
 8018508:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018510:	b2db      	uxtb	r3, r3
 8018512:	2b22      	cmp	r3, #34	; 0x22
 8018514:	f040 80a2 	bne.w	801865c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801851c:	b29b      	uxth	r3, r3
 801851e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	2b03      	cmp	r3, #3
 8018524:	d921      	bls.n	801856a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	691a      	ldr	r2, [r3, #16]
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018530:	b2d2      	uxtb	r2, r2
 8018532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018538:	1c5a      	adds	r2, r3, #1
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018542:	b29b      	uxth	r3, r3
 8018544:	3b01      	subs	r3, #1
 8018546:	b29a      	uxth	r2, r3
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018550:	b29b      	uxth	r3, r3
 8018552:	2b03      	cmp	r3, #3
 8018554:	f040 8082 	bne.w	801865c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	685a      	ldr	r2, [r3, #4]
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018566:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8018568:	e078      	b.n	801865c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801856e:	2b02      	cmp	r3, #2
 8018570:	d074      	beq.n	801865c <I2C_MasterReceive_RXNE+0x15a>
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	2b01      	cmp	r3, #1
 8018576:	d002      	beq.n	801857e <I2C_MasterReceive_RXNE+0x7c>
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d16e      	bne.n	801865c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801857e:	6878      	ldr	r0, [r7, #4]
 8018580:	f001 f92a 	bl	80197d8 <I2C_WaitOnSTOPRequestThroughIT>
 8018584:	4603      	mov	r3, r0
 8018586:	2b00      	cmp	r3, #0
 8018588:	d142      	bne.n	8018610 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	681a      	ldr	r2, [r3, #0]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018598:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	685a      	ldr	r2, [r3, #4]
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80185a8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	691a      	ldr	r2, [r3, #16]
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185b4:	b2d2      	uxtb	r2, r2
 80185b6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185bc:	1c5a      	adds	r2, r3, #1
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80185c6:	b29b      	uxth	r3, r3
 80185c8:	3b01      	subs	r3, #1
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2220      	movs	r2, #32
 80185d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	2b40      	cmp	r3, #64	; 0x40
 80185e2:	d10a      	bne.n	80185fa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2200      	movs	r2, #0
 80185e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	2200      	movs	r2, #0
 80185f0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80185f2:	6878      	ldr	r0, [r7, #4]
 80185f4:	f7ff fdd4 	bl	80181a0 <HAL_I2C_MemRxCpltCallback>
}
 80185f8:	e030      	b.n	801865c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2200      	movs	r2, #0
 80185fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	2212      	movs	r2, #18
 8018606:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7f6 f94f 	bl	800e8ac <HAL_I2C_MasterRxCpltCallback>
}
 801860e:	e025      	b.n	801865c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	685a      	ldr	r2, [r3, #4]
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801861e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	691a      	ldr	r2, [r3, #16]
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801862a:	b2d2      	uxtb	r2, r2
 801862c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018632:	1c5a      	adds	r2, r3, #1
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801863c:	b29b      	uxth	r3, r3
 801863e:	3b01      	subs	r3, #1
 8018640:	b29a      	uxth	r2, r3
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2220      	movs	r2, #32
 801864a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2200      	movs	r2, #0
 8018652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018656:	6878      	ldr	r0, [r7, #4]
 8018658:	f7ff fdac 	bl	80181b4 <HAL_I2C_ErrorCallback>
}
 801865c:	bf00      	nop
 801865e:	3710      	adds	r7, #16
 8018660:	46bd      	mov	sp, r7
 8018662:	bd80      	pop	{r7, pc}

08018664 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b084      	sub	sp, #16
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018670:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018676:	b29b      	uxth	r3, r3
 8018678:	2b04      	cmp	r3, #4
 801867a:	d11b      	bne.n	80186b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	685a      	ldr	r2, [r3, #4]
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801868a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	691a      	ldr	r2, [r3, #16]
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018696:	b2d2      	uxtb	r2, r2
 8018698:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801869e:	1c5a      	adds	r2, r3, #1
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186a8:	b29b      	uxth	r3, r3
 80186aa:	3b01      	subs	r3, #1
 80186ac:	b29a      	uxth	r2, r3
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80186b2:	e0bd      	b.n	8018830 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	2b03      	cmp	r3, #3
 80186bc:	d129      	bne.n	8018712 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	685a      	ldr	r2, [r3, #4]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80186cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	2b04      	cmp	r3, #4
 80186d2:	d00a      	beq.n	80186ea <I2C_MasterReceive_BTF+0x86>
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	2b02      	cmp	r3, #2
 80186d8:	d007      	beq.n	80186ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	681a      	ldr	r2, [r3, #0]
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80186e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	691a      	ldr	r2, [r3, #16]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186f4:	b2d2      	uxtb	r2, r2
 80186f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186fc:	1c5a      	adds	r2, r3, #1
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018706:	b29b      	uxth	r3, r3
 8018708:	3b01      	subs	r3, #1
 801870a:	b29a      	uxth	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018710:	e08e      	b.n	8018830 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018716:	b29b      	uxth	r3, r3
 8018718:	2b02      	cmp	r3, #2
 801871a:	d176      	bne.n	801880a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2b01      	cmp	r3, #1
 8018720:	d002      	beq.n	8018728 <I2C_MasterReceive_BTF+0xc4>
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	2b10      	cmp	r3, #16
 8018726:	d108      	bne.n	801873a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	681a      	ldr	r2, [r3, #0]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018736:	601a      	str	r2, [r3, #0]
 8018738:	e019      	b.n	801876e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2b04      	cmp	r3, #4
 801873e:	d002      	beq.n	8018746 <I2C_MasterReceive_BTF+0xe2>
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	2b02      	cmp	r3, #2
 8018744:	d108      	bne.n	8018758 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	681a      	ldr	r2, [r3, #0]
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018754:	601a      	str	r2, [r3, #0]
 8018756:	e00a      	b.n	801876e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	2b10      	cmp	r3, #16
 801875c:	d007      	beq.n	801876e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801876c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	691a      	ldr	r2, [r3, #16]
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018778:	b2d2      	uxtb	r2, r2
 801877a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018780:	1c5a      	adds	r2, r3, #1
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801878a:	b29b      	uxth	r3, r3
 801878c:	3b01      	subs	r3, #1
 801878e:	b29a      	uxth	r2, r3
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	691a      	ldr	r2, [r3, #16]
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801879e:	b2d2      	uxtb	r2, r2
 80187a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a6:	1c5a      	adds	r2, r3, #1
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	3b01      	subs	r3, #1
 80187b4:	b29a      	uxth	r2, r3
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	685a      	ldr	r2, [r3, #4]
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80187c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2220      	movs	r2, #32
 80187ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80187d8:	b2db      	uxtb	r3, r3
 80187da:	2b40      	cmp	r3, #64	; 0x40
 80187dc:	d10a      	bne.n	80187f4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	2200      	movs	r2, #0
 80187e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2200      	movs	r2, #0
 80187ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80187ec:	6878      	ldr	r0, [r7, #4]
 80187ee:	f7ff fcd7 	bl	80181a0 <HAL_I2C_MemRxCpltCallback>
}
 80187f2:	e01d      	b.n	8018830 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2200      	movs	r2, #0
 80187f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2212      	movs	r2, #18
 8018800:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7f6 f852 	bl	800e8ac <HAL_I2C_MasterRxCpltCallback>
}
 8018808:	e012      	b.n	8018830 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	691a      	ldr	r2, [r3, #16]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018814:	b2d2      	uxtb	r2, r2
 8018816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801881c:	1c5a      	adds	r2, r3, #1
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018826:	b29b      	uxth	r3, r3
 8018828:	3b01      	subs	r3, #1
 801882a:	b29a      	uxth	r2, r3
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018830:	bf00      	nop
 8018832:	3710      	adds	r7, #16
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}

08018838 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018838:	b480      	push	{r7}
 801883a:	b083      	sub	sp, #12
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018846:	b2db      	uxtb	r3, r3
 8018848:	2b40      	cmp	r3, #64	; 0x40
 801884a:	d117      	bne.n	801887c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018850:	2b00      	cmp	r3, #0
 8018852:	d109      	bne.n	8018868 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018858:	b2db      	uxtb	r3, r3
 801885a:	461a      	mov	r2, r3
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018864:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018866:	e067      	b.n	8018938 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801886c:	b2db      	uxtb	r3, r3
 801886e:	f043 0301 	orr.w	r3, r3, #1
 8018872:	b2da      	uxtb	r2, r3
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	611a      	str	r2, [r3, #16]
}
 801887a:	e05d      	b.n	8018938 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	691b      	ldr	r3, [r3, #16]
 8018880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018884:	d133      	bne.n	80188ee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801888c:	b2db      	uxtb	r3, r3
 801888e:	2b21      	cmp	r3, #33	; 0x21
 8018890:	d109      	bne.n	80188a6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018896:	b2db      	uxtb	r3, r3
 8018898:	461a      	mov	r2, r3
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80188a2:	611a      	str	r2, [r3, #16]
 80188a4:	e008      	b.n	80188b8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	f043 0301 	orr.w	r3, r3, #1
 80188b0:	b2da      	uxtb	r2, r3
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d004      	beq.n	80188ca <I2C_Master_SB+0x92>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80188c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d108      	bne.n	80188dc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d032      	beq.n	8018938 <I2C_Master_SB+0x100>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d02d      	beq.n	8018938 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	685a      	ldr	r2, [r3, #4]
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80188ea:	605a      	str	r2, [r3, #4]
}
 80188ec:	e024      	b.n	8018938 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d10e      	bne.n	8018914 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	11db      	asrs	r3, r3, #7
 80188fe:	b2db      	uxtb	r3, r3
 8018900:	f003 0306 	and.w	r3, r3, #6
 8018904:	b2db      	uxtb	r3, r3
 8018906:	f063 030f 	orn	r3, r3, #15
 801890a:	b2da      	uxtb	r2, r3
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	611a      	str	r2, [r3, #16]
}
 8018912:	e011      	b.n	8018938 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018918:	2b01      	cmp	r3, #1
 801891a:	d10d      	bne.n	8018938 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018920:	b29b      	uxth	r3, r3
 8018922:	11db      	asrs	r3, r3, #7
 8018924:	b2db      	uxtb	r3, r3
 8018926:	f003 0306 	and.w	r3, r3, #6
 801892a:	b2db      	uxtb	r3, r3
 801892c:	f063 030e 	orn	r3, r3, #14
 8018930:	b2da      	uxtb	r2, r3
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	611a      	str	r2, [r3, #16]
}
 8018938:	bf00      	nop
 801893a:	370c      	adds	r7, #12
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr

08018944 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018944:	b480      	push	{r7}
 8018946:	b083      	sub	sp, #12
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018950:	b2da      	uxtb	r2, r3
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801895c:	2b00      	cmp	r3, #0
 801895e:	d103      	bne.n	8018968 <I2C_Master_ADD10+0x24>
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018964:	2b00      	cmp	r3, #0
 8018966:	d011      	beq.n	801898c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801896c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801896e:	2b00      	cmp	r3, #0
 8018970:	d104      	bne.n	801897c <I2C_Master_ADD10+0x38>
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018978:	2b00      	cmp	r3, #0
 801897a:	d007      	beq.n	801898c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	685a      	ldr	r2, [r3, #4]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801898a:	605a      	str	r2, [r3, #4]
    }
  }
}
 801898c:	bf00      	nop
 801898e:	370c      	adds	r7, #12
 8018990:	46bd      	mov	sp, r7
 8018992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018996:	4770      	bx	lr

08018998 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018998:	b480      	push	{r7}
 801899a:	b091      	sub	sp, #68	; 0x44
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80189a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80189bc:	b2db      	uxtb	r3, r3
 80189be:	2b22      	cmp	r3, #34	; 0x22
 80189c0:	f040 8169 	bne.w	8018c96 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d10f      	bne.n	80189ec <I2C_Master_ADDR+0x54>
 80189cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80189d0:	2b40      	cmp	r3, #64	; 0x40
 80189d2:	d10b      	bne.n	80189ec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80189d4:	2300      	movs	r3, #0
 80189d6:	633b      	str	r3, [r7, #48]	; 0x30
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	695b      	ldr	r3, [r3, #20]
 80189de:	633b      	str	r3, [r7, #48]	; 0x30
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	699b      	ldr	r3, [r3, #24]
 80189e6:	633b      	str	r3, [r7, #48]	; 0x30
 80189e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ea:	e160      	b.n	8018cae <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d11d      	bne.n	8018a30 <I2C_Master_ADDR+0x98>
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	691b      	ldr	r3, [r3, #16]
 80189f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80189fc:	d118      	bne.n	8018a30 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80189fe:	2300      	movs	r3, #0
 8018a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	695b      	ldr	r3, [r3, #20]
 8018a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	699b      	ldr	r3, [r3, #24]
 8018a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	681a      	ldr	r2, [r3, #0]
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018a22:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a28:	1c5a      	adds	r2, r3, #1
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	651a      	str	r2, [r3, #80]	; 0x50
 8018a2e:	e13e      	b.n	8018cae <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d113      	bne.n	8018a62 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	695b      	ldr	r3, [r3, #20]
 8018a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	699b      	ldr	r3, [r3, #24]
 8018a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	681a      	ldr	r2, [r3, #0]
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018a5e:	601a      	str	r2, [r3, #0]
 8018a60:	e115      	b.n	8018c8e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a66:	b29b      	uxth	r3, r3
 8018a68:	2b01      	cmp	r3, #1
 8018a6a:	f040 808a 	bne.w	8018b82 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8018a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018a74:	d137      	bne.n	8018ae6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	681a      	ldr	r2, [r3, #0]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a84:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018a94:	d113      	bne.n	8018abe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	681a      	ldr	r2, [r3, #0]
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018aa4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	695b      	ldr	r3, [r3, #20]
 8018ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	699b      	ldr	r3, [r3, #24]
 8018ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8018aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abc:	e0e7      	b.n	8018c8e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018abe:	2300      	movs	r3, #0
 8018ac0:	623b      	str	r3, [r7, #32]
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	695b      	ldr	r3, [r3, #20]
 8018ac8:	623b      	str	r3, [r7, #32]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	699b      	ldr	r3, [r3, #24]
 8018ad0:	623b      	str	r3, [r7, #32]
 8018ad2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	681a      	ldr	r2, [r3, #0]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018ae2:	601a      	str	r2, [r3, #0]
 8018ae4:	e0d3      	b.n	8018c8e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ae8:	2b08      	cmp	r3, #8
 8018aea:	d02e      	beq.n	8018b4a <I2C_Master_ADDR+0x1b2>
 8018aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aee:	2b20      	cmp	r3, #32
 8018af0:	d02b      	beq.n	8018b4a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018af4:	2b12      	cmp	r3, #18
 8018af6:	d102      	bne.n	8018afe <I2C_Master_ADDR+0x166>
 8018af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018afa:	2b01      	cmp	r3, #1
 8018afc:	d125      	bne.n	8018b4a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b00:	2b04      	cmp	r3, #4
 8018b02:	d00e      	beq.n	8018b22 <I2C_Master_ADDR+0x18a>
 8018b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b06:	2b02      	cmp	r3, #2
 8018b08:	d00b      	beq.n	8018b22 <I2C_Master_ADDR+0x18a>
 8018b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b0c:	2b10      	cmp	r3, #16
 8018b0e:	d008      	beq.n	8018b22 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	681a      	ldr	r2, [r3, #0]
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b1e:	601a      	str	r2, [r3, #0]
 8018b20:	e007      	b.n	8018b32 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	681a      	ldr	r2, [r3, #0]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018b30:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b32:	2300      	movs	r3, #0
 8018b34:	61fb      	str	r3, [r7, #28]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	695b      	ldr	r3, [r3, #20]
 8018b3c:	61fb      	str	r3, [r7, #28]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	699b      	ldr	r3, [r3, #24]
 8018b44:	61fb      	str	r3, [r7, #28]
 8018b46:	69fb      	ldr	r3, [r7, #28]
 8018b48:	e0a1      	b.n	8018c8e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b58:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	61bb      	str	r3, [r7, #24]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	695b      	ldr	r3, [r3, #20]
 8018b64:	61bb      	str	r3, [r7, #24]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	699b      	ldr	r3, [r3, #24]
 8018b6c:	61bb      	str	r3, [r7, #24]
 8018b6e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018b7e:	601a      	str	r2, [r3, #0]
 8018b80:	e085      	b.n	8018c8e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	2b02      	cmp	r3, #2
 8018b8a:	d14d      	bne.n	8018c28 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8018b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b8e:	2b04      	cmp	r3, #4
 8018b90:	d016      	beq.n	8018bc0 <I2C_Master_ADDR+0x228>
 8018b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b94:	2b02      	cmp	r3, #2
 8018b96:	d013      	beq.n	8018bc0 <I2C_Master_ADDR+0x228>
 8018b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9a:	2b10      	cmp	r3, #16
 8018b9c:	d010      	beq.n	8018bc0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018bac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018bbc:	601a      	str	r2, [r3, #0]
 8018bbe:	e007      	b.n	8018bd0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018bce:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018bde:	d117      	bne.n	8018c10 <I2C_Master_ADDR+0x278>
 8018be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018be6:	d00b      	beq.n	8018c00 <I2C_Master_ADDR+0x268>
 8018be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bea:	2b01      	cmp	r3, #1
 8018bec:	d008      	beq.n	8018c00 <I2C_Master_ADDR+0x268>
 8018bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf0:	2b08      	cmp	r3, #8
 8018bf2:	d005      	beq.n	8018c00 <I2C_Master_ADDR+0x268>
 8018bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bf6:	2b10      	cmp	r3, #16
 8018bf8:	d002      	beq.n	8018c00 <I2C_Master_ADDR+0x268>
 8018bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bfc:	2b20      	cmp	r3, #32
 8018bfe:	d107      	bne.n	8018c10 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	685a      	ldr	r2, [r3, #4]
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018c0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c10:	2300      	movs	r3, #0
 8018c12:	617b      	str	r3, [r7, #20]
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	695b      	ldr	r3, [r3, #20]
 8018c1a:	617b      	str	r3, [r7, #20]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	699b      	ldr	r3, [r3, #24]
 8018c22:	617b      	str	r3, [r7, #20]
 8018c24:	697b      	ldr	r3, [r7, #20]
 8018c26:	e032      	b.n	8018c8e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018c36:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	685b      	ldr	r3, [r3, #4]
 8018c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018c46:	d117      	bne.n	8018c78 <I2C_Master_ADDR+0x2e0>
 8018c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018c4e:	d00b      	beq.n	8018c68 <I2C_Master_ADDR+0x2d0>
 8018c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c52:	2b01      	cmp	r3, #1
 8018c54:	d008      	beq.n	8018c68 <I2C_Master_ADDR+0x2d0>
 8018c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c58:	2b08      	cmp	r3, #8
 8018c5a:	d005      	beq.n	8018c68 <I2C_Master_ADDR+0x2d0>
 8018c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c5e:	2b10      	cmp	r3, #16
 8018c60:	d002      	beq.n	8018c68 <I2C_Master_ADDR+0x2d0>
 8018c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c64:	2b20      	cmp	r3, #32
 8018c66:	d107      	bne.n	8018c78 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	685a      	ldr	r2, [r3, #4]
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018c76:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c78:	2300      	movs	r3, #0
 8018c7a:	613b      	str	r3, [r7, #16]
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	695b      	ldr	r3, [r3, #20]
 8018c82:	613b      	str	r3, [r7, #16]
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	699b      	ldr	r3, [r3, #24]
 8018c8a:	613b      	str	r3, [r7, #16]
 8018c8c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	2200      	movs	r2, #0
 8018c92:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8018c94:	e00b      	b.n	8018cae <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018c96:	2300      	movs	r3, #0
 8018c98:	60fb      	str	r3, [r7, #12]
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	695b      	ldr	r3, [r3, #20]
 8018ca0:	60fb      	str	r3, [r7, #12]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	699b      	ldr	r3, [r3, #24]
 8018ca8:	60fb      	str	r3, [r7, #12]
 8018caa:	68fb      	ldr	r3, [r7, #12]
}
 8018cac:	e7ff      	b.n	8018cae <I2C_Master_ADDR+0x316>
 8018cae:	bf00      	nop
 8018cb0:	3744      	adds	r7, #68	; 0x44
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb8:	4770      	bx	lr

08018cba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018cba:	b580      	push	{r7, lr}
 8018cbc:	b084      	sub	sp, #16
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018cc8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d02b      	beq.n	8018d2c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd8:	781a      	ldrb	r2, [r3, #0]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce4:	1c5a      	adds	r2, r3, #1
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	3b01      	subs	r3, #1
 8018cf2:	b29a      	uxth	r2, r3
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cfc:	b29b      	uxth	r3, r3
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d114      	bne.n	8018d2c <I2C_SlaveTransmit_TXE+0x72>
 8018d02:	7bfb      	ldrb	r3, [r7, #15]
 8018d04:	2b29      	cmp	r3, #41	; 0x29
 8018d06:	d111      	bne.n	8018d2c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	685a      	ldr	r2, [r3, #4]
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2221      	movs	r2, #33	; 0x21
 8018d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2228      	movs	r2, #40	; 0x28
 8018d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018d26:	6878      	ldr	r0, [r7, #4]
 8018d28:	f7ff fa04 	bl	8018134 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018d2c:	bf00      	nop
 8018d2e:	3710      	adds	r7, #16
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}

08018d34 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8018d34:	b480      	push	{r7}
 8018d36:	b083      	sub	sp, #12
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d011      	beq.n	8018d6a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d4a:	781a      	ldrb	r2, [r3, #0]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d56:	1c5a      	adds	r2, r3, #1
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d60:	b29b      	uxth	r3, r3
 8018d62:	3b01      	subs	r3, #1
 8018d64:	b29a      	uxth	r2, r3
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018d6a:	bf00      	nop
 8018d6c:	370c      	adds	r7, #12
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d74:	4770      	bx	lr

08018d76 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018d76:	b580      	push	{r7, lr}
 8018d78:	b084      	sub	sp, #16
 8018d7a:	af00      	add	r7, sp, #0
 8018d7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018d84:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d02c      	beq.n	8018dea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	691a      	ldr	r2, [r3, #16]
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d9a:	b2d2      	uxtb	r2, r2
 8018d9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da2:	1c5a      	adds	r2, r3, #1
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	3b01      	subs	r3, #1
 8018db0:	b29a      	uxth	r2, r3
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d114      	bne.n	8018dea <I2C_SlaveReceive_RXNE+0x74>
 8018dc0:	7bfb      	ldrb	r3, [r7, #15]
 8018dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8018dc4:	d111      	bne.n	8018dea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	685a      	ldr	r2, [r3, #4]
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018dd4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2222      	movs	r2, #34	; 0x22
 8018dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2228      	movs	r2, #40	; 0x28
 8018de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018de4:	6878      	ldr	r0, [r7, #4]
 8018de6:	f7ff f9af 	bl	8018148 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018dea:	bf00      	nop
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}

08018df2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018df2:	b480      	push	{r7}
 8018df4:	b083      	sub	sp, #12
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d012      	beq.n	8018e2a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	691a      	ldr	r2, [r3, #16]
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e0e:	b2d2      	uxtb	r2, r2
 8018e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e16:	1c5a      	adds	r2, r3, #1
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	3b01      	subs	r3, #1
 8018e24:	b29a      	uxth	r2, r3
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018e2a:	bf00      	nop
 8018e2c:	370c      	adds	r7, #12
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e34:	4770      	bx	lr

08018e36 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018e36:	b580      	push	{r7, lr}
 8018e38:	b084      	sub	sp, #16
 8018e3a:	af00      	add	r7, sp, #0
 8018e3c:	6078      	str	r0, [r7, #4]
 8018e3e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8018e40:	2300      	movs	r3, #0
 8018e42:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018e50:	2b28      	cmp	r3, #40	; 0x28
 8018e52:	d127      	bne.n	8018ea4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	685a      	ldr	r2, [r3, #4]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e62:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	089b      	lsrs	r3, r3, #2
 8018e68:	f003 0301 	and.w	r3, r3, #1
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d101      	bne.n	8018e74 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8018e70:	2301      	movs	r3, #1
 8018e72:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8018e74:	683b      	ldr	r3, [r7, #0]
 8018e76:	09db      	lsrs	r3, r3, #7
 8018e78:	f003 0301 	and.w	r3, r3, #1
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d103      	bne.n	8018e88 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	68db      	ldr	r3, [r3, #12]
 8018e84:	81bb      	strh	r3, [r7, #12]
 8018e86:	e002      	b.n	8018e8e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	699b      	ldr	r3, [r3, #24]
 8018e8c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	2200      	movs	r2, #0
 8018e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8018e96:	89ba      	ldrh	r2, [r7, #12]
 8018e98:	7bfb      	ldrb	r3, [r7, #15]
 8018e9a:	4619      	mov	r1, r3
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f7ff f95d 	bl	801815c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8018ea2:	e008      	b.n	8018eb6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	f06f 0202 	mvn.w	r2, #2
 8018eac:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8018eb6:	bf00      	nop
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
	...

08018ec0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b084      	sub	sp, #16
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ece:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	685a      	ldr	r2, [r3, #4]
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018ede:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	60bb      	str	r3, [r7, #8]
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	695b      	ldr	r3, [r3, #20]
 8018eea:	60bb      	str	r3, [r7, #8]
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	681a      	ldr	r2, [r3, #0]
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	f042 0201 	orr.w	r2, r2, #1
 8018efa:	601a      	str	r2, [r3, #0]
 8018efc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018f0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	685b      	ldr	r3, [r3, #4]
 8018f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018f1c:	d172      	bne.n	8019004 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018f1e:	7bfb      	ldrb	r3, [r7, #15]
 8018f20:	2b22      	cmp	r3, #34	; 0x22
 8018f22:	d002      	beq.n	8018f2a <I2C_Slave_STOPF+0x6a>
 8018f24:	7bfb      	ldrb	r3, [r7, #15]
 8018f26:	2b2a      	cmp	r3, #42	; 0x2a
 8018f28:	d135      	bne.n	8018f96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	685b      	ldr	r3, [r3, #4]
 8018f32:	b29a      	uxth	r2, r3
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d005      	beq.n	8018f4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f46:	f043 0204 	orr.w	r2, r3, #4
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	685a      	ldr	r2, [r3, #4]
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018f5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7fe f87a 	bl	801705c <HAL_DMA_GetState>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	2b01      	cmp	r3, #1
 8018f6c:	d049      	beq.n	8019002 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f72:	4a69      	ldr	r2, [pc, #420]	; (8019118 <I2C_Slave_STOPF+0x258>)
 8018f74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7fd fec2 	bl	8016d04 <HAL_DMA_Abort_IT>
 8018f80:	4603      	mov	r3, r0
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d03d      	beq.n	8019002 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f8c:	687a      	ldr	r2, [r7, #4]
 8018f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018f90:	4610      	mov	r0, r2
 8018f92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018f94:	e035      	b.n	8019002 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	b29a      	uxth	r2, r3
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d005      	beq.n	8018fba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fb2:	f043 0204 	orr.w	r2, r3, #4
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	685a      	ldr	r2, [r3, #4]
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018fc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7fe f844 	bl	801705c <HAL_DMA_GetState>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	2b01      	cmp	r3, #1
 8018fd8:	d014      	beq.n	8019004 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fde:	4a4e      	ldr	r2, [pc, #312]	; (8019118 <I2C_Slave_STOPF+0x258>)
 8018fe0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	f7fd fe8c 	bl	8016d04 <HAL_DMA_Abort_IT>
 8018fec:	4603      	mov	r3, r0
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d008      	beq.n	8019004 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018ffc:	4610      	mov	r0, r2
 8018ffe:	4798      	blx	r3
 8019000:	e000      	b.n	8019004 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019002:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019008:	b29b      	uxth	r3, r3
 801900a:	2b00      	cmp	r3, #0
 801900c:	d03e      	beq.n	801908c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	695b      	ldr	r3, [r3, #20]
 8019014:	f003 0304 	and.w	r3, r3, #4
 8019018:	2b04      	cmp	r3, #4
 801901a:	d112      	bne.n	8019042 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	691a      	ldr	r2, [r3, #16]
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019026:	b2d2      	uxtb	r2, r2
 8019028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902e:	1c5a      	adds	r2, r3, #1
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019038:	b29b      	uxth	r3, r3
 801903a:	3b01      	subs	r3, #1
 801903c:	b29a      	uxth	r2, r3
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	695b      	ldr	r3, [r3, #20]
 8019048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801904c:	2b40      	cmp	r3, #64	; 0x40
 801904e:	d112      	bne.n	8019076 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	691a      	ldr	r2, [r3, #16]
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801905a:	b2d2      	uxtb	r2, r2
 801905c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019062:	1c5a      	adds	r2, r3, #1
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801906c:	b29b      	uxth	r3, r3
 801906e:	3b01      	subs	r3, #1
 8019070:	b29a      	uxth	r2, r3
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801907a:	b29b      	uxth	r3, r3
 801907c:	2b00      	cmp	r3, #0
 801907e:	d005      	beq.n	801908c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019084:	f043 0204 	orr.w	r2, r3, #4
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019090:	2b00      	cmp	r3, #0
 8019092:	d003      	beq.n	801909c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	f000 f8b3 	bl	8019200 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801909a:	e039      	b.n	8019110 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801909c:	7bfb      	ldrb	r3, [r7, #15]
 801909e:	2b2a      	cmp	r3, #42	; 0x2a
 80190a0:	d109      	bne.n	80190b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	2200      	movs	r2, #0
 80190a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	2228      	movs	r2, #40	; 0x28
 80190ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	f7ff f849 	bl	8018148 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80190bc:	b2db      	uxtb	r3, r3
 80190be:	2b28      	cmp	r3, #40	; 0x28
 80190c0:	d111      	bne.n	80190e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	4a15      	ldr	r2, [pc, #84]	; (801911c <I2C_Slave_STOPF+0x25c>)
 80190c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	2200      	movs	r2, #0
 80190cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2220      	movs	r2, #32
 80190d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	2200      	movs	r2, #0
 80190da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80190de:	6878      	ldr	r0, [r7, #4]
 80190e0:	f7ff f84a 	bl	8018178 <HAL_I2C_ListenCpltCallback>
}
 80190e4:	e014      	b.n	8019110 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190ea:	2b22      	cmp	r3, #34	; 0x22
 80190ec:	d002      	beq.n	80190f4 <I2C_Slave_STOPF+0x234>
 80190ee:	7bfb      	ldrb	r3, [r7, #15]
 80190f0:	2b22      	cmp	r3, #34	; 0x22
 80190f2:	d10d      	bne.n	8019110 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2200      	movs	r2, #0
 80190f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	2220      	movs	r2, #32
 80190fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2200      	movs	r2, #0
 8019106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801910a:	6878      	ldr	r0, [r7, #4]
 801910c:	f7ff f81c 	bl	8018148 <HAL_I2C_SlaveRxCpltCallback>
}
 8019110:	bf00      	nop
 8019112:	3710      	adds	r7, #16
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}
 8019118:	08019689 	.word	0x08019689
 801911c:	ffff0000 	.word	0xffff0000

08019120 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b084      	sub	sp, #16
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801912e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019134:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	2b08      	cmp	r3, #8
 801913a:	d002      	beq.n	8019142 <I2C_Slave_AF+0x22>
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	2b20      	cmp	r3, #32
 8019140:	d129      	bne.n	8019196 <I2C_Slave_AF+0x76>
 8019142:	7bfb      	ldrb	r3, [r7, #15]
 8019144:	2b28      	cmp	r3, #40	; 0x28
 8019146:	d126      	bne.n	8019196 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	4a2c      	ldr	r2, [pc, #176]	; (80191fc <I2C_Slave_AF+0xdc>)
 801914c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	685a      	ldr	r2, [r3, #4]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801915c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019166:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	681a      	ldr	r2, [r3, #0]
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019176:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	2200      	movs	r2, #0
 801917c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	2220      	movs	r2, #32
 8019182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2200      	movs	r2, #0
 801918a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f7fe fff2 	bl	8018178 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8019194:	e02e      	b.n	80191f4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8019196:	7bfb      	ldrb	r3, [r7, #15]
 8019198:	2b21      	cmp	r3, #33	; 0x21
 801919a:	d126      	bne.n	80191ea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	4a17      	ldr	r2, [pc, #92]	; (80191fc <I2C_Slave_AF+0xdc>)
 80191a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2221      	movs	r2, #33	; 0x21
 80191a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2220      	movs	r2, #32
 80191ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2200      	movs	r2, #0
 80191b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	685a      	ldr	r2, [r3, #4]
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80191c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80191d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	681a      	ldr	r2, [r3, #0]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80191e0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f7fe ffa6 	bl	8018134 <HAL_I2C_SlaveTxCpltCallback>
}
 80191e8:	e004      	b.n	80191f4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80191f2:	615a      	str	r2, [r3, #20]
}
 80191f4:	bf00      	nop
 80191f6:	3710      	adds	r7, #16
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	ffff0000 	.word	0xffff0000

08019200 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b084      	sub	sp, #16
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801920e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019216:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019218:	7bbb      	ldrb	r3, [r7, #14]
 801921a:	2b10      	cmp	r3, #16
 801921c:	d002      	beq.n	8019224 <I2C_ITError+0x24>
 801921e:	7bbb      	ldrb	r3, [r7, #14]
 8019220:	2b40      	cmp	r3, #64	; 0x40
 8019222:	d10a      	bne.n	801923a <I2C_ITError+0x3a>
 8019224:	7bfb      	ldrb	r3, [r7, #15]
 8019226:	2b22      	cmp	r3, #34	; 0x22
 8019228:	d107      	bne.n	801923a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	681a      	ldr	r2, [r3, #0]
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019238:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801923a:	7bfb      	ldrb	r3, [r7, #15]
 801923c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019240:	2b28      	cmp	r3, #40	; 0x28
 8019242:	d107      	bne.n	8019254 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	2200      	movs	r2, #0
 8019248:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	2228      	movs	r2, #40	; 0x28
 801924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019252:	e015      	b.n	8019280 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801925e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019262:	d00a      	beq.n	801927a <I2C_ITError+0x7a>
 8019264:	7bfb      	ldrb	r3, [r7, #15]
 8019266:	2b60      	cmp	r3, #96	; 0x60
 8019268:	d007      	beq.n	801927a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	2220      	movs	r2, #32
 801926e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	2200      	movs	r2, #0
 8019276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	2200      	movs	r2, #0
 801927e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	685b      	ldr	r3, [r3, #4]
 8019286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801928a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801928e:	d162      	bne.n	8019356 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	685a      	ldr	r2, [r3, #4]
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801929e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d020      	beq.n	80192f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192b2:	4a6a      	ldr	r2, [pc, #424]	; (801945c <I2C_ITError+0x25c>)
 80192b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7fd fd22 	bl	8016d04 <HAL_DMA_Abort_IT>
 80192c0:	4603      	mov	r3, r0
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	f000 8089 	beq.w	80193da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	f022 0201 	bic.w	r2, r2, #1
 80192d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2220      	movs	r2, #32
 80192dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192e6:	687a      	ldr	r2, [r7, #4]
 80192e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80192ea:	4610      	mov	r0, r2
 80192ec:	4798      	blx	r3
 80192ee:	e074      	b.n	80193da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192f4:	4a59      	ldr	r2, [pc, #356]	; (801945c <I2C_ITError+0x25c>)
 80192f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192fc:	4618      	mov	r0, r3
 80192fe:	f7fd fd01 	bl	8016d04 <HAL_DMA_Abort_IT>
 8019302:	4603      	mov	r3, r0
 8019304:	2b00      	cmp	r3, #0
 8019306:	d068      	beq.n	80193da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	695b      	ldr	r3, [r3, #20]
 801930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019312:	2b40      	cmp	r3, #64	; 0x40
 8019314:	d10b      	bne.n	801932e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	691a      	ldr	r2, [r3, #16]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019320:	b2d2      	uxtb	r2, r2
 8019322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019328:	1c5a      	adds	r2, r3, #1
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	681a      	ldr	r2, [r3, #0]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	f022 0201 	bic.w	r2, r2, #1
 801933c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	2220      	movs	r2, #32
 8019342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801934a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801934c:	687a      	ldr	r2, [r7, #4]
 801934e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019350:	4610      	mov	r0, r2
 8019352:	4798      	blx	r3
 8019354:	e041      	b.n	80193da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801935c:	b2db      	uxtb	r3, r3
 801935e:	2b60      	cmp	r3, #96	; 0x60
 8019360:	d125      	bne.n	80193ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	2220      	movs	r2, #32
 8019366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	2200      	movs	r2, #0
 801936e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	695b      	ldr	r3, [r3, #20]
 8019376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801937a:	2b40      	cmp	r3, #64	; 0x40
 801937c:	d10b      	bne.n	8019396 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	691a      	ldr	r2, [r3, #16]
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019388:	b2d2      	uxtb	r2, r2
 801938a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019390:	1c5a      	adds	r2, r3, #1
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	681a      	ldr	r2, [r3, #0]
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	681b      	ldr	r3, [r3, #0]
 80193a0:	f022 0201 	bic.w	r2, r2, #1
 80193a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80193a6:	6878      	ldr	r0, [r7, #4]
 80193a8:	f7fe ff0e 	bl	80181c8 <HAL_I2C_AbortCpltCallback>
 80193ac:	e015      	b.n	80193da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	695b      	ldr	r3, [r3, #20]
 80193b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80193b8:	2b40      	cmp	r3, #64	; 0x40
 80193ba:	d10b      	bne.n	80193d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	691a      	ldr	r2, [r3, #16]
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193c6:	b2d2      	uxtb	r2, r2
 80193c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193ce:	1c5a      	adds	r2, r3, #1
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80193d4:	6878      	ldr	r0, [r7, #4]
 80193d6:	f7fe feed 	bl	80181b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	f003 0301 	and.w	r3, r3, #1
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d10e      	bne.n	8019408 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80193ea:	68bb      	ldr	r3, [r7, #8]
 80193ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d109      	bne.n	8019408 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d104      	bne.n	8019408 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80193fe:	68bb      	ldr	r3, [r7, #8]
 8019400:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019404:	2b00      	cmp	r3, #0
 8019406:	d007      	beq.n	8019418 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	685a      	ldr	r2, [r3, #4]
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019416:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801941e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019424:	f003 0304 	and.w	r3, r3, #4
 8019428:	2b04      	cmp	r3, #4
 801942a:	d113      	bne.n	8019454 <I2C_ITError+0x254>
 801942c:	7bfb      	ldrb	r3, [r7, #15]
 801942e:	2b28      	cmp	r3, #40	; 0x28
 8019430:	d110      	bne.n	8019454 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	4a0a      	ldr	r2, [pc, #40]	; (8019460 <I2C_ITError+0x260>)
 8019436:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2200      	movs	r2, #0
 801943c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	2220      	movs	r2, #32
 8019442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	2200      	movs	r2, #0
 801944a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801944e:	6878      	ldr	r0, [r7, #4]
 8019450:	f7fe fe92 	bl	8018178 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019454:	bf00      	nop
 8019456:	3710      	adds	r7, #16
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}
 801945c:	08019689 	.word	0x08019689
 8019460:	ffff0000 	.word	0xffff0000

08019464 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b086      	sub	sp, #24
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019470:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019478:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019480:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019482:	697b      	ldr	r3, [r7, #20]
 8019484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019486:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8019488:	697b      	ldr	r3, [r7, #20]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	685a      	ldr	r2, [r3, #4]
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019496:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019498:	697b      	ldr	r3, [r7, #20]
 801949a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801949c:	2b00      	cmp	r3, #0
 801949e:	d003      	beq.n	80194a8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80194a0:	697b      	ldr	r3, [r7, #20]
 80194a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194a4:	2200      	movs	r2, #0
 80194a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80194a8:	697b      	ldr	r3, [r7, #20]
 80194aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d003      	beq.n	80194b8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80194b0:	697b      	ldr	r3, [r7, #20]
 80194b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194b4:	2200      	movs	r2, #0
 80194b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80194b8:	7cfb      	ldrb	r3, [r7, #19]
 80194ba:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80194be:	2b21      	cmp	r3, #33	; 0x21
 80194c0:	d007      	beq.n	80194d2 <I2C_DMAXferCplt+0x6e>
 80194c2:	7cfb      	ldrb	r3, [r7, #19]
 80194c4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80194c8:	2b22      	cmp	r3, #34	; 0x22
 80194ca:	d131      	bne.n	8019530 <I2C_DMAXferCplt+0xcc>
 80194cc:	7cbb      	ldrb	r3, [r7, #18]
 80194ce:	2b20      	cmp	r3, #32
 80194d0:	d12e      	bne.n	8019530 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80194d2:	697b      	ldr	r3, [r7, #20]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	685a      	ldr	r2, [r3, #4]
 80194d8:	697b      	ldr	r3, [r7, #20]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80194e0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80194e2:	697b      	ldr	r3, [r7, #20]
 80194e4:	2200      	movs	r2, #0
 80194e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80194e8:	7cfb      	ldrb	r3, [r7, #19]
 80194ea:	2b29      	cmp	r3, #41	; 0x29
 80194ec:	d10a      	bne.n	8019504 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80194ee:	697b      	ldr	r3, [r7, #20]
 80194f0:	2221      	movs	r2, #33	; 0x21
 80194f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	2228      	movs	r2, #40	; 0x28
 80194f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80194fc:	6978      	ldr	r0, [r7, #20]
 80194fe:	f7fe fe19 	bl	8018134 <HAL_I2C_SlaveTxCpltCallback>
 8019502:	e00c      	b.n	801951e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019504:	7cfb      	ldrb	r3, [r7, #19]
 8019506:	2b2a      	cmp	r3, #42	; 0x2a
 8019508:	d109      	bne.n	801951e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	2222      	movs	r2, #34	; 0x22
 801950e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019510:	697b      	ldr	r3, [r7, #20]
 8019512:	2228      	movs	r2, #40	; 0x28
 8019514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019518:	6978      	ldr	r0, [r7, #20]
 801951a:	f7fe fe15 	bl	8018148 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	685a      	ldr	r2, [r3, #4]
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801952c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801952e:	e06a      	b.n	8019606 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8019530:	697b      	ldr	r3, [r7, #20]
 8019532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019536:	b2db      	uxtb	r3, r3
 8019538:	2b00      	cmp	r3, #0
 801953a:	d064      	beq.n	8019606 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019540:	b29b      	uxth	r3, r3
 8019542:	2b01      	cmp	r3, #1
 8019544:	d107      	bne.n	8019556 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019546:	697b      	ldr	r3, [r7, #20]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	681a      	ldr	r2, [r3, #0]
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019554:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	685a      	ldr	r2, [r3, #4]
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019564:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801956c:	d009      	beq.n	8019582 <I2C_DMAXferCplt+0x11e>
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	2b08      	cmp	r3, #8
 8019572:	d006      	beq.n	8019582 <I2C_DMAXferCplt+0x11e>
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801957a:	d002      	beq.n	8019582 <I2C_DMAXferCplt+0x11e>
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	2b20      	cmp	r3, #32
 8019580:	d107      	bne.n	8019592 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019582:	697b      	ldr	r3, [r7, #20]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	681a      	ldr	r2, [r3, #0]
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019590:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	685a      	ldr	r2, [r3, #4]
 8019598:	697b      	ldr	r3, [r7, #20]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80195a0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	685a      	ldr	r2, [r3, #4]
 80195a8:	697b      	ldr	r3, [r7, #20]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80195b0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	2200      	movs	r2, #0
 80195b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d003      	beq.n	80195c8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80195c0:	6978      	ldr	r0, [r7, #20]
 80195c2:	f7fe fdf7 	bl	80181b4 <HAL_I2C_ErrorCallback>
}
 80195c6:	e01e      	b.n	8019606 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80195c8:	697b      	ldr	r3, [r7, #20]
 80195ca:	2220      	movs	r2, #32
 80195cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80195d6:	b2db      	uxtb	r3, r3
 80195d8:	2b40      	cmp	r3, #64	; 0x40
 80195da:	d10a      	bne.n	80195f2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80195dc:	697b      	ldr	r3, [r7, #20]
 80195de:	2200      	movs	r2, #0
 80195e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80195e4:	697b      	ldr	r3, [r7, #20]
 80195e6:	2200      	movs	r2, #0
 80195e8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80195ea:	6978      	ldr	r0, [r7, #20]
 80195ec:	f7fe fdd8 	bl	80181a0 <HAL_I2C_MemRxCpltCallback>
}
 80195f0:	e009      	b.n	8019606 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	2200      	movs	r2, #0
 80195f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80195fa:	697b      	ldr	r3, [r7, #20]
 80195fc:	2212      	movs	r2, #18
 80195fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8019600:	6978      	ldr	r0, [r7, #20]
 8019602:	f7f5 f953 	bl	800e8ac <HAL_I2C_MasterRxCpltCallback>
}
 8019606:	bf00      	nop
 8019608:	3718      	adds	r7, #24
 801960a:	46bd      	mov	sp, r7
 801960c:	bd80      	pop	{r7, pc}

0801960e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801960e:	b580      	push	{r7, lr}
 8019610:	b084      	sub	sp, #16
 8019612:	af00      	add	r7, sp, #0
 8019614:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801961a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019620:	2b00      	cmp	r3, #0
 8019622:	d003      	beq.n	801962c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019628:	2200      	movs	r2, #0
 801962a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019630:	2b00      	cmp	r3, #0
 8019632:	d003      	beq.n	801963c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019638:	2200      	movs	r2, #0
 801963a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801963c:	6878      	ldr	r0, [r7, #4]
 801963e:	f7fd fd1b 	bl	8017078 <HAL_DMA_GetError>
 8019642:	4603      	mov	r3, r0
 8019644:	2b02      	cmp	r3, #2
 8019646:	d01b      	beq.n	8019680 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	681a      	ldr	r2, [r3, #0]
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019656:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	2200      	movs	r2, #0
 801965c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	2220      	movs	r2, #32
 8019662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	2200      	movs	r2, #0
 801966a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019672:	f043 0210 	orr.w	r2, r3, #16
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801967a:	68f8      	ldr	r0, [r7, #12]
 801967c:	f7fe fd9a 	bl	80181b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019680:	bf00      	nop
 8019682:	3710      	adds	r7, #16
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b086      	sub	sp, #24
 801968c:	af00      	add	r7, sp, #0
 801968e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019690:	2300      	movs	r3, #0
 8019692:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019698:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80196a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80196a2:	4b4b      	ldr	r3, [pc, #300]	; (80197d0 <I2C_DMAAbort+0x148>)
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	08db      	lsrs	r3, r3, #3
 80196a8:	4a4a      	ldr	r2, [pc, #296]	; (80197d4 <I2C_DMAAbort+0x14c>)
 80196aa:	fba2 2303 	umull	r2, r3, r2, r3
 80196ae:	0a1a      	lsrs	r2, r3, #8
 80196b0:	4613      	mov	r3, r2
 80196b2:	009b      	lsls	r3, r3, #2
 80196b4:	4413      	add	r3, r2
 80196b6:	00da      	lsls	r2, r3, #3
 80196b8:	1ad3      	subs	r3, r2, r3
 80196ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d106      	bne.n	80196d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80196c2:	697b      	ldr	r3, [r7, #20]
 80196c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196c6:	f043 0220 	orr.w	r2, r3, #32
 80196ca:	697b      	ldr	r3, [r7, #20]
 80196cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80196ce:	e00a      	b.n	80196e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	3b01      	subs	r3, #1
 80196d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80196e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80196e4:	d0ea      	beq.n	80196bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d003      	beq.n	80196f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196f2:	2200      	movs	r2, #0
 80196f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d003      	beq.n	8019706 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80196fe:	697b      	ldr	r3, [r7, #20]
 8019700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019702:	2200      	movs	r2, #0
 8019704:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	681a      	ldr	r2, [r3, #0]
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019714:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	2200      	movs	r2, #0
 801971a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019720:	2b00      	cmp	r3, #0
 8019722:	d003      	beq.n	801972c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019724:	697b      	ldr	r3, [r7, #20]
 8019726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019728:	2200      	movs	r2, #0
 801972a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801972c:	697b      	ldr	r3, [r7, #20]
 801972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019730:	2b00      	cmp	r3, #0
 8019732:	d003      	beq.n	801973c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019738:	2200      	movs	r2, #0
 801973a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	681a      	ldr	r2, [r3, #0]
 8019742:	697b      	ldr	r3, [r7, #20]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	f022 0201 	bic.w	r2, r2, #1
 801974a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019752:	b2db      	uxtb	r3, r3
 8019754:	2b60      	cmp	r3, #96	; 0x60
 8019756:	d10e      	bne.n	8019776 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	2220      	movs	r2, #32
 801975c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019760:	697b      	ldr	r3, [r7, #20]
 8019762:	2200      	movs	r2, #0
 8019764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019768:	697b      	ldr	r3, [r7, #20]
 801976a:	2200      	movs	r2, #0
 801976c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801976e:	6978      	ldr	r0, [r7, #20]
 8019770:	f7fe fd2a 	bl	80181c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019774:	e027      	b.n	80197c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019776:	7cfb      	ldrb	r3, [r7, #19]
 8019778:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801977c:	2b28      	cmp	r3, #40	; 0x28
 801977e:	d117      	bne.n	80197b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	681a      	ldr	r2, [r3, #0]
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	f042 0201 	orr.w	r2, r2, #1
 801978e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019790:	697b      	ldr	r3, [r7, #20]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	681a      	ldr	r2, [r3, #0]
 8019796:	697b      	ldr	r3, [r7, #20]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801979e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80197a0:	697b      	ldr	r3, [r7, #20]
 80197a2:	2200      	movs	r2, #0
 80197a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	2228      	movs	r2, #40	; 0x28
 80197aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80197ae:	e007      	b.n	80197c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80197b0:	697b      	ldr	r3, [r7, #20]
 80197b2:	2220      	movs	r2, #32
 80197b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80197b8:	697b      	ldr	r3, [r7, #20]
 80197ba:	2200      	movs	r2, #0
 80197bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80197c0:	6978      	ldr	r0, [r7, #20]
 80197c2:	f7fe fcf7 	bl	80181b4 <HAL_I2C_ErrorCallback>
}
 80197c6:	bf00      	nop
 80197c8:	3718      	adds	r7, #24
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bd80      	pop	{r7, pc}
 80197ce:	bf00      	nop
 80197d0:	20000054 	.word	0x20000054
 80197d4:	14f8b589 	.word	0x14f8b589

080197d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80197d8:	b480      	push	{r7}
 80197da:	b085      	sub	sp, #20
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80197e0:	2300      	movs	r3, #0
 80197e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80197e4:	4b13      	ldr	r3, [pc, #76]	; (8019834 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	08db      	lsrs	r3, r3, #3
 80197ea:	4a13      	ldr	r2, [pc, #76]	; (8019838 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80197ec:	fba2 2303 	umull	r2, r3, r2, r3
 80197f0:	0a1a      	lsrs	r2, r3, #8
 80197f2:	4613      	mov	r3, r2
 80197f4:	009b      	lsls	r3, r3, #2
 80197f6:	4413      	add	r3, r2
 80197f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	3b01      	subs	r3, #1
 80197fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d107      	bne.n	8019816 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801980a:	f043 0220 	orr.w	r2, r3, #32
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019812:	2301      	movs	r3, #1
 8019814:	e008      	b.n	8019828 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019824:	d0e9      	beq.n	80197fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019826:	2300      	movs	r3, #0
}
 8019828:	4618      	mov	r0, r3
 801982a:	3714      	adds	r7, #20
 801982c:	46bd      	mov	sp, r7
 801982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019832:	4770      	bx	lr
 8019834:	20000054 	.word	0x20000054
 8019838:	14f8b589 	.word	0x14f8b589

0801983c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801983c:	b480      	push	{r7}
 801983e:	b083      	sub	sp, #12
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019848:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801984c:	d103      	bne.n	8019856 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	2201      	movs	r2, #1
 8019852:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019854:	e007      	b.n	8019866 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801985a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801985e:	d102      	bne.n	8019866 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2208      	movs	r2, #8
 8019864:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019866:	bf00      	nop
 8019868:	370c      	adds	r7, #12
 801986a:	46bd      	mov	sp, r7
 801986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019870:	4770      	bx	lr
	...

08019874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	b086      	sub	sp, #24
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d101      	bne.n	8019886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019882:	2301      	movs	r3, #1
 8019884:	e25b      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	f003 0301 	and.w	r3, r3, #1
 801988e:	2b00      	cmp	r3, #0
 8019890:	d075      	beq.n	801997e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019892:	4ba3      	ldr	r3, [pc, #652]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019894:	689b      	ldr	r3, [r3, #8]
 8019896:	f003 030c 	and.w	r3, r3, #12
 801989a:	2b04      	cmp	r3, #4
 801989c:	d00c      	beq.n	80198b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801989e:	4ba0      	ldr	r3, [pc, #640]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198a0:	689b      	ldr	r3, [r3, #8]
 80198a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80198a6:	2b08      	cmp	r3, #8
 80198a8:	d112      	bne.n	80198d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80198aa:	4b9d      	ldr	r3, [pc, #628]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80198b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80198b6:	d10b      	bne.n	80198d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80198b8:	4b99      	ldr	r3, [pc, #612]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d05b      	beq.n	801997c <HAL_RCC_OscConfig+0x108>
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	685b      	ldr	r3, [r3, #4]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d157      	bne.n	801997c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80198cc:	2301      	movs	r3, #1
 80198ce:	e236      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	685b      	ldr	r3, [r3, #4]
 80198d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80198d8:	d106      	bne.n	80198e8 <HAL_RCC_OscConfig+0x74>
 80198da:	4b91      	ldr	r3, [pc, #580]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	4a90      	ldr	r2, [pc, #576]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80198e4:	6013      	str	r3, [r2, #0]
 80198e6:	e01d      	b.n	8019924 <HAL_RCC_OscConfig+0xb0>
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80198f0:	d10c      	bne.n	801990c <HAL_RCC_OscConfig+0x98>
 80198f2:	4b8b      	ldr	r3, [pc, #556]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	4a8a      	ldr	r2, [pc, #552]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80198f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80198fc:	6013      	str	r3, [r2, #0]
 80198fe:	4b88      	ldr	r3, [pc, #544]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	4a87      	ldr	r2, [pc, #540]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019908:	6013      	str	r3, [r2, #0]
 801990a:	e00b      	b.n	8019924 <HAL_RCC_OscConfig+0xb0>
 801990c:	4b84      	ldr	r3, [pc, #528]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	4a83      	ldr	r2, [pc, #524]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019916:	6013      	str	r3, [r2, #0]
 8019918:	4b81      	ldr	r3, [pc, #516]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	4a80      	ldr	r2, [pc, #512]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 801991e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	685b      	ldr	r3, [r3, #4]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d013      	beq.n	8019954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801992c:	f7fc f8ac 	bl	8015a88 <HAL_GetTick>
 8019930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019932:	e008      	b.n	8019946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019934:	f7fc f8a8 	bl	8015a88 <HAL_GetTick>
 8019938:	4602      	mov	r2, r0
 801993a:	693b      	ldr	r3, [r7, #16]
 801993c:	1ad3      	subs	r3, r2, r3
 801993e:	2b64      	cmp	r3, #100	; 0x64
 8019940:	d901      	bls.n	8019946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019942:	2303      	movs	r3, #3
 8019944:	e1fb      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019946:	4b76      	ldr	r3, [pc, #472]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801994e:	2b00      	cmp	r3, #0
 8019950:	d0f0      	beq.n	8019934 <HAL_RCC_OscConfig+0xc0>
 8019952:	e014      	b.n	801997e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019954:	f7fc f898 	bl	8015a88 <HAL_GetTick>
 8019958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801995a:	e008      	b.n	801996e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801995c:	f7fc f894 	bl	8015a88 <HAL_GetTick>
 8019960:	4602      	mov	r2, r0
 8019962:	693b      	ldr	r3, [r7, #16]
 8019964:	1ad3      	subs	r3, r2, r3
 8019966:	2b64      	cmp	r3, #100	; 0x64
 8019968:	d901      	bls.n	801996e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801996a:	2303      	movs	r3, #3
 801996c:	e1e7      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801996e:	4b6c      	ldr	r3, [pc, #432]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019976:	2b00      	cmp	r3, #0
 8019978:	d1f0      	bne.n	801995c <HAL_RCC_OscConfig+0xe8>
 801997a:	e000      	b.n	801997e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801997c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	f003 0302 	and.w	r3, r3, #2
 8019986:	2b00      	cmp	r3, #0
 8019988:	d063      	beq.n	8019a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801998a:	4b65      	ldr	r3, [pc, #404]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 801998c:	689b      	ldr	r3, [r3, #8]
 801998e:	f003 030c 	and.w	r3, r3, #12
 8019992:	2b00      	cmp	r3, #0
 8019994:	d00b      	beq.n	80199ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019996:	4b62      	ldr	r3, [pc, #392]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019998:	689b      	ldr	r3, [r3, #8]
 801999a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801999e:	2b08      	cmp	r3, #8
 80199a0:	d11c      	bne.n	80199dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80199a2:	4b5f      	ldr	r3, [pc, #380]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d116      	bne.n	80199dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80199ae:	4b5c      	ldr	r3, [pc, #368]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	f003 0302 	and.w	r3, r3, #2
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d005      	beq.n	80199c6 <HAL_RCC_OscConfig+0x152>
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	68db      	ldr	r3, [r3, #12]
 80199be:	2b01      	cmp	r3, #1
 80199c0:	d001      	beq.n	80199c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80199c2:	2301      	movs	r3, #1
 80199c4:	e1bb      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80199c6:	4b56      	ldr	r3, [pc, #344]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	691b      	ldr	r3, [r3, #16]
 80199d2:	00db      	lsls	r3, r3, #3
 80199d4:	4952      	ldr	r1, [pc, #328]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 80199d6:	4313      	orrs	r3, r2
 80199d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80199da:	e03a      	b.n	8019a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	68db      	ldr	r3, [r3, #12]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d020      	beq.n	8019a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80199e4:	4b4f      	ldr	r3, [pc, #316]	; (8019b24 <HAL_RCC_OscConfig+0x2b0>)
 80199e6:	2201      	movs	r2, #1
 80199e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80199ea:	f7fc f84d 	bl	8015a88 <HAL_GetTick>
 80199ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80199f0:	e008      	b.n	8019a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80199f2:	f7fc f849 	bl	8015a88 <HAL_GetTick>
 80199f6:	4602      	mov	r2, r0
 80199f8:	693b      	ldr	r3, [r7, #16]
 80199fa:	1ad3      	subs	r3, r2, r3
 80199fc:	2b02      	cmp	r3, #2
 80199fe:	d901      	bls.n	8019a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019a00:	2303      	movs	r3, #3
 8019a02:	e19c      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019a04:	4b46      	ldr	r3, [pc, #280]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	f003 0302 	and.w	r3, r3, #2
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d0f0      	beq.n	80199f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019a10:	4b43      	ldr	r3, [pc, #268]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	691b      	ldr	r3, [r3, #16]
 8019a1c:	00db      	lsls	r3, r3, #3
 8019a1e:	4940      	ldr	r1, [pc, #256]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019a20:	4313      	orrs	r3, r2
 8019a22:	600b      	str	r3, [r1, #0]
 8019a24:	e015      	b.n	8019a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019a26:	4b3f      	ldr	r3, [pc, #252]	; (8019b24 <HAL_RCC_OscConfig+0x2b0>)
 8019a28:	2200      	movs	r2, #0
 8019a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019a2c:	f7fc f82c 	bl	8015a88 <HAL_GetTick>
 8019a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019a32:	e008      	b.n	8019a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019a34:	f7fc f828 	bl	8015a88 <HAL_GetTick>
 8019a38:	4602      	mov	r2, r0
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	1ad3      	subs	r3, r2, r3
 8019a3e:	2b02      	cmp	r3, #2
 8019a40:	d901      	bls.n	8019a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8019a42:	2303      	movs	r3, #3
 8019a44:	e17b      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019a46:	4b36      	ldr	r3, [pc, #216]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	f003 0302 	and.w	r3, r3, #2
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d1f0      	bne.n	8019a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	f003 0308 	and.w	r3, r3, #8
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d030      	beq.n	8019ac0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	695b      	ldr	r3, [r3, #20]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d016      	beq.n	8019a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019a66:	4b30      	ldr	r3, [pc, #192]	; (8019b28 <HAL_RCC_OscConfig+0x2b4>)
 8019a68:	2201      	movs	r2, #1
 8019a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019a6c:	f7fc f80c 	bl	8015a88 <HAL_GetTick>
 8019a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019a72:	e008      	b.n	8019a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019a74:	f7fc f808 	bl	8015a88 <HAL_GetTick>
 8019a78:	4602      	mov	r2, r0
 8019a7a:	693b      	ldr	r3, [r7, #16]
 8019a7c:	1ad3      	subs	r3, r2, r3
 8019a7e:	2b02      	cmp	r3, #2
 8019a80:	d901      	bls.n	8019a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8019a82:	2303      	movs	r3, #3
 8019a84:	e15b      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019a86:	4b26      	ldr	r3, [pc, #152]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a8a:	f003 0302 	and.w	r3, r3, #2
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d0f0      	beq.n	8019a74 <HAL_RCC_OscConfig+0x200>
 8019a92:	e015      	b.n	8019ac0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019a94:	4b24      	ldr	r3, [pc, #144]	; (8019b28 <HAL_RCC_OscConfig+0x2b4>)
 8019a96:	2200      	movs	r2, #0
 8019a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019a9a:	f7fb fff5 	bl	8015a88 <HAL_GetTick>
 8019a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019aa0:	e008      	b.n	8019ab4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019aa2:	f7fb fff1 	bl	8015a88 <HAL_GetTick>
 8019aa6:	4602      	mov	r2, r0
 8019aa8:	693b      	ldr	r3, [r7, #16]
 8019aaa:	1ad3      	subs	r3, r2, r3
 8019aac:	2b02      	cmp	r3, #2
 8019aae:	d901      	bls.n	8019ab4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8019ab0:	2303      	movs	r3, #3
 8019ab2:	e144      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019ab4:	4b1a      	ldr	r3, [pc, #104]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ab8:	f003 0302 	and.w	r3, r3, #2
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d1f0      	bne.n	8019aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	f003 0304 	and.w	r3, r3, #4
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	f000 80a0 	beq.w	8019c0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8019ace:	2300      	movs	r3, #0
 8019ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019ad2:	4b13      	ldr	r3, [pc, #76]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d10f      	bne.n	8019afe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019ade:	2300      	movs	r3, #0
 8019ae0:	60bb      	str	r3, [r7, #8]
 8019ae2:	4b0f      	ldr	r3, [pc, #60]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ae6:	4a0e      	ldr	r2, [pc, #56]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019aec:	6413      	str	r3, [r2, #64]	; 0x40
 8019aee:	4b0c      	ldr	r3, [pc, #48]	; (8019b20 <HAL_RCC_OscConfig+0x2ac>)
 8019af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019af6:	60bb      	str	r3, [r7, #8]
 8019af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8019afa:	2301      	movs	r3, #1
 8019afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019afe:	4b0b      	ldr	r3, [pc, #44]	; (8019b2c <HAL_RCC_OscConfig+0x2b8>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d121      	bne.n	8019b4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8019b0a:	4b08      	ldr	r3, [pc, #32]	; (8019b2c <HAL_RCC_OscConfig+0x2b8>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	4a07      	ldr	r2, [pc, #28]	; (8019b2c <HAL_RCC_OscConfig+0x2b8>)
 8019b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019b16:	f7fb ffb7 	bl	8015a88 <HAL_GetTick>
 8019b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019b1c:	e011      	b.n	8019b42 <HAL_RCC_OscConfig+0x2ce>
 8019b1e:	bf00      	nop
 8019b20:	40023800 	.word	0x40023800
 8019b24:	42470000 	.word	0x42470000
 8019b28:	42470e80 	.word	0x42470e80
 8019b2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019b30:	f7fb ffaa 	bl	8015a88 <HAL_GetTick>
 8019b34:	4602      	mov	r2, r0
 8019b36:	693b      	ldr	r3, [r7, #16]
 8019b38:	1ad3      	subs	r3, r2, r3
 8019b3a:	2b02      	cmp	r3, #2
 8019b3c:	d901      	bls.n	8019b42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8019b3e:	2303      	movs	r3, #3
 8019b40:	e0fd      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019b42:	4b81      	ldr	r3, [pc, #516]	; (8019d48 <HAL_RCC_OscConfig+0x4d4>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d0f0      	beq.n	8019b30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	689b      	ldr	r3, [r3, #8]
 8019b52:	2b01      	cmp	r3, #1
 8019b54:	d106      	bne.n	8019b64 <HAL_RCC_OscConfig+0x2f0>
 8019b56:	4b7d      	ldr	r3, [pc, #500]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b5a:	4a7c      	ldr	r2, [pc, #496]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b5c:	f043 0301 	orr.w	r3, r3, #1
 8019b60:	6713      	str	r3, [r2, #112]	; 0x70
 8019b62:	e01c      	b.n	8019b9e <HAL_RCC_OscConfig+0x32a>
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	689b      	ldr	r3, [r3, #8]
 8019b68:	2b05      	cmp	r3, #5
 8019b6a:	d10c      	bne.n	8019b86 <HAL_RCC_OscConfig+0x312>
 8019b6c:	4b77      	ldr	r3, [pc, #476]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b70:	4a76      	ldr	r2, [pc, #472]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b72:	f043 0304 	orr.w	r3, r3, #4
 8019b76:	6713      	str	r3, [r2, #112]	; 0x70
 8019b78:	4b74      	ldr	r3, [pc, #464]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b7c:	4a73      	ldr	r2, [pc, #460]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b7e:	f043 0301 	orr.w	r3, r3, #1
 8019b82:	6713      	str	r3, [r2, #112]	; 0x70
 8019b84:	e00b      	b.n	8019b9e <HAL_RCC_OscConfig+0x32a>
 8019b86:	4b71      	ldr	r3, [pc, #452]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b8a:	4a70      	ldr	r2, [pc, #448]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b8c:	f023 0301 	bic.w	r3, r3, #1
 8019b90:	6713      	str	r3, [r2, #112]	; 0x70
 8019b92:	4b6e      	ldr	r3, [pc, #440]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b96:	4a6d      	ldr	r2, [pc, #436]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019b98:	f023 0304 	bic.w	r3, r3, #4
 8019b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	689b      	ldr	r3, [r3, #8]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d015      	beq.n	8019bd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019ba6:	f7fb ff6f 	bl	8015a88 <HAL_GetTick>
 8019baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019bac:	e00a      	b.n	8019bc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019bae:	f7fb ff6b 	bl	8015a88 <HAL_GetTick>
 8019bb2:	4602      	mov	r2, r0
 8019bb4:	693b      	ldr	r3, [r7, #16]
 8019bb6:	1ad3      	subs	r3, r2, r3
 8019bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8019bbc:	4293      	cmp	r3, r2
 8019bbe:	d901      	bls.n	8019bc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8019bc0:	2303      	movs	r3, #3
 8019bc2:	e0bc      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019bc4:	4b61      	ldr	r3, [pc, #388]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bc8:	f003 0302 	and.w	r3, r3, #2
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d0ee      	beq.n	8019bae <HAL_RCC_OscConfig+0x33a>
 8019bd0:	e014      	b.n	8019bfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019bd2:	f7fb ff59 	bl	8015a88 <HAL_GetTick>
 8019bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019bd8:	e00a      	b.n	8019bf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019bda:	f7fb ff55 	bl	8015a88 <HAL_GetTick>
 8019bde:	4602      	mov	r2, r0
 8019be0:	693b      	ldr	r3, [r7, #16]
 8019be2:	1ad3      	subs	r3, r2, r3
 8019be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8019be8:	4293      	cmp	r3, r2
 8019bea:	d901      	bls.n	8019bf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8019bec:	2303      	movs	r3, #3
 8019bee:	e0a6      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019bf0:	4b56      	ldr	r3, [pc, #344]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019bf4:	f003 0302 	and.w	r3, r3, #2
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1ee      	bne.n	8019bda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8019bfc:	7dfb      	ldrb	r3, [r7, #23]
 8019bfe:	2b01      	cmp	r3, #1
 8019c00:	d105      	bne.n	8019c0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019c02:	4b52      	ldr	r3, [pc, #328]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c06:	4a51      	ldr	r2, [pc, #324]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	699b      	ldr	r3, [r3, #24]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	f000 8092 	beq.w	8019d3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8019c18:	4b4c      	ldr	r3, [pc, #304]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019c1a:	689b      	ldr	r3, [r3, #8]
 8019c1c:	f003 030c 	and.w	r3, r3, #12
 8019c20:	2b08      	cmp	r3, #8
 8019c22:	d05c      	beq.n	8019cde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	699b      	ldr	r3, [r3, #24]
 8019c28:	2b02      	cmp	r3, #2
 8019c2a:	d141      	bne.n	8019cb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019c2c:	4b48      	ldr	r3, [pc, #288]	; (8019d50 <HAL_RCC_OscConfig+0x4dc>)
 8019c2e:	2200      	movs	r2, #0
 8019c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019c32:	f7fb ff29 	bl	8015a88 <HAL_GetTick>
 8019c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019c38:	e008      	b.n	8019c4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019c3a:	f7fb ff25 	bl	8015a88 <HAL_GetTick>
 8019c3e:	4602      	mov	r2, r0
 8019c40:	693b      	ldr	r3, [r7, #16]
 8019c42:	1ad3      	subs	r3, r2, r3
 8019c44:	2b02      	cmp	r3, #2
 8019c46:	d901      	bls.n	8019c4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8019c48:	2303      	movs	r3, #3
 8019c4a:	e078      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019c4c:	4b3f      	ldr	r3, [pc, #252]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d1f0      	bne.n	8019c3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	69da      	ldr	r2, [r3, #28]
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	6a1b      	ldr	r3, [r3, #32]
 8019c60:	431a      	orrs	r2, r3
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c66:	019b      	lsls	r3, r3, #6
 8019c68:	431a      	orrs	r2, r3
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c6e:	085b      	lsrs	r3, r3, #1
 8019c70:	3b01      	subs	r3, #1
 8019c72:	041b      	lsls	r3, r3, #16
 8019c74:	431a      	orrs	r2, r3
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c7a:	061b      	lsls	r3, r3, #24
 8019c7c:	4933      	ldr	r1, [pc, #204]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019c7e:	4313      	orrs	r3, r2
 8019c80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019c82:	4b33      	ldr	r3, [pc, #204]	; (8019d50 <HAL_RCC_OscConfig+0x4dc>)
 8019c84:	2201      	movs	r2, #1
 8019c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019c88:	f7fb fefe 	bl	8015a88 <HAL_GetTick>
 8019c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019c8e:	e008      	b.n	8019ca2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019c90:	f7fb fefa 	bl	8015a88 <HAL_GetTick>
 8019c94:	4602      	mov	r2, r0
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	1ad3      	subs	r3, r2, r3
 8019c9a:	2b02      	cmp	r3, #2
 8019c9c:	d901      	bls.n	8019ca2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8019c9e:	2303      	movs	r3, #3
 8019ca0:	e04d      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019ca2:	4b2a      	ldr	r3, [pc, #168]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d0f0      	beq.n	8019c90 <HAL_RCC_OscConfig+0x41c>
 8019cae:	e045      	b.n	8019d3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019cb0:	4b27      	ldr	r3, [pc, #156]	; (8019d50 <HAL_RCC_OscConfig+0x4dc>)
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019cb6:	f7fb fee7 	bl	8015a88 <HAL_GetTick>
 8019cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019cbc:	e008      	b.n	8019cd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019cbe:	f7fb fee3 	bl	8015a88 <HAL_GetTick>
 8019cc2:	4602      	mov	r2, r0
 8019cc4:	693b      	ldr	r3, [r7, #16]
 8019cc6:	1ad3      	subs	r3, r2, r3
 8019cc8:	2b02      	cmp	r3, #2
 8019cca:	d901      	bls.n	8019cd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8019ccc:	2303      	movs	r3, #3
 8019cce:	e036      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019cd0:	4b1e      	ldr	r3, [pc, #120]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d1f0      	bne.n	8019cbe <HAL_RCC_OscConfig+0x44a>
 8019cdc:	e02e      	b.n	8019d3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	699b      	ldr	r3, [r3, #24]
 8019ce2:	2b01      	cmp	r3, #1
 8019ce4:	d101      	bne.n	8019cea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8019ce6:	2301      	movs	r3, #1
 8019ce8:	e029      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8019cea:	4b18      	ldr	r3, [pc, #96]	; (8019d4c <HAL_RCC_OscConfig+0x4d8>)
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	69db      	ldr	r3, [r3, #28]
 8019cfa:	429a      	cmp	r2, r3
 8019cfc:	d11c      	bne.n	8019d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	d115      	bne.n	8019d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8019d0c:	68fa      	ldr	r2, [r7, #12]
 8019d0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019d12:	4013      	ands	r3, r2
 8019d14:	687a      	ldr	r2, [r7, #4]
 8019d16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d10d      	bne.n	8019d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8019d26:	429a      	cmp	r2, r3
 8019d28:	d106      	bne.n	8019d38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8019d34:	429a      	cmp	r2, r3
 8019d36:	d001      	beq.n	8019d3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8019d38:	2301      	movs	r3, #1
 8019d3a:	e000      	b.n	8019d3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8019d3c:	2300      	movs	r3, #0
}
 8019d3e:	4618      	mov	r0, r3
 8019d40:	3718      	adds	r7, #24
 8019d42:	46bd      	mov	sp, r7
 8019d44:	bd80      	pop	{r7, pc}
 8019d46:	bf00      	nop
 8019d48:	40007000 	.word	0x40007000
 8019d4c:	40023800 	.word	0x40023800
 8019d50:	42470060 	.word	0x42470060

08019d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b084      	sub	sp, #16
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
 8019d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d101      	bne.n	8019d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019d64:	2301      	movs	r3, #1
 8019d66:	e0cc      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019d68:	4b68      	ldr	r3, [pc, #416]	; (8019f0c <HAL_RCC_ClockConfig+0x1b8>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f003 030f 	and.w	r3, r3, #15
 8019d70:	683a      	ldr	r2, [r7, #0]
 8019d72:	429a      	cmp	r2, r3
 8019d74:	d90c      	bls.n	8019d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019d76:	4b65      	ldr	r3, [pc, #404]	; (8019f0c <HAL_RCC_ClockConfig+0x1b8>)
 8019d78:	683a      	ldr	r2, [r7, #0]
 8019d7a:	b2d2      	uxtb	r2, r2
 8019d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019d7e:	4b63      	ldr	r3, [pc, #396]	; (8019f0c <HAL_RCC_ClockConfig+0x1b8>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	f003 030f 	and.w	r3, r3, #15
 8019d86:	683a      	ldr	r2, [r7, #0]
 8019d88:	429a      	cmp	r2, r3
 8019d8a:	d001      	beq.n	8019d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	e0b8      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	f003 0302 	and.w	r3, r3, #2
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d020      	beq.n	8019dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f003 0304 	and.w	r3, r3, #4
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d005      	beq.n	8019db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8019da8:	4b59      	ldr	r3, [pc, #356]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019daa:	689b      	ldr	r3, [r3, #8]
 8019dac:	4a58      	ldr	r2, [pc, #352]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8019db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f003 0308 	and.w	r3, r3, #8
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d005      	beq.n	8019dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019dc0:	4b53      	ldr	r3, [pc, #332]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019dc2:	689b      	ldr	r3, [r3, #8]
 8019dc4:	4a52      	ldr	r2, [pc, #328]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8019dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019dcc:	4b50      	ldr	r3, [pc, #320]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019dce:	689b      	ldr	r3, [r3, #8]
 8019dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	689b      	ldr	r3, [r3, #8]
 8019dd8:	494d      	ldr	r1, [pc, #308]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019dda:	4313      	orrs	r3, r2
 8019ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	f003 0301 	and.w	r3, r3, #1
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d044      	beq.n	8019e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	685b      	ldr	r3, [r3, #4]
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	d107      	bne.n	8019e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019df2:	4b47      	ldr	r3, [pc, #284]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d119      	bne.n	8019e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019dfe:	2301      	movs	r3, #1
 8019e00:	e07f      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	2b02      	cmp	r3, #2
 8019e08:	d003      	beq.n	8019e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8019e0e:	2b03      	cmp	r3, #3
 8019e10:	d107      	bne.n	8019e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019e12:	4b3f      	ldr	r3, [pc, #252]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d109      	bne.n	8019e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019e1e:	2301      	movs	r3, #1
 8019e20:	e06f      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019e22:	4b3b      	ldr	r3, [pc, #236]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	f003 0302 	and.w	r3, r3, #2
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d101      	bne.n	8019e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019e2e:	2301      	movs	r3, #1
 8019e30:	e067      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019e32:	4b37      	ldr	r3, [pc, #220]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019e34:	689b      	ldr	r3, [r3, #8]
 8019e36:	f023 0203 	bic.w	r2, r3, #3
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	685b      	ldr	r3, [r3, #4]
 8019e3e:	4934      	ldr	r1, [pc, #208]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019e40:	4313      	orrs	r3, r2
 8019e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019e44:	f7fb fe20 	bl	8015a88 <HAL_GetTick>
 8019e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019e4a:	e00a      	b.n	8019e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019e4c:	f7fb fe1c 	bl	8015a88 <HAL_GetTick>
 8019e50:	4602      	mov	r2, r0
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	1ad3      	subs	r3, r2, r3
 8019e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8019e5a:	4293      	cmp	r3, r2
 8019e5c:	d901      	bls.n	8019e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8019e5e:	2303      	movs	r3, #3
 8019e60:	e04f      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019e62:	4b2b      	ldr	r3, [pc, #172]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019e64:	689b      	ldr	r3, [r3, #8]
 8019e66:	f003 020c 	and.w	r2, r3, #12
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	009b      	lsls	r3, r3, #2
 8019e70:	429a      	cmp	r2, r3
 8019e72:	d1eb      	bne.n	8019e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019e74:	4b25      	ldr	r3, [pc, #148]	; (8019f0c <HAL_RCC_ClockConfig+0x1b8>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	f003 030f 	and.w	r3, r3, #15
 8019e7c:	683a      	ldr	r2, [r7, #0]
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d20c      	bcs.n	8019e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019e82:	4b22      	ldr	r3, [pc, #136]	; (8019f0c <HAL_RCC_ClockConfig+0x1b8>)
 8019e84:	683a      	ldr	r2, [r7, #0]
 8019e86:	b2d2      	uxtb	r2, r2
 8019e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019e8a:	4b20      	ldr	r3, [pc, #128]	; (8019f0c <HAL_RCC_ClockConfig+0x1b8>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	f003 030f 	and.w	r3, r3, #15
 8019e92:	683a      	ldr	r2, [r7, #0]
 8019e94:	429a      	cmp	r2, r3
 8019e96:	d001      	beq.n	8019e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8019e98:	2301      	movs	r3, #1
 8019e9a:	e032      	b.n	8019f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	f003 0304 	and.w	r3, r3, #4
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d008      	beq.n	8019eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019ea8:	4b19      	ldr	r3, [pc, #100]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019eaa:	689b      	ldr	r3, [r3, #8]
 8019eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	68db      	ldr	r3, [r3, #12]
 8019eb4:	4916      	ldr	r1, [pc, #88]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019eb6:	4313      	orrs	r3, r2
 8019eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	f003 0308 	and.w	r3, r3, #8
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d009      	beq.n	8019eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8019ec6:	4b12      	ldr	r3, [pc, #72]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019ec8:	689b      	ldr	r3, [r3, #8]
 8019eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	691b      	ldr	r3, [r3, #16]
 8019ed2:	00db      	lsls	r3, r3, #3
 8019ed4:	490e      	ldr	r1, [pc, #56]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019ed6:	4313      	orrs	r3, r2
 8019ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019eda:	f000 f82d 	bl	8019f38 <HAL_RCC_GetSysClockFreq>
 8019ede:	4602      	mov	r2, r0
 8019ee0:	4b0b      	ldr	r3, [pc, #44]	; (8019f10 <HAL_RCC_ClockConfig+0x1bc>)
 8019ee2:	689b      	ldr	r3, [r3, #8]
 8019ee4:	091b      	lsrs	r3, r3, #4
 8019ee6:	f003 030f 	and.w	r3, r3, #15
 8019eea:	490a      	ldr	r1, [pc, #40]	; (8019f14 <HAL_RCC_ClockConfig+0x1c0>)
 8019eec:	5ccb      	ldrb	r3, [r1, r3]
 8019eee:	fa22 f303 	lsr.w	r3, r2, r3
 8019ef2:	4a09      	ldr	r2, [pc, #36]	; (8019f18 <HAL_RCC_ClockConfig+0x1c4>)
 8019ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8019ef6:	4b09      	ldr	r3, [pc, #36]	; (8019f1c <HAL_RCC_ClockConfig+0x1c8>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f7f4 fd12 	bl	800e924 <HAL_InitTick>

  return HAL_OK;
 8019f00:	2300      	movs	r3, #0
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	3710      	adds	r7, #16
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bd80      	pop	{r7, pc}
 8019f0a:	bf00      	nop
 8019f0c:	40023c00 	.word	0x40023c00
 8019f10:	40023800 	.word	0x40023800
 8019f14:	08025580 	.word	0x08025580
 8019f18:	20000054 	.word	0x20000054
 8019f1c:	200000b8 	.word	0x200000b8

08019f20 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8019f20:	b480      	push	{r7}
 8019f22:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8019f24:	4b03      	ldr	r3, [pc, #12]	; (8019f34 <HAL_RCC_EnableCSS+0x14>)
 8019f26:	2201      	movs	r2, #1
 8019f28:	601a      	str	r2, [r3, #0]
}
 8019f2a:	bf00      	nop
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f32:	4770      	bx	lr
 8019f34:	4247004c 	.word	0x4247004c

08019f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019f3c:	b084      	sub	sp, #16
 8019f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8019f40:	2300      	movs	r3, #0
 8019f42:	607b      	str	r3, [r7, #4]
 8019f44:	2300      	movs	r3, #0
 8019f46:	60fb      	str	r3, [r7, #12]
 8019f48:	2300      	movs	r3, #0
 8019f4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019f50:	4b67      	ldr	r3, [pc, #412]	; (801a0f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019f52:	689b      	ldr	r3, [r3, #8]
 8019f54:	f003 030c 	and.w	r3, r3, #12
 8019f58:	2b08      	cmp	r3, #8
 8019f5a:	d00d      	beq.n	8019f78 <HAL_RCC_GetSysClockFreq+0x40>
 8019f5c:	2b08      	cmp	r3, #8
 8019f5e:	f200 80bd 	bhi.w	801a0dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d002      	beq.n	8019f6c <HAL_RCC_GetSysClockFreq+0x34>
 8019f66:	2b04      	cmp	r3, #4
 8019f68:	d003      	beq.n	8019f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8019f6a:	e0b7      	b.n	801a0dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019f6c:	4b61      	ldr	r3, [pc, #388]	; (801a0f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8019f6e:	60bb      	str	r3, [r7, #8]
       break;
 8019f70:	e0b7      	b.n	801a0e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8019f72:	4b61      	ldr	r3, [pc, #388]	; (801a0f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8019f74:	60bb      	str	r3, [r7, #8]
      break;
 8019f76:	e0b4      	b.n	801a0e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019f78:	4b5d      	ldr	r3, [pc, #372]	; (801a0f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019f7a:	685b      	ldr	r3, [r3, #4]
 8019f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019f82:	4b5b      	ldr	r3, [pc, #364]	; (801a0f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019f84:	685b      	ldr	r3, [r3, #4]
 8019f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d04d      	beq.n	801a02a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019f8e:	4b58      	ldr	r3, [pc, #352]	; (801a0f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	099b      	lsrs	r3, r3, #6
 8019f94:	461a      	mov	r2, r3
 8019f96:	f04f 0300 	mov.w	r3, #0
 8019f9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019f9e:	f04f 0100 	mov.w	r1, #0
 8019fa2:	ea02 0800 	and.w	r8, r2, r0
 8019fa6:	ea03 0901 	and.w	r9, r3, r1
 8019faa:	4640      	mov	r0, r8
 8019fac:	4649      	mov	r1, r9
 8019fae:	f04f 0200 	mov.w	r2, #0
 8019fb2:	f04f 0300 	mov.w	r3, #0
 8019fb6:	014b      	lsls	r3, r1, #5
 8019fb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8019fbc:	0142      	lsls	r2, r0, #5
 8019fbe:	4610      	mov	r0, r2
 8019fc0:	4619      	mov	r1, r3
 8019fc2:	ebb0 0008 	subs.w	r0, r0, r8
 8019fc6:	eb61 0109 	sbc.w	r1, r1, r9
 8019fca:	f04f 0200 	mov.w	r2, #0
 8019fce:	f04f 0300 	mov.w	r3, #0
 8019fd2:	018b      	lsls	r3, r1, #6
 8019fd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8019fd8:	0182      	lsls	r2, r0, #6
 8019fda:	1a12      	subs	r2, r2, r0
 8019fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8019fe0:	f04f 0000 	mov.w	r0, #0
 8019fe4:	f04f 0100 	mov.w	r1, #0
 8019fe8:	00d9      	lsls	r1, r3, #3
 8019fea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019fee:	00d0      	lsls	r0, r2, #3
 8019ff0:	4602      	mov	r2, r0
 8019ff2:	460b      	mov	r3, r1
 8019ff4:	eb12 0208 	adds.w	r2, r2, r8
 8019ff8:	eb43 0309 	adc.w	r3, r3, r9
 8019ffc:	f04f 0000 	mov.w	r0, #0
 801a000:	f04f 0100 	mov.w	r1, #0
 801a004:	0259      	lsls	r1, r3, #9
 801a006:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801a00a:	0250      	lsls	r0, r2, #9
 801a00c:	4602      	mov	r2, r0
 801a00e:	460b      	mov	r3, r1
 801a010:	4610      	mov	r0, r2
 801a012:	4619      	mov	r1, r3
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	461a      	mov	r2, r3
 801a018:	f04f 0300 	mov.w	r3, #0
 801a01c:	f7e6 fe34 	bl	8000c88 <__aeabi_uldivmod>
 801a020:	4602      	mov	r2, r0
 801a022:	460b      	mov	r3, r1
 801a024:	4613      	mov	r3, r2
 801a026:	60fb      	str	r3, [r7, #12]
 801a028:	e04a      	b.n	801a0c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a02a:	4b31      	ldr	r3, [pc, #196]	; (801a0f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a02c:	685b      	ldr	r3, [r3, #4]
 801a02e:	099b      	lsrs	r3, r3, #6
 801a030:	461a      	mov	r2, r3
 801a032:	f04f 0300 	mov.w	r3, #0
 801a036:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a03a:	f04f 0100 	mov.w	r1, #0
 801a03e:	ea02 0400 	and.w	r4, r2, r0
 801a042:	ea03 0501 	and.w	r5, r3, r1
 801a046:	4620      	mov	r0, r4
 801a048:	4629      	mov	r1, r5
 801a04a:	f04f 0200 	mov.w	r2, #0
 801a04e:	f04f 0300 	mov.w	r3, #0
 801a052:	014b      	lsls	r3, r1, #5
 801a054:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801a058:	0142      	lsls	r2, r0, #5
 801a05a:	4610      	mov	r0, r2
 801a05c:	4619      	mov	r1, r3
 801a05e:	1b00      	subs	r0, r0, r4
 801a060:	eb61 0105 	sbc.w	r1, r1, r5
 801a064:	f04f 0200 	mov.w	r2, #0
 801a068:	f04f 0300 	mov.w	r3, #0
 801a06c:	018b      	lsls	r3, r1, #6
 801a06e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801a072:	0182      	lsls	r2, r0, #6
 801a074:	1a12      	subs	r2, r2, r0
 801a076:	eb63 0301 	sbc.w	r3, r3, r1
 801a07a:	f04f 0000 	mov.w	r0, #0
 801a07e:	f04f 0100 	mov.w	r1, #0
 801a082:	00d9      	lsls	r1, r3, #3
 801a084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a088:	00d0      	lsls	r0, r2, #3
 801a08a:	4602      	mov	r2, r0
 801a08c:	460b      	mov	r3, r1
 801a08e:	1912      	adds	r2, r2, r4
 801a090:	eb45 0303 	adc.w	r3, r5, r3
 801a094:	f04f 0000 	mov.w	r0, #0
 801a098:	f04f 0100 	mov.w	r1, #0
 801a09c:	0299      	lsls	r1, r3, #10
 801a09e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801a0a2:	0290      	lsls	r0, r2, #10
 801a0a4:	4602      	mov	r2, r0
 801a0a6:	460b      	mov	r3, r1
 801a0a8:	4610      	mov	r0, r2
 801a0aa:	4619      	mov	r1, r3
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	461a      	mov	r2, r3
 801a0b0:	f04f 0300 	mov.w	r3, #0
 801a0b4:	f7e6 fde8 	bl	8000c88 <__aeabi_uldivmod>
 801a0b8:	4602      	mov	r2, r0
 801a0ba:	460b      	mov	r3, r1
 801a0bc:	4613      	mov	r3, r2
 801a0be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a0c0:	4b0b      	ldr	r3, [pc, #44]	; (801a0f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	0c1b      	lsrs	r3, r3, #16
 801a0c6:	f003 0303 	and.w	r3, r3, #3
 801a0ca:	3301      	adds	r3, #1
 801a0cc:	005b      	lsls	r3, r3, #1
 801a0ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801a0d0:	68fa      	ldr	r2, [r7, #12]
 801a0d2:	683b      	ldr	r3, [r7, #0]
 801a0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 801a0d8:	60bb      	str	r3, [r7, #8]
      break;
 801a0da:	e002      	b.n	801a0e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a0dc:	4b05      	ldr	r3, [pc, #20]	; (801a0f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801a0de:	60bb      	str	r3, [r7, #8]
      break;
 801a0e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a0e2:	68bb      	ldr	r3, [r7, #8]
}
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	3710      	adds	r7, #16
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a0ee:	bf00      	nop
 801a0f0:	40023800 	.word	0x40023800
 801a0f4:	00f42400 	.word	0x00f42400
 801a0f8:	007a1200 	.word	0x007a1200

0801a0fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a0fc:	b480      	push	{r7}
 801a0fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a100:	4b03      	ldr	r3, [pc, #12]	; (801a110 <HAL_RCC_GetHCLKFreq+0x14>)
 801a102:	681b      	ldr	r3, [r3, #0]
}
 801a104:	4618      	mov	r0, r3
 801a106:	46bd      	mov	sp, r7
 801a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10c:	4770      	bx	lr
 801a10e:	bf00      	nop
 801a110:	20000054 	.word	0x20000054

0801a114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a114:	b580      	push	{r7, lr}
 801a116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a118:	f7ff fff0 	bl	801a0fc <HAL_RCC_GetHCLKFreq>
 801a11c:	4602      	mov	r2, r0
 801a11e:	4b05      	ldr	r3, [pc, #20]	; (801a134 <HAL_RCC_GetPCLK1Freq+0x20>)
 801a120:	689b      	ldr	r3, [r3, #8]
 801a122:	0a9b      	lsrs	r3, r3, #10
 801a124:	f003 0307 	and.w	r3, r3, #7
 801a128:	4903      	ldr	r1, [pc, #12]	; (801a138 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a12a:	5ccb      	ldrb	r3, [r1, r3]
 801a12c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a130:	4618      	mov	r0, r3
 801a132:	bd80      	pop	{r7, pc}
 801a134:	40023800 	.word	0x40023800
 801a138:	08025590 	.word	0x08025590

0801a13c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a140:	f7ff ffdc 	bl	801a0fc <HAL_RCC_GetHCLKFreq>
 801a144:	4602      	mov	r2, r0
 801a146:	4b05      	ldr	r3, [pc, #20]	; (801a15c <HAL_RCC_GetPCLK2Freq+0x20>)
 801a148:	689b      	ldr	r3, [r3, #8]
 801a14a:	0b5b      	lsrs	r3, r3, #13
 801a14c:	f003 0307 	and.w	r3, r3, #7
 801a150:	4903      	ldr	r1, [pc, #12]	; (801a160 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a152:	5ccb      	ldrb	r3, [r1, r3]
 801a154:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a158:	4618      	mov	r0, r3
 801a15a:	bd80      	pop	{r7, pc}
 801a15c:	40023800 	.word	0x40023800
 801a160:	08025590 	.word	0x08025590

0801a164 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801a164:	b480      	push	{r7}
 801a166:	b083      	sub	sp, #12
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
 801a16c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	220f      	movs	r2, #15
 801a172:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801a174:	4b12      	ldr	r3, [pc, #72]	; (801a1c0 <HAL_RCC_GetClockConfig+0x5c>)
 801a176:	689b      	ldr	r3, [r3, #8]
 801a178:	f003 0203 	and.w	r2, r3, #3
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801a180:	4b0f      	ldr	r3, [pc, #60]	; (801a1c0 <HAL_RCC_GetClockConfig+0x5c>)
 801a182:	689b      	ldr	r3, [r3, #8]
 801a184:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801a18c:	4b0c      	ldr	r3, [pc, #48]	; (801a1c0 <HAL_RCC_GetClockConfig+0x5c>)
 801a18e:	689b      	ldr	r3, [r3, #8]
 801a190:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801a198:	4b09      	ldr	r3, [pc, #36]	; (801a1c0 <HAL_RCC_GetClockConfig+0x5c>)
 801a19a:	689b      	ldr	r3, [r3, #8]
 801a19c:	08db      	lsrs	r3, r3, #3
 801a19e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801a1a6:	4b07      	ldr	r3, [pc, #28]	; (801a1c4 <HAL_RCC_GetClockConfig+0x60>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	f003 020f 	and.w	r2, r3, #15
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	601a      	str	r2, [r3, #0]
}
 801a1b2:	bf00      	nop
 801a1b4:	370c      	adds	r7, #12
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1bc:	4770      	bx	lr
 801a1be:	bf00      	nop
 801a1c0:	40023800 	.word	0x40023800
 801a1c4:	40023c00 	.word	0x40023c00

0801a1c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b088      	sub	sp, #32
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	685b      	ldr	r3, [r3, #4]
 801a1d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	689b      	ldr	r3, [r3, #8]
 801a1de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801a1e0:	69bb      	ldr	r3, [r7, #24]
 801a1e2:	099b      	lsrs	r3, r3, #6
 801a1e4:	f003 0301 	and.w	r3, r3, #1
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d10f      	bne.n	801a20c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801a1ec:	69bb      	ldr	r3, [r7, #24]
 801a1ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d00a      	beq.n	801a20c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801a1f6:	69fb      	ldr	r3, [r7, #28]
 801a1f8:	099b      	lsrs	r3, r3, #6
 801a1fa:	f003 0301 	and.w	r3, r3, #1
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d004      	beq.n	801a20c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a206:	6878      	ldr	r0, [r7, #4]
 801a208:	4798      	blx	r3
    return;
 801a20a:	e0d7      	b.n	801a3bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801a20c:	69bb      	ldr	r3, [r7, #24]
 801a20e:	085b      	lsrs	r3, r3, #1
 801a210:	f003 0301 	and.w	r3, r3, #1
 801a214:	2b00      	cmp	r3, #0
 801a216:	d00a      	beq.n	801a22e <HAL_SPI_IRQHandler+0x66>
 801a218:	69fb      	ldr	r3, [r7, #28]
 801a21a:	09db      	lsrs	r3, r3, #7
 801a21c:	f003 0301 	and.w	r3, r3, #1
 801a220:	2b00      	cmp	r3, #0
 801a222:	d004      	beq.n	801a22e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a228:	6878      	ldr	r0, [r7, #4]
 801a22a:	4798      	blx	r3
    return;
 801a22c:	e0c6      	b.n	801a3bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801a22e:	69bb      	ldr	r3, [r7, #24]
 801a230:	095b      	lsrs	r3, r3, #5
 801a232:	f003 0301 	and.w	r3, r3, #1
 801a236:	2b00      	cmp	r3, #0
 801a238:	d10c      	bne.n	801a254 <HAL_SPI_IRQHandler+0x8c>
 801a23a:	69bb      	ldr	r3, [r7, #24]
 801a23c:	099b      	lsrs	r3, r3, #6
 801a23e:	f003 0301 	and.w	r3, r3, #1
 801a242:	2b00      	cmp	r3, #0
 801a244:	d106      	bne.n	801a254 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801a246:	69bb      	ldr	r3, [r7, #24]
 801a248:	0a1b      	lsrs	r3, r3, #8
 801a24a:	f003 0301 	and.w	r3, r3, #1
 801a24e:	2b00      	cmp	r3, #0
 801a250:	f000 80b4 	beq.w	801a3bc <HAL_SPI_IRQHandler+0x1f4>
 801a254:	69fb      	ldr	r3, [r7, #28]
 801a256:	095b      	lsrs	r3, r3, #5
 801a258:	f003 0301 	and.w	r3, r3, #1
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	f000 80ad 	beq.w	801a3bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801a262:	69bb      	ldr	r3, [r7, #24]
 801a264:	099b      	lsrs	r3, r3, #6
 801a266:	f003 0301 	and.w	r3, r3, #1
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d023      	beq.n	801a2b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2b03      	cmp	r3, #3
 801a278:	d011      	beq.n	801a29e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a27e:	f043 0204 	orr.w	r2, r3, #4
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a286:	2300      	movs	r3, #0
 801a288:	617b      	str	r3, [r7, #20]
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	68db      	ldr	r3, [r3, #12]
 801a290:	617b      	str	r3, [r7, #20]
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	689b      	ldr	r3, [r3, #8]
 801a298:	617b      	str	r3, [r7, #20]
 801a29a:	697b      	ldr	r3, [r7, #20]
 801a29c:	e00b      	b.n	801a2b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a29e:	2300      	movs	r3, #0
 801a2a0:	613b      	str	r3, [r7, #16]
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	68db      	ldr	r3, [r3, #12]
 801a2a8:	613b      	str	r3, [r7, #16]
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	689b      	ldr	r3, [r3, #8]
 801a2b0:	613b      	str	r3, [r7, #16]
 801a2b2:	693b      	ldr	r3, [r7, #16]
        return;
 801a2b4:	e082      	b.n	801a3bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801a2b6:	69bb      	ldr	r3, [r7, #24]
 801a2b8:	095b      	lsrs	r3, r3, #5
 801a2ba:	f003 0301 	and.w	r3, r3, #1
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d014      	beq.n	801a2ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2c6:	f043 0201 	orr.w	r2, r3, #1
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	60fb      	str	r3, [r7, #12]
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	689b      	ldr	r3, [r3, #8]
 801a2d8:	60fb      	str	r3, [r7, #12]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	681a      	ldr	r2, [r3, #0]
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a2e8:	601a      	str	r2, [r3, #0]
 801a2ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801a2ec:	69bb      	ldr	r3, [r7, #24]
 801a2ee:	0a1b      	lsrs	r3, r3, #8
 801a2f0:	f003 0301 	and.w	r3, r3, #1
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d00c      	beq.n	801a312 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2fc:	f043 0208 	orr.w	r2, r3, #8
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801a304:	2300      	movs	r3, #0
 801a306:	60bb      	str	r3, [r7, #8]
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	689b      	ldr	r3, [r3, #8]
 801a30e:	60bb      	str	r3, [r7, #8]
 801a310:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a316:	2b00      	cmp	r3, #0
 801a318:	d04f      	beq.n	801a3ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	685a      	ldr	r2, [r3, #4]
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a328:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	2201      	movs	r2, #1
 801a32e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801a332:	69fb      	ldr	r3, [r7, #28]
 801a334:	f003 0302 	and.w	r3, r3, #2
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d104      	bne.n	801a346 <HAL_SPI_IRQHandler+0x17e>
 801a33c:	69fb      	ldr	r3, [r7, #28]
 801a33e:	f003 0301 	and.w	r3, r3, #1
 801a342:	2b00      	cmp	r3, #0
 801a344:	d034      	beq.n	801a3b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	685a      	ldr	r2, [r3, #4]
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	f022 0203 	bic.w	r2, r2, #3
 801a354:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d011      	beq.n	801a382 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a362:	4a18      	ldr	r2, [pc, #96]	; (801a3c4 <HAL_SPI_IRQHandler+0x1fc>)
 801a364:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a36a:	4618      	mov	r0, r3
 801a36c:	f7fc fcca 	bl	8016d04 <HAL_DMA_Abort_IT>
 801a370:	4603      	mov	r3, r0
 801a372:	2b00      	cmp	r3, #0
 801a374:	d005      	beq.n	801a382 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a37a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a386:	2b00      	cmp	r3, #0
 801a388:	d016      	beq.n	801a3b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a38e:	4a0d      	ldr	r2, [pc, #52]	; (801a3c4 <HAL_SPI_IRQHandler+0x1fc>)
 801a390:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a396:	4618      	mov	r0, r3
 801a398:	f7fc fcb4 	bl	8016d04 <HAL_DMA_Abort_IT>
 801a39c:	4603      	mov	r3, r0
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d00a      	beq.n	801a3b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a3a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801a3ae:	e003      	b.n	801a3b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f000 f809 	bl	801a3c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801a3b6:	e000      	b.n	801a3ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801a3b8:	bf00      	nop
    return;
 801a3ba:	bf00      	nop
  }
}
 801a3bc:	3720      	adds	r7, #32
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	bd80      	pop	{r7, pc}
 801a3c2:	bf00      	nop
 801a3c4:	0801a3dd 	.word	0x0801a3dd

0801a3c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801a3c8:	b480      	push	{r7}
 801a3ca:	b083      	sub	sp, #12
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801a3d0:	bf00      	nop
 801a3d2:	370c      	adds	r7, #12
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3da:	4770      	bx	lr

0801a3dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b084      	sub	sp, #16
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	2200      	movs	r2, #0
 801a3ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801a3f6:	68f8      	ldr	r0, [r7, #12]
 801a3f8:	f7ff ffe6 	bl	801a3c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801a3fc:	bf00      	nop
 801a3fe:	3710      	adds	r7, #16
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}

0801a404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b082      	sub	sp, #8
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d101      	bne.n	801a416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a412:	2301      	movs	r3, #1
 801a414:	e01d      	b.n	801a452 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a41c:	b2db      	uxtb	r3, r3
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d106      	bne.n	801a430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	2200      	movs	r2, #0
 801a426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a42a:	6878      	ldr	r0, [r7, #4]
 801a42c:	f7e8 f8ae 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	2202      	movs	r2, #2
 801a434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	681a      	ldr	r2, [r3, #0]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	3304      	adds	r3, #4
 801a440:	4619      	mov	r1, r3
 801a442:	4610      	mov	r0, r2
 801a444:	f000 fc3e 	bl	801acc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2201      	movs	r2, #1
 801a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a450:	2300      	movs	r3, #0
}
 801a452:	4618      	mov	r0, r3
 801a454:	3708      	adds	r7, #8
 801a456:	46bd      	mov	sp, r7
 801a458:	bd80      	pop	{r7, pc}

0801a45a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a45a:	b480      	push	{r7}
 801a45c:	b085      	sub	sp, #20
 801a45e:	af00      	add	r7, sp, #0
 801a460:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	2202      	movs	r2, #2
 801a466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	689b      	ldr	r3, [r3, #8]
 801a470:	f003 0307 	and.w	r3, r3, #7
 801a474:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	2b06      	cmp	r3, #6
 801a47a:	d007      	beq.n	801a48c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	f042 0201 	orr.w	r2, r2, #1
 801a48a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2201      	movs	r2, #1
 801a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801a494:	2300      	movs	r3, #0
}
 801a496:	4618      	mov	r0, r3
 801a498:	3714      	adds	r7, #20
 801a49a:	46bd      	mov	sp, r7
 801a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a0:	4770      	bx	lr

0801a4a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a4a2:	b480      	push	{r7}
 801a4a4:	b085      	sub	sp, #20
 801a4a6:	af00      	add	r7, sp, #0
 801a4a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	68da      	ldr	r2, [r3, #12]
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	f042 0201 	orr.w	r2, r2, #1
 801a4b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	689b      	ldr	r3, [r3, #8]
 801a4c0:	f003 0307 	and.w	r3, r3, #7
 801a4c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	2b06      	cmp	r3, #6
 801a4ca:	d007      	beq.n	801a4dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	681a      	ldr	r2, [r3, #0]
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	f042 0201 	orr.w	r2, r2, #1
 801a4da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a4dc:	2300      	movs	r3, #0
}
 801a4de:	4618      	mov	r0, r3
 801a4e0:	3714      	adds	r7, #20
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4e8:	4770      	bx	lr

0801a4ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a4ea:	b580      	push	{r7, lr}
 801a4ec:	b082      	sub	sp, #8
 801a4ee:	af00      	add	r7, sp, #0
 801a4f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d101      	bne.n	801a4fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a4f8:	2301      	movs	r3, #1
 801a4fa:	e01d      	b.n	801a538 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a502:	b2db      	uxtb	r3, r3
 801a504:	2b00      	cmp	r3, #0
 801a506:	d106      	bne.n	801a516 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	2200      	movs	r2, #0
 801a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	f7e7 fefd 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	2202      	movs	r2, #2
 801a51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681a      	ldr	r2, [r3, #0]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	3304      	adds	r3, #4
 801a526:	4619      	mov	r1, r3
 801a528:	4610      	mov	r0, r2
 801a52a:	f000 fbcb 	bl	801acc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	2201      	movs	r2, #1
 801a532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a536:	2300      	movs	r3, #0
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3708      	adds	r7, #8
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}

0801a540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	b084      	sub	sp, #16
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
 801a548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	2201      	movs	r2, #1
 801a550:	6839      	ldr	r1, [r7, #0]
 801a552:	4618      	mov	r0, r3
 801a554:	f000 fea0 	bl	801b298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	4a15      	ldr	r2, [pc, #84]	; (801a5b4 <HAL_TIM_PWM_Start+0x74>)
 801a55e:	4293      	cmp	r3, r2
 801a560:	d004      	beq.n	801a56c <HAL_TIM_PWM_Start+0x2c>
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	4a14      	ldr	r2, [pc, #80]	; (801a5b8 <HAL_TIM_PWM_Start+0x78>)
 801a568:	4293      	cmp	r3, r2
 801a56a:	d101      	bne.n	801a570 <HAL_TIM_PWM_Start+0x30>
 801a56c:	2301      	movs	r3, #1
 801a56e:	e000      	b.n	801a572 <HAL_TIM_PWM_Start+0x32>
 801a570:	2300      	movs	r3, #0
 801a572:	2b00      	cmp	r3, #0
 801a574:	d007      	beq.n	801a586 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	689b      	ldr	r3, [r3, #8]
 801a58c:	f003 0307 	and.w	r3, r3, #7
 801a590:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	2b06      	cmp	r3, #6
 801a596:	d007      	beq.n	801a5a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	681a      	ldr	r2, [r3, #0]
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	f042 0201 	orr.w	r2, r2, #1
 801a5a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a5a8:	2300      	movs	r3, #0
}
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	3710      	adds	r7, #16
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bd80      	pop	{r7, pc}
 801a5b2:	bf00      	nop
 801a5b4:	40010000 	.word	0x40010000
 801a5b8:	40010400 	.word	0x40010400

0801a5bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b086      	sub	sp, #24
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
 801a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d101      	bne.n	801a5d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	e083      	b.n	801a6d8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a5d6:	b2db      	uxtb	r3, r3
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d106      	bne.n	801a5ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2200      	movs	r2, #0
 801a5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f7e8 fa85 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	2202      	movs	r2, #2
 801a5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	689b      	ldr	r3, [r3, #8]
 801a5f8:	687a      	ldr	r2, [r7, #4]
 801a5fa:	6812      	ldr	r2, [r2, #0]
 801a5fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a600:	f023 0307 	bic.w	r3, r3, #7
 801a604:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681a      	ldr	r2, [r3, #0]
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	3304      	adds	r3, #4
 801a60e:	4619      	mov	r1, r3
 801a610:	4610      	mov	r0, r2
 801a612:	f000 fb57 	bl	801acc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	689b      	ldr	r3, [r3, #8]
 801a61c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	699b      	ldr	r3, [r3, #24]
 801a624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	6a1b      	ldr	r3, [r3, #32]
 801a62c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801a62e:	683b      	ldr	r3, [r7, #0]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	697a      	ldr	r2, [r7, #20]
 801a634:	4313      	orrs	r3, r2
 801a636:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801a638:	693b      	ldr	r3, [r7, #16]
 801a63a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a63e:	f023 0303 	bic.w	r3, r3, #3
 801a642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801a644:	683b      	ldr	r3, [r7, #0]
 801a646:	689a      	ldr	r2, [r3, #8]
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	699b      	ldr	r3, [r3, #24]
 801a64c:	021b      	lsls	r3, r3, #8
 801a64e:	4313      	orrs	r3, r2
 801a650:	693a      	ldr	r2, [r7, #16]
 801a652:	4313      	orrs	r3, r2
 801a654:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801a656:	693b      	ldr	r3, [r7, #16]
 801a658:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801a65c:	f023 030c 	bic.w	r3, r3, #12
 801a660:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801a662:	693b      	ldr	r3, [r7, #16]
 801a664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801a668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a66c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801a66e:	683b      	ldr	r3, [r7, #0]
 801a670:	68da      	ldr	r2, [r3, #12]
 801a672:	683b      	ldr	r3, [r7, #0]
 801a674:	69db      	ldr	r3, [r3, #28]
 801a676:	021b      	lsls	r3, r3, #8
 801a678:	4313      	orrs	r3, r2
 801a67a:	693a      	ldr	r2, [r7, #16]
 801a67c:	4313      	orrs	r3, r2
 801a67e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	691b      	ldr	r3, [r3, #16]
 801a684:	011a      	lsls	r2, r3, #4
 801a686:	683b      	ldr	r3, [r7, #0]
 801a688:	6a1b      	ldr	r3, [r3, #32]
 801a68a:	031b      	lsls	r3, r3, #12
 801a68c:	4313      	orrs	r3, r2
 801a68e:	693a      	ldr	r2, [r7, #16]
 801a690:	4313      	orrs	r3, r2
 801a692:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801a69a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801a6a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801a6a4:	683b      	ldr	r3, [r7, #0]
 801a6a6:	685a      	ldr	r2, [r3, #4]
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	695b      	ldr	r3, [r3, #20]
 801a6ac:	011b      	lsls	r3, r3, #4
 801a6ae:	4313      	orrs	r3, r2
 801a6b0:	68fa      	ldr	r2, [r7, #12]
 801a6b2:	4313      	orrs	r3, r2
 801a6b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	697a      	ldr	r2, [r7, #20]
 801a6bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	693a      	ldr	r2, [r7, #16]
 801a6c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	68fa      	ldr	r2, [r7, #12]
 801a6cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2201      	movs	r2, #1
 801a6d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a6d6:	2300      	movs	r3, #0
}
 801a6d8:	4618      	mov	r0, r3
 801a6da:	3718      	adds	r7, #24
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}

0801a6e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b082      	sub	sp, #8
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
 801a6e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801a6ea:	683b      	ldr	r3, [r7, #0]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d003      	beq.n	801a6f8 <HAL_TIM_Encoder_Start+0x18>
 801a6f0:	683b      	ldr	r3, [r7, #0]
 801a6f2:	2b04      	cmp	r3, #4
 801a6f4:	d008      	beq.n	801a708 <HAL_TIM_Encoder_Start+0x28>
 801a6f6:	e00f      	b.n	801a718 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	2201      	movs	r2, #1
 801a6fe:	2100      	movs	r1, #0
 801a700:	4618      	mov	r0, r3
 801a702:	f000 fdc9 	bl	801b298 <TIM_CCxChannelCmd>
      break;
 801a706:	e016      	b.n	801a736 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	2201      	movs	r2, #1
 801a70e:	2104      	movs	r1, #4
 801a710:	4618      	mov	r0, r3
 801a712:	f000 fdc1 	bl	801b298 <TIM_CCxChannelCmd>
      break;
 801a716:	e00e      	b.n	801a736 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	2201      	movs	r2, #1
 801a71e:	2100      	movs	r1, #0
 801a720:	4618      	mov	r0, r3
 801a722:	f000 fdb9 	bl	801b298 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	2201      	movs	r2, #1
 801a72c:	2104      	movs	r1, #4
 801a72e:	4618      	mov	r0, r3
 801a730:	f000 fdb2 	bl	801b298 <TIM_CCxChannelCmd>
      break;
 801a734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	681a      	ldr	r2, [r3, #0]
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	f042 0201 	orr.w	r2, r2, #1
 801a744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801a746:	2300      	movs	r3, #0
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3708      	adds	r7, #8
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}

0801a750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	691b      	ldr	r3, [r3, #16]
 801a75e:	f003 0302 	and.w	r3, r3, #2
 801a762:	2b02      	cmp	r3, #2
 801a764:	d122      	bne.n	801a7ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	68db      	ldr	r3, [r3, #12]
 801a76c:	f003 0302 	and.w	r3, r3, #2
 801a770:	2b02      	cmp	r3, #2
 801a772:	d11b      	bne.n	801a7ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	f06f 0202 	mvn.w	r2, #2
 801a77c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	2201      	movs	r2, #1
 801a782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	699b      	ldr	r3, [r3, #24]
 801a78a:	f003 0303 	and.w	r3, r3, #3
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d003      	beq.n	801a79a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f000 fa78 	bl	801ac88 <HAL_TIM_IC_CaptureCallback>
 801a798:	e005      	b.n	801a7a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a79a:	6878      	ldr	r0, [r7, #4]
 801a79c:	f000 fa6a 	bl	801ac74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a7a0:	6878      	ldr	r0, [r7, #4]
 801a7a2:	f000 fa7b 	bl	801ac9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	691b      	ldr	r3, [r3, #16]
 801a7b2:	f003 0304 	and.w	r3, r3, #4
 801a7b6:	2b04      	cmp	r3, #4
 801a7b8:	d122      	bne.n	801a800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	68db      	ldr	r3, [r3, #12]
 801a7c0:	f003 0304 	and.w	r3, r3, #4
 801a7c4:	2b04      	cmp	r3, #4
 801a7c6:	d11b      	bne.n	801a800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	f06f 0204 	mvn.w	r2, #4
 801a7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	2202      	movs	r2, #2
 801a7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	699b      	ldr	r3, [r3, #24]
 801a7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d003      	beq.n	801a7ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a7e6:	6878      	ldr	r0, [r7, #4]
 801a7e8:	f000 fa4e 	bl	801ac88 <HAL_TIM_IC_CaptureCallback>
 801a7ec:	e005      	b.n	801a7fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a7ee:	6878      	ldr	r0, [r7, #4]
 801a7f0:	f000 fa40 	bl	801ac74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a7f4:	6878      	ldr	r0, [r7, #4]
 801a7f6:	f000 fa51 	bl	801ac9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	691b      	ldr	r3, [r3, #16]
 801a806:	f003 0308 	and.w	r3, r3, #8
 801a80a:	2b08      	cmp	r3, #8
 801a80c:	d122      	bne.n	801a854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	68db      	ldr	r3, [r3, #12]
 801a814:	f003 0308 	and.w	r3, r3, #8
 801a818:	2b08      	cmp	r3, #8
 801a81a:	d11b      	bne.n	801a854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	f06f 0208 	mvn.w	r2, #8
 801a824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	2204      	movs	r2, #4
 801a82a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	69db      	ldr	r3, [r3, #28]
 801a832:	f003 0303 	and.w	r3, r3, #3
 801a836:	2b00      	cmp	r3, #0
 801a838:	d003      	beq.n	801a842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f000 fa24 	bl	801ac88 <HAL_TIM_IC_CaptureCallback>
 801a840:	e005      	b.n	801a84e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a842:	6878      	ldr	r0, [r7, #4]
 801a844:	f000 fa16 	bl	801ac74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a848:	6878      	ldr	r0, [r7, #4]
 801a84a:	f000 fa27 	bl	801ac9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2200      	movs	r2, #0
 801a852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	691b      	ldr	r3, [r3, #16]
 801a85a:	f003 0310 	and.w	r3, r3, #16
 801a85e:	2b10      	cmp	r3, #16
 801a860:	d122      	bne.n	801a8a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	68db      	ldr	r3, [r3, #12]
 801a868:	f003 0310 	and.w	r3, r3, #16
 801a86c:	2b10      	cmp	r3, #16
 801a86e:	d11b      	bne.n	801a8a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	f06f 0210 	mvn.w	r2, #16
 801a878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	2208      	movs	r2, #8
 801a87e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	69db      	ldr	r3, [r3, #28]
 801a886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d003      	beq.n	801a896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a88e:	6878      	ldr	r0, [r7, #4]
 801a890:	f000 f9fa 	bl	801ac88 <HAL_TIM_IC_CaptureCallback>
 801a894:	e005      	b.n	801a8a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a896:	6878      	ldr	r0, [r7, #4]
 801a898:	f000 f9ec 	bl	801ac74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a89c:	6878      	ldr	r0, [r7, #4]
 801a89e:	f000 f9fd 	bl	801ac9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	691b      	ldr	r3, [r3, #16]
 801a8ae:	f003 0301 	and.w	r3, r3, #1
 801a8b2:	2b01      	cmp	r3, #1
 801a8b4:	d10e      	bne.n	801a8d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	68db      	ldr	r3, [r3, #12]
 801a8bc:	f003 0301 	and.w	r3, r3, #1
 801a8c0:	2b01      	cmp	r3, #1
 801a8c2:	d107      	bne.n	801a8d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	f06f 0201 	mvn.w	r2, #1
 801a8cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a8ce:	6878      	ldr	r0, [r7, #4]
 801a8d0:	f7f3 ffd0 	bl	800e874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	691b      	ldr	r3, [r3, #16]
 801a8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8de:	2b80      	cmp	r3, #128	; 0x80
 801a8e0:	d10e      	bne.n	801a900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	68db      	ldr	r3, [r3, #12]
 801a8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8ec:	2b80      	cmp	r3, #128	; 0x80
 801a8ee:	d107      	bne.n	801a900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a8f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f000 fd78 	bl	801b3f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	691b      	ldr	r3, [r3, #16]
 801a906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a90a:	2b40      	cmp	r3, #64	; 0x40
 801a90c:	d10e      	bne.n	801a92c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	68db      	ldr	r3, [r3, #12]
 801a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a918:	2b40      	cmp	r3, #64	; 0x40
 801a91a:	d107      	bne.n	801a92c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a926:	6878      	ldr	r0, [r7, #4]
 801a928:	f000 f9c2 	bl	801acb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	691b      	ldr	r3, [r3, #16]
 801a932:	f003 0320 	and.w	r3, r3, #32
 801a936:	2b20      	cmp	r3, #32
 801a938:	d10e      	bne.n	801a958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	68db      	ldr	r3, [r3, #12]
 801a940:	f003 0320 	and.w	r3, r3, #32
 801a944:	2b20      	cmp	r3, #32
 801a946:	d107      	bne.n	801a958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	f06f 0220 	mvn.w	r2, #32
 801a950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f000 fd42 	bl	801b3dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a958:	bf00      	nop
 801a95a:	3708      	adds	r7, #8
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}

0801a960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a960:	b580      	push	{r7, lr}
 801a962:	b084      	sub	sp, #16
 801a964:	af00      	add	r7, sp, #0
 801a966:	60f8      	str	r0, [r7, #12]
 801a968:	60b9      	str	r1, [r7, #8]
 801a96a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a972:	2b01      	cmp	r3, #1
 801a974:	d101      	bne.n	801a97a <HAL_TIM_PWM_ConfigChannel+0x1a>
 801a976:	2302      	movs	r3, #2
 801a978:	e0b4      	b.n	801aae4 <HAL_TIM_PWM_ConfigChannel+0x184>
 801a97a:	68fb      	ldr	r3, [r7, #12]
 801a97c:	2201      	movs	r2, #1
 801a97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	2202      	movs	r2, #2
 801a986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2b0c      	cmp	r3, #12
 801a98e:	f200 809f 	bhi.w	801aad0 <HAL_TIM_PWM_ConfigChannel+0x170>
 801a992:	a201      	add	r2, pc, #4	; (adr r2, 801a998 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a998:	0801a9cd 	.word	0x0801a9cd
 801a99c:	0801aad1 	.word	0x0801aad1
 801a9a0:	0801aad1 	.word	0x0801aad1
 801a9a4:	0801aad1 	.word	0x0801aad1
 801a9a8:	0801aa0d 	.word	0x0801aa0d
 801a9ac:	0801aad1 	.word	0x0801aad1
 801a9b0:	0801aad1 	.word	0x0801aad1
 801a9b4:	0801aad1 	.word	0x0801aad1
 801a9b8:	0801aa4f 	.word	0x0801aa4f
 801a9bc:	0801aad1 	.word	0x0801aad1
 801a9c0:	0801aad1 	.word	0x0801aad1
 801a9c4:	0801aad1 	.word	0x0801aad1
 801a9c8:	0801aa8f 	.word	0x0801aa8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	68b9      	ldr	r1, [r7, #8]
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f000 fa16 	bl	801ae04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	699a      	ldr	r2, [r3, #24]
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	f042 0208 	orr.w	r2, r2, #8
 801a9e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	699a      	ldr	r2, [r3, #24]
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	f022 0204 	bic.w	r2, r2, #4
 801a9f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	6999      	ldr	r1, [r3, #24]
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	691a      	ldr	r2, [r3, #16]
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	430a      	orrs	r2, r1
 801aa08:	619a      	str	r2, [r3, #24]
      break;
 801aa0a:	e062      	b.n	801aad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	68b9      	ldr	r1, [r7, #8]
 801aa12:	4618      	mov	r0, r3
 801aa14:	f000 fa66 	bl	801aee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	699a      	ldr	r2, [r3, #24]
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801aa26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	699a      	ldr	r2, [r3, #24]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801aa36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	6999      	ldr	r1, [r3, #24]
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	691b      	ldr	r3, [r3, #16]
 801aa42:	021a      	lsls	r2, r3, #8
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	430a      	orrs	r2, r1
 801aa4a:	619a      	str	r2, [r3, #24]
      break;
 801aa4c:	e041      	b.n	801aad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	68b9      	ldr	r1, [r7, #8]
 801aa54:	4618      	mov	r0, r3
 801aa56:	f000 fabb 	bl	801afd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	69da      	ldr	r2, [r3, #28]
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	f042 0208 	orr.w	r2, r2, #8
 801aa68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	69da      	ldr	r2, [r3, #28]
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	f022 0204 	bic.w	r2, r2, #4
 801aa78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	69d9      	ldr	r1, [r3, #28]
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	691a      	ldr	r2, [r3, #16]
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	430a      	orrs	r2, r1
 801aa8a:	61da      	str	r2, [r3, #28]
      break;
 801aa8c:	e021      	b.n	801aad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	68b9      	ldr	r1, [r7, #8]
 801aa94:	4618      	mov	r0, r3
 801aa96:	f000 fb0f 	bl	801b0b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	69da      	ldr	r2, [r3, #28]
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801aaa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	69da      	ldr	r2, [r3, #28]
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801aab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	69d9      	ldr	r1, [r3, #28]
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	691b      	ldr	r3, [r3, #16]
 801aac4:	021a      	lsls	r2, r3, #8
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	430a      	orrs	r2, r1
 801aacc:	61da      	str	r2, [r3, #28]
      break;
 801aace:	e000      	b.n	801aad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801aad0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	2201      	movs	r2, #1
 801aad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	2200      	movs	r2, #0
 801aade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801aae2:	2300      	movs	r3, #0
}
 801aae4:	4618      	mov	r0, r3
 801aae6:	3710      	adds	r7, #16
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
 801aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aafc:	2b01      	cmp	r3, #1
 801aafe:	d101      	bne.n	801ab04 <HAL_TIM_ConfigClockSource+0x18>
 801ab00:	2302      	movs	r3, #2
 801ab02:	e0b3      	b.n	801ac6c <HAL_TIM_ConfigClockSource+0x180>
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2201      	movs	r2, #1
 801ab08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	2202      	movs	r2, #2
 801ab10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	689b      	ldr	r3, [r3, #8]
 801ab1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801ab22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801ab2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	68fa      	ldr	r2, [r7, #12]
 801ab32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ab3c:	d03e      	beq.n	801abbc <HAL_TIM_ConfigClockSource+0xd0>
 801ab3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ab42:	f200 8087 	bhi.w	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ab4a:	f000 8085 	beq.w	801ac58 <HAL_TIM_ConfigClockSource+0x16c>
 801ab4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ab52:	d87f      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab54:	2b70      	cmp	r3, #112	; 0x70
 801ab56:	d01a      	beq.n	801ab8e <HAL_TIM_ConfigClockSource+0xa2>
 801ab58:	2b70      	cmp	r3, #112	; 0x70
 801ab5a:	d87b      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab5c:	2b60      	cmp	r3, #96	; 0x60
 801ab5e:	d050      	beq.n	801ac02 <HAL_TIM_ConfigClockSource+0x116>
 801ab60:	2b60      	cmp	r3, #96	; 0x60
 801ab62:	d877      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab64:	2b50      	cmp	r3, #80	; 0x50
 801ab66:	d03c      	beq.n	801abe2 <HAL_TIM_ConfigClockSource+0xf6>
 801ab68:	2b50      	cmp	r3, #80	; 0x50
 801ab6a:	d873      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab6c:	2b40      	cmp	r3, #64	; 0x40
 801ab6e:	d058      	beq.n	801ac22 <HAL_TIM_ConfigClockSource+0x136>
 801ab70:	2b40      	cmp	r3, #64	; 0x40
 801ab72:	d86f      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab74:	2b30      	cmp	r3, #48	; 0x30
 801ab76:	d064      	beq.n	801ac42 <HAL_TIM_ConfigClockSource+0x156>
 801ab78:	2b30      	cmp	r3, #48	; 0x30
 801ab7a:	d86b      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab7c:	2b20      	cmp	r3, #32
 801ab7e:	d060      	beq.n	801ac42 <HAL_TIM_ConfigClockSource+0x156>
 801ab80:	2b20      	cmp	r3, #32
 801ab82:	d867      	bhi.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d05c      	beq.n	801ac42 <HAL_TIM_ConfigClockSource+0x156>
 801ab88:	2b10      	cmp	r3, #16
 801ab8a:	d05a      	beq.n	801ac42 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801ab8c:	e062      	b.n	801ac54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	6818      	ldr	r0, [r3, #0]
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	6899      	ldr	r1, [r3, #8]
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	685a      	ldr	r2, [r3, #4]
 801ab9a:	683b      	ldr	r3, [r7, #0]
 801ab9c:	68db      	ldr	r3, [r3, #12]
 801ab9e:	f000 fb5b 	bl	801b258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	689b      	ldr	r3, [r3, #8]
 801aba8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801abb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	68fa      	ldr	r2, [r7, #12]
 801abb8:	609a      	str	r2, [r3, #8]
      break;
 801abba:	e04e      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	6818      	ldr	r0, [r3, #0]
 801abc0:	683b      	ldr	r3, [r7, #0]
 801abc2:	6899      	ldr	r1, [r3, #8]
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	685a      	ldr	r2, [r3, #4]
 801abc8:	683b      	ldr	r3, [r7, #0]
 801abca:	68db      	ldr	r3, [r3, #12]
 801abcc:	f000 fb44 	bl	801b258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	689a      	ldr	r2, [r3, #8]
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801abde:	609a      	str	r2, [r3, #8]
      break;
 801abe0:	e03b      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	6818      	ldr	r0, [r3, #0]
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	6859      	ldr	r1, [r3, #4]
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	68db      	ldr	r3, [r3, #12]
 801abee:	461a      	mov	r2, r3
 801abf0:	f000 fab8 	bl	801b164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	2150      	movs	r1, #80	; 0x50
 801abfa:	4618      	mov	r0, r3
 801abfc:	f000 fb11 	bl	801b222 <TIM_ITRx_SetConfig>
      break;
 801ac00:	e02b      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	6818      	ldr	r0, [r3, #0]
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	6859      	ldr	r1, [r3, #4]
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	68db      	ldr	r3, [r3, #12]
 801ac0e:	461a      	mov	r2, r3
 801ac10:	f000 fad7 	bl	801b1c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	2160      	movs	r1, #96	; 0x60
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	f000 fb01 	bl	801b222 <TIM_ITRx_SetConfig>
      break;
 801ac20:	e01b      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	6818      	ldr	r0, [r3, #0]
 801ac26:	683b      	ldr	r3, [r7, #0]
 801ac28:	6859      	ldr	r1, [r3, #4]
 801ac2a:	683b      	ldr	r3, [r7, #0]
 801ac2c:	68db      	ldr	r3, [r3, #12]
 801ac2e:	461a      	mov	r2, r3
 801ac30:	f000 fa98 	bl	801b164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	2140      	movs	r1, #64	; 0x40
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f000 faf1 	bl	801b222 <TIM_ITRx_SetConfig>
      break;
 801ac40:	e00b      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	681a      	ldr	r2, [r3, #0]
 801ac46:	683b      	ldr	r3, [r7, #0]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	4610      	mov	r0, r2
 801ac4e:	f000 fae8 	bl	801b222 <TIM_ITRx_SetConfig>
      break;
 801ac52:	e002      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801ac54:	bf00      	nop
 801ac56:	e000      	b.n	801ac5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801ac58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	2201      	movs	r2, #1
 801ac5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	2200      	movs	r2, #0
 801ac66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ac6a:	2300      	movs	r3, #0
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	3710      	adds	r7, #16
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}

0801ac74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ac74:	b480      	push	{r7}
 801ac76:	b083      	sub	sp, #12
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801ac7c:	bf00      	nop
 801ac7e:	370c      	adds	r7, #12
 801ac80:	46bd      	mov	sp, r7
 801ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac86:	4770      	bx	lr

0801ac88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801ac88:	b480      	push	{r7}
 801ac8a:	b083      	sub	sp, #12
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801ac90:	bf00      	nop
 801ac92:	370c      	adds	r7, #12
 801ac94:	46bd      	mov	sp, r7
 801ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac9a:	4770      	bx	lr

0801ac9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801ac9c:	b480      	push	{r7}
 801ac9e:	b083      	sub	sp, #12
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801aca4:	bf00      	nop
 801aca6:	370c      	adds	r7, #12
 801aca8:	46bd      	mov	sp, r7
 801acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acae:	4770      	bx	lr

0801acb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801acb0:	b480      	push	{r7}
 801acb2:	b083      	sub	sp, #12
 801acb4:	af00      	add	r7, sp, #0
 801acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801acb8:	bf00      	nop
 801acba:	370c      	adds	r7, #12
 801acbc:	46bd      	mov	sp, r7
 801acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc2:	4770      	bx	lr

0801acc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801acc4:	b480      	push	{r7}
 801acc6:	b085      	sub	sp, #20
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
 801accc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	4a40      	ldr	r2, [pc, #256]	; (801add8 <TIM_Base_SetConfig+0x114>)
 801acd8:	4293      	cmp	r3, r2
 801acda:	d013      	beq.n	801ad04 <TIM_Base_SetConfig+0x40>
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ace2:	d00f      	beq.n	801ad04 <TIM_Base_SetConfig+0x40>
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	4a3d      	ldr	r2, [pc, #244]	; (801addc <TIM_Base_SetConfig+0x118>)
 801ace8:	4293      	cmp	r3, r2
 801acea:	d00b      	beq.n	801ad04 <TIM_Base_SetConfig+0x40>
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	4a3c      	ldr	r2, [pc, #240]	; (801ade0 <TIM_Base_SetConfig+0x11c>)
 801acf0:	4293      	cmp	r3, r2
 801acf2:	d007      	beq.n	801ad04 <TIM_Base_SetConfig+0x40>
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	4a3b      	ldr	r2, [pc, #236]	; (801ade4 <TIM_Base_SetConfig+0x120>)
 801acf8:	4293      	cmp	r3, r2
 801acfa:	d003      	beq.n	801ad04 <TIM_Base_SetConfig+0x40>
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	4a3a      	ldr	r2, [pc, #232]	; (801ade8 <TIM_Base_SetConfig+0x124>)
 801ad00:	4293      	cmp	r3, r2
 801ad02:	d108      	bne.n	801ad16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801ad04:	68fb      	ldr	r3, [r7, #12]
 801ad06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ad0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	68fa      	ldr	r2, [r7, #12]
 801ad12:	4313      	orrs	r3, r2
 801ad14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	4a2f      	ldr	r2, [pc, #188]	; (801add8 <TIM_Base_SetConfig+0x114>)
 801ad1a:	4293      	cmp	r3, r2
 801ad1c:	d02b      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ad24:	d027      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	4a2c      	ldr	r2, [pc, #176]	; (801addc <TIM_Base_SetConfig+0x118>)
 801ad2a:	4293      	cmp	r3, r2
 801ad2c:	d023      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	4a2b      	ldr	r2, [pc, #172]	; (801ade0 <TIM_Base_SetConfig+0x11c>)
 801ad32:	4293      	cmp	r3, r2
 801ad34:	d01f      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	4a2a      	ldr	r2, [pc, #168]	; (801ade4 <TIM_Base_SetConfig+0x120>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d01b      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	4a29      	ldr	r2, [pc, #164]	; (801ade8 <TIM_Base_SetConfig+0x124>)
 801ad42:	4293      	cmp	r3, r2
 801ad44:	d017      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	4a28      	ldr	r2, [pc, #160]	; (801adec <TIM_Base_SetConfig+0x128>)
 801ad4a:	4293      	cmp	r3, r2
 801ad4c:	d013      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	4a27      	ldr	r2, [pc, #156]	; (801adf0 <TIM_Base_SetConfig+0x12c>)
 801ad52:	4293      	cmp	r3, r2
 801ad54:	d00f      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	4a26      	ldr	r2, [pc, #152]	; (801adf4 <TIM_Base_SetConfig+0x130>)
 801ad5a:	4293      	cmp	r3, r2
 801ad5c:	d00b      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	4a25      	ldr	r2, [pc, #148]	; (801adf8 <TIM_Base_SetConfig+0x134>)
 801ad62:	4293      	cmp	r3, r2
 801ad64:	d007      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	4a24      	ldr	r2, [pc, #144]	; (801adfc <TIM_Base_SetConfig+0x138>)
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d003      	beq.n	801ad76 <TIM_Base_SetConfig+0xb2>
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	4a23      	ldr	r2, [pc, #140]	; (801ae00 <TIM_Base_SetConfig+0x13c>)
 801ad72:	4293      	cmp	r3, r2
 801ad74:	d108      	bne.n	801ad88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ad7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	68db      	ldr	r3, [r3, #12]
 801ad82:	68fa      	ldr	r2, [r7, #12]
 801ad84:	4313      	orrs	r3, r2
 801ad86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	695b      	ldr	r3, [r3, #20]
 801ad92:	4313      	orrs	r3, r2
 801ad94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	68fa      	ldr	r2, [r7, #12]
 801ad9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801ad9c:	683b      	ldr	r3, [r7, #0]
 801ad9e:	689a      	ldr	r2, [r3, #8]
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	681a      	ldr	r2, [r3, #0]
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	4a0a      	ldr	r2, [pc, #40]	; (801add8 <TIM_Base_SetConfig+0x114>)
 801adb0:	4293      	cmp	r3, r2
 801adb2:	d003      	beq.n	801adbc <TIM_Base_SetConfig+0xf8>
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	4a0c      	ldr	r2, [pc, #48]	; (801ade8 <TIM_Base_SetConfig+0x124>)
 801adb8:	4293      	cmp	r3, r2
 801adba:	d103      	bne.n	801adc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801adbc:	683b      	ldr	r3, [r7, #0]
 801adbe:	691a      	ldr	r2, [r3, #16]
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	2201      	movs	r2, #1
 801adc8:	615a      	str	r2, [r3, #20]
}
 801adca:	bf00      	nop
 801adcc:	3714      	adds	r7, #20
 801adce:	46bd      	mov	sp, r7
 801add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add4:	4770      	bx	lr
 801add6:	bf00      	nop
 801add8:	40010000 	.word	0x40010000
 801addc:	40000400 	.word	0x40000400
 801ade0:	40000800 	.word	0x40000800
 801ade4:	40000c00 	.word	0x40000c00
 801ade8:	40010400 	.word	0x40010400
 801adec:	40014000 	.word	0x40014000
 801adf0:	40014400 	.word	0x40014400
 801adf4:	40014800 	.word	0x40014800
 801adf8:	40001800 	.word	0x40001800
 801adfc:	40001c00 	.word	0x40001c00
 801ae00:	40002000 	.word	0x40002000

0801ae04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ae04:	b480      	push	{r7}
 801ae06:	b087      	sub	sp, #28
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	6078      	str	r0, [r7, #4]
 801ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	6a1b      	ldr	r3, [r3, #32]
 801ae12:	f023 0201 	bic.w	r2, r3, #1
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	6a1b      	ldr	r3, [r3, #32]
 801ae1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	699b      	ldr	r3, [r3, #24]
 801ae2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ae32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	f023 0303 	bic.w	r3, r3, #3
 801ae3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ae3c:	683b      	ldr	r3, [r7, #0]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	68fa      	ldr	r2, [r7, #12]
 801ae42:	4313      	orrs	r3, r2
 801ae44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ae46:	697b      	ldr	r3, [r7, #20]
 801ae48:	f023 0302 	bic.w	r3, r3, #2
 801ae4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ae4e:	683b      	ldr	r3, [r7, #0]
 801ae50:	689b      	ldr	r3, [r3, #8]
 801ae52:	697a      	ldr	r2, [r7, #20]
 801ae54:	4313      	orrs	r3, r2
 801ae56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	4a20      	ldr	r2, [pc, #128]	; (801aedc <TIM_OC1_SetConfig+0xd8>)
 801ae5c:	4293      	cmp	r3, r2
 801ae5e:	d003      	beq.n	801ae68 <TIM_OC1_SetConfig+0x64>
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	4a1f      	ldr	r2, [pc, #124]	; (801aee0 <TIM_OC1_SetConfig+0xdc>)
 801ae64:	4293      	cmp	r3, r2
 801ae66:	d10c      	bne.n	801ae82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ae68:	697b      	ldr	r3, [r7, #20]
 801ae6a:	f023 0308 	bic.w	r3, r3, #8
 801ae6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ae70:	683b      	ldr	r3, [r7, #0]
 801ae72:	68db      	ldr	r3, [r3, #12]
 801ae74:	697a      	ldr	r2, [r7, #20]
 801ae76:	4313      	orrs	r3, r2
 801ae78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ae7a:	697b      	ldr	r3, [r7, #20]
 801ae7c:	f023 0304 	bic.w	r3, r3, #4
 801ae80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	4a15      	ldr	r2, [pc, #84]	; (801aedc <TIM_OC1_SetConfig+0xd8>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d003      	beq.n	801ae92 <TIM_OC1_SetConfig+0x8e>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	4a14      	ldr	r2, [pc, #80]	; (801aee0 <TIM_OC1_SetConfig+0xdc>)
 801ae8e:	4293      	cmp	r3, r2
 801ae90:	d111      	bne.n	801aeb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ae92:	693b      	ldr	r3, [r7, #16]
 801ae94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ae98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801aea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	695b      	ldr	r3, [r3, #20]
 801aea6:	693a      	ldr	r2, [r7, #16]
 801aea8:	4313      	orrs	r3, r2
 801aeaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	699b      	ldr	r3, [r3, #24]
 801aeb0:	693a      	ldr	r2, [r7, #16]
 801aeb2:	4313      	orrs	r3, r2
 801aeb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	693a      	ldr	r2, [r7, #16]
 801aeba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	68fa      	ldr	r2, [r7, #12]
 801aec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801aec2:	683b      	ldr	r3, [r7, #0]
 801aec4:	685a      	ldr	r2, [r3, #4]
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	697a      	ldr	r2, [r7, #20]
 801aece:	621a      	str	r2, [r3, #32]
}
 801aed0:	bf00      	nop
 801aed2:	371c      	adds	r7, #28
 801aed4:	46bd      	mov	sp, r7
 801aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeda:	4770      	bx	lr
 801aedc:	40010000 	.word	0x40010000
 801aee0:	40010400 	.word	0x40010400

0801aee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801aee4:	b480      	push	{r7}
 801aee6:	b087      	sub	sp, #28
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	6a1b      	ldr	r3, [r3, #32]
 801aef2:	f023 0210 	bic.w	r2, r3, #16
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	6a1b      	ldr	r3, [r3, #32]
 801aefe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	699b      	ldr	r3, [r3, #24]
 801af0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801af12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801af1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	021b      	lsls	r3, r3, #8
 801af22:	68fa      	ldr	r2, [r7, #12]
 801af24:	4313      	orrs	r3, r2
 801af26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801af28:	697b      	ldr	r3, [r7, #20]
 801af2a:	f023 0320 	bic.w	r3, r3, #32
 801af2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801af30:	683b      	ldr	r3, [r7, #0]
 801af32:	689b      	ldr	r3, [r3, #8]
 801af34:	011b      	lsls	r3, r3, #4
 801af36:	697a      	ldr	r2, [r7, #20]
 801af38:	4313      	orrs	r3, r2
 801af3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	4a22      	ldr	r2, [pc, #136]	; (801afc8 <TIM_OC2_SetConfig+0xe4>)
 801af40:	4293      	cmp	r3, r2
 801af42:	d003      	beq.n	801af4c <TIM_OC2_SetConfig+0x68>
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	4a21      	ldr	r2, [pc, #132]	; (801afcc <TIM_OC2_SetConfig+0xe8>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d10d      	bne.n	801af68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801af4c:	697b      	ldr	r3, [r7, #20]
 801af4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801af52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801af54:	683b      	ldr	r3, [r7, #0]
 801af56:	68db      	ldr	r3, [r3, #12]
 801af58:	011b      	lsls	r3, r3, #4
 801af5a:	697a      	ldr	r2, [r7, #20]
 801af5c:	4313      	orrs	r3, r2
 801af5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801af60:	697b      	ldr	r3, [r7, #20]
 801af62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801af66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	4a17      	ldr	r2, [pc, #92]	; (801afc8 <TIM_OC2_SetConfig+0xe4>)
 801af6c:	4293      	cmp	r3, r2
 801af6e:	d003      	beq.n	801af78 <TIM_OC2_SetConfig+0x94>
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	4a16      	ldr	r2, [pc, #88]	; (801afcc <TIM_OC2_SetConfig+0xe8>)
 801af74:	4293      	cmp	r3, r2
 801af76:	d113      	bne.n	801afa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801af78:	693b      	ldr	r3, [r7, #16]
 801af7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801af7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801af80:	693b      	ldr	r3, [r7, #16]
 801af82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801af86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	695b      	ldr	r3, [r3, #20]
 801af8c:	009b      	lsls	r3, r3, #2
 801af8e:	693a      	ldr	r2, [r7, #16]
 801af90:	4313      	orrs	r3, r2
 801af92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801af94:	683b      	ldr	r3, [r7, #0]
 801af96:	699b      	ldr	r3, [r3, #24]
 801af98:	009b      	lsls	r3, r3, #2
 801af9a:	693a      	ldr	r2, [r7, #16]
 801af9c:	4313      	orrs	r3, r2
 801af9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	693a      	ldr	r2, [r7, #16]
 801afa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	68fa      	ldr	r2, [r7, #12]
 801afaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	685a      	ldr	r2, [r3, #4]
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	697a      	ldr	r2, [r7, #20]
 801afb8:	621a      	str	r2, [r3, #32]
}
 801afba:	bf00      	nop
 801afbc:	371c      	adds	r7, #28
 801afbe:	46bd      	mov	sp, r7
 801afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc4:	4770      	bx	lr
 801afc6:	bf00      	nop
 801afc8:	40010000 	.word	0x40010000
 801afcc:	40010400 	.word	0x40010400

0801afd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801afd0:	b480      	push	{r7}
 801afd2:	b087      	sub	sp, #28
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	6a1b      	ldr	r3, [r3, #32]
 801afde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	6a1b      	ldr	r3, [r3, #32]
 801afea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	685b      	ldr	r3, [r3, #4]
 801aff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	69db      	ldr	r3, [r3, #28]
 801aff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801aff8:	68fb      	ldr	r3, [r7, #12]
 801affa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801affe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	f023 0303 	bic.w	r3, r3, #3
 801b006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	68fa      	ldr	r2, [r7, #12]
 801b00e:	4313      	orrs	r3, r2
 801b010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b012:	697b      	ldr	r3, [r7, #20]
 801b014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	689b      	ldr	r3, [r3, #8]
 801b01e:	021b      	lsls	r3, r3, #8
 801b020:	697a      	ldr	r2, [r7, #20]
 801b022:	4313      	orrs	r3, r2
 801b024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	4a21      	ldr	r2, [pc, #132]	; (801b0b0 <TIM_OC3_SetConfig+0xe0>)
 801b02a:	4293      	cmp	r3, r2
 801b02c:	d003      	beq.n	801b036 <TIM_OC3_SetConfig+0x66>
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	4a20      	ldr	r2, [pc, #128]	; (801b0b4 <TIM_OC3_SetConfig+0xe4>)
 801b032:	4293      	cmp	r3, r2
 801b034:	d10d      	bne.n	801b052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b03c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b03e:	683b      	ldr	r3, [r7, #0]
 801b040:	68db      	ldr	r3, [r3, #12]
 801b042:	021b      	lsls	r3, r3, #8
 801b044:	697a      	ldr	r2, [r7, #20]
 801b046:	4313      	orrs	r3, r2
 801b048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b04a:	697b      	ldr	r3, [r7, #20]
 801b04c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	4a16      	ldr	r2, [pc, #88]	; (801b0b0 <TIM_OC3_SetConfig+0xe0>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d003      	beq.n	801b062 <TIM_OC3_SetConfig+0x92>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	4a15      	ldr	r2, [pc, #84]	; (801b0b4 <TIM_OC3_SetConfig+0xe4>)
 801b05e:	4293      	cmp	r3, r2
 801b060:	d113      	bne.n	801b08a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b062:	693b      	ldr	r3, [r7, #16]
 801b064:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b06a:	693b      	ldr	r3, [r7, #16]
 801b06c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b072:	683b      	ldr	r3, [r7, #0]
 801b074:	695b      	ldr	r3, [r3, #20]
 801b076:	011b      	lsls	r3, r3, #4
 801b078:	693a      	ldr	r2, [r7, #16]
 801b07a:	4313      	orrs	r3, r2
 801b07c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b07e:	683b      	ldr	r3, [r7, #0]
 801b080:	699b      	ldr	r3, [r3, #24]
 801b082:	011b      	lsls	r3, r3, #4
 801b084:	693a      	ldr	r2, [r7, #16]
 801b086:	4313      	orrs	r3, r2
 801b088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	693a      	ldr	r2, [r7, #16]
 801b08e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	68fa      	ldr	r2, [r7, #12]
 801b094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	685a      	ldr	r2, [r3, #4]
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	697a      	ldr	r2, [r7, #20]
 801b0a2:	621a      	str	r2, [r3, #32]
}
 801b0a4:	bf00      	nop
 801b0a6:	371c      	adds	r7, #28
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ae:	4770      	bx	lr
 801b0b0:	40010000 	.word	0x40010000
 801b0b4:	40010400 	.word	0x40010400

0801b0b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b0b8:	b480      	push	{r7}
 801b0ba:	b087      	sub	sp, #28
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	6078      	str	r0, [r7, #4]
 801b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	6a1b      	ldr	r3, [r3, #32]
 801b0c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	6a1b      	ldr	r3, [r3, #32]
 801b0d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	69db      	ldr	r3, [r3, #28]
 801b0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b0ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b0f0:	683b      	ldr	r3, [r7, #0]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	021b      	lsls	r3, r3, #8
 801b0f6:	68fa      	ldr	r2, [r7, #12]
 801b0f8:	4313      	orrs	r3, r2
 801b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b0fc:	693b      	ldr	r3, [r7, #16]
 801b0fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b104:	683b      	ldr	r3, [r7, #0]
 801b106:	689b      	ldr	r3, [r3, #8]
 801b108:	031b      	lsls	r3, r3, #12
 801b10a:	693a      	ldr	r2, [r7, #16]
 801b10c:	4313      	orrs	r3, r2
 801b10e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	4a12      	ldr	r2, [pc, #72]	; (801b15c <TIM_OC4_SetConfig+0xa4>)
 801b114:	4293      	cmp	r3, r2
 801b116:	d003      	beq.n	801b120 <TIM_OC4_SetConfig+0x68>
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	4a11      	ldr	r2, [pc, #68]	; (801b160 <TIM_OC4_SetConfig+0xa8>)
 801b11c:	4293      	cmp	r3, r2
 801b11e:	d109      	bne.n	801b134 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b120:	697b      	ldr	r3, [r7, #20]
 801b122:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b126:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	695b      	ldr	r3, [r3, #20]
 801b12c:	019b      	lsls	r3, r3, #6
 801b12e:	697a      	ldr	r2, [r7, #20]
 801b130:	4313      	orrs	r3, r2
 801b132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	697a      	ldr	r2, [r7, #20]
 801b138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	68fa      	ldr	r2, [r7, #12]
 801b13e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b140:	683b      	ldr	r3, [r7, #0]
 801b142:	685a      	ldr	r2, [r3, #4]
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	693a      	ldr	r2, [r7, #16]
 801b14c:	621a      	str	r2, [r3, #32]
}
 801b14e:	bf00      	nop
 801b150:	371c      	adds	r7, #28
 801b152:	46bd      	mov	sp, r7
 801b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b158:	4770      	bx	lr
 801b15a:	bf00      	nop
 801b15c:	40010000 	.word	0x40010000
 801b160:	40010400 	.word	0x40010400

0801b164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b164:	b480      	push	{r7}
 801b166:	b087      	sub	sp, #28
 801b168:	af00      	add	r7, sp, #0
 801b16a:	60f8      	str	r0, [r7, #12]
 801b16c:	60b9      	str	r1, [r7, #8]
 801b16e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	6a1b      	ldr	r3, [r3, #32]
 801b174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	6a1b      	ldr	r3, [r3, #32]
 801b17a:	f023 0201 	bic.w	r2, r3, #1
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	699b      	ldr	r3, [r3, #24]
 801b186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b188:	693b      	ldr	r3, [r7, #16]
 801b18a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	011b      	lsls	r3, r3, #4
 801b194:	693a      	ldr	r2, [r7, #16]
 801b196:	4313      	orrs	r3, r2
 801b198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b19a:	697b      	ldr	r3, [r7, #20]
 801b19c:	f023 030a 	bic.w	r3, r3, #10
 801b1a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b1a2:	697a      	ldr	r2, [r7, #20]
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	4313      	orrs	r3, r2
 801b1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	693a      	ldr	r2, [r7, #16]
 801b1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	697a      	ldr	r2, [r7, #20]
 801b1b4:	621a      	str	r2, [r3, #32]
}
 801b1b6:	bf00      	nop
 801b1b8:	371c      	adds	r7, #28
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c0:	4770      	bx	lr

0801b1c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b1c2:	b480      	push	{r7}
 801b1c4:	b087      	sub	sp, #28
 801b1c6:	af00      	add	r7, sp, #0
 801b1c8:	60f8      	str	r0, [r7, #12]
 801b1ca:	60b9      	str	r1, [r7, #8]
 801b1cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	6a1b      	ldr	r3, [r3, #32]
 801b1d2:	f023 0210 	bic.w	r2, r3, #16
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	699b      	ldr	r3, [r3, #24]
 801b1de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	6a1b      	ldr	r3, [r3, #32]
 801b1e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b1e6:	697b      	ldr	r3, [r7, #20]
 801b1e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b1ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	031b      	lsls	r3, r3, #12
 801b1f2:	697a      	ldr	r2, [r7, #20]
 801b1f4:	4313      	orrs	r3, r2
 801b1f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b1f8:	693b      	ldr	r3, [r7, #16]
 801b1fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b1fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b200:	68bb      	ldr	r3, [r7, #8]
 801b202:	011b      	lsls	r3, r3, #4
 801b204:	693a      	ldr	r2, [r7, #16]
 801b206:	4313      	orrs	r3, r2
 801b208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	697a      	ldr	r2, [r7, #20]
 801b20e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	693a      	ldr	r2, [r7, #16]
 801b214:	621a      	str	r2, [r3, #32]
}
 801b216:	bf00      	nop
 801b218:	371c      	adds	r7, #28
 801b21a:	46bd      	mov	sp, r7
 801b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b220:	4770      	bx	lr

0801b222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b222:	b480      	push	{r7}
 801b224:	b085      	sub	sp, #20
 801b226:	af00      	add	r7, sp, #0
 801b228:	6078      	str	r0, [r7, #4]
 801b22a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	689b      	ldr	r3, [r3, #8]
 801b230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b23a:	683a      	ldr	r2, [r7, #0]
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	4313      	orrs	r3, r2
 801b240:	f043 0307 	orr.w	r3, r3, #7
 801b244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	68fa      	ldr	r2, [r7, #12]
 801b24a:	609a      	str	r2, [r3, #8]
}
 801b24c:	bf00      	nop
 801b24e:	3714      	adds	r7, #20
 801b250:	46bd      	mov	sp, r7
 801b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b256:	4770      	bx	lr

0801b258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b258:	b480      	push	{r7}
 801b25a:	b087      	sub	sp, #28
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	60f8      	str	r0, [r7, #12]
 801b260:	60b9      	str	r1, [r7, #8]
 801b262:	607a      	str	r2, [r7, #4]
 801b264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	689b      	ldr	r3, [r3, #8]
 801b26a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b26c:	697b      	ldr	r3, [r7, #20]
 801b26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	021a      	lsls	r2, r3, #8
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	431a      	orrs	r2, r3
 801b27c:	68bb      	ldr	r3, [r7, #8]
 801b27e:	4313      	orrs	r3, r2
 801b280:	697a      	ldr	r2, [r7, #20]
 801b282:	4313      	orrs	r3, r2
 801b284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	697a      	ldr	r2, [r7, #20]
 801b28a:	609a      	str	r2, [r3, #8]
}
 801b28c:	bf00      	nop
 801b28e:	371c      	adds	r7, #28
 801b290:	46bd      	mov	sp, r7
 801b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b296:	4770      	bx	lr

0801b298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b298:	b480      	push	{r7}
 801b29a:	b087      	sub	sp, #28
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	60f8      	str	r0, [r7, #12]
 801b2a0:	60b9      	str	r1, [r7, #8]
 801b2a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	f003 031f 	and.w	r3, r3, #31
 801b2aa:	2201      	movs	r2, #1
 801b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 801b2b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	6a1a      	ldr	r2, [r3, #32]
 801b2b6:	697b      	ldr	r3, [r7, #20]
 801b2b8:	43db      	mvns	r3, r3
 801b2ba:	401a      	ands	r2, r3
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	6a1a      	ldr	r2, [r3, #32]
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	f003 031f 	and.w	r3, r3, #31
 801b2ca:	6879      	ldr	r1, [r7, #4]
 801b2cc:	fa01 f303 	lsl.w	r3, r1, r3
 801b2d0:	431a      	orrs	r2, r3
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	621a      	str	r2, [r3, #32]
}
 801b2d6:	bf00      	nop
 801b2d8:	371c      	adds	r7, #28
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e0:	4770      	bx	lr
	...

0801b2e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b2e4:	b480      	push	{r7}
 801b2e6:	b085      	sub	sp, #20
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b2f4:	2b01      	cmp	r3, #1
 801b2f6:	d101      	bne.n	801b2fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b2f8:	2302      	movs	r3, #2
 801b2fa:	e05a      	b.n	801b3b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	2201      	movs	r2, #1
 801b300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	2202      	movs	r2, #2
 801b308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	685b      	ldr	r3, [r3, #4]
 801b312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	689b      	ldr	r3, [r3, #8]
 801b31a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b324:	683b      	ldr	r3, [r7, #0]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	68fa      	ldr	r2, [r7, #12]
 801b32a:	4313      	orrs	r3, r2
 801b32c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	68fa      	ldr	r2, [r7, #12]
 801b334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	4a21      	ldr	r2, [pc, #132]	; (801b3c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801b33c:	4293      	cmp	r3, r2
 801b33e:	d022      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b348:	d01d      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	4a1d      	ldr	r2, [pc, #116]	; (801b3c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801b350:	4293      	cmp	r3, r2
 801b352:	d018      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	4a1b      	ldr	r2, [pc, #108]	; (801b3c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801b35a:	4293      	cmp	r3, r2
 801b35c:	d013      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	4a1a      	ldr	r2, [pc, #104]	; (801b3cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801b364:	4293      	cmp	r3, r2
 801b366:	d00e      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	4a18      	ldr	r2, [pc, #96]	; (801b3d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801b36e:	4293      	cmp	r3, r2
 801b370:	d009      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	4a17      	ldr	r2, [pc, #92]	; (801b3d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801b378:	4293      	cmp	r3, r2
 801b37a:	d004      	beq.n	801b386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	4a15      	ldr	r2, [pc, #84]	; (801b3d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801b382:	4293      	cmp	r3, r2
 801b384:	d10c      	bne.n	801b3a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b386:	68bb      	ldr	r3, [r7, #8]
 801b388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b38c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	68ba      	ldr	r2, [r7, #8]
 801b394:	4313      	orrs	r3, r2
 801b396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	68ba      	ldr	r2, [r7, #8]
 801b39e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	2201      	movs	r2, #1
 801b3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b3b0:	2300      	movs	r3, #0
}
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	3714      	adds	r7, #20
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3bc:	4770      	bx	lr
 801b3be:	bf00      	nop
 801b3c0:	40010000 	.word	0x40010000
 801b3c4:	40000400 	.word	0x40000400
 801b3c8:	40000800 	.word	0x40000800
 801b3cc:	40000c00 	.word	0x40000c00
 801b3d0:	40010400 	.word	0x40010400
 801b3d4:	40014000 	.word	0x40014000
 801b3d8:	40001800 	.word	0x40001800

0801b3dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b3dc:	b480      	push	{r7}
 801b3de:	b083      	sub	sp, #12
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b3e4:	bf00      	nop
 801b3e6:	370c      	adds	r7, #12
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ee:	4770      	bx	lr

0801b3f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b3f0:	b480      	push	{r7}
 801b3f2:	b083      	sub	sp, #12
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b3f8:	bf00      	nop
 801b3fa:	370c      	adds	r7, #12
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b402:	4770      	bx	lr

0801b404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b082      	sub	sp, #8
 801b408:	af00      	add	r7, sp, #0
 801b40a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d101      	bne.n	801b416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b412:	2301      	movs	r3, #1
 801b414:	e03f      	b.n	801b496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b41c:	b2db      	uxtb	r3, r3
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d106      	bne.n	801b430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	2200      	movs	r2, #0
 801b426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b42a:	6878      	ldr	r0, [r7, #4]
 801b42c:	f7e7 f9ec 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	2224      	movs	r2, #36	; 0x24
 801b434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	68da      	ldr	r2, [r3, #12]
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b448:	6878      	ldr	r0, [r7, #4]
 801b44a:	f000 fb97 	bl	801bb7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	691a      	ldr	r2, [r3, #16]
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b45c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	695a      	ldr	r2, [r3, #20]
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b46c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	68da      	ldr	r2, [r3, #12]
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b47c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	2200      	movs	r2, #0
 801b482:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2220      	movs	r2, #32
 801b488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	2220      	movs	r2, #32
 801b490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801b494:	2300      	movs	r3, #0
}
 801b496:	4618      	mov	r0, r3
 801b498:	3708      	adds	r7, #8
 801b49a:	46bd      	mov	sp, r7
 801b49c:	bd80      	pop	{r7, pc}

0801b49e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b49e:	b580      	push	{r7, lr}
 801b4a0:	b088      	sub	sp, #32
 801b4a2:	af02      	add	r7, sp, #8
 801b4a4:	60f8      	str	r0, [r7, #12]
 801b4a6:	60b9      	str	r1, [r7, #8]
 801b4a8:	603b      	str	r3, [r7, #0]
 801b4aa:	4613      	mov	r3, r2
 801b4ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b4b8:	b2db      	uxtb	r3, r3
 801b4ba:	2b20      	cmp	r3, #32
 801b4bc:	f040 8083 	bne.w	801b5c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801b4c0:	68bb      	ldr	r3, [r7, #8]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d002      	beq.n	801b4cc <HAL_UART_Transmit+0x2e>
 801b4c6:	88fb      	ldrh	r3, [r7, #6]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d101      	bne.n	801b4d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	e07b      	b.n	801b5c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	d101      	bne.n	801b4de <HAL_UART_Transmit+0x40>
 801b4da:	2302      	movs	r3, #2
 801b4dc:	e074      	b.n	801b5c8 <HAL_UART_Transmit+0x12a>
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	2201      	movs	r2, #1
 801b4e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	2221      	movs	r2, #33	; 0x21
 801b4f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801b4f4:	f7fa fac8 	bl	8015a88 <HAL_GetTick>
 801b4f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	88fa      	ldrh	r2, [r7, #6]
 801b4fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	88fa      	ldrh	r2, [r7, #6]
 801b504:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	2200      	movs	r2, #0
 801b50a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801b50e:	e042      	b.n	801b596 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b514:	b29b      	uxth	r3, r3
 801b516:	3b01      	subs	r3, #1
 801b518:	b29a      	uxth	r2, r3
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	689b      	ldr	r3, [r3, #8]
 801b522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b526:	d122      	bne.n	801b56e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b528:	683b      	ldr	r3, [r7, #0]
 801b52a:	9300      	str	r3, [sp, #0]
 801b52c:	697b      	ldr	r3, [r7, #20]
 801b52e:	2200      	movs	r2, #0
 801b530:	2180      	movs	r1, #128	; 0x80
 801b532:	68f8      	ldr	r0, [r7, #12]
 801b534:	f000 f9b6 	bl	801b8a4 <UART_WaitOnFlagUntilTimeout>
 801b538:	4603      	mov	r3, r0
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d001      	beq.n	801b542 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801b53e:	2303      	movs	r3, #3
 801b540:	e042      	b.n	801b5c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801b546:	693b      	ldr	r3, [r7, #16]
 801b548:	881b      	ldrh	r3, [r3, #0]
 801b54a:	461a      	mov	r2, r3
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b554:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	691b      	ldr	r3, [r3, #16]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d103      	bne.n	801b566 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801b55e:	68bb      	ldr	r3, [r7, #8]
 801b560:	3302      	adds	r3, #2
 801b562:	60bb      	str	r3, [r7, #8]
 801b564:	e017      	b.n	801b596 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801b566:	68bb      	ldr	r3, [r7, #8]
 801b568:	3301      	adds	r3, #1
 801b56a:	60bb      	str	r3, [r7, #8]
 801b56c:	e013      	b.n	801b596 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b56e:	683b      	ldr	r3, [r7, #0]
 801b570:	9300      	str	r3, [sp, #0]
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	2200      	movs	r2, #0
 801b576:	2180      	movs	r1, #128	; 0x80
 801b578:	68f8      	ldr	r0, [r7, #12]
 801b57a:	f000 f993 	bl	801b8a4 <UART_WaitOnFlagUntilTimeout>
 801b57e:	4603      	mov	r3, r0
 801b580:	2b00      	cmp	r3, #0
 801b582:	d001      	beq.n	801b588 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801b584:	2303      	movs	r3, #3
 801b586:	e01f      	b.n	801b5c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801b588:	68bb      	ldr	r3, [r7, #8]
 801b58a:	1c5a      	adds	r2, r3, #1
 801b58c:	60ba      	str	r2, [r7, #8]
 801b58e:	781a      	ldrb	r2, [r3, #0]
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b59a:	b29b      	uxth	r3, r3
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d1b7      	bne.n	801b510 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b5a0:	683b      	ldr	r3, [r7, #0]
 801b5a2:	9300      	str	r3, [sp, #0]
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	2140      	movs	r1, #64	; 0x40
 801b5aa:	68f8      	ldr	r0, [r7, #12]
 801b5ac:	f000 f97a 	bl	801b8a4 <UART_WaitOnFlagUntilTimeout>
 801b5b0:	4603      	mov	r3, r0
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d001      	beq.n	801b5ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801b5b6:	2303      	movs	r3, #3
 801b5b8:	e006      	b.n	801b5c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	2220      	movs	r2, #32
 801b5be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801b5c2:	2300      	movs	r3, #0
 801b5c4:	e000      	b.n	801b5c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801b5c6:	2302      	movs	r3, #2
  }
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	3718      	adds	r7, #24
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	bd80      	pop	{r7, pc}

0801b5d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b5d0:	b480      	push	{r7}
 801b5d2:	b085      	sub	sp, #20
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	60f8      	str	r0, [r7, #12]
 801b5d8:	60b9      	str	r1, [r7, #8]
 801b5da:	4613      	mov	r3, r2
 801b5dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801b5e4:	b2db      	uxtb	r3, r3
 801b5e6:	2b20      	cmp	r3, #32
 801b5e8:	d140      	bne.n	801b66c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801b5ea:	68bb      	ldr	r3, [r7, #8]
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d002      	beq.n	801b5f6 <HAL_UART_Receive_IT+0x26>
 801b5f0:	88fb      	ldrh	r3, [r7, #6]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d101      	bne.n	801b5fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801b5f6:	2301      	movs	r3, #1
 801b5f8:	e039      	b.n	801b66e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b600:	2b01      	cmp	r3, #1
 801b602:	d101      	bne.n	801b608 <HAL_UART_Receive_IT+0x38>
 801b604:	2302      	movs	r3, #2
 801b606:	e032      	b.n	801b66e <HAL_UART_Receive_IT+0x9e>
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	2201      	movs	r2, #1
 801b60c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	68ba      	ldr	r2, [r7, #8]
 801b614:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	88fa      	ldrh	r2, [r7, #6]
 801b61a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	88fa      	ldrh	r2, [r7, #6]
 801b620:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	2200      	movs	r2, #0
 801b626:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	2222      	movs	r2, #34	; 0x22
 801b62c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b630:	68fb      	ldr	r3, [r7, #12]
 801b632:	2200      	movs	r2, #0
 801b634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	68da      	ldr	r2, [r3, #12]
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b646:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	695a      	ldr	r2, [r3, #20]
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	f042 0201 	orr.w	r2, r2, #1
 801b656:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	68da      	ldr	r2, [r3, #12]
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	f042 0220 	orr.w	r2, r2, #32
 801b666:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801b668:	2300      	movs	r3, #0
 801b66a:	e000      	b.n	801b66e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 801b66c:	2302      	movs	r3, #2
  }
}
 801b66e:	4618      	mov	r0, r3
 801b670:	3714      	adds	r7, #20
 801b672:	46bd      	mov	sp, r7
 801b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b678:	4770      	bx	lr
	...

0801b67c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b67c:	b580      	push	{r7, lr}
 801b67e:	b088      	sub	sp, #32
 801b680:	af00      	add	r7, sp, #0
 801b682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	68db      	ldr	r3, [r3, #12]
 801b692:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	695b      	ldr	r3, [r3, #20]
 801b69a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801b69c:	2300      	movs	r3, #0
 801b69e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801b6a0:	2300      	movs	r3, #0
 801b6a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801b6a4:	69fb      	ldr	r3, [r7, #28]
 801b6a6:	f003 030f 	and.w	r3, r3, #15
 801b6aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801b6ac:	693b      	ldr	r3, [r7, #16]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d10d      	bne.n	801b6ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b6b2:	69fb      	ldr	r3, [r7, #28]
 801b6b4:	f003 0320 	and.w	r3, r3, #32
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d008      	beq.n	801b6ce <HAL_UART_IRQHandler+0x52>
 801b6bc:	69bb      	ldr	r3, [r7, #24]
 801b6be:	f003 0320 	and.w	r3, r3, #32
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d003      	beq.n	801b6ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801b6c6:	6878      	ldr	r0, [r7, #4]
 801b6c8:	f000 f9d6 	bl	801ba78 <UART_Receive_IT>
      return;
 801b6cc:	e0d0      	b.n	801b870 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801b6ce:	693b      	ldr	r3, [r7, #16]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	f000 80b0 	beq.w	801b836 <HAL_UART_IRQHandler+0x1ba>
 801b6d6:	697b      	ldr	r3, [r7, #20]
 801b6d8:	f003 0301 	and.w	r3, r3, #1
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d105      	bne.n	801b6ec <HAL_UART_IRQHandler+0x70>
 801b6e0:	69bb      	ldr	r3, [r7, #24]
 801b6e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	f000 80a5 	beq.w	801b836 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801b6ec:	69fb      	ldr	r3, [r7, #28]
 801b6ee:	f003 0301 	and.w	r3, r3, #1
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d00a      	beq.n	801b70c <HAL_UART_IRQHandler+0x90>
 801b6f6:	69bb      	ldr	r3, [r7, #24]
 801b6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d005      	beq.n	801b70c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b704:	f043 0201 	orr.w	r2, r3, #1
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801b70c:	69fb      	ldr	r3, [r7, #28]
 801b70e:	f003 0304 	and.w	r3, r3, #4
 801b712:	2b00      	cmp	r3, #0
 801b714:	d00a      	beq.n	801b72c <HAL_UART_IRQHandler+0xb0>
 801b716:	697b      	ldr	r3, [r7, #20]
 801b718:	f003 0301 	and.w	r3, r3, #1
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d005      	beq.n	801b72c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b724:	f043 0202 	orr.w	r2, r3, #2
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801b72c:	69fb      	ldr	r3, [r7, #28]
 801b72e:	f003 0302 	and.w	r3, r3, #2
 801b732:	2b00      	cmp	r3, #0
 801b734:	d00a      	beq.n	801b74c <HAL_UART_IRQHandler+0xd0>
 801b736:	697b      	ldr	r3, [r7, #20]
 801b738:	f003 0301 	and.w	r3, r3, #1
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d005      	beq.n	801b74c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b744:	f043 0204 	orr.w	r2, r3, #4
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801b74c:	69fb      	ldr	r3, [r7, #28]
 801b74e:	f003 0308 	and.w	r3, r3, #8
 801b752:	2b00      	cmp	r3, #0
 801b754:	d00f      	beq.n	801b776 <HAL_UART_IRQHandler+0xfa>
 801b756:	69bb      	ldr	r3, [r7, #24]
 801b758:	f003 0320 	and.w	r3, r3, #32
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d104      	bne.n	801b76a <HAL_UART_IRQHandler+0xee>
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	f003 0301 	and.w	r3, r3, #1
 801b766:	2b00      	cmp	r3, #0
 801b768:	d005      	beq.n	801b776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b76e:	f043 0208 	orr.w	r2, r3, #8
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d077      	beq.n	801b86e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b77e:	69fb      	ldr	r3, [r7, #28]
 801b780:	f003 0320 	and.w	r3, r3, #32
 801b784:	2b00      	cmp	r3, #0
 801b786:	d007      	beq.n	801b798 <HAL_UART_IRQHandler+0x11c>
 801b788:	69bb      	ldr	r3, [r7, #24]
 801b78a:	f003 0320 	and.w	r3, r3, #32
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d002      	beq.n	801b798 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801b792:	6878      	ldr	r0, [r7, #4]
 801b794:	f000 f970 	bl	801ba78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	695b      	ldr	r3, [r3, #20]
 801b79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7a2:	2b40      	cmp	r3, #64	; 0x40
 801b7a4:	bf0c      	ite	eq
 801b7a6:	2301      	moveq	r3, #1
 801b7a8:	2300      	movne	r3, #0
 801b7aa:	b2db      	uxtb	r3, r3
 801b7ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b7b2:	f003 0308 	and.w	r3, r3, #8
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d102      	bne.n	801b7c0 <HAL_UART_IRQHandler+0x144>
 801b7ba:	68fb      	ldr	r3, [r7, #12]
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d031      	beq.n	801b824 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b7c0:	6878      	ldr	r0, [r7, #4]
 801b7c2:	f000 f8b9 	bl	801b938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	695b      	ldr	r3, [r3, #20]
 801b7cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7d0:	2b40      	cmp	r3, #64	; 0x40
 801b7d2:	d123      	bne.n	801b81c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	695a      	ldr	r2, [r3, #20]
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801b7e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d013      	beq.n	801b814 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7f0:	4a21      	ldr	r2, [pc, #132]	; (801b878 <HAL_UART_IRQHandler+0x1fc>)
 801b7f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	f7fb fa83 	bl	8016d04 <HAL_DMA_Abort_IT>
 801b7fe:	4603      	mov	r3, r0
 801b800:	2b00      	cmp	r3, #0
 801b802:	d016      	beq.n	801b832 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b80a:	687a      	ldr	r2, [r7, #4]
 801b80c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b80e:	4610      	mov	r0, r2
 801b810:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b812:	e00e      	b.n	801b832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b814:	6878      	ldr	r0, [r7, #4]
 801b816:	f000 f83b 	bl	801b890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b81a:	e00a      	b.n	801b832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b81c:	6878      	ldr	r0, [r7, #4]
 801b81e:	f000 f837 	bl	801b890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b822:	e006      	b.n	801b832 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b824:	6878      	ldr	r0, [r7, #4]
 801b826:	f000 f833 	bl	801b890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	2200      	movs	r2, #0
 801b82e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801b830:	e01d      	b.n	801b86e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b832:	bf00      	nop
    return;
 801b834:	e01b      	b.n	801b86e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801b836:	69fb      	ldr	r3, [r7, #28]
 801b838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d008      	beq.n	801b852 <HAL_UART_IRQHandler+0x1d6>
 801b840:	69bb      	ldr	r3, [r7, #24]
 801b842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b846:	2b00      	cmp	r3, #0
 801b848:	d003      	beq.n	801b852 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801b84a:	6878      	ldr	r0, [r7, #4]
 801b84c:	f000 f8a6 	bl	801b99c <UART_Transmit_IT>
    return;
 801b850:	e00e      	b.n	801b870 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801b852:	69fb      	ldr	r3, [r7, #28]
 801b854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d009      	beq.n	801b870 <HAL_UART_IRQHandler+0x1f4>
 801b85c:	69bb      	ldr	r3, [r7, #24]
 801b85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b862:	2b00      	cmp	r3, #0
 801b864:	d004      	beq.n	801b870 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801b866:	6878      	ldr	r0, [r7, #4]
 801b868:	f000 f8ee 	bl	801ba48 <UART_EndTransmit_IT>
    return;
 801b86c:	e000      	b.n	801b870 <HAL_UART_IRQHandler+0x1f4>
    return;
 801b86e:	bf00      	nop
  }
}
 801b870:	3720      	adds	r7, #32
 801b872:	46bd      	mov	sp, r7
 801b874:	bd80      	pop	{r7, pc}
 801b876:	bf00      	nop
 801b878:	0801b975 	.word	0x0801b975

0801b87c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b87c:	b480      	push	{r7}
 801b87e:	b083      	sub	sp, #12
 801b880:	af00      	add	r7, sp, #0
 801b882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801b884:	bf00      	nop
 801b886:	370c      	adds	r7, #12
 801b888:	46bd      	mov	sp, r7
 801b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88e:	4770      	bx	lr

0801b890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b890:	b480      	push	{r7}
 801b892:	b083      	sub	sp, #12
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801b898:	bf00      	nop
 801b89a:	370c      	adds	r7, #12
 801b89c:	46bd      	mov	sp, r7
 801b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a2:	4770      	bx	lr

0801b8a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b084      	sub	sp, #16
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	60f8      	str	r0, [r7, #12]
 801b8ac:	60b9      	str	r1, [r7, #8]
 801b8ae:	603b      	str	r3, [r7, #0]
 801b8b0:	4613      	mov	r3, r2
 801b8b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b8b4:	e02c      	b.n	801b910 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b8b6:	69bb      	ldr	r3, [r7, #24]
 801b8b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b8bc:	d028      	beq.n	801b910 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801b8be:	69bb      	ldr	r3, [r7, #24]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d007      	beq.n	801b8d4 <UART_WaitOnFlagUntilTimeout+0x30>
 801b8c4:	f7fa f8e0 	bl	8015a88 <HAL_GetTick>
 801b8c8:	4602      	mov	r2, r0
 801b8ca:	683b      	ldr	r3, [r7, #0]
 801b8cc:	1ad3      	subs	r3, r2, r3
 801b8ce:	69ba      	ldr	r2, [r7, #24]
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	d21d      	bcs.n	801b910 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	68da      	ldr	r2, [r3, #12]
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801b8e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	695a      	ldr	r2, [r3, #20]
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	f022 0201 	bic.w	r2, r2, #1
 801b8f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	2220      	movs	r2, #32
 801b8f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	2220      	movs	r2, #32
 801b900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	2200      	movs	r2, #0
 801b908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801b90c:	2303      	movs	r3, #3
 801b90e:	e00f      	b.n	801b930 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	681a      	ldr	r2, [r3, #0]
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	4013      	ands	r3, r2
 801b91a:	68ba      	ldr	r2, [r7, #8]
 801b91c:	429a      	cmp	r2, r3
 801b91e:	bf0c      	ite	eq
 801b920:	2301      	moveq	r3, #1
 801b922:	2300      	movne	r3, #0
 801b924:	b2db      	uxtb	r3, r3
 801b926:	461a      	mov	r2, r3
 801b928:	79fb      	ldrb	r3, [r7, #7]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	d0c3      	beq.n	801b8b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801b92e:	2300      	movs	r3, #0
}
 801b930:	4618      	mov	r0, r3
 801b932:	3710      	adds	r7, #16
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}

0801b938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b938:	b480      	push	{r7}
 801b93a:	b083      	sub	sp, #12
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	68da      	ldr	r2, [r3, #12]
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801b94e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	695a      	ldr	r2, [r3, #20]
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	f022 0201 	bic.w	r2, r2, #1
 801b95e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2220      	movs	r2, #32
 801b964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801b968:	bf00      	nop
 801b96a:	370c      	adds	r7, #12
 801b96c:	46bd      	mov	sp, r7
 801b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b972:	4770      	bx	lr

0801b974 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b084      	sub	sp, #16
 801b978:	af00      	add	r7, sp, #0
 801b97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b980:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	2200      	movs	r2, #0
 801b986:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	2200      	movs	r2, #0
 801b98c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b98e:	68f8      	ldr	r0, [r7, #12]
 801b990:	f7ff ff7e 	bl	801b890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b994:	bf00      	nop
 801b996:	3710      	adds	r7, #16
 801b998:	46bd      	mov	sp, r7
 801b99a:	bd80      	pop	{r7, pc}

0801b99c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801b99c:	b480      	push	{r7}
 801b99e:	b085      	sub	sp, #20
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b9aa:	b2db      	uxtb	r3, r3
 801b9ac:	2b21      	cmp	r3, #33	; 0x21
 801b9ae:	d144      	bne.n	801ba3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	689b      	ldr	r3, [r3, #8]
 801b9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b9b8:	d11a      	bne.n	801b9f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	6a1b      	ldr	r3, [r3, #32]
 801b9be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	881b      	ldrh	r3, [r3, #0]
 801b9c4:	461a      	mov	r2, r3
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b9ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	691b      	ldr	r3, [r3, #16]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d105      	bne.n	801b9e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	6a1b      	ldr	r3, [r3, #32]
 801b9dc:	1c9a      	adds	r2, r3, #2
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	621a      	str	r2, [r3, #32]
 801b9e2:	e00e      	b.n	801ba02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	6a1b      	ldr	r3, [r3, #32]
 801b9e8:	1c5a      	adds	r2, r3, #1
 801b9ea:	687b      	ldr	r3, [r7, #4]
 801b9ec:	621a      	str	r2, [r3, #32]
 801b9ee:	e008      	b.n	801ba02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6a1b      	ldr	r3, [r3, #32]
 801b9f4:	1c59      	adds	r1, r3, #1
 801b9f6:	687a      	ldr	r2, [r7, #4]
 801b9f8:	6211      	str	r1, [r2, #32]
 801b9fa:	781a      	ldrb	r2, [r3, #0]
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801ba06:	b29b      	uxth	r3, r3
 801ba08:	3b01      	subs	r3, #1
 801ba0a:	b29b      	uxth	r3, r3
 801ba0c:	687a      	ldr	r2, [r7, #4]
 801ba0e:	4619      	mov	r1, r3
 801ba10:	84d1      	strh	r1, [r2, #38]	; 0x26
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d10f      	bne.n	801ba36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	68da      	ldr	r2, [r3, #12]
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ba24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	68da      	ldr	r2, [r3, #12]
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ba34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801ba36:	2300      	movs	r3, #0
 801ba38:	e000      	b.n	801ba3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801ba3a:	2302      	movs	r3, #2
  }
}
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	3714      	adds	r7, #20
 801ba40:	46bd      	mov	sp, r7
 801ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba46:	4770      	bx	lr

0801ba48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b082      	sub	sp, #8
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	681b      	ldr	r3, [r3, #0]
 801ba54:	68da      	ldr	r2, [r3, #12]
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	681b      	ldr	r3, [r3, #0]
 801ba5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ba5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	2220      	movs	r2, #32
 801ba64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801ba68:	6878      	ldr	r0, [r7, #4]
 801ba6a:	f7ff ff07 	bl	801b87c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801ba6e:	2300      	movs	r3, #0
}
 801ba70:	4618      	mov	r0, r3
 801ba72:	3708      	adds	r7, #8
 801ba74:	46bd      	mov	sp, r7
 801ba76:	bd80      	pop	{r7, pc}

0801ba78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801ba78:	b580      	push	{r7, lr}
 801ba7a:	b084      	sub	sp, #16
 801ba7c:	af00      	add	r7, sp, #0
 801ba7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801ba86:	b2db      	uxtb	r3, r3
 801ba88:	2b22      	cmp	r3, #34	; 0x22
 801ba8a:	d171      	bne.n	801bb70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	689b      	ldr	r3, [r3, #8]
 801ba90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ba94:	d123      	bne.n	801bade <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	691b      	ldr	r3, [r3, #16]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d10e      	bne.n	801bac2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	685b      	ldr	r3, [r3, #4]
 801baaa:	b29b      	uxth	r3, r3
 801baac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bab0:	b29a      	uxth	r2, r3
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801baba:	1c9a      	adds	r2, r3, #2
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	629a      	str	r2, [r3, #40]	; 0x28
 801bac0:	e029      	b.n	801bb16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	685b      	ldr	r3, [r3, #4]
 801bac8:	b29b      	uxth	r3, r3
 801baca:	b2db      	uxtb	r3, r3
 801bacc:	b29a      	uxth	r2, r3
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bad6:	1c5a      	adds	r2, r3, #1
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	629a      	str	r2, [r3, #40]	; 0x28
 801badc:	e01b      	b.n	801bb16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	691b      	ldr	r3, [r3, #16]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d10a      	bne.n	801bafc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	6858      	ldr	r0, [r3, #4]
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801baf0:	1c59      	adds	r1, r3, #1
 801baf2:	687a      	ldr	r2, [r7, #4]
 801baf4:	6291      	str	r1, [r2, #40]	; 0x28
 801baf6:	b2c2      	uxtb	r2, r0
 801baf8:	701a      	strb	r2, [r3, #0]
 801bafa:	e00c      	b.n	801bb16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	685b      	ldr	r3, [r3, #4]
 801bb02:	b2da      	uxtb	r2, r3
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb08:	1c58      	adds	r0, r3, #1
 801bb0a:	6879      	ldr	r1, [r7, #4]
 801bb0c:	6288      	str	r0, [r1, #40]	; 0x28
 801bb0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801bb12:	b2d2      	uxtb	r2, r2
 801bb14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bb1a:	b29b      	uxth	r3, r3
 801bb1c:	3b01      	subs	r3, #1
 801bb1e:	b29b      	uxth	r3, r3
 801bb20:	687a      	ldr	r2, [r7, #4]
 801bb22:	4619      	mov	r1, r3
 801bb24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d120      	bne.n	801bb6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	68da      	ldr	r2, [r3, #12]
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	f022 0220 	bic.w	r2, r2, #32
 801bb38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	68da      	ldr	r2, [r3, #12]
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bb48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	695a      	ldr	r2, [r3, #20]
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	f022 0201 	bic.w	r2, r2, #1
 801bb58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	2220      	movs	r2, #32
 801bb5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801bb62:	6878      	ldr	r0, [r7, #4]
 801bb64:	f7e8 fe12 	bl	800478c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801bb68:	2300      	movs	r3, #0
 801bb6a:	e002      	b.n	801bb72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	e000      	b.n	801bb72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801bb70:	2302      	movs	r3, #2
  }
}
 801bb72:	4618      	mov	r0, r3
 801bb74:	3710      	adds	r7, #16
 801bb76:	46bd      	mov	sp, r7
 801bb78:	bd80      	pop	{r7, pc}
	...

0801bb7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb80:	b0bd      	sub	sp, #244	; 0xf4
 801bb82:	af00      	add	r7, sp, #0
 801bb84:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	691b      	ldr	r3, [r3, #16]
 801bb90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801bb94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb98:	68d9      	ldr	r1, [r3, #12]
 801bb9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bb9e:	681a      	ldr	r2, [r3, #0]
 801bba0:	ea40 0301 	orr.w	r3, r0, r1
 801bba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801bba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbaa:	689a      	ldr	r2, [r3, #8]
 801bbac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbb0:	691b      	ldr	r3, [r3, #16]
 801bbb2:	431a      	orrs	r2, r3
 801bbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbb8:	695b      	ldr	r3, [r3, #20]
 801bbba:	431a      	orrs	r2, r3
 801bbbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbc0:	69db      	ldr	r3, [r3, #28]
 801bbc2:	4313      	orrs	r3, r2
 801bbc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 801bbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	68db      	ldr	r3, [r3, #12]
 801bbd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801bbd4:	f021 010c 	bic.w	r1, r1, #12
 801bbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbdc:	681a      	ldr	r2, [r3, #0]
 801bbde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801bbe2:	430b      	orrs	r3, r1
 801bbe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801bbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	695b      	ldr	r3, [r3, #20]
 801bbee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801bbf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbf6:	6999      	ldr	r1, [r3, #24]
 801bbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbfc:	681a      	ldr	r2, [r3, #0]
 801bbfe:	ea40 0301 	orr.w	r3, r0, r1
 801bc02:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc08:	69db      	ldr	r3, [r3, #28]
 801bc0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc0e:	f040 81a5 	bne.w	801bf5c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801bc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc16:	681a      	ldr	r2, [r3, #0]
 801bc18:	4bcd      	ldr	r3, [pc, #820]	; (801bf50 <UART_SetConfig+0x3d4>)
 801bc1a:	429a      	cmp	r2, r3
 801bc1c:	d006      	beq.n	801bc2c <UART_SetConfig+0xb0>
 801bc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc22:	681a      	ldr	r2, [r3, #0]
 801bc24:	4bcb      	ldr	r3, [pc, #812]	; (801bf54 <UART_SetConfig+0x3d8>)
 801bc26:	429a      	cmp	r2, r3
 801bc28:	f040 80cb 	bne.w	801bdc2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801bc2c:	f7fe fa86 	bl	801a13c <HAL_RCC_GetPCLK2Freq>
 801bc30:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801bc34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bc38:	461c      	mov	r4, r3
 801bc3a:	f04f 0500 	mov.w	r5, #0
 801bc3e:	4622      	mov	r2, r4
 801bc40:	462b      	mov	r3, r5
 801bc42:	1891      	adds	r1, r2, r2
 801bc44:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801bc48:	415b      	adcs	r3, r3
 801bc4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bc4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801bc52:	1912      	adds	r2, r2, r4
 801bc54:	eb45 0303 	adc.w	r3, r5, r3
 801bc58:	f04f 0000 	mov.w	r0, #0
 801bc5c:	f04f 0100 	mov.w	r1, #0
 801bc60:	00d9      	lsls	r1, r3, #3
 801bc62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bc66:	00d0      	lsls	r0, r2, #3
 801bc68:	4602      	mov	r2, r0
 801bc6a:	460b      	mov	r3, r1
 801bc6c:	1911      	adds	r1, r2, r4
 801bc6e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801bc72:	416b      	adcs	r3, r5
 801bc74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc7c:	685b      	ldr	r3, [r3, #4]
 801bc7e:	461a      	mov	r2, r3
 801bc80:	f04f 0300 	mov.w	r3, #0
 801bc84:	1891      	adds	r1, r2, r2
 801bc86:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801bc8a:	415b      	adcs	r3, r3
 801bc8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801bc90:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801bc94:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801bc98:	f7e4 fff6 	bl	8000c88 <__aeabi_uldivmod>
 801bc9c:	4602      	mov	r2, r0
 801bc9e:	460b      	mov	r3, r1
 801bca0:	4bad      	ldr	r3, [pc, #692]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bca2:	fba3 2302 	umull	r2, r3, r3, r2
 801bca6:	095b      	lsrs	r3, r3, #5
 801bca8:	011e      	lsls	r6, r3, #4
 801bcaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bcae:	461c      	mov	r4, r3
 801bcb0:	f04f 0500 	mov.w	r5, #0
 801bcb4:	4622      	mov	r2, r4
 801bcb6:	462b      	mov	r3, r5
 801bcb8:	1891      	adds	r1, r2, r2
 801bcba:	67b9      	str	r1, [r7, #120]	; 0x78
 801bcbc:	415b      	adcs	r3, r3
 801bcbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 801bcc0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801bcc4:	1912      	adds	r2, r2, r4
 801bcc6:	eb45 0303 	adc.w	r3, r5, r3
 801bcca:	f04f 0000 	mov.w	r0, #0
 801bcce:	f04f 0100 	mov.w	r1, #0
 801bcd2:	00d9      	lsls	r1, r3, #3
 801bcd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bcd8:	00d0      	lsls	r0, r2, #3
 801bcda:	4602      	mov	r2, r0
 801bcdc:	460b      	mov	r3, r1
 801bcde:	1911      	adds	r1, r2, r4
 801bce0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 801bce4:	416b      	adcs	r3, r5
 801bce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801bcea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	461a      	mov	r2, r3
 801bcf2:	f04f 0300 	mov.w	r3, #0
 801bcf6:	1891      	adds	r1, r2, r2
 801bcf8:	6739      	str	r1, [r7, #112]	; 0x70
 801bcfa:	415b      	adcs	r3, r3
 801bcfc:	677b      	str	r3, [r7, #116]	; 0x74
 801bcfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801bd02:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801bd06:	f7e4 ffbf 	bl	8000c88 <__aeabi_uldivmod>
 801bd0a:	4602      	mov	r2, r0
 801bd0c:	460b      	mov	r3, r1
 801bd0e:	4b92      	ldr	r3, [pc, #584]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bd10:	fba3 1302 	umull	r1, r3, r3, r2
 801bd14:	095b      	lsrs	r3, r3, #5
 801bd16:	2164      	movs	r1, #100	; 0x64
 801bd18:	fb01 f303 	mul.w	r3, r1, r3
 801bd1c:	1ad3      	subs	r3, r2, r3
 801bd1e:	00db      	lsls	r3, r3, #3
 801bd20:	3332      	adds	r3, #50	; 0x32
 801bd22:	4a8d      	ldr	r2, [pc, #564]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bd24:	fba2 2303 	umull	r2, r3, r2, r3
 801bd28:	095b      	lsrs	r3, r3, #5
 801bd2a:	005b      	lsls	r3, r3, #1
 801bd2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801bd30:	441e      	add	r6, r3
 801bd32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bd36:	4618      	mov	r0, r3
 801bd38:	f04f 0100 	mov.w	r1, #0
 801bd3c:	4602      	mov	r2, r0
 801bd3e:	460b      	mov	r3, r1
 801bd40:	1894      	adds	r4, r2, r2
 801bd42:	66bc      	str	r4, [r7, #104]	; 0x68
 801bd44:	415b      	adcs	r3, r3
 801bd46:	66fb      	str	r3, [r7, #108]	; 0x6c
 801bd48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801bd4c:	1812      	adds	r2, r2, r0
 801bd4e:	eb41 0303 	adc.w	r3, r1, r3
 801bd52:	f04f 0400 	mov.w	r4, #0
 801bd56:	f04f 0500 	mov.w	r5, #0
 801bd5a:	00dd      	lsls	r5, r3, #3
 801bd5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801bd60:	00d4      	lsls	r4, r2, #3
 801bd62:	4622      	mov	r2, r4
 801bd64:	462b      	mov	r3, r5
 801bd66:	1814      	adds	r4, r2, r0
 801bd68:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801bd6c:	414b      	adcs	r3, r1
 801bd6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bd72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd76:	685b      	ldr	r3, [r3, #4]
 801bd78:	461a      	mov	r2, r3
 801bd7a:	f04f 0300 	mov.w	r3, #0
 801bd7e:	1891      	adds	r1, r2, r2
 801bd80:	6639      	str	r1, [r7, #96]	; 0x60
 801bd82:	415b      	adcs	r3, r3
 801bd84:	667b      	str	r3, [r7, #100]	; 0x64
 801bd86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801bd8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801bd8e:	f7e4 ff7b 	bl	8000c88 <__aeabi_uldivmod>
 801bd92:	4602      	mov	r2, r0
 801bd94:	460b      	mov	r3, r1
 801bd96:	4b70      	ldr	r3, [pc, #448]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bd98:	fba3 1302 	umull	r1, r3, r3, r2
 801bd9c:	095b      	lsrs	r3, r3, #5
 801bd9e:	2164      	movs	r1, #100	; 0x64
 801bda0:	fb01 f303 	mul.w	r3, r1, r3
 801bda4:	1ad3      	subs	r3, r2, r3
 801bda6:	00db      	lsls	r3, r3, #3
 801bda8:	3332      	adds	r3, #50	; 0x32
 801bdaa:	4a6b      	ldr	r2, [pc, #428]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bdac:	fba2 2303 	umull	r2, r3, r2, r3
 801bdb0:	095b      	lsrs	r3, r3, #5
 801bdb2:	f003 0207 	and.w	r2, r3, #7
 801bdb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	4432      	add	r2, r6
 801bdbe:	609a      	str	r2, [r3, #8]
 801bdc0:	e26d      	b.n	801c29e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801bdc2:	f7fe f9a7 	bl	801a114 <HAL_RCC_GetPCLK1Freq>
 801bdc6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801bdca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bdce:	461c      	mov	r4, r3
 801bdd0:	f04f 0500 	mov.w	r5, #0
 801bdd4:	4622      	mov	r2, r4
 801bdd6:	462b      	mov	r3, r5
 801bdd8:	1891      	adds	r1, r2, r2
 801bdda:	65b9      	str	r1, [r7, #88]	; 0x58
 801bddc:	415b      	adcs	r3, r3
 801bdde:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bde0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801bde4:	1912      	adds	r2, r2, r4
 801bde6:	eb45 0303 	adc.w	r3, r5, r3
 801bdea:	f04f 0000 	mov.w	r0, #0
 801bdee:	f04f 0100 	mov.w	r1, #0
 801bdf2:	00d9      	lsls	r1, r3, #3
 801bdf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bdf8:	00d0      	lsls	r0, r2, #3
 801bdfa:	4602      	mov	r2, r0
 801bdfc:	460b      	mov	r3, r1
 801bdfe:	1911      	adds	r1, r2, r4
 801be00:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801be04:	416b      	adcs	r3, r5
 801be06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801be0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be0e:	685b      	ldr	r3, [r3, #4]
 801be10:	461a      	mov	r2, r3
 801be12:	f04f 0300 	mov.w	r3, #0
 801be16:	1891      	adds	r1, r2, r2
 801be18:	6539      	str	r1, [r7, #80]	; 0x50
 801be1a:	415b      	adcs	r3, r3
 801be1c:	657b      	str	r3, [r7, #84]	; 0x54
 801be1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801be22:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801be26:	f7e4 ff2f 	bl	8000c88 <__aeabi_uldivmod>
 801be2a:	4602      	mov	r2, r0
 801be2c:	460b      	mov	r3, r1
 801be2e:	4b4a      	ldr	r3, [pc, #296]	; (801bf58 <UART_SetConfig+0x3dc>)
 801be30:	fba3 2302 	umull	r2, r3, r3, r2
 801be34:	095b      	lsrs	r3, r3, #5
 801be36:	011e      	lsls	r6, r3, #4
 801be38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801be3c:	461c      	mov	r4, r3
 801be3e:	f04f 0500 	mov.w	r5, #0
 801be42:	4622      	mov	r2, r4
 801be44:	462b      	mov	r3, r5
 801be46:	1891      	adds	r1, r2, r2
 801be48:	64b9      	str	r1, [r7, #72]	; 0x48
 801be4a:	415b      	adcs	r3, r3
 801be4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801be4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801be52:	1912      	adds	r2, r2, r4
 801be54:	eb45 0303 	adc.w	r3, r5, r3
 801be58:	f04f 0000 	mov.w	r0, #0
 801be5c:	f04f 0100 	mov.w	r1, #0
 801be60:	00d9      	lsls	r1, r3, #3
 801be62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801be66:	00d0      	lsls	r0, r2, #3
 801be68:	4602      	mov	r2, r0
 801be6a:	460b      	mov	r3, r1
 801be6c:	1911      	adds	r1, r2, r4
 801be6e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801be72:	416b      	adcs	r3, r5
 801be74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801be78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be7c:	685b      	ldr	r3, [r3, #4]
 801be7e:	461a      	mov	r2, r3
 801be80:	f04f 0300 	mov.w	r3, #0
 801be84:	1891      	adds	r1, r2, r2
 801be86:	6439      	str	r1, [r7, #64]	; 0x40
 801be88:	415b      	adcs	r3, r3
 801be8a:	647b      	str	r3, [r7, #68]	; 0x44
 801be8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801be90:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801be94:	f7e4 fef8 	bl	8000c88 <__aeabi_uldivmod>
 801be98:	4602      	mov	r2, r0
 801be9a:	460b      	mov	r3, r1
 801be9c:	4b2e      	ldr	r3, [pc, #184]	; (801bf58 <UART_SetConfig+0x3dc>)
 801be9e:	fba3 1302 	umull	r1, r3, r3, r2
 801bea2:	095b      	lsrs	r3, r3, #5
 801bea4:	2164      	movs	r1, #100	; 0x64
 801bea6:	fb01 f303 	mul.w	r3, r1, r3
 801beaa:	1ad3      	subs	r3, r2, r3
 801beac:	00db      	lsls	r3, r3, #3
 801beae:	3332      	adds	r3, #50	; 0x32
 801beb0:	4a29      	ldr	r2, [pc, #164]	; (801bf58 <UART_SetConfig+0x3dc>)
 801beb2:	fba2 2303 	umull	r2, r3, r2, r3
 801beb6:	095b      	lsrs	r3, r3, #5
 801beb8:	005b      	lsls	r3, r3, #1
 801beba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801bebe:	441e      	add	r6, r3
 801bec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bec4:	4618      	mov	r0, r3
 801bec6:	f04f 0100 	mov.w	r1, #0
 801beca:	4602      	mov	r2, r0
 801becc:	460b      	mov	r3, r1
 801bece:	1894      	adds	r4, r2, r2
 801bed0:	63bc      	str	r4, [r7, #56]	; 0x38
 801bed2:	415b      	adcs	r3, r3
 801bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801bed6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801beda:	1812      	adds	r2, r2, r0
 801bedc:	eb41 0303 	adc.w	r3, r1, r3
 801bee0:	f04f 0400 	mov.w	r4, #0
 801bee4:	f04f 0500 	mov.w	r5, #0
 801bee8:	00dd      	lsls	r5, r3, #3
 801beea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801beee:	00d4      	lsls	r4, r2, #3
 801bef0:	4622      	mov	r2, r4
 801bef2:	462b      	mov	r3, r5
 801bef4:	1814      	adds	r4, r2, r0
 801bef6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801befa:	414b      	adcs	r3, r1
 801befc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bf00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf04:	685b      	ldr	r3, [r3, #4]
 801bf06:	461a      	mov	r2, r3
 801bf08:	f04f 0300 	mov.w	r3, #0
 801bf0c:	1891      	adds	r1, r2, r2
 801bf0e:	6339      	str	r1, [r7, #48]	; 0x30
 801bf10:	415b      	adcs	r3, r3
 801bf12:	637b      	str	r3, [r7, #52]	; 0x34
 801bf14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801bf18:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801bf1c:	f7e4 feb4 	bl	8000c88 <__aeabi_uldivmod>
 801bf20:	4602      	mov	r2, r0
 801bf22:	460b      	mov	r3, r1
 801bf24:	4b0c      	ldr	r3, [pc, #48]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bf26:	fba3 1302 	umull	r1, r3, r3, r2
 801bf2a:	095b      	lsrs	r3, r3, #5
 801bf2c:	2164      	movs	r1, #100	; 0x64
 801bf2e:	fb01 f303 	mul.w	r3, r1, r3
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	00db      	lsls	r3, r3, #3
 801bf36:	3332      	adds	r3, #50	; 0x32
 801bf38:	4a07      	ldr	r2, [pc, #28]	; (801bf58 <UART_SetConfig+0x3dc>)
 801bf3a:	fba2 2303 	umull	r2, r3, r2, r3
 801bf3e:	095b      	lsrs	r3, r3, #5
 801bf40:	f003 0207 	and.w	r2, r3, #7
 801bf44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	4432      	add	r2, r6
 801bf4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801bf4e:	e1a6      	b.n	801c29e <UART_SetConfig+0x722>
 801bf50:	40011000 	.word	0x40011000
 801bf54:	40011400 	.word	0x40011400
 801bf58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801bf5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf60:	681a      	ldr	r2, [r3, #0]
 801bf62:	4bd1      	ldr	r3, [pc, #836]	; (801c2a8 <UART_SetConfig+0x72c>)
 801bf64:	429a      	cmp	r2, r3
 801bf66:	d006      	beq.n	801bf76 <UART_SetConfig+0x3fa>
 801bf68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	4bcf      	ldr	r3, [pc, #828]	; (801c2ac <UART_SetConfig+0x730>)
 801bf70:	429a      	cmp	r2, r3
 801bf72:	f040 80ca 	bne.w	801c10a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801bf76:	f7fe f8e1 	bl	801a13c <HAL_RCC_GetPCLK2Freq>
 801bf7a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801bf7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bf82:	461c      	mov	r4, r3
 801bf84:	f04f 0500 	mov.w	r5, #0
 801bf88:	4622      	mov	r2, r4
 801bf8a:	462b      	mov	r3, r5
 801bf8c:	1891      	adds	r1, r2, r2
 801bf8e:	62b9      	str	r1, [r7, #40]	; 0x28
 801bf90:	415b      	adcs	r3, r3
 801bf92:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bf94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801bf98:	1912      	adds	r2, r2, r4
 801bf9a:	eb45 0303 	adc.w	r3, r5, r3
 801bf9e:	f04f 0000 	mov.w	r0, #0
 801bfa2:	f04f 0100 	mov.w	r1, #0
 801bfa6:	00d9      	lsls	r1, r3, #3
 801bfa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801bfac:	00d0      	lsls	r0, r2, #3
 801bfae:	4602      	mov	r2, r0
 801bfb0:	460b      	mov	r3, r1
 801bfb2:	eb12 0a04 	adds.w	sl, r2, r4
 801bfb6:	eb43 0b05 	adc.w	fp, r3, r5
 801bfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bfbe:	685b      	ldr	r3, [r3, #4]
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f04f 0100 	mov.w	r1, #0
 801bfc6:	f04f 0200 	mov.w	r2, #0
 801bfca:	f04f 0300 	mov.w	r3, #0
 801bfce:	008b      	lsls	r3, r1, #2
 801bfd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801bfd4:	0082      	lsls	r2, r0, #2
 801bfd6:	4650      	mov	r0, sl
 801bfd8:	4659      	mov	r1, fp
 801bfda:	f7e4 fe55 	bl	8000c88 <__aeabi_uldivmod>
 801bfde:	4602      	mov	r2, r0
 801bfe0:	460b      	mov	r3, r1
 801bfe2:	4bb3      	ldr	r3, [pc, #716]	; (801c2b0 <UART_SetConfig+0x734>)
 801bfe4:	fba3 2302 	umull	r2, r3, r3, r2
 801bfe8:	095b      	lsrs	r3, r3, #5
 801bfea:	011e      	lsls	r6, r3, #4
 801bfec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801bff0:	4618      	mov	r0, r3
 801bff2:	f04f 0100 	mov.w	r1, #0
 801bff6:	4602      	mov	r2, r0
 801bff8:	460b      	mov	r3, r1
 801bffa:	1894      	adds	r4, r2, r2
 801bffc:	623c      	str	r4, [r7, #32]
 801bffe:	415b      	adcs	r3, r3
 801c000:	627b      	str	r3, [r7, #36]	; 0x24
 801c002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c006:	1812      	adds	r2, r2, r0
 801c008:	eb41 0303 	adc.w	r3, r1, r3
 801c00c:	f04f 0400 	mov.w	r4, #0
 801c010:	f04f 0500 	mov.w	r5, #0
 801c014:	00dd      	lsls	r5, r3, #3
 801c016:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c01a:	00d4      	lsls	r4, r2, #3
 801c01c:	4622      	mov	r2, r4
 801c01e:	462b      	mov	r3, r5
 801c020:	1814      	adds	r4, r2, r0
 801c022:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801c026:	414b      	adcs	r3, r1
 801c028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c030:	685b      	ldr	r3, [r3, #4]
 801c032:	4618      	mov	r0, r3
 801c034:	f04f 0100 	mov.w	r1, #0
 801c038:	f04f 0200 	mov.w	r2, #0
 801c03c:	f04f 0300 	mov.w	r3, #0
 801c040:	008b      	lsls	r3, r1, #2
 801c042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c046:	0082      	lsls	r2, r0, #2
 801c048:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801c04c:	f7e4 fe1c 	bl	8000c88 <__aeabi_uldivmod>
 801c050:	4602      	mov	r2, r0
 801c052:	460b      	mov	r3, r1
 801c054:	4b96      	ldr	r3, [pc, #600]	; (801c2b0 <UART_SetConfig+0x734>)
 801c056:	fba3 1302 	umull	r1, r3, r3, r2
 801c05a:	095b      	lsrs	r3, r3, #5
 801c05c:	2164      	movs	r1, #100	; 0x64
 801c05e:	fb01 f303 	mul.w	r3, r1, r3
 801c062:	1ad3      	subs	r3, r2, r3
 801c064:	011b      	lsls	r3, r3, #4
 801c066:	3332      	adds	r3, #50	; 0x32
 801c068:	4a91      	ldr	r2, [pc, #580]	; (801c2b0 <UART_SetConfig+0x734>)
 801c06a:	fba2 2303 	umull	r2, r3, r2, r3
 801c06e:	095b      	lsrs	r3, r3, #5
 801c070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c074:	441e      	add	r6, r3
 801c076:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c07a:	4618      	mov	r0, r3
 801c07c:	f04f 0100 	mov.w	r1, #0
 801c080:	4602      	mov	r2, r0
 801c082:	460b      	mov	r3, r1
 801c084:	1894      	adds	r4, r2, r2
 801c086:	61bc      	str	r4, [r7, #24]
 801c088:	415b      	adcs	r3, r3
 801c08a:	61fb      	str	r3, [r7, #28]
 801c08c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c090:	1812      	adds	r2, r2, r0
 801c092:	eb41 0303 	adc.w	r3, r1, r3
 801c096:	f04f 0400 	mov.w	r4, #0
 801c09a:	f04f 0500 	mov.w	r5, #0
 801c09e:	00dd      	lsls	r5, r3, #3
 801c0a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c0a4:	00d4      	lsls	r4, r2, #3
 801c0a6:	4622      	mov	r2, r4
 801c0a8:	462b      	mov	r3, r5
 801c0aa:	1814      	adds	r4, r2, r0
 801c0ac:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 801c0b0:	414b      	adcs	r3, r1
 801c0b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0ba:	685b      	ldr	r3, [r3, #4]
 801c0bc:	4618      	mov	r0, r3
 801c0be:	f04f 0100 	mov.w	r1, #0
 801c0c2:	f04f 0200 	mov.w	r2, #0
 801c0c6:	f04f 0300 	mov.w	r3, #0
 801c0ca:	008b      	lsls	r3, r1, #2
 801c0cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c0d0:	0082      	lsls	r2, r0, #2
 801c0d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801c0d6:	f7e4 fdd7 	bl	8000c88 <__aeabi_uldivmod>
 801c0da:	4602      	mov	r2, r0
 801c0dc:	460b      	mov	r3, r1
 801c0de:	4b74      	ldr	r3, [pc, #464]	; (801c2b0 <UART_SetConfig+0x734>)
 801c0e0:	fba3 1302 	umull	r1, r3, r3, r2
 801c0e4:	095b      	lsrs	r3, r3, #5
 801c0e6:	2164      	movs	r1, #100	; 0x64
 801c0e8:	fb01 f303 	mul.w	r3, r1, r3
 801c0ec:	1ad3      	subs	r3, r2, r3
 801c0ee:	011b      	lsls	r3, r3, #4
 801c0f0:	3332      	adds	r3, #50	; 0x32
 801c0f2:	4a6f      	ldr	r2, [pc, #444]	; (801c2b0 <UART_SetConfig+0x734>)
 801c0f4:	fba2 2303 	umull	r2, r3, r2, r3
 801c0f8:	095b      	lsrs	r3, r3, #5
 801c0fa:	f003 020f 	and.w	r2, r3, #15
 801c0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	4432      	add	r2, r6
 801c106:	609a      	str	r2, [r3, #8]
 801c108:	e0c9      	b.n	801c29e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801c10a:	f7fe f803 	bl	801a114 <HAL_RCC_GetPCLK1Freq>
 801c10e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c112:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c116:	461c      	mov	r4, r3
 801c118:	f04f 0500 	mov.w	r5, #0
 801c11c:	4622      	mov	r2, r4
 801c11e:	462b      	mov	r3, r5
 801c120:	1891      	adds	r1, r2, r2
 801c122:	6139      	str	r1, [r7, #16]
 801c124:	415b      	adcs	r3, r3
 801c126:	617b      	str	r3, [r7, #20]
 801c128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c12c:	1912      	adds	r2, r2, r4
 801c12e:	eb45 0303 	adc.w	r3, r5, r3
 801c132:	f04f 0000 	mov.w	r0, #0
 801c136:	f04f 0100 	mov.w	r1, #0
 801c13a:	00d9      	lsls	r1, r3, #3
 801c13c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c140:	00d0      	lsls	r0, r2, #3
 801c142:	4602      	mov	r2, r0
 801c144:	460b      	mov	r3, r1
 801c146:	eb12 0804 	adds.w	r8, r2, r4
 801c14a:	eb43 0905 	adc.w	r9, r3, r5
 801c14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c152:	685b      	ldr	r3, [r3, #4]
 801c154:	4618      	mov	r0, r3
 801c156:	f04f 0100 	mov.w	r1, #0
 801c15a:	f04f 0200 	mov.w	r2, #0
 801c15e:	f04f 0300 	mov.w	r3, #0
 801c162:	008b      	lsls	r3, r1, #2
 801c164:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c168:	0082      	lsls	r2, r0, #2
 801c16a:	4640      	mov	r0, r8
 801c16c:	4649      	mov	r1, r9
 801c16e:	f7e4 fd8b 	bl	8000c88 <__aeabi_uldivmod>
 801c172:	4602      	mov	r2, r0
 801c174:	460b      	mov	r3, r1
 801c176:	4b4e      	ldr	r3, [pc, #312]	; (801c2b0 <UART_SetConfig+0x734>)
 801c178:	fba3 2302 	umull	r2, r3, r3, r2
 801c17c:	095b      	lsrs	r3, r3, #5
 801c17e:	011e      	lsls	r6, r3, #4
 801c180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c184:	4618      	mov	r0, r3
 801c186:	f04f 0100 	mov.w	r1, #0
 801c18a:	4602      	mov	r2, r0
 801c18c:	460b      	mov	r3, r1
 801c18e:	1894      	adds	r4, r2, r2
 801c190:	60bc      	str	r4, [r7, #8]
 801c192:	415b      	adcs	r3, r3
 801c194:	60fb      	str	r3, [r7, #12]
 801c196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c19a:	1812      	adds	r2, r2, r0
 801c19c:	eb41 0303 	adc.w	r3, r1, r3
 801c1a0:	f04f 0400 	mov.w	r4, #0
 801c1a4:	f04f 0500 	mov.w	r5, #0
 801c1a8:	00dd      	lsls	r5, r3, #3
 801c1aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c1ae:	00d4      	lsls	r4, r2, #3
 801c1b0:	4622      	mov	r2, r4
 801c1b2:	462b      	mov	r3, r5
 801c1b4:	1814      	adds	r4, r2, r0
 801c1b6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801c1ba:	414b      	adcs	r3, r1
 801c1bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1c4:	685b      	ldr	r3, [r3, #4]
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	f04f 0100 	mov.w	r1, #0
 801c1cc:	f04f 0200 	mov.w	r2, #0
 801c1d0:	f04f 0300 	mov.w	r3, #0
 801c1d4:	008b      	lsls	r3, r1, #2
 801c1d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c1da:	0082      	lsls	r2, r0, #2
 801c1dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801c1e0:	f7e4 fd52 	bl	8000c88 <__aeabi_uldivmod>
 801c1e4:	4602      	mov	r2, r0
 801c1e6:	460b      	mov	r3, r1
 801c1e8:	4b31      	ldr	r3, [pc, #196]	; (801c2b0 <UART_SetConfig+0x734>)
 801c1ea:	fba3 1302 	umull	r1, r3, r3, r2
 801c1ee:	095b      	lsrs	r3, r3, #5
 801c1f0:	2164      	movs	r1, #100	; 0x64
 801c1f2:	fb01 f303 	mul.w	r3, r1, r3
 801c1f6:	1ad3      	subs	r3, r2, r3
 801c1f8:	011b      	lsls	r3, r3, #4
 801c1fa:	3332      	adds	r3, #50	; 0x32
 801c1fc:	4a2c      	ldr	r2, [pc, #176]	; (801c2b0 <UART_SetConfig+0x734>)
 801c1fe:	fba2 2303 	umull	r2, r3, r2, r3
 801c202:	095b      	lsrs	r3, r3, #5
 801c204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c208:	441e      	add	r6, r3
 801c20a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c20e:	4618      	mov	r0, r3
 801c210:	f04f 0100 	mov.w	r1, #0
 801c214:	4602      	mov	r2, r0
 801c216:	460b      	mov	r3, r1
 801c218:	1894      	adds	r4, r2, r2
 801c21a:	603c      	str	r4, [r7, #0]
 801c21c:	415b      	adcs	r3, r3
 801c21e:	607b      	str	r3, [r7, #4]
 801c220:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c224:	1812      	adds	r2, r2, r0
 801c226:	eb41 0303 	adc.w	r3, r1, r3
 801c22a:	f04f 0400 	mov.w	r4, #0
 801c22e:	f04f 0500 	mov.w	r5, #0
 801c232:	00dd      	lsls	r5, r3, #3
 801c234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c238:	00d4      	lsls	r4, r2, #3
 801c23a:	4622      	mov	r2, r4
 801c23c:	462b      	mov	r3, r5
 801c23e:	1814      	adds	r4, r2, r0
 801c240:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801c244:	414b      	adcs	r3, r1
 801c246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c24e:	685b      	ldr	r3, [r3, #4]
 801c250:	4618      	mov	r0, r3
 801c252:	f04f 0100 	mov.w	r1, #0
 801c256:	f04f 0200 	mov.w	r2, #0
 801c25a:	f04f 0300 	mov.w	r3, #0
 801c25e:	008b      	lsls	r3, r1, #2
 801c260:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c264:	0082      	lsls	r2, r0, #2
 801c266:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801c26a:	f7e4 fd0d 	bl	8000c88 <__aeabi_uldivmod>
 801c26e:	4602      	mov	r2, r0
 801c270:	460b      	mov	r3, r1
 801c272:	4b0f      	ldr	r3, [pc, #60]	; (801c2b0 <UART_SetConfig+0x734>)
 801c274:	fba3 1302 	umull	r1, r3, r3, r2
 801c278:	095b      	lsrs	r3, r3, #5
 801c27a:	2164      	movs	r1, #100	; 0x64
 801c27c:	fb01 f303 	mul.w	r3, r1, r3
 801c280:	1ad3      	subs	r3, r2, r3
 801c282:	011b      	lsls	r3, r3, #4
 801c284:	3332      	adds	r3, #50	; 0x32
 801c286:	4a0a      	ldr	r2, [pc, #40]	; (801c2b0 <UART_SetConfig+0x734>)
 801c288:	fba2 2303 	umull	r2, r3, r2, r3
 801c28c:	095b      	lsrs	r3, r3, #5
 801c28e:	f003 020f 	and.w	r2, r3, #15
 801c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	4432      	add	r2, r6
 801c29a:	609a      	str	r2, [r3, #8]
}
 801c29c:	e7ff      	b.n	801c29e <UART_SetConfig+0x722>
 801c29e:	bf00      	nop
 801c2a0:	37f4      	adds	r7, #244	; 0xf4
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2a8:	40011000 	.word	0x40011000
 801c2ac:	40011400 	.word	0x40011400
 801c2b0:	51eb851f 	.word	0x51eb851f

0801c2b4 <__NVIC_SetPriority>:
{
 801c2b4:	b480      	push	{r7}
 801c2b6:	b083      	sub	sp, #12
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	6039      	str	r1, [r7, #0]
 801c2be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c2c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	db0a      	blt.n	801c2de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c2c8:	683b      	ldr	r3, [r7, #0]
 801c2ca:	b2da      	uxtb	r2, r3
 801c2cc:	490c      	ldr	r1, [pc, #48]	; (801c300 <__NVIC_SetPriority+0x4c>)
 801c2ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c2d2:	0112      	lsls	r2, r2, #4
 801c2d4:	b2d2      	uxtb	r2, r2
 801c2d6:	440b      	add	r3, r1
 801c2d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801c2dc:	e00a      	b.n	801c2f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	b2da      	uxtb	r2, r3
 801c2e2:	4908      	ldr	r1, [pc, #32]	; (801c304 <__NVIC_SetPriority+0x50>)
 801c2e4:	79fb      	ldrb	r3, [r7, #7]
 801c2e6:	f003 030f 	and.w	r3, r3, #15
 801c2ea:	3b04      	subs	r3, #4
 801c2ec:	0112      	lsls	r2, r2, #4
 801c2ee:	b2d2      	uxtb	r2, r2
 801c2f0:	440b      	add	r3, r1
 801c2f2:	761a      	strb	r2, [r3, #24]
}
 801c2f4:	bf00      	nop
 801c2f6:	370c      	adds	r7, #12
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2fe:	4770      	bx	lr
 801c300:	e000e100 	.word	0xe000e100
 801c304:	e000ed00 	.word	0xe000ed00

0801c308 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801c308:	b580      	push	{r7, lr}
 801c30a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801c30c:	4b05      	ldr	r3, [pc, #20]	; (801c324 <SysTick_Handler+0x1c>)
 801c30e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801c310:	f001 fcfe 	bl	801dd10 <xTaskGetSchedulerState>
 801c314:	4603      	mov	r3, r0
 801c316:	2b01      	cmp	r3, #1
 801c318:	d001      	beq.n	801c31e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801c31a:	f002 fae5 	bl	801e8e8 <xPortSysTickHandler>
  }
}
 801c31e:	bf00      	nop
 801c320:	bd80      	pop	{r7, pc}
 801c322:	bf00      	nop
 801c324:	e000e010 	.word	0xe000e010

0801c328 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801c328:	b580      	push	{r7, lr}
 801c32a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801c32c:	2100      	movs	r1, #0
 801c32e:	f06f 0004 	mvn.w	r0, #4
 801c332:	f7ff ffbf 	bl	801c2b4 <__NVIC_SetPriority>
#endif
}
 801c336:	bf00      	nop
 801c338:	bd80      	pop	{r7, pc}
	...

0801c33c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801c33c:	b480      	push	{r7}
 801c33e:	b083      	sub	sp, #12
 801c340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c342:	f3ef 8305 	mrs	r3, IPSR
 801c346:	603b      	str	r3, [r7, #0]
  return(result);
 801c348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d003      	beq.n	801c356 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801c34e:	f06f 0305 	mvn.w	r3, #5
 801c352:	607b      	str	r3, [r7, #4]
 801c354:	e00c      	b.n	801c370 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801c356:	4b0a      	ldr	r3, [pc, #40]	; (801c380 <osKernelInitialize+0x44>)
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d105      	bne.n	801c36a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801c35e:	4b08      	ldr	r3, [pc, #32]	; (801c380 <osKernelInitialize+0x44>)
 801c360:	2201      	movs	r2, #1
 801c362:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801c364:	2300      	movs	r3, #0
 801c366:	607b      	str	r3, [r7, #4]
 801c368:	e002      	b.n	801c370 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801c36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c36e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801c370:	687b      	ldr	r3, [r7, #4]
}
 801c372:	4618      	mov	r0, r3
 801c374:	370c      	adds	r7, #12
 801c376:	46bd      	mov	sp, r7
 801c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37c:	4770      	bx	lr
 801c37e:	bf00      	nop
 801c380:	20001108 	.word	0x20001108

0801c384 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801c384:	b580      	push	{r7, lr}
 801c386:	b082      	sub	sp, #8
 801c388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c38a:	f3ef 8305 	mrs	r3, IPSR
 801c38e:	603b      	str	r3, [r7, #0]
  return(result);
 801c390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c392:	2b00      	cmp	r3, #0
 801c394:	d003      	beq.n	801c39e <osKernelStart+0x1a>
    stat = osErrorISR;
 801c396:	f06f 0305 	mvn.w	r3, #5
 801c39a:	607b      	str	r3, [r7, #4]
 801c39c:	e010      	b.n	801c3c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801c39e:	4b0b      	ldr	r3, [pc, #44]	; (801c3cc <osKernelStart+0x48>)
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	2b01      	cmp	r3, #1
 801c3a4:	d109      	bne.n	801c3ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801c3a6:	f7ff ffbf 	bl	801c328 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801c3aa:	4b08      	ldr	r3, [pc, #32]	; (801c3cc <osKernelStart+0x48>)
 801c3ac:	2202      	movs	r2, #2
 801c3ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801c3b0:	f001 f866 	bl	801d480 <vTaskStartScheduler>
      stat = osOK;
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	607b      	str	r3, [r7, #4]
 801c3b8:	e002      	b.n	801c3c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801c3ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801c3c0:	687b      	ldr	r3, [r7, #4]
}
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	3708      	adds	r7, #8
 801c3c6:	46bd      	mov	sp, r7
 801c3c8:	bd80      	pop	{r7, pc}
 801c3ca:	bf00      	nop
 801c3cc:	20001108 	.word	0x20001108

0801c3d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b08e      	sub	sp, #56	; 0x38
 801c3d4:	af04      	add	r7, sp, #16
 801c3d6:	60f8      	str	r0, [r7, #12]
 801c3d8:	60b9      	str	r1, [r7, #8]
 801c3da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c3e0:	f3ef 8305 	mrs	r3, IPSR
 801c3e4:	617b      	str	r3, [r7, #20]
  return(result);
 801c3e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d17e      	bne.n	801c4ea <osThreadNew+0x11a>
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d07b      	beq.n	801c4ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801c3f2:	2380      	movs	r3, #128	; 0x80
 801c3f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801c3f6:	2318      	movs	r3, #24
 801c3f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801c3fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c402:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d045      	beq.n	801c496 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d002      	beq.n	801c418 <osThreadNew+0x48>
        name = attr->name;
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	699b      	ldr	r3, [r3, #24]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d002      	beq.n	801c426 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	699b      	ldr	r3, [r3, #24]
 801c424:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801c426:	69fb      	ldr	r3, [r7, #28]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d008      	beq.n	801c43e <osThreadNew+0x6e>
 801c42c:	69fb      	ldr	r3, [r7, #28]
 801c42e:	2b38      	cmp	r3, #56	; 0x38
 801c430:	d805      	bhi.n	801c43e <osThreadNew+0x6e>
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	685b      	ldr	r3, [r3, #4]
 801c436:	f003 0301 	and.w	r3, r3, #1
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d001      	beq.n	801c442 <osThreadNew+0x72>
        return (NULL);
 801c43e:	2300      	movs	r3, #0
 801c440:	e054      	b.n	801c4ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	695b      	ldr	r3, [r3, #20]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d003      	beq.n	801c452 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	695b      	ldr	r3, [r3, #20]
 801c44e:	089b      	lsrs	r3, r3, #2
 801c450:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	689b      	ldr	r3, [r3, #8]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d00e      	beq.n	801c478 <osThreadNew+0xa8>
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	68db      	ldr	r3, [r3, #12]
 801c45e:	2b5b      	cmp	r3, #91	; 0x5b
 801c460:	d90a      	bls.n	801c478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801c466:	2b00      	cmp	r3, #0
 801c468:	d006      	beq.n	801c478 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	695b      	ldr	r3, [r3, #20]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d002      	beq.n	801c478 <osThreadNew+0xa8>
        mem = 1;
 801c472:	2301      	movs	r3, #1
 801c474:	61bb      	str	r3, [r7, #24]
 801c476:	e010      	b.n	801c49a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	689b      	ldr	r3, [r3, #8]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d10c      	bne.n	801c49a <osThreadNew+0xca>
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	68db      	ldr	r3, [r3, #12]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d108      	bne.n	801c49a <osThreadNew+0xca>
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	691b      	ldr	r3, [r3, #16]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d104      	bne.n	801c49a <osThreadNew+0xca>
          mem = 0;
 801c490:	2300      	movs	r3, #0
 801c492:	61bb      	str	r3, [r7, #24]
 801c494:	e001      	b.n	801c49a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801c496:	2300      	movs	r3, #0
 801c498:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801c49a:	69bb      	ldr	r3, [r7, #24]
 801c49c:	2b01      	cmp	r3, #1
 801c49e:	d110      	bne.n	801c4c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801c4a4:	687a      	ldr	r2, [r7, #4]
 801c4a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801c4a8:	9202      	str	r2, [sp, #8]
 801c4aa:	9301      	str	r3, [sp, #4]
 801c4ac:	69fb      	ldr	r3, [r7, #28]
 801c4ae:	9300      	str	r3, [sp, #0]
 801c4b0:	68bb      	ldr	r3, [r7, #8]
 801c4b2:	6a3a      	ldr	r2, [r7, #32]
 801c4b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4b6:	68f8      	ldr	r0, [r7, #12]
 801c4b8:	f000 fe0c 	bl	801d0d4 <xTaskCreateStatic>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	613b      	str	r3, [r7, #16]
 801c4c0:	e013      	b.n	801c4ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801c4c2:	69bb      	ldr	r3, [r7, #24]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d110      	bne.n	801c4ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801c4c8:	6a3b      	ldr	r3, [r7, #32]
 801c4ca:	b29a      	uxth	r2, r3
 801c4cc:	f107 0310 	add.w	r3, r7, #16
 801c4d0:	9301      	str	r3, [sp, #4]
 801c4d2:	69fb      	ldr	r3, [r7, #28]
 801c4d4:	9300      	str	r3, [sp, #0]
 801c4d6:	68bb      	ldr	r3, [r7, #8]
 801c4d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4da:	68f8      	ldr	r0, [r7, #12]
 801c4dc:	f000 fe57 	bl	801d18e <xTaskCreate>
 801c4e0:	4603      	mov	r3, r0
 801c4e2:	2b01      	cmp	r3, #1
 801c4e4:	d001      	beq.n	801c4ea <osThreadNew+0x11a>
            hTask = NULL;
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801c4ea:	693b      	ldr	r3, [r7, #16]
}
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	3728      	adds	r7, #40	; 0x28
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	bd80      	pop	{r7, pc}

0801c4f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b084      	sub	sp, #16
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c4fc:	f3ef 8305 	mrs	r3, IPSR
 801c500:	60bb      	str	r3, [r7, #8]
  return(result);
 801c502:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c504:	2b00      	cmp	r3, #0
 801c506:	d003      	beq.n	801c510 <osDelay+0x1c>
    stat = osErrorISR;
 801c508:	f06f 0305 	mvn.w	r3, #5
 801c50c:	60fb      	str	r3, [r7, #12]
 801c50e:	e007      	b.n	801c520 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801c510:	2300      	movs	r3, #0
 801c512:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d002      	beq.n	801c520 <osDelay+0x2c>
      vTaskDelay(ticks);
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f000 ff7c 	bl	801d418 <vTaskDelay>
    }
  }

  return (stat);
 801c520:	68fb      	ldr	r3, [r7, #12]
}
 801c522:	4618      	mov	r0, r3
 801c524:	3710      	adds	r7, #16
 801c526:	46bd      	mov	sp, r7
 801c528:	bd80      	pop	{r7, pc}
	...

0801c52c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801c52c:	b480      	push	{r7}
 801c52e:	b085      	sub	sp, #20
 801c530:	af00      	add	r7, sp, #0
 801c532:	60f8      	str	r0, [r7, #12]
 801c534:	60b9      	str	r1, [r7, #8]
 801c536:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	4a07      	ldr	r2, [pc, #28]	; (801c558 <vApplicationGetIdleTaskMemory+0x2c>)
 801c53c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801c53e:	68bb      	ldr	r3, [r7, #8]
 801c540:	4a06      	ldr	r2, [pc, #24]	; (801c55c <vApplicationGetIdleTaskMemory+0x30>)
 801c542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	2280      	movs	r2, #128	; 0x80
 801c548:	601a      	str	r2, [r3, #0]
}
 801c54a:	bf00      	nop
 801c54c:	3714      	adds	r7, #20
 801c54e:	46bd      	mov	sp, r7
 801c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c554:	4770      	bx	lr
 801c556:	bf00      	nop
 801c558:	2000110c 	.word	0x2000110c
 801c55c:	20001168 	.word	0x20001168

0801c560 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801c560:	b480      	push	{r7}
 801c562:	b085      	sub	sp, #20
 801c564:	af00      	add	r7, sp, #0
 801c566:	60f8      	str	r0, [r7, #12]
 801c568:	60b9      	str	r1, [r7, #8]
 801c56a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	4a07      	ldr	r2, [pc, #28]	; (801c58c <vApplicationGetTimerTaskMemory+0x2c>)
 801c570:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801c572:	68bb      	ldr	r3, [r7, #8]
 801c574:	4a06      	ldr	r2, [pc, #24]	; (801c590 <vApplicationGetTimerTaskMemory+0x30>)
 801c576:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c57e:	601a      	str	r2, [r3, #0]
}
 801c580:	bf00      	nop
 801c582:	3714      	adds	r7, #20
 801c584:	46bd      	mov	sp, r7
 801c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c58a:	4770      	bx	lr
 801c58c:	20001368 	.word	0x20001368
 801c590:	200013c4 	.word	0x200013c4

0801c594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801c594:	b480      	push	{r7}
 801c596:	b083      	sub	sp, #12
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	f103 0208 	add.w	r2, r3, #8
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c5ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f103 0208 	add.w	r2, r3, #8
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	f103 0208 	add.w	r2, r3, #8
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801c5c8:	bf00      	nop
 801c5ca:	370c      	adds	r7, #12
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d2:	4770      	bx	lr

0801c5d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801c5d4:	b480      	push	{r7}
 801c5d6:	b083      	sub	sp, #12
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	2200      	movs	r2, #0
 801c5e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801c5e2:	bf00      	nop
 801c5e4:	370c      	adds	r7, #12
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ec:	4770      	bx	lr

0801c5ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801c5ee:	b480      	push	{r7}
 801c5f0:	b085      	sub	sp, #20
 801c5f2:	af00      	add	r7, sp, #0
 801c5f4:	6078      	str	r0, [r7, #4]
 801c5f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	685b      	ldr	r3, [r3, #4]
 801c5fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	68fa      	ldr	r2, [r7, #12]
 801c602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	689a      	ldr	r2, [r3, #8]
 801c608:	683b      	ldr	r3, [r7, #0]
 801c60a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	689b      	ldr	r3, [r3, #8]
 801c610:	683a      	ldr	r2, [r7, #0]
 801c612:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	683a      	ldr	r2, [r7, #0]
 801c618:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801c61a:	683b      	ldr	r3, [r7, #0]
 801c61c:	687a      	ldr	r2, [r7, #4]
 801c61e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	1c5a      	adds	r2, r3, #1
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	601a      	str	r2, [r3, #0]
}
 801c62a:	bf00      	nop
 801c62c:	3714      	adds	r7, #20
 801c62e:	46bd      	mov	sp, r7
 801c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c634:	4770      	bx	lr

0801c636 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801c636:	b480      	push	{r7}
 801c638:	b085      	sub	sp, #20
 801c63a:	af00      	add	r7, sp, #0
 801c63c:	6078      	str	r0, [r7, #4]
 801c63e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801c640:	683b      	ldr	r3, [r7, #0]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801c646:	68bb      	ldr	r3, [r7, #8]
 801c648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c64c:	d103      	bne.n	801c656 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	691b      	ldr	r3, [r3, #16]
 801c652:	60fb      	str	r3, [r7, #12]
 801c654:	e00c      	b.n	801c670 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	3308      	adds	r3, #8
 801c65a:	60fb      	str	r3, [r7, #12]
 801c65c:	e002      	b.n	801c664 <vListInsert+0x2e>
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	685b      	ldr	r3, [r3, #4]
 801c662:	60fb      	str	r3, [r7, #12]
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	685b      	ldr	r3, [r3, #4]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	68ba      	ldr	r2, [r7, #8]
 801c66c:	429a      	cmp	r2, r3
 801c66e:	d2f6      	bcs.n	801c65e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	685a      	ldr	r2, [r3, #4]
 801c674:	683b      	ldr	r3, [r7, #0]
 801c676:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801c678:	683b      	ldr	r3, [r7, #0]
 801c67a:	685b      	ldr	r3, [r3, #4]
 801c67c:	683a      	ldr	r2, [r7, #0]
 801c67e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801c680:	683b      	ldr	r3, [r7, #0]
 801c682:	68fa      	ldr	r2, [r7, #12]
 801c684:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	683a      	ldr	r2, [r7, #0]
 801c68a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801c68c:	683b      	ldr	r3, [r7, #0]
 801c68e:	687a      	ldr	r2, [r7, #4]
 801c690:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	1c5a      	adds	r2, r3, #1
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	601a      	str	r2, [r3, #0]
}
 801c69c:	bf00      	nop
 801c69e:	3714      	adds	r7, #20
 801c6a0:	46bd      	mov	sp, r7
 801c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a6:	4770      	bx	lr

0801c6a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801c6a8:	b480      	push	{r7}
 801c6aa:	b085      	sub	sp, #20
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	691b      	ldr	r3, [r3, #16]
 801c6b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	685b      	ldr	r3, [r3, #4]
 801c6ba:	687a      	ldr	r2, [r7, #4]
 801c6bc:	6892      	ldr	r2, [r2, #8]
 801c6be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	689b      	ldr	r3, [r3, #8]
 801c6c4:	687a      	ldr	r2, [r7, #4]
 801c6c6:	6852      	ldr	r2, [r2, #4]
 801c6c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	685b      	ldr	r3, [r3, #4]
 801c6ce:	687a      	ldr	r2, [r7, #4]
 801c6d0:	429a      	cmp	r2, r3
 801c6d2:	d103      	bne.n	801c6dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	689a      	ldr	r2, [r3, #8]
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	2200      	movs	r2, #0
 801c6e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801c6e2:	68fb      	ldr	r3, [r7, #12]
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	1e5a      	subs	r2, r3, #1
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	681b      	ldr	r3, [r3, #0]
}
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	3714      	adds	r7, #20
 801c6f4:	46bd      	mov	sp, r7
 801c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6fa:	4770      	bx	lr

0801c6fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b084      	sub	sp, #16
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
 801c704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d10a      	bne.n	801c726 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c714:	f383 8811 	msr	BASEPRI, r3
 801c718:	f3bf 8f6f 	isb	sy
 801c71c:	f3bf 8f4f 	dsb	sy
 801c720:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801c722:	bf00      	nop
 801c724:	e7fe      	b.n	801c724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801c726:	f002 f84d 	bl	801e7c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c732:	68f9      	ldr	r1, [r7, #12]
 801c734:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801c736:	fb01 f303 	mul.w	r3, r1, r3
 801c73a:	441a      	add	r2, r3
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	2200      	movs	r2, #0
 801c744:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	681a      	ldr	r2, [r3, #0]
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	681a      	ldr	r2, [r3, #0]
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c756:	3b01      	subs	r3, #1
 801c758:	68f9      	ldr	r1, [r7, #12]
 801c75a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801c75c:	fb01 f303 	mul.w	r3, r1, r3
 801c760:	441a      	add	r2, r3
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	22ff      	movs	r2, #255	; 0xff
 801c76a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	22ff      	movs	r2, #255	; 0xff
 801c772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d114      	bne.n	801c7a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	691b      	ldr	r3, [r3, #16]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d01a      	beq.n	801c7ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	3310      	adds	r3, #16
 801c788:	4618      	mov	r0, r3
 801c78a:	f001 f903 	bl	801d994 <xTaskRemoveFromEventList>
 801c78e:	4603      	mov	r3, r0
 801c790:	2b00      	cmp	r3, #0
 801c792:	d012      	beq.n	801c7ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801c794:	4b0c      	ldr	r3, [pc, #48]	; (801c7c8 <xQueueGenericReset+0xcc>)
 801c796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c79a:	601a      	str	r2, [r3, #0]
 801c79c:	f3bf 8f4f 	dsb	sy
 801c7a0:	f3bf 8f6f 	isb	sy
 801c7a4:	e009      	b.n	801c7ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	3310      	adds	r3, #16
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	f7ff fef2 	bl	801c594 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	3324      	adds	r3, #36	; 0x24
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	f7ff feed 	bl	801c594 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801c7ba:	f002 f833 	bl	801e824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801c7be:	2301      	movs	r3, #1
}
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	3710      	adds	r7, #16
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}
 801c7c8:	e000ed04 	.word	0xe000ed04

0801c7cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b08e      	sub	sp, #56	; 0x38
 801c7d0:	af02      	add	r7, sp, #8
 801c7d2:	60f8      	str	r0, [r7, #12]
 801c7d4:	60b9      	str	r1, [r7, #8]
 801c7d6:	607a      	str	r2, [r7, #4]
 801c7d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d10a      	bne.n	801c7f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801c7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7e4:	f383 8811 	msr	BASEPRI, r3
 801c7e8:	f3bf 8f6f 	isb	sy
 801c7ec:	f3bf 8f4f 	dsb	sy
 801c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801c7f2:	bf00      	nop
 801c7f4:	e7fe      	b.n	801c7f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801c7f6:	683b      	ldr	r3, [r7, #0]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d10a      	bne.n	801c812 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c800:	f383 8811 	msr	BASEPRI, r3
 801c804:	f3bf 8f6f 	isb	sy
 801c808:	f3bf 8f4f 	dsb	sy
 801c80c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801c80e:	bf00      	nop
 801c810:	e7fe      	b.n	801c810 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d002      	beq.n	801c81e <xQueueGenericCreateStatic+0x52>
 801c818:	68bb      	ldr	r3, [r7, #8]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d001      	beq.n	801c822 <xQueueGenericCreateStatic+0x56>
 801c81e:	2301      	movs	r3, #1
 801c820:	e000      	b.n	801c824 <xQueueGenericCreateStatic+0x58>
 801c822:	2300      	movs	r3, #0
 801c824:	2b00      	cmp	r3, #0
 801c826:	d10a      	bne.n	801c83e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c82c:	f383 8811 	msr	BASEPRI, r3
 801c830:	f3bf 8f6f 	isb	sy
 801c834:	f3bf 8f4f 	dsb	sy
 801c838:	623b      	str	r3, [r7, #32]
}
 801c83a:	bf00      	nop
 801c83c:	e7fe      	b.n	801c83c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d102      	bne.n	801c84a <xQueueGenericCreateStatic+0x7e>
 801c844:	68bb      	ldr	r3, [r7, #8]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d101      	bne.n	801c84e <xQueueGenericCreateStatic+0x82>
 801c84a:	2301      	movs	r3, #1
 801c84c:	e000      	b.n	801c850 <xQueueGenericCreateStatic+0x84>
 801c84e:	2300      	movs	r3, #0
 801c850:	2b00      	cmp	r3, #0
 801c852:	d10a      	bne.n	801c86a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c858:	f383 8811 	msr	BASEPRI, r3
 801c85c:	f3bf 8f6f 	isb	sy
 801c860:	f3bf 8f4f 	dsb	sy
 801c864:	61fb      	str	r3, [r7, #28]
}
 801c866:	bf00      	nop
 801c868:	e7fe      	b.n	801c868 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801c86a:	2350      	movs	r3, #80	; 0x50
 801c86c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	2b50      	cmp	r3, #80	; 0x50
 801c872:	d00a      	beq.n	801c88a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801c874:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c878:	f383 8811 	msr	BASEPRI, r3
 801c87c:	f3bf 8f6f 	isb	sy
 801c880:	f3bf 8f4f 	dsb	sy
 801c884:	61bb      	str	r3, [r7, #24]
}
 801c886:	bf00      	nop
 801c888:	e7fe      	b.n	801c888 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801c88a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c892:	2b00      	cmp	r3, #0
 801c894:	d00d      	beq.n	801c8b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c898:	2201      	movs	r2, #1
 801c89a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801c89e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8a4:	9300      	str	r3, [sp, #0]
 801c8a6:	4613      	mov	r3, r2
 801c8a8:	687a      	ldr	r2, [r7, #4]
 801c8aa:	68b9      	ldr	r1, [r7, #8]
 801c8ac:	68f8      	ldr	r0, [r7, #12]
 801c8ae:	f000 f805 	bl	801c8bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	3730      	adds	r7, #48	; 0x30
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bd80      	pop	{r7, pc}

0801c8bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b084      	sub	sp, #16
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	60f8      	str	r0, [r7, #12]
 801c8c4:	60b9      	str	r1, [r7, #8]
 801c8c6:	607a      	str	r2, [r7, #4]
 801c8c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801c8ca:	68bb      	ldr	r3, [r7, #8]
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d103      	bne.n	801c8d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801c8d0:	69bb      	ldr	r3, [r7, #24]
 801c8d2:	69ba      	ldr	r2, [r7, #24]
 801c8d4:	601a      	str	r2, [r3, #0]
 801c8d6:	e002      	b.n	801c8de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801c8d8:	69bb      	ldr	r3, [r7, #24]
 801c8da:	687a      	ldr	r2, [r7, #4]
 801c8dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801c8de:	69bb      	ldr	r3, [r7, #24]
 801c8e0:	68fa      	ldr	r2, [r7, #12]
 801c8e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801c8e4:	69bb      	ldr	r3, [r7, #24]
 801c8e6:	68ba      	ldr	r2, [r7, #8]
 801c8e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801c8ea:	2101      	movs	r1, #1
 801c8ec:	69b8      	ldr	r0, [r7, #24]
 801c8ee:	f7ff ff05 	bl	801c6fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801c8f2:	69bb      	ldr	r3, [r7, #24]
 801c8f4:	78fa      	ldrb	r2, [r7, #3]
 801c8f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801c8fa:	bf00      	nop
 801c8fc:	3710      	adds	r7, #16
 801c8fe:	46bd      	mov	sp, r7
 801c900:	bd80      	pop	{r7, pc}
	...

0801c904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801c904:	b580      	push	{r7, lr}
 801c906:	b08e      	sub	sp, #56	; 0x38
 801c908:	af00      	add	r7, sp, #0
 801c90a:	60f8      	str	r0, [r7, #12]
 801c90c:	60b9      	str	r1, [r7, #8]
 801c90e:	607a      	str	r2, [r7, #4]
 801c910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801c912:	2300      	movs	r3, #0
 801c914:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d10a      	bne.n	801c936 <xQueueGenericSend+0x32>
	__asm volatile
 801c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c924:	f383 8811 	msr	BASEPRI, r3
 801c928:	f3bf 8f6f 	isb	sy
 801c92c:	f3bf 8f4f 	dsb	sy
 801c930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801c932:	bf00      	nop
 801c934:	e7fe      	b.n	801c934 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801c936:	68bb      	ldr	r3, [r7, #8]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d103      	bne.n	801c944 <xQueueGenericSend+0x40>
 801c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c940:	2b00      	cmp	r3, #0
 801c942:	d101      	bne.n	801c948 <xQueueGenericSend+0x44>
 801c944:	2301      	movs	r3, #1
 801c946:	e000      	b.n	801c94a <xQueueGenericSend+0x46>
 801c948:	2300      	movs	r3, #0
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d10a      	bne.n	801c964 <xQueueGenericSend+0x60>
	__asm volatile
 801c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c952:	f383 8811 	msr	BASEPRI, r3
 801c956:	f3bf 8f6f 	isb	sy
 801c95a:	f3bf 8f4f 	dsb	sy
 801c95e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801c960:	bf00      	nop
 801c962:	e7fe      	b.n	801c962 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801c964:	683b      	ldr	r3, [r7, #0]
 801c966:	2b02      	cmp	r3, #2
 801c968:	d103      	bne.n	801c972 <xQueueGenericSend+0x6e>
 801c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c96e:	2b01      	cmp	r3, #1
 801c970:	d101      	bne.n	801c976 <xQueueGenericSend+0x72>
 801c972:	2301      	movs	r3, #1
 801c974:	e000      	b.n	801c978 <xQueueGenericSend+0x74>
 801c976:	2300      	movs	r3, #0
 801c978:	2b00      	cmp	r3, #0
 801c97a:	d10a      	bne.n	801c992 <xQueueGenericSend+0x8e>
	__asm volatile
 801c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c980:	f383 8811 	msr	BASEPRI, r3
 801c984:	f3bf 8f6f 	isb	sy
 801c988:	f3bf 8f4f 	dsb	sy
 801c98c:	623b      	str	r3, [r7, #32]
}
 801c98e:	bf00      	nop
 801c990:	e7fe      	b.n	801c990 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801c992:	f001 f9bd 	bl	801dd10 <xTaskGetSchedulerState>
 801c996:	4603      	mov	r3, r0
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d102      	bne.n	801c9a2 <xQueueGenericSend+0x9e>
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d101      	bne.n	801c9a6 <xQueueGenericSend+0xa2>
 801c9a2:	2301      	movs	r3, #1
 801c9a4:	e000      	b.n	801c9a8 <xQueueGenericSend+0xa4>
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d10a      	bne.n	801c9c2 <xQueueGenericSend+0xbe>
	__asm volatile
 801c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9b0:	f383 8811 	msr	BASEPRI, r3
 801c9b4:	f3bf 8f6f 	isb	sy
 801c9b8:	f3bf 8f4f 	dsb	sy
 801c9bc:	61fb      	str	r3, [r7, #28]
}
 801c9be:	bf00      	nop
 801c9c0:	e7fe      	b.n	801c9c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801c9c2:	f001 feff 	bl	801e7c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801c9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9ce:	429a      	cmp	r2, r3
 801c9d0:	d302      	bcc.n	801c9d8 <xQueueGenericSend+0xd4>
 801c9d2:	683b      	ldr	r3, [r7, #0]
 801c9d4:	2b02      	cmp	r3, #2
 801c9d6:	d129      	bne.n	801ca2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801c9d8:	683a      	ldr	r2, [r7, #0]
 801c9da:	68b9      	ldr	r1, [r7, #8]
 801c9dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c9de:	f000 fa0b 	bl	801cdf8 <prvCopyDataToQueue>
 801c9e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d010      	beq.n	801ca0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9ee:	3324      	adds	r3, #36	; 0x24
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	f000 ffcf 	bl	801d994 <xTaskRemoveFromEventList>
 801c9f6:	4603      	mov	r3, r0
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d013      	beq.n	801ca24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801c9fc:	4b3f      	ldr	r3, [pc, #252]	; (801cafc <xQueueGenericSend+0x1f8>)
 801c9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ca02:	601a      	str	r2, [r3, #0]
 801ca04:	f3bf 8f4f 	dsb	sy
 801ca08:	f3bf 8f6f 	isb	sy
 801ca0c:	e00a      	b.n	801ca24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d007      	beq.n	801ca24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801ca14:	4b39      	ldr	r3, [pc, #228]	; (801cafc <xQueueGenericSend+0x1f8>)
 801ca16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ca1a:	601a      	str	r2, [r3, #0]
 801ca1c:	f3bf 8f4f 	dsb	sy
 801ca20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801ca24:	f001 fefe 	bl	801e824 <vPortExitCritical>
				return pdPASS;
 801ca28:	2301      	movs	r3, #1
 801ca2a:	e063      	b.n	801caf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d103      	bne.n	801ca3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801ca32:	f001 fef7 	bl	801e824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801ca36:	2300      	movs	r3, #0
 801ca38:	e05c      	b.n	801caf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801ca3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d106      	bne.n	801ca4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801ca40:	f107 0314 	add.w	r3, r7, #20
 801ca44:	4618      	mov	r0, r3
 801ca46:	f001 f809 	bl	801da5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801ca4a:	2301      	movs	r3, #1
 801ca4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801ca4e:	f001 fee9 	bl	801e824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801ca52:	f000 fd7b 	bl	801d54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801ca56:	f001 feb5 	bl	801e7c4 <vPortEnterCritical>
 801ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ca60:	b25b      	sxtb	r3, r3
 801ca62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ca66:	d103      	bne.n	801ca70 <xQueueGenericSend+0x16c>
 801ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ca76:	b25b      	sxtb	r3, r3
 801ca78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ca7c:	d103      	bne.n	801ca86 <xQueueGenericSend+0x182>
 801ca7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca80:	2200      	movs	r2, #0
 801ca82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ca86:	f001 fecd 	bl	801e824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801ca8a:	1d3a      	adds	r2, r7, #4
 801ca8c:	f107 0314 	add.w	r3, r7, #20
 801ca90:	4611      	mov	r1, r2
 801ca92:	4618      	mov	r0, r3
 801ca94:	f000 fff8 	bl	801da88 <xTaskCheckForTimeOut>
 801ca98:	4603      	mov	r3, r0
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d124      	bne.n	801cae8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801ca9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801caa0:	f000 faa2 	bl	801cfe8 <prvIsQueueFull>
 801caa4:	4603      	mov	r3, r0
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d018      	beq.n	801cadc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801caac:	3310      	adds	r3, #16
 801caae:	687a      	ldr	r2, [r7, #4]
 801cab0:	4611      	mov	r1, r2
 801cab2:	4618      	mov	r0, r3
 801cab4:	f000 ff1e 	bl	801d8f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801cab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801caba:	f000 fa2d 	bl	801cf18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801cabe:	f000 fd53 	bl	801d568 <xTaskResumeAll>
 801cac2:	4603      	mov	r3, r0
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	f47f af7c 	bne.w	801c9c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801caca:	4b0c      	ldr	r3, [pc, #48]	; (801cafc <xQueueGenericSend+0x1f8>)
 801cacc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cad0:	601a      	str	r2, [r3, #0]
 801cad2:	f3bf 8f4f 	dsb	sy
 801cad6:	f3bf 8f6f 	isb	sy
 801cada:	e772      	b.n	801c9c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801cadc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cade:	f000 fa1b 	bl	801cf18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801cae2:	f000 fd41 	bl	801d568 <xTaskResumeAll>
 801cae6:	e76c      	b.n	801c9c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801cae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801caea:	f000 fa15 	bl	801cf18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801caee:	f000 fd3b 	bl	801d568 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801caf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801caf4:	4618      	mov	r0, r3
 801caf6:	3738      	adds	r7, #56	; 0x38
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bd80      	pop	{r7, pc}
 801cafc:	e000ed04 	.word	0xe000ed04

0801cb00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	b090      	sub	sp, #64	; 0x40
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	60f8      	str	r0, [r7, #12]
 801cb08:	60b9      	str	r1, [r7, #8]
 801cb0a:	607a      	str	r2, [r7, #4]
 801cb0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d10a      	bne.n	801cb2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801cb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb1c:	f383 8811 	msr	BASEPRI, r3
 801cb20:	f3bf 8f6f 	isb	sy
 801cb24:	f3bf 8f4f 	dsb	sy
 801cb28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801cb2a:	bf00      	nop
 801cb2c:	e7fe      	b.n	801cb2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801cb2e:	68bb      	ldr	r3, [r7, #8]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d103      	bne.n	801cb3c <xQueueGenericSendFromISR+0x3c>
 801cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d101      	bne.n	801cb40 <xQueueGenericSendFromISR+0x40>
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	e000      	b.n	801cb42 <xQueueGenericSendFromISR+0x42>
 801cb40:	2300      	movs	r3, #0
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d10a      	bne.n	801cb5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801cb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb4a:	f383 8811 	msr	BASEPRI, r3
 801cb4e:	f3bf 8f6f 	isb	sy
 801cb52:	f3bf 8f4f 	dsb	sy
 801cb56:	627b      	str	r3, [r7, #36]	; 0x24
}
 801cb58:	bf00      	nop
 801cb5a:	e7fe      	b.n	801cb5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801cb5c:	683b      	ldr	r3, [r7, #0]
 801cb5e:	2b02      	cmp	r3, #2
 801cb60:	d103      	bne.n	801cb6a <xQueueGenericSendFromISR+0x6a>
 801cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cb66:	2b01      	cmp	r3, #1
 801cb68:	d101      	bne.n	801cb6e <xQueueGenericSendFromISR+0x6e>
 801cb6a:	2301      	movs	r3, #1
 801cb6c:	e000      	b.n	801cb70 <xQueueGenericSendFromISR+0x70>
 801cb6e:	2300      	movs	r3, #0
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d10a      	bne.n	801cb8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb78:	f383 8811 	msr	BASEPRI, r3
 801cb7c:	f3bf 8f6f 	isb	sy
 801cb80:	f3bf 8f4f 	dsb	sy
 801cb84:	623b      	str	r3, [r7, #32]
}
 801cb86:	bf00      	nop
 801cb88:	e7fe      	b.n	801cb88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801cb8a:	f001 fefd 	bl	801e988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801cb8e:	f3ef 8211 	mrs	r2, BASEPRI
 801cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb96:	f383 8811 	msr	BASEPRI, r3
 801cb9a:	f3bf 8f6f 	isb	sy
 801cb9e:	f3bf 8f4f 	dsb	sy
 801cba2:	61fa      	str	r2, [r7, #28]
 801cba4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801cba6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801cba8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cbb2:	429a      	cmp	r2, r3
 801cbb4:	d302      	bcc.n	801cbbc <xQueueGenericSendFromISR+0xbc>
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	2b02      	cmp	r3, #2
 801cbba:	d12f      	bne.n	801cc1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801cbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801cbcc:	683a      	ldr	r2, [r7, #0]
 801cbce:	68b9      	ldr	r1, [r7, #8]
 801cbd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801cbd2:	f000 f911 	bl	801cdf8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801cbd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801cbda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cbde:	d112      	bne.n	801cc06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d016      	beq.n	801cc16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbea:	3324      	adds	r3, #36	; 0x24
 801cbec:	4618      	mov	r0, r3
 801cbee:	f000 fed1 	bl	801d994 <xTaskRemoveFromEventList>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d00e      	beq.n	801cc16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d00b      	beq.n	801cc16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	2201      	movs	r2, #1
 801cc02:	601a      	str	r2, [r3, #0]
 801cc04:	e007      	b.n	801cc16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801cc06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801cc0a:	3301      	adds	r3, #1
 801cc0c:	b2db      	uxtb	r3, r3
 801cc0e:	b25a      	sxtb	r2, r3
 801cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801cc16:	2301      	movs	r3, #1
 801cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801cc1a:	e001      	b.n	801cc20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801cc24:	697b      	ldr	r3, [r7, #20]
 801cc26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801cc2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801cc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801cc2e:	4618      	mov	r0, r3
 801cc30:	3740      	adds	r7, #64	; 0x40
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bd80      	pop	{r7, pc}
	...

0801cc38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801cc38:	b580      	push	{r7, lr}
 801cc3a:	b08c      	sub	sp, #48	; 0x30
 801cc3c:	af00      	add	r7, sp, #0
 801cc3e:	60f8      	str	r0, [r7, #12]
 801cc40:	60b9      	str	r1, [r7, #8]
 801cc42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801cc44:	2300      	movs	r3, #0
 801cc46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d10a      	bne.n	801cc68 <xQueueReceive+0x30>
	__asm volatile
 801cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc56:	f383 8811 	msr	BASEPRI, r3
 801cc5a:	f3bf 8f6f 	isb	sy
 801cc5e:	f3bf 8f4f 	dsb	sy
 801cc62:	623b      	str	r3, [r7, #32]
}
 801cc64:	bf00      	nop
 801cc66:	e7fe      	b.n	801cc66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801cc68:	68bb      	ldr	r3, [r7, #8]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d103      	bne.n	801cc76 <xQueueReceive+0x3e>
 801cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d101      	bne.n	801cc7a <xQueueReceive+0x42>
 801cc76:	2301      	movs	r3, #1
 801cc78:	e000      	b.n	801cc7c <xQueueReceive+0x44>
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d10a      	bne.n	801cc96 <xQueueReceive+0x5e>
	__asm volatile
 801cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc84:	f383 8811 	msr	BASEPRI, r3
 801cc88:	f3bf 8f6f 	isb	sy
 801cc8c:	f3bf 8f4f 	dsb	sy
 801cc90:	61fb      	str	r3, [r7, #28]
}
 801cc92:	bf00      	nop
 801cc94:	e7fe      	b.n	801cc94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801cc96:	f001 f83b 	bl	801dd10 <xTaskGetSchedulerState>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d102      	bne.n	801cca6 <xQueueReceive+0x6e>
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d101      	bne.n	801ccaa <xQueueReceive+0x72>
 801cca6:	2301      	movs	r3, #1
 801cca8:	e000      	b.n	801ccac <xQueueReceive+0x74>
 801ccaa:	2300      	movs	r3, #0
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d10a      	bne.n	801ccc6 <xQueueReceive+0x8e>
	__asm volatile
 801ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ccb4:	f383 8811 	msr	BASEPRI, r3
 801ccb8:	f3bf 8f6f 	isb	sy
 801ccbc:	f3bf 8f4f 	dsb	sy
 801ccc0:	61bb      	str	r3, [r7, #24]
}
 801ccc2:	bf00      	nop
 801ccc4:	e7fe      	b.n	801ccc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ccc6:	f001 fd7d 	bl	801e7c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d01f      	beq.n	801cd16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801ccd6:	68b9      	ldr	r1, [r7, #8]
 801ccd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ccda:	f000 f8f7 	bl	801cecc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801ccde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cce0:	1e5a      	subs	r2, r3, #1
 801cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cce4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cce8:	691b      	ldr	r3, [r3, #16]
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d00f      	beq.n	801cd0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccf0:	3310      	adds	r3, #16
 801ccf2:	4618      	mov	r0, r3
 801ccf4:	f000 fe4e 	bl	801d994 <xTaskRemoveFromEventList>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d007      	beq.n	801cd0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801ccfe:	4b3d      	ldr	r3, [pc, #244]	; (801cdf4 <xQueueReceive+0x1bc>)
 801cd00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cd04:	601a      	str	r2, [r3, #0]
 801cd06:	f3bf 8f4f 	dsb	sy
 801cd0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801cd0e:	f001 fd89 	bl	801e824 <vPortExitCritical>
				return pdPASS;
 801cd12:	2301      	movs	r3, #1
 801cd14:	e069      	b.n	801cdea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d103      	bne.n	801cd24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801cd1c:	f001 fd82 	bl	801e824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801cd20:	2300      	movs	r3, #0
 801cd22:	e062      	b.n	801cdea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d106      	bne.n	801cd38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801cd2a:	f107 0310 	add.w	r3, r7, #16
 801cd2e:	4618      	mov	r0, r3
 801cd30:	f000 fe94 	bl	801da5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801cd34:	2301      	movs	r3, #1
 801cd36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801cd38:	f001 fd74 	bl	801e824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801cd3c:	f000 fc06 	bl	801d54c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801cd40:	f001 fd40 	bl	801e7c4 <vPortEnterCritical>
 801cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801cd4a:	b25b      	sxtb	r3, r3
 801cd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cd50:	d103      	bne.n	801cd5a <xQueueReceive+0x122>
 801cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd54:	2200      	movs	r2, #0
 801cd56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801cd60:	b25b      	sxtb	r3, r3
 801cd62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cd66:	d103      	bne.n	801cd70 <xQueueReceive+0x138>
 801cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cd70:	f001 fd58 	bl	801e824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801cd74:	1d3a      	adds	r2, r7, #4
 801cd76:	f107 0310 	add.w	r3, r7, #16
 801cd7a:	4611      	mov	r1, r2
 801cd7c:	4618      	mov	r0, r3
 801cd7e:	f000 fe83 	bl	801da88 <xTaskCheckForTimeOut>
 801cd82:	4603      	mov	r3, r0
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d123      	bne.n	801cdd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cd88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cd8a:	f000 f917 	bl	801cfbc <prvIsQueueEmpty>
 801cd8e:	4603      	mov	r3, r0
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d017      	beq.n	801cdc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd96:	3324      	adds	r3, #36	; 0x24
 801cd98:	687a      	ldr	r2, [r7, #4]
 801cd9a:	4611      	mov	r1, r2
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f000 fda9 	bl	801d8f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801cda2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cda4:	f000 f8b8 	bl	801cf18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801cda8:	f000 fbde 	bl	801d568 <xTaskResumeAll>
 801cdac:	4603      	mov	r3, r0
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d189      	bne.n	801ccc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801cdb2:	4b10      	ldr	r3, [pc, #64]	; (801cdf4 <xQueueReceive+0x1bc>)
 801cdb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cdb8:	601a      	str	r2, [r3, #0]
 801cdba:	f3bf 8f4f 	dsb	sy
 801cdbe:	f3bf 8f6f 	isb	sy
 801cdc2:	e780      	b.n	801ccc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801cdc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cdc6:	f000 f8a7 	bl	801cf18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801cdca:	f000 fbcd 	bl	801d568 <xTaskResumeAll>
 801cdce:	e77a      	b.n	801ccc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801cdd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cdd2:	f000 f8a1 	bl	801cf18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801cdd6:	f000 fbc7 	bl	801d568 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801cdda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cddc:	f000 f8ee 	bl	801cfbc <prvIsQueueEmpty>
 801cde0:	4603      	mov	r3, r0
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	f43f af6f 	beq.w	801ccc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801cde8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801cdea:	4618      	mov	r0, r3
 801cdec:	3730      	adds	r7, #48	; 0x30
 801cdee:	46bd      	mov	sp, r7
 801cdf0:	bd80      	pop	{r7, pc}
 801cdf2:	bf00      	nop
 801cdf4:	e000ed04 	.word	0xe000ed04

0801cdf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801cdf8:	b580      	push	{r7, lr}
 801cdfa:	b086      	sub	sp, #24
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	60f8      	str	r0, [r7, #12]
 801ce00:	60b9      	str	r1, [r7, #8]
 801ce02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801ce04:	2300      	movs	r3, #0
 801ce06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d10d      	bne.n	801ce32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	681b      	ldr	r3, [r3, #0]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d14d      	bne.n	801ceba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	689b      	ldr	r3, [r3, #8]
 801ce22:	4618      	mov	r0, r3
 801ce24:	f000 ff92 	bl	801dd4c <xTaskPriorityDisinherit>
 801ce28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	609a      	str	r2, [r3, #8]
 801ce30:	e043      	b.n	801ceba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d119      	bne.n	801ce6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	6858      	ldr	r0, [r3, #4]
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce40:	461a      	mov	r2, r3
 801ce42:	68b9      	ldr	r1, [r7, #8]
 801ce44:	f001 fffc 	bl	801ee40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	685a      	ldr	r2, [r3, #4]
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce50:	441a      	add	r2, r3
 801ce52:	68fb      	ldr	r3, [r7, #12]
 801ce54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	685a      	ldr	r2, [r3, #4]
 801ce5a:	68fb      	ldr	r3, [r7, #12]
 801ce5c:	689b      	ldr	r3, [r3, #8]
 801ce5e:	429a      	cmp	r2, r3
 801ce60:	d32b      	bcc.n	801ceba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	681a      	ldr	r2, [r3, #0]
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	605a      	str	r2, [r3, #4]
 801ce6a:	e026      	b.n	801ceba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	68d8      	ldr	r0, [r3, #12]
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce74:	461a      	mov	r2, r3
 801ce76:	68b9      	ldr	r1, [r7, #8]
 801ce78:	f001 ffe2 	bl	801ee40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801ce7c:	68fb      	ldr	r3, [r7, #12]
 801ce7e:	68da      	ldr	r2, [r3, #12]
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce84:	425b      	negs	r3, r3
 801ce86:	441a      	add	r2, r3
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	68da      	ldr	r2, [r3, #12]
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	429a      	cmp	r2, r3
 801ce96:	d207      	bcs.n	801cea8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	689a      	ldr	r2, [r3, #8]
 801ce9c:	68fb      	ldr	r3, [r7, #12]
 801ce9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cea0:	425b      	negs	r3, r3
 801cea2:	441a      	add	r2, r3
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	2b02      	cmp	r3, #2
 801ceac:	d105      	bne.n	801ceba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801ceae:	693b      	ldr	r3, [r7, #16]
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d002      	beq.n	801ceba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801ceb4:	693b      	ldr	r3, [r7, #16]
 801ceb6:	3b01      	subs	r3, #1
 801ceb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801ceba:	693b      	ldr	r3, [r7, #16]
 801cebc:	1c5a      	adds	r2, r3, #1
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801cec2:	697b      	ldr	r3, [r7, #20]
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	3718      	adds	r7, #24
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}

0801cecc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b082      	sub	sp, #8
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	6078      	str	r0, [r7, #4]
 801ced4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d018      	beq.n	801cf10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	68da      	ldr	r2, [r3, #12]
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cee6:	441a      	add	r2, r3
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	68da      	ldr	r2, [r3, #12]
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	689b      	ldr	r3, [r3, #8]
 801cef4:	429a      	cmp	r2, r3
 801cef6:	d303      	bcc.n	801cf00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	681a      	ldr	r2, [r3, #0]
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	68d9      	ldr	r1, [r3, #12]
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf08:	461a      	mov	r2, r3
 801cf0a:	6838      	ldr	r0, [r7, #0]
 801cf0c:	f001 ff98 	bl	801ee40 <memcpy>
	}
}
 801cf10:	bf00      	nop
 801cf12:	3708      	adds	r7, #8
 801cf14:	46bd      	mov	sp, r7
 801cf16:	bd80      	pop	{r7, pc}

0801cf18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b084      	sub	sp, #16
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801cf20:	f001 fc50 	bl	801e7c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801cf2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801cf2c:	e011      	b.n	801cf52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d012      	beq.n	801cf5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	3324      	adds	r3, #36	; 0x24
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f000 fd2a 	bl	801d994 <xTaskRemoveFromEventList>
 801cf40:	4603      	mov	r3, r0
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d001      	beq.n	801cf4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801cf46:	f000 fe01 	bl	801db4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801cf4a:	7bfb      	ldrb	r3, [r7, #15]
 801cf4c:	3b01      	subs	r3, #1
 801cf4e:	b2db      	uxtb	r3, r3
 801cf50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801cf52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	dce9      	bgt.n	801cf2e <prvUnlockQueue+0x16>
 801cf5a:	e000      	b.n	801cf5e <prvUnlockQueue+0x46>
					break;
 801cf5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	22ff      	movs	r2, #255	; 0xff
 801cf62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801cf66:	f001 fc5d 	bl	801e824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801cf6a:	f001 fc2b 	bl	801e7c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801cf74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801cf76:	e011      	b.n	801cf9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	691b      	ldr	r3, [r3, #16]
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d012      	beq.n	801cfa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	3310      	adds	r3, #16
 801cf84:	4618      	mov	r0, r3
 801cf86:	f000 fd05 	bl	801d994 <xTaskRemoveFromEventList>
 801cf8a:	4603      	mov	r3, r0
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d001      	beq.n	801cf94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801cf90:	f000 fddc 	bl	801db4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801cf94:	7bbb      	ldrb	r3, [r7, #14]
 801cf96:	3b01      	subs	r3, #1
 801cf98:	b2db      	uxtb	r3, r3
 801cf9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801cf9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	dce9      	bgt.n	801cf78 <prvUnlockQueue+0x60>
 801cfa4:	e000      	b.n	801cfa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801cfa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	22ff      	movs	r2, #255	; 0xff
 801cfac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801cfb0:	f001 fc38 	bl	801e824 <vPortExitCritical>
}
 801cfb4:	bf00      	nop
 801cfb6:	3710      	adds	r7, #16
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	bd80      	pop	{r7, pc}

0801cfbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801cfbc:	b580      	push	{r7, lr}
 801cfbe:	b084      	sub	sp, #16
 801cfc0:	af00      	add	r7, sp, #0
 801cfc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801cfc4:	f001 fbfe 	bl	801e7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	d102      	bne.n	801cfd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801cfd0:	2301      	movs	r3, #1
 801cfd2:	60fb      	str	r3, [r7, #12]
 801cfd4:	e001      	b.n	801cfda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801cfd6:	2300      	movs	r3, #0
 801cfd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801cfda:	f001 fc23 	bl	801e824 <vPortExitCritical>

	return xReturn;
 801cfde:	68fb      	ldr	r3, [r7, #12]
}
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	3710      	adds	r7, #16
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bd80      	pop	{r7, pc}

0801cfe8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801cfe8:	b580      	push	{r7, lr}
 801cfea:	b084      	sub	sp, #16
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801cff0:	f001 fbe8 	bl	801e7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cffc:	429a      	cmp	r2, r3
 801cffe:	d102      	bne.n	801d006 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801d000:	2301      	movs	r3, #1
 801d002:	60fb      	str	r3, [r7, #12]
 801d004:	e001      	b.n	801d00a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801d006:	2300      	movs	r3, #0
 801d008:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d00a:	f001 fc0b 	bl	801e824 <vPortExitCritical>

	return xReturn;
 801d00e:	68fb      	ldr	r3, [r7, #12]
}
 801d010:	4618      	mov	r0, r3
 801d012:	3710      	adds	r7, #16
 801d014:	46bd      	mov	sp, r7
 801d016:	bd80      	pop	{r7, pc}

0801d018 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801d018:	b480      	push	{r7}
 801d01a:	b085      	sub	sp, #20
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]
 801d020:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d022:	2300      	movs	r3, #0
 801d024:	60fb      	str	r3, [r7, #12]
 801d026:	e014      	b.n	801d052 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801d028:	4a0f      	ldr	r2, [pc, #60]	; (801d068 <vQueueAddToRegistry+0x50>)
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d10b      	bne.n	801d04c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801d034:	490c      	ldr	r1, [pc, #48]	; (801d068 <vQueueAddToRegistry+0x50>)
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	683a      	ldr	r2, [r7, #0]
 801d03a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801d03e:	4a0a      	ldr	r2, [pc, #40]	; (801d068 <vQueueAddToRegistry+0x50>)
 801d040:	68fb      	ldr	r3, [r7, #12]
 801d042:	00db      	lsls	r3, r3, #3
 801d044:	4413      	add	r3, r2
 801d046:	687a      	ldr	r2, [r7, #4]
 801d048:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801d04a:	e006      	b.n	801d05a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	3301      	adds	r3, #1
 801d050:	60fb      	str	r3, [r7, #12]
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	2b07      	cmp	r3, #7
 801d056:	d9e7      	bls.n	801d028 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801d058:	bf00      	nop
 801d05a:	bf00      	nop
 801d05c:	3714      	adds	r7, #20
 801d05e:	46bd      	mov	sp, r7
 801d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d064:	4770      	bx	lr
 801d066:	bf00      	nop
 801d068:	2000a90c 	.word	0x2000a90c

0801d06c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b086      	sub	sp, #24
 801d070:	af00      	add	r7, sp, #0
 801d072:	60f8      	str	r0, [r7, #12]
 801d074:	60b9      	str	r1, [r7, #8]
 801d076:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801d078:	68fb      	ldr	r3, [r7, #12]
 801d07a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801d07c:	f001 fba2 	bl	801e7c4 <vPortEnterCritical>
 801d080:	697b      	ldr	r3, [r7, #20]
 801d082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d086:	b25b      	sxtb	r3, r3
 801d088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d08c:	d103      	bne.n	801d096 <vQueueWaitForMessageRestricted+0x2a>
 801d08e:	697b      	ldr	r3, [r7, #20]
 801d090:	2200      	movs	r2, #0
 801d092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d096:	697b      	ldr	r3, [r7, #20]
 801d098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d09c:	b25b      	sxtb	r3, r3
 801d09e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d0a2:	d103      	bne.n	801d0ac <vQueueWaitForMessageRestricted+0x40>
 801d0a4:	697b      	ldr	r3, [r7, #20]
 801d0a6:	2200      	movs	r2, #0
 801d0a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d0ac:	f001 fbba 	bl	801e824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801d0b0:	697b      	ldr	r3, [r7, #20]
 801d0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d106      	bne.n	801d0c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801d0b8:	697b      	ldr	r3, [r7, #20]
 801d0ba:	3324      	adds	r3, #36	; 0x24
 801d0bc:	687a      	ldr	r2, [r7, #4]
 801d0be:	68b9      	ldr	r1, [r7, #8]
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f000 fc3b 	bl	801d93c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801d0c6:	6978      	ldr	r0, [r7, #20]
 801d0c8:	f7ff ff26 	bl	801cf18 <prvUnlockQueue>
	}
 801d0cc:	bf00      	nop
 801d0ce:	3718      	adds	r7, #24
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}

0801d0d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801d0d4:	b580      	push	{r7, lr}
 801d0d6:	b08e      	sub	sp, #56	; 0x38
 801d0d8:	af04      	add	r7, sp, #16
 801d0da:	60f8      	str	r0, [r7, #12]
 801d0dc:	60b9      	str	r1, [r7, #8]
 801d0de:	607a      	str	r2, [r7, #4]
 801d0e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801d0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d10a      	bne.n	801d0fe <xTaskCreateStatic+0x2a>
	__asm volatile
 801d0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0ec:	f383 8811 	msr	BASEPRI, r3
 801d0f0:	f3bf 8f6f 	isb	sy
 801d0f4:	f3bf 8f4f 	dsb	sy
 801d0f8:	623b      	str	r3, [r7, #32]
}
 801d0fa:	bf00      	nop
 801d0fc:	e7fe      	b.n	801d0fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801d0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d100:	2b00      	cmp	r3, #0
 801d102:	d10a      	bne.n	801d11a <xTaskCreateStatic+0x46>
	__asm volatile
 801d104:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d108:	f383 8811 	msr	BASEPRI, r3
 801d10c:	f3bf 8f6f 	isb	sy
 801d110:	f3bf 8f4f 	dsb	sy
 801d114:	61fb      	str	r3, [r7, #28]
}
 801d116:	bf00      	nop
 801d118:	e7fe      	b.n	801d118 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801d11a:	235c      	movs	r3, #92	; 0x5c
 801d11c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801d11e:	693b      	ldr	r3, [r7, #16]
 801d120:	2b5c      	cmp	r3, #92	; 0x5c
 801d122:	d00a      	beq.n	801d13a <xTaskCreateStatic+0x66>
	__asm volatile
 801d124:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d128:	f383 8811 	msr	BASEPRI, r3
 801d12c:	f3bf 8f6f 	isb	sy
 801d130:	f3bf 8f4f 	dsb	sy
 801d134:	61bb      	str	r3, [r7, #24]
}
 801d136:	bf00      	nop
 801d138:	e7fe      	b.n	801d138 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801d13a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d01e      	beq.n	801d180 <xTaskCreateStatic+0xac>
 801d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d144:	2b00      	cmp	r3, #0
 801d146:	d01b      	beq.n	801d180 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801d148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d14a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d150:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d154:	2202      	movs	r2, #2
 801d156:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801d15a:	2300      	movs	r3, #0
 801d15c:	9303      	str	r3, [sp, #12]
 801d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d160:	9302      	str	r3, [sp, #8]
 801d162:	f107 0314 	add.w	r3, r7, #20
 801d166:	9301      	str	r3, [sp, #4]
 801d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d16a:	9300      	str	r3, [sp, #0]
 801d16c:	683b      	ldr	r3, [r7, #0]
 801d16e:	687a      	ldr	r2, [r7, #4]
 801d170:	68b9      	ldr	r1, [r7, #8]
 801d172:	68f8      	ldr	r0, [r7, #12]
 801d174:	f000 f850 	bl	801d218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d17a:	f000 f8dd 	bl	801d338 <prvAddNewTaskToReadyList>
 801d17e:	e001      	b.n	801d184 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801d180:	2300      	movs	r3, #0
 801d182:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801d184:	697b      	ldr	r3, [r7, #20]
	}
 801d186:	4618      	mov	r0, r3
 801d188:	3728      	adds	r7, #40	; 0x28
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}

0801d18e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801d18e:	b580      	push	{r7, lr}
 801d190:	b08c      	sub	sp, #48	; 0x30
 801d192:	af04      	add	r7, sp, #16
 801d194:	60f8      	str	r0, [r7, #12]
 801d196:	60b9      	str	r1, [r7, #8]
 801d198:	603b      	str	r3, [r7, #0]
 801d19a:	4613      	mov	r3, r2
 801d19c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801d19e:	88fb      	ldrh	r3, [r7, #6]
 801d1a0:	009b      	lsls	r3, r3, #2
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f001 fc30 	bl	801ea08 <pvPortMalloc>
 801d1a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801d1aa:	697b      	ldr	r3, [r7, #20]
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d00e      	beq.n	801d1ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801d1b0:	205c      	movs	r0, #92	; 0x5c
 801d1b2:	f001 fc29 	bl	801ea08 <pvPortMalloc>
 801d1b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801d1b8:	69fb      	ldr	r3, [r7, #28]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d003      	beq.n	801d1c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801d1be:	69fb      	ldr	r3, [r7, #28]
 801d1c0:	697a      	ldr	r2, [r7, #20]
 801d1c2:	631a      	str	r2, [r3, #48]	; 0x30
 801d1c4:	e005      	b.n	801d1d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801d1c6:	6978      	ldr	r0, [r7, #20]
 801d1c8:	f001 fcea 	bl	801eba0 <vPortFree>
 801d1cc:	e001      	b.n	801d1d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801d1d2:	69fb      	ldr	r3, [r7, #28]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d017      	beq.n	801d208 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801d1d8:	69fb      	ldr	r3, [r7, #28]
 801d1da:	2200      	movs	r2, #0
 801d1dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801d1e0:	88fa      	ldrh	r2, [r7, #6]
 801d1e2:	2300      	movs	r3, #0
 801d1e4:	9303      	str	r3, [sp, #12]
 801d1e6:	69fb      	ldr	r3, [r7, #28]
 801d1e8:	9302      	str	r3, [sp, #8]
 801d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ec:	9301      	str	r3, [sp, #4]
 801d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1f0:	9300      	str	r3, [sp, #0]
 801d1f2:	683b      	ldr	r3, [r7, #0]
 801d1f4:	68b9      	ldr	r1, [r7, #8]
 801d1f6:	68f8      	ldr	r0, [r7, #12]
 801d1f8:	f000 f80e 	bl	801d218 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d1fc:	69f8      	ldr	r0, [r7, #28]
 801d1fe:	f000 f89b 	bl	801d338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801d202:	2301      	movs	r3, #1
 801d204:	61bb      	str	r3, [r7, #24]
 801d206:	e002      	b.n	801d20e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801d208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d20c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801d20e:	69bb      	ldr	r3, [r7, #24]
	}
 801d210:	4618      	mov	r0, r3
 801d212:	3720      	adds	r7, #32
 801d214:	46bd      	mov	sp, r7
 801d216:	bd80      	pop	{r7, pc}

0801d218 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b088      	sub	sp, #32
 801d21c:	af00      	add	r7, sp, #0
 801d21e:	60f8      	str	r0, [r7, #12]
 801d220:	60b9      	str	r1, [r7, #8]
 801d222:	607a      	str	r2, [r7, #4]
 801d224:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d228:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	009b      	lsls	r3, r3, #2
 801d22e:	461a      	mov	r2, r3
 801d230:	21a5      	movs	r1, #165	; 0xa5
 801d232:	f001 fe13 	bl	801ee5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d240:	3b01      	subs	r3, #1
 801d242:	009b      	lsls	r3, r3, #2
 801d244:	4413      	add	r3, r2
 801d246:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801d248:	69bb      	ldr	r3, [r7, #24]
 801d24a:	f023 0307 	bic.w	r3, r3, #7
 801d24e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801d250:	69bb      	ldr	r3, [r7, #24]
 801d252:	f003 0307 	and.w	r3, r3, #7
 801d256:	2b00      	cmp	r3, #0
 801d258:	d00a      	beq.n	801d270 <prvInitialiseNewTask+0x58>
	__asm volatile
 801d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d25e:	f383 8811 	msr	BASEPRI, r3
 801d262:	f3bf 8f6f 	isb	sy
 801d266:	f3bf 8f4f 	dsb	sy
 801d26a:	617b      	str	r3, [r7, #20]
}
 801d26c:	bf00      	nop
 801d26e:	e7fe      	b.n	801d26e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801d270:	68bb      	ldr	r3, [r7, #8]
 801d272:	2b00      	cmp	r3, #0
 801d274:	d01f      	beq.n	801d2b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d276:	2300      	movs	r3, #0
 801d278:	61fb      	str	r3, [r7, #28]
 801d27a:	e012      	b.n	801d2a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801d27c:	68ba      	ldr	r2, [r7, #8]
 801d27e:	69fb      	ldr	r3, [r7, #28]
 801d280:	4413      	add	r3, r2
 801d282:	7819      	ldrb	r1, [r3, #0]
 801d284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d286:	69fb      	ldr	r3, [r7, #28]
 801d288:	4413      	add	r3, r2
 801d28a:	3334      	adds	r3, #52	; 0x34
 801d28c:	460a      	mov	r2, r1
 801d28e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801d290:	68ba      	ldr	r2, [r7, #8]
 801d292:	69fb      	ldr	r3, [r7, #28]
 801d294:	4413      	add	r3, r2
 801d296:	781b      	ldrb	r3, [r3, #0]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d006      	beq.n	801d2aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d29c:	69fb      	ldr	r3, [r7, #28]
 801d29e:	3301      	adds	r3, #1
 801d2a0:	61fb      	str	r3, [r7, #28]
 801d2a2:	69fb      	ldr	r3, [r7, #28]
 801d2a4:	2b0f      	cmp	r3, #15
 801d2a6:	d9e9      	bls.n	801d27c <prvInitialiseNewTask+0x64>
 801d2a8:	e000      	b.n	801d2ac <prvInitialiseNewTask+0x94>
			{
				break;
 801d2aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d2b4:	e003      	b.n	801d2be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2c0:	2b37      	cmp	r3, #55	; 0x37
 801d2c2:	d901      	bls.n	801d2c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801d2c4:	2337      	movs	r3, #55	; 0x37
 801d2c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d2cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d2d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2dc:	3304      	adds	r3, #4
 801d2de:	4618      	mov	r0, r3
 801d2e0:	f7ff f978 	bl	801c5d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2e6:	3318      	adds	r3, #24
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	f7ff f973 	bl	801c5d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801d2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d2f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801d304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d306:	2200      	movs	r2, #0
 801d308:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d30c:	2200      	movs	r2, #0
 801d30e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801d312:	683a      	ldr	r2, [r7, #0]
 801d314:	68f9      	ldr	r1, [r7, #12]
 801d316:	69b8      	ldr	r0, [r7, #24]
 801d318:	f001 f928 	bl	801e56c <pxPortInitialiseStack>
 801d31c:	4602      	mov	r2, r0
 801d31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d324:	2b00      	cmp	r3, #0
 801d326:	d002      	beq.n	801d32e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d32a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d32c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d32e:	bf00      	nop
 801d330:	3720      	adds	r7, #32
 801d332:	46bd      	mov	sp, r7
 801d334:	bd80      	pop	{r7, pc}
	...

0801d338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801d338:	b580      	push	{r7, lr}
 801d33a:	b082      	sub	sp, #8
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801d340:	f001 fa40 	bl	801e7c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801d344:	4b2d      	ldr	r3, [pc, #180]	; (801d3fc <prvAddNewTaskToReadyList+0xc4>)
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	3301      	adds	r3, #1
 801d34a:	4a2c      	ldr	r2, [pc, #176]	; (801d3fc <prvAddNewTaskToReadyList+0xc4>)
 801d34c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801d34e:	4b2c      	ldr	r3, [pc, #176]	; (801d400 <prvAddNewTaskToReadyList+0xc8>)
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d109      	bne.n	801d36a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801d356:	4a2a      	ldr	r2, [pc, #168]	; (801d400 <prvAddNewTaskToReadyList+0xc8>)
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801d35c:	4b27      	ldr	r3, [pc, #156]	; (801d3fc <prvAddNewTaskToReadyList+0xc4>)
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	2b01      	cmp	r3, #1
 801d362:	d110      	bne.n	801d386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801d364:	f000 fc16 	bl	801db94 <prvInitialiseTaskLists>
 801d368:	e00d      	b.n	801d386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801d36a:	4b26      	ldr	r3, [pc, #152]	; (801d404 <prvAddNewTaskToReadyList+0xcc>)
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d109      	bne.n	801d386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801d372:	4b23      	ldr	r3, [pc, #140]	; (801d400 <prvAddNewTaskToReadyList+0xc8>)
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d37c:	429a      	cmp	r2, r3
 801d37e:	d802      	bhi.n	801d386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801d380:	4a1f      	ldr	r2, [pc, #124]	; (801d400 <prvAddNewTaskToReadyList+0xc8>)
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801d386:	4b20      	ldr	r3, [pc, #128]	; (801d408 <prvAddNewTaskToReadyList+0xd0>)
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	3301      	adds	r3, #1
 801d38c:	4a1e      	ldr	r2, [pc, #120]	; (801d408 <prvAddNewTaskToReadyList+0xd0>)
 801d38e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801d390:	4b1d      	ldr	r3, [pc, #116]	; (801d408 <prvAddNewTaskToReadyList+0xd0>)
 801d392:	681a      	ldr	r2, [r3, #0]
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d39c:	4b1b      	ldr	r3, [pc, #108]	; (801d40c <prvAddNewTaskToReadyList+0xd4>)
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	429a      	cmp	r2, r3
 801d3a2:	d903      	bls.n	801d3ac <prvAddNewTaskToReadyList+0x74>
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3a8:	4a18      	ldr	r2, [pc, #96]	; (801d40c <prvAddNewTaskToReadyList+0xd4>)
 801d3aa:	6013      	str	r3, [r2, #0]
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d3b0:	4613      	mov	r3, r2
 801d3b2:	009b      	lsls	r3, r3, #2
 801d3b4:	4413      	add	r3, r2
 801d3b6:	009b      	lsls	r3, r3, #2
 801d3b8:	4a15      	ldr	r2, [pc, #84]	; (801d410 <prvAddNewTaskToReadyList+0xd8>)
 801d3ba:	441a      	add	r2, r3
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	3304      	adds	r3, #4
 801d3c0:	4619      	mov	r1, r3
 801d3c2:	4610      	mov	r0, r2
 801d3c4:	f7ff f913 	bl	801c5ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801d3c8:	f001 fa2c 	bl	801e824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801d3cc:	4b0d      	ldr	r3, [pc, #52]	; (801d404 <prvAddNewTaskToReadyList+0xcc>)
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d00e      	beq.n	801d3f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801d3d4:	4b0a      	ldr	r3, [pc, #40]	; (801d400 <prvAddNewTaskToReadyList+0xc8>)
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d3de:	429a      	cmp	r2, r3
 801d3e0:	d207      	bcs.n	801d3f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801d3e2:	4b0c      	ldr	r3, [pc, #48]	; (801d414 <prvAddNewTaskToReadyList+0xdc>)
 801d3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d3e8:	601a      	str	r2, [r3, #0]
 801d3ea:	f3bf 8f4f 	dsb	sy
 801d3ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d3f2:	bf00      	nop
 801d3f4:	3708      	adds	r7, #8
 801d3f6:	46bd      	mov	sp, r7
 801d3f8:	bd80      	pop	{r7, pc}
 801d3fa:	bf00      	nop
 801d3fc:	20001c98 	.word	0x20001c98
 801d400:	200017c4 	.word	0x200017c4
 801d404:	20001ca4 	.word	0x20001ca4
 801d408:	20001cb4 	.word	0x20001cb4
 801d40c:	20001ca0 	.word	0x20001ca0
 801d410:	200017c8 	.word	0x200017c8
 801d414:	e000ed04 	.word	0xe000ed04

0801d418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801d418:	b580      	push	{r7, lr}
 801d41a:	b084      	sub	sp, #16
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801d420:	2300      	movs	r3, #0
 801d422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	2b00      	cmp	r3, #0
 801d428:	d017      	beq.n	801d45a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801d42a:	4b13      	ldr	r3, [pc, #76]	; (801d478 <vTaskDelay+0x60>)
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d00a      	beq.n	801d448 <vTaskDelay+0x30>
	__asm volatile
 801d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d436:	f383 8811 	msr	BASEPRI, r3
 801d43a:	f3bf 8f6f 	isb	sy
 801d43e:	f3bf 8f4f 	dsb	sy
 801d442:	60bb      	str	r3, [r7, #8]
}
 801d444:	bf00      	nop
 801d446:	e7fe      	b.n	801d446 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801d448:	f000 f880 	bl	801d54c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801d44c:	2100      	movs	r1, #0
 801d44e:	6878      	ldr	r0, [r7, #4]
 801d450:	f000 fcea 	bl	801de28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801d454:	f000 f888 	bl	801d568 <xTaskResumeAll>
 801d458:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d107      	bne.n	801d470 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801d460:	4b06      	ldr	r3, [pc, #24]	; (801d47c <vTaskDelay+0x64>)
 801d462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d466:	601a      	str	r2, [r3, #0]
 801d468:	f3bf 8f4f 	dsb	sy
 801d46c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801d470:	bf00      	nop
 801d472:	3710      	adds	r7, #16
 801d474:	46bd      	mov	sp, r7
 801d476:	bd80      	pop	{r7, pc}
 801d478:	20001cc0 	.word	0x20001cc0
 801d47c:	e000ed04 	.word	0xe000ed04

0801d480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b08a      	sub	sp, #40	; 0x28
 801d484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801d486:	2300      	movs	r3, #0
 801d488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801d48a:	2300      	movs	r3, #0
 801d48c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801d48e:	463a      	mov	r2, r7
 801d490:	1d39      	adds	r1, r7, #4
 801d492:	f107 0308 	add.w	r3, r7, #8
 801d496:	4618      	mov	r0, r3
 801d498:	f7ff f848 	bl	801c52c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801d49c:	6839      	ldr	r1, [r7, #0]
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	68ba      	ldr	r2, [r7, #8]
 801d4a2:	9202      	str	r2, [sp, #8]
 801d4a4:	9301      	str	r3, [sp, #4]
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	9300      	str	r3, [sp, #0]
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	460a      	mov	r2, r1
 801d4ae:	4921      	ldr	r1, [pc, #132]	; (801d534 <vTaskStartScheduler+0xb4>)
 801d4b0:	4821      	ldr	r0, [pc, #132]	; (801d538 <vTaskStartScheduler+0xb8>)
 801d4b2:	f7ff fe0f 	bl	801d0d4 <xTaskCreateStatic>
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	4a20      	ldr	r2, [pc, #128]	; (801d53c <vTaskStartScheduler+0xbc>)
 801d4ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801d4bc:	4b1f      	ldr	r3, [pc, #124]	; (801d53c <vTaskStartScheduler+0xbc>)
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d002      	beq.n	801d4ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801d4c4:	2301      	movs	r3, #1
 801d4c6:	617b      	str	r3, [r7, #20]
 801d4c8:	e001      	b.n	801d4ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801d4ce:	697b      	ldr	r3, [r7, #20]
 801d4d0:	2b01      	cmp	r3, #1
 801d4d2:	d102      	bne.n	801d4da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801d4d4:	f000 fcfc 	bl	801ded0 <xTimerCreateTimerTask>
 801d4d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801d4da:	697b      	ldr	r3, [r7, #20]
 801d4dc:	2b01      	cmp	r3, #1
 801d4de:	d116      	bne.n	801d50e <vTaskStartScheduler+0x8e>
	__asm volatile
 801d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d4e4:	f383 8811 	msr	BASEPRI, r3
 801d4e8:	f3bf 8f6f 	isb	sy
 801d4ec:	f3bf 8f4f 	dsb	sy
 801d4f0:	613b      	str	r3, [r7, #16]
}
 801d4f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801d4f4:	4b12      	ldr	r3, [pc, #72]	; (801d540 <vTaskStartScheduler+0xc0>)
 801d4f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d4fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801d4fc:	4b11      	ldr	r3, [pc, #68]	; (801d544 <vTaskStartScheduler+0xc4>)
 801d4fe:	2201      	movs	r2, #1
 801d500:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801d502:	4b11      	ldr	r3, [pc, #68]	; (801d548 <vTaskStartScheduler+0xc8>)
 801d504:	2200      	movs	r2, #0
 801d506:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801d508:	f001 f8ba 	bl	801e680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801d50c:	e00e      	b.n	801d52c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801d50e:	697b      	ldr	r3, [r7, #20]
 801d510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d514:	d10a      	bne.n	801d52c <vTaskStartScheduler+0xac>
	__asm volatile
 801d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d51a:	f383 8811 	msr	BASEPRI, r3
 801d51e:	f3bf 8f6f 	isb	sy
 801d522:	f3bf 8f4f 	dsb	sy
 801d526:	60fb      	str	r3, [r7, #12]
}
 801d528:	bf00      	nop
 801d52a:	e7fe      	b.n	801d52a <vTaskStartScheduler+0xaa>
}
 801d52c:	bf00      	nop
 801d52e:	3718      	adds	r7, #24
 801d530:	46bd      	mov	sp, r7
 801d532:	bd80      	pop	{r7, pc}
 801d534:	08025568 	.word	0x08025568
 801d538:	0801db65 	.word	0x0801db65
 801d53c:	20001cbc 	.word	0x20001cbc
 801d540:	20001cb8 	.word	0x20001cb8
 801d544:	20001ca4 	.word	0x20001ca4
 801d548:	20001c9c 	.word	0x20001c9c

0801d54c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801d54c:	b480      	push	{r7}
 801d54e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801d550:	4b04      	ldr	r3, [pc, #16]	; (801d564 <vTaskSuspendAll+0x18>)
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	3301      	adds	r3, #1
 801d556:	4a03      	ldr	r2, [pc, #12]	; (801d564 <vTaskSuspendAll+0x18>)
 801d558:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801d55a:	bf00      	nop
 801d55c:	46bd      	mov	sp, r7
 801d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d562:	4770      	bx	lr
 801d564:	20001cc0 	.word	0x20001cc0

0801d568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	b084      	sub	sp, #16
 801d56c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801d56e:	2300      	movs	r3, #0
 801d570:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801d572:	2300      	movs	r3, #0
 801d574:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801d576:	4b42      	ldr	r3, [pc, #264]	; (801d680 <xTaskResumeAll+0x118>)
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d10a      	bne.n	801d594 <xTaskResumeAll+0x2c>
	__asm volatile
 801d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d582:	f383 8811 	msr	BASEPRI, r3
 801d586:	f3bf 8f6f 	isb	sy
 801d58a:	f3bf 8f4f 	dsb	sy
 801d58e:	603b      	str	r3, [r7, #0]
}
 801d590:	bf00      	nop
 801d592:	e7fe      	b.n	801d592 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801d594:	f001 f916 	bl	801e7c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801d598:	4b39      	ldr	r3, [pc, #228]	; (801d680 <xTaskResumeAll+0x118>)
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	3b01      	subs	r3, #1
 801d59e:	4a38      	ldr	r2, [pc, #224]	; (801d680 <xTaskResumeAll+0x118>)
 801d5a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d5a2:	4b37      	ldr	r3, [pc, #220]	; (801d680 <xTaskResumeAll+0x118>)
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d162      	bne.n	801d670 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801d5aa:	4b36      	ldr	r3, [pc, #216]	; (801d684 <xTaskResumeAll+0x11c>)
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d05e      	beq.n	801d670 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d5b2:	e02f      	b.n	801d614 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d5b4:	4b34      	ldr	r3, [pc, #208]	; (801d688 <xTaskResumeAll+0x120>)
 801d5b6:	68db      	ldr	r3, [r3, #12]
 801d5b8:	68db      	ldr	r3, [r3, #12]
 801d5ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	3318      	adds	r3, #24
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	f7ff f871 	bl	801c6a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	3304      	adds	r3, #4
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	f7ff f86c 	bl	801c6a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d5d4:	4b2d      	ldr	r3, [pc, #180]	; (801d68c <xTaskResumeAll+0x124>)
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	429a      	cmp	r2, r3
 801d5da:	d903      	bls.n	801d5e4 <xTaskResumeAll+0x7c>
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5e0:	4a2a      	ldr	r2, [pc, #168]	; (801d68c <xTaskResumeAll+0x124>)
 801d5e2:	6013      	str	r3, [r2, #0]
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d5e8:	4613      	mov	r3, r2
 801d5ea:	009b      	lsls	r3, r3, #2
 801d5ec:	4413      	add	r3, r2
 801d5ee:	009b      	lsls	r3, r3, #2
 801d5f0:	4a27      	ldr	r2, [pc, #156]	; (801d690 <xTaskResumeAll+0x128>)
 801d5f2:	441a      	add	r2, r3
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	3304      	adds	r3, #4
 801d5f8:	4619      	mov	r1, r3
 801d5fa:	4610      	mov	r0, r2
 801d5fc:	f7fe fff7 	bl	801c5ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d604:	4b23      	ldr	r3, [pc, #140]	; (801d694 <xTaskResumeAll+0x12c>)
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d60a:	429a      	cmp	r2, r3
 801d60c:	d302      	bcc.n	801d614 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801d60e:	4b22      	ldr	r3, [pc, #136]	; (801d698 <xTaskResumeAll+0x130>)
 801d610:	2201      	movs	r2, #1
 801d612:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d614:	4b1c      	ldr	r3, [pc, #112]	; (801d688 <xTaskResumeAll+0x120>)
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d1cb      	bne.n	801d5b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d001      	beq.n	801d626 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801d622:	f000 fb55 	bl	801dcd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801d626:	4b1d      	ldr	r3, [pc, #116]	; (801d69c <xTaskResumeAll+0x134>)
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d010      	beq.n	801d654 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801d632:	f000 f847 	bl	801d6c4 <xTaskIncrementTick>
 801d636:	4603      	mov	r3, r0
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d002      	beq.n	801d642 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801d63c:	4b16      	ldr	r3, [pc, #88]	; (801d698 <xTaskResumeAll+0x130>)
 801d63e:	2201      	movs	r2, #1
 801d640:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	3b01      	subs	r3, #1
 801d646:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d1f1      	bne.n	801d632 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801d64e:	4b13      	ldr	r3, [pc, #76]	; (801d69c <xTaskResumeAll+0x134>)
 801d650:	2200      	movs	r2, #0
 801d652:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801d654:	4b10      	ldr	r3, [pc, #64]	; (801d698 <xTaskResumeAll+0x130>)
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d009      	beq.n	801d670 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801d65c:	2301      	movs	r3, #1
 801d65e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801d660:	4b0f      	ldr	r3, [pc, #60]	; (801d6a0 <xTaskResumeAll+0x138>)
 801d662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d666:	601a      	str	r2, [r3, #0]
 801d668:	f3bf 8f4f 	dsb	sy
 801d66c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801d670:	f001 f8d8 	bl	801e824 <vPortExitCritical>

	return xAlreadyYielded;
 801d674:	68bb      	ldr	r3, [r7, #8]
}
 801d676:	4618      	mov	r0, r3
 801d678:	3710      	adds	r7, #16
 801d67a:	46bd      	mov	sp, r7
 801d67c:	bd80      	pop	{r7, pc}
 801d67e:	bf00      	nop
 801d680:	20001cc0 	.word	0x20001cc0
 801d684:	20001c98 	.word	0x20001c98
 801d688:	20001c58 	.word	0x20001c58
 801d68c:	20001ca0 	.word	0x20001ca0
 801d690:	200017c8 	.word	0x200017c8
 801d694:	200017c4 	.word	0x200017c4
 801d698:	20001cac 	.word	0x20001cac
 801d69c:	20001ca8 	.word	0x20001ca8
 801d6a0:	e000ed04 	.word	0xe000ed04

0801d6a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801d6a4:	b480      	push	{r7}
 801d6a6:	b083      	sub	sp, #12
 801d6a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801d6aa:	4b05      	ldr	r3, [pc, #20]	; (801d6c0 <xTaskGetTickCount+0x1c>)
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801d6b0:	687b      	ldr	r3, [r7, #4]
}
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	370c      	adds	r7, #12
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6bc:	4770      	bx	lr
 801d6be:	bf00      	nop
 801d6c0:	20001c9c 	.word	0x20001c9c

0801d6c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b086      	sub	sp, #24
 801d6c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801d6ca:	2300      	movs	r3, #0
 801d6cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d6ce:	4b4f      	ldr	r3, [pc, #316]	; (801d80c <xTaskIncrementTick+0x148>)
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	f040 808f 	bne.w	801d7f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801d6d8:	4b4d      	ldr	r3, [pc, #308]	; (801d810 <xTaskIncrementTick+0x14c>)
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	3301      	adds	r3, #1
 801d6de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801d6e0:	4a4b      	ldr	r2, [pc, #300]	; (801d810 <xTaskIncrementTick+0x14c>)
 801d6e2:	693b      	ldr	r3, [r7, #16]
 801d6e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801d6e6:	693b      	ldr	r3, [r7, #16]
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d120      	bne.n	801d72e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801d6ec:	4b49      	ldr	r3, [pc, #292]	; (801d814 <xTaskIncrementTick+0x150>)
 801d6ee:	681b      	ldr	r3, [r3, #0]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d00a      	beq.n	801d70c <xTaskIncrementTick+0x48>
	__asm volatile
 801d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d6fa:	f383 8811 	msr	BASEPRI, r3
 801d6fe:	f3bf 8f6f 	isb	sy
 801d702:	f3bf 8f4f 	dsb	sy
 801d706:	603b      	str	r3, [r7, #0]
}
 801d708:	bf00      	nop
 801d70a:	e7fe      	b.n	801d70a <xTaskIncrementTick+0x46>
 801d70c:	4b41      	ldr	r3, [pc, #260]	; (801d814 <xTaskIncrementTick+0x150>)
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	60fb      	str	r3, [r7, #12]
 801d712:	4b41      	ldr	r3, [pc, #260]	; (801d818 <xTaskIncrementTick+0x154>)
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	4a3f      	ldr	r2, [pc, #252]	; (801d814 <xTaskIncrementTick+0x150>)
 801d718:	6013      	str	r3, [r2, #0]
 801d71a:	4a3f      	ldr	r2, [pc, #252]	; (801d818 <xTaskIncrementTick+0x154>)
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	6013      	str	r3, [r2, #0]
 801d720:	4b3e      	ldr	r3, [pc, #248]	; (801d81c <xTaskIncrementTick+0x158>)
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	3301      	adds	r3, #1
 801d726:	4a3d      	ldr	r2, [pc, #244]	; (801d81c <xTaskIncrementTick+0x158>)
 801d728:	6013      	str	r3, [r2, #0]
 801d72a:	f000 fad1 	bl	801dcd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801d72e:	4b3c      	ldr	r3, [pc, #240]	; (801d820 <xTaskIncrementTick+0x15c>)
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	693a      	ldr	r2, [r7, #16]
 801d734:	429a      	cmp	r2, r3
 801d736:	d349      	bcc.n	801d7cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d738:	4b36      	ldr	r3, [pc, #216]	; (801d814 <xTaskIncrementTick+0x150>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d104      	bne.n	801d74c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d742:	4b37      	ldr	r3, [pc, #220]	; (801d820 <xTaskIncrementTick+0x15c>)
 801d744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d748:	601a      	str	r2, [r3, #0]
					break;
 801d74a:	e03f      	b.n	801d7cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d74c:	4b31      	ldr	r3, [pc, #196]	; (801d814 <xTaskIncrementTick+0x150>)
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	68db      	ldr	r3, [r3, #12]
 801d752:	68db      	ldr	r3, [r3, #12]
 801d754:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801d756:	68bb      	ldr	r3, [r7, #8]
 801d758:	685b      	ldr	r3, [r3, #4]
 801d75a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801d75c:	693a      	ldr	r2, [r7, #16]
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	429a      	cmp	r2, r3
 801d762:	d203      	bcs.n	801d76c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801d764:	4a2e      	ldr	r2, [pc, #184]	; (801d820 <xTaskIncrementTick+0x15c>)
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801d76a:	e02f      	b.n	801d7cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d76c:	68bb      	ldr	r3, [r7, #8]
 801d76e:	3304      	adds	r3, #4
 801d770:	4618      	mov	r0, r3
 801d772:	f7fe ff99 	bl	801c6a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801d776:	68bb      	ldr	r3, [r7, #8]
 801d778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d004      	beq.n	801d788 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d77e:	68bb      	ldr	r3, [r7, #8]
 801d780:	3318      	adds	r3, #24
 801d782:	4618      	mov	r0, r3
 801d784:	f7fe ff90 	bl	801c6a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801d788:	68bb      	ldr	r3, [r7, #8]
 801d78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d78c:	4b25      	ldr	r3, [pc, #148]	; (801d824 <xTaskIncrementTick+0x160>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	429a      	cmp	r2, r3
 801d792:	d903      	bls.n	801d79c <xTaskIncrementTick+0xd8>
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d798:	4a22      	ldr	r2, [pc, #136]	; (801d824 <xTaskIncrementTick+0x160>)
 801d79a:	6013      	str	r3, [r2, #0]
 801d79c:	68bb      	ldr	r3, [r7, #8]
 801d79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d7a0:	4613      	mov	r3, r2
 801d7a2:	009b      	lsls	r3, r3, #2
 801d7a4:	4413      	add	r3, r2
 801d7a6:	009b      	lsls	r3, r3, #2
 801d7a8:	4a1f      	ldr	r2, [pc, #124]	; (801d828 <xTaskIncrementTick+0x164>)
 801d7aa:	441a      	add	r2, r3
 801d7ac:	68bb      	ldr	r3, [r7, #8]
 801d7ae:	3304      	adds	r3, #4
 801d7b0:	4619      	mov	r1, r3
 801d7b2:	4610      	mov	r0, r2
 801d7b4:	f7fe ff1b 	bl	801c5ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801d7b8:	68bb      	ldr	r3, [r7, #8]
 801d7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d7bc:	4b1b      	ldr	r3, [pc, #108]	; (801d82c <xTaskIncrementTick+0x168>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d3b8      	bcc.n	801d738 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d7ca:	e7b5      	b.n	801d738 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801d7cc:	4b17      	ldr	r3, [pc, #92]	; (801d82c <xTaskIncrementTick+0x168>)
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d7d2:	4915      	ldr	r1, [pc, #84]	; (801d828 <xTaskIncrementTick+0x164>)
 801d7d4:	4613      	mov	r3, r2
 801d7d6:	009b      	lsls	r3, r3, #2
 801d7d8:	4413      	add	r3, r2
 801d7da:	009b      	lsls	r3, r3, #2
 801d7dc:	440b      	add	r3, r1
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	2b01      	cmp	r3, #1
 801d7e2:	d901      	bls.n	801d7e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801d7e4:	2301      	movs	r3, #1
 801d7e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801d7e8:	4b11      	ldr	r3, [pc, #68]	; (801d830 <xTaskIncrementTick+0x16c>)
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d007      	beq.n	801d800 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801d7f0:	2301      	movs	r3, #1
 801d7f2:	617b      	str	r3, [r7, #20]
 801d7f4:	e004      	b.n	801d800 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801d7f6:	4b0f      	ldr	r3, [pc, #60]	; (801d834 <xTaskIncrementTick+0x170>)
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	3301      	adds	r3, #1
 801d7fc:	4a0d      	ldr	r2, [pc, #52]	; (801d834 <xTaskIncrementTick+0x170>)
 801d7fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801d800:	697b      	ldr	r3, [r7, #20]
}
 801d802:	4618      	mov	r0, r3
 801d804:	3718      	adds	r7, #24
 801d806:	46bd      	mov	sp, r7
 801d808:	bd80      	pop	{r7, pc}
 801d80a:	bf00      	nop
 801d80c:	20001cc0 	.word	0x20001cc0
 801d810:	20001c9c 	.word	0x20001c9c
 801d814:	20001c50 	.word	0x20001c50
 801d818:	20001c54 	.word	0x20001c54
 801d81c:	20001cb0 	.word	0x20001cb0
 801d820:	20001cb8 	.word	0x20001cb8
 801d824:	20001ca0 	.word	0x20001ca0
 801d828:	200017c8 	.word	0x200017c8
 801d82c:	200017c4 	.word	0x200017c4
 801d830:	20001cac 	.word	0x20001cac
 801d834:	20001ca8 	.word	0x20001ca8

0801d838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801d838:	b480      	push	{r7}
 801d83a:	b085      	sub	sp, #20
 801d83c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801d83e:	4b28      	ldr	r3, [pc, #160]	; (801d8e0 <vTaskSwitchContext+0xa8>)
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d003      	beq.n	801d84e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801d846:	4b27      	ldr	r3, [pc, #156]	; (801d8e4 <vTaskSwitchContext+0xac>)
 801d848:	2201      	movs	r2, #1
 801d84a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801d84c:	e041      	b.n	801d8d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801d84e:	4b25      	ldr	r3, [pc, #148]	; (801d8e4 <vTaskSwitchContext+0xac>)
 801d850:	2200      	movs	r2, #0
 801d852:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d854:	4b24      	ldr	r3, [pc, #144]	; (801d8e8 <vTaskSwitchContext+0xb0>)
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	60fb      	str	r3, [r7, #12]
 801d85a:	e010      	b.n	801d87e <vTaskSwitchContext+0x46>
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d10a      	bne.n	801d878 <vTaskSwitchContext+0x40>
	__asm volatile
 801d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d866:	f383 8811 	msr	BASEPRI, r3
 801d86a:	f3bf 8f6f 	isb	sy
 801d86e:	f3bf 8f4f 	dsb	sy
 801d872:	607b      	str	r3, [r7, #4]
}
 801d874:	bf00      	nop
 801d876:	e7fe      	b.n	801d876 <vTaskSwitchContext+0x3e>
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	3b01      	subs	r3, #1
 801d87c:	60fb      	str	r3, [r7, #12]
 801d87e:	491b      	ldr	r1, [pc, #108]	; (801d8ec <vTaskSwitchContext+0xb4>)
 801d880:	68fa      	ldr	r2, [r7, #12]
 801d882:	4613      	mov	r3, r2
 801d884:	009b      	lsls	r3, r3, #2
 801d886:	4413      	add	r3, r2
 801d888:	009b      	lsls	r3, r3, #2
 801d88a:	440b      	add	r3, r1
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d0e4      	beq.n	801d85c <vTaskSwitchContext+0x24>
 801d892:	68fa      	ldr	r2, [r7, #12]
 801d894:	4613      	mov	r3, r2
 801d896:	009b      	lsls	r3, r3, #2
 801d898:	4413      	add	r3, r2
 801d89a:	009b      	lsls	r3, r3, #2
 801d89c:	4a13      	ldr	r2, [pc, #76]	; (801d8ec <vTaskSwitchContext+0xb4>)
 801d89e:	4413      	add	r3, r2
 801d8a0:	60bb      	str	r3, [r7, #8]
 801d8a2:	68bb      	ldr	r3, [r7, #8]
 801d8a4:	685b      	ldr	r3, [r3, #4]
 801d8a6:	685a      	ldr	r2, [r3, #4]
 801d8a8:	68bb      	ldr	r3, [r7, #8]
 801d8aa:	605a      	str	r2, [r3, #4]
 801d8ac:	68bb      	ldr	r3, [r7, #8]
 801d8ae:	685a      	ldr	r2, [r3, #4]
 801d8b0:	68bb      	ldr	r3, [r7, #8]
 801d8b2:	3308      	adds	r3, #8
 801d8b4:	429a      	cmp	r2, r3
 801d8b6:	d104      	bne.n	801d8c2 <vTaskSwitchContext+0x8a>
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	685b      	ldr	r3, [r3, #4]
 801d8bc:	685a      	ldr	r2, [r3, #4]
 801d8be:	68bb      	ldr	r3, [r7, #8]
 801d8c0:	605a      	str	r2, [r3, #4]
 801d8c2:	68bb      	ldr	r3, [r7, #8]
 801d8c4:	685b      	ldr	r3, [r3, #4]
 801d8c6:	68db      	ldr	r3, [r3, #12]
 801d8c8:	4a09      	ldr	r2, [pc, #36]	; (801d8f0 <vTaskSwitchContext+0xb8>)
 801d8ca:	6013      	str	r3, [r2, #0]
 801d8cc:	4a06      	ldr	r2, [pc, #24]	; (801d8e8 <vTaskSwitchContext+0xb0>)
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	6013      	str	r3, [r2, #0]
}
 801d8d2:	bf00      	nop
 801d8d4:	3714      	adds	r7, #20
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8dc:	4770      	bx	lr
 801d8de:	bf00      	nop
 801d8e0:	20001cc0 	.word	0x20001cc0
 801d8e4:	20001cac 	.word	0x20001cac
 801d8e8:	20001ca0 	.word	0x20001ca0
 801d8ec:	200017c8 	.word	0x200017c8
 801d8f0:	200017c4 	.word	0x200017c4

0801d8f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801d8f4:	b580      	push	{r7, lr}
 801d8f6:	b084      	sub	sp, #16
 801d8f8:	af00      	add	r7, sp, #0
 801d8fa:	6078      	str	r0, [r7, #4]
 801d8fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	2b00      	cmp	r3, #0
 801d902:	d10a      	bne.n	801d91a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801d904:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d908:	f383 8811 	msr	BASEPRI, r3
 801d90c:	f3bf 8f6f 	isb	sy
 801d910:	f3bf 8f4f 	dsb	sy
 801d914:	60fb      	str	r3, [r7, #12]
}
 801d916:	bf00      	nop
 801d918:	e7fe      	b.n	801d918 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801d91a:	4b07      	ldr	r3, [pc, #28]	; (801d938 <vTaskPlaceOnEventList+0x44>)
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	3318      	adds	r3, #24
 801d920:	4619      	mov	r1, r3
 801d922:	6878      	ldr	r0, [r7, #4]
 801d924:	f7fe fe87 	bl	801c636 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801d928:	2101      	movs	r1, #1
 801d92a:	6838      	ldr	r0, [r7, #0]
 801d92c:	f000 fa7c 	bl	801de28 <prvAddCurrentTaskToDelayedList>
}
 801d930:	bf00      	nop
 801d932:	3710      	adds	r7, #16
 801d934:	46bd      	mov	sp, r7
 801d936:	bd80      	pop	{r7, pc}
 801d938:	200017c4 	.word	0x200017c4

0801d93c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801d93c:	b580      	push	{r7, lr}
 801d93e:	b086      	sub	sp, #24
 801d940:	af00      	add	r7, sp, #0
 801d942:	60f8      	str	r0, [r7, #12]
 801d944:	60b9      	str	r1, [r7, #8]
 801d946:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801d948:	68fb      	ldr	r3, [r7, #12]
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d10a      	bne.n	801d964 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d952:	f383 8811 	msr	BASEPRI, r3
 801d956:	f3bf 8f6f 	isb	sy
 801d95a:	f3bf 8f4f 	dsb	sy
 801d95e:	617b      	str	r3, [r7, #20]
}
 801d960:	bf00      	nop
 801d962:	e7fe      	b.n	801d962 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801d964:	4b0a      	ldr	r3, [pc, #40]	; (801d990 <vTaskPlaceOnEventListRestricted+0x54>)
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	3318      	adds	r3, #24
 801d96a:	4619      	mov	r1, r3
 801d96c:	68f8      	ldr	r0, [r7, #12]
 801d96e:	f7fe fe3e 	bl	801c5ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	2b00      	cmp	r3, #0
 801d976:	d002      	beq.n	801d97e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801d978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d97c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801d97e:	6879      	ldr	r1, [r7, #4]
 801d980:	68b8      	ldr	r0, [r7, #8]
 801d982:	f000 fa51 	bl	801de28 <prvAddCurrentTaskToDelayedList>
	}
 801d986:	bf00      	nop
 801d988:	3718      	adds	r7, #24
 801d98a:	46bd      	mov	sp, r7
 801d98c:	bd80      	pop	{r7, pc}
 801d98e:	bf00      	nop
 801d990:	200017c4 	.word	0x200017c4

0801d994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801d994:	b580      	push	{r7, lr}
 801d996:	b086      	sub	sp, #24
 801d998:	af00      	add	r7, sp, #0
 801d99a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	68db      	ldr	r3, [r3, #12]
 801d9a0:	68db      	ldr	r3, [r3, #12]
 801d9a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801d9a4:	693b      	ldr	r3, [r7, #16]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d10a      	bne.n	801d9c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801d9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d9ae:	f383 8811 	msr	BASEPRI, r3
 801d9b2:	f3bf 8f6f 	isb	sy
 801d9b6:	f3bf 8f4f 	dsb	sy
 801d9ba:	60fb      	str	r3, [r7, #12]
}
 801d9bc:	bf00      	nop
 801d9be:	e7fe      	b.n	801d9be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801d9c0:	693b      	ldr	r3, [r7, #16]
 801d9c2:	3318      	adds	r3, #24
 801d9c4:	4618      	mov	r0, r3
 801d9c6:	f7fe fe6f 	bl	801c6a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d9ca:	4b1e      	ldr	r3, [pc, #120]	; (801da44 <xTaskRemoveFromEventList+0xb0>)
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d11d      	bne.n	801da0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801d9d2:	693b      	ldr	r3, [r7, #16]
 801d9d4:	3304      	adds	r3, #4
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7fe fe66 	bl	801c6a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801d9dc:	693b      	ldr	r3, [r7, #16]
 801d9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d9e0:	4b19      	ldr	r3, [pc, #100]	; (801da48 <xTaskRemoveFromEventList+0xb4>)
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	429a      	cmp	r2, r3
 801d9e6:	d903      	bls.n	801d9f0 <xTaskRemoveFromEventList+0x5c>
 801d9e8:	693b      	ldr	r3, [r7, #16]
 801d9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9ec:	4a16      	ldr	r2, [pc, #88]	; (801da48 <xTaskRemoveFromEventList+0xb4>)
 801d9ee:	6013      	str	r3, [r2, #0]
 801d9f0:	693b      	ldr	r3, [r7, #16]
 801d9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d9f4:	4613      	mov	r3, r2
 801d9f6:	009b      	lsls	r3, r3, #2
 801d9f8:	4413      	add	r3, r2
 801d9fa:	009b      	lsls	r3, r3, #2
 801d9fc:	4a13      	ldr	r2, [pc, #76]	; (801da4c <xTaskRemoveFromEventList+0xb8>)
 801d9fe:	441a      	add	r2, r3
 801da00:	693b      	ldr	r3, [r7, #16]
 801da02:	3304      	adds	r3, #4
 801da04:	4619      	mov	r1, r3
 801da06:	4610      	mov	r0, r2
 801da08:	f7fe fdf1 	bl	801c5ee <vListInsertEnd>
 801da0c:	e005      	b.n	801da1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801da0e:	693b      	ldr	r3, [r7, #16]
 801da10:	3318      	adds	r3, #24
 801da12:	4619      	mov	r1, r3
 801da14:	480e      	ldr	r0, [pc, #56]	; (801da50 <xTaskRemoveFromEventList+0xbc>)
 801da16:	f7fe fdea 	bl	801c5ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801da1a:	693b      	ldr	r3, [r7, #16]
 801da1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da1e:	4b0d      	ldr	r3, [pc, #52]	; (801da54 <xTaskRemoveFromEventList+0xc0>)
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da24:	429a      	cmp	r2, r3
 801da26:	d905      	bls.n	801da34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801da28:	2301      	movs	r3, #1
 801da2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801da2c:	4b0a      	ldr	r3, [pc, #40]	; (801da58 <xTaskRemoveFromEventList+0xc4>)
 801da2e:	2201      	movs	r2, #1
 801da30:	601a      	str	r2, [r3, #0]
 801da32:	e001      	b.n	801da38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801da34:	2300      	movs	r3, #0
 801da36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801da38:	697b      	ldr	r3, [r7, #20]
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	3718      	adds	r7, #24
 801da3e:	46bd      	mov	sp, r7
 801da40:	bd80      	pop	{r7, pc}
 801da42:	bf00      	nop
 801da44:	20001cc0 	.word	0x20001cc0
 801da48:	20001ca0 	.word	0x20001ca0
 801da4c:	200017c8 	.word	0x200017c8
 801da50:	20001c58 	.word	0x20001c58
 801da54:	200017c4 	.word	0x200017c4
 801da58:	20001cac 	.word	0x20001cac

0801da5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801da5c:	b480      	push	{r7}
 801da5e:	b083      	sub	sp, #12
 801da60:	af00      	add	r7, sp, #0
 801da62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801da64:	4b06      	ldr	r3, [pc, #24]	; (801da80 <vTaskInternalSetTimeOutState+0x24>)
 801da66:	681a      	ldr	r2, [r3, #0]
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801da6c:	4b05      	ldr	r3, [pc, #20]	; (801da84 <vTaskInternalSetTimeOutState+0x28>)
 801da6e:	681a      	ldr	r2, [r3, #0]
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	605a      	str	r2, [r3, #4]
}
 801da74:	bf00      	nop
 801da76:	370c      	adds	r7, #12
 801da78:	46bd      	mov	sp, r7
 801da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da7e:	4770      	bx	lr
 801da80:	20001cb0 	.word	0x20001cb0
 801da84:	20001c9c 	.word	0x20001c9c

0801da88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801da88:	b580      	push	{r7, lr}
 801da8a:	b088      	sub	sp, #32
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
 801da90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d10a      	bne.n	801daae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801da98:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da9c:	f383 8811 	msr	BASEPRI, r3
 801daa0:	f3bf 8f6f 	isb	sy
 801daa4:	f3bf 8f4f 	dsb	sy
 801daa8:	613b      	str	r3, [r7, #16]
}
 801daaa:	bf00      	nop
 801daac:	e7fe      	b.n	801daac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d10a      	bne.n	801daca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dab8:	f383 8811 	msr	BASEPRI, r3
 801dabc:	f3bf 8f6f 	isb	sy
 801dac0:	f3bf 8f4f 	dsb	sy
 801dac4:	60fb      	str	r3, [r7, #12]
}
 801dac6:	bf00      	nop
 801dac8:	e7fe      	b.n	801dac8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801daca:	f000 fe7b 	bl	801e7c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801dace:	4b1d      	ldr	r3, [pc, #116]	; (801db44 <xTaskCheckForTimeOut+0xbc>)
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	685b      	ldr	r3, [r3, #4]
 801dad8:	69ba      	ldr	r2, [r7, #24]
 801dada:	1ad3      	subs	r3, r2, r3
 801dadc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801dade:	683b      	ldr	r3, [r7, #0]
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dae6:	d102      	bne.n	801daee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801dae8:	2300      	movs	r3, #0
 801daea:	61fb      	str	r3, [r7, #28]
 801daec:	e023      	b.n	801db36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	681a      	ldr	r2, [r3, #0]
 801daf2:	4b15      	ldr	r3, [pc, #84]	; (801db48 <xTaskCheckForTimeOut+0xc0>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	429a      	cmp	r2, r3
 801daf8:	d007      	beq.n	801db0a <xTaskCheckForTimeOut+0x82>
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	685b      	ldr	r3, [r3, #4]
 801dafe:	69ba      	ldr	r2, [r7, #24]
 801db00:	429a      	cmp	r2, r3
 801db02:	d302      	bcc.n	801db0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801db04:	2301      	movs	r3, #1
 801db06:	61fb      	str	r3, [r7, #28]
 801db08:	e015      	b.n	801db36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801db0a:	683b      	ldr	r3, [r7, #0]
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	697a      	ldr	r2, [r7, #20]
 801db10:	429a      	cmp	r2, r3
 801db12:	d20b      	bcs.n	801db2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801db14:	683b      	ldr	r3, [r7, #0]
 801db16:	681a      	ldr	r2, [r3, #0]
 801db18:	697b      	ldr	r3, [r7, #20]
 801db1a:	1ad2      	subs	r2, r2, r3
 801db1c:	683b      	ldr	r3, [r7, #0]
 801db1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801db20:	6878      	ldr	r0, [r7, #4]
 801db22:	f7ff ff9b 	bl	801da5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801db26:	2300      	movs	r3, #0
 801db28:	61fb      	str	r3, [r7, #28]
 801db2a:	e004      	b.n	801db36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801db2c:	683b      	ldr	r3, [r7, #0]
 801db2e:	2200      	movs	r2, #0
 801db30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801db32:	2301      	movs	r3, #1
 801db34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801db36:	f000 fe75 	bl	801e824 <vPortExitCritical>

	return xReturn;
 801db3a:	69fb      	ldr	r3, [r7, #28]
}
 801db3c:	4618      	mov	r0, r3
 801db3e:	3720      	adds	r7, #32
 801db40:	46bd      	mov	sp, r7
 801db42:	bd80      	pop	{r7, pc}
 801db44:	20001c9c 	.word	0x20001c9c
 801db48:	20001cb0 	.word	0x20001cb0

0801db4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801db4c:	b480      	push	{r7}
 801db4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801db50:	4b03      	ldr	r3, [pc, #12]	; (801db60 <vTaskMissedYield+0x14>)
 801db52:	2201      	movs	r2, #1
 801db54:	601a      	str	r2, [r3, #0]
}
 801db56:	bf00      	nop
 801db58:	46bd      	mov	sp, r7
 801db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db5e:	4770      	bx	lr
 801db60:	20001cac 	.word	0x20001cac

0801db64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801db64:	b580      	push	{r7, lr}
 801db66:	b082      	sub	sp, #8
 801db68:	af00      	add	r7, sp, #0
 801db6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801db6c:	f000 f852 	bl	801dc14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801db70:	4b06      	ldr	r3, [pc, #24]	; (801db8c <prvIdleTask+0x28>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	2b01      	cmp	r3, #1
 801db76:	d9f9      	bls.n	801db6c <prvIdleTask+0x8>
			{
				taskYIELD();
 801db78:	4b05      	ldr	r3, [pc, #20]	; (801db90 <prvIdleTask+0x2c>)
 801db7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801db7e:	601a      	str	r2, [r3, #0]
 801db80:	f3bf 8f4f 	dsb	sy
 801db84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801db88:	e7f0      	b.n	801db6c <prvIdleTask+0x8>
 801db8a:	bf00      	nop
 801db8c:	200017c8 	.word	0x200017c8
 801db90:	e000ed04 	.word	0xe000ed04

0801db94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801db94:	b580      	push	{r7, lr}
 801db96:	b082      	sub	sp, #8
 801db98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801db9a:	2300      	movs	r3, #0
 801db9c:	607b      	str	r3, [r7, #4]
 801db9e:	e00c      	b.n	801dbba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801dba0:	687a      	ldr	r2, [r7, #4]
 801dba2:	4613      	mov	r3, r2
 801dba4:	009b      	lsls	r3, r3, #2
 801dba6:	4413      	add	r3, r2
 801dba8:	009b      	lsls	r3, r3, #2
 801dbaa:	4a12      	ldr	r2, [pc, #72]	; (801dbf4 <prvInitialiseTaskLists+0x60>)
 801dbac:	4413      	add	r3, r2
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7fe fcf0 	bl	801c594 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	3301      	adds	r3, #1
 801dbb8:	607b      	str	r3, [r7, #4]
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	2b37      	cmp	r3, #55	; 0x37
 801dbbe:	d9ef      	bls.n	801dba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801dbc0:	480d      	ldr	r0, [pc, #52]	; (801dbf8 <prvInitialiseTaskLists+0x64>)
 801dbc2:	f7fe fce7 	bl	801c594 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801dbc6:	480d      	ldr	r0, [pc, #52]	; (801dbfc <prvInitialiseTaskLists+0x68>)
 801dbc8:	f7fe fce4 	bl	801c594 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801dbcc:	480c      	ldr	r0, [pc, #48]	; (801dc00 <prvInitialiseTaskLists+0x6c>)
 801dbce:	f7fe fce1 	bl	801c594 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801dbd2:	480c      	ldr	r0, [pc, #48]	; (801dc04 <prvInitialiseTaskLists+0x70>)
 801dbd4:	f7fe fcde 	bl	801c594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801dbd8:	480b      	ldr	r0, [pc, #44]	; (801dc08 <prvInitialiseTaskLists+0x74>)
 801dbda:	f7fe fcdb 	bl	801c594 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801dbde:	4b0b      	ldr	r3, [pc, #44]	; (801dc0c <prvInitialiseTaskLists+0x78>)
 801dbe0:	4a05      	ldr	r2, [pc, #20]	; (801dbf8 <prvInitialiseTaskLists+0x64>)
 801dbe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801dbe4:	4b0a      	ldr	r3, [pc, #40]	; (801dc10 <prvInitialiseTaskLists+0x7c>)
 801dbe6:	4a05      	ldr	r2, [pc, #20]	; (801dbfc <prvInitialiseTaskLists+0x68>)
 801dbe8:	601a      	str	r2, [r3, #0]
}
 801dbea:	bf00      	nop
 801dbec:	3708      	adds	r7, #8
 801dbee:	46bd      	mov	sp, r7
 801dbf0:	bd80      	pop	{r7, pc}
 801dbf2:	bf00      	nop
 801dbf4:	200017c8 	.word	0x200017c8
 801dbf8:	20001c28 	.word	0x20001c28
 801dbfc:	20001c3c 	.word	0x20001c3c
 801dc00:	20001c58 	.word	0x20001c58
 801dc04:	20001c6c 	.word	0x20001c6c
 801dc08:	20001c84 	.word	0x20001c84
 801dc0c:	20001c50 	.word	0x20001c50
 801dc10:	20001c54 	.word	0x20001c54

0801dc14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801dc14:	b580      	push	{r7, lr}
 801dc16:	b082      	sub	sp, #8
 801dc18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801dc1a:	e019      	b.n	801dc50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801dc1c:	f000 fdd2 	bl	801e7c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801dc20:	4b10      	ldr	r3, [pc, #64]	; (801dc64 <prvCheckTasksWaitingTermination+0x50>)
 801dc22:	68db      	ldr	r3, [r3, #12]
 801dc24:	68db      	ldr	r3, [r3, #12]
 801dc26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	3304      	adds	r3, #4
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	f7fe fd3b 	bl	801c6a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801dc32:	4b0d      	ldr	r3, [pc, #52]	; (801dc68 <prvCheckTasksWaitingTermination+0x54>)
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	3b01      	subs	r3, #1
 801dc38:	4a0b      	ldr	r2, [pc, #44]	; (801dc68 <prvCheckTasksWaitingTermination+0x54>)
 801dc3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801dc3c:	4b0b      	ldr	r3, [pc, #44]	; (801dc6c <prvCheckTasksWaitingTermination+0x58>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	3b01      	subs	r3, #1
 801dc42:	4a0a      	ldr	r2, [pc, #40]	; (801dc6c <prvCheckTasksWaitingTermination+0x58>)
 801dc44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801dc46:	f000 fded 	bl	801e824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801dc4a:	6878      	ldr	r0, [r7, #4]
 801dc4c:	f000 f810 	bl	801dc70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801dc50:	4b06      	ldr	r3, [pc, #24]	; (801dc6c <prvCheckTasksWaitingTermination+0x58>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d1e1      	bne.n	801dc1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801dc58:	bf00      	nop
 801dc5a:	bf00      	nop
 801dc5c:	3708      	adds	r7, #8
 801dc5e:	46bd      	mov	sp, r7
 801dc60:	bd80      	pop	{r7, pc}
 801dc62:	bf00      	nop
 801dc64:	20001c6c 	.word	0x20001c6c
 801dc68:	20001c98 	.word	0x20001c98
 801dc6c:	20001c80 	.word	0x20001c80

0801dc70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801dc70:	b580      	push	{r7, lr}
 801dc72:	b084      	sub	sp, #16
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d108      	bne.n	801dc94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc86:	4618      	mov	r0, r3
 801dc88:	f000 ff8a 	bl	801eba0 <vPortFree>
				vPortFree( pxTCB );
 801dc8c:	6878      	ldr	r0, [r7, #4]
 801dc8e:	f000 ff87 	bl	801eba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801dc92:	e018      	b.n	801dcc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801dc9a:	2b01      	cmp	r3, #1
 801dc9c:	d103      	bne.n	801dca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801dc9e:	6878      	ldr	r0, [r7, #4]
 801dca0:	f000 ff7e 	bl	801eba0 <vPortFree>
	}
 801dca4:	e00f      	b.n	801dcc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801dcac:	2b02      	cmp	r3, #2
 801dcae:	d00a      	beq.n	801dcc6 <prvDeleteTCB+0x56>
	__asm volatile
 801dcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dcb4:	f383 8811 	msr	BASEPRI, r3
 801dcb8:	f3bf 8f6f 	isb	sy
 801dcbc:	f3bf 8f4f 	dsb	sy
 801dcc0:	60fb      	str	r3, [r7, #12]
}
 801dcc2:	bf00      	nop
 801dcc4:	e7fe      	b.n	801dcc4 <prvDeleteTCB+0x54>
	}
 801dcc6:	bf00      	nop
 801dcc8:	3710      	adds	r7, #16
 801dcca:	46bd      	mov	sp, r7
 801dccc:	bd80      	pop	{r7, pc}
	...

0801dcd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801dcd0:	b480      	push	{r7}
 801dcd2:	b083      	sub	sp, #12
 801dcd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801dcd6:	4b0c      	ldr	r3, [pc, #48]	; (801dd08 <prvResetNextTaskUnblockTime+0x38>)
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d104      	bne.n	801dcea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801dce0:	4b0a      	ldr	r3, [pc, #40]	; (801dd0c <prvResetNextTaskUnblockTime+0x3c>)
 801dce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dce6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801dce8:	e008      	b.n	801dcfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801dcea:	4b07      	ldr	r3, [pc, #28]	; (801dd08 <prvResetNextTaskUnblockTime+0x38>)
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	68db      	ldr	r3, [r3, #12]
 801dcf0:	68db      	ldr	r3, [r3, #12]
 801dcf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	4a04      	ldr	r2, [pc, #16]	; (801dd0c <prvResetNextTaskUnblockTime+0x3c>)
 801dcfa:	6013      	str	r3, [r2, #0]
}
 801dcfc:	bf00      	nop
 801dcfe:	370c      	adds	r7, #12
 801dd00:	46bd      	mov	sp, r7
 801dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd06:	4770      	bx	lr
 801dd08:	20001c50 	.word	0x20001c50
 801dd0c:	20001cb8 	.word	0x20001cb8

0801dd10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801dd10:	b480      	push	{r7}
 801dd12:	b083      	sub	sp, #12
 801dd14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801dd16:	4b0b      	ldr	r3, [pc, #44]	; (801dd44 <xTaskGetSchedulerState+0x34>)
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d102      	bne.n	801dd24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801dd1e:	2301      	movs	r3, #1
 801dd20:	607b      	str	r3, [r7, #4]
 801dd22:	e008      	b.n	801dd36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801dd24:	4b08      	ldr	r3, [pc, #32]	; (801dd48 <xTaskGetSchedulerState+0x38>)
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d102      	bne.n	801dd32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801dd2c:	2302      	movs	r3, #2
 801dd2e:	607b      	str	r3, [r7, #4]
 801dd30:	e001      	b.n	801dd36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801dd32:	2300      	movs	r3, #0
 801dd34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801dd36:	687b      	ldr	r3, [r7, #4]
	}
 801dd38:	4618      	mov	r0, r3
 801dd3a:	370c      	adds	r7, #12
 801dd3c:	46bd      	mov	sp, r7
 801dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd42:	4770      	bx	lr
 801dd44:	20001ca4 	.word	0x20001ca4
 801dd48:	20001cc0 	.word	0x20001cc0

0801dd4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801dd4c:	b580      	push	{r7, lr}
 801dd4e:	b086      	sub	sp, #24
 801dd50:	af00      	add	r7, sp, #0
 801dd52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801dd58:	2300      	movs	r3, #0
 801dd5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d056      	beq.n	801de10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801dd62:	4b2e      	ldr	r3, [pc, #184]	; (801de1c <xTaskPriorityDisinherit+0xd0>)
 801dd64:	681b      	ldr	r3, [r3, #0]
 801dd66:	693a      	ldr	r2, [r7, #16]
 801dd68:	429a      	cmp	r2, r3
 801dd6a:	d00a      	beq.n	801dd82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801dd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd70:	f383 8811 	msr	BASEPRI, r3
 801dd74:	f3bf 8f6f 	isb	sy
 801dd78:	f3bf 8f4f 	dsb	sy
 801dd7c:	60fb      	str	r3, [r7, #12]
}
 801dd7e:	bf00      	nop
 801dd80:	e7fe      	b.n	801dd80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801dd82:	693b      	ldr	r3, [r7, #16]
 801dd84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d10a      	bne.n	801dda0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801dd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd8e:	f383 8811 	msr	BASEPRI, r3
 801dd92:	f3bf 8f6f 	isb	sy
 801dd96:	f3bf 8f4f 	dsb	sy
 801dd9a:	60bb      	str	r3, [r7, #8]
}
 801dd9c:	bf00      	nop
 801dd9e:	e7fe      	b.n	801dd9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801dda0:	693b      	ldr	r3, [r7, #16]
 801dda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dda4:	1e5a      	subs	r2, r3, #1
 801dda6:	693b      	ldr	r3, [r7, #16]
 801dda8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801ddaa:	693b      	ldr	r3, [r7, #16]
 801ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ddae:	693b      	ldr	r3, [r7, #16]
 801ddb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ddb2:	429a      	cmp	r2, r3
 801ddb4:	d02c      	beq.n	801de10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801ddb6:	693b      	ldr	r3, [r7, #16]
 801ddb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d128      	bne.n	801de10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ddbe:	693b      	ldr	r3, [r7, #16]
 801ddc0:	3304      	adds	r3, #4
 801ddc2:	4618      	mov	r0, r3
 801ddc4:	f7fe fc70 	bl	801c6a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ddc8:	693b      	ldr	r3, [r7, #16]
 801ddca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ddcc:	693b      	ldr	r3, [r7, #16]
 801ddce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ddd0:	693b      	ldr	r3, [r7, #16]
 801ddd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ddd8:	693b      	ldr	r3, [r7, #16]
 801ddda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801dddc:	693b      	ldr	r3, [r7, #16]
 801ddde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dde0:	4b0f      	ldr	r3, [pc, #60]	; (801de20 <xTaskPriorityDisinherit+0xd4>)
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	429a      	cmp	r2, r3
 801dde6:	d903      	bls.n	801ddf0 <xTaskPriorityDisinherit+0xa4>
 801dde8:	693b      	ldr	r3, [r7, #16]
 801ddea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddec:	4a0c      	ldr	r2, [pc, #48]	; (801de20 <xTaskPriorityDisinherit+0xd4>)
 801ddee:	6013      	str	r3, [r2, #0]
 801ddf0:	693b      	ldr	r3, [r7, #16]
 801ddf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ddf4:	4613      	mov	r3, r2
 801ddf6:	009b      	lsls	r3, r3, #2
 801ddf8:	4413      	add	r3, r2
 801ddfa:	009b      	lsls	r3, r3, #2
 801ddfc:	4a09      	ldr	r2, [pc, #36]	; (801de24 <xTaskPriorityDisinherit+0xd8>)
 801ddfe:	441a      	add	r2, r3
 801de00:	693b      	ldr	r3, [r7, #16]
 801de02:	3304      	adds	r3, #4
 801de04:	4619      	mov	r1, r3
 801de06:	4610      	mov	r0, r2
 801de08:	f7fe fbf1 	bl	801c5ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801de0c:	2301      	movs	r3, #1
 801de0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801de10:	697b      	ldr	r3, [r7, #20]
	}
 801de12:	4618      	mov	r0, r3
 801de14:	3718      	adds	r7, #24
 801de16:	46bd      	mov	sp, r7
 801de18:	bd80      	pop	{r7, pc}
 801de1a:	bf00      	nop
 801de1c:	200017c4 	.word	0x200017c4
 801de20:	20001ca0 	.word	0x20001ca0
 801de24:	200017c8 	.word	0x200017c8

0801de28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801de28:	b580      	push	{r7, lr}
 801de2a:	b084      	sub	sp, #16
 801de2c:	af00      	add	r7, sp, #0
 801de2e:	6078      	str	r0, [r7, #4]
 801de30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801de32:	4b21      	ldr	r3, [pc, #132]	; (801deb8 <prvAddCurrentTaskToDelayedList+0x90>)
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801de38:	4b20      	ldr	r3, [pc, #128]	; (801debc <prvAddCurrentTaskToDelayedList+0x94>)
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	3304      	adds	r3, #4
 801de3e:	4618      	mov	r0, r3
 801de40:	f7fe fc32 	bl	801c6a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801de4a:	d10a      	bne.n	801de62 <prvAddCurrentTaskToDelayedList+0x3a>
 801de4c:	683b      	ldr	r3, [r7, #0]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d007      	beq.n	801de62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801de52:	4b1a      	ldr	r3, [pc, #104]	; (801debc <prvAddCurrentTaskToDelayedList+0x94>)
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	3304      	adds	r3, #4
 801de58:	4619      	mov	r1, r3
 801de5a:	4819      	ldr	r0, [pc, #100]	; (801dec0 <prvAddCurrentTaskToDelayedList+0x98>)
 801de5c:	f7fe fbc7 	bl	801c5ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801de60:	e026      	b.n	801deb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801de62:	68fa      	ldr	r2, [r7, #12]
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	4413      	add	r3, r2
 801de68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801de6a:	4b14      	ldr	r3, [pc, #80]	; (801debc <prvAddCurrentTaskToDelayedList+0x94>)
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	68ba      	ldr	r2, [r7, #8]
 801de70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801de72:	68ba      	ldr	r2, [r7, #8]
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	429a      	cmp	r2, r3
 801de78:	d209      	bcs.n	801de8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801de7a:	4b12      	ldr	r3, [pc, #72]	; (801dec4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801de7c:	681a      	ldr	r2, [r3, #0]
 801de7e:	4b0f      	ldr	r3, [pc, #60]	; (801debc <prvAddCurrentTaskToDelayedList+0x94>)
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	3304      	adds	r3, #4
 801de84:	4619      	mov	r1, r3
 801de86:	4610      	mov	r0, r2
 801de88:	f7fe fbd5 	bl	801c636 <vListInsert>
}
 801de8c:	e010      	b.n	801deb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801de8e:	4b0e      	ldr	r3, [pc, #56]	; (801dec8 <prvAddCurrentTaskToDelayedList+0xa0>)
 801de90:	681a      	ldr	r2, [r3, #0]
 801de92:	4b0a      	ldr	r3, [pc, #40]	; (801debc <prvAddCurrentTaskToDelayedList+0x94>)
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	3304      	adds	r3, #4
 801de98:	4619      	mov	r1, r3
 801de9a:	4610      	mov	r0, r2
 801de9c:	f7fe fbcb 	bl	801c636 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801dea0:	4b0a      	ldr	r3, [pc, #40]	; (801decc <prvAddCurrentTaskToDelayedList+0xa4>)
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	68ba      	ldr	r2, [r7, #8]
 801dea6:	429a      	cmp	r2, r3
 801dea8:	d202      	bcs.n	801deb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801deaa:	4a08      	ldr	r2, [pc, #32]	; (801decc <prvAddCurrentTaskToDelayedList+0xa4>)
 801deac:	68bb      	ldr	r3, [r7, #8]
 801deae:	6013      	str	r3, [r2, #0]
}
 801deb0:	bf00      	nop
 801deb2:	3710      	adds	r7, #16
 801deb4:	46bd      	mov	sp, r7
 801deb6:	bd80      	pop	{r7, pc}
 801deb8:	20001c9c 	.word	0x20001c9c
 801debc:	200017c4 	.word	0x200017c4
 801dec0:	20001c84 	.word	0x20001c84
 801dec4:	20001c54 	.word	0x20001c54
 801dec8:	20001c50 	.word	0x20001c50
 801decc:	20001cb8 	.word	0x20001cb8

0801ded0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801ded0:	b580      	push	{r7, lr}
 801ded2:	b08a      	sub	sp, #40	; 0x28
 801ded4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801ded6:	2300      	movs	r3, #0
 801ded8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801deda:	f000 fb07 	bl	801e4ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801dede:	4b1c      	ldr	r3, [pc, #112]	; (801df50 <xTimerCreateTimerTask+0x80>)
 801dee0:	681b      	ldr	r3, [r3, #0]
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d021      	beq.n	801df2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801dee6:	2300      	movs	r3, #0
 801dee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801deea:	2300      	movs	r3, #0
 801deec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801deee:	1d3a      	adds	r2, r7, #4
 801def0:	f107 0108 	add.w	r1, r7, #8
 801def4:	f107 030c 	add.w	r3, r7, #12
 801def8:	4618      	mov	r0, r3
 801defa:	f7fe fb31 	bl	801c560 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801defe:	6879      	ldr	r1, [r7, #4]
 801df00:	68bb      	ldr	r3, [r7, #8]
 801df02:	68fa      	ldr	r2, [r7, #12]
 801df04:	9202      	str	r2, [sp, #8]
 801df06:	9301      	str	r3, [sp, #4]
 801df08:	2302      	movs	r3, #2
 801df0a:	9300      	str	r3, [sp, #0]
 801df0c:	2300      	movs	r3, #0
 801df0e:	460a      	mov	r2, r1
 801df10:	4910      	ldr	r1, [pc, #64]	; (801df54 <xTimerCreateTimerTask+0x84>)
 801df12:	4811      	ldr	r0, [pc, #68]	; (801df58 <xTimerCreateTimerTask+0x88>)
 801df14:	f7ff f8de 	bl	801d0d4 <xTaskCreateStatic>
 801df18:	4603      	mov	r3, r0
 801df1a:	4a10      	ldr	r2, [pc, #64]	; (801df5c <xTimerCreateTimerTask+0x8c>)
 801df1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801df1e:	4b0f      	ldr	r3, [pc, #60]	; (801df5c <xTimerCreateTimerTask+0x8c>)
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d001      	beq.n	801df2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801df26:	2301      	movs	r3, #1
 801df28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801df2a:	697b      	ldr	r3, [r7, #20]
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	d10a      	bne.n	801df46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801df30:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df34:	f383 8811 	msr	BASEPRI, r3
 801df38:	f3bf 8f6f 	isb	sy
 801df3c:	f3bf 8f4f 	dsb	sy
 801df40:	613b      	str	r3, [r7, #16]
}
 801df42:	bf00      	nop
 801df44:	e7fe      	b.n	801df44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801df46:	697b      	ldr	r3, [r7, #20]
}
 801df48:	4618      	mov	r0, r3
 801df4a:	3718      	adds	r7, #24
 801df4c:	46bd      	mov	sp, r7
 801df4e:	bd80      	pop	{r7, pc}
 801df50:	20001cf4 	.word	0x20001cf4
 801df54:	08025570 	.word	0x08025570
 801df58:	0801e095 	.word	0x0801e095
 801df5c:	20001cf8 	.word	0x20001cf8

0801df60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801df60:	b580      	push	{r7, lr}
 801df62:	b08a      	sub	sp, #40	; 0x28
 801df64:	af00      	add	r7, sp, #0
 801df66:	60f8      	str	r0, [r7, #12]
 801df68:	60b9      	str	r1, [r7, #8]
 801df6a:	607a      	str	r2, [r7, #4]
 801df6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801df6e:	2300      	movs	r3, #0
 801df70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	2b00      	cmp	r3, #0
 801df76:	d10a      	bne.n	801df8e <xTimerGenericCommand+0x2e>
	__asm volatile
 801df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df7c:	f383 8811 	msr	BASEPRI, r3
 801df80:	f3bf 8f6f 	isb	sy
 801df84:	f3bf 8f4f 	dsb	sy
 801df88:	623b      	str	r3, [r7, #32]
}
 801df8a:	bf00      	nop
 801df8c:	e7fe      	b.n	801df8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801df8e:	4b1a      	ldr	r3, [pc, #104]	; (801dff8 <xTimerGenericCommand+0x98>)
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	2b00      	cmp	r3, #0
 801df94:	d02a      	beq.n	801dfec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801dfa2:	68bb      	ldr	r3, [r7, #8]
 801dfa4:	2b05      	cmp	r3, #5
 801dfa6:	dc18      	bgt.n	801dfda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801dfa8:	f7ff feb2 	bl	801dd10 <xTaskGetSchedulerState>
 801dfac:	4603      	mov	r3, r0
 801dfae:	2b02      	cmp	r3, #2
 801dfb0:	d109      	bne.n	801dfc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801dfb2:	4b11      	ldr	r3, [pc, #68]	; (801dff8 <xTimerGenericCommand+0x98>)
 801dfb4:	6818      	ldr	r0, [r3, #0]
 801dfb6:	f107 0110 	add.w	r1, r7, #16
 801dfba:	2300      	movs	r3, #0
 801dfbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfbe:	f7fe fca1 	bl	801c904 <xQueueGenericSend>
 801dfc2:	6278      	str	r0, [r7, #36]	; 0x24
 801dfc4:	e012      	b.n	801dfec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801dfc6:	4b0c      	ldr	r3, [pc, #48]	; (801dff8 <xTimerGenericCommand+0x98>)
 801dfc8:	6818      	ldr	r0, [r3, #0]
 801dfca:	f107 0110 	add.w	r1, r7, #16
 801dfce:	2300      	movs	r3, #0
 801dfd0:	2200      	movs	r2, #0
 801dfd2:	f7fe fc97 	bl	801c904 <xQueueGenericSend>
 801dfd6:	6278      	str	r0, [r7, #36]	; 0x24
 801dfd8:	e008      	b.n	801dfec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801dfda:	4b07      	ldr	r3, [pc, #28]	; (801dff8 <xTimerGenericCommand+0x98>)
 801dfdc:	6818      	ldr	r0, [r3, #0]
 801dfde:	f107 0110 	add.w	r1, r7, #16
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	683a      	ldr	r2, [r7, #0]
 801dfe6:	f7fe fd8b 	bl	801cb00 <xQueueGenericSendFromISR>
 801dfea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dfee:	4618      	mov	r0, r3
 801dff0:	3728      	adds	r7, #40	; 0x28
 801dff2:	46bd      	mov	sp, r7
 801dff4:	bd80      	pop	{r7, pc}
 801dff6:	bf00      	nop
 801dff8:	20001cf4 	.word	0x20001cf4

0801dffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b088      	sub	sp, #32
 801e000:	af02      	add	r7, sp, #8
 801e002:	6078      	str	r0, [r7, #4]
 801e004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e006:	4b22      	ldr	r3, [pc, #136]	; (801e090 <prvProcessExpiredTimer+0x94>)
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	68db      	ldr	r3, [r3, #12]
 801e00c:	68db      	ldr	r3, [r3, #12]
 801e00e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e010:	697b      	ldr	r3, [r7, #20]
 801e012:	3304      	adds	r3, #4
 801e014:	4618      	mov	r0, r3
 801e016:	f7fe fb47 	bl	801c6a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e01a:	697b      	ldr	r3, [r7, #20]
 801e01c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e020:	f003 0304 	and.w	r3, r3, #4
 801e024:	2b00      	cmp	r3, #0
 801e026:	d022      	beq.n	801e06e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801e028:	697b      	ldr	r3, [r7, #20]
 801e02a:	699a      	ldr	r2, [r3, #24]
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	18d1      	adds	r1, r2, r3
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	683a      	ldr	r2, [r7, #0]
 801e034:	6978      	ldr	r0, [r7, #20]
 801e036:	f000 f8d1 	bl	801e1dc <prvInsertTimerInActiveList>
 801e03a:	4603      	mov	r3, r0
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d01f      	beq.n	801e080 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e040:	2300      	movs	r3, #0
 801e042:	9300      	str	r3, [sp, #0]
 801e044:	2300      	movs	r3, #0
 801e046:	687a      	ldr	r2, [r7, #4]
 801e048:	2100      	movs	r1, #0
 801e04a:	6978      	ldr	r0, [r7, #20]
 801e04c:	f7ff ff88 	bl	801df60 <xTimerGenericCommand>
 801e050:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801e052:	693b      	ldr	r3, [r7, #16]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d113      	bne.n	801e080 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801e058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e05c:	f383 8811 	msr	BASEPRI, r3
 801e060:	f3bf 8f6f 	isb	sy
 801e064:	f3bf 8f4f 	dsb	sy
 801e068:	60fb      	str	r3, [r7, #12]
}
 801e06a:	bf00      	nop
 801e06c:	e7fe      	b.n	801e06c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e06e:	697b      	ldr	r3, [r7, #20]
 801e070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e074:	f023 0301 	bic.w	r3, r3, #1
 801e078:	b2da      	uxtb	r2, r3
 801e07a:	697b      	ldr	r3, [r7, #20]
 801e07c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e080:	697b      	ldr	r3, [r7, #20]
 801e082:	6a1b      	ldr	r3, [r3, #32]
 801e084:	6978      	ldr	r0, [r7, #20]
 801e086:	4798      	blx	r3
}
 801e088:	bf00      	nop
 801e08a:	3718      	adds	r7, #24
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd80      	pop	{r7, pc}
 801e090:	20001cec 	.word	0x20001cec

0801e094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b084      	sub	sp, #16
 801e098:	af00      	add	r7, sp, #0
 801e09a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e09c:	f107 0308 	add.w	r3, r7, #8
 801e0a0:	4618      	mov	r0, r3
 801e0a2:	f000 f857 	bl	801e154 <prvGetNextExpireTime>
 801e0a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801e0a8:	68bb      	ldr	r3, [r7, #8]
 801e0aa:	4619      	mov	r1, r3
 801e0ac:	68f8      	ldr	r0, [r7, #12]
 801e0ae:	f000 f803 	bl	801e0b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801e0b2:	f000 f8d5 	bl	801e260 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e0b6:	e7f1      	b.n	801e09c <prvTimerTask+0x8>

0801e0b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801e0b8:	b580      	push	{r7, lr}
 801e0ba:	b084      	sub	sp, #16
 801e0bc:	af00      	add	r7, sp, #0
 801e0be:	6078      	str	r0, [r7, #4]
 801e0c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801e0c2:	f7ff fa43 	bl	801d54c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e0c6:	f107 0308 	add.w	r3, r7, #8
 801e0ca:	4618      	mov	r0, r3
 801e0cc:	f000 f866 	bl	801e19c <prvSampleTimeNow>
 801e0d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801e0d2:	68bb      	ldr	r3, [r7, #8]
 801e0d4:	2b00      	cmp	r3, #0
 801e0d6:	d130      	bne.n	801e13a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801e0d8:	683b      	ldr	r3, [r7, #0]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d10a      	bne.n	801e0f4 <prvProcessTimerOrBlockTask+0x3c>
 801e0de:	687a      	ldr	r2, [r7, #4]
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	429a      	cmp	r2, r3
 801e0e4:	d806      	bhi.n	801e0f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801e0e6:	f7ff fa3f 	bl	801d568 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801e0ea:	68f9      	ldr	r1, [r7, #12]
 801e0ec:	6878      	ldr	r0, [r7, #4]
 801e0ee:	f7ff ff85 	bl	801dffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801e0f2:	e024      	b.n	801e13e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801e0f4:	683b      	ldr	r3, [r7, #0]
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d008      	beq.n	801e10c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801e0fa:	4b13      	ldr	r3, [pc, #76]	; (801e148 <prvProcessTimerOrBlockTask+0x90>)
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	2b00      	cmp	r3, #0
 801e102:	d101      	bne.n	801e108 <prvProcessTimerOrBlockTask+0x50>
 801e104:	2301      	movs	r3, #1
 801e106:	e000      	b.n	801e10a <prvProcessTimerOrBlockTask+0x52>
 801e108:	2300      	movs	r3, #0
 801e10a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801e10c:	4b0f      	ldr	r3, [pc, #60]	; (801e14c <prvProcessTimerOrBlockTask+0x94>)
 801e10e:	6818      	ldr	r0, [r3, #0]
 801e110:	687a      	ldr	r2, [r7, #4]
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	1ad3      	subs	r3, r2, r3
 801e116:	683a      	ldr	r2, [r7, #0]
 801e118:	4619      	mov	r1, r3
 801e11a:	f7fe ffa7 	bl	801d06c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801e11e:	f7ff fa23 	bl	801d568 <xTaskResumeAll>
 801e122:	4603      	mov	r3, r0
 801e124:	2b00      	cmp	r3, #0
 801e126:	d10a      	bne.n	801e13e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801e128:	4b09      	ldr	r3, [pc, #36]	; (801e150 <prvProcessTimerOrBlockTask+0x98>)
 801e12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e12e:	601a      	str	r2, [r3, #0]
 801e130:	f3bf 8f4f 	dsb	sy
 801e134:	f3bf 8f6f 	isb	sy
}
 801e138:	e001      	b.n	801e13e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801e13a:	f7ff fa15 	bl	801d568 <xTaskResumeAll>
}
 801e13e:	bf00      	nop
 801e140:	3710      	adds	r7, #16
 801e142:	46bd      	mov	sp, r7
 801e144:	bd80      	pop	{r7, pc}
 801e146:	bf00      	nop
 801e148:	20001cf0 	.word	0x20001cf0
 801e14c:	20001cf4 	.word	0x20001cf4
 801e150:	e000ed04 	.word	0xe000ed04

0801e154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801e154:	b480      	push	{r7}
 801e156:	b085      	sub	sp, #20
 801e158:	af00      	add	r7, sp, #0
 801e15a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801e15c:	4b0e      	ldr	r3, [pc, #56]	; (801e198 <prvGetNextExpireTime+0x44>)
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	2b00      	cmp	r3, #0
 801e164:	d101      	bne.n	801e16a <prvGetNextExpireTime+0x16>
 801e166:	2201      	movs	r2, #1
 801e168:	e000      	b.n	801e16c <prvGetNextExpireTime+0x18>
 801e16a:	2200      	movs	r2, #0
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d105      	bne.n	801e184 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e178:	4b07      	ldr	r3, [pc, #28]	; (801e198 <prvGetNextExpireTime+0x44>)
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	68db      	ldr	r3, [r3, #12]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	60fb      	str	r3, [r7, #12]
 801e182:	e001      	b.n	801e188 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801e184:	2300      	movs	r3, #0
 801e186:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801e188:	68fb      	ldr	r3, [r7, #12]
}
 801e18a:	4618      	mov	r0, r3
 801e18c:	3714      	adds	r7, #20
 801e18e:	46bd      	mov	sp, r7
 801e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e194:	4770      	bx	lr
 801e196:	bf00      	nop
 801e198:	20001cec 	.word	0x20001cec

0801e19c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801e19c:	b580      	push	{r7, lr}
 801e19e:	b084      	sub	sp, #16
 801e1a0:	af00      	add	r7, sp, #0
 801e1a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801e1a4:	f7ff fa7e 	bl	801d6a4 <xTaskGetTickCount>
 801e1a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801e1aa:	4b0b      	ldr	r3, [pc, #44]	; (801e1d8 <prvSampleTimeNow+0x3c>)
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	68fa      	ldr	r2, [r7, #12]
 801e1b0:	429a      	cmp	r2, r3
 801e1b2:	d205      	bcs.n	801e1c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801e1b4:	f000 f936 	bl	801e424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	2201      	movs	r2, #1
 801e1bc:	601a      	str	r2, [r3, #0]
 801e1be:	e002      	b.n	801e1c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	2200      	movs	r2, #0
 801e1c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801e1c6:	4a04      	ldr	r2, [pc, #16]	; (801e1d8 <prvSampleTimeNow+0x3c>)
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801e1cc:	68fb      	ldr	r3, [r7, #12]
}
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	3710      	adds	r7, #16
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	bd80      	pop	{r7, pc}
 801e1d6:	bf00      	nop
 801e1d8:	20001cfc 	.word	0x20001cfc

0801e1dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801e1dc:	b580      	push	{r7, lr}
 801e1de:	b086      	sub	sp, #24
 801e1e0:	af00      	add	r7, sp, #0
 801e1e2:	60f8      	str	r0, [r7, #12]
 801e1e4:	60b9      	str	r1, [r7, #8]
 801e1e6:	607a      	str	r2, [r7, #4]
 801e1e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	68ba      	ldr	r2, [r7, #8]
 801e1f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	68fa      	ldr	r2, [r7, #12]
 801e1f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801e1fa:	68ba      	ldr	r2, [r7, #8]
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	429a      	cmp	r2, r3
 801e200:	d812      	bhi.n	801e228 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	683b      	ldr	r3, [r7, #0]
 801e206:	1ad2      	subs	r2, r2, r3
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	699b      	ldr	r3, [r3, #24]
 801e20c:	429a      	cmp	r2, r3
 801e20e:	d302      	bcc.n	801e216 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801e210:	2301      	movs	r3, #1
 801e212:	617b      	str	r3, [r7, #20]
 801e214:	e01b      	b.n	801e24e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801e216:	4b10      	ldr	r3, [pc, #64]	; (801e258 <prvInsertTimerInActiveList+0x7c>)
 801e218:	681a      	ldr	r2, [r3, #0]
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	3304      	adds	r3, #4
 801e21e:	4619      	mov	r1, r3
 801e220:	4610      	mov	r0, r2
 801e222:	f7fe fa08 	bl	801c636 <vListInsert>
 801e226:	e012      	b.n	801e24e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801e228:	687a      	ldr	r2, [r7, #4]
 801e22a:	683b      	ldr	r3, [r7, #0]
 801e22c:	429a      	cmp	r2, r3
 801e22e:	d206      	bcs.n	801e23e <prvInsertTimerInActiveList+0x62>
 801e230:	68ba      	ldr	r2, [r7, #8]
 801e232:	683b      	ldr	r3, [r7, #0]
 801e234:	429a      	cmp	r2, r3
 801e236:	d302      	bcc.n	801e23e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801e238:	2301      	movs	r3, #1
 801e23a:	617b      	str	r3, [r7, #20]
 801e23c:	e007      	b.n	801e24e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e23e:	4b07      	ldr	r3, [pc, #28]	; (801e25c <prvInsertTimerInActiveList+0x80>)
 801e240:	681a      	ldr	r2, [r3, #0]
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	3304      	adds	r3, #4
 801e246:	4619      	mov	r1, r3
 801e248:	4610      	mov	r0, r2
 801e24a:	f7fe f9f4 	bl	801c636 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801e24e:	697b      	ldr	r3, [r7, #20]
}
 801e250:	4618      	mov	r0, r3
 801e252:	3718      	adds	r7, #24
 801e254:	46bd      	mov	sp, r7
 801e256:	bd80      	pop	{r7, pc}
 801e258:	20001cf0 	.word	0x20001cf0
 801e25c:	20001cec 	.word	0x20001cec

0801e260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801e260:	b580      	push	{r7, lr}
 801e262:	b08e      	sub	sp, #56	; 0x38
 801e264:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e266:	e0ca      	b.n	801e3fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	da18      	bge.n	801e2a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801e26e:	1d3b      	adds	r3, r7, #4
 801e270:	3304      	adds	r3, #4
 801e272:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801e274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e276:	2b00      	cmp	r3, #0
 801e278:	d10a      	bne.n	801e290 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e27e:	f383 8811 	msr	BASEPRI, r3
 801e282:	f3bf 8f6f 	isb	sy
 801e286:	f3bf 8f4f 	dsb	sy
 801e28a:	61fb      	str	r3, [r7, #28]
}
 801e28c:	bf00      	nop
 801e28e:	e7fe      	b.n	801e28e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e296:	6850      	ldr	r0, [r2, #4]
 801e298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e29a:	6892      	ldr	r2, [r2, #8]
 801e29c:	4611      	mov	r1, r2
 801e29e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	f2c0 80aa 	blt.w	801e3fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2ae:	695b      	ldr	r3, [r3, #20]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d004      	beq.n	801e2be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2b6:	3304      	adds	r3, #4
 801e2b8:	4618      	mov	r0, r3
 801e2ba:	f7fe f9f5 	bl	801c6a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e2be:	463b      	mov	r3, r7
 801e2c0:	4618      	mov	r0, r3
 801e2c2:	f7ff ff6b 	bl	801e19c <prvSampleTimeNow>
 801e2c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	2b09      	cmp	r3, #9
 801e2cc:	f200 8097 	bhi.w	801e3fe <prvProcessReceivedCommands+0x19e>
 801e2d0:	a201      	add	r2, pc, #4	; (adr r2, 801e2d8 <prvProcessReceivedCommands+0x78>)
 801e2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e2d6:	bf00      	nop
 801e2d8:	0801e301 	.word	0x0801e301
 801e2dc:	0801e301 	.word	0x0801e301
 801e2e0:	0801e301 	.word	0x0801e301
 801e2e4:	0801e375 	.word	0x0801e375
 801e2e8:	0801e389 	.word	0x0801e389
 801e2ec:	0801e3d3 	.word	0x0801e3d3
 801e2f0:	0801e301 	.word	0x0801e301
 801e2f4:	0801e301 	.word	0x0801e301
 801e2f8:	0801e375 	.word	0x0801e375
 801e2fc:	0801e389 	.word	0x0801e389
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e306:	f043 0301 	orr.w	r3, r3, #1
 801e30a:	b2da      	uxtb	r2, r3
 801e30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801e312:	68ba      	ldr	r2, [r7, #8]
 801e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e316:	699b      	ldr	r3, [r3, #24]
 801e318:	18d1      	adds	r1, r2, r3
 801e31a:	68bb      	ldr	r3, [r7, #8]
 801e31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e320:	f7ff ff5c 	bl	801e1dc <prvInsertTimerInActiveList>
 801e324:	4603      	mov	r3, r0
 801e326:	2b00      	cmp	r3, #0
 801e328:	d069      	beq.n	801e3fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e32c:	6a1b      	ldr	r3, [r3, #32]
 801e32e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e330:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e338:	f003 0304 	and.w	r3, r3, #4
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d05e      	beq.n	801e3fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801e340:	68ba      	ldr	r2, [r7, #8]
 801e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e344:	699b      	ldr	r3, [r3, #24]
 801e346:	441a      	add	r2, r3
 801e348:	2300      	movs	r3, #0
 801e34a:	9300      	str	r3, [sp, #0]
 801e34c:	2300      	movs	r3, #0
 801e34e:	2100      	movs	r1, #0
 801e350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e352:	f7ff fe05 	bl	801df60 <xTimerGenericCommand>
 801e356:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801e358:	6a3b      	ldr	r3, [r7, #32]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d14f      	bne.n	801e3fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801e35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e362:	f383 8811 	msr	BASEPRI, r3
 801e366:	f3bf 8f6f 	isb	sy
 801e36a:	f3bf 8f4f 	dsb	sy
 801e36e:	61bb      	str	r3, [r7, #24]
}
 801e370:	bf00      	nop
 801e372:	e7fe      	b.n	801e372 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e37a:	f023 0301 	bic.w	r3, r3, #1
 801e37e:	b2da      	uxtb	r2, r3
 801e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801e386:	e03a      	b.n	801e3fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e38a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e38e:	f043 0301 	orr.w	r3, r3, #1
 801e392:	b2da      	uxtb	r2, r3
 801e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801e39a:	68ba      	ldr	r2, [r7, #8]
 801e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e39e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3a2:	699b      	ldr	r3, [r3, #24]
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d10a      	bne.n	801e3be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e3ac:	f383 8811 	msr	BASEPRI, r3
 801e3b0:	f3bf 8f6f 	isb	sy
 801e3b4:	f3bf 8f4f 	dsb	sy
 801e3b8:	617b      	str	r3, [r7, #20]
}
 801e3ba:	bf00      	nop
 801e3bc:	e7fe      	b.n	801e3bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3c0:	699a      	ldr	r2, [r3, #24]
 801e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3c4:	18d1      	adds	r1, r2, r3
 801e3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e3cc:	f7ff ff06 	bl	801e1dc <prvInsertTimerInActiveList>
					break;
 801e3d0:	e015      	b.n	801e3fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e3d8:	f003 0302 	and.w	r3, r3, #2
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d103      	bne.n	801e3e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801e3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e3e2:	f000 fbdd 	bl	801eba0 <vPortFree>
 801e3e6:	e00a      	b.n	801e3fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e3ee:	f023 0301 	bic.w	r3, r3, #1
 801e3f2:	b2da      	uxtb	r2, r3
 801e3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801e3fa:	e000      	b.n	801e3fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801e3fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e3fe:	4b08      	ldr	r3, [pc, #32]	; (801e420 <prvProcessReceivedCommands+0x1c0>)
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	1d39      	adds	r1, r7, #4
 801e404:	2200      	movs	r2, #0
 801e406:	4618      	mov	r0, r3
 801e408:	f7fe fc16 	bl	801cc38 <xQueueReceive>
 801e40c:	4603      	mov	r3, r0
 801e40e:	2b00      	cmp	r3, #0
 801e410:	f47f af2a 	bne.w	801e268 <prvProcessReceivedCommands+0x8>
	}
}
 801e414:	bf00      	nop
 801e416:	bf00      	nop
 801e418:	3730      	adds	r7, #48	; 0x30
 801e41a:	46bd      	mov	sp, r7
 801e41c:	bd80      	pop	{r7, pc}
 801e41e:	bf00      	nop
 801e420:	20001cf4 	.word	0x20001cf4

0801e424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801e424:	b580      	push	{r7, lr}
 801e426:	b088      	sub	sp, #32
 801e428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801e42a:	e048      	b.n	801e4be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e42c:	4b2d      	ldr	r3, [pc, #180]	; (801e4e4 <prvSwitchTimerLists+0xc0>)
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	68db      	ldr	r3, [r3, #12]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e436:	4b2b      	ldr	r3, [pc, #172]	; (801e4e4 <prvSwitchTimerLists+0xc0>)
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	68db      	ldr	r3, [r3, #12]
 801e43c:	68db      	ldr	r3, [r3, #12]
 801e43e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	3304      	adds	r3, #4
 801e444:	4618      	mov	r0, r3
 801e446:	f7fe f92f 	bl	801c6a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	6a1b      	ldr	r3, [r3, #32]
 801e44e:	68f8      	ldr	r0, [r7, #12]
 801e450:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e458:	f003 0304 	and.w	r3, r3, #4
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d02e      	beq.n	801e4be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	699b      	ldr	r3, [r3, #24]
 801e464:	693a      	ldr	r2, [r7, #16]
 801e466:	4413      	add	r3, r2
 801e468:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801e46a:	68ba      	ldr	r2, [r7, #8]
 801e46c:	693b      	ldr	r3, [r7, #16]
 801e46e:	429a      	cmp	r2, r3
 801e470:	d90e      	bls.n	801e490 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	68ba      	ldr	r2, [r7, #8]
 801e476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	68fa      	ldr	r2, [r7, #12]
 801e47c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e47e:	4b19      	ldr	r3, [pc, #100]	; (801e4e4 <prvSwitchTimerLists+0xc0>)
 801e480:	681a      	ldr	r2, [r3, #0]
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	3304      	adds	r3, #4
 801e486:	4619      	mov	r1, r3
 801e488:	4610      	mov	r0, r2
 801e48a:	f7fe f8d4 	bl	801c636 <vListInsert>
 801e48e:	e016      	b.n	801e4be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e490:	2300      	movs	r3, #0
 801e492:	9300      	str	r3, [sp, #0]
 801e494:	2300      	movs	r3, #0
 801e496:	693a      	ldr	r2, [r7, #16]
 801e498:	2100      	movs	r1, #0
 801e49a:	68f8      	ldr	r0, [r7, #12]
 801e49c:	f7ff fd60 	bl	801df60 <xTimerGenericCommand>
 801e4a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d10a      	bne.n	801e4be <prvSwitchTimerLists+0x9a>
	__asm volatile
 801e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e4ac:	f383 8811 	msr	BASEPRI, r3
 801e4b0:	f3bf 8f6f 	isb	sy
 801e4b4:	f3bf 8f4f 	dsb	sy
 801e4b8:	603b      	str	r3, [r7, #0]
}
 801e4ba:	bf00      	nop
 801e4bc:	e7fe      	b.n	801e4bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801e4be:	4b09      	ldr	r3, [pc, #36]	; (801e4e4 <prvSwitchTimerLists+0xc0>)
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	d1b1      	bne.n	801e42c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801e4c8:	4b06      	ldr	r3, [pc, #24]	; (801e4e4 <prvSwitchTimerLists+0xc0>)
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801e4ce:	4b06      	ldr	r3, [pc, #24]	; (801e4e8 <prvSwitchTimerLists+0xc4>)
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	4a04      	ldr	r2, [pc, #16]	; (801e4e4 <prvSwitchTimerLists+0xc0>)
 801e4d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801e4d6:	4a04      	ldr	r2, [pc, #16]	; (801e4e8 <prvSwitchTimerLists+0xc4>)
 801e4d8:	697b      	ldr	r3, [r7, #20]
 801e4da:	6013      	str	r3, [r2, #0]
}
 801e4dc:	bf00      	nop
 801e4de:	3718      	adds	r7, #24
 801e4e0:	46bd      	mov	sp, r7
 801e4e2:	bd80      	pop	{r7, pc}
 801e4e4:	20001cec 	.word	0x20001cec
 801e4e8:	20001cf0 	.word	0x20001cf0

0801e4ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801e4ec:	b580      	push	{r7, lr}
 801e4ee:	b082      	sub	sp, #8
 801e4f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801e4f2:	f000 f967 	bl	801e7c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801e4f6:	4b15      	ldr	r3, [pc, #84]	; (801e54c <prvCheckForValidListAndQueue+0x60>)
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d120      	bne.n	801e540 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801e4fe:	4814      	ldr	r0, [pc, #80]	; (801e550 <prvCheckForValidListAndQueue+0x64>)
 801e500:	f7fe f848 	bl	801c594 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801e504:	4813      	ldr	r0, [pc, #76]	; (801e554 <prvCheckForValidListAndQueue+0x68>)
 801e506:	f7fe f845 	bl	801c594 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801e50a:	4b13      	ldr	r3, [pc, #76]	; (801e558 <prvCheckForValidListAndQueue+0x6c>)
 801e50c:	4a10      	ldr	r2, [pc, #64]	; (801e550 <prvCheckForValidListAndQueue+0x64>)
 801e50e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801e510:	4b12      	ldr	r3, [pc, #72]	; (801e55c <prvCheckForValidListAndQueue+0x70>)
 801e512:	4a10      	ldr	r2, [pc, #64]	; (801e554 <prvCheckForValidListAndQueue+0x68>)
 801e514:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801e516:	2300      	movs	r3, #0
 801e518:	9300      	str	r3, [sp, #0]
 801e51a:	4b11      	ldr	r3, [pc, #68]	; (801e560 <prvCheckForValidListAndQueue+0x74>)
 801e51c:	4a11      	ldr	r2, [pc, #68]	; (801e564 <prvCheckForValidListAndQueue+0x78>)
 801e51e:	2110      	movs	r1, #16
 801e520:	200a      	movs	r0, #10
 801e522:	f7fe f953 	bl	801c7cc <xQueueGenericCreateStatic>
 801e526:	4603      	mov	r3, r0
 801e528:	4a08      	ldr	r2, [pc, #32]	; (801e54c <prvCheckForValidListAndQueue+0x60>)
 801e52a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801e52c:	4b07      	ldr	r3, [pc, #28]	; (801e54c <prvCheckForValidListAndQueue+0x60>)
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	2b00      	cmp	r3, #0
 801e532:	d005      	beq.n	801e540 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801e534:	4b05      	ldr	r3, [pc, #20]	; (801e54c <prvCheckForValidListAndQueue+0x60>)
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	490b      	ldr	r1, [pc, #44]	; (801e568 <prvCheckForValidListAndQueue+0x7c>)
 801e53a:	4618      	mov	r0, r3
 801e53c:	f7fe fd6c 	bl	801d018 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801e540:	f000 f970 	bl	801e824 <vPortExitCritical>
}
 801e544:	bf00      	nop
 801e546:	46bd      	mov	sp, r7
 801e548:	bd80      	pop	{r7, pc}
 801e54a:	bf00      	nop
 801e54c:	20001cf4 	.word	0x20001cf4
 801e550:	20001cc4 	.word	0x20001cc4
 801e554:	20001cd8 	.word	0x20001cd8
 801e558:	20001cec 	.word	0x20001cec
 801e55c:	20001cf0 	.word	0x20001cf0
 801e560:	20001da0 	.word	0x20001da0
 801e564:	20001d00 	.word	0x20001d00
 801e568:	08025578 	.word	0x08025578

0801e56c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801e56c:	b480      	push	{r7}
 801e56e:	b085      	sub	sp, #20
 801e570:	af00      	add	r7, sp, #0
 801e572:	60f8      	str	r0, [r7, #12]
 801e574:	60b9      	str	r1, [r7, #8]
 801e576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	3b04      	subs	r3, #4
 801e57c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801e584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	3b04      	subs	r3, #4
 801e58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801e58c:	68bb      	ldr	r3, [r7, #8]
 801e58e:	f023 0201 	bic.w	r2, r3, #1
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801e596:	68fb      	ldr	r3, [r7, #12]
 801e598:	3b04      	subs	r3, #4
 801e59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801e59c:	4a0c      	ldr	r2, [pc, #48]	; (801e5d0 <pxPortInitialiseStack+0x64>)
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	3b14      	subs	r3, #20
 801e5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801e5a8:	687a      	ldr	r2, [r7, #4]
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	3b04      	subs	r3, #4
 801e5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	f06f 0202 	mvn.w	r2, #2
 801e5ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801e5bc:	68fb      	ldr	r3, [r7, #12]
 801e5be:	3b20      	subs	r3, #32
 801e5c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801e5c2:	68fb      	ldr	r3, [r7, #12]
}
 801e5c4:	4618      	mov	r0, r3
 801e5c6:	3714      	adds	r7, #20
 801e5c8:	46bd      	mov	sp, r7
 801e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ce:	4770      	bx	lr
 801e5d0:	0801e5d5 	.word	0x0801e5d5

0801e5d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801e5d4:	b480      	push	{r7}
 801e5d6:	b085      	sub	sp, #20
 801e5d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801e5da:	2300      	movs	r3, #0
 801e5dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801e5de:	4b12      	ldr	r3, [pc, #72]	; (801e628 <prvTaskExitError+0x54>)
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e5e6:	d00a      	beq.n	801e5fe <prvTaskExitError+0x2a>
	__asm volatile
 801e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e5ec:	f383 8811 	msr	BASEPRI, r3
 801e5f0:	f3bf 8f6f 	isb	sy
 801e5f4:	f3bf 8f4f 	dsb	sy
 801e5f8:	60fb      	str	r3, [r7, #12]
}
 801e5fa:	bf00      	nop
 801e5fc:	e7fe      	b.n	801e5fc <prvTaskExitError+0x28>
	__asm volatile
 801e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e602:	f383 8811 	msr	BASEPRI, r3
 801e606:	f3bf 8f6f 	isb	sy
 801e60a:	f3bf 8f4f 	dsb	sy
 801e60e:	60bb      	str	r3, [r7, #8]
}
 801e610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801e612:	bf00      	nop
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	2b00      	cmp	r3, #0
 801e618:	d0fc      	beq.n	801e614 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801e61a:	bf00      	nop
 801e61c:	bf00      	nop
 801e61e:	3714      	adds	r7, #20
 801e620:	46bd      	mov	sp, r7
 801e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e626:	4770      	bx	lr
 801e628:	200000c0 	.word	0x200000c0
 801e62c:	00000000 	.word	0x00000000

0801e630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801e630:	4b07      	ldr	r3, [pc, #28]	; (801e650 <pxCurrentTCBConst2>)
 801e632:	6819      	ldr	r1, [r3, #0]
 801e634:	6808      	ldr	r0, [r1, #0]
 801e636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e63a:	f380 8809 	msr	PSP, r0
 801e63e:	f3bf 8f6f 	isb	sy
 801e642:	f04f 0000 	mov.w	r0, #0
 801e646:	f380 8811 	msr	BASEPRI, r0
 801e64a:	4770      	bx	lr
 801e64c:	f3af 8000 	nop.w

0801e650 <pxCurrentTCBConst2>:
 801e650:	200017c4 	.word	0x200017c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801e654:	bf00      	nop
 801e656:	bf00      	nop

0801e658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801e658:	4808      	ldr	r0, [pc, #32]	; (801e67c <prvPortStartFirstTask+0x24>)
 801e65a:	6800      	ldr	r0, [r0, #0]
 801e65c:	6800      	ldr	r0, [r0, #0]
 801e65e:	f380 8808 	msr	MSP, r0
 801e662:	f04f 0000 	mov.w	r0, #0
 801e666:	f380 8814 	msr	CONTROL, r0
 801e66a:	b662      	cpsie	i
 801e66c:	b661      	cpsie	f
 801e66e:	f3bf 8f4f 	dsb	sy
 801e672:	f3bf 8f6f 	isb	sy
 801e676:	df00      	svc	0
 801e678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801e67a:	bf00      	nop
 801e67c:	e000ed08 	.word	0xe000ed08

0801e680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801e680:	b580      	push	{r7, lr}
 801e682:	b086      	sub	sp, #24
 801e684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801e686:	4b46      	ldr	r3, [pc, #280]	; (801e7a0 <xPortStartScheduler+0x120>)
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	4a46      	ldr	r2, [pc, #280]	; (801e7a4 <xPortStartScheduler+0x124>)
 801e68c:	4293      	cmp	r3, r2
 801e68e:	d10a      	bne.n	801e6a6 <xPortStartScheduler+0x26>
	__asm volatile
 801e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e694:	f383 8811 	msr	BASEPRI, r3
 801e698:	f3bf 8f6f 	isb	sy
 801e69c:	f3bf 8f4f 	dsb	sy
 801e6a0:	613b      	str	r3, [r7, #16]
}
 801e6a2:	bf00      	nop
 801e6a4:	e7fe      	b.n	801e6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801e6a6:	4b3e      	ldr	r3, [pc, #248]	; (801e7a0 <xPortStartScheduler+0x120>)
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	4a3f      	ldr	r2, [pc, #252]	; (801e7a8 <xPortStartScheduler+0x128>)
 801e6ac:	4293      	cmp	r3, r2
 801e6ae:	d10a      	bne.n	801e6c6 <xPortStartScheduler+0x46>
	__asm volatile
 801e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e6b4:	f383 8811 	msr	BASEPRI, r3
 801e6b8:	f3bf 8f6f 	isb	sy
 801e6bc:	f3bf 8f4f 	dsb	sy
 801e6c0:	60fb      	str	r3, [r7, #12]
}
 801e6c2:	bf00      	nop
 801e6c4:	e7fe      	b.n	801e6c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801e6c6:	4b39      	ldr	r3, [pc, #228]	; (801e7ac <xPortStartScheduler+0x12c>)
 801e6c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801e6ca:	697b      	ldr	r3, [r7, #20]
 801e6cc:	781b      	ldrb	r3, [r3, #0]
 801e6ce:	b2db      	uxtb	r3, r3
 801e6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801e6d2:	697b      	ldr	r3, [r7, #20]
 801e6d4:	22ff      	movs	r2, #255	; 0xff
 801e6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801e6d8:	697b      	ldr	r3, [r7, #20]
 801e6da:	781b      	ldrb	r3, [r3, #0]
 801e6dc:	b2db      	uxtb	r3, r3
 801e6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801e6e0:	78fb      	ldrb	r3, [r7, #3]
 801e6e2:	b2db      	uxtb	r3, r3
 801e6e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801e6e8:	b2da      	uxtb	r2, r3
 801e6ea:	4b31      	ldr	r3, [pc, #196]	; (801e7b0 <xPortStartScheduler+0x130>)
 801e6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801e6ee:	4b31      	ldr	r3, [pc, #196]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e6f0:	2207      	movs	r2, #7
 801e6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801e6f4:	e009      	b.n	801e70a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801e6f6:	4b2f      	ldr	r3, [pc, #188]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	3b01      	subs	r3, #1
 801e6fc:	4a2d      	ldr	r2, [pc, #180]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801e700:	78fb      	ldrb	r3, [r7, #3]
 801e702:	b2db      	uxtb	r3, r3
 801e704:	005b      	lsls	r3, r3, #1
 801e706:	b2db      	uxtb	r3, r3
 801e708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801e70a:	78fb      	ldrb	r3, [r7, #3]
 801e70c:	b2db      	uxtb	r3, r3
 801e70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e712:	2b80      	cmp	r3, #128	; 0x80
 801e714:	d0ef      	beq.n	801e6f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801e716:	4b27      	ldr	r3, [pc, #156]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	f1c3 0307 	rsb	r3, r3, #7
 801e71e:	2b04      	cmp	r3, #4
 801e720:	d00a      	beq.n	801e738 <xPortStartScheduler+0xb8>
	__asm volatile
 801e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e726:	f383 8811 	msr	BASEPRI, r3
 801e72a:	f3bf 8f6f 	isb	sy
 801e72e:	f3bf 8f4f 	dsb	sy
 801e732:	60bb      	str	r3, [r7, #8]
}
 801e734:	bf00      	nop
 801e736:	e7fe      	b.n	801e736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801e738:	4b1e      	ldr	r3, [pc, #120]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	021b      	lsls	r3, r3, #8
 801e73e:	4a1d      	ldr	r2, [pc, #116]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801e742:	4b1c      	ldr	r3, [pc, #112]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801e74a:	4a1a      	ldr	r2, [pc, #104]	; (801e7b4 <xPortStartScheduler+0x134>)
 801e74c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	b2da      	uxtb	r2, r3
 801e752:	697b      	ldr	r3, [r7, #20]
 801e754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801e756:	4b18      	ldr	r3, [pc, #96]	; (801e7b8 <xPortStartScheduler+0x138>)
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	4a17      	ldr	r2, [pc, #92]	; (801e7b8 <xPortStartScheduler+0x138>)
 801e75c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801e760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801e762:	4b15      	ldr	r3, [pc, #84]	; (801e7b8 <xPortStartScheduler+0x138>)
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	4a14      	ldr	r2, [pc, #80]	; (801e7b8 <xPortStartScheduler+0x138>)
 801e768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801e76c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801e76e:	f000 f8dd 	bl	801e92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801e772:	4b12      	ldr	r3, [pc, #72]	; (801e7bc <xPortStartScheduler+0x13c>)
 801e774:	2200      	movs	r2, #0
 801e776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801e778:	f000 f8fc 	bl	801e974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801e77c:	4b10      	ldr	r3, [pc, #64]	; (801e7c0 <xPortStartScheduler+0x140>)
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	4a0f      	ldr	r2, [pc, #60]	; (801e7c0 <xPortStartScheduler+0x140>)
 801e782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801e786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801e788:	f7ff ff66 	bl	801e658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801e78c:	f7ff f854 	bl	801d838 <vTaskSwitchContext>
	prvTaskExitError();
 801e790:	f7ff ff20 	bl	801e5d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801e794:	2300      	movs	r3, #0
}
 801e796:	4618      	mov	r0, r3
 801e798:	3718      	adds	r7, #24
 801e79a:	46bd      	mov	sp, r7
 801e79c:	bd80      	pop	{r7, pc}
 801e79e:	bf00      	nop
 801e7a0:	e000ed00 	.word	0xe000ed00
 801e7a4:	410fc271 	.word	0x410fc271
 801e7a8:	410fc270 	.word	0x410fc270
 801e7ac:	e000e400 	.word	0xe000e400
 801e7b0:	20001df0 	.word	0x20001df0
 801e7b4:	20001df4 	.word	0x20001df4
 801e7b8:	e000ed20 	.word	0xe000ed20
 801e7bc:	200000c0 	.word	0x200000c0
 801e7c0:	e000ef34 	.word	0xe000ef34

0801e7c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801e7c4:	b480      	push	{r7}
 801e7c6:	b083      	sub	sp, #12
 801e7c8:	af00      	add	r7, sp, #0
	__asm volatile
 801e7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e7ce:	f383 8811 	msr	BASEPRI, r3
 801e7d2:	f3bf 8f6f 	isb	sy
 801e7d6:	f3bf 8f4f 	dsb	sy
 801e7da:	607b      	str	r3, [r7, #4]
}
 801e7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801e7de:	4b0f      	ldr	r3, [pc, #60]	; (801e81c <vPortEnterCritical+0x58>)
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	3301      	adds	r3, #1
 801e7e4:	4a0d      	ldr	r2, [pc, #52]	; (801e81c <vPortEnterCritical+0x58>)
 801e7e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801e7e8:	4b0c      	ldr	r3, [pc, #48]	; (801e81c <vPortEnterCritical+0x58>)
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	2b01      	cmp	r3, #1
 801e7ee:	d10f      	bne.n	801e810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801e7f0:	4b0b      	ldr	r3, [pc, #44]	; (801e820 <vPortEnterCritical+0x5c>)
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	b2db      	uxtb	r3, r3
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d00a      	beq.n	801e810 <vPortEnterCritical+0x4c>
	__asm volatile
 801e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e7fe:	f383 8811 	msr	BASEPRI, r3
 801e802:	f3bf 8f6f 	isb	sy
 801e806:	f3bf 8f4f 	dsb	sy
 801e80a:	603b      	str	r3, [r7, #0]
}
 801e80c:	bf00      	nop
 801e80e:	e7fe      	b.n	801e80e <vPortEnterCritical+0x4a>
	}
}
 801e810:	bf00      	nop
 801e812:	370c      	adds	r7, #12
 801e814:	46bd      	mov	sp, r7
 801e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e81a:	4770      	bx	lr
 801e81c:	200000c0 	.word	0x200000c0
 801e820:	e000ed04 	.word	0xe000ed04

0801e824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801e824:	b480      	push	{r7}
 801e826:	b083      	sub	sp, #12
 801e828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801e82a:	4b12      	ldr	r3, [pc, #72]	; (801e874 <vPortExitCritical+0x50>)
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d10a      	bne.n	801e848 <vPortExitCritical+0x24>
	__asm volatile
 801e832:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e836:	f383 8811 	msr	BASEPRI, r3
 801e83a:	f3bf 8f6f 	isb	sy
 801e83e:	f3bf 8f4f 	dsb	sy
 801e842:	607b      	str	r3, [r7, #4]
}
 801e844:	bf00      	nop
 801e846:	e7fe      	b.n	801e846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801e848:	4b0a      	ldr	r3, [pc, #40]	; (801e874 <vPortExitCritical+0x50>)
 801e84a:	681b      	ldr	r3, [r3, #0]
 801e84c:	3b01      	subs	r3, #1
 801e84e:	4a09      	ldr	r2, [pc, #36]	; (801e874 <vPortExitCritical+0x50>)
 801e850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801e852:	4b08      	ldr	r3, [pc, #32]	; (801e874 <vPortExitCritical+0x50>)
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d105      	bne.n	801e866 <vPortExitCritical+0x42>
 801e85a:	2300      	movs	r3, #0
 801e85c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801e85e:	683b      	ldr	r3, [r7, #0]
 801e860:	f383 8811 	msr	BASEPRI, r3
}
 801e864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801e866:	bf00      	nop
 801e868:	370c      	adds	r7, #12
 801e86a:	46bd      	mov	sp, r7
 801e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e870:	4770      	bx	lr
 801e872:	bf00      	nop
 801e874:	200000c0 	.word	0x200000c0
	...

0801e880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801e880:	f3ef 8009 	mrs	r0, PSP
 801e884:	f3bf 8f6f 	isb	sy
 801e888:	4b15      	ldr	r3, [pc, #84]	; (801e8e0 <pxCurrentTCBConst>)
 801e88a:	681a      	ldr	r2, [r3, #0]
 801e88c:	f01e 0f10 	tst.w	lr, #16
 801e890:	bf08      	it	eq
 801e892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801e896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e89a:	6010      	str	r0, [r2, #0]
 801e89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801e8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801e8a4:	f380 8811 	msr	BASEPRI, r0
 801e8a8:	f3bf 8f4f 	dsb	sy
 801e8ac:	f3bf 8f6f 	isb	sy
 801e8b0:	f7fe ffc2 	bl	801d838 <vTaskSwitchContext>
 801e8b4:	f04f 0000 	mov.w	r0, #0
 801e8b8:	f380 8811 	msr	BASEPRI, r0
 801e8bc:	bc09      	pop	{r0, r3}
 801e8be:	6819      	ldr	r1, [r3, #0]
 801e8c0:	6808      	ldr	r0, [r1, #0]
 801e8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c6:	f01e 0f10 	tst.w	lr, #16
 801e8ca:	bf08      	it	eq
 801e8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801e8d0:	f380 8809 	msr	PSP, r0
 801e8d4:	f3bf 8f6f 	isb	sy
 801e8d8:	4770      	bx	lr
 801e8da:	bf00      	nop
 801e8dc:	f3af 8000 	nop.w

0801e8e0 <pxCurrentTCBConst>:
 801e8e0:	200017c4 	.word	0x200017c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801e8e4:	bf00      	nop
 801e8e6:	bf00      	nop

0801e8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801e8e8:	b580      	push	{r7, lr}
 801e8ea:	b082      	sub	sp, #8
 801e8ec:	af00      	add	r7, sp, #0
	__asm volatile
 801e8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e8f2:	f383 8811 	msr	BASEPRI, r3
 801e8f6:	f3bf 8f6f 	isb	sy
 801e8fa:	f3bf 8f4f 	dsb	sy
 801e8fe:	607b      	str	r3, [r7, #4]
}
 801e900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801e902:	f7fe fedf 	bl	801d6c4 <xTaskIncrementTick>
 801e906:	4603      	mov	r3, r0
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d003      	beq.n	801e914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801e90c:	4b06      	ldr	r3, [pc, #24]	; (801e928 <xPortSysTickHandler+0x40>)
 801e90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e912:	601a      	str	r2, [r3, #0]
 801e914:	2300      	movs	r3, #0
 801e916:	603b      	str	r3, [r7, #0]
	__asm volatile
 801e918:	683b      	ldr	r3, [r7, #0]
 801e91a:	f383 8811 	msr	BASEPRI, r3
}
 801e91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801e920:	bf00      	nop
 801e922:	3708      	adds	r7, #8
 801e924:	46bd      	mov	sp, r7
 801e926:	bd80      	pop	{r7, pc}
 801e928:	e000ed04 	.word	0xe000ed04

0801e92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801e92c:	b480      	push	{r7}
 801e92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801e930:	4b0b      	ldr	r3, [pc, #44]	; (801e960 <vPortSetupTimerInterrupt+0x34>)
 801e932:	2200      	movs	r2, #0
 801e934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801e936:	4b0b      	ldr	r3, [pc, #44]	; (801e964 <vPortSetupTimerInterrupt+0x38>)
 801e938:	2200      	movs	r2, #0
 801e93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801e93c:	4b0a      	ldr	r3, [pc, #40]	; (801e968 <vPortSetupTimerInterrupt+0x3c>)
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	4a0a      	ldr	r2, [pc, #40]	; (801e96c <vPortSetupTimerInterrupt+0x40>)
 801e942:	fba2 2303 	umull	r2, r3, r2, r3
 801e946:	099b      	lsrs	r3, r3, #6
 801e948:	4a09      	ldr	r2, [pc, #36]	; (801e970 <vPortSetupTimerInterrupt+0x44>)
 801e94a:	3b01      	subs	r3, #1
 801e94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801e94e:	4b04      	ldr	r3, [pc, #16]	; (801e960 <vPortSetupTimerInterrupt+0x34>)
 801e950:	2207      	movs	r2, #7
 801e952:	601a      	str	r2, [r3, #0]
}
 801e954:	bf00      	nop
 801e956:	46bd      	mov	sp, r7
 801e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e95c:	4770      	bx	lr
 801e95e:	bf00      	nop
 801e960:	e000e010 	.word	0xe000e010
 801e964:	e000e018 	.word	0xe000e018
 801e968:	20000054 	.word	0x20000054
 801e96c:	10624dd3 	.word	0x10624dd3
 801e970:	e000e014 	.word	0xe000e014

0801e974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801e974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801e984 <vPortEnableVFP+0x10>
 801e978:	6801      	ldr	r1, [r0, #0]
 801e97a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801e97e:	6001      	str	r1, [r0, #0]
 801e980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801e982:	bf00      	nop
 801e984:	e000ed88 	.word	0xe000ed88

0801e988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801e988:	b480      	push	{r7}
 801e98a:	b085      	sub	sp, #20
 801e98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801e98e:	f3ef 8305 	mrs	r3, IPSR
 801e992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	2b0f      	cmp	r3, #15
 801e998:	d914      	bls.n	801e9c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801e99a:	4a17      	ldr	r2, [pc, #92]	; (801e9f8 <vPortValidateInterruptPriority+0x70>)
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	4413      	add	r3, r2
 801e9a0:	781b      	ldrb	r3, [r3, #0]
 801e9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801e9a4:	4b15      	ldr	r3, [pc, #84]	; (801e9fc <vPortValidateInterruptPriority+0x74>)
 801e9a6:	781b      	ldrb	r3, [r3, #0]
 801e9a8:	7afa      	ldrb	r2, [r7, #11]
 801e9aa:	429a      	cmp	r2, r3
 801e9ac:	d20a      	bcs.n	801e9c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801e9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e9b2:	f383 8811 	msr	BASEPRI, r3
 801e9b6:	f3bf 8f6f 	isb	sy
 801e9ba:	f3bf 8f4f 	dsb	sy
 801e9be:	607b      	str	r3, [r7, #4]
}
 801e9c0:	bf00      	nop
 801e9c2:	e7fe      	b.n	801e9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801e9c4:	4b0e      	ldr	r3, [pc, #56]	; (801ea00 <vPortValidateInterruptPriority+0x78>)
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801e9cc:	4b0d      	ldr	r3, [pc, #52]	; (801ea04 <vPortValidateInterruptPriority+0x7c>)
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	429a      	cmp	r2, r3
 801e9d2:	d90a      	bls.n	801e9ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e9d8:	f383 8811 	msr	BASEPRI, r3
 801e9dc:	f3bf 8f6f 	isb	sy
 801e9e0:	f3bf 8f4f 	dsb	sy
 801e9e4:	603b      	str	r3, [r7, #0]
}
 801e9e6:	bf00      	nop
 801e9e8:	e7fe      	b.n	801e9e8 <vPortValidateInterruptPriority+0x60>
	}
 801e9ea:	bf00      	nop
 801e9ec:	3714      	adds	r7, #20
 801e9ee:	46bd      	mov	sp, r7
 801e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9f4:	4770      	bx	lr
 801e9f6:	bf00      	nop
 801e9f8:	e000e3f0 	.word	0xe000e3f0
 801e9fc:	20001df0 	.word	0x20001df0
 801ea00:	e000ed0c 	.word	0xe000ed0c
 801ea04:	20001df4 	.word	0x20001df4

0801ea08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801ea08:	b580      	push	{r7, lr}
 801ea0a:	b08a      	sub	sp, #40	; 0x28
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801ea10:	2300      	movs	r3, #0
 801ea12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801ea14:	f7fe fd9a 	bl	801d54c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801ea18:	4b5b      	ldr	r3, [pc, #364]	; (801eb88 <pvPortMalloc+0x180>)
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d101      	bne.n	801ea24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801ea20:	f000 f920 	bl	801ec64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801ea24:	4b59      	ldr	r3, [pc, #356]	; (801eb8c <pvPortMalloc+0x184>)
 801ea26:	681a      	ldr	r2, [r3, #0]
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	4013      	ands	r3, r2
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	f040 8093 	bne.w	801eb58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d01d      	beq.n	801ea74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801ea38:	2208      	movs	r2, #8
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	4413      	add	r3, r2
 801ea3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	f003 0307 	and.w	r3, r3, #7
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d014      	beq.n	801ea74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	f023 0307 	bic.w	r3, r3, #7
 801ea50:	3308      	adds	r3, #8
 801ea52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	f003 0307 	and.w	r3, r3, #7
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d00a      	beq.n	801ea74 <pvPortMalloc+0x6c>
	__asm volatile
 801ea5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ea62:	f383 8811 	msr	BASEPRI, r3
 801ea66:	f3bf 8f6f 	isb	sy
 801ea6a:	f3bf 8f4f 	dsb	sy
 801ea6e:	617b      	str	r3, [r7, #20]
}
 801ea70:	bf00      	nop
 801ea72:	e7fe      	b.n	801ea72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	d06e      	beq.n	801eb58 <pvPortMalloc+0x150>
 801ea7a:	4b45      	ldr	r3, [pc, #276]	; (801eb90 <pvPortMalloc+0x188>)
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	687a      	ldr	r2, [r7, #4]
 801ea80:	429a      	cmp	r2, r3
 801ea82:	d869      	bhi.n	801eb58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801ea84:	4b43      	ldr	r3, [pc, #268]	; (801eb94 <pvPortMalloc+0x18c>)
 801ea86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801ea88:	4b42      	ldr	r3, [pc, #264]	; (801eb94 <pvPortMalloc+0x18c>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ea8e:	e004      	b.n	801ea9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea9c:	685b      	ldr	r3, [r3, #4]
 801ea9e:	687a      	ldr	r2, [r7, #4]
 801eaa0:	429a      	cmp	r2, r3
 801eaa2:	d903      	bls.n	801eaac <pvPortMalloc+0xa4>
 801eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d1f1      	bne.n	801ea90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801eaac:	4b36      	ldr	r3, [pc, #216]	; (801eb88 <pvPortMalloc+0x180>)
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eab2:	429a      	cmp	r2, r3
 801eab4:	d050      	beq.n	801eb58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801eab6:	6a3b      	ldr	r3, [r7, #32]
 801eab8:	681b      	ldr	r3, [r3, #0]
 801eaba:	2208      	movs	r2, #8
 801eabc:	4413      	add	r3, r2
 801eabe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eac2:	681a      	ldr	r2, [r3, #0]
 801eac4:	6a3b      	ldr	r3, [r7, #32]
 801eac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801eac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaca:	685a      	ldr	r2, [r3, #4]
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	1ad2      	subs	r2, r2, r3
 801ead0:	2308      	movs	r3, #8
 801ead2:	005b      	lsls	r3, r3, #1
 801ead4:	429a      	cmp	r2, r3
 801ead6:	d91f      	bls.n	801eb18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801ead8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	4413      	add	r3, r2
 801eade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801eae0:	69bb      	ldr	r3, [r7, #24]
 801eae2:	f003 0307 	and.w	r3, r3, #7
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d00a      	beq.n	801eb00 <pvPortMalloc+0xf8>
	__asm volatile
 801eaea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eaee:	f383 8811 	msr	BASEPRI, r3
 801eaf2:	f3bf 8f6f 	isb	sy
 801eaf6:	f3bf 8f4f 	dsb	sy
 801eafa:	613b      	str	r3, [r7, #16]
}
 801eafc:	bf00      	nop
 801eafe:	e7fe      	b.n	801eafe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb02:	685a      	ldr	r2, [r3, #4]
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	1ad2      	subs	r2, r2, r3
 801eb08:	69bb      	ldr	r3, [r7, #24]
 801eb0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb0e:	687a      	ldr	r2, [r7, #4]
 801eb10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801eb12:	69b8      	ldr	r0, [r7, #24]
 801eb14:	f000 f908 	bl	801ed28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801eb18:	4b1d      	ldr	r3, [pc, #116]	; (801eb90 <pvPortMalloc+0x188>)
 801eb1a:	681a      	ldr	r2, [r3, #0]
 801eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb1e:	685b      	ldr	r3, [r3, #4]
 801eb20:	1ad3      	subs	r3, r2, r3
 801eb22:	4a1b      	ldr	r2, [pc, #108]	; (801eb90 <pvPortMalloc+0x188>)
 801eb24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801eb26:	4b1a      	ldr	r3, [pc, #104]	; (801eb90 <pvPortMalloc+0x188>)
 801eb28:	681a      	ldr	r2, [r3, #0]
 801eb2a:	4b1b      	ldr	r3, [pc, #108]	; (801eb98 <pvPortMalloc+0x190>)
 801eb2c:	681b      	ldr	r3, [r3, #0]
 801eb2e:	429a      	cmp	r2, r3
 801eb30:	d203      	bcs.n	801eb3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801eb32:	4b17      	ldr	r3, [pc, #92]	; (801eb90 <pvPortMalloc+0x188>)
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	4a18      	ldr	r2, [pc, #96]	; (801eb98 <pvPortMalloc+0x190>)
 801eb38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb3c:	685a      	ldr	r2, [r3, #4]
 801eb3e:	4b13      	ldr	r3, [pc, #76]	; (801eb8c <pvPortMalloc+0x184>)
 801eb40:	681b      	ldr	r3, [r3, #0]
 801eb42:	431a      	orrs	r2, r3
 801eb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb4a:	2200      	movs	r2, #0
 801eb4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801eb4e:	4b13      	ldr	r3, [pc, #76]	; (801eb9c <pvPortMalloc+0x194>)
 801eb50:	681b      	ldr	r3, [r3, #0]
 801eb52:	3301      	adds	r3, #1
 801eb54:	4a11      	ldr	r2, [pc, #68]	; (801eb9c <pvPortMalloc+0x194>)
 801eb56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801eb58:	f7fe fd06 	bl	801d568 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801eb5c:	69fb      	ldr	r3, [r7, #28]
 801eb5e:	f003 0307 	and.w	r3, r3, #7
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d00a      	beq.n	801eb7c <pvPortMalloc+0x174>
	__asm volatile
 801eb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eb6a:	f383 8811 	msr	BASEPRI, r3
 801eb6e:	f3bf 8f6f 	isb	sy
 801eb72:	f3bf 8f4f 	dsb	sy
 801eb76:	60fb      	str	r3, [r7, #12]
}
 801eb78:	bf00      	nop
 801eb7a:	e7fe      	b.n	801eb7a <pvPortMalloc+0x172>
	return pvReturn;
 801eb7c:	69fb      	ldr	r3, [r7, #28]
}
 801eb7e:	4618      	mov	r0, r3
 801eb80:	3728      	adds	r7, #40	; 0x28
 801eb82:	46bd      	mov	sp, r7
 801eb84:	bd80      	pop	{r7, pc}
 801eb86:	bf00      	nop
 801eb88:	20005a00 	.word	0x20005a00
 801eb8c:	20005a14 	.word	0x20005a14
 801eb90:	20005a04 	.word	0x20005a04
 801eb94:	200059f8 	.word	0x200059f8
 801eb98:	20005a08 	.word	0x20005a08
 801eb9c:	20005a0c 	.word	0x20005a0c

0801eba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801eba0:	b580      	push	{r7, lr}
 801eba2:	b086      	sub	sp, #24
 801eba4:	af00      	add	r7, sp, #0
 801eba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	d04d      	beq.n	801ec4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ebb2:	2308      	movs	r3, #8
 801ebb4:	425b      	negs	r3, r3
 801ebb6:	697a      	ldr	r2, [r7, #20]
 801ebb8:	4413      	add	r3, r2
 801ebba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ebbc:	697b      	ldr	r3, [r7, #20]
 801ebbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ebc0:	693b      	ldr	r3, [r7, #16]
 801ebc2:	685a      	ldr	r2, [r3, #4]
 801ebc4:	4b24      	ldr	r3, [pc, #144]	; (801ec58 <vPortFree+0xb8>)
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	4013      	ands	r3, r2
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d10a      	bne.n	801ebe4 <vPortFree+0x44>
	__asm volatile
 801ebce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebd2:	f383 8811 	msr	BASEPRI, r3
 801ebd6:	f3bf 8f6f 	isb	sy
 801ebda:	f3bf 8f4f 	dsb	sy
 801ebde:	60fb      	str	r3, [r7, #12]
}
 801ebe0:	bf00      	nop
 801ebe2:	e7fe      	b.n	801ebe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ebe4:	693b      	ldr	r3, [r7, #16]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d00a      	beq.n	801ec02 <vPortFree+0x62>
	__asm volatile
 801ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebf0:	f383 8811 	msr	BASEPRI, r3
 801ebf4:	f3bf 8f6f 	isb	sy
 801ebf8:	f3bf 8f4f 	dsb	sy
 801ebfc:	60bb      	str	r3, [r7, #8]
}
 801ebfe:	bf00      	nop
 801ec00:	e7fe      	b.n	801ec00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ec02:	693b      	ldr	r3, [r7, #16]
 801ec04:	685a      	ldr	r2, [r3, #4]
 801ec06:	4b14      	ldr	r3, [pc, #80]	; (801ec58 <vPortFree+0xb8>)
 801ec08:	681b      	ldr	r3, [r3, #0]
 801ec0a:	4013      	ands	r3, r2
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d01e      	beq.n	801ec4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ec10:	693b      	ldr	r3, [r7, #16]
 801ec12:	681b      	ldr	r3, [r3, #0]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d11a      	bne.n	801ec4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ec18:	693b      	ldr	r3, [r7, #16]
 801ec1a:	685a      	ldr	r2, [r3, #4]
 801ec1c:	4b0e      	ldr	r3, [pc, #56]	; (801ec58 <vPortFree+0xb8>)
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	43db      	mvns	r3, r3
 801ec22:	401a      	ands	r2, r3
 801ec24:	693b      	ldr	r3, [r7, #16]
 801ec26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ec28:	f7fe fc90 	bl	801d54c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ec2c:	693b      	ldr	r3, [r7, #16]
 801ec2e:	685a      	ldr	r2, [r3, #4]
 801ec30:	4b0a      	ldr	r3, [pc, #40]	; (801ec5c <vPortFree+0xbc>)
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	4413      	add	r3, r2
 801ec36:	4a09      	ldr	r2, [pc, #36]	; (801ec5c <vPortFree+0xbc>)
 801ec38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ec3a:	6938      	ldr	r0, [r7, #16]
 801ec3c:	f000 f874 	bl	801ed28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ec40:	4b07      	ldr	r3, [pc, #28]	; (801ec60 <vPortFree+0xc0>)
 801ec42:	681b      	ldr	r3, [r3, #0]
 801ec44:	3301      	adds	r3, #1
 801ec46:	4a06      	ldr	r2, [pc, #24]	; (801ec60 <vPortFree+0xc0>)
 801ec48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801ec4a:	f7fe fc8d 	bl	801d568 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ec4e:	bf00      	nop
 801ec50:	3718      	adds	r7, #24
 801ec52:	46bd      	mov	sp, r7
 801ec54:	bd80      	pop	{r7, pc}
 801ec56:	bf00      	nop
 801ec58:	20005a14 	.word	0x20005a14
 801ec5c:	20005a04 	.word	0x20005a04
 801ec60:	20005a10 	.word	0x20005a10

0801ec64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ec64:	b480      	push	{r7}
 801ec66:	b085      	sub	sp, #20
 801ec68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ec6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801ec6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ec70:	4b27      	ldr	r3, [pc, #156]	; (801ed10 <prvHeapInit+0xac>)
 801ec72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ec74:	68fb      	ldr	r3, [r7, #12]
 801ec76:	f003 0307 	and.w	r3, r3, #7
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	d00c      	beq.n	801ec98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	3307      	adds	r3, #7
 801ec82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ec84:	68fb      	ldr	r3, [r7, #12]
 801ec86:	f023 0307 	bic.w	r3, r3, #7
 801ec8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ec8c:	68ba      	ldr	r2, [r7, #8]
 801ec8e:	68fb      	ldr	r3, [r7, #12]
 801ec90:	1ad3      	subs	r3, r2, r3
 801ec92:	4a1f      	ldr	r2, [pc, #124]	; (801ed10 <prvHeapInit+0xac>)
 801ec94:	4413      	add	r3, r2
 801ec96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801ec98:	68fb      	ldr	r3, [r7, #12]
 801ec9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ec9c:	4a1d      	ldr	r2, [pc, #116]	; (801ed14 <prvHeapInit+0xb0>)
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801eca2:	4b1c      	ldr	r3, [pc, #112]	; (801ed14 <prvHeapInit+0xb0>)
 801eca4:	2200      	movs	r2, #0
 801eca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	68ba      	ldr	r2, [r7, #8]
 801ecac:	4413      	add	r3, r2
 801ecae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ecb0:	2208      	movs	r2, #8
 801ecb2:	68fb      	ldr	r3, [r7, #12]
 801ecb4:	1a9b      	subs	r3, r3, r2
 801ecb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	f023 0307 	bic.w	r3, r3, #7
 801ecbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ecc0:	68fb      	ldr	r3, [r7, #12]
 801ecc2:	4a15      	ldr	r2, [pc, #84]	; (801ed18 <prvHeapInit+0xb4>)
 801ecc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ecc6:	4b14      	ldr	r3, [pc, #80]	; (801ed18 <prvHeapInit+0xb4>)
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	2200      	movs	r2, #0
 801eccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ecce:	4b12      	ldr	r3, [pc, #72]	; (801ed18 <prvHeapInit+0xb4>)
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ecda:	683b      	ldr	r3, [r7, #0]
 801ecdc:	68fa      	ldr	r2, [r7, #12]
 801ecde:	1ad2      	subs	r2, r2, r3
 801ece0:	683b      	ldr	r3, [r7, #0]
 801ece2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ece4:	4b0c      	ldr	r3, [pc, #48]	; (801ed18 <prvHeapInit+0xb4>)
 801ece6:	681a      	ldr	r2, [r3, #0]
 801ece8:	683b      	ldr	r3, [r7, #0]
 801ecea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ecec:	683b      	ldr	r3, [r7, #0]
 801ecee:	685b      	ldr	r3, [r3, #4]
 801ecf0:	4a0a      	ldr	r2, [pc, #40]	; (801ed1c <prvHeapInit+0xb8>)
 801ecf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ecf4:	683b      	ldr	r3, [r7, #0]
 801ecf6:	685b      	ldr	r3, [r3, #4]
 801ecf8:	4a09      	ldr	r2, [pc, #36]	; (801ed20 <prvHeapInit+0xbc>)
 801ecfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ecfc:	4b09      	ldr	r3, [pc, #36]	; (801ed24 <prvHeapInit+0xc0>)
 801ecfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ed02:	601a      	str	r2, [r3, #0]
}
 801ed04:	bf00      	nop
 801ed06:	3714      	adds	r7, #20
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed0e:	4770      	bx	lr
 801ed10:	20001df8 	.word	0x20001df8
 801ed14:	200059f8 	.word	0x200059f8
 801ed18:	20005a00 	.word	0x20005a00
 801ed1c:	20005a08 	.word	0x20005a08
 801ed20:	20005a04 	.word	0x20005a04
 801ed24:	20005a14 	.word	0x20005a14

0801ed28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ed28:	b480      	push	{r7}
 801ed2a:	b085      	sub	sp, #20
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ed30:	4b28      	ldr	r3, [pc, #160]	; (801edd4 <prvInsertBlockIntoFreeList+0xac>)
 801ed32:	60fb      	str	r3, [r7, #12]
 801ed34:	e002      	b.n	801ed3c <prvInsertBlockIntoFreeList+0x14>
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	60fb      	str	r3, [r7, #12]
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	687a      	ldr	r2, [r7, #4]
 801ed42:	429a      	cmp	r2, r3
 801ed44:	d8f7      	bhi.n	801ed36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ed4a:	68fb      	ldr	r3, [r7, #12]
 801ed4c:	685b      	ldr	r3, [r3, #4]
 801ed4e:	68ba      	ldr	r2, [r7, #8]
 801ed50:	4413      	add	r3, r2
 801ed52:	687a      	ldr	r2, [r7, #4]
 801ed54:	429a      	cmp	r2, r3
 801ed56:	d108      	bne.n	801ed6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	685a      	ldr	r2, [r3, #4]
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	685b      	ldr	r3, [r3, #4]
 801ed60:	441a      	add	r2, r3
 801ed62:	68fb      	ldr	r3, [r7, #12]
 801ed64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ed66:	68fb      	ldr	r3, [r7, #12]
 801ed68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	685b      	ldr	r3, [r3, #4]
 801ed72:	68ba      	ldr	r2, [r7, #8]
 801ed74:	441a      	add	r2, r3
 801ed76:	68fb      	ldr	r3, [r7, #12]
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	429a      	cmp	r2, r3
 801ed7c:	d118      	bne.n	801edb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	681a      	ldr	r2, [r3, #0]
 801ed82:	4b15      	ldr	r3, [pc, #84]	; (801edd8 <prvInsertBlockIntoFreeList+0xb0>)
 801ed84:	681b      	ldr	r3, [r3, #0]
 801ed86:	429a      	cmp	r2, r3
 801ed88:	d00d      	beq.n	801eda6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	685a      	ldr	r2, [r3, #4]
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	685b      	ldr	r3, [r3, #4]
 801ed94:	441a      	add	r2, r3
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ed9a:	68fb      	ldr	r3, [r7, #12]
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	681a      	ldr	r2, [r3, #0]
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	601a      	str	r2, [r3, #0]
 801eda4:	e008      	b.n	801edb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801eda6:	4b0c      	ldr	r3, [pc, #48]	; (801edd8 <prvInsertBlockIntoFreeList+0xb0>)
 801eda8:	681a      	ldr	r2, [r3, #0]
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	601a      	str	r2, [r3, #0]
 801edae:	e003      	b.n	801edb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	681a      	ldr	r2, [r3, #0]
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801edb8:	68fa      	ldr	r2, [r7, #12]
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	429a      	cmp	r2, r3
 801edbe:	d002      	beq.n	801edc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801edc0:	68fb      	ldr	r3, [r7, #12]
 801edc2:	687a      	ldr	r2, [r7, #4]
 801edc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801edc6:	bf00      	nop
 801edc8:	3714      	adds	r7, #20
 801edca:	46bd      	mov	sp, r7
 801edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd0:	4770      	bx	lr
 801edd2:	bf00      	nop
 801edd4:	200059f8 	.word	0x200059f8
 801edd8:	20005a00 	.word	0x20005a00

0801eddc <__errno>:
 801eddc:	4b01      	ldr	r3, [pc, #4]	; (801ede4 <__errno+0x8>)
 801edde:	6818      	ldr	r0, [r3, #0]
 801ede0:	4770      	bx	lr
 801ede2:	bf00      	nop
 801ede4:	200000c4 	.word	0x200000c4

0801ede8 <__libc_init_array>:
 801ede8:	b570      	push	{r4, r5, r6, lr}
 801edea:	4d0d      	ldr	r5, [pc, #52]	; (801ee20 <__libc_init_array+0x38>)
 801edec:	4c0d      	ldr	r4, [pc, #52]	; (801ee24 <__libc_init_array+0x3c>)
 801edee:	1b64      	subs	r4, r4, r5
 801edf0:	10a4      	asrs	r4, r4, #2
 801edf2:	2600      	movs	r6, #0
 801edf4:	42a6      	cmp	r6, r4
 801edf6:	d109      	bne.n	801ee0c <__libc_init_array+0x24>
 801edf8:	4d0b      	ldr	r5, [pc, #44]	; (801ee28 <__libc_init_array+0x40>)
 801edfa:	4c0c      	ldr	r4, [pc, #48]	; (801ee2c <__libc_init_array+0x44>)
 801edfc:	f005 ff40 	bl	8024c80 <_init>
 801ee00:	1b64      	subs	r4, r4, r5
 801ee02:	10a4      	asrs	r4, r4, #2
 801ee04:	2600      	movs	r6, #0
 801ee06:	42a6      	cmp	r6, r4
 801ee08:	d105      	bne.n	801ee16 <__libc_init_array+0x2e>
 801ee0a:	bd70      	pop	{r4, r5, r6, pc}
 801ee0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee10:	4798      	blx	r3
 801ee12:	3601      	adds	r6, #1
 801ee14:	e7ee      	b.n	801edf4 <__libc_init_array+0xc>
 801ee16:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee1a:	4798      	blx	r3
 801ee1c:	3601      	adds	r6, #1
 801ee1e:	e7f2      	b.n	801ee06 <__libc_init_array+0x1e>
 801ee20:	08026084 	.word	0x08026084
 801ee24:	08026084 	.word	0x08026084
 801ee28:	08026084 	.word	0x08026084
 801ee2c:	08026088 	.word	0x08026088

0801ee30 <malloc>:
 801ee30:	4b02      	ldr	r3, [pc, #8]	; (801ee3c <malloc+0xc>)
 801ee32:	4601      	mov	r1, r0
 801ee34:	6818      	ldr	r0, [r3, #0]
 801ee36:	f000 b869 	b.w	801ef0c <_malloc_r>
 801ee3a:	bf00      	nop
 801ee3c:	200000c4 	.word	0x200000c4

0801ee40 <memcpy>:
 801ee40:	440a      	add	r2, r1
 801ee42:	4291      	cmp	r1, r2
 801ee44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ee48:	d100      	bne.n	801ee4c <memcpy+0xc>
 801ee4a:	4770      	bx	lr
 801ee4c:	b510      	push	{r4, lr}
 801ee4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ee52:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ee56:	4291      	cmp	r1, r2
 801ee58:	d1f9      	bne.n	801ee4e <memcpy+0xe>
 801ee5a:	bd10      	pop	{r4, pc}

0801ee5c <memset>:
 801ee5c:	4402      	add	r2, r0
 801ee5e:	4603      	mov	r3, r0
 801ee60:	4293      	cmp	r3, r2
 801ee62:	d100      	bne.n	801ee66 <memset+0xa>
 801ee64:	4770      	bx	lr
 801ee66:	f803 1b01 	strb.w	r1, [r3], #1
 801ee6a:	e7f9      	b.n	801ee60 <memset+0x4>

0801ee6c <_free_r>:
 801ee6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ee6e:	2900      	cmp	r1, #0
 801ee70:	d048      	beq.n	801ef04 <_free_r+0x98>
 801ee72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ee76:	9001      	str	r0, [sp, #4]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	f1a1 0404 	sub.w	r4, r1, #4
 801ee7e:	bfb8      	it	lt
 801ee80:	18e4      	addlt	r4, r4, r3
 801ee82:	f003 f8fd 	bl	8022080 <__malloc_lock>
 801ee86:	4a20      	ldr	r2, [pc, #128]	; (801ef08 <_free_r+0x9c>)
 801ee88:	9801      	ldr	r0, [sp, #4]
 801ee8a:	6813      	ldr	r3, [r2, #0]
 801ee8c:	4615      	mov	r5, r2
 801ee8e:	b933      	cbnz	r3, 801ee9e <_free_r+0x32>
 801ee90:	6063      	str	r3, [r4, #4]
 801ee92:	6014      	str	r4, [r2, #0]
 801ee94:	b003      	add	sp, #12
 801ee96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ee9a:	f003 b8f7 	b.w	802208c <__malloc_unlock>
 801ee9e:	42a3      	cmp	r3, r4
 801eea0:	d90b      	bls.n	801eeba <_free_r+0x4e>
 801eea2:	6821      	ldr	r1, [r4, #0]
 801eea4:	1862      	adds	r2, r4, r1
 801eea6:	4293      	cmp	r3, r2
 801eea8:	bf04      	itt	eq
 801eeaa:	681a      	ldreq	r2, [r3, #0]
 801eeac:	685b      	ldreq	r3, [r3, #4]
 801eeae:	6063      	str	r3, [r4, #4]
 801eeb0:	bf04      	itt	eq
 801eeb2:	1852      	addeq	r2, r2, r1
 801eeb4:	6022      	streq	r2, [r4, #0]
 801eeb6:	602c      	str	r4, [r5, #0]
 801eeb8:	e7ec      	b.n	801ee94 <_free_r+0x28>
 801eeba:	461a      	mov	r2, r3
 801eebc:	685b      	ldr	r3, [r3, #4]
 801eebe:	b10b      	cbz	r3, 801eec4 <_free_r+0x58>
 801eec0:	42a3      	cmp	r3, r4
 801eec2:	d9fa      	bls.n	801eeba <_free_r+0x4e>
 801eec4:	6811      	ldr	r1, [r2, #0]
 801eec6:	1855      	adds	r5, r2, r1
 801eec8:	42a5      	cmp	r5, r4
 801eeca:	d10b      	bne.n	801eee4 <_free_r+0x78>
 801eecc:	6824      	ldr	r4, [r4, #0]
 801eece:	4421      	add	r1, r4
 801eed0:	1854      	adds	r4, r2, r1
 801eed2:	42a3      	cmp	r3, r4
 801eed4:	6011      	str	r1, [r2, #0]
 801eed6:	d1dd      	bne.n	801ee94 <_free_r+0x28>
 801eed8:	681c      	ldr	r4, [r3, #0]
 801eeda:	685b      	ldr	r3, [r3, #4]
 801eedc:	6053      	str	r3, [r2, #4]
 801eede:	4421      	add	r1, r4
 801eee0:	6011      	str	r1, [r2, #0]
 801eee2:	e7d7      	b.n	801ee94 <_free_r+0x28>
 801eee4:	d902      	bls.n	801eeec <_free_r+0x80>
 801eee6:	230c      	movs	r3, #12
 801eee8:	6003      	str	r3, [r0, #0]
 801eeea:	e7d3      	b.n	801ee94 <_free_r+0x28>
 801eeec:	6825      	ldr	r5, [r4, #0]
 801eeee:	1961      	adds	r1, r4, r5
 801eef0:	428b      	cmp	r3, r1
 801eef2:	bf04      	itt	eq
 801eef4:	6819      	ldreq	r1, [r3, #0]
 801eef6:	685b      	ldreq	r3, [r3, #4]
 801eef8:	6063      	str	r3, [r4, #4]
 801eefa:	bf04      	itt	eq
 801eefc:	1949      	addeq	r1, r1, r5
 801eefe:	6021      	streq	r1, [r4, #0]
 801ef00:	6054      	str	r4, [r2, #4]
 801ef02:	e7c7      	b.n	801ee94 <_free_r+0x28>
 801ef04:	b003      	add	sp, #12
 801ef06:	bd30      	pop	{r4, r5, pc}
 801ef08:	20005a18 	.word	0x20005a18

0801ef0c <_malloc_r>:
 801ef0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef0e:	1ccd      	adds	r5, r1, #3
 801ef10:	f025 0503 	bic.w	r5, r5, #3
 801ef14:	3508      	adds	r5, #8
 801ef16:	2d0c      	cmp	r5, #12
 801ef18:	bf38      	it	cc
 801ef1a:	250c      	movcc	r5, #12
 801ef1c:	2d00      	cmp	r5, #0
 801ef1e:	4606      	mov	r6, r0
 801ef20:	db01      	blt.n	801ef26 <_malloc_r+0x1a>
 801ef22:	42a9      	cmp	r1, r5
 801ef24:	d903      	bls.n	801ef2e <_malloc_r+0x22>
 801ef26:	230c      	movs	r3, #12
 801ef28:	6033      	str	r3, [r6, #0]
 801ef2a:	2000      	movs	r0, #0
 801ef2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ef2e:	f003 f8a7 	bl	8022080 <__malloc_lock>
 801ef32:	4921      	ldr	r1, [pc, #132]	; (801efb8 <_malloc_r+0xac>)
 801ef34:	680a      	ldr	r2, [r1, #0]
 801ef36:	4614      	mov	r4, r2
 801ef38:	b99c      	cbnz	r4, 801ef62 <_malloc_r+0x56>
 801ef3a:	4f20      	ldr	r7, [pc, #128]	; (801efbc <_malloc_r+0xb0>)
 801ef3c:	683b      	ldr	r3, [r7, #0]
 801ef3e:	b923      	cbnz	r3, 801ef4a <_malloc_r+0x3e>
 801ef40:	4621      	mov	r1, r4
 801ef42:	4630      	mov	r0, r6
 801ef44:	f000 febe 	bl	801fcc4 <_sbrk_r>
 801ef48:	6038      	str	r0, [r7, #0]
 801ef4a:	4629      	mov	r1, r5
 801ef4c:	4630      	mov	r0, r6
 801ef4e:	f000 feb9 	bl	801fcc4 <_sbrk_r>
 801ef52:	1c43      	adds	r3, r0, #1
 801ef54:	d123      	bne.n	801ef9e <_malloc_r+0x92>
 801ef56:	230c      	movs	r3, #12
 801ef58:	6033      	str	r3, [r6, #0]
 801ef5a:	4630      	mov	r0, r6
 801ef5c:	f003 f896 	bl	802208c <__malloc_unlock>
 801ef60:	e7e3      	b.n	801ef2a <_malloc_r+0x1e>
 801ef62:	6823      	ldr	r3, [r4, #0]
 801ef64:	1b5b      	subs	r3, r3, r5
 801ef66:	d417      	bmi.n	801ef98 <_malloc_r+0x8c>
 801ef68:	2b0b      	cmp	r3, #11
 801ef6a:	d903      	bls.n	801ef74 <_malloc_r+0x68>
 801ef6c:	6023      	str	r3, [r4, #0]
 801ef6e:	441c      	add	r4, r3
 801ef70:	6025      	str	r5, [r4, #0]
 801ef72:	e004      	b.n	801ef7e <_malloc_r+0x72>
 801ef74:	6863      	ldr	r3, [r4, #4]
 801ef76:	42a2      	cmp	r2, r4
 801ef78:	bf0c      	ite	eq
 801ef7a:	600b      	streq	r3, [r1, #0]
 801ef7c:	6053      	strne	r3, [r2, #4]
 801ef7e:	4630      	mov	r0, r6
 801ef80:	f003 f884 	bl	802208c <__malloc_unlock>
 801ef84:	f104 000b 	add.w	r0, r4, #11
 801ef88:	1d23      	adds	r3, r4, #4
 801ef8a:	f020 0007 	bic.w	r0, r0, #7
 801ef8e:	1ac2      	subs	r2, r0, r3
 801ef90:	d0cc      	beq.n	801ef2c <_malloc_r+0x20>
 801ef92:	1a1b      	subs	r3, r3, r0
 801ef94:	50a3      	str	r3, [r4, r2]
 801ef96:	e7c9      	b.n	801ef2c <_malloc_r+0x20>
 801ef98:	4622      	mov	r2, r4
 801ef9a:	6864      	ldr	r4, [r4, #4]
 801ef9c:	e7cc      	b.n	801ef38 <_malloc_r+0x2c>
 801ef9e:	1cc4      	adds	r4, r0, #3
 801efa0:	f024 0403 	bic.w	r4, r4, #3
 801efa4:	42a0      	cmp	r0, r4
 801efa6:	d0e3      	beq.n	801ef70 <_malloc_r+0x64>
 801efa8:	1a21      	subs	r1, r4, r0
 801efaa:	4630      	mov	r0, r6
 801efac:	f000 fe8a 	bl	801fcc4 <_sbrk_r>
 801efb0:	3001      	adds	r0, #1
 801efb2:	d1dd      	bne.n	801ef70 <_malloc_r+0x64>
 801efb4:	e7cf      	b.n	801ef56 <_malloc_r+0x4a>
 801efb6:	bf00      	nop
 801efb8:	20005a18 	.word	0x20005a18
 801efbc:	20005a1c 	.word	0x20005a1c

0801efc0 <__cvt>:
 801efc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801efc4:	ec55 4b10 	vmov	r4, r5, d0
 801efc8:	2d00      	cmp	r5, #0
 801efca:	460e      	mov	r6, r1
 801efcc:	4619      	mov	r1, r3
 801efce:	462b      	mov	r3, r5
 801efd0:	bfbb      	ittet	lt
 801efd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801efd6:	461d      	movlt	r5, r3
 801efd8:	2300      	movge	r3, #0
 801efda:	232d      	movlt	r3, #45	; 0x2d
 801efdc:	700b      	strb	r3, [r1, #0]
 801efde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801efe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801efe4:	4691      	mov	r9, r2
 801efe6:	f023 0820 	bic.w	r8, r3, #32
 801efea:	bfbc      	itt	lt
 801efec:	4622      	movlt	r2, r4
 801efee:	4614      	movlt	r4, r2
 801eff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801eff4:	d005      	beq.n	801f002 <__cvt+0x42>
 801eff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801effa:	d100      	bne.n	801effe <__cvt+0x3e>
 801effc:	3601      	adds	r6, #1
 801effe:	2102      	movs	r1, #2
 801f000:	e000      	b.n	801f004 <__cvt+0x44>
 801f002:	2103      	movs	r1, #3
 801f004:	ab03      	add	r3, sp, #12
 801f006:	9301      	str	r3, [sp, #4]
 801f008:	ab02      	add	r3, sp, #8
 801f00a:	9300      	str	r3, [sp, #0]
 801f00c:	ec45 4b10 	vmov	d0, r4, r5
 801f010:	4653      	mov	r3, sl
 801f012:	4632      	mov	r2, r6
 801f014:	f001 feb0 	bl	8020d78 <_dtoa_r>
 801f018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f01c:	4607      	mov	r7, r0
 801f01e:	d102      	bne.n	801f026 <__cvt+0x66>
 801f020:	f019 0f01 	tst.w	r9, #1
 801f024:	d022      	beq.n	801f06c <__cvt+0xac>
 801f026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f02a:	eb07 0906 	add.w	r9, r7, r6
 801f02e:	d110      	bne.n	801f052 <__cvt+0x92>
 801f030:	783b      	ldrb	r3, [r7, #0]
 801f032:	2b30      	cmp	r3, #48	; 0x30
 801f034:	d10a      	bne.n	801f04c <__cvt+0x8c>
 801f036:	2200      	movs	r2, #0
 801f038:	2300      	movs	r3, #0
 801f03a:	4620      	mov	r0, r4
 801f03c:	4629      	mov	r1, r5
 801f03e:	f7e1 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 801f042:	b918      	cbnz	r0, 801f04c <__cvt+0x8c>
 801f044:	f1c6 0601 	rsb	r6, r6, #1
 801f048:	f8ca 6000 	str.w	r6, [sl]
 801f04c:	f8da 3000 	ldr.w	r3, [sl]
 801f050:	4499      	add	r9, r3
 801f052:	2200      	movs	r2, #0
 801f054:	2300      	movs	r3, #0
 801f056:	4620      	mov	r0, r4
 801f058:	4629      	mov	r1, r5
 801f05a:	f7e1 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 801f05e:	b108      	cbz	r0, 801f064 <__cvt+0xa4>
 801f060:	f8cd 900c 	str.w	r9, [sp, #12]
 801f064:	2230      	movs	r2, #48	; 0x30
 801f066:	9b03      	ldr	r3, [sp, #12]
 801f068:	454b      	cmp	r3, r9
 801f06a:	d307      	bcc.n	801f07c <__cvt+0xbc>
 801f06c:	9b03      	ldr	r3, [sp, #12]
 801f06e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f070:	1bdb      	subs	r3, r3, r7
 801f072:	4638      	mov	r0, r7
 801f074:	6013      	str	r3, [r2, #0]
 801f076:	b004      	add	sp, #16
 801f078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f07c:	1c59      	adds	r1, r3, #1
 801f07e:	9103      	str	r1, [sp, #12]
 801f080:	701a      	strb	r2, [r3, #0]
 801f082:	e7f0      	b.n	801f066 <__cvt+0xa6>

0801f084 <__exponent>:
 801f084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f086:	4603      	mov	r3, r0
 801f088:	2900      	cmp	r1, #0
 801f08a:	bfb8      	it	lt
 801f08c:	4249      	neglt	r1, r1
 801f08e:	f803 2b02 	strb.w	r2, [r3], #2
 801f092:	bfb4      	ite	lt
 801f094:	222d      	movlt	r2, #45	; 0x2d
 801f096:	222b      	movge	r2, #43	; 0x2b
 801f098:	2909      	cmp	r1, #9
 801f09a:	7042      	strb	r2, [r0, #1]
 801f09c:	dd2a      	ble.n	801f0f4 <__exponent+0x70>
 801f09e:	f10d 0407 	add.w	r4, sp, #7
 801f0a2:	46a4      	mov	ip, r4
 801f0a4:	270a      	movs	r7, #10
 801f0a6:	46a6      	mov	lr, r4
 801f0a8:	460a      	mov	r2, r1
 801f0aa:	fb91 f6f7 	sdiv	r6, r1, r7
 801f0ae:	fb07 1516 	mls	r5, r7, r6, r1
 801f0b2:	3530      	adds	r5, #48	; 0x30
 801f0b4:	2a63      	cmp	r2, #99	; 0x63
 801f0b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801f0ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f0be:	4631      	mov	r1, r6
 801f0c0:	dcf1      	bgt.n	801f0a6 <__exponent+0x22>
 801f0c2:	3130      	adds	r1, #48	; 0x30
 801f0c4:	f1ae 0502 	sub.w	r5, lr, #2
 801f0c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f0cc:	1c44      	adds	r4, r0, #1
 801f0ce:	4629      	mov	r1, r5
 801f0d0:	4561      	cmp	r1, ip
 801f0d2:	d30a      	bcc.n	801f0ea <__exponent+0x66>
 801f0d4:	f10d 0209 	add.w	r2, sp, #9
 801f0d8:	eba2 020e 	sub.w	r2, r2, lr
 801f0dc:	4565      	cmp	r5, ip
 801f0de:	bf88      	it	hi
 801f0e0:	2200      	movhi	r2, #0
 801f0e2:	4413      	add	r3, r2
 801f0e4:	1a18      	subs	r0, r3, r0
 801f0e6:	b003      	add	sp, #12
 801f0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f0ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f0f2:	e7ed      	b.n	801f0d0 <__exponent+0x4c>
 801f0f4:	2330      	movs	r3, #48	; 0x30
 801f0f6:	3130      	adds	r1, #48	; 0x30
 801f0f8:	7083      	strb	r3, [r0, #2]
 801f0fa:	70c1      	strb	r1, [r0, #3]
 801f0fc:	1d03      	adds	r3, r0, #4
 801f0fe:	e7f1      	b.n	801f0e4 <__exponent+0x60>

0801f100 <_printf_float>:
 801f100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f104:	ed2d 8b02 	vpush	{d8}
 801f108:	b08d      	sub	sp, #52	; 0x34
 801f10a:	460c      	mov	r4, r1
 801f10c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f110:	4616      	mov	r6, r2
 801f112:	461f      	mov	r7, r3
 801f114:	4605      	mov	r5, r0
 801f116:	f002 ff8b 	bl	8022030 <_localeconv_r>
 801f11a:	f8d0 a000 	ldr.w	sl, [r0]
 801f11e:	4650      	mov	r0, sl
 801f120:	f7e1 f856 	bl	80001d0 <strlen>
 801f124:	2300      	movs	r3, #0
 801f126:	930a      	str	r3, [sp, #40]	; 0x28
 801f128:	6823      	ldr	r3, [r4, #0]
 801f12a:	9305      	str	r3, [sp, #20]
 801f12c:	f8d8 3000 	ldr.w	r3, [r8]
 801f130:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f134:	3307      	adds	r3, #7
 801f136:	f023 0307 	bic.w	r3, r3, #7
 801f13a:	f103 0208 	add.w	r2, r3, #8
 801f13e:	f8c8 2000 	str.w	r2, [r8]
 801f142:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f146:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f14a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f14e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f152:	9307      	str	r3, [sp, #28]
 801f154:	f8cd 8018 	str.w	r8, [sp, #24]
 801f158:	ee08 0a10 	vmov	s16, r0
 801f15c:	4b9f      	ldr	r3, [pc, #636]	; (801f3dc <_printf_float+0x2dc>)
 801f15e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f166:	f7e1 fce1 	bl	8000b2c <__aeabi_dcmpun>
 801f16a:	bb88      	cbnz	r0, 801f1d0 <_printf_float+0xd0>
 801f16c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f170:	4b9a      	ldr	r3, [pc, #616]	; (801f3dc <_printf_float+0x2dc>)
 801f172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f176:	f7e1 fcbb 	bl	8000af0 <__aeabi_dcmple>
 801f17a:	bb48      	cbnz	r0, 801f1d0 <_printf_float+0xd0>
 801f17c:	2200      	movs	r2, #0
 801f17e:	2300      	movs	r3, #0
 801f180:	4640      	mov	r0, r8
 801f182:	4649      	mov	r1, r9
 801f184:	f7e1 fcaa 	bl	8000adc <__aeabi_dcmplt>
 801f188:	b110      	cbz	r0, 801f190 <_printf_float+0x90>
 801f18a:	232d      	movs	r3, #45	; 0x2d
 801f18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f190:	4b93      	ldr	r3, [pc, #588]	; (801f3e0 <_printf_float+0x2e0>)
 801f192:	4894      	ldr	r0, [pc, #592]	; (801f3e4 <_printf_float+0x2e4>)
 801f194:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f198:	bf94      	ite	ls
 801f19a:	4698      	movls	r8, r3
 801f19c:	4680      	movhi	r8, r0
 801f19e:	2303      	movs	r3, #3
 801f1a0:	6123      	str	r3, [r4, #16]
 801f1a2:	9b05      	ldr	r3, [sp, #20]
 801f1a4:	f023 0204 	bic.w	r2, r3, #4
 801f1a8:	6022      	str	r2, [r4, #0]
 801f1aa:	f04f 0900 	mov.w	r9, #0
 801f1ae:	9700      	str	r7, [sp, #0]
 801f1b0:	4633      	mov	r3, r6
 801f1b2:	aa0b      	add	r2, sp, #44	; 0x2c
 801f1b4:	4621      	mov	r1, r4
 801f1b6:	4628      	mov	r0, r5
 801f1b8:	f000 f9d8 	bl	801f56c <_printf_common>
 801f1bc:	3001      	adds	r0, #1
 801f1be:	f040 8090 	bne.w	801f2e2 <_printf_float+0x1e2>
 801f1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f1c6:	b00d      	add	sp, #52	; 0x34
 801f1c8:	ecbd 8b02 	vpop	{d8}
 801f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1d0:	4642      	mov	r2, r8
 801f1d2:	464b      	mov	r3, r9
 801f1d4:	4640      	mov	r0, r8
 801f1d6:	4649      	mov	r1, r9
 801f1d8:	f7e1 fca8 	bl	8000b2c <__aeabi_dcmpun>
 801f1dc:	b140      	cbz	r0, 801f1f0 <_printf_float+0xf0>
 801f1de:	464b      	mov	r3, r9
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	bfbc      	itt	lt
 801f1e4:	232d      	movlt	r3, #45	; 0x2d
 801f1e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f1ea:	487f      	ldr	r0, [pc, #508]	; (801f3e8 <_printf_float+0x2e8>)
 801f1ec:	4b7f      	ldr	r3, [pc, #508]	; (801f3ec <_printf_float+0x2ec>)
 801f1ee:	e7d1      	b.n	801f194 <_printf_float+0x94>
 801f1f0:	6863      	ldr	r3, [r4, #4]
 801f1f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f1f6:	9206      	str	r2, [sp, #24]
 801f1f8:	1c5a      	adds	r2, r3, #1
 801f1fa:	d13f      	bne.n	801f27c <_printf_float+0x17c>
 801f1fc:	2306      	movs	r3, #6
 801f1fe:	6063      	str	r3, [r4, #4]
 801f200:	9b05      	ldr	r3, [sp, #20]
 801f202:	6861      	ldr	r1, [r4, #4]
 801f204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f208:	2300      	movs	r3, #0
 801f20a:	9303      	str	r3, [sp, #12]
 801f20c:	ab0a      	add	r3, sp, #40	; 0x28
 801f20e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f212:	ab09      	add	r3, sp, #36	; 0x24
 801f214:	ec49 8b10 	vmov	d0, r8, r9
 801f218:	9300      	str	r3, [sp, #0]
 801f21a:	6022      	str	r2, [r4, #0]
 801f21c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f220:	4628      	mov	r0, r5
 801f222:	f7ff fecd 	bl	801efc0 <__cvt>
 801f226:	9b06      	ldr	r3, [sp, #24]
 801f228:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f22a:	2b47      	cmp	r3, #71	; 0x47
 801f22c:	4680      	mov	r8, r0
 801f22e:	d108      	bne.n	801f242 <_printf_float+0x142>
 801f230:	1cc8      	adds	r0, r1, #3
 801f232:	db02      	blt.n	801f23a <_printf_float+0x13a>
 801f234:	6863      	ldr	r3, [r4, #4]
 801f236:	4299      	cmp	r1, r3
 801f238:	dd41      	ble.n	801f2be <_printf_float+0x1be>
 801f23a:	f1ab 0b02 	sub.w	fp, fp, #2
 801f23e:	fa5f fb8b 	uxtb.w	fp, fp
 801f242:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f246:	d820      	bhi.n	801f28a <_printf_float+0x18a>
 801f248:	3901      	subs	r1, #1
 801f24a:	465a      	mov	r2, fp
 801f24c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f250:	9109      	str	r1, [sp, #36]	; 0x24
 801f252:	f7ff ff17 	bl	801f084 <__exponent>
 801f256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f258:	1813      	adds	r3, r2, r0
 801f25a:	2a01      	cmp	r2, #1
 801f25c:	4681      	mov	r9, r0
 801f25e:	6123      	str	r3, [r4, #16]
 801f260:	dc02      	bgt.n	801f268 <_printf_float+0x168>
 801f262:	6822      	ldr	r2, [r4, #0]
 801f264:	07d2      	lsls	r2, r2, #31
 801f266:	d501      	bpl.n	801f26c <_printf_float+0x16c>
 801f268:	3301      	adds	r3, #1
 801f26a:	6123      	str	r3, [r4, #16]
 801f26c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f270:	2b00      	cmp	r3, #0
 801f272:	d09c      	beq.n	801f1ae <_printf_float+0xae>
 801f274:	232d      	movs	r3, #45	; 0x2d
 801f276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f27a:	e798      	b.n	801f1ae <_printf_float+0xae>
 801f27c:	9a06      	ldr	r2, [sp, #24]
 801f27e:	2a47      	cmp	r2, #71	; 0x47
 801f280:	d1be      	bne.n	801f200 <_printf_float+0x100>
 801f282:	2b00      	cmp	r3, #0
 801f284:	d1bc      	bne.n	801f200 <_printf_float+0x100>
 801f286:	2301      	movs	r3, #1
 801f288:	e7b9      	b.n	801f1fe <_printf_float+0xfe>
 801f28a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f28e:	d118      	bne.n	801f2c2 <_printf_float+0x1c2>
 801f290:	2900      	cmp	r1, #0
 801f292:	6863      	ldr	r3, [r4, #4]
 801f294:	dd0b      	ble.n	801f2ae <_printf_float+0x1ae>
 801f296:	6121      	str	r1, [r4, #16]
 801f298:	b913      	cbnz	r3, 801f2a0 <_printf_float+0x1a0>
 801f29a:	6822      	ldr	r2, [r4, #0]
 801f29c:	07d0      	lsls	r0, r2, #31
 801f29e:	d502      	bpl.n	801f2a6 <_printf_float+0x1a6>
 801f2a0:	3301      	adds	r3, #1
 801f2a2:	440b      	add	r3, r1
 801f2a4:	6123      	str	r3, [r4, #16]
 801f2a6:	65a1      	str	r1, [r4, #88]	; 0x58
 801f2a8:	f04f 0900 	mov.w	r9, #0
 801f2ac:	e7de      	b.n	801f26c <_printf_float+0x16c>
 801f2ae:	b913      	cbnz	r3, 801f2b6 <_printf_float+0x1b6>
 801f2b0:	6822      	ldr	r2, [r4, #0]
 801f2b2:	07d2      	lsls	r2, r2, #31
 801f2b4:	d501      	bpl.n	801f2ba <_printf_float+0x1ba>
 801f2b6:	3302      	adds	r3, #2
 801f2b8:	e7f4      	b.n	801f2a4 <_printf_float+0x1a4>
 801f2ba:	2301      	movs	r3, #1
 801f2bc:	e7f2      	b.n	801f2a4 <_printf_float+0x1a4>
 801f2be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2c4:	4299      	cmp	r1, r3
 801f2c6:	db05      	blt.n	801f2d4 <_printf_float+0x1d4>
 801f2c8:	6823      	ldr	r3, [r4, #0]
 801f2ca:	6121      	str	r1, [r4, #16]
 801f2cc:	07d8      	lsls	r0, r3, #31
 801f2ce:	d5ea      	bpl.n	801f2a6 <_printf_float+0x1a6>
 801f2d0:	1c4b      	adds	r3, r1, #1
 801f2d2:	e7e7      	b.n	801f2a4 <_printf_float+0x1a4>
 801f2d4:	2900      	cmp	r1, #0
 801f2d6:	bfd4      	ite	le
 801f2d8:	f1c1 0202 	rsble	r2, r1, #2
 801f2dc:	2201      	movgt	r2, #1
 801f2de:	4413      	add	r3, r2
 801f2e0:	e7e0      	b.n	801f2a4 <_printf_float+0x1a4>
 801f2e2:	6823      	ldr	r3, [r4, #0]
 801f2e4:	055a      	lsls	r2, r3, #21
 801f2e6:	d407      	bmi.n	801f2f8 <_printf_float+0x1f8>
 801f2e8:	6923      	ldr	r3, [r4, #16]
 801f2ea:	4642      	mov	r2, r8
 801f2ec:	4631      	mov	r1, r6
 801f2ee:	4628      	mov	r0, r5
 801f2f0:	47b8      	blx	r7
 801f2f2:	3001      	adds	r0, #1
 801f2f4:	d12c      	bne.n	801f350 <_printf_float+0x250>
 801f2f6:	e764      	b.n	801f1c2 <_printf_float+0xc2>
 801f2f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f2fc:	f240 80e0 	bls.w	801f4c0 <_printf_float+0x3c0>
 801f300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f304:	2200      	movs	r2, #0
 801f306:	2300      	movs	r3, #0
 801f308:	f7e1 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 801f30c:	2800      	cmp	r0, #0
 801f30e:	d034      	beq.n	801f37a <_printf_float+0x27a>
 801f310:	4a37      	ldr	r2, [pc, #220]	; (801f3f0 <_printf_float+0x2f0>)
 801f312:	2301      	movs	r3, #1
 801f314:	4631      	mov	r1, r6
 801f316:	4628      	mov	r0, r5
 801f318:	47b8      	blx	r7
 801f31a:	3001      	adds	r0, #1
 801f31c:	f43f af51 	beq.w	801f1c2 <_printf_float+0xc2>
 801f320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f324:	429a      	cmp	r2, r3
 801f326:	db02      	blt.n	801f32e <_printf_float+0x22e>
 801f328:	6823      	ldr	r3, [r4, #0]
 801f32a:	07d8      	lsls	r0, r3, #31
 801f32c:	d510      	bpl.n	801f350 <_printf_float+0x250>
 801f32e:	ee18 3a10 	vmov	r3, s16
 801f332:	4652      	mov	r2, sl
 801f334:	4631      	mov	r1, r6
 801f336:	4628      	mov	r0, r5
 801f338:	47b8      	blx	r7
 801f33a:	3001      	adds	r0, #1
 801f33c:	f43f af41 	beq.w	801f1c2 <_printf_float+0xc2>
 801f340:	f04f 0800 	mov.w	r8, #0
 801f344:	f104 091a 	add.w	r9, r4, #26
 801f348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f34a:	3b01      	subs	r3, #1
 801f34c:	4543      	cmp	r3, r8
 801f34e:	dc09      	bgt.n	801f364 <_printf_float+0x264>
 801f350:	6823      	ldr	r3, [r4, #0]
 801f352:	079b      	lsls	r3, r3, #30
 801f354:	f100 8105 	bmi.w	801f562 <_printf_float+0x462>
 801f358:	68e0      	ldr	r0, [r4, #12]
 801f35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f35c:	4298      	cmp	r0, r3
 801f35e:	bfb8      	it	lt
 801f360:	4618      	movlt	r0, r3
 801f362:	e730      	b.n	801f1c6 <_printf_float+0xc6>
 801f364:	2301      	movs	r3, #1
 801f366:	464a      	mov	r2, r9
 801f368:	4631      	mov	r1, r6
 801f36a:	4628      	mov	r0, r5
 801f36c:	47b8      	blx	r7
 801f36e:	3001      	adds	r0, #1
 801f370:	f43f af27 	beq.w	801f1c2 <_printf_float+0xc2>
 801f374:	f108 0801 	add.w	r8, r8, #1
 801f378:	e7e6      	b.n	801f348 <_printf_float+0x248>
 801f37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	dc39      	bgt.n	801f3f4 <_printf_float+0x2f4>
 801f380:	4a1b      	ldr	r2, [pc, #108]	; (801f3f0 <_printf_float+0x2f0>)
 801f382:	2301      	movs	r3, #1
 801f384:	4631      	mov	r1, r6
 801f386:	4628      	mov	r0, r5
 801f388:	47b8      	blx	r7
 801f38a:	3001      	adds	r0, #1
 801f38c:	f43f af19 	beq.w	801f1c2 <_printf_float+0xc2>
 801f390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f394:	4313      	orrs	r3, r2
 801f396:	d102      	bne.n	801f39e <_printf_float+0x29e>
 801f398:	6823      	ldr	r3, [r4, #0]
 801f39a:	07d9      	lsls	r1, r3, #31
 801f39c:	d5d8      	bpl.n	801f350 <_printf_float+0x250>
 801f39e:	ee18 3a10 	vmov	r3, s16
 801f3a2:	4652      	mov	r2, sl
 801f3a4:	4631      	mov	r1, r6
 801f3a6:	4628      	mov	r0, r5
 801f3a8:	47b8      	blx	r7
 801f3aa:	3001      	adds	r0, #1
 801f3ac:	f43f af09 	beq.w	801f1c2 <_printf_float+0xc2>
 801f3b0:	f04f 0900 	mov.w	r9, #0
 801f3b4:	f104 0a1a 	add.w	sl, r4, #26
 801f3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3ba:	425b      	negs	r3, r3
 801f3bc:	454b      	cmp	r3, r9
 801f3be:	dc01      	bgt.n	801f3c4 <_printf_float+0x2c4>
 801f3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3c2:	e792      	b.n	801f2ea <_printf_float+0x1ea>
 801f3c4:	2301      	movs	r3, #1
 801f3c6:	4652      	mov	r2, sl
 801f3c8:	4631      	mov	r1, r6
 801f3ca:	4628      	mov	r0, r5
 801f3cc:	47b8      	blx	r7
 801f3ce:	3001      	adds	r0, #1
 801f3d0:	f43f aef7 	beq.w	801f1c2 <_printf_float+0xc2>
 801f3d4:	f109 0901 	add.w	r9, r9, #1
 801f3d8:	e7ee      	b.n	801f3b8 <_printf_float+0x2b8>
 801f3da:	bf00      	nop
 801f3dc:	7fefffff 	.word	0x7fefffff
 801f3e0:	080257a4 	.word	0x080257a4
 801f3e4:	080257a8 	.word	0x080257a8
 801f3e8:	080257b0 	.word	0x080257b0
 801f3ec:	080257ac 	.word	0x080257ac
 801f3f0:	080257b4 	.word	0x080257b4
 801f3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f3f8:	429a      	cmp	r2, r3
 801f3fa:	bfa8      	it	ge
 801f3fc:	461a      	movge	r2, r3
 801f3fe:	2a00      	cmp	r2, #0
 801f400:	4691      	mov	r9, r2
 801f402:	dc37      	bgt.n	801f474 <_printf_float+0x374>
 801f404:	f04f 0b00 	mov.w	fp, #0
 801f408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f40c:	f104 021a 	add.w	r2, r4, #26
 801f410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f412:	9305      	str	r3, [sp, #20]
 801f414:	eba3 0309 	sub.w	r3, r3, r9
 801f418:	455b      	cmp	r3, fp
 801f41a:	dc33      	bgt.n	801f484 <_printf_float+0x384>
 801f41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f420:	429a      	cmp	r2, r3
 801f422:	db3b      	blt.n	801f49c <_printf_float+0x39c>
 801f424:	6823      	ldr	r3, [r4, #0]
 801f426:	07da      	lsls	r2, r3, #31
 801f428:	d438      	bmi.n	801f49c <_printf_float+0x39c>
 801f42a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f42c:	9b05      	ldr	r3, [sp, #20]
 801f42e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f430:	1ad3      	subs	r3, r2, r3
 801f432:	eba2 0901 	sub.w	r9, r2, r1
 801f436:	4599      	cmp	r9, r3
 801f438:	bfa8      	it	ge
 801f43a:	4699      	movge	r9, r3
 801f43c:	f1b9 0f00 	cmp.w	r9, #0
 801f440:	dc35      	bgt.n	801f4ae <_printf_float+0x3ae>
 801f442:	f04f 0800 	mov.w	r8, #0
 801f446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f44a:	f104 0a1a 	add.w	sl, r4, #26
 801f44e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f452:	1a9b      	subs	r3, r3, r2
 801f454:	eba3 0309 	sub.w	r3, r3, r9
 801f458:	4543      	cmp	r3, r8
 801f45a:	f77f af79 	ble.w	801f350 <_printf_float+0x250>
 801f45e:	2301      	movs	r3, #1
 801f460:	4652      	mov	r2, sl
 801f462:	4631      	mov	r1, r6
 801f464:	4628      	mov	r0, r5
 801f466:	47b8      	blx	r7
 801f468:	3001      	adds	r0, #1
 801f46a:	f43f aeaa 	beq.w	801f1c2 <_printf_float+0xc2>
 801f46e:	f108 0801 	add.w	r8, r8, #1
 801f472:	e7ec      	b.n	801f44e <_printf_float+0x34e>
 801f474:	4613      	mov	r3, r2
 801f476:	4631      	mov	r1, r6
 801f478:	4642      	mov	r2, r8
 801f47a:	4628      	mov	r0, r5
 801f47c:	47b8      	blx	r7
 801f47e:	3001      	adds	r0, #1
 801f480:	d1c0      	bne.n	801f404 <_printf_float+0x304>
 801f482:	e69e      	b.n	801f1c2 <_printf_float+0xc2>
 801f484:	2301      	movs	r3, #1
 801f486:	4631      	mov	r1, r6
 801f488:	4628      	mov	r0, r5
 801f48a:	9205      	str	r2, [sp, #20]
 801f48c:	47b8      	blx	r7
 801f48e:	3001      	adds	r0, #1
 801f490:	f43f ae97 	beq.w	801f1c2 <_printf_float+0xc2>
 801f494:	9a05      	ldr	r2, [sp, #20]
 801f496:	f10b 0b01 	add.w	fp, fp, #1
 801f49a:	e7b9      	b.n	801f410 <_printf_float+0x310>
 801f49c:	ee18 3a10 	vmov	r3, s16
 801f4a0:	4652      	mov	r2, sl
 801f4a2:	4631      	mov	r1, r6
 801f4a4:	4628      	mov	r0, r5
 801f4a6:	47b8      	blx	r7
 801f4a8:	3001      	adds	r0, #1
 801f4aa:	d1be      	bne.n	801f42a <_printf_float+0x32a>
 801f4ac:	e689      	b.n	801f1c2 <_printf_float+0xc2>
 801f4ae:	9a05      	ldr	r2, [sp, #20]
 801f4b0:	464b      	mov	r3, r9
 801f4b2:	4442      	add	r2, r8
 801f4b4:	4631      	mov	r1, r6
 801f4b6:	4628      	mov	r0, r5
 801f4b8:	47b8      	blx	r7
 801f4ba:	3001      	adds	r0, #1
 801f4bc:	d1c1      	bne.n	801f442 <_printf_float+0x342>
 801f4be:	e680      	b.n	801f1c2 <_printf_float+0xc2>
 801f4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4c2:	2a01      	cmp	r2, #1
 801f4c4:	dc01      	bgt.n	801f4ca <_printf_float+0x3ca>
 801f4c6:	07db      	lsls	r3, r3, #31
 801f4c8:	d538      	bpl.n	801f53c <_printf_float+0x43c>
 801f4ca:	2301      	movs	r3, #1
 801f4cc:	4642      	mov	r2, r8
 801f4ce:	4631      	mov	r1, r6
 801f4d0:	4628      	mov	r0, r5
 801f4d2:	47b8      	blx	r7
 801f4d4:	3001      	adds	r0, #1
 801f4d6:	f43f ae74 	beq.w	801f1c2 <_printf_float+0xc2>
 801f4da:	ee18 3a10 	vmov	r3, s16
 801f4de:	4652      	mov	r2, sl
 801f4e0:	4631      	mov	r1, r6
 801f4e2:	4628      	mov	r0, r5
 801f4e4:	47b8      	blx	r7
 801f4e6:	3001      	adds	r0, #1
 801f4e8:	f43f ae6b 	beq.w	801f1c2 <_printf_float+0xc2>
 801f4ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	2300      	movs	r3, #0
 801f4f4:	f7e1 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 801f4f8:	b9d8      	cbnz	r0, 801f532 <_printf_float+0x432>
 801f4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4fc:	f108 0201 	add.w	r2, r8, #1
 801f500:	3b01      	subs	r3, #1
 801f502:	4631      	mov	r1, r6
 801f504:	4628      	mov	r0, r5
 801f506:	47b8      	blx	r7
 801f508:	3001      	adds	r0, #1
 801f50a:	d10e      	bne.n	801f52a <_printf_float+0x42a>
 801f50c:	e659      	b.n	801f1c2 <_printf_float+0xc2>
 801f50e:	2301      	movs	r3, #1
 801f510:	4652      	mov	r2, sl
 801f512:	4631      	mov	r1, r6
 801f514:	4628      	mov	r0, r5
 801f516:	47b8      	blx	r7
 801f518:	3001      	adds	r0, #1
 801f51a:	f43f ae52 	beq.w	801f1c2 <_printf_float+0xc2>
 801f51e:	f108 0801 	add.w	r8, r8, #1
 801f522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f524:	3b01      	subs	r3, #1
 801f526:	4543      	cmp	r3, r8
 801f528:	dcf1      	bgt.n	801f50e <_printf_float+0x40e>
 801f52a:	464b      	mov	r3, r9
 801f52c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f530:	e6dc      	b.n	801f2ec <_printf_float+0x1ec>
 801f532:	f04f 0800 	mov.w	r8, #0
 801f536:	f104 0a1a 	add.w	sl, r4, #26
 801f53a:	e7f2      	b.n	801f522 <_printf_float+0x422>
 801f53c:	2301      	movs	r3, #1
 801f53e:	4642      	mov	r2, r8
 801f540:	e7df      	b.n	801f502 <_printf_float+0x402>
 801f542:	2301      	movs	r3, #1
 801f544:	464a      	mov	r2, r9
 801f546:	4631      	mov	r1, r6
 801f548:	4628      	mov	r0, r5
 801f54a:	47b8      	blx	r7
 801f54c:	3001      	adds	r0, #1
 801f54e:	f43f ae38 	beq.w	801f1c2 <_printf_float+0xc2>
 801f552:	f108 0801 	add.w	r8, r8, #1
 801f556:	68e3      	ldr	r3, [r4, #12]
 801f558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f55a:	1a5b      	subs	r3, r3, r1
 801f55c:	4543      	cmp	r3, r8
 801f55e:	dcf0      	bgt.n	801f542 <_printf_float+0x442>
 801f560:	e6fa      	b.n	801f358 <_printf_float+0x258>
 801f562:	f04f 0800 	mov.w	r8, #0
 801f566:	f104 0919 	add.w	r9, r4, #25
 801f56a:	e7f4      	b.n	801f556 <_printf_float+0x456>

0801f56c <_printf_common>:
 801f56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f570:	4616      	mov	r6, r2
 801f572:	4699      	mov	r9, r3
 801f574:	688a      	ldr	r2, [r1, #8]
 801f576:	690b      	ldr	r3, [r1, #16]
 801f578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f57c:	4293      	cmp	r3, r2
 801f57e:	bfb8      	it	lt
 801f580:	4613      	movlt	r3, r2
 801f582:	6033      	str	r3, [r6, #0]
 801f584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f588:	4607      	mov	r7, r0
 801f58a:	460c      	mov	r4, r1
 801f58c:	b10a      	cbz	r2, 801f592 <_printf_common+0x26>
 801f58e:	3301      	adds	r3, #1
 801f590:	6033      	str	r3, [r6, #0]
 801f592:	6823      	ldr	r3, [r4, #0]
 801f594:	0699      	lsls	r1, r3, #26
 801f596:	bf42      	ittt	mi
 801f598:	6833      	ldrmi	r3, [r6, #0]
 801f59a:	3302      	addmi	r3, #2
 801f59c:	6033      	strmi	r3, [r6, #0]
 801f59e:	6825      	ldr	r5, [r4, #0]
 801f5a0:	f015 0506 	ands.w	r5, r5, #6
 801f5a4:	d106      	bne.n	801f5b4 <_printf_common+0x48>
 801f5a6:	f104 0a19 	add.w	sl, r4, #25
 801f5aa:	68e3      	ldr	r3, [r4, #12]
 801f5ac:	6832      	ldr	r2, [r6, #0]
 801f5ae:	1a9b      	subs	r3, r3, r2
 801f5b0:	42ab      	cmp	r3, r5
 801f5b2:	dc26      	bgt.n	801f602 <_printf_common+0x96>
 801f5b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f5b8:	1e13      	subs	r3, r2, #0
 801f5ba:	6822      	ldr	r2, [r4, #0]
 801f5bc:	bf18      	it	ne
 801f5be:	2301      	movne	r3, #1
 801f5c0:	0692      	lsls	r2, r2, #26
 801f5c2:	d42b      	bmi.n	801f61c <_printf_common+0xb0>
 801f5c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f5c8:	4649      	mov	r1, r9
 801f5ca:	4638      	mov	r0, r7
 801f5cc:	47c0      	blx	r8
 801f5ce:	3001      	adds	r0, #1
 801f5d0:	d01e      	beq.n	801f610 <_printf_common+0xa4>
 801f5d2:	6823      	ldr	r3, [r4, #0]
 801f5d4:	68e5      	ldr	r5, [r4, #12]
 801f5d6:	6832      	ldr	r2, [r6, #0]
 801f5d8:	f003 0306 	and.w	r3, r3, #6
 801f5dc:	2b04      	cmp	r3, #4
 801f5de:	bf08      	it	eq
 801f5e0:	1aad      	subeq	r5, r5, r2
 801f5e2:	68a3      	ldr	r3, [r4, #8]
 801f5e4:	6922      	ldr	r2, [r4, #16]
 801f5e6:	bf0c      	ite	eq
 801f5e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f5ec:	2500      	movne	r5, #0
 801f5ee:	4293      	cmp	r3, r2
 801f5f0:	bfc4      	itt	gt
 801f5f2:	1a9b      	subgt	r3, r3, r2
 801f5f4:	18ed      	addgt	r5, r5, r3
 801f5f6:	2600      	movs	r6, #0
 801f5f8:	341a      	adds	r4, #26
 801f5fa:	42b5      	cmp	r5, r6
 801f5fc:	d11a      	bne.n	801f634 <_printf_common+0xc8>
 801f5fe:	2000      	movs	r0, #0
 801f600:	e008      	b.n	801f614 <_printf_common+0xa8>
 801f602:	2301      	movs	r3, #1
 801f604:	4652      	mov	r2, sl
 801f606:	4649      	mov	r1, r9
 801f608:	4638      	mov	r0, r7
 801f60a:	47c0      	blx	r8
 801f60c:	3001      	adds	r0, #1
 801f60e:	d103      	bne.n	801f618 <_printf_common+0xac>
 801f610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f618:	3501      	adds	r5, #1
 801f61a:	e7c6      	b.n	801f5aa <_printf_common+0x3e>
 801f61c:	18e1      	adds	r1, r4, r3
 801f61e:	1c5a      	adds	r2, r3, #1
 801f620:	2030      	movs	r0, #48	; 0x30
 801f622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f626:	4422      	add	r2, r4
 801f628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f630:	3302      	adds	r3, #2
 801f632:	e7c7      	b.n	801f5c4 <_printf_common+0x58>
 801f634:	2301      	movs	r3, #1
 801f636:	4622      	mov	r2, r4
 801f638:	4649      	mov	r1, r9
 801f63a:	4638      	mov	r0, r7
 801f63c:	47c0      	blx	r8
 801f63e:	3001      	adds	r0, #1
 801f640:	d0e6      	beq.n	801f610 <_printf_common+0xa4>
 801f642:	3601      	adds	r6, #1
 801f644:	e7d9      	b.n	801f5fa <_printf_common+0x8e>
	...

0801f648 <_printf_i>:
 801f648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f64c:	460c      	mov	r4, r1
 801f64e:	4691      	mov	r9, r2
 801f650:	7e27      	ldrb	r7, [r4, #24]
 801f652:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f654:	2f78      	cmp	r7, #120	; 0x78
 801f656:	4680      	mov	r8, r0
 801f658:	469a      	mov	sl, r3
 801f65a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f65e:	d807      	bhi.n	801f670 <_printf_i+0x28>
 801f660:	2f62      	cmp	r7, #98	; 0x62
 801f662:	d80a      	bhi.n	801f67a <_printf_i+0x32>
 801f664:	2f00      	cmp	r7, #0
 801f666:	f000 80d8 	beq.w	801f81a <_printf_i+0x1d2>
 801f66a:	2f58      	cmp	r7, #88	; 0x58
 801f66c:	f000 80a3 	beq.w	801f7b6 <_printf_i+0x16e>
 801f670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f678:	e03a      	b.n	801f6f0 <_printf_i+0xa8>
 801f67a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f67e:	2b15      	cmp	r3, #21
 801f680:	d8f6      	bhi.n	801f670 <_printf_i+0x28>
 801f682:	a001      	add	r0, pc, #4	; (adr r0, 801f688 <_printf_i+0x40>)
 801f684:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f688:	0801f6e1 	.word	0x0801f6e1
 801f68c:	0801f6f5 	.word	0x0801f6f5
 801f690:	0801f671 	.word	0x0801f671
 801f694:	0801f671 	.word	0x0801f671
 801f698:	0801f671 	.word	0x0801f671
 801f69c:	0801f671 	.word	0x0801f671
 801f6a0:	0801f6f5 	.word	0x0801f6f5
 801f6a4:	0801f671 	.word	0x0801f671
 801f6a8:	0801f671 	.word	0x0801f671
 801f6ac:	0801f671 	.word	0x0801f671
 801f6b0:	0801f671 	.word	0x0801f671
 801f6b4:	0801f801 	.word	0x0801f801
 801f6b8:	0801f725 	.word	0x0801f725
 801f6bc:	0801f7e3 	.word	0x0801f7e3
 801f6c0:	0801f671 	.word	0x0801f671
 801f6c4:	0801f671 	.word	0x0801f671
 801f6c8:	0801f823 	.word	0x0801f823
 801f6cc:	0801f671 	.word	0x0801f671
 801f6d0:	0801f725 	.word	0x0801f725
 801f6d4:	0801f671 	.word	0x0801f671
 801f6d8:	0801f671 	.word	0x0801f671
 801f6dc:	0801f7eb 	.word	0x0801f7eb
 801f6e0:	680b      	ldr	r3, [r1, #0]
 801f6e2:	1d1a      	adds	r2, r3, #4
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	600a      	str	r2, [r1, #0]
 801f6e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f6ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f6f0:	2301      	movs	r3, #1
 801f6f2:	e0a3      	b.n	801f83c <_printf_i+0x1f4>
 801f6f4:	6825      	ldr	r5, [r4, #0]
 801f6f6:	6808      	ldr	r0, [r1, #0]
 801f6f8:	062e      	lsls	r6, r5, #24
 801f6fa:	f100 0304 	add.w	r3, r0, #4
 801f6fe:	d50a      	bpl.n	801f716 <_printf_i+0xce>
 801f700:	6805      	ldr	r5, [r0, #0]
 801f702:	600b      	str	r3, [r1, #0]
 801f704:	2d00      	cmp	r5, #0
 801f706:	da03      	bge.n	801f710 <_printf_i+0xc8>
 801f708:	232d      	movs	r3, #45	; 0x2d
 801f70a:	426d      	negs	r5, r5
 801f70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f710:	485e      	ldr	r0, [pc, #376]	; (801f88c <_printf_i+0x244>)
 801f712:	230a      	movs	r3, #10
 801f714:	e019      	b.n	801f74a <_printf_i+0x102>
 801f716:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f71a:	6805      	ldr	r5, [r0, #0]
 801f71c:	600b      	str	r3, [r1, #0]
 801f71e:	bf18      	it	ne
 801f720:	b22d      	sxthne	r5, r5
 801f722:	e7ef      	b.n	801f704 <_printf_i+0xbc>
 801f724:	680b      	ldr	r3, [r1, #0]
 801f726:	6825      	ldr	r5, [r4, #0]
 801f728:	1d18      	adds	r0, r3, #4
 801f72a:	6008      	str	r0, [r1, #0]
 801f72c:	0628      	lsls	r0, r5, #24
 801f72e:	d501      	bpl.n	801f734 <_printf_i+0xec>
 801f730:	681d      	ldr	r5, [r3, #0]
 801f732:	e002      	b.n	801f73a <_printf_i+0xf2>
 801f734:	0669      	lsls	r1, r5, #25
 801f736:	d5fb      	bpl.n	801f730 <_printf_i+0xe8>
 801f738:	881d      	ldrh	r5, [r3, #0]
 801f73a:	4854      	ldr	r0, [pc, #336]	; (801f88c <_printf_i+0x244>)
 801f73c:	2f6f      	cmp	r7, #111	; 0x6f
 801f73e:	bf0c      	ite	eq
 801f740:	2308      	moveq	r3, #8
 801f742:	230a      	movne	r3, #10
 801f744:	2100      	movs	r1, #0
 801f746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f74a:	6866      	ldr	r6, [r4, #4]
 801f74c:	60a6      	str	r6, [r4, #8]
 801f74e:	2e00      	cmp	r6, #0
 801f750:	bfa2      	ittt	ge
 801f752:	6821      	ldrge	r1, [r4, #0]
 801f754:	f021 0104 	bicge.w	r1, r1, #4
 801f758:	6021      	strge	r1, [r4, #0]
 801f75a:	b90d      	cbnz	r5, 801f760 <_printf_i+0x118>
 801f75c:	2e00      	cmp	r6, #0
 801f75e:	d04d      	beq.n	801f7fc <_printf_i+0x1b4>
 801f760:	4616      	mov	r6, r2
 801f762:	fbb5 f1f3 	udiv	r1, r5, r3
 801f766:	fb03 5711 	mls	r7, r3, r1, r5
 801f76a:	5dc7      	ldrb	r7, [r0, r7]
 801f76c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f770:	462f      	mov	r7, r5
 801f772:	42bb      	cmp	r3, r7
 801f774:	460d      	mov	r5, r1
 801f776:	d9f4      	bls.n	801f762 <_printf_i+0x11a>
 801f778:	2b08      	cmp	r3, #8
 801f77a:	d10b      	bne.n	801f794 <_printf_i+0x14c>
 801f77c:	6823      	ldr	r3, [r4, #0]
 801f77e:	07df      	lsls	r7, r3, #31
 801f780:	d508      	bpl.n	801f794 <_printf_i+0x14c>
 801f782:	6923      	ldr	r3, [r4, #16]
 801f784:	6861      	ldr	r1, [r4, #4]
 801f786:	4299      	cmp	r1, r3
 801f788:	bfde      	ittt	le
 801f78a:	2330      	movle	r3, #48	; 0x30
 801f78c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f790:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801f794:	1b92      	subs	r2, r2, r6
 801f796:	6122      	str	r2, [r4, #16]
 801f798:	f8cd a000 	str.w	sl, [sp]
 801f79c:	464b      	mov	r3, r9
 801f79e:	aa03      	add	r2, sp, #12
 801f7a0:	4621      	mov	r1, r4
 801f7a2:	4640      	mov	r0, r8
 801f7a4:	f7ff fee2 	bl	801f56c <_printf_common>
 801f7a8:	3001      	adds	r0, #1
 801f7aa:	d14c      	bne.n	801f846 <_printf_i+0x1fe>
 801f7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f7b0:	b004      	add	sp, #16
 801f7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7b6:	4835      	ldr	r0, [pc, #212]	; (801f88c <_printf_i+0x244>)
 801f7b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f7bc:	6823      	ldr	r3, [r4, #0]
 801f7be:	680e      	ldr	r6, [r1, #0]
 801f7c0:	061f      	lsls	r7, r3, #24
 801f7c2:	f856 5b04 	ldr.w	r5, [r6], #4
 801f7c6:	600e      	str	r6, [r1, #0]
 801f7c8:	d514      	bpl.n	801f7f4 <_printf_i+0x1ac>
 801f7ca:	07d9      	lsls	r1, r3, #31
 801f7cc:	bf44      	itt	mi
 801f7ce:	f043 0320 	orrmi.w	r3, r3, #32
 801f7d2:	6023      	strmi	r3, [r4, #0]
 801f7d4:	b91d      	cbnz	r5, 801f7de <_printf_i+0x196>
 801f7d6:	6823      	ldr	r3, [r4, #0]
 801f7d8:	f023 0320 	bic.w	r3, r3, #32
 801f7dc:	6023      	str	r3, [r4, #0]
 801f7de:	2310      	movs	r3, #16
 801f7e0:	e7b0      	b.n	801f744 <_printf_i+0xfc>
 801f7e2:	6823      	ldr	r3, [r4, #0]
 801f7e4:	f043 0320 	orr.w	r3, r3, #32
 801f7e8:	6023      	str	r3, [r4, #0]
 801f7ea:	2378      	movs	r3, #120	; 0x78
 801f7ec:	4828      	ldr	r0, [pc, #160]	; (801f890 <_printf_i+0x248>)
 801f7ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f7f2:	e7e3      	b.n	801f7bc <_printf_i+0x174>
 801f7f4:	065e      	lsls	r6, r3, #25
 801f7f6:	bf48      	it	mi
 801f7f8:	b2ad      	uxthmi	r5, r5
 801f7fa:	e7e6      	b.n	801f7ca <_printf_i+0x182>
 801f7fc:	4616      	mov	r6, r2
 801f7fe:	e7bb      	b.n	801f778 <_printf_i+0x130>
 801f800:	680b      	ldr	r3, [r1, #0]
 801f802:	6826      	ldr	r6, [r4, #0]
 801f804:	6960      	ldr	r0, [r4, #20]
 801f806:	1d1d      	adds	r5, r3, #4
 801f808:	600d      	str	r5, [r1, #0]
 801f80a:	0635      	lsls	r5, r6, #24
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	d501      	bpl.n	801f814 <_printf_i+0x1cc>
 801f810:	6018      	str	r0, [r3, #0]
 801f812:	e002      	b.n	801f81a <_printf_i+0x1d2>
 801f814:	0671      	lsls	r1, r6, #25
 801f816:	d5fb      	bpl.n	801f810 <_printf_i+0x1c8>
 801f818:	8018      	strh	r0, [r3, #0]
 801f81a:	2300      	movs	r3, #0
 801f81c:	6123      	str	r3, [r4, #16]
 801f81e:	4616      	mov	r6, r2
 801f820:	e7ba      	b.n	801f798 <_printf_i+0x150>
 801f822:	680b      	ldr	r3, [r1, #0]
 801f824:	1d1a      	adds	r2, r3, #4
 801f826:	600a      	str	r2, [r1, #0]
 801f828:	681e      	ldr	r6, [r3, #0]
 801f82a:	6862      	ldr	r2, [r4, #4]
 801f82c:	2100      	movs	r1, #0
 801f82e:	4630      	mov	r0, r6
 801f830:	f7e0 fcd6 	bl	80001e0 <memchr>
 801f834:	b108      	cbz	r0, 801f83a <_printf_i+0x1f2>
 801f836:	1b80      	subs	r0, r0, r6
 801f838:	6060      	str	r0, [r4, #4]
 801f83a:	6863      	ldr	r3, [r4, #4]
 801f83c:	6123      	str	r3, [r4, #16]
 801f83e:	2300      	movs	r3, #0
 801f840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f844:	e7a8      	b.n	801f798 <_printf_i+0x150>
 801f846:	6923      	ldr	r3, [r4, #16]
 801f848:	4632      	mov	r2, r6
 801f84a:	4649      	mov	r1, r9
 801f84c:	4640      	mov	r0, r8
 801f84e:	47d0      	blx	sl
 801f850:	3001      	adds	r0, #1
 801f852:	d0ab      	beq.n	801f7ac <_printf_i+0x164>
 801f854:	6823      	ldr	r3, [r4, #0]
 801f856:	079b      	lsls	r3, r3, #30
 801f858:	d413      	bmi.n	801f882 <_printf_i+0x23a>
 801f85a:	68e0      	ldr	r0, [r4, #12]
 801f85c:	9b03      	ldr	r3, [sp, #12]
 801f85e:	4298      	cmp	r0, r3
 801f860:	bfb8      	it	lt
 801f862:	4618      	movlt	r0, r3
 801f864:	e7a4      	b.n	801f7b0 <_printf_i+0x168>
 801f866:	2301      	movs	r3, #1
 801f868:	4632      	mov	r2, r6
 801f86a:	4649      	mov	r1, r9
 801f86c:	4640      	mov	r0, r8
 801f86e:	47d0      	blx	sl
 801f870:	3001      	adds	r0, #1
 801f872:	d09b      	beq.n	801f7ac <_printf_i+0x164>
 801f874:	3501      	adds	r5, #1
 801f876:	68e3      	ldr	r3, [r4, #12]
 801f878:	9903      	ldr	r1, [sp, #12]
 801f87a:	1a5b      	subs	r3, r3, r1
 801f87c:	42ab      	cmp	r3, r5
 801f87e:	dcf2      	bgt.n	801f866 <_printf_i+0x21e>
 801f880:	e7eb      	b.n	801f85a <_printf_i+0x212>
 801f882:	2500      	movs	r5, #0
 801f884:	f104 0619 	add.w	r6, r4, #25
 801f888:	e7f5      	b.n	801f876 <_printf_i+0x22e>
 801f88a:	bf00      	nop
 801f88c:	080257b6 	.word	0x080257b6
 801f890:	080257c7 	.word	0x080257c7

0801f894 <_scanf_float>:
 801f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f898:	b087      	sub	sp, #28
 801f89a:	4617      	mov	r7, r2
 801f89c:	9303      	str	r3, [sp, #12]
 801f89e:	688b      	ldr	r3, [r1, #8]
 801f8a0:	1e5a      	subs	r2, r3, #1
 801f8a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f8a6:	bf83      	ittte	hi
 801f8a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f8ac:	195b      	addhi	r3, r3, r5
 801f8ae:	9302      	strhi	r3, [sp, #8]
 801f8b0:	2300      	movls	r3, #0
 801f8b2:	bf86      	itte	hi
 801f8b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f8b8:	608b      	strhi	r3, [r1, #8]
 801f8ba:	9302      	strls	r3, [sp, #8]
 801f8bc:	680b      	ldr	r3, [r1, #0]
 801f8be:	468b      	mov	fp, r1
 801f8c0:	2500      	movs	r5, #0
 801f8c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f8c6:	f84b 3b1c 	str.w	r3, [fp], #28
 801f8ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f8ce:	4680      	mov	r8, r0
 801f8d0:	460c      	mov	r4, r1
 801f8d2:	465e      	mov	r6, fp
 801f8d4:	46aa      	mov	sl, r5
 801f8d6:	46a9      	mov	r9, r5
 801f8d8:	9501      	str	r5, [sp, #4]
 801f8da:	68a2      	ldr	r2, [r4, #8]
 801f8dc:	b152      	cbz	r2, 801f8f4 <_scanf_float+0x60>
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	781b      	ldrb	r3, [r3, #0]
 801f8e2:	2b4e      	cmp	r3, #78	; 0x4e
 801f8e4:	d864      	bhi.n	801f9b0 <_scanf_float+0x11c>
 801f8e6:	2b40      	cmp	r3, #64	; 0x40
 801f8e8:	d83c      	bhi.n	801f964 <_scanf_float+0xd0>
 801f8ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f8ee:	b2c8      	uxtb	r0, r1
 801f8f0:	280e      	cmp	r0, #14
 801f8f2:	d93a      	bls.n	801f96a <_scanf_float+0xd6>
 801f8f4:	f1b9 0f00 	cmp.w	r9, #0
 801f8f8:	d003      	beq.n	801f902 <_scanf_float+0x6e>
 801f8fa:	6823      	ldr	r3, [r4, #0]
 801f8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f900:	6023      	str	r3, [r4, #0]
 801f902:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f906:	f1ba 0f01 	cmp.w	sl, #1
 801f90a:	f200 8113 	bhi.w	801fb34 <_scanf_float+0x2a0>
 801f90e:	455e      	cmp	r6, fp
 801f910:	f200 8105 	bhi.w	801fb1e <_scanf_float+0x28a>
 801f914:	2501      	movs	r5, #1
 801f916:	4628      	mov	r0, r5
 801f918:	b007      	add	sp, #28
 801f91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f91e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f922:	2a0d      	cmp	r2, #13
 801f924:	d8e6      	bhi.n	801f8f4 <_scanf_float+0x60>
 801f926:	a101      	add	r1, pc, #4	; (adr r1, 801f92c <_scanf_float+0x98>)
 801f928:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f92c:	0801fa6b 	.word	0x0801fa6b
 801f930:	0801f8f5 	.word	0x0801f8f5
 801f934:	0801f8f5 	.word	0x0801f8f5
 801f938:	0801f8f5 	.word	0x0801f8f5
 801f93c:	0801facb 	.word	0x0801facb
 801f940:	0801faa3 	.word	0x0801faa3
 801f944:	0801f8f5 	.word	0x0801f8f5
 801f948:	0801f8f5 	.word	0x0801f8f5
 801f94c:	0801fa79 	.word	0x0801fa79
 801f950:	0801f8f5 	.word	0x0801f8f5
 801f954:	0801f8f5 	.word	0x0801f8f5
 801f958:	0801f8f5 	.word	0x0801f8f5
 801f95c:	0801f8f5 	.word	0x0801f8f5
 801f960:	0801fa31 	.word	0x0801fa31
 801f964:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f968:	e7db      	b.n	801f922 <_scanf_float+0x8e>
 801f96a:	290e      	cmp	r1, #14
 801f96c:	d8c2      	bhi.n	801f8f4 <_scanf_float+0x60>
 801f96e:	a001      	add	r0, pc, #4	; (adr r0, 801f974 <_scanf_float+0xe0>)
 801f970:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f974:	0801fa23 	.word	0x0801fa23
 801f978:	0801f8f5 	.word	0x0801f8f5
 801f97c:	0801fa23 	.word	0x0801fa23
 801f980:	0801fab7 	.word	0x0801fab7
 801f984:	0801f8f5 	.word	0x0801f8f5
 801f988:	0801f9d1 	.word	0x0801f9d1
 801f98c:	0801fa0d 	.word	0x0801fa0d
 801f990:	0801fa0d 	.word	0x0801fa0d
 801f994:	0801fa0d 	.word	0x0801fa0d
 801f998:	0801fa0d 	.word	0x0801fa0d
 801f99c:	0801fa0d 	.word	0x0801fa0d
 801f9a0:	0801fa0d 	.word	0x0801fa0d
 801f9a4:	0801fa0d 	.word	0x0801fa0d
 801f9a8:	0801fa0d 	.word	0x0801fa0d
 801f9ac:	0801fa0d 	.word	0x0801fa0d
 801f9b0:	2b6e      	cmp	r3, #110	; 0x6e
 801f9b2:	d809      	bhi.n	801f9c8 <_scanf_float+0x134>
 801f9b4:	2b60      	cmp	r3, #96	; 0x60
 801f9b6:	d8b2      	bhi.n	801f91e <_scanf_float+0x8a>
 801f9b8:	2b54      	cmp	r3, #84	; 0x54
 801f9ba:	d077      	beq.n	801faac <_scanf_float+0x218>
 801f9bc:	2b59      	cmp	r3, #89	; 0x59
 801f9be:	d199      	bne.n	801f8f4 <_scanf_float+0x60>
 801f9c0:	2d07      	cmp	r5, #7
 801f9c2:	d197      	bne.n	801f8f4 <_scanf_float+0x60>
 801f9c4:	2508      	movs	r5, #8
 801f9c6:	e029      	b.n	801fa1c <_scanf_float+0x188>
 801f9c8:	2b74      	cmp	r3, #116	; 0x74
 801f9ca:	d06f      	beq.n	801faac <_scanf_float+0x218>
 801f9cc:	2b79      	cmp	r3, #121	; 0x79
 801f9ce:	e7f6      	b.n	801f9be <_scanf_float+0x12a>
 801f9d0:	6821      	ldr	r1, [r4, #0]
 801f9d2:	05c8      	lsls	r0, r1, #23
 801f9d4:	d51a      	bpl.n	801fa0c <_scanf_float+0x178>
 801f9d6:	9b02      	ldr	r3, [sp, #8]
 801f9d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f9dc:	6021      	str	r1, [r4, #0]
 801f9de:	f109 0901 	add.w	r9, r9, #1
 801f9e2:	b11b      	cbz	r3, 801f9ec <_scanf_float+0x158>
 801f9e4:	3b01      	subs	r3, #1
 801f9e6:	3201      	adds	r2, #1
 801f9e8:	9302      	str	r3, [sp, #8]
 801f9ea:	60a2      	str	r2, [r4, #8]
 801f9ec:	68a3      	ldr	r3, [r4, #8]
 801f9ee:	3b01      	subs	r3, #1
 801f9f0:	60a3      	str	r3, [r4, #8]
 801f9f2:	6923      	ldr	r3, [r4, #16]
 801f9f4:	3301      	adds	r3, #1
 801f9f6:	6123      	str	r3, [r4, #16]
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	3b01      	subs	r3, #1
 801f9fc:	2b00      	cmp	r3, #0
 801f9fe:	607b      	str	r3, [r7, #4]
 801fa00:	f340 8084 	ble.w	801fb0c <_scanf_float+0x278>
 801fa04:	683b      	ldr	r3, [r7, #0]
 801fa06:	3301      	adds	r3, #1
 801fa08:	603b      	str	r3, [r7, #0]
 801fa0a:	e766      	b.n	801f8da <_scanf_float+0x46>
 801fa0c:	eb1a 0f05 	cmn.w	sl, r5
 801fa10:	f47f af70 	bne.w	801f8f4 <_scanf_float+0x60>
 801fa14:	6822      	ldr	r2, [r4, #0]
 801fa16:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801fa1a:	6022      	str	r2, [r4, #0]
 801fa1c:	f806 3b01 	strb.w	r3, [r6], #1
 801fa20:	e7e4      	b.n	801f9ec <_scanf_float+0x158>
 801fa22:	6822      	ldr	r2, [r4, #0]
 801fa24:	0610      	lsls	r0, r2, #24
 801fa26:	f57f af65 	bpl.w	801f8f4 <_scanf_float+0x60>
 801fa2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801fa2e:	e7f4      	b.n	801fa1a <_scanf_float+0x186>
 801fa30:	f1ba 0f00 	cmp.w	sl, #0
 801fa34:	d10e      	bne.n	801fa54 <_scanf_float+0x1c0>
 801fa36:	f1b9 0f00 	cmp.w	r9, #0
 801fa3a:	d10e      	bne.n	801fa5a <_scanf_float+0x1c6>
 801fa3c:	6822      	ldr	r2, [r4, #0]
 801fa3e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801fa42:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801fa46:	d108      	bne.n	801fa5a <_scanf_float+0x1c6>
 801fa48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801fa4c:	6022      	str	r2, [r4, #0]
 801fa4e:	f04f 0a01 	mov.w	sl, #1
 801fa52:	e7e3      	b.n	801fa1c <_scanf_float+0x188>
 801fa54:	f1ba 0f02 	cmp.w	sl, #2
 801fa58:	d055      	beq.n	801fb06 <_scanf_float+0x272>
 801fa5a:	2d01      	cmp	r5, #1
 801fa5c:	d002      	beq.n	801fa64 <_scanf_float+0x1d0>
 801fa5e:	2d04      	cmp	r5, #4
 801fa60:	f47f af48 	bne.w	801f8f4 <_scanf_float+0x60>
 801fa64:	3501      	adds	r5, #1
 801fa66:	b2ed      	uxtb	r5, r5
 801fa68:	e7d8      	b.n	801fa1c <_scanf_float+0x188>
 801fa6a:	f1ba 0f01 	cmp.w	sl, #1
 801fa6e:	f47f af41 	bne.w	801f8f4 <_scanf_float+0x60>
 801fa72:	f04f 0a02 	mov.w	sl, #2
 801fa76:	e7d1      	b.n	801fa1c <_scanf_float+0x188>
 801fa78:	b97d      	cbnz	r5, 801fa9a <_scanf_float+0x206>
 801fa7a:	f1b9 0f00 	cmp.w	r9, #0
 801fa7e:	f47f af3c 	bne.w	801f8fa <_scanf_float+0x66>
 801fa82:	6822      	ldr	r2, [r4, #0]
 801fa84:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801fa88:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801fa8c:	f47f af39 	bne.w	801f902 <_scanf_float+0x6e>
 801fa90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801fa94:	6022      	str	r2, [r4, #0]
 801fa96:	2501      	movs	r5, #1
 801fa98:	e7c0      	b.n	801fa1c <_scanf_float+0x188>
 801fa9a:	2d03      	cmp	r5, #3
 801fa9c:	d0e2      	beq.n	801fa64 <_scanf_float+0x1d0>
 801fa9e:	2d05      	cmp	r5, #5
 801faa0:	e7de      	b.n	801fa60 <_scanf_float+0x1cc>
 801faa2:	2d02      	cmp	r5, #2
 801faa4:	f47f af26 	bne.w	801f8f4 <_scanf_float+0x60>
 801faa8:	2503      	movs	r5, #3
 801faaa:	e7b7      	b.n	801fa1c <_scanf_float+0x188>
 801faac:	2d06      	cmp	r5, #6
 801faae:	f47f af21 	bne.w	801f8f4 <_scanf_float+0x60>
 801fab2:	2507      	movs	r5, #7
 801fab4:	e7b2      	b.n	801fa1c <_scanf_float+0x188>
 801fab6:	6822      	ldr	r2, [r4, #0]
 801fab8:	0591      	lsls	r1, r2, #22
 801faba:	f57f af1b 	bpl.w	801f8f4 <_scanf_float+0x60>
 801fabe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801fac2:	6022      	str	r2, [r4, #0]
 801fac4:	f8cd 9004 	str.w	r9, [sp, #4]
 801fac8:	e7a8      	b.n	801fa1c <_scanf_float+0x188>
 801faca:	6822      	ldr	r2, [r4, #0]
 801facc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801fad0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801fad4:	d006      	beq.n	801fae4 <_scanf_float+0x250>
 801fad6:	0550      	lsls	r0, r2, #21
 801fad8:	f57f af0c 	bpl.w	801f8f4 <_scanf_float+0x60>
 801fadc:	f1b9 0f00 	cmp.w	r9, #0
 801fae0:	f43f af0f 	beq.w	801f902 <_scanf_float+0x6e>
 801fae4:	0591      	lsls	r1, r2, #22
 801fae6:	bf58      	it	pl
 801fae8:	9901      	ldrpl	r1, [sp, #4]
 801faea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801faee:	bf58      	it	pl
 801faf0:	eba9 0101 	subpl.w	r1, r9, r1
 801faf4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801faf8:	bf58      	it	pl
 801fafa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801fafe:	6022      	str	r2, [r4, #0]
 801fb00:	f04f 0900 	mov.w	r9, #0
 801fb04:	e78a      	b.n	801fa1c <_scanf_float+0x188>
 801fb06:	f04f 0a03 	mov.w	sl, #3
 801fb0a:	e787      	b.n	801fa1c <_scanf_float+0x188>
 801fb0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801fb10:	4639      	mov	r1, r7
 801fb12:	4640      	mov	r0, r8
 801fb14:	4798      	blx	r3
 801fb16:	2800      	cmp	r0, #0
 801fb18:	f43f aedf 	beq.w	801f8da <_scanf_float+0x46>
 801fb1c:	e6ea      	b.n	801f8f4 <_scanf_float+0x60>
 801fb1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fb22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fb26:	463a      	mov	r2, r7
 801fb28:	4640      	mov	r0, r8
 801fb2a:	4798      	blx	r3
 801fb2c:	6923      	ldr	r3, [r4, #16]
 801fb2e:	3b01      	subs	r3, #1
 801fb30:	6123      	str	r3, [r4, #16]
 801fb32:	e6ec      	b.n	801f90e <_scanf_float+0x7a>
 801fb34:	1e6b      	subs	r3, r5, #1
 801fb36:	2b06      	cmp	r3, #6
 801fb38:	d825      	bhi.n	801fb86 <_scanf_float+0x2f2>
 801fb3a:	2d02      	cmp	r5, #2
 801fb3c:	d836      	bhi.n	801fbac <_scanf_float+0x318>
 801fb3e:	455e      	cmp	r6, fp
 801fb40:	f67f aee8 	bls.w	801f914 <_scanf_float+0x80>
 801fb44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fb48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fb4c:	463a      	mov	r2, r7
 801fb4e:	4640      	mov	r0, r8
 801fb50:	4798      	blx	r3
 801fb52:	6923      	ldr	r3, [r4, #16]
 801fb54:	3b01      	subs	r3, #1
 801fb56:	6123      	str	r3, [r4, #16]
 801fb58:	e7f1      	b.n	801fb3e <_scanf_float+0x2aa>
 801fb5a:	9802      	ldr	r0, [sp, #8]
 801fb5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fb60:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801fb64:	9002      	str	r0, [sp, #8]
 801fb66:	463a      	mov	r2, r7
 801fb68:	4640      	mov	r0, r8
 801fb6a:	4798      	blx	r3
 801fb6c:	6923      	ldr	r3, [r4, #16]
 801fb6e:	3b01      	subs	r3, #1
 801fb70:	6123      	str	r3, [r4, #16]
 801fb72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fb76:	fa5f fa8a 	uxtb.w	sl, sl
 801fb7a:	f1ba 0f02 	cmp.w	sl, #2
 801fb7e:	d1ec      	bne.n	801fb5a <_scanf_float+0x2c6>
 801fb80:	3d03      	subs	r5, #3
 801fb82:	b2ed      	uxtb	r5, r5
 801fb84:	1b76      	subs	r6, r6, r5
 801fb86:	6823      	ldr	r3, [r4, #0]
 801fb88:	05da      	lsls	r2, r3, #23
 801fb8a:	d52f      	bpl.n	801fbec <_scanf_float+0x358>
 801fb8c:	055b      	lsls	r3, r3, #21
 801fb8e:	d510      	bpl.n	801fbb2 <_scanf_float+0x31e>
 801fb90:	455e      	cmp	r6, fp
 801fb92:	f67f aebf 	bls.w	801f914 <_scanf_float+0x80>
 801fb96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fb9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fb9e:	463a      	mov	r2, r7
 801fba0:	4640      	mov	r0, r8
 801fba2:	4798      	blx	r3
 801fba4:	6923      	ldr	r3, [r4, #16]
 801fba6:	3b01      	subs	r3, #1
 801fba8:	6123      	str	r3, [r4, #16]
 801fbaa:	e7f1      	b.n	801fb90 <_scanf_float+0x2fc>
 801fbac:	46aa      	mov	sl, r5
 801fbae:	9602      	str	r6, [sp, #8]
 801fbb0:	e7df      	b.n	801fb72 <_scanf_float+0x2de>
 801fbb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801fbb6:	6923      	ldr	r3, [r4, #16]
 801fbb8:	2965      	cmp	r1, #101	; 0x65
 801fbba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801fbbe:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801fbc2:	6123      	str	r3, [r4, #16]
 801fbc4:	d00c      	beq.n	801fbe0 <_scanf_float+0x34c>
 801fbc6:	2945      	cmp	r1, #69	; 0x45
 801fbc8:	d00a      	beq.n	801fbe0 <_scanf_float+0x34c>
 801fbca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fbce:	463a      	mov	r2, r7
 801fbd0:	4640      	mov	r0, r8
 801fbd2:	4798      	blx	r3
 801fbd4:	6923      	ldr	r3, [r4, #16]
 801fbd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801fbda:	3b01      	subs	r3, #1
 801fbdc:	1eb5      	subs	r5, r6, #2
 801fbde:	6123      	str	r3, [r4, #16]
 801fbe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fbe4:	463a      	mov	r2, r7
 801fbe6:	4640      	mov	r0, r8
 801fbe8:	4798      	blx	r3
 801fbea:	462e      	mov	r6, r5
 801fbec:	6825      	ldr	r5, [r4, #0]
 801fbee:	f015 0510 	ands.w	r5, r5, #16
 801fbf2:	d158      	bne.n	801fca6 <_scanf_float+0x412>
 801fbf4:	7035      	strb	r5, [r6, #0]
 801fbf6:	6823      	ldr	r3, [r4, #0]
 801fbf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801fbfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fc00:	d11c      	bne.n	801fc3c <_scanf_float+0x3a8>
 801fc02:	9b01      	ldr	r3, [sp, #4]
 801fc04:	454b      	cmp	r3, r9
 801fc06:	eba3 0209 	sub.w	r2, r3, r9
 801fc0a:	d124      	bne.n	801fc56 <_scanf_float+0x3c2>
 801fc0c:	2200      	movs	r2, #0
 801fc0e:	4659      	mov	r1, fp
 801fc10:	4640      	mov	r0, r8
 801fc12:	f000 ff77 	bl	8020b04 <_strtod_r>
 801fc16:	9b03      	ldr	r3, [sp, #12]
 801fc18:	6821      	ldr	r1, [r4, #0]
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	f011 0f02 	tst.w	r1, #2
 801fc20:	ec57 6b10 	vmov	r6, r7, d0
 801fc24:	f103 0204 	add.w	r2, r3, #4
 801fc28:	d020      	beq.n	801fc6c <_scanf_float+0x3d8>
 801fc2a:	9903      	ldr	r1, [sp, #12]
 801fc2c:	600a      	str	r2, [r1, #0]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	e9c3 6700 	strd	r6, r7, [r3]
 801fc34:	68e3      	ldr	r3, [r4, #12]
 801fc36:	3301      	adds	r3, #1
 801fc38:	60e3      	str	r3, [r4, #12]
 801fc3a:	e66c      	b.n	801f916 <_scanf_float+0x82>
 801fc3c:	9b04      	ldr	r3, [sp, #16]
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d0e4      	beq.n	801fc0c <_scanf_float+0x378>
 801fc42:	9905      	ldr	r1, [sp, #20]
 801fc44:	230a      	movs	r3, #10
 801fc46:	462a      	mov	r2, r5
 801fc48:	3101      	adds	r1, #1
 801fc4a:	4640      	mov	r0, r8
 801fc4c:	f000 ffe4 	bl	8020c18 <_strtol_r>
 801fc50:	9b04      	ldr	r3, [sp, #16]
 801fc52:	9e05      	ldr	r6, [sp, #20]
 801fc54:	1ac2      	subs	r2, r0, r3
 801fc56:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801fc5a:	429e      	cmp	r6, r3
 801fc5c:	bf28      	it	cs
 801fc5e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801fc62:	4912      	ldr	r1, [pc, #72]	; (801fcac <_scanf_float+0x418>)
 801fc64:	4630      	mov	r0, r6
 801fc66:	f000 f8b5 	bl	801fdd4 <siprintf>
 801fc6a:	e7cf      	b.n	801fc0c <_scanf_float+0x378>
 801fc6c:	f011 0f04 	tst.w	r1, #4
 801fc70:	9903      	ldr	r1, [sp, #12]
 801fc72:	600a      	str	r2, [r1, #0]
 801fc74:	d1db      	bne.n	801fc2e <_scanf_float+0x39a>
 801fc76:	f8d3 8000 	ldr.w	r8, [r3]
 801fc7a:	ee10 2a10 	vmov	r2, s0
 801fc7e:	ee10 0a10 	vmov	r0, s0
 801fc82:	463b      	mov	r3, r7
 801fc84:	4639      	mov	r1, r7
 801fc86:	f7e0 ff51 	bl	8000b2c <__aeabi_dcmpun>
 801fc8a:	b128      	cbz	r0, 801fc98 <_scanf_float+0x404>
 801fc8c:	4808      	ldr	r0, [pc, #32]	; (801fcb0 <_scanf_float+0x41c>)
 801fc8e:	f000 f829 	bl	801fce4 <nanf>
 801fc92:	ed88 0a00 	vstr	s0, [r8]
 801fc96:	e7cd      	b.n	801fc34 <_scanf_float+0x3a0>
 801fc98:	4630      	mov	r0, r6
 801fc9a:	4639      	mov	r1, r7
 801fc9c:	f7e0 ffa4 	bl	8000be8 <__aeabi_d2f>
 801fca0:	f8c8 0000 	str.w	r0, [r8]
 801fca4:	e7c6      	b.n	801fc34 <_scanf_float+0x3a0>
 801fca6:	2500      	movs	r5, #0
 801fca8:	e635      	b.n	801f916 <_scanf_float+0x82>
 801fcaa:	bf00      	nop
 801fcac:	080257d8 	.word	0x080257d8
 801fcb0:	08025bf0 	.word	0x08025bf0

0801fcb4 <realloc>:
 801fcb4:	4b02      	ldr	r3, [pc, #8]	; (801fcc0 <realloc+0xc>)
 801fcb6:	460a      	mov	r2, r1
 801fcb8:	4601      	mov	r1, r0
 801fcba:	6818      	ldr	r0, [r3, #0]
 801fcbc:	f002 beb6 	b.w	8022a2c <_realloc_r>
 801fcc0:	200000c4 	.word	0x200000c4

0801fcc4 <_sbrk_r>:
 801fcc4:	b538      	push	{r3, r4, r5, lr}
 801fcc6:	4d06      	ldr	r5, [pc, #24]	; (801fce0 <_sbrk_r+0x1c>)
 801fcc8:	2300      	movs	r3, #0
 801fcca:	4604      	mov	r4, r0
 801fccc:	4608      	mov	r0, r1
 801fcce:	602b      	str	r3, [r5, #0]
 801fcd0:	f7ee ff12 	bl	800eaf8 <_sbrk>
 801fcd4:	1c43      	adds	r3, r0, #1
 801fcd6:	d102      	bne.n	801fcde <_sbrk_r+0x1a>
 801fcd8:	682b      	ldr	r3, [r5, #0]
 801fcda:	b103      	cbz	r3, 801fcde <_sbrk_r+0x1a>
 801fcdc:	6023      	str	r3, [r4, #0]
 801fcde:	bd38      	pop	{r3, r4, r5, pc}
 801fce0:	2000a94c 	.word	0x2000a94c

0801fce4 <nanf>:
 801fce4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fcec <nanf+0x8>
 801fce8:	4770      	bx	lr
 801fcea:	bf00      	nop
 801fcec:	7fc00000 	.word	0x7fc00000

0801fcf0 <scalbnf>:
 801fcf0:	ee10 3a10 	vmov	r3, s0
 801fcf4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801fcf8:	d025      	beq.n	801fd46 <scalbnf+0x56>
 801fcfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801fcfe:	d302      	bcc.n	801fd06 <scalbnf+0x16>
 801fd00:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fd04:	4770      	bx	lr
 801fd06:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801fd0a:	d122      	bne.n	801fd52 <scalbnf+0x62>
 801fd0c:	4b2a      	ldr	r3, [pc, #168]	; (801fdb8 <scalbnf+0xc8>)
 801fd0e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801fdbc <scalbnf+0xcc>
 801fd12:	4298      	cmp	r0, r3
 801fd14:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fd18:	db16      	blt.n	801fd48 <scalbnf+0x58>
 801fd1a:	ee10 3a10 	vmov	r3, s0
 801fd1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fd22:	3a19      	subs	r2, #25
 801fd24:	4402      	add	r2, r0
 801fd26:	2afe      	cmp	r2, #254	; 0xfe
 801fd28:	dd15      	ble.n	801fd56 <scalbnf+0x66>
 801fd2a:	ee10 3a10 	vmov	r3, s0
 801fd2e:	eddf 7a24 	vldr	s15, [pc, #144]	; 801fdc0 <scalbnf+0xd0>
 801fd32:	eddf 6a24 	vldr	s13, [pc, #144]	; 801fdc4 <scalbnf+0xd4>
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	eeb0 7a67 	vmov.f32	s14, s15
 801fd3c:	bfb8      	it	lt
 801fd3e:	eef0 7a66 	vmovlt.f32	s15, s13
 801fd42:	ee27 0a27 	vmul.f32	s0, s14, s15
 801fd46:	4770      	bx	lr
 801fd48:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fdc8 <scalbnf+0xd8>
 801fd4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fd50:	4770      	bx	lr
 801fd52:	0dd2      	lsrs	r2, r2, #23
 801fd54:	e7e6      	b.n	801fd24 <scalbnf+0x34>
 801fd56:	2a00      	cmp	r2, #0
 801fd58:	dd06      	ble.n	801fd68 <scalbnf+0x78>
 801fd5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fd5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801fd62:	ee00 3a10 	vmov	s0, r3
 801fd66:	4770      	bx	lr
 801fd68:	f112 0f16 	cmn.w	r2, #22
 801fd6c:	da1a      	bge.n	801fda4 <scalbnf+0xb4>
 801fd6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fd72:	4298      	cmp	r0, r3
 801fd74:	ee10 3a10 	vmov	r3, s0
 801fd78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801fd7c:	dd0a      	ble.n	801fd94 <scalbnf+0xa4>
 801fd7e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801fdc0 <scalbnf+0xd0>
 801fd82:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801fdc4 <scalbnf+0xd4>
 801fd86:	eef0 7a40 	vmov.f32	s15, s0
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	bf18      	it	ne
 801fd8e:	eeb0 0a47 	vmovne.f32	s0, s14
 801fd92:	e7db      	b.n	801fd4c <scalbnf+0x5c>
 801fd94:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801fdc8 <scalbnf+0xd8>
 801fd98:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801fdcc <scalbnf+0xdc>
 801fd9c:	eef0 7a40 	vmov.f32	s15, s0
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	e7f3      	b.n	801fd8c <scalbnf+0x9c>
 801fda4:	3219      	adds	r2, #25
 801fda6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fdaa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801fdae:	eddf 7a08 	vldr	s15, [pc, #32]	; 801fdd0 <scalbnf+0xe0>
 801fdb2:	ee07 3a10 	vmov	s14, r3
 801fdb6:	e7c4      	b.n	801fd42 <scalbnf+0x52>
 801fdb8:	ffff3cb0 	.word	0xffff3cb0
 801fdbc:	4c000000 	.word	0x4c000000
 801fdc0:	7149f2ca 	.word	0x7149f2ca
 801fdc4:	f149f2ca 	.word	0xf149f2ca
 801fdc8:	0da24260 	.word	0x0da24260
 801fdcc:	8da24260 	.word	0x8da24260
 801fdd0:	33000000 	.word	0x33000000

0801fdd4 <siprintf>:
 801fdd4:	b40e      	push	{r1, r2, r3}
 801fdd6:	b500      	push	{lr}
 801fdd8:	b09c      	sub	sp, #112	; 0x70
 801fdda:	ab1d      	add	r3, sp, #116	; 0x74
 801fddc:	9002      	str	r0, [sp, #8]
 801fdde:	9006      	str	r0, [sp, #24]
 801fde0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fde4:	4809      	ldr	r0, [pc, #36]	; (801fe0c <siprintf+0x38>)
 801fde6:	9107      	str	r1, [sp, #28]
 801fde8:	9104      	str	r1, [sp, #16]
 801fdea:	4909      	ldr	r1, [pc, #36]	; (801fe10 <siprintf+0x3c>)
 801fdec:	f853 2b04 	ldr.w	r2, [r3], #4
 801fdf0:	9105      	str	r1, [sp, #20]
 801fdf2:	6800      	ldr	r0, [r0, #0]
 801fdf4:	9301      	str	r3, [sp, #4]
 801fdf6:	a902      	add	r1, sp, #8
 801fdf8:	f002 fe9a 	bl	8022b30 <_svfiprintf_r>
 801fdfc:	9b02      	ldr	r3, [sp, #8]
 801fdfe:	2200      	movs	r2, #0
 801fe00:	701a      	strb	r2, [r3, #0]
 801fe02:	b01c      	add	sp, #112	; 0x70
 801fe04:	f85d eb04 	ldr.w	lr, [sp], #4
 801fe08:	b003      	add	sp, #12
 801fe0a:	4770      	bx	lr
 801fe0c:	200000c4 	.word	0x200000c4
 801fe10:	ffff0208 	.word	0xffff0208

0801fe14 <__sread>:
 801fe14:	b510      	push	{r4, lr}
 801fe16:	460c      	mov	r4, r1
 801fe18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe1c:	f002 ff88 	bl	8022d30 <_read_r>
 801fe20:	2800      	cmp	r0, #0
 801fe22:	bfab      	itete	ge
 801fe24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fe26:	89a3      	ldrhlt	r3, [r4, #12]
 801fe28:	181b      	addge	r3, r3, r0
 801fe2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fe2e:	bfac      	ite	ge
 801fe30:	6563      	strge	r3, [r4, #84]	; 0x54
 801fe32:	81a3      	strhlt	r3, [r4, #12]
 801fe34:	bd10      	pop	{r4, pc}

0801fe36 <__swrite>:
 801fe36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe3a:	461f      	mov	r7, r3
 801fe3c:	898b      	ldrh	r3, [r1, #12]
 801fe3e:	05db      	lsls	r3, r3, #23
 801fe40:	4605      	mov	r5, r0
 801fe42:	460c      	mov	r4, r1
 801fe44:	4616      	mov	r6, r2
 801fe46:	d505      	bpl.n	801fe54 <__swrite+0x1e>
 801fe48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe4c:	2302      	movs	r3, #2
 801fe4e:	2200      	movs	r2, #0
 801fe50:	f002 f8f2 	bl	8022038 <_lseek_r>
 801fe54:	89a3      	ldrh	r3, [r4, #12]
 801fe56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fe5e:	81a3      	strh	r3, [r4, #12]
 801fe60:	4632      	mov	r2, r6
 801fe62:	463b      	mov	r3, r7
 801fe64:	4628      	mov	r0, r5
 801fe66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe6a:	f000 bed7 	b.w	8020c1c <_write_r>

0801fe6e <__sseek>:
 801fe6e:	b510      	push	{r4, lr}
 801fe70:	460c      	mov	r4, r1
 801fe72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe76:	f002 f8df 	bl	8022038 <_lseek_r>
 801fe7a:	1c43      	adds	r3, r0, #1
 801fe7c:	89a3      	ldrh	r3, [r4, #12]
 801fe7e:	bf15      	itete	ne
 801fe80:	6560      	strne	r0, [r4, #84]	; 0x54
 801fe82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fe86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fe8a:	81a3      	strheq	r3, [r4, #12]
 801fe8c:	bf18      	it	ne
 801fe8e:	81a3      	strhne	r3, [r4, #12]
 801fe90:	bd10      	pop	{r4, pc}

0801fe92 <__sclose>:
 801fe92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe96:	f000 bed3 	b.w	8020c40 <_close_r>

0801fe9a <strcat>:
 801fe9a:	b510      	push	{r4, lr}
 801fe9c:	4602      	mov	r2, r0
 801fe9e:	7814      	ldrb	r4, [r2, #0]
 801fea0:	4613      	mov	r3, r2
 801fea2:	3201      	adds	r2, #1
 801fea4:	2c00      	cmp	r4, #0
 801fea6:	d1fa      	bne.n	801fe9e <strcat+0x4>
 801fea8:	3b01      	subs	r3, #1
 801feaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801feae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801feb2:	2a00      	cmp	r2, #0
 801feb4:	d1f9      	bne.n	801feaa <strcat+0x10>
 801feb6:	bd10      	pop	{r4, pc}

0801feb8 <sulp>:
 801feb8:	b570      	push	{r4, r5, r6, lr}
 801feba:	4604      	mov	r4, r0
 801febc:	460d      	mov	r5, r1
 801febe:	ec45 4b10 	vmov	d0, r4, r5
 801fec2:	4616      	mov	r6, r2
 801fec4:	f002 fc54 	bl	8022770 <__ulp>
 801fec8:	ec51 0b10 	vmov	r0, r1, d0
 801fecc:	b17e      	cbz	r6, 801feee <sulp+0x36>
 801fece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801fed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	dd09      	ble.n	801feee <sulp+0x36>
 801feda:	051b      	lsls	r3, r3, #20
 801fedc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801fee0:	2400      	movs	r4, #0
 801fee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801fee6:	4622      	mov	r2, r4
 801fee8:	462b      	mov	r3, r5
 801feea:	f7e0 fb85 	bl	80005f8 <__aeabi_dmul>
 801feee:	bd70      	pop	{r4, r5, r6, pc}

0801fef0 <_strtod_l>:
 801fef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fef4:	b0a3      	sub	sp, #140	; 0x8c
 801fef6:	461f      	mov	r7, r3
 801fef8:	2300      	movs	r3, #0
 801fefa:	931e      	str	r3, [sp, #120]	; 0x78
 801fefc:	4ba4      	ldr	r3, [pc, #656]	; (8020190 <_strtod_l+0x2a0>)
 801fefe:	9219      	str	r2, [sp, #100]	; 0x64
 801ff00:	681b      	ldr	r3, [r3, #0]
 801ff02:	9307      	str	r3, [sp, #28]
 801ff04:	4604      	mov	r4, r0
 801ff06:	4618      	mov	r0, r3
 801ff08:	4688      	mov	r8, r1
 801ff0a:	f7e0 f961 	bl	80001d0 <strlen>
 801ff0e:	f04f 0a00 	mov.w	sl, #0
 801ff12:	4605      	mov	r5, r0
 801ff14:	f04f 0b00 	mov.w	fp, #0
 801ff18:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ff1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff1e:	781a      	ldrb	r2, [r3, #0]
 801ff20:	2a2b      	cmp	r2, #43	; 0x2b
 801ff22:	d04c      	beq.n	801ffbe <_strtod_l+0xce>
 801ff24:	d839      	bhi.n	801ff9a <_strtod_l+0xaa>
 801ff26:	2a0d      	cmp	r2, #13
 801ff28:	d832      	bhi.n	801ff90 <_strtod_l+0xa0>
 801ff2a:	2a08      	cmp	r2, #8
 801ff2c:	d832      	bhi.n	801ff94 <_strtod_l+0xa4>
 801ff2e:	2a00      	cmp	r2, #0
 801ff30:	d03c      	beq.n	801ffac <_strtod_l+0xbc>
 801ff32:	2300      	movs	r3, #0
 801ff34:	930e      	str	r3, [sp, #56]	; 0x38
 801ff36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801ff38:	7833      	ldrb	r3, [r6, #0]
 801ff3a:	2b30      	cmp	r3, #48	; 0x30
 801ff3c:	f040 80b4 	bne.w	80200a8 <_strtod_l+0x1b8>
 801ff40:	7873      	ldrb	r3, [r6, #1]
 801ff42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ff46:	2b58      	cmp	r3, #88	; 0x58
 801ff48:	d16c      	bne.n	8020024 <_strtod_l+0x134>
 801ff4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff4c:	9301      	str	r3, [sp, #4]
 801ff4e:	ab1e      	add	r3, sp, #120	; 0x78
 801ff50:	9702      	str	r7, [sp, #8]
 801ff52:	9300      	str	r3, [sp, #0]
 801ff54:	4a8f      	ldr	r2, [pc, #572]	; (8020194 <_strtod_l+0x2a4>)
 801ff56:	ab1f      	add	r3, sp, #124	; 0x7c
 801ff58:	a91d      	add	r1, sp, #116	; 0x74
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f001 fd60 	bl	8021a20 <__gethex>
 801ff60:	f010 0707 	ands.w	r7, r0, #7
 801ff64:	4605      	mov	r5, r0
 801ff66:	d005      	beq.n	801ff74 <_strtod_l+0x84>
 801ff68:	2f06      	cmp	r7, #6
 801ff6a:	d12a      	bne.n	801ffc2 <_strtod_l+0xd2>
 801ff6c:	3601      	adds	r6, #1
 801ff6e:	2300      	movs	r3, #0
 801ff70:	961d      	str	r6, [sp, #116]	; 0x74
 801ff72:	930e      	str	r3, [sp, #56]	; 0x38
 801ff74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	f040 8596 	bne.w	8020aa8 <_strtod_l+0xbb8>
 801ff7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff7e:	b1db      	cbz	r3, 801ffb8 <_strtod_l+0xc8>
 801ff80:	4652      	mov	r2, sl
 801ff82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ff86:	ec43 2b10 	vmov	d0, r2, r3
 801ff8a:	b023      	add	sp, #140	; 0x8c
 801ff8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff90:	2a20      	cmp	r2, #32
 801ff92:	d1ce      	bne.n	801ff32 <_strtod_l+0x42>
 801ff94:	3301      	adds	r3, #1
 801ff96:	931d      	str	r3, [sp, #116]	; 0x74
 801ff98:	e7c0      	b.n	801ff1c <_strtod_l+0x2c>
 801ff9a:	2a2d      	cmp	r2, #45	; 0x2d
 801ff9c:	d1c9      	bne.n	801ff32 <_strtod_l+0x42>
 801ff9e:	2201      	movs	r2, #1
 801ffa0:	920e      	str	r2, [sp, #56]	; 0x38
 801ffa2:	1c5a      	adds	r2, r3, #1
 801ffa4:	921d      	str	r2, [sp, #116]	; 0x74
 801ffa6:	785b      	ldrb	r3, [r3, #1]
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d1c4      	bne.n	801ff36 <_strtod_l+0x46>
 801ffac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ffae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	f040 8576 	bne.w	8020aa4 <_strtod_l+0xbb4>
 801ffb8:	4652      	mov	r2, sl
 801ffba:	465b      	mov	r3, fp
 801ffbc:	e7e3      	b.n	801ff86 <_strtod_l+0x96>
 801ffbe:	2200      	movs	r2, #0
 801ffc0:	e7ee      	b.n	801ffa0 <_strtod_l+0xb0>
 801ffc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ffc4:	b13a      	cbz	r2, 801ffd6 <_strtod_l+0xe6>
 801ffc6:	2135      	movs	r1, #53	; 0x35
 801ffc8:	a820      	add	r0, sp, #128	; 0x80
 801ffca:	f002 fcdc 	bl	8022986 <__copybits>
 801ffce:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ffd0:	4620      	mov	r0, r4
 801ffd2:	f002 f8a1 	bl	8022118 <_Bfree>
 801ffd6:	3f01      	subs	r7, #1
 801ffd8:	2f05      	cmp	r7, #5
 801ffda:	d807      	bhi.n	801ffec <_strtod_l+0xfc>
 801ffdc:	e8df f007 	tbb	[pc, r7]
 801ffe0:	1d180b0e 	.word	0x1d180b0e
 801ffe4:	030e      	.short	0x030e
 801ffe6:	f04f 0b00 	mov.w	fp, #0
 801ffea:	46da      	mov	sl, fp
 801ffec:	0728      	lsls	r0, r5, #28
 801ffee:	d5c1      	bpl.n	801ff74 <_strtod_l+0x84>
 801fff0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801fff4:	e7be      	b.n	801ff74 <_strtod_l+0x84>
 801fff6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801fffa:	e7f7      	b.n	801ffec <_strtod_l+0xfc>
 801fffc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8020000:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802000a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802000e:	e7ed      	b.n	801ffec <_strtod_l+0xfc>
 8020010:	f8df b184 	ldr.w	fp, [pc, #388]	; 8020198 <_strtod_l+0x2a8>
 8020014:	f04f 0a00 	mov.w	sl, #0
 8020018:	e7e8      	b.n	801ffec <_strtod_l+0xfc>
 802001a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802001e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020022:	e7e3      	b.n	801ffec <_strtod_l+0xfc>
 8020024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020026:	1c5a      	adds	r2, r3, #1
 8020028:	921d      	str	r2, [sp, #116]	; 0x74
 802002a:	785b      	ldrb	r3, [r3, #1]
 802002c:	2b30      	cmp	r3, #48	; 0x30
 802002e:	d0f9      	beq.n	8020024 <_strtod_l+0x134>
 8020030:	2b00      	cmp	r3, #0
 8020032:	d09f      	beq.n	801ff74 <_strtod_l+0x84>
 8020034:	2301      	movs	r3, #1
 8020036:	f04f 0900 	mov.w	r9, #0
 802003a:	9304      	str	r3, [sp, #16]
 802003c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802003e:	930a      	str	r3, [sp, #40]	; 0x28
 8020040:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020044:	464f      	mov	r7, r9
 8020046:	220a      	movs	r2, #10
 8020048:	981d      	ldr	r0, [sp, #116]	; 0x74
 802004a:	7806      	ldrb	r6, [r0, #0]
 802004c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8020050:	b2d9      	uxtb	r1, r3
 8020052:	2909      	cmp	r1, #9
 8020054:	d92a      	bls.n	80200ac <_strtod_l+0x1bc>
 8020056:	9907      	ldr	r1, [sp, #28]
 8020058:	462a      	mov	r2, r5
 802005a:	f002 fe92 	bl	8022d82 <strncmp>
 802005e:	b398      	cbz	r0, 80200c8 <_strtod_l+0x1d8>
 8020060:	2000      	movs	r0, #0
 8020062:	4633      	mov	r3, r6
 8020064:	463d      	mov	r5, r7
 8020066:	9007      	str	r0, [sp, #28]
 8020068:	4602      	mov	r2, r0
 802006a:	2b65      	cmp	r3, #101	; 0x65
 802006c:	d001      	beq.n	8020072 <_strtod_l+0x182>
 802006e:	2b45      	cmp	r3, #69	; 0x45
 8020070:	d118      	bne.n	80200a4 <_strtod_l+0x1b4>
 8020072:	b91d      	cbnz	r5, 802007c <_strtod_l+0x18c>
 8020074:	9b04      	ldr	r3, [sp, #16]
 8020076:	4303      	orrs	r3, r0
 8020078:	d098      	beq.n	801ffac <_strtod_l+0xbc>
 802007a:	2500      	movs	r5, #0
 802007c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8020080:	f108 0301 	add.w	r3, r8, #1
 8020084:	931d      	str	r3, [sp, #116]	; 0x74
 8020086:	f898 3001 	ldrb.w	r3, [r8, #1]
 802008a:	2b2b      	cmp	r3, #43	; 0x2b
 802008c:	d075      	beq.n	802017a <_strtod_l+0x28a>
 802008e:	2b2d      	cmp	r3, #45	; 0x2d
 8020090:	d07b      	beq.n	802018a <_strtod_l+0x29a>
 8020092:	f04f 0c00 	mov.w	ip, #0
 8020096:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802009a:	2909      	cmp	r1, #9
 802009c:	f240 8082 	bls.w	80201a4 <_strtod_l+0x2b4>
 80200a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80200a4:	2600      	movs	r6, #0
 80200a6:	e09d      	b.n	80201e4 <_strtod_l+0x2f4>
 80200a8:	2300      	movs	r3, #0
 80200aa:	e7c4      	b.n	8020036 <_strtod_l+0x146>
 80200ac:	2f08      	cmp	r7, #8
 80200ae:	bfd8      	it	le
 80200b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80200b2:	f100 0001 	add.w	r0, r0, #1
 80200b6:	bfda      	itte	le
 80200b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80200bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80200be:	fb02 3909 	mlagt	r9, r2, r9, r3
 80200c2:	3701      	adds	r7, #1
 80200c4:	901d      	str	r0, [sp, #116]	; 0x74
 80200c6:	e7bf      	b.n	8020048 <_strtod_l+0x158>
 80200c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200ca:	195a      	adds	r2, r3, r5
 80200cc:	921d      	str	r2, [sp, #116]	; 0x74
 80200ce:	5d5b      	ldrb	r3, [r3, r5]
 80200d0:	2f00      	cmp	r7, #0
 80200d2:	d037      	beq.n	8020144 <_strtod_l+0x254>
 80200d4:	9007      	str	r0, [sp, #28]
 80200d6:	463d      	mov	r5, r7
 80200d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80200dc:	2a09      	cmp	r2, #9
 80200de:	d912      	bls.n	8020106 <_strtod_l+0x216>
 80200e0:	2201      	movs	r2, #1
 80200e2:	e7c2      	b.n	802006a <_strtod_l+0x17a>
 80200e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200e6:	1c5a      	adds	r2, r3, #1
 80200e8:	921d      	str	r2, [sp, #116]	; 0x74
 80200ea:	785b      	ldrb	r3, [r3, #1]
 80200ec:	3001      	adds	r0, #1
 80200ee:	2b30      	cmp	r3, #48	; 0x30
 80200f0:	d0f8      	beq.n	80200e4 <_strtod_l+0x1f4>
 80200f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80200f6:	2a08      	cmp	r2, #8
 80200f8:	f200 84db 	bhi.w	8020ab2 <_strtod_l+0xbc2>
 80200fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80200fe:	9007      	str	r0, [sp, #28]
 8020100:	2000      	movs	r0, #0
 8020102:	920a      	str	r2, [sp, #40]	; 0x28
 8020104:	4605      	mov	r5, r0
 8020106:	3b30      	subs	r3, #48	; 0x30
 8020108:	f100 0201 	add.w	r2, r0, #1
 802010c:	d014      	beq.n	8020138 <_strtod_l+0x248>
 802010e:	9907      	ldr	r1, [sp, #28]
 8020110:	4411      	add	r1, r2
 8020112:	9107      	str	r1, [sp, #28]
 8020114:	462a      	mov	r2, r5
 8020116:	eb00 0e05 	add.w	lr, r0, r5
 802011a:	210a      	movs	r1, #10
 802011c:	4572      	cmp	r2, lr
 802011e:	d113      	bne.n	8020148 <_strtod_l+0x258>
 8020120:	182a      	adds	r2, r5, r0
 8020122:	2a08      	cmp	r2, #8
 8020124:	f105 0501 	add.w	r5, r5, #1
 8020128:	4405      	add	r5, r0
 802012a:	dc1c      	bgt.n	8020166 <_strtod_l+0x276>
 802012c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802012e:	220a      	movs	r2, #10
 8020130:	fb02 3301 	mla	r3, r2, r1, r3
 8020134:	9309      	str	r3, [sp, #36]	; 0x24
 8020136:	2200      	movs	r2, #0
 8020138:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802013a:	1c59      	adds	r1, r3, #1
 802013c:	911d      	str	r1, [sp, #116]	; 0x74
 802013e:	785b      	ldrb	r3, [r3, #1]
 8020140:	4610      	mov	r0, r2
 8020142:	e7c9      	b.n	80200d8 <_strtod_l+0x1e8>
 8020144:	4638      	mov	r0, r7
 8020146:	e7d2      	b.n	80200ee <_strtod_l+0x1fe>
 8020148:	2a08      	cmp	r2, #8
 802014a:	dc04      	bgt.n	8020156 <_strtod_l+0x266>
 802014c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802014e:	434e      	muls	r6, r1
 8020150:	9609      	str	r6, [sp, #36]	; 0x24
 8020152:	3201      	adds	r2, #1
 8020154:	e7e2      	b.n	802011c <_strtod_l+0x22c>
 8020156:	f102 0c01 	add.w	ip, r2, #1
 802015a:	f1bc 0f10 	cmp.w	ip, #16
 802015e:	bfd8      	it	le
 8020160:	fb01 f909 	mulle.w	r9, r1, r9
 8020164:	e7f5      	b.n	8020152 <_strtod_l+0x262>
 8020166:	2d10      	cmp	r5, #16
 8020168:	bfdc      	itt	le
 802016a:	220a      	movle	r2, #10
 802016c:	fb02 3909 	mlale	r9, r2, r9, r3
 8020170:	e7e1      	b.n	8020136 <_strtod_l+0x246>
 8020172:	2300      	movs	r3, #0
 8020174:	9307      	str	r3, [sp, #28]
 8020176:	2201      	movs	r2, #1
 8020178:	e77c      	b.n	8020074 <_strtod_l+0x184>
 802017a:	f04f 0c00 	mov.w	ip, #0
 802017e:	f108 0302 	add.w	r3, r8, #2
 8020182:	931d      	str	r3, [sp, #116]	; 0x74
 8020184:	f898 3002 	ldrb.w	r3, [r8, #2]
 8020188:	e785      	b.n	8020096 <_strtod_l+0x1a6>
 802018a:	f04f 0c01 	mov.w	ip, #1
 802018e:	e7f6      	b.n	802017e <_strtod_l+0x28e>
 8020190:	08025a30 	.word	0x08025a30
 8020194:	080257e0 	.word	0x080257e0
 8020198:	7ff00000 	.word	0x7ff00000
 802019c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802019e:	1c59      	adds	r1, r3, #1
 80201a0:	911d      	str	r1, [sp, #116]	; 0x74
 80201a2:	785b      	ldrb	r3, [r3, #1]
 80201a4:	2b30      	cmp	r3, #48	; 0x30
 80201a6:	d0f9      	beq.n	802019c <_strtod_l+0x2ac>
 80201a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80201ac:	2908      	cmp	r1, #8
 80201ae:	f63f af79 	bhi.w	80200a4 <_strtod_l+0x1b4>
 80201b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80201b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80201b8:	9308      	str	r3, [sp, #32]
 80201ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80201bc:	1c59      	adds	r1, r3, #1
 80201be:	911d      	str	r1, [sp, #116]	; 0x74
 80201c0:	785b      	ldrb	r3, [r3, #1]
 80201c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80201c6:	2e09      	cmp	r6, #9
 80201c8:	d937      	bls.n	802023a <_strtod_l+0x34a>
 80201ca:	9e08      	ldr	r6, [sp, #32]
 80201cc:	1b89      	subs	r1, r1, r6
 80201ce:	2908      	cmp	r1, #8
 80201d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80201d4:	dc02      	bgt.n	80201dc <_strtod_l+0x2ec>
 80201d6:	4576      	cmp	r6, lr
 80201d8:	bfa8      	it	ge
 80201da:	4676      	movge	r6, lr
 80201dc:	f1bc 0f00 	cmp.w	ip, #0
 80201e0:	d000      	beq.n	80201e4 <_strtod_l+0x2f4>
 80201e2:	4276      	negs	r6, r6
 80201e4:	2d00      	cmp	r5, #0
 80201e6:	d14f      	bne.n	8020288 <_strtod_l+0x398>
 80201e8:	9904      	ldr	r1, [sp, #16]
 80201ea:	4301      	orrs	r1, r0
 80201ec:	f47f aec2 	bne.w	801ff74 <_strtod_l+0x84>
 80201f0:	2a00      	cmp	r2, #0
 80201f2:	f47f aedb 	bne.w	801ffac <_strtod_l+0xbc>
 80201f6:	2b69      	cmp	r3, #105	; 0x69
 80201f8:	d027      	beq.n	802024a <_strtod_l+0x35a>
 80201fa:	dc24      	bgt.n	8020246 <_strtod_l+0x356>
 80201fc:	2b49      	cmp	r3, #73	; 0x49
 80201fe:	d024      	beq.n	802024a <_strtod_l+0x35a>
 8020200:	2b4e      	cmp	r3, #78	; 0x4e
 8020202:	f47f aed3 	bne.w	801ffac <_strtod_l+0xbc>
 8020206:	499e      	ldr	r1, [pc, #632]	; (8020480 <_strtod_l+0x590>)
 8020208:	a81d      	add	r0, sp, #116	; 0x74
 802020a:	f001 fe61 	bl	8021ed0 <__match>
 802020e:	2800      	cmp	r0, #0
 8020210:	f43f aecc 	beq.w	801ffac <_strtod_l+0xbc>
 8020214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020216:	781b      	ldrb	r3, [r3, #0]
 8020218:	2b28      	cmp	r3, #40	; 0x28
 802021a:	d12d      	bne.n	8020278 <_strtod_l+0x388>
 802021c:	4999      	ldr	r1, [pc, #612]	; (8020484 <_strtod_l+0x594>)
 802021e:	aa20      	add	r2, sp, #128	; 0x80
 8020220:	a81d      	add	r0, sp, #116	; 0x74
 8020222:	f001 fe69 	bl	8021ef8 <__hexnan>
 8020226:	2805      	cmp	r0, #5
 8020228:	d126      	bne.n	8020278 <_strtod_l+0x388>
 802022a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802022c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8020230:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020234:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8020238:	e69c      	b.n	801ff74 <_strtod_l+0x84>
 802023a:	210a      	movs	r1, #10
 802023c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8020240:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020244:	e7b9      	b.n	80201ba <_strtod_l+0x2ca>
 8020246:	2b6e      	cmp	r3, #110	; 0x6e
 8020248:	e7db      	b.n	8020202 <_strtod_l+0x312>
 802024a:	498f      	ldr	r1, [pc, #572]	; (8020488 <_strtod_l+0x598>)
 802024c:	a81d      	add	r0, sp, #116	; 0x74
 802024e:	f001 fe3f 	bl	8021ed0 <__match>
 8020252:	2800      	cmp	r0, #0
 8020254:	f43f aeaa 	beq.w	801ffac <_strtod_l+0xbc>
 8020258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802025a:	498c      	ldr	r1, [pc, #560]	; (802048c <_strtod_l+0x59c>)
 802025c:	3b01      	subs	r3, #1
 802025e:	a81d      	add	r0, sp, #116	; 0x74
 8020260:	931d      	str	r3, [sp, #116]	; 0x74
 8020262:	f001 fe35 	bl	8021ed0 <__match>
 8020266:	b910      	cbnz	r0, 802026e <_strtod_l+0x37e>
 8020268:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802026a:	3301      	adds	r3, #1
 802026c:	931d      	str	r3, [sp, #116]	; 0x74
 802026e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 802049c <_strtod_l+0x5ac>
 8020272:	f04f 0a00 	mov.w	sl, #0
 8020276:	e67d      	b.n	801ff74 <_strtod_l+0x84>
 8020278:	4885      	ldr	r0, [pc, #532]	; (8020490 <_strtod_l+0x5a0>)
 802027a:	f002 fd6d 	bl	8022d58 <nan>
 802027e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8020282:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8020286:	e675      	b.n	801ff74 <_strtod_l+0x84>
 8020288:	9b07      	ldr	r3, [sp, #28]
 802028a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802028c:	1af3      	subs	r3, r6, r3
 802028e:	2f00      	cmp	r7, #0
 8020290:	bf08      	it	eq
 8020292:	462f      	moveq	r7, r5
 8020294:	2d10      	cmp	r5, #16
 8020296:	9308      	str	r3, [sp, #32]
 8020298:	46a8      	mov	r8, r5
 802029a:	bfa8      	it	ge
 802029c:	f04f 0810 	movge.w	r8, #16
 80202a0:	f7e0 f930 	bl	8000504 <__aeabi_ui2d>
 80202a4:	2d09      	cmp	r5, #9
 80202a6:	4682      	mov	sl, r0
 80202a8:	468b      	mov	fp, r1
 80202aa:	dd13      	ble.n	80202d4 <_strtod_l+0x3e4>
 80202ac:	4b79      	ldr	r3, [pc, #484]	; (8020494 <_strtod_l+0x5a4>)
 80202ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80202b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80202b6:	f7e0 f99f 	bl	80005f8 <__aeabi_dmul>
 80202ba:	4682      	mov	sl, r0
 80202bc:	4648      	mov	r0, r9
 80202be:	468b      	mov	fp, r1
 80202c0:	f7e0 f920 	bl	8000504 <__aeabi_ui2d>
 80202c4:	4602      	mov	r2, r0
 80202c6:	460b      	mov	r3, r1
 80202c8:	4650      	mov	r0, sl
 80202ca:	4659      	mov	r1, fp
 80202cc:	f7df ffde 	bl	800028c <__adddf3>
 80202d0:	4682      	mov	sl, r0
 80202d2:	468b      	mov	fp, r1
 80202d4:	2d0f      	cmp	r5, #15
 80202d6:	dc38      	bgt.n	802034a <_strtod_l+0x45a>
 80202d8:	9b08      	ldr	r3, [sp, #32]
 80202da:	2b00      	cmp	r3, #0
 80202dc:	f43f ae4a 	beq.w	801ff74 <_strtod_l+0x84>
 80202e0:	dd24      	ble.n	802032c <_strtod_l+0x43c>
 80202e2:	2b16      	cmp	r3, #22
 80202e4:	dc0b      	bgt.n	80202fe <_strtod_l+0x40e>
 80202e6:	4d6b      	ldr	r5, [pc, #428]	; (8020494 <_strtod_l+0x5a4>)
 80202e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80202ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80202f0:	4652      	mov	r2, sl
 80202f2:	465b      	mov	r3, fp
 80202f4:	f7e0 f980 	bl	80005f8 <__aeabi_dmul>
 80202f8:	4682      	mov	sl, r0
 80202fa:	468b      	mov	fp, r1
 80202fc:	e63a      	b.n	801ff74 <_strtod_l+0x84>
 80202fe:	9a08      	ldr	r2, [sp, #32]
 8020300:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8020304:	4293      	cmp	r3, r2
 8020306:	db20      	blt.n	802034a <_strtod_l+0x45a>
 8020308:	4c62      	ldr	r4, [pc, #392]	; (8020494 <_strtod_l+0x5a4>)
 802030a:	f1c5 050f 	rsb	r5, r5, #15
 802030e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020312:	4652      	mov	r2, sl
 8020314:	465b      	mov	r3, fp
 8020316:	e9d1 0100 	ldrd	r0, r1, [r1]
 802031a:	f7e0 f96d 	bl	80005f8 <__aeabi_dmul>
 802031e:	9b08      	ldr	r3, [sp, #32]
 8020320:	1b5d      	subs	r5, r3, r5
 8020322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020326:	e9d4 2300 	ldrd	r2, r3, [r4]
 802032a:	e7e3      	b.n	80202f4 <_strtod_l+0x404>
 802032c:	9b08      	ldr	r3, [sp, #32]
 802032e:	3316      	adds	r3, #22
 8020330:	db0b      	blt.n	802034a <_strtod_l+0x45a>
 8020332:	9b07      	ldr	r3, [sp, #28]
 8020334:	4a57      	ldr	r2, [pc, #348]	; (8020494 <_strtod_l+0x5a4>)
 8020336:	1b9e      	subs	r6, r3, r6
 8020338:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802033c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020340:	4650      	mov	r0, sl
 8020342:	4659      	mov	r1, fp
 8020344:	f7e0 fa82 	bl	800084c <__aeabi_ddiv>
 8020348:	e7d6      	b.n	80202f8 <_strtod_l+0x408>
 802034a:	9b08      	ldr	r3, [sp, #32]
 802034c:	eba5 0808 	sub.w	r8, r5, r8
 8020350:	4498      	add	r8, r3
 8020352:	f1b8 0f00 	cmp.w	r8, #0
 8020356:	dd71      	ble.n	802043c <_strtod_l+0x54c>
 8020358:	f018 030f 	ands.w	r3, r8, #15
 802035c:	d00a      	beq.n	8020374 <_strtod_l+0x484>
 802035e:	494d      	ldr	r1, [pc, #308]	; (8020494 <_strtod_l+0x5a4>)
 8020360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020364:	4652      	mov	r2, sl
 8020366:	465b      	mov	r3, fp
 8020368:	e9d1 0100 	ldrd	r0, r1, [r1]
 802036c:	f7e0 f944 	bl	80005f8 <__aeabi_dmul>
 8020370:	4682      	mov	sl, r0
 8020372:	468b      	mov	fp, r1
 8020374:	f038 080f 	bics.w	r8, r8, #15
 8020378:	d04d      	beq.n	8020416 <_strtod_l+0x526>
 802037a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802037e:	dd22      	ble.n	80203c6 <_strtod_l+0x4d6>
 8020380:	2500      	movs	r5, #0
 8020382:	462e      	mov	r6, r5
 8020384:	9509      	str	r5, [sp, #36]	; 0x24
 8020386:	9507      	str	r5, [sp, #28]
 8020388:	2322      	movs	r3, #34	; 0x22
 802038a:	f8df b110 	ldr.w	fp, [pc, #272]	; 802049c <_strtod_l+0x5ac>
 802038e:	6023      	str	r3, [r4, #0]
 8020390:	f04f 0a00 	mov.w	sl, #0
 8020394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020396:	2b00      	cmp	r3, #0
 8020398:	f43f adec 	beq.w	801ff74 <_strtod_l+0x84>
 802039c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802039e:	4620      	mov	r0, r4
 80203a0:	f001 feba 	bl	8022118 <_Bfree>
 80203a4:	9907      	ldr	r1, [sp, #28]
 80203a6:	4620      	mov	r0, r4
 80203a8:	f001 feb6 	bl	8022118 <_Bfree>
 80203ac:	4631      	mov	r1, r6
 80203ae:	4620      	mov	r0, r4
 80203b0:	f001 feb2 	bl	8022118 <_Bfree>
 80203b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80203b6:	4620      	mov	r0, r4
 80203b8:	f001 feae 	bl	8022118 <_Bfree>
 80203bc:	4629      	mov	r1, r5
 80203be:	4620      	mov	r0, r4
 80203c0:	f001 feaa 	bl	8022118 <_Bfree>
 80203c4:	e5d6      	b.n	801ff74 <_strtod_l+0x84>
 80203c6:	2300      	movs	r3, #0
 80203c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80203cc:	4650      	mov	r0, sl
 80203ce:	4659      	mov	r1, fp
 80203d0:	4699      	mov	r9, r3
 80203d2:	f1b8 0f01 	cmp.w	r8, #1
 80203d6:	dc21      	bgt.n	802041c <_strtod_l+0x52c>
 80203d8:	b10b      	cbz	r3, 80203de <_strtod_l+0x4ee>
 80203da:	4682      	mov	sl, r0
 80203dc:	468b      	mov	fp, r1
 80203de:	4b2e      	ldr	r3, [pc, #184]	; (8020498 <_strtod_l+0x5a8>)
 80203e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80203e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80203e8:	4652      	mov	r2, sl
 80203ea:	465b      	mov	r3, fp
 80203ec:	e9d9 0100 	ldrd	r0, r1, [r9]
 80203f0:	f7e0 f902 	bl	80005f8 <__aeabi_dmul>
 80203f4:	4b29      	ldr	r3, [pc, #164]	; (802049c <_strtod_l+0x5ac>)
 80203f6:	460a      	mov	r2, r1
 80203f8:	400b      	ands	r3, r1
 80203fa:	4929      	ldr	r1, [pc, #164]	; (80204a0 <_strtod_l+0x5b0>)
 80203fc:	428b      	cmp	r3, r1
 80203fe:	4682      	mov	sl, r0
 8020400:	d8be      	bhi.n	8020380 <_strtod_l+0x490>
 8020402:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8020406:	428b      	cmp	r3, r1
 8020408:	bf86      	itte	hi
 802040a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80204a4 <_strtod_l+0x5b4>
 802040e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8020412:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8020416:	2300      	movs	r3, #0
 8020418:	9304      	str	r3, [sp, #16]
 802041a:	e081      	b.n	8020520 <_strtod_l+0x630>
 802041c:	f018 0f01 	tst.w	r8, #1
 8020420:	d007      	beq.n	8020432 <_strtod_l+0x542>
 8020422:	4b1d      	ldr	r3, [pc, #116]	; (8020498 <_strtod_l+0x5a8>)
 8020424:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8020428:	e9d3 2300 	ldrd	r2, r3, [r3]
 802042c:	f7e0 f8e4 	bl	80005f8 <__aeabi_dmul>
 8020430:	2301      	movs	r3, #1
 8020432:	f109 0901 	add.w	r9, r9, #1
 8020436:	ea4f 0868 	mov.w	r8, r8, asr #1
 802043a:	e7ca      	b.n	80203d2 <_strtod_l+0x4e2>
 802043c:	d0eb      	beq.n	8020416 <_strtod_l+0x526>
 802043e:	f1c8 0800 	rsb	r8, r8, #0
 8020442:	f018 020f 	ands.w	r2, r8, #15
 8020446:	d00a      	beq.n	802045e <_strtod_l+0x56e>
 8020448:	4b12      	ldr	r3, [pc, #72]	; (8020494 <_strtod_l+0x5a4>)
 802044a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802044e:	4650      	mov	r0, sl
 8020450:	4659      	mov	r1, fp
 8020452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020456:	f7e0 f9f9 	bl	800084c <__aeabi_ddiv>
 802045a:	4682      	mov	sl, r0
 802045c:	468b      	mov	fp, r1
 802045e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8020462:	d0d8      	beq.n	8020416 <_strtod_l+0x526>
 8020464:	f1b8 0f1f 	cmp.w	r8, #31
 8020468:	dd1e      	ble.n	80204a8 <_strtod_l+0x5b8>
 802046a:	2500      	movs	r5, #0
 802046c:	462e      	mov	r6, r5
 802046e:	9509      	str	r5, [sp, #36]	; 0x24
 8020470:	9507      	str	r5, [sp, #28]
 8020472:	2322      	movs	r3, #34	; 0x22
 8020474:	f04f 0a00 	mov.w	sl, #0
 8020478:	f04f 0b00 	mov.w	fp, #0
 802047c:	6023      	str	r3, [r4, #0]
 802047e:	e789      	b.n	8020394 <_strtod_l+0x4a4>
 8020480:	080257b1 	.word	0x080257b1
 8020484:	080257f4 	.word	0x080257f4
 8020488:	080257a9 	.word	0x080257a9
 802048c:	08025934 	.word	0x08025934
 8020490:	08025bf0 	.word	0x08025bf0
 8020494:	08025ad0 	.word	0x08025ad0
 8020498:	08025aa8 	.word	0x08025aa8
 802049c:	7ff00000 	.word	0x7ff00000
 80204a0:	7ca00000 	.word	0x7ca00000
 80204a4:	7fefffff 	.word	0x7fefffff
 80204a8:	f018 0310 	ands.w	r3, r8, #16
 80204ac:	bf18      	it	ne
 80204ae:	236a      	movne	r3, #106	; 0x6a
 80204b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8020868 <_strtod_l+0x978>
 80204b4:	9304      	str	r3, [sp, #16]
 80204b6:	4650      	mov	r0, sl
 80204b8:	4659      	mov	r1, fp
 80204ba:	2300      	movs	r3, #0
 80204bc:	f018 0f01 	tst.w	r8, #1
 80204c0:	d004      	beq.n	80204cc <_strtod_l+0x5dc>
 80204c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80204c6:	f7e0 f897 	bl	80005f8 <__aeabi_dmul>
 80204ca:	2301      	movs	r3, #1
 80204cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80204d0:	f109 0908 	add.w	r9, r9, #8
 80204d4:	d1f2      	bne.n	80204bc <_strtod_l+0x5cc>
 80204d6:	b10b      	cbz	r3, 80204dc <_strtod_l+0x5ec>
 80204d8:	4682      	mov	sl, r0
 80204da:	468b      	mov	fp, r1
 80204dc:	9b04      	ldr	r3, [sp, #16]
 80204de:	b1bb      	cbz	r3, 8020510 <_strtod_l+0x620>
 80204e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80204e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	4659      	mov	r1, fp
 80204ec:	dd10      	ble.n	8020510 <_strtod_l+0x620>
 80204ee:	2b1f      	cmp	r3, #31
 80204f0:	f340 8128 	ble.w	8020744 <_strtod_l+0x854>
 80204f4:	2b34      	cmp	r3, #52	; 0x34
 80204f6:	bfde      	ittt	le
 80204f8:	3b20      	suble	r3, #32
 80204fa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80204fe:	fa02 f303 	lslle.w	r3, r2, r3
 8020502:	f04f 0a00 	mov.w	sl, #0
 8020506:	bfcc      	ite	gt
 8020508:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802050c:	ea03 0b01 	andle.w	fp, r3, r1
 8020510:	2200      	movs	r2, #0
 8020512:	2300      	movs	r3, #0
 8020514:	4650      	mov	r0, sl
 8020516:	4659      	mov	r1, fp
 8020518:	f7e0 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 802051c:	2800      	cmp	r0, #0
 802051e:	d1a4      	bne.n	802046a <_strtod_l+0x57a>
 8020520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020522:	9300      	str	r3, [sp, #0]
 8020524:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020526:	462b      	mov	r3, r5
 8020528:	463a      	mov	r2, r7
 802052a:	4620      	mov	r0, r4
 802052c:	f001 fe60 	bl	80221f0 <__s2b>
 8020530:	9009      	str	r0, [sp, #36]	; 0x24
 8020532:	2800      	cmp	r0, #0
 8020534:	f43f af24 	beq.w	8020380 <_strtod_l+0x490>
 8020538:	9b07      	ldr	r3, [sp, #28]
 802053a:	1b9e      	subs	r6, r3, r6
 802053c:	9b08      	ldr	r3, [sp, #32]
 802053e:	2b00      	cmp	r3, #0
 8020540:	bfb4      	ite	lt
 8020542:	4633      	movlt	r3, r6
 8020544:	2300      	movge	r3, #0
 8020546:	9310      	str	r3, [sp, #64]	; 0x40
 8020548:	9b08      	ldr	r3, [sp, #32]
 802054a:	2500      	movs	r5, #0
 802054c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020550:	9318      	str	r3, [sp, #96]	; 0x60
 8020552:	462e      	mov	r6, r5
 8020554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020556:	4620      	mov	r0, r4
 8020558:	6859      	ldr	r1, [r3, #4]
 802055a:	f001 fd9d 	bl	8022098 <_Balloc>
 802055e:	9007      	str	r0, [sp, #28]
 8020560:	2800      	cmp	r0, #0
 8020562:	f43f af11 	beq.w	8020388 <_strtod_l+0x498>
 8020566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020568:	691a      	ldr	r2, [r3, #16]
 802056a:	3202      	adds	r2, #2
 802056c:	f103 010c 	add.w	r1, r3, #12
 8020570:	0092      	lsls	r2, r2, #2
 8020572:	300c      	adds	r0, #12
 8020574:	f7fe fc64 	bl	801ee40 <memcpy>
 8020578:	ec4b ab10 	vmov	d0, sl, fp
 802057c:	aa20      	add	r2, sp, #128	; 0x80
 802057e:	a91f      	add	r1, sp, #124	; 0x7c
 8020580:	4620      	mov	r0, r4
 8020582:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8020586:	f002 f96f 	bl	8022868 <__d2b>
 802058a:	901e      	str	r0, [sp, #120]	; 0x78
 802058c:	2800      	cmp	r0, #0
 802058e:	f43f aefb 	beq.w	8020388 <_strtod_l+0x498>
 8020592:	2101      	movs	r1, #1
 8020594:	4620      	mov	r0, r4
 8020596:	f001 fec5 	bl	8022324 <__i2b>
 802059a:	4606      	mov	r6, r0
 802059c:	2800      	cmp	r0, #0
 802059e:	f43f aef3 	beq.w	8020388 <_strtod_l+0x498>
 80205a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80205a4:	9904      	ldr	r1, [sp, #16]
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	bfab      	itete	ge
 80205aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80205ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80205ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80205b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80205b4:	bfac      	ite	ge
 80205b6:	eb03 0902 	addge.w	r9, r3, r2
 80205ba:	1ad7      	sublt	r7, r2, r3
 80205bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80205be:	eba3 0801 	sub.w	r8, r3, r1
 80205c2:	4490      	add	r8, r2
 80205c4:	4ba3      	ldr	r3, [pc, #652]	; (8020854 <_strtod_l+0x964>)
 80205c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80205ca:	4598      	cmp	r8, r3
 80205cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80205d0:	f280 80cc 	bge.w	802076c <_strtod_l+0x87c>
 80205d4:	eba3 0308 	sub.w	r3, r3, r8
 80205d8:	2b1f      	cmp	r3, #31
 80205da:	eba2 0203 	sub.w	r2, r2, r3
 80205de:	f04f 0101 	mov.w	r1, #1
 80205e2:	f300 80b6 	bgt.w	8020752 <_strtod_l+0x862>
 80205e6:	fa01 f303 	lsl.w	r3, r1, r3
 80205ea:	9311      	str	r3, [sp, #68]	; 0x44
 80205ec:	2300      	movs	r3, #0
 80205ee:	930c      	str	r3, [sp, #48]	; 0x30
 80205f0:	eb09 0802 	add.w	r8, r9, r2
 80205f4:	9b04      	ldr	r3, [sp, #16]
 80205f6:	45c1      	cmp	r9, r8
 80205f8:	4417      	add	r7, r2
 80205fa:	441f      	add	r7, r3
 80205fc:	464b      	mov	r3, r9
 80205fe:	bfa8      	it	ge
 8020600:	4643      	movge	r3, r8
 8020602:	42bb      	cmp	r3, r7
 8020604:	bfa8      	it	ge
 8020606:	463b      	movge	r3, r7
 8020608:	2b00      	cmp	r3, #0
 802060a:	bfc2      	ittt	gt
 802060c:	eba8 0803 	subgt.w	r8, r8, r3
 8020610:	1aff      	subgt	r7, r7, r3
 8020612:	eba9 0903 	subgt.w	r9, r9, r3
 8020616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020618:	2b00      	cmp	r3, #0
 802061a:	dd17      	ble.n	802064c <_strtod_l+0x75c>
 802061c:	4631      	mov	r1, r6
 802061e:	461a      	mov	r2, r3
 8020620:	4620      	mov	r0, r4
 8020622:	f001 ff3b 	bl	802249c <__pow5mult>
 8020626:	4606      	mov	r6, r0
 8020628:	2800      	cmp	r0, #0
 802062a:	f43f aead 	beq.w	8020388 <_strtod_l+0x498>
 802062e:	4601      	mov	r1, r0
 8020630:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020632:	4620      	mov	r0, r4
 8020634:	f001 fe8c 	bl	8022350 <__multiply>
 8020638:	900f      	str	r0, [sp, #60]	; 0x3c
 802063a:	2800      	cmp	r0, #0
 802063c:	f43f aea4 	beq.w	8020388 <_strtod_l+0x498>
 8020640:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020642:	4620      	mov	r0, r4
 8020644:	f001 fd68 	bl	8022118 <_Bfree>
 8020648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802064a:	931e      	str	r3, [sp, #120]	; 0x78
 802064c:	f1b8 0f00 	cmp.w	r8, #0
 8020650:	f300 8091 	bgt.w	8020776 <_strtod_l+0x886>
 8020654:	9b08      	ldr	r3, [sp, #32]
 8020656:	2b00      	cmp	r3, #0
 8020658:	dd08      	ble.n	802066c <_strtod_l+0x77c>
 802065a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802065c:	9907      	ldr	r1, [sp, #28]
 802065e:	4620      	mov	r0, r4
 8020660:	f001 ff1c 	bl	802249c <__pow5mult>
 8020664:	9007      	str	r0, [sp, #28]
 8020666:	2800      	cmp	r0, #0
 8020668:	f43f ae8e 	beq.w	8020388 <_strtod_l+0x498>
 802066c:	2f00      	cmp	r7, #0
 802066e:	dd08      	ble.n	8020682 <_strtod_l+0x792>
 8020670:	9907      	ldr	r1, [sp, #28]
 8020672:	463a      	mov	r2, r7
 8020674:	4620      	mov	r0, r4
 8020676:	f001 ff6b 	bl	8022550 <__lshift>
 802067a:	9007      	str	r0, [sp, #28]
 802067c:	2800      	cmp	r0, #0
 802067e:	f43f ae83 	beq.w	8020388 <_strtod_l+0x498>
 8020682:	f1b9 0f00 	cmp.w	r9, #0
 8020686:	dd08      	ble.n	802069a <_strtod_l+0x7aa>
 8020688:	4631      	mov	r1, r6
 802068a:	464a      	mov	r2, r9
 802068c:	4620      	mov	r0, r4
 802068e:	f001 ff5f 	bl	8022550 <__lshift>
 8020692:	4606      	mov	r6, r0
 8020694:	2800      	cmp	r0, #0
 8020696:	f43f ae77 	beq.w	8020388 <_strtod_l+0x498>
 802069a:	9a07      	ldr	r2, [sp, #28]
 802069c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802069e:	4620      	mov	r0, r4
 80206a0:	f001 ffde 	bl	8022660 <__mdiff>
 80206a4:	4605      	mov	r5, r0
 80206a6:	2800      	cmp	r0, #0
 80206a8:	f43f ae6e 	beq.w	8020388 <_strtod_l+0x498>
 80206ac:	68c3      	ldr	r3, [r0, #12]
 80206ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80206b0:	2300      	movs	r3, #0
 80206b2:	60c3      	str	r3, [r0, #12]
 80206b4:	4631      	mov	r1, r6
 80206b6:	f001 ffb7 	bl	8022628 <__mcmp>
 80206ba:	2800      	cmp	r0, #0
 80206bc:	da65      	bge.n	802078a <_strtod_l+0x89a>
 80206be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80206c0:	ea53 030a 	orrs.w	r3, r3, sl
 80206c4:	f040 8087 	bne.w	80207d6 <_strtod_l+0x8e6>
 80206c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	f040 8082 	bne.w	80207d6 <_strtod_l+0x8e6>
 80206d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80206d6:	0d1b      	lsrs	r3, r3, #20
 80206d8:	051b      	lsls	r3, r3, #20
 80206da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80206de:	d97a      	bls.n	80207d6 <_strtod_l+0x8e6>
 80206e0:	696b      	ldr	r3, [r5, #20]
 80206e2:	b913      	cbnz	r3, 80206ea <_strtod_l+0x7fa>
 80206e4:	692b      	ldr	r3, [r5, #16]
 80206e6:	2b01      	cmp	r3, #1
 80206e8:	dd75      	ble.n	80207d6 <_strtod_l+0x8e6>
 80206ea:	4629      	mov	r1, r5
 80206ec:	2201      	movs	r2, #1
 80206ee:	4620      	mov	r0, r4
 80206f0:	f001 ff2e 	bl	8022550 <__lshift>
 80206f4:	4631      	mov	r1, r6
 80206f6:	4605      	mov	r5, r0
 80206f8:	f001 ff96 	bl	8022628 <__mcmp>
 80206fc:	2800      	cmp	r0, #0
 80206fe:	dd6a      	ble.n	80207d6 <_strtod_l+0x8e6>
 8020700:	9904      	ldr	r1, [sp, #16]
 8020702:	4a55      	ldr	r2, [pc, #340]	; (8020858 <_strtod_l+0x968>)
 8020704:	465b      	mov	r3, fp
 8020706:	2900      	cmp	r1, #0
 8020708:	f000 8085 	beq.w	8020816 <_strtod_l+0x926>
 802070c:	ea02 010b 	and.w	r1, r2, fp
 8020710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020714:	dc7f      	bgt.n	8020816 <_strtod_l+0x926>
 8020716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802071a:	f77f aeaa 	ble.w	8020472 <_strtod_l+0x582>
 802071e:	4a4f      	ldr	r2, [pc, #316]	; (802085c <_strtod_l+0x96c>)
 8020720:	2300      	movs	r3, #0
 8020722:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020726:	4650      	mov	r0, sl
 8020728:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 802072c:	4659      	mov	r1, fp
 802072e:	f7df ff63 	bl	80005f8 <__aeabi_dmul>
 8020732:	460b      	mov	r3, r1
 8020734:	4303      	orrs	r3, r0
 8020736:	bf08      	it	eq
 8020738:	2322      	moveq	r3, #34	; 0x22
 802073a:	4682      	mov	sl, r0
 802073c:	468b      	mov	fp, r1
 802073e:	bf08      	it	eq
 8020740:	6023      	streq	r3, [r4, #0]
 8020742:	e62b      	b.n	802039c <_strtod_l+0x4ac>
 8020744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020748:	fa02 f303 	lsl.w	r3, r2, r3
 802074c:	ea03 0a0a 	and.w	sl, r3, sl
 8020750:	e6de      	b.n	8020510 <_strtod_l+0x620>
 8020752:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020756:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802075a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802075e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8020762:	fa01 f308 	lsl.w	r3, r1, r8
 8020766:	930c      	str	r3, [sp, #48]	; 0x30
 8020768:	9111      	str	r1, [sp, #68]	; 0x44
 802076a:	e741      	b.n	80205f0 <_strtod_l+0x700>
 802076c:	2300      	movs	r3, #0
 802076e:	930c      	str	r3, [sp, #48]	; 0x30
 8020770:	2301      	movs	r3, #1
 8020772:	9311      	str	r3, [sp, #68]	; 0x44
 8020774:	e73c      	b.n	80205f0 <_strtod_l+0x700>
 8020776:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020778:	4642      	mov	r2, r8
 802077a:	4620      	mov	r0, r4
 802077c:	f001 fee8 	bl	8022550 <__lshift>
 8020780:	901e      	str	r0, [sp, #120]	; 0x78
 8020782:	2800      	cmp	r0, #0
 8020784:	f47f af66 	bne.w	8020654 <_strtod_l+0x764>
 8020788:	e5fe      	b.n	8020388 <_strtod_l+0x498>
 802078a:	465f      	mov	r7, fp
 802078c:	d16e      	bne.n	802086c <_strtod_l+0x97c>
 802078e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020790:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020794:	b342      	cbz	r2, 80207e8 <_strtod_l+0x8f8>
 8020796:	4a32      	ldr	r2, [pc, #200]	; (8020860 <_strtod_l+0x970>)
 8020798:	4293      	cmp	r3, r2
 802079a:	d128      	bne.n	80207ee <_strtod_l+0x8fe>
 802079c:	9b04      	ldr	r3, [sp, #16]
 802079e:	4650      	mov	r0, sl
 80207a0:	b1eb      	cbz	r3, 80207de <_strtod_l+0x8ee>
 80207a2:	4a2d      	ldr	r2, [pc, #180]	; (8020858 <_strtod_l+0x968>)
 80207a4:	403a      	ands	r2, r7
 80207a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80207aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80207ae:	d819      	bhi.n	80207e4 <_strtod_l+0x8f4>
 80207b0:	0d12      	lsrs	r2, r2, #20
 80207b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80207b6:	fa01 f303 	lsl.w	r3, r1, r3
 80207ba:	4298      	cmp	r0, r3
 80207bc:	d117      	bne.n	80207ee <_strtod_l+0x8fe>
 80207be:	4b29      	ldr	r3, [pc, #164]	; (8020864 <_strtod_l+0x974>)
 80207c0:	429f      	cmp	r7, r3
 80207c2:	d102      	bne.n	80207ca <_strtod_l+0x8da>
 80207c4:	3001      	adds	r0, #1
 80207c6:	f43f addf 	beq.w	8020388 <_strtod_l+0x498>
 80207ca:	4b23      	ldr	r3, [pc, #140]	; (8020858 <_strtod_l+0x968>)
 80207cc:	403b      	ands	r3, r7
 80207ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80207d2:	f04f 0a00 	mov.w	sl, #0
 80207d6:	9b04      	ldr	r3, [sp, #16]
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d1a0      	bne.n	802071e <_strtod_l+0x82e>
 80207dc:	e5de      	b.n	802039c <_strtod_l+0x4ac>
 80207de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80207e2:	e7ea      	b.n	80207ba <_strtod_l+0x8ca>
 80207e4:	460b      	mov	r3, r1
 80207e6:	e7e8      	b.n	80207ba <_strtod_l+0x8ca>
 80207e8:	ea53 030a 	orrs.w	r3, r3, sl
 80207ec:	d088      	beq.n	8020700 <_strtod_l+0x810>
 80207ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207f0:	b1db      	cbz	r3, 802082a <_strtod_l+0x93a>
 80207f2:	423b      	tst	r3, r7
 80207f4:	d0ef      	beq.n	80207d6 <_strtod_l+0x8e6>
 80207f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80207f8:	9a04      	ldr	r2, [sp, #16]
 80207fa:	4650      	mov	r0, sl
 80207fc:	4659      	mov	r1, fp
 80207fe:	b1c3      	cbz	r3, 8020832 <_strtod_l+0x942>
 8020800:	f7ff fb5a 	bl	801feb8 <sulp>
 8020804:	4602      	mov	r2, r0
 8020806:	460b      	mov	r3, r1
 8020808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802080c:	f7df fd3e 	bl	800028c <__adddf3>
 8020810:	4682      	mov	sl, r0
 8020812:	468b      	mov	fp, r1
 8020814:	e7df      	b.n	80207d6 <_strtod_l+0x8e6>
 8020816:	4013      	ands	r3, r2
 8020818:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802081c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020820:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020824:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020828:	e7d5      	b.n	80207d6 <_strtod_l+0x8e6>
 802082a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802082c:	ea13 0f0a 	tst.w	r3, sl
 8020830:	e7e0      	b.n	80207f4 <_strtod_l+0x904>
 8020832:	f7ff fb41 	bl	801feb8 <sulp>
 8020836:	4602      	mov	r2, r0
 8020838:	460b      	mov	r3, r1
 802083a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802083e:	f7df fd23 	bl	8000288 <__aeabi_dsub>
 8020842:	2200      	movs	r2, #0
 8020844:	2300      	movs	r3, #0
 8020846:	4682      	mov	sl, r0
 8020848:	468b      	mov	fp, r1
 802084a:	f7e0 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 802084e:	2800      	cmp	r0, #0
 8020850:	d0c1      	beq.n	80207d6 <_strtod_l+0x8e6>
 8020852:	e60e      	b.n	8020472 <_strtod_l+0x582>
 8020854:	fffffc02 	.word	0xfffffc02
 8020858:	7ff00000 	.word	0x7ff00000
 802085c:	39500000 	.word	0x39500000
 8020860:	000fffff 	.word	0x000fffff
 8020864:	7fefffff 	.word	0x7fefffff
 8020868:	08025808 	.word	0x08025808
 802086c:	4631      	mov	r1, r6
 802086e:	4628      	mov	r0, r5
 8020870:	f002 f856 	bl	8022920 <__ratio>
 8020874:	ec59 8b10 	vmov	r8, r9, d0
 8020878:	ee10 0a10 	vmov	r0, s0
 802087c:	2200      	movs	r2, #0
 802087e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020882:	4649      	mov	r1, r9
 8020884:	f7e0 f934 	bl	8000af0 <__aeabi_dcmple>
 8020888:	2800      	cmp	r0, #0
 802088a:	d07c      	beq.n	8020986 <_strtod_l+0xa96>
 802088c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802088e:	2b00      	cmp	r3, #0
 8020890:	d04c      	beq.n	802092c <_strtod_l+0xa3c>
 8020892:	4b95      	ldr	r3, [pc, #596]	; (8020ae8 <_strtod_l+0xbf8>)
 8020894:	2200      	movs	r2, #0
 8020896:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802089a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020ae8 <_strtod_l+0xbf8>
 802089e:	f04f 0800 	mov.w	r8, #0
 80208a2:	4b92      	ldr	r3, [pc, #584]	; (8020aec <_strtod_l+0xbfc>)
 80208a4:	403b      	ands	r3, r7
 80208a6:	9311      	str	r3, [sp, #68]	; 0x44
 80208a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208aa:	4b91      	ldr	r3, [pc, #580]	; (8020af0 <_strtod_l+0xc00>)
 80208ac:	429a      	cmp	r2, r3
 80208ae:	f040 80b2 	bne.w	8020a16 <_strtod_l+0xb26>
 80208b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80208b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80208ba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80208be:	ec4b ab10 	vmov	d0, sl, fp
 80208c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80208c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80208ca:	f001 ff51 	bl	8022770 <__ulp>
 80208ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80208d2:	ec53 2b10 	vmov	r2, r3, d0
 80208d6:	f7df fe8f 	bl	80005f8 <__aeabi_dmul>
 80208da:	4652      	mov	r2, sl
 80208dc:	465b      	mov	r3, fp
 80208de:	f7df fcd5 	bl	800028c <__adddf3>
 80208e2:	460b      	mov	r3, r1
 80208e4:	4981      	ldr	r1, [pc, #516]	; (8020aec <_strtod_l+0xbfc>)
 80208e6:	4a83      	ldr	r2, [pc, #524]	; (8020af4 <_strtod_l+0xc04>)
 80208e8:	4019      	ands	r1, r3
 80208ea:	4291      	cmp	r1, r2
 80208ec:	4682      	mov	sl, r0
 80208ee:	d95e      	bls.n	80209ae <_strtod_l+0xabe>
 80208f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80208f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80208f6:	4293      	cmp	r3, r2
 80208f8:	d103      	bne.n	8020902 <_strtod_l+0xa12>
 80208fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208fc:	3301      	adds	r3, #1
 80208fe:	f43f ad43 	beq.w	8020388 <_strtod_l+0x498>
 8020902:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020b00 <_strtod_l+0xc10>
 8020906:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 802090a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802090c:	4620      	mov	r0, r4
 802090e:	f001 fc03 	bl	8022118 <_Bfree>
 8020912:	9907      	ldr	r1, [sp, #28]
 8020914:	4620      	mov	r0, r4
 8020916:	f001 fbff 	bl	8022118 <_Bfree>
 802091a:	4631      	mov	r1, r6
 802091c:	4620      	mov	r0, r4
 802091e:	f001 fbfb 	bl	8022118 <_Bfree>
 8020922:	4629      	mov	r1, r5
 8020924:	4620      	mov	r0, r4
 8020926:	f001 fbf7 	bl	8022118 <_Bfree>
 802092a:	e613      	b.n	8020554 <_strtod_l+0x664>
 802092c:	f1ba 0f00 	cmp.w	sl, #0
 8020930:	d11b      	bne.n	802096a <_strtod_l+0xa7a>
 8020932:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020936:	b9f3      	cbnz	r3, 8020976 <_strtod_l+0xa86>
 8020938:	4b6b      	ldr	r3, [pc, #428]	; (8020ae8 <_strtod_l+0xbf8>)
 802093a:	2200      	movs	r2, #0
 802093c:	4640      	mov	r0, r8
 802093e:	4649      	mov	r1, r9
 8020940:	f7e0 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8020944:	b9d0      	cbnz	r0, 802097c <_strtod_l+0xa8c>
 8020946:	4640      	mov	r0, r8
 8020948:	4649      	mov	r1, r9
 802094a:	4b6b      	ldr	r3, [pc, #428]	; (8020af8 <_strtod_l+0xc08>)
 802094c:	2200      	movs	r2, #0
 802094e:	f7df fe53 	bl	80005f8 <__aeabi_dmul>
 8020952:	4680      	mov	r8, r0
 8020954:	4689      	mov	r9, r1
 8020956:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802095a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 802095e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020960:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020964:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020968:	e79b      	b.n	80208a2 <_strtod_l+0x9b2>
 802096a:	f1ba 0f01 	cmp.w	sl, #1
 802096e:	d102      	bne.n	8020976 <_strtod_l+0xa86>
 8020970:	2f00      	cmp	r7, #0
 8020972:	f43f ad7e 	beq.w	8020472 <_strtod_l+0x582>
 8020976:	4b61      	ldr	r3, [pc, #388]	; (8020afc <_strtod_l+0xc0c>)
 8020978:	2200      	movs	r2, #0
 802097a:	e78c      	b.n	8020896 <_strtod_l+0x9a6>
 802097c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020af8 <_strtod_l+0xc08>
 8020980:	f04f 0800 	mov.w	r8, #0
 8020984:	e7e7      	b.n	8020956 <_strtod_l+0xa66>
 8020986:	4b5c      	ldr	r3, [pc, #368]	; (8020af8 <_strtod_l+0xc08>)
 8020988:	4640      	mov	r0, r8
 802098a:	4649      	mov	r1, r9
 802098c:	2200      	movs	r2, #0
 802098e:	f7df fe33 	bl	80005f8 <__aeabi_dmul>
 8020992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020994:	4680      	mov	r8, r0
 8020996:	4689      	mov	r9, r1
 8020998:	b933      	cbnz	r3, 80209a8 <_strtod_l+0xab8>
 802099a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802099e:	9012      	str	r0, [sp, #72]	; 0x48
 80209a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80209a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80209a6:	e7dd      	b.n	8020964 <_strtod_l+0xa74>
 80209a8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80209ac:	e7f9      	b.n	80209a2 <_strtod_l+0xab2>
 80209ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80209b2:	9b04      	ldr	r3, [sp, #16]
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d1a8      	bne.n	802090a <_strtod_l+0xa1a>
 80209b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80209bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80209be:	0d1b      	lsrs	r3, r3, #20
 80209c0:	051b      	lsls	r3, r3, #20
 80209c2:	429a      	cmp	r2, r3
 80209c4:	d1a1      	bne.n	802090a <_strtod_l+0xa1a>
 80209c6:	4640      	mov	r0, r8
 80209c8:	4649      	mov	r1, r9
 80209ca:	f7e0 f975 	bl	8000cb8 <__aeabi_d2lz>
 80209ce:	f7df fde5 	bl	800059c <__aeabi_l2d>
 80209d2:	4602      	mov	r2, r0
 80209d4:	460b      	mov	r3, r1
 80209d6:	4640      	mov	r0, r8
 80209d8:	4649      	mov	r1, r9
 80209da:	f7df fc55 	bl	8000288 <__aeabi_dsub>
 80209de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80209e4:	ea43 030a 	orr.w	r3, r3, sl
 80209e8:	4313      	orrs	r3, r2
 80209ea:	4680      	mov	r8, r0
 80209ec:	4689      	mov	r9, r1
 80209ee:	d053      	beq.n	8020a98 <_strtod_l+0xba8>
 80209f0:	a335      	add	r3, pc, #212	; (adr r3, 8020ac8 <_strtod_l+0xbd8>)
 80209f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209f6:	f7e0 f871 	bl	8000adc <__aeabi_dcmplt>
 80209fa:	2800      	cmp	r0, #0
 80209fc:	f47f acce 	bne.w	802039c <_strtod_l+0x4ac>
 8020a00:	a333      	add	r3, pc, #204	; (adr r3, 8020ad0 <_strtod_l+0xbe0>)
 8020a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a06:	4640      	mov	r0, r8
 8020a08:	4649      	mov	r1, r9
 8020a0a:	f7e0 f885 	bl	8000b18 <__aeabi_dcmpgt>
 8020a0e:	2800      	cmp	r0, #0
 8020a10:	f43f af7b 	beq.w	802090a <_strtod_l+0xa1a>
 8020a14:	e4c2      	b.n	802039c <_strtod_l+0x4ac>
 8020a16:	9b04      	ldr	r3, [sp, #16]
 8020a18:	b333      	cbz	r3, 8020a68 <_strtod_l+0xb78>
 8020a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020a20:	d822      	bhi.n	8020a68 <_strtod_l+0xb78>
 8020a22:	a32d      	add	r3, pc, #180	; (adr r3, 8020ad8 <_strtod_l+0xbe8>)
 8020a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a28:	4640      	mov	r0, r8
 8020a2a:	4649      	mov	r1, r9
 8020a2c:	f7e0 f860 	bl	8000af0 <__aeabi_dcmple>
 8020a30:	b1a0      	cbz	r0, 8020a5c <_strtod_l+0xb6c>
 8020a32:	4649      	mov	r1, r9
 8020a34:	4640      	mov	r0, r8
 8020a36:	f7e0 f8b7 	bl	8000ba8 <__aeabi_d2uiz>
 8020a3a:	2801      	cmp	r0, #1
 8020a3c:	bf38      	it	cc
 8020a3e:	2001      	movcc	r0, #1
 8020a40:	f7df fd60 	bl	8000504 <__aeabi_ui2d>
 8020a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020a46:	4680      	mov	r8, r0
 8020a48:	4689      	mov	r9, r1
 8020a4a:	bb13      	cbnz	r3, 8020a92 <_strtod_l+0xba2>
 8020a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020a50:	9014      	str	r0, [sp, #80]	; 0x50
 8020a52:	9315      	str	r3, [sp, #84]	; 0x54
 8020a54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020a58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020a5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020a60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020a64:	1a9b      	subs	r3, r3, r2
 8020a66:	930d      	str	r3, [sp, #52]	; 0x34
 8020a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020a6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020a70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020a74:	f001 fe7c 	bl	8022770 <__ulp>
 8020a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020a7c:	ec53 2b10 	vmov	r2, r3, d0
 8020a80:	f7df fdba 	bl	80005f8 <__aeabi_dmul>
 8020a84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020a88:	f7df fc00 	bl	800028c <__adddf3>
 8020a8c:	4682      	mov	sl, r0
 8020a8e:	468b      	mov	fp, r1
 8020a90:	e78f      	b.n	80209b2 <_strtod_l+0xac2>
 8020a92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020a96:	e7dd      	b.n	8020a54 <_strtod_l+0xb64>
 8020a98:	a311      	add	r3, pc, #68	; (adr r3, 8020ae0 <_strtod_l+0xbf0>)
 8020a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a9e:	f7e0 f81d 	bl	8000adc <__aeabi_dcmplt>
 8020aa2:	e7b4      	b.n	8020a0e <_strtod_l+0xb1e>
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8020aa8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020aaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020aac:	6013      	str	r3, [r2, #0]
 8020aae:	f7ff ba65 	b.w	801ff7c <_strtod_l+0x8c>
 8020ab2:	2b65      	cmp	r3, #101	; 0x65
 8020ab4:	f43f ab5d 	beq.w	8020172 <_strtod_l+0x282>
 8020ab8:	2b45      	cmp	r3, #69	; 0x45
 8020aba:	f43f ab5a 	beq.w	8020172 <_strtod_l+0x282>
 8020abe:	2201      	movs	r2, #1
 8020ac0:	f7ff bb92 	b.w	80201e8 <_strtod_l+0x2f8>
 8020ac4:	f3af 8000 	nop.w
 8020ac8:	94a03595 	.word	0x94a03595
 8020acc:	3fdfffff 	.word	0x3fdfffff
 8020ad0:	35afe535 	.word	0x35afe535
 8020ad4:	3fe00000 	.word	0x3fe00000
 8020ad8:	ffc00000 	.word	0xffc00000
 8020adc:	41dfffff 	.word	0x41dfffff
 8020ae0:	94a03595 	.word	0x94a03595
 8020ae4:	3fcfffff 	.word	0x3fcfffff
 8020ae8:	3ff00000 	.word	0x3ff00000
 8020aec:	7ff00000 	.word	0x7ff00000
 8020af0:	7fe00000 	.word	0x7fe00000
 8020af4:	7c9fffff 	.word	0x7c9fffff
 8020af8:	3fe00000 	.word	0x3fe00000
 8020afc:	bff00000 	.word	0xbff00000
 8020b00:	7fefffff 	.word	0x7fefffff

08020b04 <_strtod_r>:
 8020b04:	4b01      	ldr	r3, [pc, #4]	; (8020b0c <_strtod_r+0x8>)
 8020b06:	f7ff b9f3 	b.w	801fef0 <_strtod_l>
 8020b0a:	bf00      	nop
 8020b0c:	2000012c 	.word	0x2000012c

08020b10 <_strtol_l.isra.0>:
 8020b10:	2b01      	cmp	r3, #1
 8020b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b16:	d001      	beq.n	8020b1c <_strtol_l.isra.0+0xc>
 8020b18:	2b24      	cmp	r3, #36	; 0x24
 8020b1a:	d906      	bls.n	8020b2a <_strtol_l.isra.0+0x1a>
 8020b1c:	f7fe f95e 	bl	801eddc <__errno>
 8020b20:	2316      	movs	r3, #22
 8020b22:	6003      	str	r3, [r0, #0]
 8020b24:	2000      	movs	r0, #0
 8020b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b2a:	4f3a      	ldr	r7, [pc, #232]	; (8020c14 <_strtol_l.isra.0+0x104>)
 8020b2c:	468e      	mov	lr, r1
 8020b2e:	4676      	mov	r6, lr
 8020b30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020b34:	5de5      	ldrb	r5, [r4, r7]
 8020b36:	f015 0508 	ands.w	r5, r5, #8
 8020b3a:	d1f8      	bne.n	8020b2e <_strtol_l.isra.0+0x1e>
 8020b3c:	2c2d      	cmp	r4, #45	; 0x2d
 8020b3e:	d134      	bne.n	8020baa <_strtol_l.isra.0+0x9a>
 8020b40:	f89e 4000 	ldrb.w	r4, [lr]
 8020b44:	f04f 0801 	mov.w	r8, #1
 8020b48:	f106 0e02 	add.w	lr, r6, #2
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d05c      	beq.n	8020c0a <_strtol_l.isra.0+0xfa>
 8020b50:	2b10      	cmp	r3, #16
 8020b52:	d10c      	bne.n	8020b6e <_strtol_l.isra.0+0x5e>
 8020b54:	2c30      	cmp	r4, #48	; 0x30
 8020b56:	d10a      	bne.n	8020b6e <_strtol_l.isra.0+0x5e>
 8020b58:	f89e 4000 	ldrb.w	r4, [lr]
 8020b5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020b60:	2c58      	cmp	r4, #88	; 0x58
 8020b62:	d14d      	bne.n	8020c00 <_strtol_l.isra.0+0xf0>
 8020b64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020b68:	2310      	movs	r3, #16
 8020b6a:	f10e 0e02 	add.w	lr, lr, #2
 8020b6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020b72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8020b76:	2600      	movs	r6, #0
 8020b78:	fbbc f9f3 	udiv	r9, ip, r3
 8020b7c:	4635      	mov	r5, r6
 8020b7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020b82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020b86:	2f09      	cmp	r7, #9
 8020b88:	d818      	bhi.n	8020bbc <_strtol_l.isra.0+0xac>
 8020b8a:	463c      	mov	r4, r7
 8020b8c:	42a3      	cmp	r3, r4
 8020b8e:	dd24      	ble.n	8020bda <_strtol_l.isra.0+0xca>
 8020b90:	2e00      	cmp	r6, #0
 8020b92:	db1f      	blt.n	8020bd4 <_strtol_l.isra.0+0xc4>
 8020b94:	45a9      	cmp	r9, r5
 8020b96:	d31d      	bcc.n	8020bd4 <_strtol_l.isra.0+0xc4>
 8020b98:	d101      	bne.n	8020b9e <_strtol_l.isra.0+0x8e>
 8020b9a:	45a2      	cmp	sl, r4
 8020b9c:	db1a      	blt.n	8020bd4 <_strtol_l.isra.0+0xc4>
 8020b9e:	fb05 4503 	mla	r5, r5, r3, r4
 8020ba2:	2601      	movs	r6, #1
 8020ba4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020ba8:	e7eb      	b.n	8020b82 <_strtol_l.isra.0+0x72>
 8020baa:	2c2b      	cmp	r4, #43	; 0x2b
 8020bac:	bf08      	it	eq
 8020bae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020bb2:	46a8      	mov	r8, r5
 8020bb4:	bf08      	it	eq
 8020bb6:	f106 0e02 	addeq.w	lr, r6, #2
 8020bba:	e7c7      	b.n	8020b4c <_strtol_l.isra.0+0x3c>
 8020bbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020bc0:	2f19      	cmp	r7, #25
 8020bc2:	d801      	bhi.n	8020bc8 <_strtol_l.isra.0+0xb8>
 8020bc4:	3c37      	subs	r4, #55	; 0x37
 8020bc6:	e7e1      	b.n	8020b8c <_strtol_l.isra.0+0x7c>
 8020bc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020bcc:	2f19      	cmp	r7, #25
 8020bce:	d804      	bhi.n	8020bda <_strtol_l.isra.0+0xca>
 8020bd0:	3c57      	subs	r4, #87	; 0x57
 8020bd2:	e7db      	b.n	8020b8c <_strtol_l.isra.0+0x7c>
 8020bd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8020bd8:	e7e4      	b.n	8020ba4 <_strtol_l.isra.0+0x94>
 8020bda:	2e00      	cmp	r6, #0
 8020bdc:	da05      	bge.n	8020bea <_strtol_l.isra.0+0xda>
 8020bde:	2322      	movs	r3, #34	; 0x22
 8020be0:	6003      	str	r3, [r0, #0]
 8020be2:	4665      	mov	r5, ip
 8020be4:	b942      	cbnz	r2, 8020bf8 <_strtol_l.isra.0+0xe8>
 8020be6:	4628      	mov	r0, r5
 8020be8:	e79d      	b.n	8020b26 <_strtol_l.isra.0+0x16>
 8020bea:	f1b8 0f00 	cmp.w	r8, #0
 8020bee:	d000      	beq.n	8020bf2 <_strtol_l.isra.0+0xe2>
 8020bf0:	426d      	negs	r5, r5
 8020bf2:	2a00      	cmp	r2, #0
 8020bf4:	d0f7      	beq.n	8020be6 <_strtol_l.isra.0+0xd6>
 8020bf6:	b10e      	cbz	r6, 8020bfc <_strtol_l.isra.0+0xec>
 8020bf8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8020bfc:	6011      	str	r1, [r2, #0]
 8020bfe:	e7f2      	b.n	8020be6 <_strtol_l.isra.0+0xd6>
 8020c00:	2430      	movs	r4, #48	; 0x30
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d1b3      	bne.n	8020b6e <_strtol_l.isra.0+0x5e>
 8020c06:	2308      	movs	r3, #8
 8020c08:	e7b1      	b.n	8020b6e <_strtol_l.isra.0+0x5e>
 8020c0a:	2c30      	cmp	r4, #48	; 0x30
 8020c0c:	d0a4      	beq.n	8020b58 <_strtol_l.isra.0+0x48>
 8020c0e:	230a      	movs	r3, #10
 8020c10:	e7ad      	b.n	8020b6e <_strtol_l.isra.0+0x5e>
 8020c12:	bf00      	nop
 8020c14:	08025831 	.word	0x08025831

08020c18 <_strtol_r>:
 8020c18:	f7ff bf7a 	b.w	8020b10 <_strtol_l.isra.0>

08020c1c <_write_r>:
 8020c1c:	b538      	push	{r3, r4, r5, lr}
 8020c1e:	4d07      	ldr	r5, [pc, #28]	; (8020c3c <_write_r+0x20>)
 8020c20:	4604      	mov	r4, r0
 8020c22:	4608      	mov	r0, r1
 8020c24:	4611      	mov	r1, r2
 8020c26:	2200      	movs	r2, #0
 8020c28:	602a      	str	r2, [r5, #0]
 8020c2a:	461a      	mov	r2, r3
 8020c2c:	f7ed ff13 	bl	800ea56 <_write>
 8020c30:	1c43      	adds	r3, r0, #1
 8020c32:	d102      	bne.n	8020c3a <_write_r+0x1e>
 8020c34:	682b      	ldr	r3, [r5, #0]
 8020c36:	b103      	cbz	r3, 8020c3a <_write_r+0x1e>
 8020c38:	6023      	str	r3, [r4, #0]
 8020c3a:	bd38      	pop	{r3, r4, r5, pc}
 8020c3c:	2000a94c 	.word	0x2000a94c

08020c40 <_close_r>:
 8020c40:	b538      	push	{r3, r4, r5, lr}
 8020c42:	4d06      	ldr	r5, [pc, #24]	; (8020c5c <_close_r+0x1c>)
 8020c44:	2300      	movs	r3, #0
 8020c46:	4604      	mov	r4, r0
 8020c48:	4608      	mov	r0, r1
 8020c4a:	602b      	str	r3, [r5, #0]
 8020c4c:	f7ed ff1f 	bl	800ea8e <_close>
 8020c50:	1c43      	adds	r3, r0, #1
 8020c52:	d102      	bne.n	8020c5a <_close_r+0x1a>
 8020c54:	682b      	ldr	r3, [r5, #0]
 8020c56:	b103      	cbz	r3, 8020c5a <_close_r+0x1a>
 8020c58:	6023      	str	r3, [r4, #0]
 8020c5a:	bd38      	pop	{r3, r4, r5, pc}
 8020c5c:	2000a94c 	.word	0x2000a94c

08020c60 <quorem>:
 8020c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c64:	6903      	ldr	r3, [r0, #16]
 8020c66:	690c      	ldr	r4, [r1, #16]
 8020c68:	42a3      	cmp	r3, r4
 8020c6a:	4607      	mov	r7, r0
 8020c6c:	f2c0 8081 	blt.w	8020d72 <quorem+0x112>
 8020c70:	3c01      	subs	r4, #1
 8020c72:	f101 0814 	add.w	r8, r1, #20
 8020c76:	f100 0514 	add.w	r5, r0, #20
 8020c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020c7e:	9301      	str	r3, [sp, #4]
 8020c80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020c88:	3301      	adds	r3, #1
 8020c8a:	429a      	cmp	r2, r3
 8020c8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020c90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020c94:	fbb2 f6f3 	udiv	r6, r2, r3
 8020c98:	d331      	bcc.n	8020cfe <quorem+0x9e>
 8020c9a:	f04f 0e00 	mov.w	lr, #0
 8020c9e:	4640      	mov	r0, r8
 8020ca0:	46ac      	mov	ip, r5
 8020ca2:	46f2      	mov	sl, lr
 8020ca4:	f850 2b04 	ldr.w	r2, [r0], #4
 8020ca8:	b293      	uxth	r3, r2
 8020caa:	fb06 e303 	mla	r3, r6, r3, lr
 8020cae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020cb2:	b29b      	uxth	r3, r3
 8020cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8020cb8:	0c12      	lsrs	r2, r2, #16
 8020cba:	f8dc a000 	ldr.w	sl, [ip]
 8020cbe:	fb06 e202 	mla	r2, r6, r2, lr
 8020cc2:	fa13 f38a 	uxtah	r3, r3, sl
 8020cc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020cca:	fa1f fa82 	uxth.w	sl, r2
 8020cce:	f8dc 2000 	ldr.w	r2, [ip]
 8020cd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020cd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020cda:	b29b      	uxth	r3, r3
 8020cdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020ce0:	4581      	cmp	r9, r0
 8020ce2:	f84c 3b04 	str.w	r3, [ip], #4
 8020ce6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020cea:	d2db      	bcs.n	8020ca4 <quorem+0x44>
 8020cec:	f855 300b 	ldr.w	r3, [r5, fp]
 8020cf0:	b92b      	cbnz	r3, 8020cfe <quorem+0x9e>
 8020cf2:	9b01      	ldr	r3, [sp, #4]
 8020cf4:	3b04      	subs	r3, #4
 8020cf6:	429d      	cmp	r5, r3
 8020cf8:	461a      	mov	r2, r3
 8020cfa:	d32e      	bcc.n	8020d5a <quorem+0xfa>
 8020cfc:	613c      	str	r4, [r7, #16]
 8020cfe:	4638      	mov	r0, r7
 8020d00:	f001 fc92 	bl	8022628 <__mcmp>
 8020d04:	2800      	cmp	r0, #0
 8020d06:	db24      	blt.n	8020d52 <quorem+0xf2>
 8020d08:	3601      	adds	r6, #1
 8020d0a:	4628      	mov	r0, r5
 8020d0c:	f04f 0c00 	mov.w	ip, #0
 8020d10:	f858 2b04 	ldr.w	r2, [r8], #4
 8020d14:	f8d0 e000 	ldr.w	lr, [r0]
 8020d18:	b293      	uxth	r3, r2
 8020d1a:	ebac 0303 	sub.w	r3, ip, r3
 8020d1e:	0c12      	lsrs	r2, r2, #16
 8020d20:	fa13 f38e 	uxtah	r3, r3, lr
 8020d24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020d2c:	b29b      	uxth	r3, r3
 8020d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020d32:	45c1      	cmp	r9, r8
 8020d34:	f840 3b04 	str.w	r3, [r0], #4
 8020d38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020d3c:	d2e8      	bcs.n	8020d10 <quorem+0xb0>
 8020d3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020d46:	b922      	cbnz	r2, 8020d52 <quorem+0xf2>
 8020d48:	3b04      	subs	r3, #4
 8020d4a:	429d      	cmp	r5, r3
 8020d4c:	461a      	mov	r2, r3
 8020d4e:	d30a      	bcc.n	8020d66 <quorem+0x106>
 8020d50:	613c      	str	r4, [r7, #16]
 8020d52:	4630      	mov	r0, r6
 8020d54:	b003      	add	sp, #12
 8020d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d5a:	6812      	ldr	r2, [r2, #0]
 8020d5c:	3b04      	subs	r3, #4
 8020d5e:	2a00      	cmp	r2, #0
 8020d60:	d1cc      	bne.n	8020cfc <quorem+0x9c>
 8020d62:	3c01      	subs	r4, #1
 8020d64:	e7c7      	b.n	8020cf6 <quorem+0x96>
 8020d66:	6812      	ldr	r2, [r2, #0]
 8020d68:	3b04      	subs	r3, #4
 8020d6a:	2a00      	cmp	r2, #0
 8020d6c:	d1f0      	bne.n	8020d50 <quorem+0xf0>
 8020d6e:	3c01      	subs	r4, #1
 8020d70:	e7eb      	b.n	8020d4a <quorem+0xea>
 8020d72:	2000      	movs	r0, #0
 8020d74:	e7ee      	b.n	8020d54 <quorem+0xf4>
	...

08020d78 <_dtoa_r>:
 8020d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d7c:	ed2d 8b02 	vpush	{d8}
 8020d80:	ec57 6b10 	vmov	r6, r7, d0
 8020d84:	b095      	sub	sp, #84	; 0x54
 8020d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020d8c:	9105      	str	r1, [sp, #20]
 8020d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020d92:	4604      	mov	r4, r0
 8020d94:	9209      	str	r2, [sp, #36]	; 0x24
 8020d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8020d98:	b975      	cbnz	r5, 8020db8 <_dtoa_r+0x40>
 8020d9a:	2010      	movs	r0, #16
 8020d9c:	f7fe f848 	bl	801ee30 <malloc>
 8020da0:	4602      	mov	r2, r0
 8020da2:	6260      	str	r0, [r4, #36]	; 0x24
 8020da4:	b920      	cbnz	r0, 8020db0 <_dtoa_r+0x38>
 8020da6:	4bb2      	ldr	r3, [pc, #712]	; (8021070 <_dtoa_r+0x2f8>)
 8020da8:	21ea      	movs	r1, #234	; 0xea
 8020daa:	48b2      	ldr	r0, [pc, #712]	; (8021074 <_dtoa_r+0x2fc>)
 8020dac:	f002 f808 	bl	8022dc0 <__assert_func>
 8020db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020db4:	6005      	str	r5, [r0, #0]
 8020db6:	60c5      	str	r5, [r0, #12]
 8020db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020dba:	6819      	ldr	r1, [r3, #0]
 8020dbc:	b151      	cbz	r1, 8020dd4 <_dtoa_r+0x5c>
 8020dbe:	685a      	ldr	r2, [r3, #4]
 8020dc0:	604a      	str	r2, [r1, #4]
 8020dc2:	2301      	movs	r3, #1
 8020dc4:	4093      	lsls	r3, r2
 8020dc6:	608b      	str	r3, [r1, #8]
 8020dc8:	4620      	mov	r0, r4
 8020dca:	f001 f9a5 	bl	8022118 <_Bfree>
 8020dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020dd0:	2200      	movs	r2, #0
 8020dd2:	601a      	str	r2, [r3, #0]
 8020dd4:	1e3b      	subs	r3, r7, #0
 8020dd6:	bfb9      	ittee	lt
 8020dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020ddc:	9303      	strlt	r3, [sp, #12]
 8020dde:	2300      	movge	r3, #0
 8020de0:	f8c8 3000 	strge.w	r3, [r8]
 8020de4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8020de8:	4ba3      	ldr	r3, [pc, #652]	; (8021078 <_dtoa_r+0x300>)
 8020dea:	bfbc      	itt	lt
 8020dec:	2201      	movlt	r2, #1
 8020dee:	f8c8 2000 	strlt.w	r2, [r8]
 8020df2:	ea33 0309 	bics.w	r3, r3, r9
 8020df6:	d11b      	bne.n	8020e30 <_dtoa_r+0xb8>
 8020df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8020dfe:	6013      	str	r3, [r2, #0]
 8020e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020e04:	4333      	orrs	r3, r6
 8020e06:	f000 857a 	beq.w	80218fe <_dtoa_r+0xb86>
 8020e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020e0c:	b963      	cbnz	r3, 8020e28 <_dtoa_r+0xb0>
 8020e0e:	4b9b      	ldr	r3, [pc, #620]	; (802107c <_dtoa_r+0x304>)
 8020e10:	e024      	b.n	8020e5c <_dtoa_r+0xe4>
 8020e12:	4b9b      	ldr	r3, [pc, #620]	; (8021080 <_dtoa_r+0x308>)
 8020e14:	9300      	str	r3, [sp, #0]
 8020e16:	3308      	adds	r3, #8
 8020e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020e1a:	6013      	str	r3, [r2, #0]
 8020e1c:	9800      	ldr	r0, [sp, #0]
 8020e1e:	b015      	add	sp, #84	; 0x54
 8020e20:	ecbd 8b02 	vpop	{d8}
 8020e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e28:	4b94      	ldr	r3, [pc, #592]	; (802107c <_dtoa_r+0x304>)
 8020e2a:	9300      	str	r3, [sp, #0]
 8020e2c:	3303      	adds	r3, #3
 8020e2e:	e7f3      	b.n	8020e18 <_dtoa_r+0xa0>
 8020e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020e34:	2200      	movs	r2, #0
 8020e36:	ec51 0b17 	vmov	r0, r1, d7
 8020e3a:	2300      	movs	r3, #0
 8020e3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020e40:	f7df fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8020e44:	4680      	mov	r8, r0
 8020e46:	b158      	cbz	r0, 8020e60 <_dtoa_r+0xe8>
 8020e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e4a:	2301      	movs	r3, #1
 8020e4c:	6013      	str	r3, [r2, #0]
 8020e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	f000 8551 	beq.w	80218f8 <_dtoa_r+0xb80>
 8020e56:	488b      	ldr	r0, [pc, #556]	; (8021084 <_dtoa_r+0x30c>)
 8020e58:	6018      	str	r0, [r3, #0]
 8020e5a:	1e43      	subs	r3, r0, #1
 8020e5c:	9300      	str	r3, [sp, #0]
 8020e5e:	e7dd      	b.n	8020e1c <_dtoa_r+0xa4>
 8020e60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020e64:	aa12      	add	r2, sp, #72	; 0x48
 8020e66:	a913      	add	r1, sp, #76	; 0x4c
 8020e68:	4620      	mov	r0, r4
 8020e6a:	f001 fcfd 	bl	8022868 <__d2b>
 8020e6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020e72:	4683      	mov	fp, r0
 8020e74:	2d00      	cmp	r5, #0
 8020e76:	d07c      	beq.n	8020f72 <_dtoa_r+0x1fa>
 8020e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8020e86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020e8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020e92:	4b7d      	ldr	r3, [pc, #500]	; (8021088 <_dtoa_r+0x310>)
 8020e94:	2200      	movs	r2, #0
 8020e96:	4630      	mov	r0, r6
 8020e98:	4639      	mov	r1, r7
 8020e9a:	f7df f9f5 	bl	8000288 <__aeabi_dsub>
 8020e9e:	a36e      	add	r3, pc, #440	; (adr r3, 8021058 <_dtoa_r+0x2e0>)
 8020ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ea4:	f7df fba8 	bl	80005f8 <__aeabi_dmul>
 8020ea8:	a36d      	add	r3, pc, #436	; (adr r3, 8021060 <_dtoa_r+0x2e8>)
 8020eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eae:	f7df f9ed 	bl	800028c <__adddf3>
 8020eb2:	4606      	mov	r6, r0
 8020eb4:	4628      	mov	r0, r5
 8020eb6:	460f      	mov	r7, r1
 8020eb8:	f7df fb34 	bl	8000524 <__aeabi_i2d>
 8020ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8021068 <_dtoa_r+0x2f0>)
 8020ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ec2:	f7df fb99 	bl	80005f8 <__aeabi_dmul>
 8020ec6:	4602      	mov	r2, r0
 8020ec8:	460b      	mov	r3, r1
 8020eca:	4630      	mov	r0, r6
 8020ecc:	4639      	mov	r1, r7
 8020ece:	f7df f9dd 	bl	800028c <__adddf3>
 8020ed2:	4606      	mov	r6, r0
 8020ed4:	460f      	mov	r7, r1
 8020ed6:	f7df fe3f 	bl	8000b58 <__aeabi_d2iz>
 8020eda:	2200      	movs	r2, #0
 8020edc:	4682      	mov	sl, r0
 8020ede:	2300      	movs	r3, #0
 8020ee0:	4630      	mov	r0, r6
 8020ee2:	4639      	mov	r1, r7
 8020ee4:	f7df fdfa 	bl	8000adc <__aeabi_dcmplt>
 8020ee8:	b148      	cbz	r0, 8020efe <_dtoa_r+0x186>
 8020eea:	4650      	mov	r0, sl
 8020eec:	f7df fb1a 	bl	8000524 <__aeabi_i2d>
 8020ef0:	4632      	mov	r2, r6
 8020ef2:	463b      	mov	r3, r7
 8020ef4:	f7df fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8020ef8:	b908      	cbnz	r0, 8020efe <_dtoa_r+0x186>
 8020efa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020efe:	f1ba 0f16 	cmp.w	sl, #22
 8020f02:	d854      	bhi.n	8020fae <_dtoa_r+0x236>
 8020f04:	4b61      	ldr	r3, [pc, #388]	; (802108c <_dtoa_r+0x314>)
 8020f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020f12:	f7df fde3 	bl	8000adc <__aeabi_dcmplt>
 8020f16:	2800      	cmp	r0, #0
 8020f18:	d04b      	beq.n	8020fb2 <_dtoa_r+0x23a>
 8020f1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020f1e:	2300      	movs	r3, #0
 8020f20:	930e      	str	r3, [sp, #56]	; 0x38
 8020f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020f24:	1b5d      	subs	r5, r3, r5
 8020f26:	1e6b      	subs	r3, r5, #1
 8020f28:	9304      	str	r3, [sp, #16]
 8020f2a:	bf43      	ittte	mi
 8020f2c:	2300      	movmi	r3, #0
 8020f2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8020f32:	9304      	strmi	r3, [sp, #16]
 8020f34:	f04f 0800 	movpl.w	r8, #0
 8020f38:	f1ba 0f00 	cmp.w	sl, #0
 8020f3c:	db3b      	blt.n	8020fb6 <_dtoa_r+0x23e>
 8020f3e:	9b04      	ldr	r3, [sp, #16]
 8020f40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020f44:	4453      	add	r3, sl
 8020f46:	9304      	str	r3, [sp, #16]
 8020f48:	2300      	movs	r3, #0
 8020f4a:	9306      	str	r3, [sp, #24]
 8020f4c:	9b05      	ldr	r3, [sp, #20]
 8020f4e:	2b09      	cmp	r3, #9
 8020f50:	d869      	bhi.n	8021026 <_dtoa_r+0x2ae>
 8020f52:	2b05      	cmp	r3, #5
 8020f54:	bfc4      	itt	gt
 8020f56:	3b04      	subgt	r3, #4
 8020f58:	9305      	strgt	r3, [sp, #20]
 8020f5a:	9b05      	ldr	r3, [sp, #20]
 8020f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8020f60:	bfcc      	ite	gt
 8020f62:	2500      	movgt	r5, #0
 8020f64:	2501      	movle	r5, #1
 8020f66:	2b03      	cmp	r3, #3
 8020f68:	d869      	bhi.n	802103e <_dtoa_r+0x2c6>
 8020f6a:	e8df f003 	tbb	[pc, r3]
 8020f6e:	4e2c      	.short	0x4e2c
 8020f70:	5a4c      	.short	0x5a4c
 8020f72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8020f76:	441d      	add	r5, r3
 8020f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020f7c:	2b20      	cmp	r3, #32
 8020f7e:	bfc1      	itttt	gt
 8020f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020f84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020f88:	fa09 f303 	lslgt.w	r3, r9, r3
 8020f8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020f90:	bfda      	itte	le
 8020f92:	f1c3 0320 	rsble	r3, r3, #32
 8020f96:	fa06 f003 	lslle.w	r0, r6, r3
 8020f9a:	4318      	orrgt	r0, r3
 8020f9c:	f7df fab2 	bl	8000504 <__aeabi_ui2d>
 8020fa0:	2301      	movs	r3, #1
 8020fa2:	4606      	mov	r6, r0
 8020fa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020fa8:	3d01      	subs	r5, #1
 8020faa:	9310      	str	r3, [sp, #64]	; 0x40
 8020fac:	e771      	b.n	8020e92 <_dtoa_r+0x11a>
 8020fae:	2301      	movs	r3, #1
 8020fb0:	e7b6      	b.n	8020f20 <_dtoa_r+0x1a8>
 8020fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8020fb4:	e7b5      	b.n	8020f22 <_dtoa_r+0x1aa>
 8020fb6:	f1ca 0300 	rsb	r3, sl, #0
 8020fba:	9306      	str	r3, [sp, #24]
 8020fbc:	2300      	movs	r3, #0
 8020fbe:	eba8 080a 	sub.w	r8, r8, sl
 8020fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8020fc4:	e7c2      	b.n	8020f4c <_dtoa_r+0x1d4>
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	9308      	str	r3, [sp, #32]
 8020fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	dc39      	bgt.n	8021044 <_dtoa_r+0x2cc>
 8020fd0:	f04f 0901 	mov.w	r9, #1
 8020fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8020fd8:	464b      	mov	r3, r9
 8020fda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020fe0:	2200      	movs	r2, #0
 8020fe2:	6042      	str	r2, [r0, #4]
 8020fe4:	2204      	movs	r2, #4
 8020fe6:	f102 0614 	add.w	r6, r2, #20
 8020fea:	429e      	cmp	r6, r3
 8020fec:	6841      	ldr	r1, [r0, #4]
 8020fee:	d92f      	bls.n	8021050 <_dtoa_r+0x2d8>
 8020ff0:	4620      	mov	r0, r4
 8020ff2:	f001 f851 	bl	8022098 <_Balloc>
 8020ff6:	9000      	str	r0, [sp, #0]
 8020ff8:	2800      	cmp	r0, #0
 8020ffa:	d14b      	bne.n	8021094 <_dtoa_r+0x31c>
 8020ffc:	4b24      	ldr	r3, [pc, #144]	; (8021090 <_dtoa_r+0x318>)
 8020ffe:	4602      	mov	r2, r0
 8021000:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021004:	e6d1      	b.n	8020daa <_dtoa_r+0x32>
 8021006:	2301      	movs	r3, #1
 8021008:	e7de      	b.n	8020fc8 <_dtoa_r+0x250>
 802100a:	2300      	movs	r3, #0
 802100c:	9308      	str	r3, [sp, #32]
 802100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021010:	eb0a 0903 	add.w	r9, sl, r3
 8021014:	f109 0301 	add.w	r3, r9, #1
 8021018:	2b01      	cmp	r3, #1
 802101a:	9301      	str	r3, [sp, #4]
 802101c:	bfb8      	it	lt
 802101e:	2301      	movlt	r3, #1
 8021020:	e7dd      	b.n	8020fde <_dtoa_r+0x266>
 8021022:	2301      	movs	r3, #1
 8021024:	e7f2      	b.n	802100c <_dtoa_r+0x294>
 8021026:	2501      	movs	r5, #1
 8021028:	2300      	movs	r3, #0
 802102a:	9305      	str	r3, [sp, #20]
 802102c:	9508      	str	r5, [sp, #32]
 802102e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8021032:	2200      	movs	r2, #0
 8021034:	f8cd 9004 	str.w	r9, [sp, #4]
 8021038:	2312      	movs	r3, #18
 802103a:	9209      	str	r2, [sp, #36]	; 0x24
 802103c:	e7cf      	b.n	8020fde <_dtoa_r+0x266>
 802103e:	2301      	movs	r3, #1
 8021040:	9308      	str	r3, [sp, #32]
 8021042:	e7f4      	b.n	802102e <_dtoa_r+0x2b6>
 8021044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021048:	f8cd 9004 	str.w	r9, [sp, #4]
 802104c:	464b      	mov	r3, r9
 802104e:	e7c6      	b.n	8020fde <_dtoa_r+0x266>
 8021050:	3101      	adds	r1, #1
 8021052:	6041      	str	r1, [r0, #4]
 8021054:	0052      	lsls	r2, r2, #1
 8021056:	e7c6      	b.n	8020fe6 <_dtoa_r+0x26e>
 8021058:	636f4361 	.word	0x636f4361
 802105c:	3fd287a7 	.word	0x3fd287a7
 8021060:	8b60c8b3 	.word	0x8b60c8b3
 8021064:	3fc68a28 	.word	0x3fc68a28
 8021068:	509f79fb 	.word	0x509f79fb
 802106c:	3fd34413 	.word	0x3fd34413
 8021070:	0802593e 	.word	0x0802593e
 8021074:	08025955 	.word	0x08025955
 8021078:	7ff00000 	.word	0x7ff00000
 802107c:	0802593a 	.word	0x0802593a
 8021080:	08025931 	.word	0x08025931
 8021084:	080257b5 	.word	0x080257b5
 8021088:	3ff80000 	.word	0x3ff80000
 802108c:	08025ad0 	.word	0x08025ad0
 8021090:	080259b4 	.word	0x080259b4
 8021094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021096:	9a00      	ldr	r2, [sp, #0]
 8021098:	601a      	str	r2, [r3, #0]
 802109a:	9b01      	ldr	r3, [sp, #4]
 802109c:	2b0e      	cmp	r3, #14
 802109e:	f200 80ad 	bhi.w	80211fc <_dtoa_r+0x484>
 80210a2:	2d00      	cmp	r5, #0
 80210a4:	f000 80aa 	beq.w	80211fc <_dtoa_r+0x484>
 80210a8:	f1ba 0f00 	cmp.w	sl, #0
 80210ac:	dd36      	ble.n	802111c <_dtoa_r+0x3a4>
 80210ae:	4ac3      	ldr	r2, [pc, #780]	; (80213bc <_dtoa_r+0x644>)
 80210b0:	f00a 030f 	and.w	r3, sl, #15
 80210b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80210b8:	ed93 7b00 	vldr	d7, [r3]
 80210bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80210c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80210c4:	eeb0 8a47 	vmov.f32	s16, s14
 80210c8:	eef0 8a67 	vmov.f32	s17, s15
 80210cc:	d016      	beq.n	80210fc <_dtoa_r+0x384>
 80210ce:	4bbc      	ldr	r3, [pc, #752]	; (80213c0 <_dtoa_r+0x648>)
 80210d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80210d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80210d8:	f7df fbb8 	bl	800084c <__aeabi_ddiv>
 80210dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80210e0:	f007 070f 	and.w	r7, r7, #15
 80210e4:	2503      	movs	r5, #3
 80210e6:	4eb6      	ldr	r6, [pc, #728]	; (80213c0 <_dtoa_r+0x648>)
 80210e8:	b957      	cbnz	r7, 8021100 <_dtoa_r+0x388>
 80210ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80210ee:	ec53 2b18 	vmov	r2, r3, d8
 80210f2:	f7df fbab 	bl	800084c <__aeabi_ddiv>
 80210f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80210fa:	e029      	b.n	8021150 <_dtoa_r+0x3d8>
 80210fc:	2502      	movs	r5, #2
 80210fe:	e7f2      	b.n	80210e6 <_dtoa_r+0x36e>
 8021100:	07f9      	lsls	r1, r7, #31
 8021102:	d508      	bpl.n	8021116 <_dtoa_r+0x39e>
 8021104:	ec51 0b18 	vmov	r0, r1, d8
 8021108:	e9d6 2300 	ldrd	r2, r3, [r6]
 802110c:	f7df fa74 	bl	80005f8 <__aeabi_dmul>
 8021110:	ec41 0b18 	vmov	d8, r0, r1
 8021114:	3501      	adds	r5, #1
 8021116:	107f      	asrs	r7, r7, #1
 8021118:	3608      	adds	r6, #8
 802111a:	e7e5      	b.n	80210e8 <_dtoa_r+0x370>
 802111c:	f000 80a6 	beq.w	802126c <_dtoa_r+0x4f4>
 8021120:	f1ca 0600 	rsb	r6, sl, #0
 8021124:	4ba5      	ldr	r3, [pc, #660]	; (80213bc <_dtoa_r+0x644>)
 8021126:	4fa6      	ldr	r7, [pc, #664]	; (80213c0 <_dtoa_r+0x648>)
 8021128:	f006 020f 	and.w	r2, r6, #15
 802112c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021138:	f7df fa5e 	bl	80005f8 <__aeabi_dmul>
 802113c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021140:	1136      	asrs	r6, r6, #4
 8021142:	2300      	movs	r3, #0
 8021144:	2502      	movs	r5, #2
 8021146:	2e00      	cmp	r6, #0
 8021148:	f040 8085 	bne.w	8021256 <_dtoa_r+0x4de>
 802114c:	2b00      	cmp	r3, #0
 802114e:	d1d2      	bne.n	80210f6 <_dtoa_r+0x37e>
 8021150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021152:	2b00      	cmp	r3, #0
 8021154:	f000 808c 	beq.w	8021270 <_dtoa_r+0x4f8>
 8021158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802115c:	4b99      	ldr	r3, [pc, #612]	; (80213c4 <_dtoa_r+0x64c>)
 802115e:	2200      	movs	r2, #0
 8021160:	4630      	mov	r0, r6
 8021162:	4639      	mov	r1, r7
 8021164:	f7df fcba 	bl	8000adc <__aeabi_dcmplt>
 8021168:	2800      	cmp	r0, #0
 802116a:	f000 8081 	beq.w	8021270 <_dtoa_r+0x4f8>
 802116e:	9b01      	ldr	r3, [sp, #4]
 8021170:	2b00      	cmp	r3, #0
 8021172:	d07d      	beq.n	8021270 <_dtoa_r+0x4f8>
 8021174:	f1b9 0f00 	cmp.w	r9, #0
 8021178:	dd3c      	ble.n	80211f4 <_dtoa_r+0x47c>
 802117a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802117e:	9307      	str	r3, [sp, #28]
 8021180:	2200      	movs	r2, #0
 8021182:	4b91      	ldr	r3, [pc, #580]	; (80213c8 <_dtoa_r+0x650>)
 8021184:	4630      	mov	r0, r6
 8021186:	4639      	mov	r1, r7
 8021188:	f7df fa36 	bl	80005f8 <__aeabi_dmul>
 802118c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021190:	3501      	adds	r5, #1
 8021192:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8021196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802119a:	4628      	mov	r0, r5
 802119c:	f7df f9c2 	bl	8000524 <__aeabi_i2d>
 80211a0:	4632      	mov	r2, r6
 80211a2:	463b      	mov	r3, r7
 80211a4:	f7df fa28 	bl	80005f8 <__aeabi_dmul>
 80211a8:	4b88      	ldr	r3, [pc, #544]	; (80213cc <_dtoa_r+0x654>)
 80211aa:	2200      	movs	r2, #0
 80211ac:	f7df f86e 	bl	800028c <__adddf3>
 80211b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80211b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80211b8:	9303      	str	r3, [sp, #12]
 80211ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d15c      	bne.n	802127a <_dtoa_r+0x502>
 80211c0:	4b83      	ldr	r3, [pc, #524]	; (80213d0 <_dtoa_r+0x658>)
 80211c2:	2200      	movs	r2, #0
 80211c4:	4630      	mov	r0, r6
 80211c6:	4639      	mov	r1, r7
 80211c8:	f7df f85e 	bl	8000288 <__aeabi_dsub>
 80211cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80211d0:	4606      	mov	r6, r0
 80211d2:	460f      	mov	r7, r1
 80211d4:	f7df fca0 	bl	8000b18 <__aeabi_dcmpgt>
 80211d8:	2800      	cmp	r0, #0
 80211da:	f040 8296 	bne.w	802170a <_dtoa_r+0x992>
 80211de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80211e2:	4630      	mov	r0, r6
 80211e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80211e8:	4639      	mov	r1, r7
 80211ea:	f7df fc77 	bl	8000adc <__aeabi_dcmplt>
 80211ee:	2800      	cmp	r0, #0
 80211f0:	f040 8288 	bne.w	8021704 <_dtoa_r+0x98c>
 80211f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80211f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80211fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80211fe:	2b00      	cmp	r3, #0
 8021200:	f2c0 8158 	blt.w	80214b4 <_dtoa_r+0x73c>
 8021204:	f1ba 0f0e 	cmp.w	sl, #14
 8021208:	f300 8154 	bgt.w	80214b4 <_dtoa_r+0x73c>
 802120c:	4b6b      	ldr	r3, [pc, #428]	; (80213bc <_dtoa_r+0x644>)
 802120e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021212:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021218:	2b00      	cmp	r3, #0
 802121a:	f280 80e3 	bge.w	80213e4 <_dtoa_r+0x66c>
 802121e:	9b01      	ldr	r3, [sp, #4]
 8021220:	2b00      	cmp	r3, #0
 8021222:	f300 80df 	bgt.w	80213e4 <_dtoa_r+0x66c>
 8021226:	f040 826d 	bne.w	8021704 <_dtoa_r+0x98c>
 802122a:	4b69      	ldr	r3, [pc, #420]	; (80213d0 <_dtoa_r+0x658>)
 802122c:	2200      	movs	r2, #0
 802122e:	4640      	mov	r0, r8
 8021230:	4649      	mov	r1, r9
 8021232:	f7df f9e1 	bl	80005f8 <__aeabi_dmul>
 8021236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802123a:	f7df fc63 	bl	8000b04 <__aeabi_dcmpge>
 802123e:	9e01      	ldr	r6, [sp, #4]
 8021240:	4637      	mov	r7, r6
 8021242:	2800      	cmp	r0, #0
 8021244:	f040 8243 	bne.w	80216ce <_dtoa_r+0x956>
 8021248:	9d00      	ldr	r5, [sp, #0]
 802124a:	2331      	movs	r3, #49	; 0x31
 802124c:	f805 3b01 	strb.w	r3, [r5], #1
 8021250:	f10a 0a01 	add.w	sl, sl, #1
 8021254:	e23f      	b.n	80216d6 <_dtoa_r+0x95e>
 8021256:	07f2      	lsls	r2, r6, #31
 8021258:	d505      	bpl.n	8021266 <_dtoa_r+0x4ee>
 802125a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802125e:	f7df f9cb 	bl	80005f8 <__aeabi_dmul>
 8021262:	3501      	adds	r5, #1
 8021264:	2301      	movs	r3, #1
 8021266:	1076      	asrs	r6, r6, #1
 8021268:	3708      	adds	r7, #8
 802126a:	e76c      	b.n	8021146 <_dtoa_r+0x3ce>
 802126c:	2502      	movs	r5, #2
 802126e:	e76f      	b.n	8021150 <_dtoa_r+0x3d8>
 8021270:	9b01      	ldr	r3, [sp, #4]
 8021272:	f8cd a01c 	str.w	sl, [sp, #28]
 8021276:	930c      	str	r3, [sp, #48]	; 0x30
 8021278:	e78d      	b.n	8021196 <_dtoa_r+0x41e>
 802127a:	9900      	ldr	r1, [sp, #0]
 802127c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802127e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021280:	4b4e      	ldr	r3, [pc, #312]	; (80213bc <_dtoa_r+0x644>)
 8021282:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021286:	4401      	add	r1, r0
 8021288:	9102      	str	r1, [sp, #8]
 802128a:	9908      	ldr	r1, [sp, #32]
 802128c:	eeb0 8a47 	vmov.f32	s16, s14
 8021290:	eef0 8a67 	vmov.f32	s17, s15
 8021294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802129c:	2900      	cmp	r1, #0
 802129e:	d045      	beq.n	802132c <_dtoa_r+0x5b4>
 80212a0:	494c      	ldr	r1, [pc, #304]	; (80213d4 <_dtoa_r+0x65c>)
 80212a2:	2000      	movs	r0, #0
 80212a4:	f7df fad2 	bl	800084c <__aeabi_ddiv>
 80212a8:	ec53 2b18 	vmov	r2, r3, d8
 80212ac:	f7de ffec 	bl	8000288 <__aeabi_dsub>
 80212b0:	9d00      	ldr	r5, [sp, #0]
 80212b2:	ec41 0b18 	vmov	d8, r0, r1
 80212b6:	4639      	mov	r1, r7
 80212b8:	4630      	mov	r0, r6
 80212ba:	f7df fc4d 	bl	8000b58 <__aeabi_d2iz>
 80212be:	900c      	str	r0, [sp, #48]	; 0x30
 80212c0:	f7df f930 	bl	8000524 <__aeabi_i2d>
 80212c4:	4602      	mov	r2, r0
 80212c6:	460b      	mov	r3, r1
 80212c8:	4630      	mov	r0, r6
 80212ca:	4639      	mov	r1, r7
 80212cc:	f7de ffdc 	bl	8000288 <__aeabi_dsub>
 80212d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80212d2:	3330      	adds	r3, #48	; 0x30
 80212d4:	f805 3b01 	strb.w	r3, [r5], #1
 80212d8:	ec53 2b18 	vmov	r2, r3, d8
 80212dc:	4606      	mov	r6, r0
 80212de:	460f      	mov	r7, r1
 80212e0:	f7df fbfc 	bl	8000adc <__aeabi_dcmplt>
 80212e4:	2800      	cmp	r0, #0
 80212e6:	d165      	bne.n	80213b4 <_dtoa_r+0x63c>
 80212e8:	4632      	mov	r2, r6
 80212ea:	463b      	mov	r3, r7
 80212ec:	4935      	ldr	r1, [pc, #212]	; (80213c4 <_dtoa_r+0x64c>)
 80212ee:	2000      	movs	r0, #0
 80212f0:	f7de ffca 	bl	8000288 <__aeabi_dsub>
 80212f4:	ec53 2b18 	vmov	r2, r3, d8
 80212f8:	f7df fbf0 	bl	8000adc <__aeabi_dcmplt>
 80212fc:	2800      	cmp	r0, #0
 80212fe:	f040 80b9 	bne.w	8021474 <_dtoa_r+0x6fc>
 8021302:	9b02      	ldr	r3, [sp, #8]
 8021304:	429d      	cmp	r5, r3
 8021306:	f43f af75 	beq.w	80211f4 <_dtoa_r+0x47c>
 802130a:	4b2f      	ldr	r3, [pc, #188]	; (80213c8 <_dtoa_r+0x650>)
 802130c:	ec51 0b18 	vmov	r0, r1, d8
 8021310:	2200      	movs	r2, #0
 8021312:	f7df f971 	bl	80005f8 <__aeabi_dmul>
 8021316:	4b2c      	ldr	r3, [pc, #176]	; (80213c8 <_dtoa_r+0x650>)
 8021318:	ec41 0b18 	vmov	d8, r0, r1
 802131c:	2200      	movs	r2, #0
 802131e:	4630      	mov	r0, r6
 8021320:	4639      	mov	r1, r7
 8021322:	f7df f969 	bl	80005f8 <__aeabi_dmul>
 8021326:	4606      	mov	r6, r0
 8021328:	460f      	mov	r7, r1
 802132a:	e7c4      	b.n	80212b6 <_dtoa_r+0x53e>
 802132c:	ec51 0b17 	vmov	r0, r1, d7
 8021330:	f7df f962 	bl	80005f8 <__aeabi_dmul>
 8021334:	9b02      	ldr	r3, [sp, #8]
 8021336:	9d00      	ldr	r5, [sp, #0]
 8021338:	930c      	str	r3, [sp, #48]	; 0x30
 802133a:	ec41 0b18 	vmov	d8, r0, r1
 802133e:	4639      	mov	r1, r7
 8021340:	4630      	mov	r0, r6
 8021342:	f7df fc09 	bl	8000b58 <__aeabi_d2iz>
 8021346:	9011      	str	r0, [sp, #68]	; 0x44
 8021348:	f7df f8ec 	bl	8000524 <__aeabi_i2d>
 802134c:	4602      	mov	r2, r0
 802134e:	460b      	mov	r3, r1
 8021350:	4630      	mov	r0, r6
 8021352:	4639      	mov	r1, r7
 8021354:	f7de ff98 	bl	8000288 <__aeabi_dsub>
 8021358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802135a:	3330      	adds	r3, #48	; 0x30
 802135c:	f805 3b01 	strb.w	r3, [r5], #1
 8021360:	9b02      	ldr	r3, [sp, #8]
 8021362:	429d      	cmp	r5, r3
 8021364:	4606      	mov	r6, r0
 8021366:	460f      	mov	r7, r1
 8021368:	f04f 0200 	mov.w	r2, #0
 802136c:	d134      	bne.n	80213d8 <_dtoa_r+0x660>
 802136e:	4b19      	ldr	r3, [pc, #100]	; (80213d4 <_dtoa_r+0x65c>)
 8021370:	ec51 0b18 	vmov	r0, r1, d8
 8021374:	f7de ff8a 	bl	800028c <__adddf3>
 8021378:	4602      	mov	r2, r0
 802137a:	460b      	mov	r3, r1
 802137c:	4630      	mov	r0, r6
 802137e:	4639      	mov	r1, r7
 8021380:	f7df fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8021384:	2800      	cmp	r0, #0
 8021386:	d175      	bne.n	8021474 <_dtoa_r+0x6fc>
 8021388:	ec53 2b18 	vmov	r2, r3, d8
 802138c:	4911      	ldr	r1, [pc, #68]	; (80213d4 <_dtoa_r+0x65c>)
 802138e:	2000      	movs	r0, #0
 8021390:	f7de ff7a 	bl	8000288 <__aeabi_dsub>
 8021394:	4602      	mov	r2, r0
 8021396:	460b      	mov	r3, r1
 8021398:	4630      	mov	r0, r6
 802139a:	4639      	mov	r1, r7
 802139c:	f7df fb9e 	bl	8000adc <__aeabi_dcmplt>
 80213a0:	2800      	cmp	r0, #0
 80213a2:	f43f af27 	beq.w	80211f4 <_dtoa_r+0x47c>
 80213a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80213a8:	1e6b      	subs	r3, r5, #1
 80213aa:	930c      	str	r3, [sp, #48]	; 0x30
 80213ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80213b0:	2b30      	cmp	r3, #48	; 0x30
 80213b2:	d0f8      	beq.n	80213a6 <_dtoa_r+0x62e>
 80213b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80213b8:	e04a      	b.n	8021450 <_dtoa_r+0x6d8>
 80213ba:	bf00      	nop
 80213bc:	08025ad0 	.word	0x08025ad0
 80213c0:	08025aa8 	.word	0x08025aa8
 80213c4:	3ff00000 	.word	0x3ff00000
 80213c8:	40240000 	.word	0x40240000
 80213cc:	401c0000 	.word	0x401c0000
 80213d0:	40140000 	.word	0x40140000
 80213d4:	3fe00000 	.word	0x3fe00000
 80213d8:	4baf      	ldr	r3, [pc, #700]	; (8021698 <_dtoa_r+0x920>)
 80213da:	f7df f90d 	bl	80005f8 <__aeabi_dmul>
 80213de:	4606      	mov	r6, r0
 80213e0:	460f      	mov	r7, r1
 80213e2:	e7ac      	b.n	802133e <_dtoa_r+0x5c6>
 80213e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80213e8:	9d00      	ldr	r5, [sp, #0]
 80213ea:	4642      	mov	r2, r8
 80213ec:	464b      	mov	r3, r9
 80213ee:	4630      	mov	r0, r6
 80213f0:	4639      	mov	r1, r7
 80213f2:	f7df fa2b 	bl	800084c <__aeabi_ddiv>
 80213f6:	f7df fbaf 	bl	8000b58 <__aeabi_d2iz>
 80213fa:	9002      	str	r0, [sp, #8]
 80213fc:	f7df f892 	bl	8000524 <__aeabi_i2d>
 8021400:	4642      	mov	r2, r8
 8021402:	464b      	mov	r3, r9
 8021404:	f7df f8f8 	bl	80005f8 <__aeabi_dmul>
 8021408:	4602      	mov	r2, r0
 802140a:	460b      	mov	r3, r1
 802140c:	4630      	mov	r0, r6
 802140e:	4639      	mov	r1, r7
 8021410:	f7de ff3a 	bl	8000288 <__aeabi_dsub>
 8021414:	9e02      	ldr	r6, [sp, #8]
 8021416:	9f01      	ldr	r7, [sp, #4]
 8021418:	3630      	adds	r6, #48	; 0x30
 802141a:	f805 6b01 	strb.w	r6, [r5], #1
 802141e:	9e00      	ldr	r6, [sp, #0]
 8021420:	1bae      	subs	r6, r5, r6
 8021422:	42b7      	cmp	r7, r6
 8021424:	4602      	mov	r2, r0
 8021426:	460b      	mov	r3, r1
 8021428:	d137      	bne.n	802149a <_dtoa_r+0x722>
 802142a:	f7de ff2f 	bl	800028c <__adddf3>
 802142e:	4642      	mov	r2, r8
 8021430:	464b      	mov	r3, r9
 8021432:	4606      	mov	r6, r0
 8021434:	460f      	mov	r7, r1
 8021436:	f7df fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 802143a:	b9c8      	cbnz	r0, 8021470 <_dtoa_r+0x6f8>
 802143c:	4642      	mov	r2, r8
 802143e:	464b      	mov	r3, r9
 8021440:	4630      	mov	r0, r6
 8021442:	4639      	mov	r1, r7
 8021444:	f7df fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8021448:	b110      	cbz	r0, 8021450 <_dtoa_r+0x6d8>
 802144a:	9b02      	ldr	r3, [sp, #8]
 802144c:	07d9      	lsls	r1, r3, #31
 802144e:	d40f      	bmi.n	8021470 <_dtoa_r+0x6f8>
 8021450:	4620      	mov	r0, r4
 8021452:	4659      	mov	r1, fp
 8021454:	f000 fe60 	bl	8022118 <_Bfree>
 8021458:	2300      	movs	r3, #0
 802145a:	702b      	strb	r3, [r5, #0]
 802145c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802145e:	f10a 0001 	add.w	r0, sl, #1
 8021462:	6018      	str	r0, [r3, #0]
 8021464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021466:	2b00      	cmp	r3, #0
 8021468:	f43f acd8 	beq.w	8020e1c <_dtoa_r+0xa4>
 802146c:	601d      	str	r5, [r3, #0]
 802146e:	e4d5      	b.n	8020e1c <_dtoa_r+0xa4>
 8021470:	f8cd a01c 	str.w	sl, [sp, #28]
 8021474:	462b      	mov	r3, r5
 8021476:	461d      	mov	r5, r3
 8021478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802147c:	2a39      	cmp	r2, #57	; 0x39
 802147e:	d108      	bne.n	8021492 <_dtoa_r+0x71a>
 8021480:	9a00      	ldr	r2, [sp, #0]
 8021482:	429a      	cmp	r2, r3
 8021484:	d1f7      	bne.n	8021476 <_dtoa_r+0x6fe>
 8021486:	9a07      	ldr	r2, [sp, #28]
 8021488:	9900      	ldr	r1, [sp, #0]
 802148a:	3201      	adds	r2, #1
 802148c:	9207      	str	r2, [sp, #28]
 802148e:	2230      	movs	r2, #48	; 0x30
 8021490:	700a      	strb	r2, [r1, #0]
 8021492:	781a      	ldrb	r2, [r3, #0]
 8021494:	3201      	adds	r2, #1
 8021496:	701a      	strb	r2, [r3, #0]
 8021498:	e78c      	b.n	80213b4 <_dtoa_r+0x63c>
 802149a:	4b7f      	ldr	r3, [pc, #508]	; (8021698 <_dtoa_r+0x920>)
 802149c:	2200      	movs	r2, #0
 802149e:	f7df f8ab 	bl	80005f8 <__aeabi_dmul>
 80214a2:	2200      	movs	r2, #0
 80214a4:	2300      	movs	r3, #0
 80214a6:	4606      	mov	r6, r0
 80214a8:	460f      	mov	r7, r1
 80214aa:	f7df fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80214ae:	2800      	cmp	r0, #0
 80214b0:	d09b      	beq.n	80213ea <_dtoa_r+0x672>
 80214b2:	e7cd      	b.n	8021450 <_dtoa_r+0x6d8>
 80214b4:	9a08      	ldr	r2, [sp, #32]
 80214b6:	2a00      	cmp	r2, #0
 80214b8:	f000 80c4 	beq.w	8021644 <_dtoa_r+0x8cc>
 80214bc:	9a05      	ldr	r2, [sp, #20]
 80214be:	2a01      	cmp	r2, #1
 80214c0:	f300 80a8 	bgt.w	8021614 <_dtoa_r+0x89c>
 80214c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80214c6:	2a00      	cmp	r2, #0
 80214c8:	f000 80a0 	beq.w	802160c <_dtoa_r+0x894>
 80214cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80214d0:	9e06      	ldr	r6, [sp, #24]
 80214d2:	4645      	mov	r5, r8
 80214d4:	9a04      	ldr	r2, [sp, #16]
 80214d6:	2101      	movs	r1, #1
 80214d8:	441a      	add	r2, r3
 80214da:	4620      	mov	r0, r4
 80214dc:	4498      	add	r8, r3
 80214de:	9204      	str	r2, [sp, #16]
 80214e0:	f000 ff20 	bl	8022324 <__i2b>
 80214e4:	4607      	mov	r7, r0
 80214e6:	2d00      	cmp	r5, #0
 80214e8:	dd0b      	ble.n	8021502 <_dtoa_r+0x78a>
 80214ea:	9b04      	ldr	r3, [sp, #16]
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	dd08      	ble.n	8021502 <_dtoa_r+0x78a>
 80214f0:	42ab      	cmp	r3, r5
 80214f2:	9a04      	ldr	r2, [sp, #16]
 80214f4:	bfa8      	it	ge
 80214f6:	462b      	movge	r3, r5
 80214f8:	eba8 0803 	sub.w	r8, r8, r3
 80214fc:	1aed      	subs	r5, r5, r3
 80214fe:	1ad3      	subs	r3, r2, r3
 8021500:	9304      	str	r3, [sp, #16]
 8021502:	9b06      	ldr	r3, [sp, #24]
 8021504:	b1fb      	cbz	r3, 8021546 <_dtoa_r+0x7ce>
 8021506:	9b08      	ldr	r3, [sp, #32]
 8021508:	2b00      	cmp	r3, #0
 802150a:	f000 809f 	beq.w	802164c <_dtoa_r+0x8d4>
 802150e:	2e00      	cmp	r6, #0
 8021510:	dd11      	ble.n	8021536 <_dtoa_r+0x7be>
 8021512:	4639      	mov	r1, r7
 8021514:	4632      	mov	r2, r6
 8021516:	4620      	mov	r0, r4
 8021518:	f000 ffc0 	bl	802249c <__pow5mult>
 802151c:	465a      	mov	r2, fp
 802151e:	4601      	mov	r1, r0
 8021520:	4607      	mov	r7, r0
 8021522:	4620      	mov	r0, r4
 8021524:	f000 ff14 	bl	8022350 <__multiply>
 8021528:	4659      	mov	r1, fp
 802152a:	9007      	str	r0, [sp, #28]
 802152c:	4620      	mov	r0, r4
 802152e:	f000 fdf3 	bl	8022118 <_Bfree>
 8021532:	9b07      	ldr	r3, [sp, #28]
 8021534:	469b      	mov	fp, r3
 8021536:	9b06      	ldr	r3, [sp, #24]
 8021538:	1b9a      	subs	r2, r3, r6
 802153a:	d004      	beq.n	8021546 <_dtoa_r+0x7ce>
 802153c:	4659      	mov	r1, fp
 802153e:	4620      	mov	r0, r4
 8021540:	f000 ffac 	bl	802249c <__pow5mult>
 8021544:	4683      	mov	fp, r0
 8021546:	2101      	movs	r1, #1
 8021548:	4620      	mov	r0, r4
 802154a:	f000 feeb 	bl	8022324 <__i2b>
 802154e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021550:	2b00      	cmp	r3, #0
 8021552:	4606      	mov	r6, r0
 8021554:	dd7c      	ble.n	8021650 <_dtoa_r+0x8d8>
 8021556:	461a      	mov	r2, r3
 8021558:	4601      	mov	r1, r0
 802155a:	4620      	mov	r0, r4
 802155c:	f000 ff9e 	bl	802249c <__pow5mult>
 8021560:	9b05      	ldr	r3, [sp, #20]
 8021562:	2b01      	cmp	r3, #1
 8021564:	4606      	mov	r6, r0
 8021566:	dd76      	ble.n	8021656 <_dtoa_r+0x8de>
 8021568:	2300      	movs	r3, #0
 802156a:	9306      	str	r3, [sp, #24]
 802156c:	6933      	ldr	r3, [r6, #16]
 802156e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021572:	6918      	ldr	r0, [r3, #16]
 8021574:	f000 fe86 	bl	8022284 <__hi0bits>
 8021578:	f1c0 0020 	rsb	r0, r0, #32
 802157c:	9b04      	ldr	r3, [sp, #16]
 802157e:	4418      	add	r0, r3
 8021580:	f010 001f 	ands.w	r0, r0, #31
 8021584:	f000 8086 	beq.w	8021694 <_dtoa_r+0x91c>
 8021588:	f1c0 0320 	rsb	r3, r0, #32
 802158c:	2b04      	cmp	r3, #4
 802158e:	dd7f      	ble.n	8021690 <_dtoa_r+0x918>
 8021590:	f1c0 001c 	rsb	r0, r0, #28
 8021594:	9b04      	ldr	r3, [sp, #16]
 8021596:	4403      	add	r3, r0
 8021598:	4480      	add	r8, r0
 802159a:	4405      	add	r5, r0
 802159c:	9304      	str	r3, [sp, #16]
 802159e:	f1b8 0f00 	cmp.w	r8, #0
 80215a2:	dd05      	ble.n	80215b0 <_dtoa_r+0x838>
 80215a4:	4659      	mov	r1, fp
 80215a6:	4642      	mov	r2, r8
 80215a8:	4620      	mov	r0, r4
 80215aa:	f000 ffd1 	bl	8022550 <__lshift>
 80215ae:	4683      	mov	fp, r0
 80215b0:	9b04      	ldr	r3, [sp, #16]
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	dd05      	ble.n	80215c2 <_dtoa_r+0x84a>
 80215b6:	4631      	mov	r1, r6
 80215b8:	461a      	mov	r2, r3
 80215ba:	4620      	mov	r0, r4
 80215bc:	f000 ffc8 	bl	8022550 <__lshift>
 80215c0:	4606      	mov	r6, r0
 80215c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d069      	beq.n	802169c <_dtoa_r+0x924>
 80215c8:	4631      	mov	r1, r6
 80215ca:	4658      	mov	r0, fp
 80215cc:	f001 f82c 	bl	8022628 <__mcmp>
 80215d0:	2800      	cmp	r0, #0
 80215d2:	da63      	bge.n	802169c <_dtoa_r+0x924>
 80215d4:	2300      	movs	r3, #0
 80215d6:	4659      	mov	r1, fp
 80215d8:	220a      	movs	r2, #10
 80215da:	4620      	mov	r0, r4
 80215dc:	f000 fdbe 	bl	802215c <__multadd>
 80215e0:	9b08      	ldr	r3, [sp, #32]
 80215e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80215e6:	4683      	mov	fp, r0
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	f000 818f 	beq.w	802190c <_dtoa_r+0xb94>
 80215ee:	4639      	mov	r1, r7
 80215f0:	2300      	movs	r3, #0
 80215f2:	220a      	movs	r2, #10
 80215f4:	4620      	mov	r0, r4
 80215f6:	f000 fdb1 	bl	802215c <__multadd>
 80215fa:	f1b9 0f00 	cmp.w	r9, #0
 80215fe:	4607      	mov	r7, r0
 8021600:	f300 808e 	bgt.w	8021720 <_dtoa_r+0x9a8>
 8021604:	9b05      	ldr	r3, [sp, #20]
 8021606:	2b02      	cmp	r3, #2
 8021608:	dc50      	bgt.n	80216ac <_dtoa_r+0x934>
 802160a:	e089      	b.n	8021720 <_dtoa_r+0x9a8>
 802160c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802160e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021612:	e75d      	b.n	80214d0 <_dtoa_r+0x758>
 8021614:	9b01      	ldr	r3, [sp, #4]
 8021616:	1e5e      	subs	r6, r3, #1
 8021618:	9b06      	ldr	r3, [sp, #24]
 802161a:	42b3      	cmp	r3, r6
 802161c:	bfbf      	itttt	lt
 802161e:	9b06      	ldrlt	r3, [sp, #24]
 8021620:	9606      	strlt	r6, [sp, #24]
 8021622:	1af2      	sublt	r2, r6, r3
 8021624:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021626:	bfb6      	itet	lt
 8021628:	189b      	addlt	r3, r3, r2
 802162a:	1b9e      	subge	r6, r3, r6
 802162c:	930d      	strlt	r3, [sp, #52]	; 0x34
 802162e:	9b01      	ldr	r3, [sp, #4]
 8021630:	bfb8      	it	lt
 8021632:	2600      	movlt	r6, #0
 8021634:	2b00      	cmp	r3, #0
 8021636:	bfb5      	itete	lt
 8021638:	eba8 0503 	sublt.w	r5, r8, r3
 802163c:	9b01      	ldrge	r3, [sp, #4]
 802163e:	2300      	movlt	r3, #0
 8021640:	4645      	movge	r5, r8
 8021642:	e747      	b.n	80214d4 <_dtoa_r+0x75c>
 8021644:	9e06      	ldr	r6, [sp, #24]
 8021646:	9f08      	ldr	r7, [sp, #32]
 8021648:	4645      	mov	r5, r8
 802164a:	e74c      	b.n	80214e6 <_dtoa_r+0x76e>
 802164c:	9a06      	ldr	r2, [sp, #24]
 802164e:	e775      	b.n	802153c <_dtoa_r+0x7c4>
 8021650:	9b05      	ldr	r3, [sp, #20]
 8021652:	2b01      	cmp	r3, #1
 8021654:	dc18      	bgt.n	8021688 <_dtoa_r+0x910>
 8021656:	9b02      	ldr	r3, [sp, #8]
 8021658:	b9b3      	cbnz	r3, 8021688 <_dtoa_r+0x910>
 802165a:	9b03      	ldr	r3, [sp, #12]
 802165c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021660:	b9a3      	cbnz	r3, 802168c <_dtoa_r+0x914>
 8021662:	9b03      	ldr	r3, [sp, #12]
 8021664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021668:	0d1b      	lsrs	r3, r3, #20
 802166a:	051b      	lsls	r3, r3, #20
 802166c:	b12b      	cbz	r3, 802167a <_dtoa_r+0x902>
 802166e:	9b04      	ldr	r3, [sp, #16]
 8021670:	3301      	adds	r3, #1
 8021672:	9304      	str	r3, [sp, #16]
 8021674:	f108 0801 	add.w	r8, r8, #1
 8021678:	2301      	movs	r3, #1
 802167a:	9306      	str	r3, [sp, #24]
 802167c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802167e:	2b00      	cmp	r3, #0
 8021680:	f47f af74 	bne.w	802156c <_dtoa_r+0x7f4>
 8021684:	2001      	movs	r0, #1
 8021686:	e779      	b.n	802157c <_dtoa_r+0x804>
 8021688:	2300      	movs	r3, #0
 802168a:	e7f6      	b.n	802167a <_dtoa_r+0x902>
 802168c:	9b02      	ldr	r3, [sp, #8]
 802168e:	e7f4      	b.n	802167a <_dtoa_r+0x902>
 8021690:	d085      	beq.n	802159e <_dtoa_r+0x826>
 8021692:	4618      	mov	r0, r3
 8021694:	301c      	adds	r0, #28
 8021696:	e77d      	b.n	8021594 <_dtoa_r+0x81c>
 8021698:	40240000 	.word	0x40240000
 802169c:	9b01      	ldr	r3, [sp, #4]
 802169e:	2b00      	cmp	r3, #0
 80216a0:	dc38      	bgt.n	8021714 <_dtoa_r+0x99c>
 80216a2:	9b05      	ldr	r3, [sp, #20]
 80216a4:	2b02      	cmp	r3, #2
 80216a6:	dd35      	ble.n	8021714 <_dtoa_r+0x99c>
 80216a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80216ac:	f1b9 0f00 	cmp.w	r9, #0
 80216b0:	d10d      	bne.n	80216ce <_dtoa_r+0x956>
 80216b2:	4631      	mov	r1, r6
 80216b4:	464b      	mov	r3, r9
 80216b6:	2205      	movs	r2, #5
 80216b8:	4620      	mov	r0, r4
 80216ba:	f000 fd4f 	bl	802215c <__multadd>
 80216be:	4601      	mov	r1, r0
 80216c0:	4606      	mov	r6, r0
 80216c2:	4658      	mov	r0, fp
 80216c4:	f000 ffb0 	bl	8022628 <__mcmp>
 80216c8:	2800      	cmp	r0, #0
 80216ca:	f73f adbd 	bgt.w	8021248 <_dtoa_r+0x4d0>
 80216ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80216d0:	9d00      	ldr	r5, [sp, #0]
 80216d2:	ea6f 0a03 	mvn.w	sl, r3
 80216d6:	f04f 0800 	mov.w	r8, #0
 80216da:	4631      	mov	r1, r6
 80216dc:	4620      	mov	r0, r4
 80216de:	f000 fd1b 	bl	8022118 <_Bfree>
 80216e2:	2f00      	cmp	r7, #0
 80216e4:	f43f aeb4 	beq.w	8021450 <_dtoa_r+0x6d8>
 80216e8:	f1b8 0f00 	cmp.w	r8, #0
 80216ec:	d005      	beq.n	80216fa <_dtoa_r+0x982>
 80216ee:	45b8      	cmp	r8, r7
 80216f0:	d003      	beq.n	80216fa <_dtoa_r+0x982>
 80216f2:	4641      	mov	r1, r8
 80216f4:	4620      	mov	r0, r4
 80216f6:	f000 fd0f 	bl	8022118 <_Bfree>
 80216fa:	4639      	mov	r1, r7
 80216fc:	4620      	mov	r0, r4
 80216fe:	f000 fd0b 	bl	8022118 <_Bfree>
 8021702:	e6a5      	b.n	8021450 <_dtoa_r+0x6d8>
 8021704:	2600      	movs	r6, #0
 8021706:	4637      	mov	r7, r6
 8021708:	e7e1      	b.n	80216ce <_dtoa_r+0x956>
 802170a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802170c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021710:	4637      	mov	r7, r6
 8021712:	e599      	b.n	8021248 <_dtoa_r+0x4d0>
 8021714:	9b08      	ldr	r3, [sp, #32]
 8021716:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802171a:	2b00      	cmp	r3, #0
 802171c:	f000 80fd 	beq.w	802191a <_dtoa_r+0xba2>
 8021720:	2d00      	cmp	r5, #0
 8021722:	dd05      	ble.n	8021730 <_dtoa_r+0x9b8>
 8021724:	4639      	mov	r1, r7
 8021726:	462a      	mov	r2, r5
 8021728:	4620      	mov	r0, r4
 802172a:	f000 ff11 	bl	8022550 <__lshift>
 802172e:	4607      	mov	r7, r0
 8021730:	9b06      	ldr	r3, [sp, #24]
 8021732:	2b00      	cmp	r3, #0
 8021734:	d05c      	beq.n	80217f0 <_dtoa_r+0xa78>
 8021736:	6879      	ldr	r1, [r7, #4]
 8021738:	4620      	mov	r0, r4
 802173a:	f000 fcad 	bl	8022098 <_Balloc>
 802173e:	4605      	mov	r5, r0
 8021740:	b928      	cbnz	r0, 802174e <_dtoa_r+0x9d6>
 8021742:	4b80      	ldr	r3, [pc, #512]	; (8021944 <_dtoa_r+0xbcc>)
 8021744:	4602      	mov	r2, r0
 8021746:	f240 21ea 	movw	r1, #746	; 0x2ea
 802174a:	f7ff bb2e 	b.w	8020daa <_dtoa_r+0x32>
 802174e:	693a      	ldr	r2, [r7, #16]
 8021750:	3202      	adds	r2, #2
 8021752:	0092      	lsls	r2, r2, #2
 8021754:	f107 010c 	add.w	r1, r7, #12
 8021758:	300c      	adds	r0, #12
 802175a:	f7fd fb71 	bl	801ee40 <memcpy>
 802175e:	2201      	movs	r2, #1
 8021760:	4629      	mov	r1, r5
 8021762:	4620      	mov	r0, r4
 8021764:	f000 fef4 	bl	8022550 <__lshift>
 8021768:	9b00      	ldr	r3, [sp, #0]
 802176a:	3301      	adds	r3, #1
 802176c:	9301      	str	r3, [sp, #4]
 802176e:	9b00      	ldr	r3, [sp, #0]
 8021770:	444b      	add	r3, r9
 8021772:	9307      	str	r3, [sp, #28]
 8021774:	9b02      	ldr	r3, [sp, #8]
 8021776:	f003 0301 	and.w	r3, r3, #1
 802177a:	46b8      	mov	r8, r7
 802177c:	9306      	str	r3, [sp, #24]
 802177e:	4607      	mov	r7, r0
 8021780:	9b01      	ldr	r3, [sp, #4]
 8021782:	4631      	mov	r1, r6
 8021784:	3b01      	subs	r3, #1
 8021786:	4658      	mov	r0, fp
 8021788:	9302      	str	r3, [sp, #8]
 802178a:	f7ff fa69 	bl	8020c60 <quorem>
 802178e:	4603      	mov	r3, r0
 8021790:	3330      	adds	r3, #48	; 0x30
 8021792:	9004      	str	r0, [sp, #16]
 8021794:	4641      	mov	r1, r8
 8021796:	4658      	mov	r0, fp
 8021798:	9308      	str	r3, [sp, #32]
 802179a:	f000 ff45 	bl	8022628 <__mcmp>
 802179e:	463a      	mov	r2, r7
 80217a0:	4681      	mov	r9, r0
 80217a2:	4631      	mov	r1, r6
 80217a4:	4620      	mov	r0, r4
 80217a6:	f000 ff5b 	bl	8022660 <__mdiff>
 80217aa:	68c2      	ldr	r2, [r0, #12]
 80217ac:	9b08      	ldr	r3, [sp, #32]
 80217ae:	4605      	mov	r5, r0
 80217b0:	bb02      	cbnz	r2, 80217f4 <_dtoa_r+0xa7c>
 80217b2:	4601      	mov	r1, r0
 80217b4:	4658      	mov	r0, fp
 80217b6:	f000 ff37 	bl	8022628 <__mcmp>
 80217ba:	9b08      	ldr	r3, [sp, #32]
 80217bc:	4602      	mov	r2, r0
 80217be:	4629      	mov	r1, r5
 80217c0:	4620      	mov	r0, r4
 80217c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80217c6:	f000 fca7 	bl	8022118 <_Bfree>
 80217ca:	9b05      	ldr	r3, [sp, #20]
 80217cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80217ce:	9d01      	ldr	r5, [sp, #4]
 80217d0:	ea43 0102 	orr.w	r1, r3, r2
 80217d4:	9b06      	ldr	r3, [sp, #24]
 80217d6:	430b      	orrs	r3, r1
 80217d8:	9b08      	ldr	r3, [sp, #32]
 80217da:	d10d      	bne.n	80217f8 <_dtoa_r+0xa80>
 80217dc:	2b39      	cmp	r3, #57	; 0x39
 80217de:	d029      	beq.n	8021834 <_dtoa_r+0xabc>
 80217e0:	f1b9 0f00 	cmp.w	r9, #0
 80217e4:	dd01      	ble.n	80217ea <_dtoa_r+0xa72>
 80217e6:	9b04      	ldr	r3, [sp, #16]
 80217e8:	3331      	adds	r3, #49	; 0x31
 80217ea:	9a02      	ldr	r2, [sp, #8]
 80217ec:	7013      	strb	r3, [r2, #0]
 80217ee:	e774      	b.n	80216da <_dtoa_r+0x962>
 80217f0:	4638      	mov	r0, r7
 80217f2:	e7b9      	b.n	8021768 <_dtoa_r+0x9f0>
 80217f4:	2201      	movs	r2, #1
 80217f6:	e7e2      	b.n	80217be <_dtoa_r+0xa46>
 80217f8:	f1b9 0f00 	cmp.w	r9, #0
 80217fc:	db06      	blt.n	802180c <_dtoa_r+0xa94>
 80217fe:	9905      	ldr	r1, [sp, #20]
 8021800:	ea41 0909 	orr.w	r9, r1, r9
 8021804:	9906      	ldr	r1, [sp, #24]
 8021806:	ea59 0101 	orrs.w	r1, r9, r1
 802180a:	d120      	bne.n	802184e <_dtoa_r+0xad6>
 802180c:	2a00      	cmp	r2, #0
 802180e:	ddec      	ble.n	80217ea <_dtoa_r+0xa72>
 8021810:	4659      	mov	r1, fp
 8021812:	2201      	movs	r2, #1
 8021814:	4620      	mov	r0, r4
 8021816:	9301      	str	r3, [sp, #4]
 8021818:	f000 fe9a 	bl	8022550 <__lshift>
 802181c:	4631      	mov	r1, r6
 802181e:	4683      	mov	fp, r0
 8021820:	f000 ff02 	bl	8022628 <__mcmp>
 8021824:	2800      	cmp	r0, #0
 8021826:	9b01      	ldr	r3, [sp, #4]
 8021828:	dc02      	bgt.n	8021830 <_dtoa_r+0xab8>
 802182a:	d1de      	bne.n	80217ea <_dtoa_r+0xa72>
 802182c:	07da      	lsls	r2, r3, #31
 802182e:	d5dc      	bpl.n	80217ea <_dtoa_r+0xa72>
 8021830:	2b39      	cmp	r3, #57	; 0x39
 8021832:	d1d8      	bne.n	80217e6 <_dtoa_r+0xa6e>
 8021834:	9a02      	ldr	r2, [sp, #8]
 8021836:	2339      	movs	r3, #57	; 0x39
 8021838:	7013      	strb	r3, [r2, #0]
 802183a:	462b      	mov	r3, r5
 802183c:	461d      	mov	r5, r3
 802183e:	3b01      	subs	r3, #1
 8021840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021844:	2a39      	cmp	r2, #57	; 0x39
 8021846:	d050      	beq.n	80218ea <_dtoa_r+0xb72>
 8021848:	3201      	adds	r2, #1
 802184a:	701a      	strb	r2, [r3, #0]
 802184c:	e745      	b.n	80216da <_dtoa_r+0x962>
 802184e:	2a00      	cmp	r2, #0
 8021850:	dd03      	ble.n	802185a <_dtoa_r+0xae2>
 8021852:	2b39      	cmp	r3, #57	; 0x39
 8021854:	d0ee      	beq.n	8021834 <_dtoa_r+0xabc>
 8021856:	3301      	adds	r3, #1
 8021858:	e7c7      	b.n	80217ea <_dtoa_r+0xa72>
 802185a:	9a01      	ldr	r2, [sp, #4]
 802185c:	9907      	ldr	r1, [sp, #28]
 802185e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021862:	428a      	cmp	r2, r1
 8021864:	d02a      	beq.n	80218bc <_dtoa_r+0xb44>
 8021866:	4659      	mov	r1, fp
 8021868:	2300      	movs	r3, #0
 802186a:	220a      	movs	r2, #10
 802186c:	4620      	mov	r0, r4
 802186e:	f000 fc75 	bl	802215c <__multadd>
 8021872:	45b8      	cmp	r8, r7
 8021874:	4683      	mov	fp, r0
 8021876:	f04f 0300 	mov.w	r3, #0
 802187a:	f04f 020a 	mov.w	r2, #10
 802187e:	4641      	mov	r1, r8
 8021880:	4620      	mov	r0, r4
 8021882:	d107      	bne.n	8021894 <_dtoa_r+0xb1c>
 8021884:	f000 fc6a 	bl	802215c <__multadd>
 8021888:	4680      	mov	r8, r0
 802188a:	4607      	mov	r7, r0
 802188c:	9b01      	ldr	r3, [sp, #4]
 802188e:	3301      	adds	r3, #1
 8021890:	9301      	str	r3, [sp, #4]
 8021892:	e775      	b.n	8021780 <_dtoa_r+0xa08>
 8021894:	f000 fc62 	bl	802215c <__multadd>
 8021898:	4639      	mov	r1, r7
 802189a:	4680      	mov	r8, r0
 802189c:	2300      	movs	r3, #0
 802189e:	220a      	movs	r2, #10
 80218a0:	4620      	mov	r0, r4
 80218a2:	f000 fc5b 	bl	802215c <__multadd>
 80218a6:	4607      	mov	r7, r0
 80218a8:	e7f0      	b.n	802188c <_dtoa_r+0xb14>
 80218aa:	f1b9 0f00 	cmp.w	r9, #0
 80218ae:	9a00      	ldr	r2, [sp, #0]
 80218b0:	bfcc      	ite	gt
 80218b2:	464d      	movgt	r5, r9
 80218b4:	2501      	movle	r5, #1
 80218b6:	4415      	add	r5, r2
 80218b8:	f04f 0800 	mov.w	r8, #0
 80218bc:	4659      	mov	r1, fp
 80218be:	2201      	movs	r2, #1
 80218c0:	4620      	mov	r0, r4
 80218c2:	9301      	str	r3, [sp, #4]
 80218c4:	f000 fe44 	bl	8022550 <__lshift>
 80218c8:	4631      	mov	r1, r6
 80218ca:	4683      	mov	fp, r0
 80218cc:	f000 feac 	bl	8022628 <__mcmp>
 80218d0:	2800      	cmp	r0, #0
 80218d2:	dcb2      	bgt.n	802183a <_dtoa_r+0xac2>
 80218d4:	d102      	bne.n	80218dc <_dtoa_r+0xb64>
 80218d6:	9b01      	ldr	r3, [sp, #4]
 80218d8:	07db      	lsls	r3, r3, #31
 80218da:	d4ae      	bmi.n	802183a <_dtoa_r+0xac2>
 80218dc:	462b      	mov	r3, r5
 80218de:	461d      	mov	r5, r3
 80218e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80218e4:	2a30      	cmp	r2, #48	; 0x30
 80218e6:	d0fa      	beq.n	80218de <_dtoa_r+0xb66>
 80218e8:	e6f7      	b.n	80216da <_dtoa_r+0x962>
 80218ea:	9a00      	ldr	r2, [sp, #0]
 80218ec:	429a      	cmp	r2, r3
 80218ee:	d1a5      	bne.n	802183c <_dtoa_r+0xac4>
 80218f0:	f10a 0a01 	add.w	sl, sl, #1
 80218f4:	2331      	movs	r3, #49	; 0x31
 80218f6:	e779      	b.n	80217ec <_dtoa_r+0xa74>
 80218f8:	4b13      	ldr	r3, [pc, #76]	; (8021948 <_dtoa_r+0xbd0>)
 80218fa:	f7ff baaf 	b.w	8020e5c <_dtoa_r+0xe4>
 80218fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021900:	2b00      	cmp	r3, #0
 8021902:	f47f aa86 	bne.w	8020e12 <_dtoa_r+0x9a>
 8021906:	4b11      	ldr	r3, [pc, #68]	; (802194c <_dtoa_r+0xbd4>)
 8021908:	f7ff baa8 	b.w	8020e5c <_dtoa_r+0xe4>
 802190c:	f1b9 0f00 	cmp.w	r9, #0
 8021910:	dc03      	bgt.n	802191a <_dtoa_r+0xba2>
 8021912:	9b05      	ldr	r3, [sp, #20]
 8021914:	2b02      	cmp	r3, #2
 8021916:	f73f aec9 	bgt.w	80216ac <_dtoa_r+0x934>
 802191a:	9d00      	ldr	r5, [sp, #0]
 802191c:	4631      	mov	r1, r6
 802191e:	4658      	mov	r0, fp
 8021920:	f7ff f99e 	bl	8020c60 <quorem>
 8021924:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021928:	f805 3b01 	strb.w	r3, [r5], #1
 802192c:	9a00      	ldr	r2, [sp, #0]
 802192e:	1aaa      	subs	r2, r5, r2
 8021930:	4591      	cmp	r9, r2
 8021932:	ddba      	ble.n	80218aa <_dtoa_r+0xb32>
 8021934:	4659      	mov	r1, fp
 8021936:	2300      	movs	r3, #0
 8021938:	220a      	movs	r2, #10
 802193a:	4620      	mov	r0, r4
 802193c:	f000 fc0e 	bl	802215c <__multadd>
 8021940:	4683      	mov	fp, r0
 8021942:	e7eb      	b.n	802191c <_dtoa_r+0xba4>
 8021944:	080259b4 	.word	0x080259b4
 8021948:	080257b4 	.word	0x080257b4
 802194c:	08025931 	.word	0x08025931

08021950 <rshift>:
 8021950:	6903      	ldr	r3, [r0, #16]
 8021952:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802195a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802195e:	f100 0414 	add.w	r4, r0, #20
 8021962:	dd45      	ble.n	80219f0 <rshift+0xa0>
 8021964:	f011 011f 	ands.w	r1, r1, #31
 8021968:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802196c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021970:	d10c      	bne.n	802198c <rshift+0x3c>
 8021972:	f100 0710 	add.w	r7, r0, #16
 8021976:	4629      	mov	r1, r5
 8021978:	42b1      	cmp	r1, r6
 802197a:	d334      	bcc.n	80219e6 <rshift+0x96>
 802197c:	1a9b      	subs	r3, r3, r2
 802197e:	009b      	lsls	r3, r3, #2
 8021980:	1eea      	subs	r2, r5, #3
 8021982:	4296      	cmp	r6, r2
 8021984:	bf38      	it	cc
 8021986:	2300      	movcc	r3, #0
 8021988:	4423      	add	r3, r4
 802198a:	e015      	b.n	80219b8 <rshift+0x68>
 802198c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021990:	f1c1 0820 	rsb	r8, r1, #32
 8021994:	40cf      	lsrs	r7, r1
 8021996:	f105 0e04 	add.w	lr, r5, #4
 802199a:	46a1      	mov	r9, r4
 802199c:	4576      	cmp	r6, lr
 802199e:	46f4      	mov	ip, lr
 80219a0:	d815      	bhi.n	80219ce <rshift+0x7e>
 80219a2:	1a9b      	subs	r3, r3, r2
 80219a4:	009a      	lsls	r2, r3, #2
 80219a6:	3a04      	subs	r2, #4
 80219a8:	3501      	adds	r5, #1
 80219aa:	42ae      	cmp	r6, r5
 80219ac:	bf38      	it	cc
 80219ae:	2200      	movcc	r2, #0
 80219b0:	18a3      	adds	r3, r4, r2
 80219b2:	50a7      	str	r7, [r4, r2]
 80219b4:	b107      	cbz	r7, 80219b8 <rshift+0x68>
 80219b6:	3304      	adds	r3, #4
 80219b8:	1b1a      	subs	r2, r3, r4
 80219ba:	42a3      	cmp	r3, r4
 80219bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80219c0:	bf08      	it	eq
 80219c2:	2300      	moveq	r3, #0
 80219c4:	6102      	str	r2, [r0, #16]
 80219c6:	bf08      	it	eq
 80219c8:	6143      	streq	r3, [r0, #20]
 80219ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80219ce:	f8dc c000 	ldr.w	ip, [ip]
 80219d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80219d6:	ea4c 0707 	orr.w	r7, ip, r7
 80219da:	f849 7b04 	str.w	r7, [r9], #4
 80219de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80219e2:	40cf      	lsrs	r7, r1
 80219e4:	e7da      	b.n	802199c <rshift+0x4c>
 80219e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80219ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80219ee:	e7c3      	b.n	8021978 <rshift+0x28>
 80219f0:	4623      	mov	r3, r4
 80219f2:	e7e1      	b.n	80219b8 <rshift+0x68>

080219f4 <__hexdig_fun>:
 80219f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80219f8:	2b09      	cmp	r3, #9
 80219fa:	d802      	bhi.n	8021a02 <__hexdig_fun+0xe>
 80219fc:	3820      	subs	r0, #32
 80219fe:	b2c0      	uxtb	r0, r0
 8021a00:	4770      	bx	lr
 8021a02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021a06:	2b05      	cmp	r3, #5
 8021a08:	d801      	bhi.n	8021a0e <__hexdig_fun+0x1a>
 8021a0a:	3847      	subs	r0, #71	; 0x47
 8021a0c:	e7f7      	b.n	80219fe <__hexdig_fun+0xa>
 8021a0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021a12:	2b05      	cmp	r3, #5
 8021a14:	d801      	bhi.n	8021a1a <__hexdig_fun+0x26>
 8021a16:	3827      	subs	r0, #39	; 0x27
 8021a18:	e7f1      	b.n	80219fe <__hexdig_fun+0xa>
 8021a1a:	2000      	movs	r0, #0
 8021a1c:	4770      	bx	lr
	...

08021a20 <__gethex>:
 8021a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a24:	ed2d 8b02 	vpush	{d8}
 8021a28:	b089      	sub	sp, #36	; 0x24
 8021a2a:	ee08 0a10 	vmov	s16, r0
 8021a2e:	9304      	str	r3, [sp, #16]
 8021a30:	4bbc      	ldr	r3, [pc, #752]	; (8021d24 <__gethex+0x304>)
 8021a32:	681b      	ldr	r3, [r3, #0]
 8021a34:	9301      	str	r3, [sp, #4]
 8021a36:	4618      	mov	r0, r3
 8021a38:	468b      	mov	fp, r1
 8021a3a:	4690      	mov	r8, r2
 8021a3c:	f7de fbc8 	bl	80001d0 <strlen>
 8021a40:	9b01      	ldr	r3, [sp, #4]
 8021a42:	f8db 2000 	ldr.w	r2, [fp]
 8021a46:	4403      	add	r3, r0
 8021a48:	4682      	mov	sl, r0
 8021a4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021a4e:	9305      	str	r3, [sp, #20]
 8021a50:	1c93      	adds	r3, r2, #2
 8021a52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021a56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8021a5a:	32fe      	adds	r2, #254	; 0xfe
 8021a5c:	18d1      	adds	r1, r2, r3
 8021a5e:	461f      	mov	r7, r3
 8021a60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021a64:	9100      	str	r1, [sp, #0]
 8021a66:	2830      	cmp	r0, #48	; 0x30
 8021a68:	d0f8      	beq.n	8021a5c <__gethex+0x3c>
 8021a6a:	f7ff ffc3 	bl	80219f4 <__hexdig_fun>
 8021a6e:	4604      	mov	r4, r0
 8021a70:	2800      	cmp	r0, #0
 8021a72:	d13a      	bne.n	8021aea <__gethex+0xca>
 8021a74:	9901      	ldr	r1, [sp, #4]
 8021a76:	4652      	mov	r2, sl
 8021a78:	4638      	mov	r0, r7
 8021a7a:	f001 f982 	bl	8022d82 <strncmp>
 8021a7e:	4605      	mov	r5, r0
 8021a80:	2800      	cmp	r0, #0
 8021a82:	d168      	bne.n	8021b56 <__gethex+0x136>
 8021a84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021a88:	eb07 060a 	add.w	r6, r7, sl
 8021a8c:	f7ff ffb2 	bl	80219f4 <__hexdig_fun>
 8021a90:	2800      	cmp	r0, #0
 8021a92:	d062      	beq.n	8021b5a <__gethex+0x13a>
 8021a94:	4633      	mov	r3, r6
 8021a96:	7818      	ldrb	r0, [r3, #0]
 8021a98:	2830      	cmp	r0, #48	; 0x30
 8021a9a:	461f      	mov	r7, r3
 8021a9c:	f103 0301 	add.w	r3, r3, #1
 8021aa0:	d0f9      	beq.n	8021a96 <__gethex+0x76>
 8021aa2:	f7ff ffa7 	bl	80219f4 <__hexdig_fun>
 8021aa6:	2301      	movs	r3, #1
 8021aa8:	fab0 f480 	clz	r4, r0
 8021aac:	0964      	lsrs	r4, r4, #5
 8021aae:	4635      	mov	r5, r6
 8021ab0:	9300      	str	r3, [sp, #0]
 8021ab2:	463a      	mov	r2, r7
 8021ab4:	4616      	mov	r6, r2
 8021ab6:	3201      	adds	r2, #1
 8021ab8:	7830      	ldrb	r0, [r6, #0]
 8021aba:	f7ff ff9b 	bl	80219f4 <__hexdig_fun>
 8021abe:	2800      	cmp	r0, #0
 8021ac0:	d1f8      	bne.n	8021ab4 <__gethex+0x94>
 8021ac2:	9901      	ldr	r1, [sp, #4]
 8021ac4:	4652      	mov	r2, sl
 8021ac6:	4630      	mov	r0, r6
 8021ac8:	f001 f95b 	bl	8022d82 <strncmp>
 8021acc:	b980      	cbnz	r0, 8021af0 <__gethex+0xd0>
 8021ace:	b94d      	cbnz	r5, 8021ae4 <__gethex+0xc4>
 8021ad0:	eb06 050a 	add.w	r5, r6, sl
 8021ad4:	462a      	mov	r2, r5
 8021ad6:	4616      	mov	r6, r2
 8021ad8:	3201      	adds	r2, #1
 8021ada:	7830      	ldrb	r0, [r6, #0]
 8021adc:	f7ff ff8a 	bl	80219f4 <__hexdig_fun>
 8021ae0:	2800      	cmp	r0, #0
 8021ae2:	d1f8      	bne.n	8021ad6 <__gethex+0xb6>
 8021ae4:	1bad      	subs	r5, r5, r6
 8021ae6:	00ad      	lsls	r5, r5, #2
 8021ae8:	e004      	b.n	8021af4 <__gethex+0xd4>
 8021aea:	2400      	movs	r4, #0
 8021aec:	4625      	mov	r5, r4
 8021aee:	e7e0      	b.n	8021ab2 <__gethex+0x92>
 8021af0:	2d00      	cmp	r5, #0
 8021af2:	d1f7      	bne.n	8021ae4 <__gethex+0xc4>
 8021af4:	7833      	ldrb	r3, [r6, #0]
 8021af6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021afa:	2b50      	cmp	r3, #80	; 0x50
 8021afc:	d13b      	bne.n	8021b76 <__gethex+0x156>
 8021afe:	7873      	ldrb	r3, [r6, #1]
 8021b00:	2b2b      	cmp	r3, #43	; 0x2b
 8021b02:	d02c      	beq.n	8021b5e <__gethex+0x13e>
 8021b04:	2b2d      	cmp	r3, #45	; 0x2d
 8021b06:	d02e      	beq.n	8021b66 <__gethex+0x146>
 8021b08:	1c71      	adds	r1, r6, #1
 8021b0a:	f04f 0900 	mov.w	r9, #0
 8021b0e:	7808      	ldrb	r0, [r1, #0]
 8021b10:	f7ff ff70 	bl	80219f4 <__hexdig_fun>
 8021b14:	1e43      	subs	r3, r0, #1
 8021b16:	b2db      	uxtb	r3, r3
 8021b18:	2b18      	cmp	r3, #24
 8021b1a:	d82c      	bhi.n	8021b76 <__gethex+0x156>
 8021b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8021b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021b24:	f7ff ff66 	bl	80219f4 <__hexdig_fun>
 8021b28:	1e43      	subs	r3, r0, #1
 8021b2a:	b2db      	uxtb	r3, r3
 8021b2c:	2b18      	cmp	r3, #24
 8021b2e:	d91d      	bls.n	8021b6c <__gethex+0x14c>
 8021b30:	f1b9 0f00 	cmp.w	r9, #0
 8021b34:	d000      	beq.n	8021b38 <__gethex+0x118>
 8021b36:	4252      	negs	r2, r2
 8021b38:	4415      	add	r5, r2
 8021b3a:	f8cb 1000 	str.w	r1, [fp]
 8021b3e:	b1e4      	cbz	r4, 8021b7a <__gethex+0x15a>
 8021b40:	9b00      	ldr	r3, [sp, #0]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	bf14      	ite	ne
 8021b46:	2700      	movne	r7, #0
 8021b48:	2706      	moveq	r7, #6
 8021b4a:	4638      	mov	r0, r7
 8021b4c:	b009      	add	sp, #36	; 0x24
 8021b4e:	ecbd 8b02 	vpop	{d8}
 8021b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b56:	463e      	mov	r6, r7
 8021b58:	4625      	mov	r5, r4
 8021b5a:	2401      	movs	r4, #1
 8021b5c:	e7ca      	b.n	8021af4 <__gethex+0xd4>
 8021b5e:	f04f 0900 	mov.w	r9, #0
 8021b62:	1cb1      	adds	r1, r6, #2
 8021b64:	e7d3      	b.n	8021b0e <__gethex+0xee>
 8021b66:	f04f 0901 	mov.w	r9, #1
 8021b6a:	e7fa      	b.n	8021b62 <__gethex+0x142>
 8021b6c:	230a      	movs	r3, #10
 8021b6e:	fb03 0202 	mla	r2, r3, r2, r0
 8021b72:	3a10      	subs	r2, #16
 8021b74:	e7d4      	b.n	8021b20 <__gethex+0x100>
 8021b76:	4631      	mov	r1, r6
 8021b78:	e7df      	b.n	8021b3a <__gethex+0x11a>
 8021b7a:	1bf3      	subs	r3, r6, r7
 8021b7c:	3b01      	subs	r3, #1
 8021b7e:	4621      	mov	r1, r4
 8021b80:	2b07      	cmp	r3, #7
 8021b82:	dc0b      	bgt.n	8021b9c <__gethex+0x17c>
 8021b84:	ee18 0a10 	vmov	r0, s16
 8021b88:	f000 fa86 	bl	8022098 <_Balloc>
 8021b8c:	4604      	mov	r4, r0
 8021b8e:	b940      	cbnz	r0, 8021ba2 <__gethex+0x182>
 8021b90:	4b65      	ldr	r3, [pc, #404]	; (8021d28 <__gethex+0x308>)
 8021b92:	4602      	mov	r2, r0
 8021b94:	21de      	movs	r1, #222	; 0xde
 8021b96:	4865      	ldr	r0, [pc, #404]	; (8021d2c <__gethex+0x30c>)
 8021b98:	f001 f912 	bl	8022dc0 <__assert_func>
 8021b9c:	3101      	adds	r1, #1
 8021b9e:	105b      	asrs	r3, r3, #1
 8021ba0:	e7ee      	b.n	8021b80 <__gethex+0x160>
 8021ba2:	f100 0914 	add.w	r9, r0, #20
 8021ba6:	f04f 0b00 	mov.w	fp, #0
 8021baa:	f1ca 0301 	rsb	r3, sl, #1
 8021bae:	f8cd 9008 	str.w	r9, [sp, #8]
 8021bb2:	f8cd b000 	str.w	fp, [sp]
 8021bb6:	9306      	str	r3, [sp, #24]
 8021bb8:	42b7      	cmp	r7, r6
 8021bba:	d340      	bcc.n	8021c3e <__gethex+0x21e>
 8021bbc:	9802      	ldr	r0, [sp, #8]
 8021bbe:	9b00      	ldr	r3, [sp, #0]
 8021bc0:	f840 3b04 	str.w	r3, [r0], #4
 8021bc4:	eba0 0009 	sub.w	r0, r0, r9
 8021bc8:	1080      	asrs	r0, r0, #2
 8021bca:	0146      	lsls	r6, r0, #5
 8021bcc:	6120      	str	r0, [r4, #16]
 8021bce:	4618      	mov	r0, r3
 8021bd0:	f000 fb58 	bl	8022284 <__hi0bits>
 8021bd4:	1a30      	subs	r0, r6, r0
 8021bd6:	f8d8 6000 	ldr.w	r6, [r8]
 8021bda:	42b0      	cmp	r0, r6
 8021bdc:	dd63      	ble.n	8021ca6 <__gethex+0x286>
 8021bde:	1b87      	subs	r7, r0, r6
 8021be0:	4639      	mov	r1, r7
 8021be2:	4620      	mov	r0, r4
 8021be4:	f000 fef2 	bl	80229cc <__any_on>
 8021be8:	4682      	mov	sl, r0
 8021bea:	b1a8      	cbz	r0, 8021c18 <__gethex+0x1f8>
 8021bec:	1e7b      	subs	r3, r7, #1
 8021bee:	1159      	asrs	r1, r3, #5
 8021bf0:	f003 021f 	and.w	r2, r3, #31
 8021bf4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021bf8:	f04f 0a01 	mov.w	sl, #1
 8021bfc:	fa0a f202 	lsl.w	r2, sl, r2
 8021c00:	420a      	tst	r2, r1
 8021c02:	d009      	beq.n	8021c18 <__gethex+0x1f8>
 8021c04:	4553      	cmp	r3, sl
 8021c06:	dd05      	ble.n	8021c14 <__gethex+0x1f4>
 8021c08:	1eb9      	subs	r1, r7, #2
 8021c0a:	4620      	mov	r0, r4
 8021c0c:	f000 fede 	bl	80229cc <__any_on>
 8021c10:	2800      	cmp	r0, #0
 8021c12:	d145      	bne.n	8021ca0 <__gethex+0x280>
 8021c14:	f04f 0a02 	mov.w	sl, #2
 8021c18:	4639      	mov	r1, r7
 8021c1a:	4620      	mov	r0, r4
 8021c1c:	f7ff fe98 	bl	8021950 <rshift>
 8021c20:	443d      	add	r5, r7
 8021c22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021c26:	42ab      	cmp	r3, r5
 8021c28:	da4c      	bge.n	8021cc4 <__gethex+0x2a4>
 8021c2a:	ee18 0a10 	vmov	r0, s16
 8021c2e:	4621      	mov	r1, r4
 8021c30:	f000 fa72 	bl	8022118 <_Bfree>
 8021c34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c36:	2300      	movs	r3, #0
 8021c38:	6013      	str	r3, [r2, #0]
 8021c3a:	27a3      	movs	r7, #163	; 0xa3
 8021c3c:	e785      	b.n	8021b4a <__gethex+0x12a>
 8021c3e:	1e73      	subs	r3, r6, #1
 8021c40:	9a05      	ldr	r2, [sp, #20]
 8021c42:	9303      	str	r3, [sp, #12]
 8021c44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021c48:	4293      	cmp	r3, r2
 8021c4a:	d019      	beq.n	8021c80 <__gethex+0x260>
 8021c4c:	f1bb 0f20 	cmp.w	fp, #32
 8021c50:	d107      	bne.n	8021c62 <__gethex+0x242>
 8021c52:	9b02      	ldr	r3, [sp, #8]
 8021c54:	9a00      	ldr	r2, [sp, #0]
 8021c56:	f843 2b04 	str.w	r2, [r3], #4
 8021c5a:	9302      	str	r3, [sp, #8]
 8021c5c:	2300      	movs	r3, #0
 8021c5e:	9300      	str	r3, [sp, #0]
 8021c60:	469b      	mov	fp, r3
 8021c62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8021c66:	f7ff fec5 	bl	80219f4 <__hexdig_fun>
 8021c6a:	9b00      	ldr	r3, [sp, #0]
 8021c6c:	f000 000f 	and.w	r0, r0, #15
 8021c70:	fa00 f00b 	lsl.w	r0, r0, fp
 8021c74:	4303      	orrs	r3, r0
 8021c76:	9300      	str	r3, [sp, #0]
 8021c78:	f10b 0b04 	add.w	fp, fp, #4
 8021c7c:	9b03      	ldr	r3, [sp, #12]
 8021c7e:	e00d      	b.n	8021c9c <__gethex+0x27c>
 8021c80:	9b03      	ldr	r3, [sp, #12]
 8021c82:	9a06      	ldr	r2, [sp, #24]
 8021c84:	4413      	add	r3, r2
 8021c86:	42bb      	cmp	r3, r7
 8021c88:	d3e0      	bcc.n	8021c4c <__gethex+0x22c>
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	9901      	ldr	r1, [sp, #4]
 8021c8e:	9307      	str	r3, [sp, #28]
 8021c90:	4652      	mov	r2, sl
 8021c92:	f001 f876 	bl	8022d82 <strncmp>
 8021c96:	9b07      	ldr	r3, [sp, #28]
 8021c98:	2800      	cmp	r0, #0
 8021c9a:	d1d7      	bne.n	8021c4c <__gethex+0x22c>
 8021c9c:	461e      	mov	r6, r3
 8021c9e:	e78b      	b.n	8021bb8 <__gethex+0x198>
 8021ca0:	f04f 0a03 	mov.w	sl, #3
 8021ca4:	e7b8      	b.n	8021c18 <__gethex+0x1f8>
 8021ca6:	da0a      	bge.n	8021cbe <__gethex+0x29e>
 8021ca8:	1a37      	subs	r7, r6, r0
 8021caa:	4621      	mov	r1, r4
 8021cac:	ee18 0a10 	vmov	r0, s16
 8021cb0:	463a      	mov	r2, r7
 8021cb2:	f000 fc4d 	bl	8022550 <__lshift>
 8021cb6:	1bed      	subs	r5, r5, r7
 8021cb8:	4604      	mov	r4, r0
 8021cba:	f100 0914 	add.w	r9, r0, #20
 8021cbe:	f04f 0a00 	mov.w	sl, #0
 8021cc2:	e7ae      	b.n	8021c22 <__gethex+0x202>
 8021cc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021cc8:	42a8      	cmp	r0, r5
 8021cca:	dd72      	ble.n	8021db2 <__gethex+0x392>
 8021ccc:	1b45      	subs	r5, r0, r5
 8021cce:	42ae      	cmp	r6, r5
 8021cd0:	dc36      	bgt.n	8021d40 <__gethex+0x320>
 8021cd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021cd6:	2b02      	cmp	r3, #2
 8021cd8:	d02a      	beq.n	8021d30 <__gethex+0x310>
 8021cda:	2b03      	cmp	r3, #3
 8021cdc:	d02c      	beq.n	8021d38 <__gethex+0x318>
 8021cde:	2b01      	cmp	r3, #1
 8021ce0:	d115      	bne.n	8021d0e <__gethex+0x2ee>
 8021ce2:	42ae      	cmp	r6, r5
 8021ce4:	d113      	bne.n	8021d0e <__gethex+0x2ee>
 8021ce6:	2e01      	cmp	r6, #1
 8021ce8:	d10b      	bne.n	8021d02 <__gethex+0x2e2>
 8021cea:	9a04      	ldr	r2, [sp, #16]
 8021cec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021cf0:	6013      	str	r3, [r2, #0]
 8021cf2:	2301      	movs	r3, #1
 8021cf4:	6123      	str	r3, [r4, #16]
 8021cf6:	f8c9 3000 	str.w	r3, [r9]
 8021cfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021cfc:	2762      	movs	r7, #98	; 0x62
 8021cfe:	601c      	str	r4, [r3, #0]
 8021d00:	e723      	b.n	8021b4a <__gethex+0x12a>
 8021d02:	1e71      	subs	r1, r6, #1
 8021d04:	4620      	mov	r0, r4
 8021d06:	f000 fe61 	bl	80229cc <__any_on>
 8021d0a:	2800      	cmp	r0, #0
 8021d0c:	d1ed      	bne.n	8021cea <__gethex+0x2ca>
 8021d0e:	ee18 0a10 	vmov	r0, s16
 8021d12:	4621      	mov	r1, r4
 8021d14:	f000 fa00 	bl	8022118 <_Bfree>
 8021d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	6013      	str	r3, [r2, #0]
 8021d1e:	2750      	movs	r7, #80	; 0x50
 8021d20:	e713      	b.n	8021b4a <__gethex+0x12a>
 8021d22:	bf00      	nop
 8021d24:	08025a30 	.word	0x08025a30
 8021d28:	080259b4 	.word	0x080259b4
 8021d2c:	080259c5 	.word	0x080259c5
 8021d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d1eb      	bne.n	8021d0e <__gethex+0x2ee>
 8021d36:	e7d8      	b.n	8021cea <__gethex+0x2ca>
 8021d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	d1d5      	bne.n	8021cea <__gethex+0x2ca>
 8021d3e:	e7e6      	b.n	8021d0e <__gethex+0x2ee>
 8021d40:	1e6f      	subs	r7, r5, #1
 8021d42:	f1ba 0f00 	cmp.w	sl, #0
 8021d46:	d131      	bne.n	8021dac <__gethex+0x38c>
 8021d48:	b127      	cbz	r7, 8021d54 <__gethex+0x334>
 8021d4a:	4639      	mov	r1, r7
 8021d4c:	4620      	mov	r0, r4
 8021d4e:	f000 fe3d 	bl	80229cc <__any_on>
 8021d52:	4682      	mov	sl, r0
 8021d54:	117b      	asrs	r3, r7, #5
 8021d56:	2101      	movs	r1, #1
 8021d58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021d5c:	f007 071f 	and.w	r7, r7, #31
 8021d60:	fa01 f707 	lsl.w	r7, r1, r7
 8021d64:	421f      	tst	r7, r3
 8021d66:	4629      	mov	r1, r5
 8021d68:	4620      	mov	r0, r4
 8021d6a:	bf18      	it	ne
 8021d6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8021d70:	1b76      	subs	r6, r6, r5
 8021d72:	f7ff fded 	bl	8021950 <rshift>
 8021d76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021d7a:	2702      	movs	r7, #2
 8021d7c:	f1ba 0f00 	cmp.w	sl, #0
 8021d80:	d048      	beq.n	8021e14 <__gethex+0x3f4>
 8021d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021d86:	2b02      	cmp	r3, #2
 8021d88:	d015      	beq.n	8021db6 <__gethex+0x396>
 8021d8a:	2b03      	cmp	r3, #3
 8021d8c:	d017      	beq.n	8021dbe <__gethex+0x39e>
 8021d8e:	2b01      	cmp	r3, #1
 8021d90:	d109      	bne.n	8021da6 <__gethex+0x386>
 8021d92:	f01a 0f02 	tst.w	sl, #2
 8021d96:	d006      	beq.n	8021da6 <__gethex+0x386>
 8021d98:	f8d9 0000 	ldr.w	r0, [r9]
 8021d9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8021da0:	f01a 0f01 	tst.w	sl, #1
 8021da4:	d10e      	bne.n	8021dc4 <__gethex+0x3a4>
 8021da6:	f047 0710 	orr.w	r7, r7, #16
 8021daa:	e033      	b.n	8021e14 <__gethex+0x3f4>
 8021dac:	f04f 0a01 	mov.w	sl, #1
 8021db0:	e7d0      	b.n	8021d54 <__gethex+0x334>
 8021db2:	2701      	movs	r7, #1
 8021db4:	e7e2      	b.n	8021d7c <__gethex+0x35c>
 8021db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021db8:	f1c3 0301 	rsb	r3, r3, #1
 8021dbc:	9315      	str	r3, [sp, #84]	; 0x54
 8021dbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d0f0      	beq.n	8021da6 <__gethex+0x386>
 8021dc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021dc8:	f104 0314 	add.w	r3, r4, #20
 8021dcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021dd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021dd4:	f04f 0c00 	mov.w	ip, #0
 8021dd8:	4618      	mov	r0, r3
 8021dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dde:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8021de2:	d01c      	beq.n	8021e1e <__gethex+0x3fe>
 8021de4:	3201      	adds	r2, #1
 8021de6:	6002      	str	r2, [r0, #0]
 8021de8:	2f02      	cmp	r7, #2
 8021dea:	f104 0314 	add.w	r3, r4, #20
 8021dee:	d13f      	bne.n	8021e70 <__gethex+0x450>
 8021df0:	f8d8 2000 	ldr.w	r2, [r8]
 8021df4:	3a01      	subs	r2, #1
 8021df6:	42b2      	cmp	r2, r6
 8021df8:	d10a      	bne.n	8021e10 <__gethex+0x3f0>
 8021dfa:	1171      	asrs	r1, r6, #5
 8021dfc:	2201      	movs	r2, #1
 8021dfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021e02:	f006 061f 	and.w	r6, r6, #31
 8021e06:	fa02 f606 	lsl.w	r6, r2, r6
 8021e0a:	421e      	tst	r6, r3
 8021e0c:	bf18      	it	ne
 8021e0e:	4617      	movne	r7, r2
 8021e10:	f047 0720 	orr.w	r7, r7, #32
 8021e14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e16:	601c      	str	r4, [r3, #0]
 8021e18:	9b04      	ldr	r3, [sp, #16]
 8021e1a:	601d      	str	r5, [r3, #0]
 8021e1c:	e695      	b.n	8021b4a <__gethex+0x12a>
 8021e1e:	4299      	cmp	r1, r3
 8021e20:	f843 cc04 	str.w	ip, [r3, #-4]
 8021e24:	d8d8      	bhi.n	8021dd8 <__gethex+0x3b8>
 8021e26:	68a3      	ldr	r3, [r4, #8]
 8021e28:	459b      	cmp	fp, r3
 8021e2a:	db19      	blt.n	8021e60 <__gethex+0x440>
 8021e2c:	6861      	ldr	r1, [r4, #4]
 8021e2e:	ee18 0a10 	vmov	r0, s16
 8021e32:	3101      	adds	r1, #1
 8021e34:	f000 f930 	bl	8022098 <_Balloc>
 8021e38:	4681      	mov	r9, r0
 8021e3a:	b918      	cbnz	r0, 8021e44 <__gethex+0x424>
 8021e3c:	4b1a      	ldr	r3, [pc, #104]	; (8021ea8 <__gethex+0x488>)
 8021e3e:	4602      	mov	r2, r0
 8021e40:	2184      	movs	r1, #132	; 0x84
 8021e42:	e6a8      	b.n	8021b96 <__gethex+0x176>
 8021e44:	6922      	ldr	r2, [r4, #16]
 8021e46:	3202      	adds	r2, #2
 8021e48:	f104 010c 	add.w	r1, r4, #12
 8021e4c:	0092      	lsls	r2, r2, #2
 8021e4e:	300c      	adds	r0, #12
 8021e50:	f7fc fff6 	bl	801ee40 <memcpy>
 8021e54:	4621      	mov	r1, r4
 8021e56:	ee18 0a10 	vmov	r0, s16
 8021e5a:	f000 f95d 	bl	8022118 <_Bfree>
 8021e5e:	464c      	mov	r4, r9
 8021e60:	6923      	ldr	r3, [r4, #16]
 8021e62:	1c5a      	adds	r2, r3, #1
 8021e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021e68:	6122      	str	r2, [r4, #16]
 8021e6a:	2201      	movs	r2, #1
 8021e6c:	615a      	str	r2, [r3, #20]
 8021e6e:	e7bb      	b.n	8021de8 <__gethex+0x3c8>
 8021e70:	6922      	ldr	r2, [r4, #16]
 8021e72:	455a      	cmp	r2, fp
 8021e74:	dd0b      	ble.n	8021e8e <__gethex+0x46e>
 8021e76:	2101      	movs	r1, #1
 8021e78:	4620      	mov	r0, r4
 8021e7a:	f7ff fd69 	bl	8021950 <rshift>
 8021e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021e82:	3501      	adds	r5, #1
 8021e84:	42ab      	cmp	r3, r5
 8021e86:	f6ff aed0 	blt.w	8021c2a <__gethex+0x20a>
 8021e8a:	2701      	movs	r7, #1
 8021e8c:	e7c0      	b.n	8021e10 <__gethex+0x3f0>
 8021e8e:	f016 061f 	ands.w	r6, r6, #31
 8021e92:	d0fa      	beq.n	8021e8a <__gethex+0x46a>
 8021e94:	449a      	add	sl, r3
 8021e96:	f1c6 0620 	rsb	r6, r6, #32
 8021e9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8021e9e:	f000 f9f1 	bl	8022284 <__hi0bits>
 8021ea2:	42b0      	cmp	r0, r6
 8021ea4:	dbe7      	blt.n	8021e76 <__gethex+0x456>
 8021ea6:	e7f0      	b.n	8021e8a <__gethex+0x46a>
 8021ea8:	080259b4 	.word	0x080259b4

08021eac <L_shift>:
 8021eac:	f1c2 0208 	rsb	r2, r2, #8
 8021eb0:	0092      	lsls	r2, r2, #2
 8021eb2:	b570      	push	{r4, r5, r6, lr}
 8021eb4:	f1c2 0620 	rsb	r6, r2, #32
 8021eb8:	6843      	ldr	r3, [r0, #4]
 8021eba:	6804      	ldr	r4, [r0, #0]
 8021ebc:	fa03 f506 	lsl.w	r5, r3, r6
 8021ec0:	432c      	orrs	r4, r5
 8021ec2:	40d3      	lsrs	r3, r2
 8021ec4:	6004      	str	r4, [r0, #0]
 8021ec6:	f840 3f04 	str.w	r3, [r0, #4]!
 8021eca:	4288      	cmp	r0, r1
 8021ecc:	d3f4      	bcc.n	8021eb8 <L_shift+0xc>
 8021ece:	bd70      	pop	{r4, r5, r6, pc}

08021ed0 <__match>:
 8021ed0:	b530      	push	{r4, r5, lr}
 8021ed2:	6803      	ldr	r3, [r0, #0]
 8021ed4:	3301      	adds	r3, #1
 8021ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021eda:	b914      	cbnz	r4, 8021ee2 <__match+0x12>
 8021edc:	6003      	str	r3, [r0, #0]
 8021ede:	2001      	movs	r0, #1
 8021ee0:	bd30      	pop	{r4, r5, pc}
 8021ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ee6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8021eea:	2d19      	cmp	r5, #25
 8021eec:	bf98      	it	ls
 8021eee:	3220      	addls	r2, #32
 8021ef0:	42a2      	cmp	r2, r4
 8021ef2:	d0f0      	beq.n	8021ed6 <__match+0x6>
 8021ef4:	2000      	movs	r0, #0
 8021ef6:	e7f3      	b.n	8021ee0 <__match+0x10>

08021ef8 <__hexnan>:
 8021ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021efc:	680b      	ldr	r3, [r1, #0]
 8021efe:	6801      	ldr	r1, [r0, #0]
 8021f00:	115e      	asrs	r6, r3, #5
 8021f02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021f06:	f013 031f 	ands.w	r3, r3, #31
 8021f0a:	b087      	sub	sp, #28
 8021f0c:	bf18      	it	ne
 8021f0e:	3604      	addne	r6, #4
 8021f10:	2500      	movs	r5, #0
 8021f12:	1f37      	subs	r7, r6, #4
 8021f14:	4682      	mov	sl, r0
 8021f16:	4690      	mov	r8, r2
 8021f18:	9301      	str	r3, [sp, #4]
 8021f1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8021f1e:	46b9      	mov	r9, r7
 8021f20:	463c      	mov	r4, r7
 8021f22:	9502      	str	r5, [sp, #8]
 8021f24:	46ab      	mov	fp, r5
 8021f26:	784a      	ldrb	r2, [r1, #1]
 8021f28:	1c4b      	adds	r3, r1, #1
 8021f2a:	9303      	str	r3, [sp, #12]
 8021f2c:	b342      	cbz	r2, 8021f80 <__hexnan+0x88>
 8021f2e:	4610      	mov	r0, r2
 8021f30:	9105      	str	r1, [sp, #20]
 8021f32:	9204      	str	r2, [sp, #16]
 8021f34:	f7ff fd5e 	bl	80219f4 <__hexdig_fun>
 8021f38:	2800      	cmp	r0, #0
 8021f3a:	d14f      	bne.n	8021fdc <__hexnan+0xe4>
 8021f3c:	9a04      	ldr	r2, [sp, #16]
 8021f3e:	9905      	ldr	r1, [sp, #20]
 8021f40:	2a20      	cmp	r2, #32
 8021f42:	d818      	bhi.n	8021f76 <__hexnan+0x7e>
 8021f44:	9b02      	ldr	r3, [sp, #8]
 8021f46:	459b      	cmp	fp, r3
 8021f48:	dd13      	ble.n	8021f72 <__hexnan+0x7a>
 8021f4a:	454c      	cmp	r4, r9
 8021f4c:	d206      	bcs.n	8021f5c <__hexnan+0x64>
 8021f4e:	2d07      	cmp	r5, #7
 8021f50:	dc04      	bgt.n	8021f5c <__hexnan+0x64>
 8021f52:	462a      	mov	r2, r5
 8021f54:	4649      	mov	r1, r9
 8021f56:	4620      	mov	r0, r4
 8021f58:	f7ff ffa8 	bl	8021eac <L_shift>
 8021f5c:	4544      	cmp	r4, r8
 8021f5e:	d950      	bls.n	8022002 <__hexnan+0x10a>
 8021f60:	2300      	movs	r3, #0
 8021f62:	f1a4 0904 	sub.w	r9, r4, #4
 8021f66:	f844 3c04 	str.w	r3, [r4, #-4]
 8021f6a:	f8cd b008 	str.w	fp, [sp, #8]
 8021f6e:	464c      	mov	r4, r9
 8021f70:	461d      	mov	r5, r3
 8021f72:	9903      	ldr	r1, [sp, #12]
 8021f74:	e7d7      	b.n	8021f26 <__hexnan+0x2e>
 8021f76:	2a29      	cmp	r2, #41	; 0x29
 8021f78:	d156      	bne.n	8022028 <__hexnan+0x130>
 8021f7a:	3102      	adds	r1, #2
 8021f7c:	f8ca 1000 	str.w	r1, [sl]
 8021f80:	f1bb 0f00 	cmp.w	fp, #0
 8021f84:	d050      	beq.n	8022028 <__hexnan+0x130>
 8021f86:	454c      	cmp	r4, r9
 8021f88:	d206      	bcs.n	8021f98 <__hexnan+0xa0>
 8021f8a:	2d07      	cmp	r5, #7
 8021f8c:	dc04      	bgt.n	8021f98 <__hexnan+0xa0>
 8021f8e:	462a      	mov	r2, r5
 8021f90:	4649      	mov	r1, r9
 8021f92:	4620      	mov	r0, r4
 8021f94:	f7ff ff8a 	bl	8021eac <L_shift>
 8021f98:	4544      	cmp	r4, r8
 8021f9a:	d934      	bls.n	8022006 <__hexnan+0x10e>
 8021f9c:	f1a8 0204 	sub.w	r2, r8, #4
 8021fa0:	4623      	mov	r3, r4
 8021fa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8021fa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8021faa:	429f      	cmp	r7, r3
 8021fac:	d2f9      	bcs.n	8021fa2 <__hexnan+0xaa>
 8021fae:	1b3b      	subs	r3, r7, r4
 8021fb0:	f023 0303 	bic.w	r3, r3, #3
 8021fb4:	3304      	adds	r3, #4
 8021fb6:	3401      	adds	r4, #1
 8021fb8:	3e03      	subs	r6, #3
 8021fba:	42b4      	cmp	r4, r6
 8021fbc:	bf88      	it	hi
 8021fbe:	2304      	movhi	r3, #4
 8021fc0:	4443      	add	r3, r8
 8021fc2:	2200      	movs	r2, #0
 8021fc4:	f843 2b04 	str.w	r2, [r3], #4
 8021fc8:	429f      	cmp	r7, r3
 8021fca:	d2fb      	bcs.n	8021fc4 <__hexnan+0xcc>
 8021fcc:	683b      	ldr	r3, [r7, #0]
 8021fce:	b91b      	cbnz	r3, 8021fd8 <__hexnan+0xe0>
 8021fd0:	4547      	cmp	r7, r8
 8021fd2:	d127      	bne.n	8022024 <__hexnan+0x12c>
 8021fd4:	2301      	movs	r3, #1
 8021fd6:	603b      	str	r3, [r7, #0]
 8021fd8:	2005      	movs	r0, #5
 8021fda:	e026      	b.n	802202a <__hexnan+0x132>
 8021fdc:	3501      	adds	r5, #1
 8021fde:	2d08      	cmp	r5, #8
 8021fe0:	f10b 0b01 	add.w	fp, fp, #1
 8021fe4:	dd06      	ble.n	8021ff4 <__hexnan+0xfc>
 8021fe6:	4544      	cmp	r4, r8
 8021fe8:	d9c3      	bls.n	8021f72 <__hexnan+0x7a>
 8021fea:	2300      	movs	r3, #0
 8021fec:	f844 3c04 	str.w	r3, [r4, #-4]
 8021ff0:	2501      	movs	r5, #1
 8021ff2:	3c04      	subs	r4, #4
 8021ff4:	6822      	ldr	r2, [r4, #0]
 8021ff6:	f000 000f 	and.w	r0, r0, #15
 8021ffa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021ffe:	6022      	str	r2, [r4, #0]
 8022000:	e7b7      	b.n	8021f72 <__hexnan+0x7a>
 8022002:	2508      	movs	r5, #8
 8022004:	e7b5      	b.n	8021f72 <__hexnan+0x7a>
 8022006:	9b01      	ldr	r3, [sp, #4]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d0df      	beq.n	8021fcc <__hexnan+0xd4>
 802200c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022010:	f1c3 0320 	rsb	r3, r3, #32
 8022014:	fa22 f303 	lsr.w	r3, r2, r3
 8022018:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802201c:	401a      	ands	r2, r3
 802201e:	f846 2c04 	str.w	r2, [r6, #-4]
 8022022:	e7d3      	b.n	8021fcc <__hexnan+0xd4>
 8022024:	3f04      	subs	r7, #4
 8022026:	e7d1      	b.n	8021fcc <__hexnan+0xd4>
 8022028:	2004      	movs	r0, #4
 802202a:	b007      	add	sp, #28
 802202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022030 <_localeconv_r>:
 8022030:	4800      	ldr	r0, [pc, #0]	; (8022034 <_localeconv_r+0x4>)
 8022032:	4770      	bx	lr
 8022034:	2000021c 	.word	0x2000021c

08022038 <_lseek_r>:
 8022038:	b538      	push	{r3, r4, r5, lr}
 802203a:	4d07      	ldr	r5, [pc, #28]	; (8022058 <_lseek_r+0x20>)
 802203c:	4604      	mov	r4, r0
 802203e:	4608      	mov	r0, r1
 8022040:	4611      	mov	r1, r2
 8022042:	2200      	movs	r2, #0
 8022044:	602a      	str	r2, [r5, #0]
 8022046:	461a      	mov	r2, r3
 8022048:	f7ec fd48 	bl	800eadc <_lseek>
 802204c:	1c43      	adds	r3, r0, #1
 802204e:	d102      	bne.n	8022056 <_lseek_r+0x1e>
 8022050:	682b      	ldr	r3, [r5, #0]
 8022052:	b103      	cbz	r3, 8022056 <_lseek_r+0x1e>
 8022054:	6023      	str	r3, [r4, #0]
 8022056:	bd38      	pop	{r3, r4, r5, pc}
 8022058:	2000a94c 	.word	0x2000a94c

0802205c <__ascii_mbtowc>:
 802205c:	b082      	sub	sp, #8
 802205e:	b901      	cbnz	r1, 8022062 <__ascii_mbtowc+0x6>
 8022060:	a901      	add	r1, sp, #4
 8022062:	b142      	cbz	r2, 8022076 <__ascii_mbtowc+0x1a>
 8022064:	b14b      	cbz	r3, 802207a <__ascii_mbtowc+0x1e>
 8022066:	7813      	ldrb	r3, [r2, #0]
 8022068:	600b      	str	r3, [r1, #0]
 802206a:	7812      	ldrb	r2, [r2, #0]
 802206c:	1e10      	subs	r0, r2, #0
 802206e:	bf18      	it	ne
 8022070:	2001      	movne	r0, #1
 8022072:	b002      	add	sp, #8
 8022074:	4770      	bx	lr
 8022076:	4610      	mov	r0, r2
 8022078:	e7fb      	b.n	8022072 <__ascii_mbtowc+0x16>
 802207a:	f06f 0001 	mvn.w	r0, #1
 802207e:	e7f8      	b.n	8022072 <__ascii_mbtowc+0x16>

08022080 <__malloc_lock>:
 8022080:	4801      	ldr	r0, [pc, #4]	; (8022088 <__malloc_lock+0x8>)
 8022082:	f001 b885 	b.w	8023190 <__retarget_lock_acquire_recursive>
 8022086:	bf00      	nop
 8022088:	2000a954 	.word	0x2000a954

0802208c <__malloc_unlock>:
 802208c:	4801      	ldr	r0, [pc, #4]	; (8022094 <__malloc_unlock+0x8>)
 802208e:	f001 b880 	b.w	8023192 <__retarget_lock_release_recursive>
 8022092:	bf00      	nop
 8022094:	2000a954 	.word	0x2000a954

08022098 <_Balloc>:
 8022098:	b570      	push	{r4, r5, r6, lr}
 802209a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802209c:	4604      	mov	r4, r0
 802209e:	460d      	mov	r5, r1
 80220a0:	b976      	cbnz	r6, 80220c0 <_Balloc+0x28>
 80220a2:	2010      	movs	r0, #16
 80220a4:	f7fc fec4 	bl	801ee30 <malloc>
 80220a8:	4602      	mov	r2, r0
 80220aa:	6260      	str	r0, [r4, #36]	; 0x24
 80220ac:	b920      	cbnz	r0, 80220b8 <_Balloc+0x20>
 80220ae:	4b18      	ldr	r3, [pc, #96]	; (8022110 <_Balloc+0x78>)
 80220b0:	4818      	ldr	r0, [pc, #96]	; (8022114 <_Balloc+0x7c>)
 80220b2:	2166      	movs	r1, #102	; 0x66
 80220b4:	f000 fe84 	bl	8022dc0 <__assert_func>
 80220b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80220bc:	6006      	str	r6, [r0, #0]
 80220be:	60c6      	str	r6, [r0, #12]
 80220c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80220c2:	68f3      	ldr	r3, [r6, #12]
 80220c4:	b183      	cbz	r3, 80220e8 <_Balloc+0x50>
 80220c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80220c8:	68db      	ldr	r3, [r3, #12]
 80220ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80220ce:	b9b8      	cbnz	r0, 8022100 <_Balloc+0x68>
 80220d0:	2101      	movs	r1, #1
 80220d2:	fa01 f605 	lsl.w	r6, r1, r5
 80220d6:	1d72      	adds	r2, r6, #5
 80220d8:	0092      	lsls	r2, r2, #2
 80220da:	4620      	mov	r0, r4
 80220dc:	f000 fc97 	bl	8022a0e <_calloc_r>
 80220e0:	b160      	cbz	r0, 80220fc <_Balloc+0x64>
 80220e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80220e6:	e00e      	b.n	8022106 <_Balloc+0x6e>
 80220e8:	2221      	movs	r2, #33	; 0x21
 80220ea:	2104      	movs	r1, #4
 80220ec:	4620      	mov	r0, r4
 80220ee:	f000 fc8e 	bl	8022a0e <_calloc_r>
 80220f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80220f4:	60f0      	str	r0, [r6, #12]
 80220f6:	68db      	ldr	r3, [r3, #12]
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d1e4      	bne.n	80220c6 <_Balloc+0x2e>
 80220fc:	2000      	movs	r0, #0
 80220fe:	bd70      	pop	{r4, r5, r6, pc}
 8022100:	6802      	ldr	r2, [r0, #0]
 8022102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022106:	2300      	movs	r3, #0
 8022108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802210c:	e7f7      	b.n	80220fe <_Balloc+0x66>
 802210e:	bf00      	nop
 8022110:	0802593e 	.word	0x0802593e
 8022114:	08025a44 	.word	0x08025a44

08022118 <_Bfree>:
 8022118:	b570      	push	{r4, r5, r6, lr}
 802211a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802211c:	4605      	mov	r5, r0
 802211e:	460c      	mov	r4, r1
 8022120:	b976      	cbnz	r6, 8022140 <_Bfree+0x28>
 8022122:	2010      	movs	r0, #16
 8022124:	f7fc fe84 	bl	801ee30 <malloc>
 8022128:	4602      	mov	r2, r0
 802212a:	6268      	str	r0, [r5, #36]	; 0x24
 802212c:	b920      	cbnz	r0, 8022138 <_Bfree+0x20>
 802212e:	4b09      	ldr	r3, [pc, #36]	; (8022154 <_Bfree+0x3c>)
 8022130:	4809      	ldr	r0, [pc, #36]	; (8022158 <_Bfree+0x40>)
 8022132:	218a      	movs	r1, #138	; 0x8a
 8022134:	f000 fe44 	bl	8022dc0 <__assert_func>
 8022138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802213c:	6006      	str	r6, [r0, #0]
 802213e:	60c6      	str	r6, [r0, #12]
 8022140:	b13c      	cbz	r4, 8022152 <_Bfree+0x3a>
 8022142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022144:	6862      	ldr	r2, [r4, #4]
 8022146:	68db      	ldr	r3, [r3, #12]
 8022148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802214c:	6021      	str	r1, [r4, #0]
 802214e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022152:	bd70      	pop	{r4, r5, r6, pc}
 8022154:	0802593e 	.word	0x0802593e
 8022158:	08025a44 	.word	0x08025a44

0802215c <__multadd>:
 802215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022160:	690e      	ldr	r6, [r1, #16]
 8022162:	4607      	mov	r7, r0
 8022164:	4698      	mov	r8, r3
 8022166:	460c      	mov	r4, r1
 8022168:	f101 0014 	add.w	r0, r1, #20
 802216c:	2300      	movs	r3, #0
 802216e:	6805      	ldr	r5, [r0, #0]
 8022170:	b2a9      	uxth	r1, r5
 8022172:	fb02 8101 	mla	r1, r2, r1, r8
 8022176:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802217a:	0c2d      	lsrs	r5, r5, #16
 802217c:	fb02 c505 	mla	r5, r2, r5, ip
 8022180:	b289      	uxth	r1, r1
 8022182:	3301      	adds	r3, #1
 8022184:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022188:	429e      	cmp	r6, r3
 802218a:	f840 1b04 	str.w	r1, [r0], #4
 802218e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8022192:	dcec      	bgt.n	802216e <__multadd+0x12>
 8022194:	f1b8 0f00 	cmp.w	r8, #0
 8022198:	d022      	beq.n	80221e0 <__multadd+0x84>
 802219a:	68a3      	ldr	r3, [r4, #8]
 802219c:	42b3      	cmp	r3, r6
 802219e:	dc19      	bgt.n	80221d4 <__multadd+0x78>
 80221a0:	6861      	ldr	r1, [r4, #4]
 80221a2:	4638      	mov	r0, r7
 80221a4:	3101      	adds	r1, #1
 80221a6:	f7ff ff77 	bl	8022098 <_Balloc>
 80221aa:	4605      	mov	r5, r0
 80221ac:	b928      	cbnz	r0, 80221ba <__multadd+0x5e>
 80221ae:	4602      	mov	r2, r0
 80221b0:	4b0d      	ldr	r3, [pc, #52]	; (80221e8 <__multadd+0x8c>)
 80221b2:	480e      	ldr	r0, [pc, #56]	; (80221ec <__multadd+0x90>)
 80221b4:	21b5      	movs	r1, #181	; 0xb5
 80221b6:	f000 fe03 	bl	8022dc0 <__assert_func>
 80221ba:	6922      	ldr	r2, [r4, #16]
 80221bc:	3202      	adds	r2, #2
 80221be:	f104 010c 	add.w	r1, r4, #12
 80221c2:	0092      	lsls	r2, r2, #2
 80221c4:	300c      	adds	r0, #12
 80221c6:	f7fc fe3b 	bl	801ee40 <memcpy>
 80221ca:	4621      	mov	r1, r4
 80221cc:	4638      	mov	r0, r7
 80221ce:	f7ff ffa3 	bl	8022118 <_Bfree>
 80221d2:	462c      	mov	r4, r5
 80221d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80221d8:	3601      	adds	r6, #1
 80221da:	f8c3 8014 	str.w	r8, [r3, #20]
 80221de:	6126      	str	r6, [r4, #16]
 80221e0:	4620      	mov	r0, r4
 80221e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221e6:	bf00      	nop
 80221e8:	080259b4 	.word	0x080259b4
 80221ec:	08025a44 	.word	0x08025a44

080221f0 <__s2b>:
 80221f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80221f4:	460c      	mov	r4, r1
 80221f6:	4615      	mov	r5, r2
 80221f8:	461f      	mov	r7, r3
 80221fa:	2209      	movs	r2, #9
 80221fc:	3308      	adds	r3, #8
 80221fe:	4606      	mov	r6, r0
 8022200:	fb93 f3f2 	sdiv	r3, r3, r2
 8022204:	2100      	movs	r1, #0
 8022206:	2201      	movs	r2, #1
 8022208:	429a      	cmp	r2, r3
 802220a:	db09      	blt.n	8022220 <__s2b+0x30>
 802220c:	4630      	mov	r0, r6
 802220e:	f7ff ff43 	bl	8022098 <_Balloc>
 8022212:	b940      	cbnz	r0, 8022226 <__s2b+0x36>
 8022214:	4602      	mov	r2, r0
 8022216:	4b19      	ldr	r3, [pc, #100]	; (802227c <__s2b+0x8c>)
 8022218:	4819      	ldr	r0, [pc, #100]	; (8022280 <__s2b+0x90>)
 802221a:	21ce      	movs	r1, #206	; 0xce
 802221c:	f000 fdd0 	bl	8022dc0 <__assert_func>
 8022220:	0052      	lsls	r2, r2, #1
 8022222:	3101      	adds	r1, #1
 8022224:	e7f0      	b.n	8022208 <__s2b+0x18>
 8022226:	9b08      	ldr	r3, [sp, #32]
 8022228:	6143      	str	r3, [r0, #20]
 802222a:	2d09      	cmp	r5, #9
 802222c:	f04f 0301 	mov.w	r3, #1
 8022230:	6103      	str	r3, [r0, #16]
 8022232:	dd16      	ble.n	8022262 <__s2b+0x72>
 8022234:	f104 0909 	add.w	r9, r4, #9
 8022238:	46c8      	mov	r8, r9
 802223a:	442c      	add	r4, r5
 802223c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022240:	4601      	mov	r1, r0
 8022242:	3b30      	subs	r3, #48	; 0x30
 8022244:	220a      	movs	r2, #10
 8022246:	4630      	mov	r0, r6
 8022248:	f7ff ff88 	bl	802215c <__multadd>
 802224c:	45a0      	cmp	r8, r4
 802224e:	d1f5      	bne.n	802223c <__s2b+0x4c>
 8022250:	f1a5 0408 	sub.w	r4, r5, #8
 8022254:	444c      	add	r4, r9
 8022256:	1b2d      	subs	r5, r5, r4
 8022258:	1963      	adds	r3, r4, r5
 802225a:	42bb      	cmp	r3, r7
 802225c:	db04      	blt.n	8022268 <__s2b+0x78>
 802225e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022262:	340a      	adds	r4, #10
 8022264:	2509      	movs	r5, #9
 8022266:	e7f6      	b.n	8022256 <__s2b+0x66>
 8022268:	f814 3b01 	ldrb.w	r3, [r4], #1
 802226c:	4601      	mov	r1, r0
 802226e:	3b30      	subs	r3, #48	; 0x30
 8022270:	220a      	movs	r2, #10
 8022272:	4630      	mov	r0, r6
 8022274:	f7ff ff72 	bl	802215c <__multadd>
 8022278:	e7ee      	b.n	8022258 <__s2b+0x68>
 802227a:	bf00      	nop
 802227c:	080259b4 	.word	0x080259b4
 8022280:	08025a44 	.word	0x08025a44

08022284 <__hi0bits>:
 8022284:	0c03      	lsrs	r3, r0, #16
 8022286:	041b      	lsls	r3, r3, #16
 8022288:	b9d3      	cbnz	r3, 80222c0 <__hi0bits+0x3c>
 802228a:	0400      	lsls	r0, r0, #16
 802228c:	2310      	movs	r3, #16
 802228e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022292:	bf04      	itt	eq
 8022294:	0200      	lsleq	r0, r0, #8
 8022296:	3308      	addeq	r3, #8
 8022298:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802229c:	bf04      	itt	eq
 802229e:	0100      	lsleq	r0, r0, #4
 80222a0:	3304      	addeq	r3, #4
 80222a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80222a6:	bf04      	itt	eq
 80222a8:	0080      	lsleq	r0, r0, #2
 80222aa:	3302      	addeq	r3, #2
 80222ac:	2800      	cmp	r0, #0
 80222ae:	db05      	blt.n	80222bc <__hi0bits+0x38>
 80222b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80222b4:	f103 0301 	add.w	r3, r3, #1
 80222b8:	bf08      	it	eq
 80222ba:	2320      	moveq	r3, #32
 80222bc:	4618      	mov	r0, r3
 80222be:	4770      	bx	lr
 80222c0:	2300      	movs	r3, #0
 80222c2:	e7e4      	b.n	802228e <__hi0bits+0xa>

080222c4 <__lo0bits>:
 80222c4:	6803      	ldr	r3, [r0, #0]
 80222c6:	f013 0207 	ands.w	r2, r3, #7
 80222ca:	4601      	mov	r1, r0
 80222cc:	d00b      	beq.n	80222e6 <__lo0bits+0x22>
 80222ce:	07da      	lsls	r2, r3, #31
 80222d0:	d424      	bmi.n	802231c <__lo0bits+0x58>
 80222d2:	0798      	lsls	r0, r3, #30
 80222d4:	bf49      	itett	mi
 80222d6:	085b      	lsrmi	r3, r3, #1
 80222d8:	089b      	lsrpl	r3, r3, #2
 80222da:	2001      	movmi	r0, #1
 80222dc:	600b      	strmi	r3, [r1, #0]
 80222de:	bf5c      	itt	pl
 80222e0:	600b      	strpl	r3, [r1, #0]
 80222e2:	2002      	movpl	r0, #2
 80222e4:	4770      	bx	lr
 80222e6:	b298      	uxth	r0, r3
 80222e8:	b9b0      	cbnz	r0, 8022318 <__lo0bits+0x54>
 80222ea:	0c1b      	lsrs	r3, r3, #16
 80222ec:	2010      	movs	r0, #16
 80222ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80222f2:	bf04      	itt	eq
 80222f4:	0a1b      	lsreq	r3, r3, #8
 80222f6:	3008      	addeq	r0, #8
 80222f8:	071a      	lsls	r2, r3, #28
 80222fa:	bf04      	itt	eq
 80222fc:	091b      	lsreq	r3, r3, #4
 80222fe:	3004      	addeq	r0, #4
 8022300:	079a      	lsls	r2, r3, #30
 8022302:	bf04      	itt	eq
 8022304:	089b      	lsreq	r3, r3, #2
 8022306:	3002      	addeq	r0, #2
 8022308:	07da      	lsls	r2, r3, #31
 802230a:	d403      	bmi.n	8022314 <__lo0bits+0x50>
 802230c:	085b      	lsrs	r3, r3, #1
 802230e:	f100 0001 	add.w	r0, r0, #1
 8022312:	d005      	beq.n	8022320 <__lo0bits+0x5c>
 8022314:	600b      	str	r3, [r1, #0]
 8022316:	4770      	bx	lr
 8022318:	4610      	mov	r0, r2
 802231a:	e7e8      	b.n	80222ee <__lo0bits+0x2a>
 802231c:	2000      	movs	r0, #0
 802231e:	4770      	bx	lr
 8022320:	2020      	movs	r0, #32
 8022322:	4770      	bx	lr

08022324 <__i2b>:
 8022324:	b510      	push	{r4, lr}
 8022326:	460c      	mov	r4, r1
 8022328:	2101      	movs	r1, #1
 802232a:	f7ff feb5 	bl	8022098 <_Balloc>
 802232e:	4602      	mov	r2, r0
 8022330:	b928      	cbnz	r0, 802233e <__i2b+0x1a>
 8022332:	4b05      	ldr	r3, [pc, #20]	; (8022348 <__i2b+0x24>)
 8022334:	4805      	ldr	r0, [pc, #20]	; (802234c <__i2b+0x28>)
 8022336:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802233a:	f000 fd41 	bl	8022dc0 <__assert_func>
 802233e:	2301      	movs	r3, #1
 8022340:	6144      	str	r4, [r0, #20]
 8022342:	6103      	str	r3, [r0, #16]
 8022344:	bd10      	pop	{r4, pc}
 8022346:	bf00      	nop
 8022348:	080259b4 	.word	0x080259b4
 802234c:	08025a44 	.word	0x08025a44

08022350 <__multiply>:
 8022350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022354:	4614      	mov	r4, r2
 8022356:	690a      	ldr	r2, [r1, #16]
 8022358:	6923      	ldr	r3, [r4, #16]
 802235a:	429a      	cmp	r2, r3
 802235c:	bfb8      	it	lt
 802235e:	460b      	movlt	r3, r1
 8022360:	460d      	mov	r5, r1
 8022362:	bfbc      	itt	lt
 8022364:	4625      	movlt	r5, r4
 8022366:	461c      	movlt	r4, r3
 8022368:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802236c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022370:	68ab      	ldr	r3, [r5, #8]
 8022372:	6869      	ldr	r1, [r5, #4]
 8022374:	eb0a 0709 	add.w	r7, sl, r9
 8022378:	42bb      	cmp	r3, r7
 802237a:	b085      	sub	sp, #20
 802237c:	bfb8      	it	lt
 802237e:	3101      	addlt	r1, #1
 8022380:	f7ff fe8a 	bl	8022098 <_Balloc>
 8022384:	b930      	cbnz	r0, 8022394 <__multiply+0x44>
 8022386:	4602      	mov	r2, r0
 8022388:	4b42      	ldr	r3, [pc, #264]	; (8022494 <__multiply+0x144>)
 802238a:	4843      	ldr	r0, [pc, #268]	; (8022498 <__multiply+0x148>)
 802238c:	f240 115d 	movw	r1, #349	; 0x15d
 8022390:	f000 fd16 	bl	8022dc0 <__assert_func>
 8022394:	f100 0614 	add.w	r6, r0, #20
 8022398:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802239c:	4633      	mov	r3, r6
 802239e:	2200      	movs	r2, #0
 80223a0:	4543      	cmp	r3, r8
 80223a2:	d31e      	bcc.n	80223e2 <__multiply+0x92>
 80223a4:	f105 0c14 	add.w	ip, r5, #20
 80223a8:	f104 0314 	add.w	r3, r4, #20
 80223ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80223b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80223b4:	9202      	str	r2, [sp, #8]
 80223b6:	ebac 0205 	sub.w	r2, ip, r5
 80223ba:	3a15      	subs	r2, #21
 80223bc:	f022 0203 	bic.w	r2, r2, #3
 80223c0:	3204      	adds	r2, #4
 80223c2:	f105 0115 	add.w	r1, r5, #21
 80223c6:	458c      	cmp	ip, r1
 80223c8:	bf38      	it	cc
 80223ca:	2204      	movcc	r2, #4
 80223cc:	9201      	str	r2, [sp, #4]
 80223ce:	9a02      	ldr	r2, [sp, #8]
 80223d0:	9303      	str	r3, [sp, #12]
 80223d2:	429a      	cmp	r2, r3
 80223d4:	d808      	bhi.n	80223e8 <__multiply+0x98>
 80223d6:	2f00      	cmp	r7, #0
 80223d8:	dc55      	bgt.n	8022486 <__multiply+0x136>
 80223da:	6107      	str	r7, [r0, #16]
 80223dc:	b005      	add	sp, #20
 80223de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223e2:	f843 2b04 	str.w	r2, [r3], #4
 80223e6:	e7db      	b.n	80223a0 <__multiply+0x50>
 80223e8:	f8b3 a000 	ldrh.w	sl, [r3]
 80223ec:	f1ba 0f00 	cmp.w	sl, #0
 80223f0:	d020      	beq.n	8022434 <__multiply+0xe4>
 80223f2:	f105 0e14 	add.w	lr, r5, #20
 80223f6:	46b1      	mov	r9, r6
 80223f8:	2200      	movs	r2, #0
 80223fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80223fe:	f8d9 b000 	ldr.w	fp, [r9]
 8022402:	b2a1      	uxth	r1, r4
 8022404:	fa1f fb8b 	uxth.w	fp, fp
 8022408:	fb0a b101 	mla	r1, sl, r1, fp
 802240c:	4411      	add	r1, r2
 802240e:	f8d9 2000 	ldr.w	r2, [r9]
 8022412:	0c24      	lsrs	r4, r4, #16
 8022414:	0c12      	lsrs	r2, r2, #16
 8022416:	fb0a 2404 	mla	r4, sl, r4, r2
 802241a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802241e:	b289      	uxth	r1, r1
 8022420:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022424:	45f4      	cmp	ip, lr
 8022426:	f849 1b04 	str.w	r1, [r9], #4
 802242a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802242e:	d8e4      	bhi.n	80223fa <__multiply+0xaa>
 8022430:	9901      	ldr	r1, [sp, #4]
 8022432:	5072      	str	r2, [r6, r1]
 8022434:	9a03      	ldr	r2, [sp, #12]
 8022436:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802243a:	3304      	adds	r3, #4
 802243c:	f1b9 0f00 	cmp.w	r9, #0
 8022440:	d01f      	beq.n	8022482 <__multiply+0x132>
 8022442:	6834      	ldr	r4, [r6, #0]
 8022444:	f105 0114 	add.w	r1, r5, #20
 8022448:	46b6      	mov	lr, r6
 802244a:	f04f 0a00 	mov.w	sl, #0
 802244e:	880a      	ldrh	r2, [r1, #0]
 8022450:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022454:	fb09 b202 	mla	r2, r9, r2, fp
 8022458:	4492      	add	sl, r2
 802245a:	b2a4      	uxth	r4, r4
 802245c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022460:	f84e 4b04 	str.w	r4, [lr], #4
 8022464:	f851 4b04 	ldr.w	r4, [r1], #4
 8022468:	f8be 2000 	ldrh.w	r2, [lr]
 802246c:	0c24      	lsrs	r4, r4, #16
 802246e:	fb09 2404 	mla	r4, r9, r4, r2
 8022472:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022476:	458c      	cmp	ip, r1
 8022478:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802247c:	d8e7      	bhi.n	802244e <__multiply+0xfe>
 802247e:	9a01      	ldr	r2, [sp, #4]
 8022480:	50b4      	str	r4, [r6, r2]
 8022482:	3604      	adds	r6, #4
 8022484:	e7a3      	b.n	80223ce <__multiply+0x7e>
 8022486:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802248a:	2b00      	cmp	r3, #0
 802248c:	d1a5      	bne.n	80223da <__multiply+0x8a>
 802248e:	3f01      	subs	r7, #1
 8022490:	e7a1      	b.n	80223d6 <__multiply+0x86>
 8022492:	bf00      	nop
 8022494:	080259b4 	.word	0x080259b4
 8022498:	08025a44 	.word	0x08025a44

0802249c <__pow5mult>:
 802249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80224a0:	4615      	mov	r5, r2
 80224a2:	f012 0203 	ands.w	r2, r2, #3
 80224a6:	4606      	mov	r6, r0
 80224a8:	460f      	mov	r7, r1
 80224aa:	d007      	beq.n	80224bc <__pow5mult+0x20>
 80224ac:	4c25      	ldr	r4, [pc, #148]	; (8022544 <__pow5mult+0xa8>)
 80224ae:	3a01      	subs	r2, #1
 80224b0:	2300      	movs	r3, #0
 80224b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80224b6:	f7ff fe51 	bl	802215c <__multadd>
 80224ba:	4607      	mov	r7, r0
 80224bc:	10ad      	asrs	r5, r5, #2
 80224be:	d03d      	beq.n	802253c <__pow5mult+0xa0>
 80224c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80224c2:	b97c      	cbnz	r4, 80224e4 <__pow5mult+0x48>
 80224c4:	2010      	movs	r0, #16
 80224c6:	f7fc fcb3 	bl	801ee30 <malloc>
 80224ca:	4602      	mov	r2, r0
 80224cc:	6270      	str	r0, [r6, #36]	; 0x24
 80224ce:	b928      	cbnz	r0, 80224dc <__pow5mult+0x40>
 80224d0:	4b1d      	ldr	r3, [pc, #116]	; (8022548 <__pow5mult+0xac>)
 80224d2:	481e      	ldr	r0, [pc, #120]	; (802254c <__pow5mult+0xb0>)
 80224d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80224d8:	f000 fc72 	bl	8022dc0 <__assert_func>
 80224dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80224e0:	6004      	str	r4, [r0, #0]
 80224e2:	60c4      	str	r4, [r0, #12]
 80224e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80224e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80224ec:	b94c      	cbnz	r4, 8022502 <__pow5mult+0x66>
 80224ee:	f240 2171 	movw	r1, #625	; 0x271
 80224f2:	4630      	mov	r0, r6
 80224f4:	f7ff ff16 	bl	8022324 <__i2b>
 80224f8:	2300      	movs	r3, #0
 80224fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80224fe:	4604      	mov	r4, r0
 8022500:	6003      	str	r3, [r0, #0]
 8022502:	f04f 0900 	mov.w	r9, #0
 8022506:	07eb      	lsls	r3, r5, #31
 8022508:	d50a      	bpl.n	8022520 <__pow5mult+0x84>
 802250a:	4639      	mov	r1, r7
 802250c:	4622      	mov	r2, r4
 802250e:	4630      	mov	r0, r6
 8022510:	f7ff ff1e 	bl	8022350 <__multiply>
 8022514:	4639      	mov	r1, r7
 8022516:	4680      	mov	r8, r0
 8022518:	4630      	mov	r0, r6
 802251a:	f7ff fdfd 	bl	8022118 <_Bfree>
 802251e:	4647      	mov	r7, r8
 8022520:	106d      	asrs	r5, r5, #1
 8022522:	d00b      	beq.n	802253c <__pow5mult+0xa0>
 8022524:	6820      	ldr	r0, [r4, #0]
 8022526:	b938      	cbnz	r0, 8022538 <__pow5mult+0x9c>
 8022528:	4622      	mov	r2, r4
 802252a:	4621      	mov	r1, r4
 802252c:	4630      	mov	r0, r6
 802252e:	f7ff ff0f 	bl	8022350 <__multiply>
 8022532:	6020      	str	r0, [r4, #0]
 8022534:	f8c0 9000 	str.w	r9, [r0]
 8022538:	4604      	mov	r4, r0
 802253a:	e7e4      	b.n	8022506 <__pow5mult+0x6a>
 802253c:	4638      	mov	r0, r7
 802253e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022542:	bf00      	nop
 8022544:	08025b98 	.word	0x08025b98
 8022548:	0802593e 	.word	0x0802593e
 802254c:	08025a44 	.word	0x08025a44

08022550 <__lshift>:
 8022550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022554:	460c      	mov	r4, r1
 8022556:	6849      	ldr	r1, [r1, #4]
 8022558:	6923      	ldr	r3, [r4, #16]
 802255a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802255e:	68a3      	ldr	r3, [r4, #8]
 8022560:	4607      	mov	r7, r0
 8022562:	4691      	mov	r9, r2
 8022564:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022568:	f108 0601 	add.w	r6, r8, #1
 802256c:	42b3      	cmp	r3, r6
 802256e:	db0b      	blt.n	8022588 <__lshift+0x38>
 8022570:	4638      	mov	r0, r7
 8022572:	f7ff fd91 	bl	8022098 <_Balloc>
 8022576:	4605      	mov	r5, r0
 8022578:	b948      	cbnz	r0, 802258e <__lshift+0x3e>
 802257a:	4602      	mov	r2, r0
 802257c:	4b28      	ldr	r3, [pc, #160]	; (8022620 <__lshift+0xd0>)
 802257e:	4829      	ldr	r0, [pc, #164]	; (8022624 <__lshift+0xd4>)
 8022580:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022584:	f000 fc1c 	bl	8022dc0 <__assert_func>
 8022588:	3101      	adds	r1, #1
 802258a:	005b      	lsls	r3, r3, #1
 802258c:	e7ee      	b.n	802256c <__lshift+0x1c>
 802258e:	2300      	movs	r3, #0
 8022590:	f100 0114 	add.w	r1, r0, #20
 8022594:	f100 0210 	add.w	r2, r0, #16
 8022598:	4618      	mov	r0, r3
 802259a:	4553      	cmp	r3, sl
 802259c:	db33      	blt.n	8022606 <__lshift+0xb6>
 802259e:	6920      	ldr	r0, [r4, #16]
 80225a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80225a4:	f104 0314 	add.w	r3, r4, #20
 80225a8:	f019 091f 	ands.w	r9, r9, #31
 80225ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80225b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80225b4:	d02b      	beq.n	802260e <__lshift+0xbe>
 80225b6:	f1c9 0e20 	rsb	lr, r9, #32
 80225ba:	468a      	mov	sl, r1
 80225bc:	2200      	movs	r2, #0
 80225be:	6818      	ldr	r0, [r3, #0]
 80225c0:	fa00 f009 	lsl.w	r0, r0, r9
 80225c4:	4302      	orrs	r2, r0
 80225c6:	f84a 2b04 	str.w	r2, [sl], #4
 80225ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80225ce:	459c      	cmp	ip, r3
 80225d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80225d4:	d8f3      	bhi.n	80225be <__lshift+0x6e>
 80225d6:	ebac 0304 	sub.w	r3, ip, r4
 80225da:	3b15      	subs	r3, #21
 80225dc:	f023 0303 	bic.w	r3, r3, #3
 80225e0:	3304      	adds	r3, #4
 80225e2:	f104 0015 	add.w	r0, r4, #21
 80225e6:	4584      	cmp	ip, r0
 80225e8:	bf38      	it	cc
 80225ea:	2304      	movcc	r3, #4
 80225ec:	50ca      	str	r2, [r1, r3]
 80225ee:	b10a      	cbz	r2, 80225f4 <__lshift+0xa4>
 80225f0:	f108 0602 	add.w	r6, r8, #2
 80225f4:	3e01      	subs	r6, #1
 80225f6:	4638      	mov	r0, r7
 80225f8:	612e      	str	r6, [r5, #16]
 80225fa:	4621      	mov	r1, r4
 80225fc:	f7ff fd8c 	bl	8022118 <_Bfree>
 8022600:	4628      	mov	r0, r5
 8022602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022606:	f842 0f04 	str.w	r0, [r2, #4]!
 802260a:	3301      	adds	r3, #1
 802260c:	e7c5      	b.n	802259a <__lshift+0x4a>
 802260e:	3904      	subs	r1, #4
 8022610:	f853 2b04 	ldr.w	r2, [r3], #4
 8022614:	f841 2f04 	str.w	r2, [r1, #4]!
 8022618:	459c      	cmp	ip, r3
 802261a:	d8f9      	bhi.n	8022610 <__lshift+0xc0>
 802261c:	e7ea      	b.n	80225f4 <__lshift+0xa4>
 802261e:	bf00      	nop
 8022620:	080259b4 	.word	0x080259b4
 8022624:	08025a44 	.word	0x08025a44

08022628 <__mcmp>:
 8022628:	b530      	push	{r4, r5, lr}
 802262a:	6902      	ldr	r2, [r0, #16]
 802262c:	690c      	ldr	r4, [r1, #16]
 802262e:	1b12      	subs	r2, r2, r4
 8022630:	d10e      	bne.n	8022650 <__mcmp+0x28>
 8022632:	f100 0314 	add.w	r3, r0, #20
 8022636:	3114      	adds	r1, #20
 8022638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802263c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022648:	42a5      	cmp	r5, r4
 802264a:	d003      	beq.n	8022654 <__mcmp+0x2c>
 802264c:	d305      	bcc.n	802265a <__mcmp+0x32>
 802264e:	2201      	movs	r2, #1
 8022650:	4610      	mov	r0, r2
 8022652:	bd30      	pop	{r4, r5, pc}
 8022654:	4283      	cmp	r3, r0
 8022656:	d3f3      	bcc.n	8022640 <__mcmp+0x18>
 8022658:	e7fa      	b.n	8022650 <__mcmp+0x28>
 802265a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802265e:	e7f7      	b.n	8022650 <__mcmp+0x28>

08022660 <__mdiff>:
 8022660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022664:	460c      	mov	r4, r1
 8022666:	4606      	mov	r6, r0
 8022668:	4611      	mov	r1, r2
 802266a:	4620      	mov	r0, r4
 802266c:	4617      	mov	r7, r2
 802266e:	f7ff ffdb 	bl	8022628 <__mcmp>
 8022672:	1e05      	subs	r5, r0, #0
 8022674:	d110      	bne.n	8022698 <__mdiff+0x38>
 8022676:	4629      	mov	r1, r5
 8022678:	4630      	mov	r0, r6
 802267a:	f7ff fd0d 	bl	8022098 <_Balloc>
 802267e:	b930      	cbnz	r0, 802268e <__mdiff+0x2e>
 8022680:	4b39      	ldr	r3, [pc, #228]	; (8022768 <__mdiff+0x108>)
 8022682:	4602      	mov	r2, r0
 8022684:	f240 2132 	movw	r1, #562	; 0x232
 8022688:	4838      	ldr	r0, [pc, #224]	; (802276c <__mdiff+0x10c>)
 802268a:	f000 fb99 	bl	8022dc0 <__assert_func>
 802268e:	2301      	movs	r3, #1
 8022690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022698:	bfa4      	itt	ge
 802269a:	463b      	movge	r3, r7
 802269c:	4627      	movge	r7, r4
 802269e:	4630      	mov	r0, r6
 80226a0:	6879      	ldr	r1, [r7, #4]
 80226a2:	bfa6      	itte	ge
 80226a4:	461c      	movge	r4, r3
 80226a6:	2500      	movge	r5, #0
 80226a8:	2501      	movlt	r5, #1
 80226aa:	f7ff fcf5 	bl	8022098 <_Balloc>
 80226ae:	b920      	cbnz	r0, 80226ba <__mdiff+0x5a>
 80226b0:	4b2d      	ldr	r3, [pc, #180]	; (8022768 <__mdiff+0x108>)
 80226b2:	4602      	mov	r2, r0
 80226b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80226b8:	e7e6      	b.n	8022688 <__mdiff+0x28>
 80226ba:	693e      	ldr	r6, [r7, #16]
 80226bc:	60c5      	str	r5, [r0, #12]
 80226be:	6925      	ldr	r5, [r4, #16]
 80226c0:	f107 0114 	add.w	r1, r7, #20
 80226c4:	f104 0914 	add.w	r9, r4, #20
 80226c8:	f100 0e14 	add.w	lr, r0, #20
 80226cc:	f107 0210 	add.w	r2, r7, #16
 80226d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80226d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80226d8:	46f2      	mov	sl, lr
 80226da:	2700      	movs	r7, #0
 80226dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80226e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80226e4:	fa1f f883 	uxth.w	r8, r3
 80226e8:	fa17 f78b 	uxtah	r7, r7, fp
 80226ec:	0c1b      	lsrs	r3, r3, #16
 80226ee:	eba7 0808 	sub.w	r8, r7, r8
 80226f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80226f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80226fa:	fa1f f888 	uxth.w	r8, r8
 80226fe:	141f      	asrs	r7, r3, #16
 8022700:	454d      	cmp	r5, r9
 8022702:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022706:	f84a 3b04 	str.w	r3, [sl], #4
 802270a:	d8e7      	bhi.n	80226dc <__mdiff+0x7c>
 802270c:	1b2b      	subs	r3, r5, r4
 802270e:	3b15      	subs	r3, #21
 8022710:	f023 0303 	bic.w	r3, r3, #3
 8022714:	3304      	adds	r3, #4
 8022716:	3415      	adds	r4, #21
 8022718:	42a5      	cmp	r5, r4
 802271a:	bf38      	it	cc
 802271c:	2304      	movcc	r3, #4
 802271e:	4419      	add	r1, r3
 8022720:	4473      	add	r3, lr
 8022722:	469e      	mov	lr, r3
 8022724:	460d      	mov	r5, r1
 8022726:	4565      	cmp	r5, ip
 8022728:	d30e      	bcc.n	8022748 <__mdiff+0xe8>
 802272a:	f10c 0203 	add.w	r2, ip, #3
 802272e:	1a52      	subs	r2, r2, r1
 8022730:	f022 0203 	bic.w	r2, r2, #3
 8022734:	3903      	subs	r1, #3
 8022736:	458c      	cmp	ip, r1
 8022738:	bf38      	it	cc
 802273a:	2200      	movcc	r2, #0
 802273c:	441a      	add	r2, r3
 802273e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022742:	b17b      	cbz	r3, 8022764 <__mdiff+0x104>
 8022744:	6106      	str	r6, [r0, #16]
 8022746:	e7a5      	b.n	8022694 <__mdiff+0x34>
 8022748:	f855 8b04 	ldr.w	r8, [r5], #4
 802274c:	fa17 f488 	uxtah	r4, r7, r8
 8022750:	1422      	asrs	r2, r4, #16
 8022752:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022756:	b2a4      	uxth	r4, r4
 8022758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802275c:	f84e 4b04 	str.w	r4, [lr], #4
 8022760:	1417      	asrs	r7, r2, #16
 8022762:	e7e0      	b.n	8022726 <__mdiff+0xc6>
 8022764:	3e01      	subs	r6, #1
 8022766:	e7ea      	b.n	802273e <__mdiff+0xde>
 8022768:	080259b4 	.word	0x080259b4
 802276c:	08025a44 	.word	0x08025a44

08022770 <__ulp>:
 8022770:	b082      	sub	sp, #8
 8022772:	ed8d 0b00 	vstr	d0, [sp]
 8022776:	9b01      	ldr	r3, [sp, #4]
 8022778:	4912      	ldr	r1, [pc, #72]	; (80227c4 <__ulp+0x54>)
 802277a:	4019      	ands	r1, r3
 802277c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022780:	2900      	cmp	r1, #0
 8022782:	dd05      	ble.n	8022790 <__ulp+0x20>
 8022784:	2200      	movs	r2, #0
 8022786:	460b      	mov	r3, r1
 8022788:	ec43 2b10 	vmov	d0, r2, r3
 802278c:	b002      	add	sp, #8
 802278e:	4770      	bx	lr
 8022790:	4249      	negs	r1, r1
 8022792:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022796:	ea4f 5021 	mov.w	r0, r1, asr #20
 802279a:	f04f 0200 	mov.w	r2, #0
 802279e:	f04f 0300 	mov.w	r3, #0
 80227a2:	da04      	bge.n	80227ae <__ulp+0x3e>
 80227a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80227a8:	fa41 f300 	asr.w	r3, r1, r0
 80227ac:	e7ec      	b.n	8022788 <__ulp+0x18>
 80227ae:	f1a0 0114 	sub.w	r1, r0, #20
 80227b2:	291e      	cmp	r1, #30
 80227b4:	bfda      	itte	le
 80227b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80227ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80227be:	2101      	movgt	r1, #1
 80227c0:	460a      	mov	r2, r1
 80227c2:	e7e1      	b.n	8022788 <__ulp+0x18>
 80227c4:	7ff00000 	.word	0x7ff00000

080227c8 <__b2d>:
 80227c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227ca:	6905      	ldr	r5, [r0, #16]
 80227cc:	f100 0714 	add.w	r7, r0, #20
 80227d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80227d4:	1f2e      	subs	r6, r5, #4
 80227d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80227da:	4620      	mov	r0, r4
 80227dc:	f7ff fd52 	bl	8022284 <__hi0bits>
 80227e0:	f1c0 0320 	rsb	r3, r0, #32
 80227e4:	280a      	cmp	r0, #10
 80227e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022864 <__b2d+0x9c>
 80227ea:	600b      	str	r3, [r1, #0]
 80227ec:	dc14      	bgt.n	8022818 <__b2d+0x50>
 80227ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80227f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80227f6:	42b7      	cmp	r7, r6
 80227f8:	ea41 030c 	orr.w	r3, r1, ip
 80227fc:	bf34      	ite	cc
 80227fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022802:	2100      	movcs	r1, #0
 8022804:	3015      	adds	r0, #21
 8022806:	fa04 f000 	lsl.w	r0, r4, r0
 802280a:	fa21 f10e 	lsr.w	r1, r1, lr
 802280e:	ea40 0201 	orr.w	r2, r0, r1
 8022812:	ec43 2b10 	vmov	d0, r2, r3
 8022816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022818:	42b7      	cmp	r7, r6
 802281a:	bf3a      	itte	cc
 802281c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022820:	f1a5 0608 	subcc.w	r6, r5, #8
 8022824:	2100      	movcs	r1, #0
 8022826:	380b      	subs	r0, #11
 8022828:	d017      	beq.n	802285a <__b2d+0x92>
 802282a:	f1c0 0c20 	rsb	ip, r0, #32
 802282e:	fa04 f500 	lsl.w	r5, r4, r0
 8022832:	42be      	cmp	r6, r7
 8022834:	fa21 f40c 	lsr.w	r4, r1, ip
 8022838:	ea45 0504 	orr.w	r5, r5, r4
 802283c:	bf8c      	ite	hi
 802283e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022842:	2400      	movls	r4, #0
 8022844:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022848:	fa01 f000 	lsl.w	r0, r1, r0
 802284c:	fa24 f40c 	lsr.w	r4, r4, ip
 8022850:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022854:	ea40 0204 	orr.w	r2, r0, r4
 8022858:	e7db      	b.n	8022812 <__b2d+0x4a>
 802285a:	ea44 030c 	orr.w	r3, r4, ip
 802285e:	460a      	mov	r2, r1
 8022860:	e7d7      	b.n	8022812 <__b2d+0x4a>
 8022862:	bf00      	nop
 8022864:	3ff00000 	.word	0x3ff00000

08022868 <__d2b>:
 8022868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802286c:	4689      	mov	r9, r1
 802286e:	2101      	movs	r1, #1
 8022870:	ec57 6b10 	vmov	r6, r7, d0
 8022874:	4690      	mov	r8, r2
 8022876:	f7ff fc0f 	bl	8022098 <_Balloc>
 802287a:	4604      	mov	r4, r0
 802287c:	b930      	cbnz	r0, 802288c <__d2b+0x24>
 802287e:	4602      	mov	r2, r0
 8022880:	4b25      	ldr	r3, [pc, #148]	; (8022918 <__d2b+0xb0>)
 8022882:	4826      	ldr	r0, [pc, #152]	; (802291c <__d2b+0xb4>)
 8022884:	f240 310a 	movw	r1, #778	; 0x30a
 8022888:	f000 fa9a 	bl	8022dc0 <__assert_func>
 802288c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022894:	bb35      	cbnz	r5, 80228e4 <__d2b+0x7c>
 8022896:	2e00      	cmp	r6, #0
 8022898:	9301      	str	r3, [sp, #4]
 802289a:	d028      	beq.n	80228ee <__d2b+0x86>
 802289c:	4668      	mov	r0, sp
 802289e:	9600      	str	r6, [sp, #0]
 80228a0:	f7ff fd10 	bl	80222c4 <__lo0bits>
 80228a4:	9900      	ldr	r1, [sp, #0]
 80228a6:	b300      	cbz	r0, 80228ea <__d2b+0x82>
 80228a8:	9a01      	ldr	r2, [sp, #4]
 80228aa:	f1c0 0320 	rsb	r3, r0, #32
 80228ae:	fa02 f303 	lsl.w	r3, r2, r3
 80228b2:	430b      	orrs	r3, r1
 80228b4:	40c2      	lsrs	r2, r0
 80228b6:	6163      	str	r3, [r4, #20]
 80228b8:	9201      	str	r2, [sp, #4]
 80228ba:	9b01      	ldr	r3, [sp, #4]
 80228bc:	61a3      	str	r3, [r4, #24]
 80228be:	2b00      	cmp	r3, #0
 80228c0:	bf14      	ite	ne
 80228c2:	2202      	movne	r2, #2
 80228c4:	2201      	moveq	r2, #1
 80228c6:	6122      	str	r2, [r4, #16]
 80228c8:	b1d5      	cbz	r5, 8022900 <__d2b+0x98>
 80228ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80228ce:	4405      	add	r5, r0
 80228d0:	f8c9 5000 	str.w	r5, [r9]
 80228d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80228d8:	f8c8 0000 	str.w	r0, [r8]
 80228dc:	4620      	mov	r0, r4
 80228de:	b003      	add	sp, #12
 80228e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80228e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80228e8:	e7d5      	b.n	8022896 <__d2b+0x2e>
 80228ea:	6161      	str	r1, [r4, #20]
 80228ec:	e7e5      	b.n	80228ba <__d2b+0x52>
 80228ee:	a801      	add	r0, sp, #4
 80228f0:	f7ff fce8 	bl	80222c4 <__lo0bits>
 80228f4:	9b01      	ldr	r3, [sp, #4]
 80228f6:	6163      	str	r3, [r4, #20]
 80228f8:	2201      	movs	r2, #1
 80228fa:	6122      	str	r2, [r4, #16]
 80228fc:	3020      	adds	r0, #32
 80228fe:	e7e3      	b.n	80228c8 <__d2b+0x60>
 8022900:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022904:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022908:	f8c9 0000 	str.w	r0, [r9]
 802290c:	6918      	ldr	r0, [r3, #16]
 802290e:	f7ff fcb9 	bl	8022284 <__hi0bits>
 8022912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022916:	e7df      	b.n	80228d8 <__d2b+0x70>
 8022918:	080259b4 	.word	0x080259b4
 802291c:	08025a44 	.word	0x08025a44

08022920 <__ratio>:
 8022920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022924:	4688      	mov	r8, r1
 8022926:	4669      	mov	r1, sp
 8022928:	4681      	mov	r9, r0
 802292a:	f7ff ff4d 	bl	80227c8 <__b2d>
 802292e:	a901      	add	r1, sp, #4
 8022930:	4640      	mov	r0, r8
 8022932:	ec55 4b10 	vmov	r4, r5, d0
 8022936:	f7ff ff47 	bl	80227c8 <__b2d>
 802293a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802293e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022942:	eba3 0c02 	sub.w	ip, r3, r2
 8022946:	e9dd 3200 	ldrd	r3, r2, [sp]
 802294a:	1a9b      	subs	r3, r3, r2
 802294c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022950:	ec51 0b10 	vmov	r0, r1, d0
 8022954:	2b00      	cmp	r3, #0
 8022956:	bfd6      	itet	le
 8022958:	460a      	movle	r2, r1
 802295a:	462a      	movgt	r2, r5
 802295c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022960:	468b      	mov	fp, r1
 8022962:	462f      	mov	r7, r5
 8022964:	bfd4      	ite	le
 8022966:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802296a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802296e:	4620      	mov	r0, r4
 8022970:	ee10 2a10 	vmov	r2, s0
 8022974:	465b      	mov	r3, fp
 8022976:	4639      	mov	r1, r7
 8022978:	f7dd ff68 	bl	800084c <__aeabi_ddiv>
 802297c:	ec41 0b10 	vmov	d0, r0, r1
 8022980:	b003      	add	sp, #12
 8022982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022986 <__copybits>:
 8022986:	3901      	subs	r1, #1
 8022988:	b570      	push	{r4, r5, r6, lr}
 802298a:	1149      	asrs	r1, r1, #5
 802298c:	6914      	ldr	r4, [r2, #16]
 802298e:	3101      	adds	r1, #1
 8022990:	f102 0314 	add.w	r3, r2, #20
 8022994:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022998:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802299c:	1f05      	subs	r5, r0, #4
 802299e:	42a3      	cmp	r3, r4
 80229a0:	d30c      	bcc.n	80229bc <__copybits+0x36>
 80229a2:	1aa3      	subs	r3, r4, r2
 80229a4:	3b11      	subs	r3, #17
 80229a6:	f023 0303 	bic.w	r3, r3, #3
 80229aa:	3211      	adds	r2, #17
 80229ac:	42a2      	cmp	r2, r4
 80229ae:	bf88      	it	hi
 80229b0:	2300      	movhi	r3, #0
 80229b2:	4418      	add	r0, r3
 80229b4:	2300      	movs	r3, #0
 80229b6:	4288      	cmp	r0, r1
 80229b8:	d305      	bcc.n	80229c6 <__copybits+0x40>
 80229ba:	bd70      	pop	{r4, r5, r6, pc}
 80229bc:	f853 6b04 	ldr.w	r6, [r3], #4
 80229c0:	f845 6f04 	str.w	r6, [r5, #4]!
 80229c4:	e7eb      	b.n	802299e <__copybits+0x18>
 80229c6:	f840 3b04 	str.w	r3, [r0], #4
 80229ca:	e7f4      	b.n	80229b6 <__copybits+0x30>

080229cc <__any_on>:
 80229cc:	f100 0214 	add.w	r2, r0, #20
 80229d0:	6900      	ldr	r0, [r0, #16]
 80229d2:	114b      	asrs	r3, r1, #5
 80229d4:	4298      	cmp	r0, r3
 80229d6:	b510      	push	{r4, lr}
 80229d8:	db11      	blt.n	80229fe <__any_on+0x32>
 80229da:	dd0a      	ble.n	80229f2 <__any_on+0x26>
 80229dc:	f011 011f 	ands.w	r1, r1, #31
 80229e0:	d007      	beq.n	80229f2 <__any_on+0x26>
 80229e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80229e6:	fa24 f001 	lsr.w	r0, r4, r1
 80229ea:	fa00 f101 	lsl.w	r1, r0, r1
 80229ee:	428c      	cmp	r4, r1
 80229f0:	d10b      	bne.n	8022a0a <__any_on+0x3e>
 80229f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80229f6:	4293      	cmp	r3, r2
 80229f8:	d803      	bhi.n	8022a02 <__any_on+0x36>
 80229fa:	2000      	movs	r0, #0
 80229fc:	bd10      	pop	{r4, pc}
 80229fe:	4603      	mov	r3, r0
 8022a00:	e7f7      	b.n	80229f2 <__any_on+0x26>
 8022a02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022a06:	2900      	cmp	r1, #0
 8022a08:	d0f5      	beq.n	80229f6 <__any_on+0x2a>
 8022a0a:	2001      	movs	r0, #1
 8022a0c:	e7f6      	b.n	80229fc <__any_on+0x30>

08022a0e <_calloc_r>:
 8022a0e:	b513      	push	{r0, r1, r4, lr}
 8022a10:	434a      	muls	r2, r1
 8022a12:	4611      	mov	r1, r2
 8022a14:	9201      	str	r2, [sp, #4]
 8022a16:	f7fc fa79 	bl	801ef0c <_malloc_r>
 8022a1a:	4604      	mov	r4, r0
 8022a1c:	b118      	cbz	r0, 8022a26 <_calloc_r+0x18>
 8022a1e:	9a01      	ldr	r2, [sp, #4]
 8022a20:	2100      	movs	r1, #0
 8022a22:	f7fc fa1b 	bl	801ee5c <memset>
 8022a26:	4620      	mov	r0, r4
 8022a28:	b002      	add	sp, #8
 8022a2a:	bd10      	pop	{r4, pc}

08022a2c <_realloc_r>:
 8022a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a2e:	4607      	mov	r7, r0
 8022a30:	4614      	mov	r4, r2
 8022a32:	460e      	mov	r6, r1
 8022a34:	b921      	cbnz	r1, 8022a40 <_realloc_r+0x14>
 8022a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022a3a:	4611      	mov	r1, r2
 8022a3c:	f7fc ba66 	b.w	801ef0c <_malloc_r>
 8022a40:	b922      	cbnz	r2, 8022a4c <_realloc_r+0x20>
 8022a42:	f7fc fa13 	bl	801ee6c <_free_r>
 8022a46:	4625      	mov	r5, r4
 8022a48:	4628      	mov	r0, r5
 8022a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a4c:	f000 fbbc 	bl	80231c8 <_malloc_usable_size_r>
 8022a50:	42a0      	cmp	r0, r4
 8022a52:	d20f      	bcs.n	8022a74 <_realloc_r+0x48>
 8022a54:	4621      	mov	r1, r4
 8022a56:	4638      	mov	r0, r7
 8022a58:	f7fc fa58 	bl	801ef0c <_malloc_r>
 8022a5c:	4605      	mov	r5, r0
 8022a5e:	2800      	cmp	r0, #0
 8022a60:	d0f2      	beq.n	8022a48 <_realloc_r+0x1c>
 8022a62:	4631      	mov	r1, r6
 8022a64:	4622      	mov	r2, r4
 8022a66:	f7fc f9eb 	bl	801ee40 <memcpy>
 8022a6a:	4631      	mov	r1, r6
 8022a6c:	4638      	mov	r0, r7
 8022a6e:	f7fc f9fd 	bl	801ee6c <_free_r>
 8022a72:	e7e9      	b.n	8022a48 <_realloc_r+0x1c>
 8022a74:	4635      	mov	r5, r6
 8022a76:	e7e7      	b.n	8022a48 <_realloc_r+0x1c>

08022a78 <__ssputs_r>:
 8022a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a7c:	688e      	ldr	r6, [r1, #8]
 8022a7e:	429e      	cmp	r6, r3
 8022a80:	4682      	mov	sl, r0
 8022a82:	460c      	mov	r4, r1
 8022a84:	4690      	mov	r8, r2
 8022a86:	461f      	mov	r7, r3
 8022a88:	d838      	bhi.n	8022afc <__ssputs_r+0x84>
 8022a8a:	898a      	ldrh	r2, [r1, #12]
 8022a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022a90:	d032      	beq.n	8022af8 <__ssputs_r+0x80>
 8022a92:	6825      	ldr	r5, [r4, #0]
 8022a94:	6909      	ldr	r1, [r1, #16]
 8022a96:	eba5 0901 	sub.w	r9, r5, r1
 8022a9a:	6965      	ldr	r5, [r4, #20]
 8022a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022aa4:	3301      	adds	r3, #1
 8022aa6:	444b      	add	r3, r9
 8022aa8:	106d      	asrs	r5, r5, #1
 8022aaa:	429d      	cmp	r5, r3
 8022aac:	bf38      	it	cc
 8022aae:	461d      	movcc	r5, r3
 8022ab0:	0553      	lsls	r3, r2, #21
 8022ab2:	d531      	bpl.n	8022b18 <__ssputs_r+0xa0>
 8022ab4:	4629      	mov	r1, r5
 8022ab6:	f7fc fa29 	bl	801ef0c <_malloc_r>
 8022aba:	4606      	mov	r6, r0
 8022abc:	b950      	cbnz	r0, 8022ad4 <__ssputs_r+0x5c>
 8022abe:	230c      	movs	r3, #12
 8022ac0:	f8ca 3000 	str.w	r3, [sl]
 8022ac4:	89a3      	ldrh	r3, [r4, #12]
 8022ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022aca:	81a3      	strh	r3, [r4, #12]
 8022acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ad4:	6921      	ldr	r1, [r4, #16]
 8022ad6:	464a      	mov	r2, r9
 8022ad8:	f7fc f9b2 	bl	801ee40 <memcpy>
 8022adc:	89a3      	ldrh	r3, [r4, #12]
 8022ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022ae6:	81a3      	strh	r3, [r4, #12]
 8022ae8:	6126      	str	r6, [r4, #16]
 8022aea:	6165      	str	r5, [r4, #20]
 8022aec:	444e      	add	r6, r9
 8022aee:	eba5 0509 	sub.w	r5, r5, r9
 8022af2:	6026      	str	r6, [r4, #0]
 8022af4:	60a5      	str	r5, [r4, #8]
 8022af6:	463e      	mov	r6, r7
 8022af8:	42be      	cmp	r6, r7
 8022afa:	d900      	bls.n	8022afe <__ssputs_r+0x86>
 8022afc:	463e      	mov	r6, r7
 8022afe:	4632      	mov	r2, r6
 8022b00:	6820      	ldr	r0, [r4, #0]
 8022b02:	4641      	mov	r1, r8
 8022b04:	f000 fb46 	bl	8023194 <memmove>
 8022b08:	68a3      	ldr	r3, [r4, #8]
 8022b0a:	6822      	ldr	r2, [r4, #0]
 8022b0c:	1b9b      	subs	r3, r3, r6
 8022b0e:	4432      	add	r2, r6
 8022b10:	60a3      	str	r3, [r4, #8]
 8022b12:	6022      	str	r2, [r4, #0]
 8022b14:	2000      	movs	r0, #0
 8022b16:	e7db      	b.n	8022ad0 <__ssputs_r+0x58>
 8022b18:	462a      	mov	r2, r5
 8022b1a:	f7ff ff87 	bl	8022a2c <_realloc_r>
 8022b1e:	4606      	mov	r6, r0
 8022b20:	2800      	cmp	r0, #0
 8022b22:	d1e1      	bne.n	8022ae8 <__ssputs_r+0x70>
 8022b24:	6921      	ldr	r1, [r4, #16]
 8022b26:	4650      	mov	r0, sl
 8022b28:	f7fc f9a0 	bl	801ee6c <_free_r>
 8022b2c:	e7c7      	b.n	8022abe <__ssputs_r+0x46>
	...

08022b30 <_svfiprintf_r>:
 8022b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b34:	4698      	mov	r8, r3
 8022b36:	898b      	ldrh	r3, [r1, #12]
 8022b38:	061b      	lsls	r3, r3, #24
 8022b3a:	b09d      	sub	sp, #116	; 0x74
 8022b3c:	4607      	mov	r7, r0
 8022b3e:	460d      	mov	r5, r1
 8022b40:	4614      	mov	r4, r2
 8022b42:	d50e      	bpl.n	8022b62 <_svfiprintf_r+0x32>
 8022b44:	690b      	ldr	r3, [r1, #16]
 8022b46:	b963      	cbnz	r3, 8022b62 <_svfiprintf_r+0x32>
 8022b48:	2140      	movs	r1, #64	; 0x40
 8022b4a:	f7fc f9df 	bl	801ef0c <_malloc_r>
 8022b4e:	6028      	str	r0, [r5, #0]
 8022b50:	6128      	str	r0, [r5, #16]
 8022b52:	b920      	cbnz	r0, 8022b5e <_svfiprintf_r+0x2e>
 8022b54:	230c      	movs	r3, #12
 8022b56:	603b      	str	r3, [r7, #0]
 8022b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b5c:	e0d1      	b.n	8022d02 <_svfiprintf_r+0x1d2>
 8022b5e:	2340      	movs	r3, #64	; 0x40
 8022b60:	616b      	str	r3, [r5, #20]
 8022b62:	2300      	movs	r3, #0
 8022b64:	9309      	str	r3, [sp, #36]	; 0x24
 8022b66:	2320      	movs	r3, #32
 8022b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022b70:	2330      	movs	r3, #48	; 0x30
 8022b72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022d1c <_svfiprintf_r+0x1ec>
 8022b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022b7a:	f04f 0901 	mov.w	r9, #1
 8022b7e:	4623      	mov	r3, r4
 8022b80:	469a      	mov	sl, r3
 8022b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022b86:	b10a      	cbz	r2, 8022b8c <_svfiprintf_r+0x5c>
 8022b88:	2a25      	cmp	r2, #37	; 0x25
 8022b8a:	d1f9      	bne.n	8022b80 <_svfiprintf_r+0x50>
 8022b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8022b90:	d00b      	beq.n	8022baa <_svfiprintf_r+0x7a>
 8022b92:	465b      	mov	r3, fp
 8022b94:	4622      	mov	r2, r4
 8022b96:	4629      	mov	r1, r5
 8022b98:	4638      	mov	r0, r7
 8022b9a:	f7ff ff6d 	bl	8022a78 <__ssputs_r>
 8022b9e:	3001      	adds	r0, #1
 8022ba0:	f000 80aa 	beq.w	8022cf8 <_svfiprintf_r+0x1c8>
 8022ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ba6:	445a      	add	r2, fp
 8022ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8022baa:	f89a 3000 	ldrb.w	r3, [sl]
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	f000 80a2 	beq.w	8022cf8 <_svfiprintf_r+0x1c8>
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022bbe:	f10a 0a01 	add.w	sl, sl, #1
 8022bc2:	9304      	str	r3, [sp, #16]
 8022bc4:	9307      	str	r3, [sp, #28]
 8022bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022bca:	931a      	str	r3, [sp, #104]	; 0x68
 8022bcc:	4654      	mov	r4, sl
 8022bce:	2205      	movs	r2, #5
 8022bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022bd4:	4851      	ldr	r0, [pc, #324]	; (8022d1c <_svfiprintf_r+0x1ec>)
 8022bd6:	f7dd fb03 	bl	80001e0 <memchr>
 8022bda:	9a04      	ldr	r2, [sp, #16]
 8022bdc:	b9d8      	cbnz	r0, 8022c16 <_svfiprintf_r+0xe6>
 8022bde:	06d0      	lsls	r0, r2, #27
 8022be0:	bf44      	itt	mi
 8022be2:	2320      	movmi	r3, #32
 8022be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022be8:	0711      	lsls	r1, r2, #28
 8022bea:	bf44      	itt	mi
 8022bec:	232b      	movmi	r3, #43	; 0x2b
 8022bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8022bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8022bf8:	d015      	beq.n	8022c26 <_svfiprintf_r+0xf6>
 8022bfa:	9a07      	ldr	r2, [sp, #28]
 8022bfc:	4654      	mov	r4, sl
 8022bfe:	2000      	movs	r0, #0
 8022c00:	f04f 0c0a 	mov.w	ip, #10
 8022c04:	4621      	mov	r1, r4
 8022c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c0a:	3b30      	subs	r3, #48	; 0x30
 8022c0c:	2b09      	cmp	r3, #9
 8022c0e:	d94e      	bls.n	8022cae <_svfiprintf_r+0x17e>
 8022c10:	b1b0      	cbz	r0, 8022c40 <_svfiprintf_r+0x110>
 8022c12:	9207      	str	r2, [sp, #28]
 8022c14:	e014      	b.n	8022c40 <_svfiprintf_r+0x110>
 8022c16:	eba0 0308 	sub.w	r3, r0, r8
 8022c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8022c1e:	4313      	orrs	r3, r2
 8022c20:	9304      	str	r3, [sp, #16]
 8022c22:	46a2      	mov	sl, r4
 8022c24:	e7d2      	b.n	8022bcc <_svfiprintf_r+0x9c>
 8022c26:	9b03      	ldr	r3, [sp, #12]
 8022c28:	1d19      	adds	r1, r3, #4
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	9103      	str	r1, [sp, #12]
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	bfbb      	ittet	lt
 8022c32:	425b      	neglt	r3, r3
 8022c34:	f042 0202 	orrlt.w	r2, r2, #2
 8022c38:	9307      	strge	r3, [sp, #28]
 8022c3a:	9307      	strlt	r3, [sp, #28]
 8022c3c:	bfb8      	it	lt
 8022c3e:	9204      	strlt	r2, [sp, #16]
 8022c40:	7823      	ldrb	r3, [r4, #0]
 8022c42:	2b2e      	cmp	r3, #46	; 0x2e
 8022c44:	d10c      	bne.n	8022c60 <_svfiprintf_r+0x130>
 8022c46:	7863      	ldrb	r3, [r4, #1]
 8022c48:	2b2a      	cmp	r3, #42	; 0x2a
 8022c4a:	d135      	bne.n	8022cb8 <_svfiprintf_r+0x188>
 8022c4c:	9b03      	ldr	r3, [sp, #12]
 8022c4e:	1d1a      	adds	r2, r3, #4
 8022c50:	681b      	ldr	r3, [r3, #0]
 8022c52:	9203      	str	r2, [sp, #12]
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	bfb8      	it	lt
 8022c58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022c5c:	3402      	adds	r4, #2
 8022c5e:	9305      	str	r3, [sp, #20]
 8022c60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022d2c <_svfiprintf_r+0x1fc>
 8022c64:	7821      	ldrb	r1, [r4, #0]
 8022c66:	2203      	movs	r2, #3
 8022c68:	4650      	mov	r0, sl
 8022c6a:	f7dd fab9 	bl	80001e0 <memchr>
 8022c6e:	b140      	cbz	r0, 8022c82 <_svfiprintf_r+0x152>
 8022c70:	2340      	movs	r3, #64	; 0x40
 8022c72:	eba0 000a 	sub.w	r0, r0, sl
 8022c76:	fa03 f000 	lsl.w	r0, r3, r0
 8022c7a:	9b04      	ldr	r3, [sp, #16]
 8022c7c:	4303      	orrs	r3, r0
 8022c7e:	3401      	adds	r4, #1
 8022c80:	9304      	str	r3, [sp, #16]
 8022c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c86:	4826      	ldr	r0, [pc, #152]	; (8022d20 <_svfiprintf_r+0x1f0>)
 8022c88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022c8c:	2206      	movs	r2, #6
 8022c8e:	f7dd faa7 	bl	80001e0 <memchr>
 8022c92:	2800      	cmp	r0, #0
 8022c94:	d038      	beq.n	8022d08 <_svfiprintf_r+0x1d8>
 8022c96:	4b23      	ldr	r3, [pc, #140]	; (8022d24 <_svfiprintf_r+0x1f4>)
 8022c98:	bb1b      	cbnz	r3, 8022ce2 <_svfiprintf_r+0x1b2>
 8022c9a:	9b03      	ldr	r3, [sp, #12]
 8022c9c:	3307      	adds	r3, #7
 8022c9e:	f023 0307 	bic.w	r3, r3, #7
 8022ca2:	3308      	adds	r3, #8
 8022ca4:	9303      	str	r3, [sp, #12]
 8022ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ca8:	4433      	add	r3, r6
 8022caa:	9309      	str	r3, [sp, #36]	; 0x24
 8022cac:	e767      	b.n	8022b7e <_svfiprintf_r+0x4e>
 8022cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8022cb2:	460c      	mov	r4, r1
 8022cb4:	2001      	movs	r0, #1
 8022cb6:	e7a5      	b.n	8022c04 <_svfiprintf_r+0xd4>
 8022cb8:	2300      	movs	r3, #0
 8022cba:	3401      	adds	r4, #1
 8022cbc:	9305      	str	r3, [sp, #20]
 8022cbe:	4619      	mov	r1, r3
 8022cc0:	f04f 0c0a 	mov.w	ip, #10
 8022cc4:	4620      	mov	r0, r4
 8022cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022cca:	3a30      	subs	r2, #48	; 0x30
 8022ccc:	2a09      	cmp	r2, #9
 8022cce:	d903      	bls.n	8022cd8 <_svfiprintf_r+0x1a8>
 8022cd0:	2b00      	cmp	r3, #0
 8022cd2:	d0c5      	beq.n	8022c60 <_svfiprintf_r+0x130>
 8022cd4:	9105      	str	r1, [sp, #20]
 8022cd6:	e7c3      	b.n	8022c60 <_svfiprintf_r+0x130>
 8022cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8022cdc:	4604      	mov	r4, r0
 8022cde:	2301      	movs	r3, #1
 8022ce0:	e7f0      	b.n	8022cc4 <_svfiprintf_r+0x194>
 8022ce2:	ab03      	add	r3, sp, #12
 8022ce4:	9300      	str	r3, [sp, #0]
 8022ce6:	462a      	mov	r2, r5
 8022ce8:	4b0f      	ldr	r3, [pc, #60]	; (8022d28 <_svfiprintf_r+0x1f8>)
 8022cea:	a904      	add	r1, sp, #16
 8022cec:	4638      	mov	r0, r7
 8022cee:	f7fc fa07 	bl	801f100 <_printf_float>
 8022cf2:	1c42      	adds	r2, r0, #1
 8022cf4:	4606      	mov	r6, r0
 8022cf6:	d1d6      	bne.n	8022ca6 <_svfiprintf_r+0x176>
 8022cf8:	89ab      	ldrh	r3, [r5, #12]
 8022cfa:	065b      	lsls	r3, r3, #25
 8022cfc:	f53f af2c 	bmi.w	8022b58 <_svfiprintf_r+0x28>
 8022d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d02:	b01d      	add	sp, #116	; 0x74
 8022d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d08:	ab03      	add	r3, sp, #12
 8022d0a:	9300      	str	r3, [sp, #0]
 8022d0c:	462a      	mov	r2, r5
 8022d0e:	4b06      	ldr	r3, [pc, #24]	; (8022d28 <_svfiprintf_r+0x1f8>)
 8022d10:	a904      	add	r1, sp, #16
 8022d12:	4638      	mov	r0, r7
 8022d14:	f7fc fc98 	bl	801f648 <_printf_i>
 8022d18:	e7eb      	b.n	8022cf2 <_svfiprintf_r+0x1c2>
 8022d1a:	bf00      	nop
 8022d1c:	08025ba4 	.word	0x08025ba4
 8022d20:	08025bae 	.word	0x08025bae
 8022d24:	0801f101 	.word	0x0801f101
 8022d28:	08022a79 	.word	0x08022a79
 8022d2c:	08025baa 	.word	0x08025baa

08022d30 <_read_r>:
 8022d30:	b538      	push	{r3, r4, r5, lr}
 8022d32:	4d07      	ldr	r5, [pc, #28]	; (8022d50 <_read_r+0x20>)
 8022d34:	4604      	mov	r4, r0
 8022d36:	4608      	mov	r0, r1
 8022d38:	4611      	mov	r1, r2
 8022d3a:	2200      	movs	r2, #0
 8022d3c:	602a      	str	r2, [r5, #0]
 8022d3e:	461a      	mov	r2, r3
 8022d40:	f7eb fe6c 	bl	800ea1c <_read>
 8022d44:	1c43      	adds	r3, r0, #1
 8022d46:	d102      	bne.n	8022d4e <_read_r+0x1e>
 8022d48:	682b      	ldr	r3, [r5, #0]
 8022d4a:	b103      	cbz	r3, 8022d4e <_read_r+0x1e>
 8022d4c:	6023      	str	r3, [r4, #0]
 8022d4e:	bd38      	pop	{r3, r4, r5, pc}
 8022d50:	2000a94c 	.word	0x2000a94c
 8022d54:	00000000 	.word	0x00000000

08022d58 <nan>:
 8022d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022d60 <nan+0x8>
 8022d5c:	4770      	bx	lr
 8022d5e:	bf00      	nop
 8022d60:	00000000 	.word	0x00000000
 8022d64:	7ff80000 	.word	0x7ff80000

08022d68 <finitef>:
 8022d68:	b082      	sub	sp, #8
 8022d6a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022d6e:	9801      	ldr	r0, [sp, #4]
 8022d70:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022d74:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8022d78:	bfac      	ite	ge
 8022d7a:	2000      	movge	r0, #0
 8022d7c:	2001      	movlt	r0, #1
 8022d7e:	b002      	add	sp, #8
 8022d80:	4770      	bx	lr

08022d82 <strncmp>:
 8022d82:	b510      	push	{r4, lr}
 8022d84:	b16a      	cbz	r2, 8022da2 <strncmp+0x20>
 8022d86:	3901      	subs	r1, #1
 8022d88:	1884      	adds	r4, r0, r2
 8022d8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022d8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022d92:	4293      	cmp	r3, r2
 8022d94:	d103      	bne.n	8022d9e <strncmp+0x1c>
 8022d96:	42a0      	cmp	r0, r4
 8022d98:	d001      	beq.n	8022d9e <strncmp+0x1c>
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d1f5      	bne.n	8022d8a <strncmp+0x8>
 8022d9e:	1a98      	subs	r0, r3, r2
 8022da0:	bd10      	pop	{r4, pc}
 8022da2:	4610      	mov	r0, r2
 8022da4:	e7fc      	b.n	8022da0 <strncmp+0x1e>

08022da6 <__ascii_wctomb>:
 8022da6:	b149      	cbz	r1, 8022dbc <__ascii_wctomb+0x16>
 8022da8:	2aff      	cmp	r2, #255	; 0xff
 8022daa:	bf85      	ittet	hi
 8022dac:	238a      	movhi	r3, #138	; 0x8a
 8022dae:	6003      	strhi	r3, [r0, #0]
 8022db0:	700a      	strbls	r2, [r1, #0]
 8022db2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8022db6:	bf98      	it	ls
 8022db8:	2001      	movls	r0, #1
 8022dba:	4770      	bx	lr
 8022dbc:	4608      	mov	r0, r1
 8022dbe:	4770      	bx	lr

08022dc0 <__assert_func>:
 8022dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022dc2:	4614      	mov	r4, r2
 8022dc4:	461a      	mov	r2, r3
 8022dc6:	4b09      	ldr	r3, [pc, #36]	; (8022dec <__assert_func+0x2c>)
 8022dc8:	681b      	ldr	r3, [r3, #0]
 8022dca:	4605      	mov	r5, r0
 8022dcc:	68d8      	ldr	r0, [r3, #12]
 8022dce:	b14c      	cbz	r4, 8022de4 <__assert_func+0x24>
 8022dd0:	4b07      	ldr	r3, [pc, #28]	; (8022df0 <__assert_func+0x30>)
 8022dd2:	9100      	str	r1, [sp, #0]
 8022dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022dd8:	4906      	ldr	r1, [pc, #24]	; (8022df4 <__assert_func+0x34>)
 8022dda:	462b      	mov	r3, r5
 8022ddc:	f000 f9a6 	bl	802312c <fiprintf>
 8022de0:	f000 fc14 	bl	802360c <abort>
 8022de4:	4b04      	ldr	r3, [pc, #16]	; (8022df8 <__assert_func+0x38>)
 8022de6:	461c      	mov	r4, r3
 8022de8:	e7f3      	b.n	8022dd2 <__assert_func+0x12>
 8022dea:	bf00      	nop
 8022dec:	200000c4 	.word	0x200000c4
 8022df0:	08025bb5 	.word	0x08025bb5
 8022df4:	08025bc2 	.word	0x08025bc2
 8022df8:	08025bf0 	.word	0x08025bf0

08022dfc <__sflush_r>:
 8022dfc:	898a      	ldrh	r2, [r1, #12]
 8022dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e02:	4605      	mov	r5, r0
 8022e04:	0710      	lsls	r0, r2, #28
 8022e06:	460c      	mov	r4, r1
 8022e08:	d458      	bmi.n	8022ebc <__sflush_r+0xc0>
 8022e0a:	684b      	ldr	r3, [r1, #4]
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	dc05      	bgt.n	8022e1c <__sflush_r+0x20>
 8022e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022e12:	2b00      	cmp	r3, #0
 8022e14:	dc02      	bgt.n	8022e1c <__sflush_r+0x20>
 8022e16:	2000      	movs	r0, #0
 8022e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022e1e:	2e00      	cmp	r6, #0
 8022e20:	d0f9      	beq.n	8022e16 <__sflush_r+0x1a>
 8022e22:	2300      	movs	r3, #0
 8022e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022e28:	682f      	ldr	r7, [r5, #0]
 8022e2a:	602b      	str	r3, [r5, #0]
 8022e2c:	d032      	beq.n	8022e94 <__sflush_r+0x98>
 8022e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022e30:	89a3      	ldrh	r3, [r4, #12]
 8022e32:	075a      	lsls	r2, r3, #29
 8022e34:	d505      	bpl.n	8022e42 <__sflush_r+0x46>
 8022e36:	6863      	ldr	r3, [r4, #4]
 8022e38:	1ac0      	subs	r0, r0, r3
 8022e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022e3c:	b10b      	cbz	r3, 8022e42 <__sflush_r+0x46>
 8022e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022e40:	1ac0      	subs	r0, r0, r3
 8022e42:	2300      	movs	r3, #0
 8022e44:	4602      	mov	r2, r0
 8022e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022e48:	6a21      	ldr	r1, [r4, #32]
 8022e4a:	4628      	mov	r0, r5
 8022e4c:	47b0      	blx	r6
 8022e4e:	1c43      	adds	r3, r0, #1
 8022e50:	89a3      	ldrh	r3, [r4, #12]
 8022e52:	d106      	bne.n	8022e62 <__sflush_r+0x66>
 8022e54:	6829      	ldr	r1, [r5, #0]
 8022e56:	291d      	cmp	r1, #29
 8022e58:	d82c      	bhi.n	8022eb4 <__sflush_r+0xb8>
 8022e5a:	4a2a      	ldr	r2, [pc, #168]	; (8022f04 <__sflush_r+0x108>)
 8022e5c:	40ca      	lsrs	r2, r1
 8022e5e:	07d6      	lsls	r6, r2, #31
 8022e60:	d528      	bpl.n	8022eb4 <__sflush_r+0xb8>
 8022e62:	2200      	movs	r2, #0
 8022e64:	6062      	str	r2, [r4, #4]
 8022e66:	04d9      	lsls	r1, r3, #19
 8022e68:	6922      	ldr	r2, [r4, #16]
 8022e6a:	6022      	str	r2, [r4, #0]
 8022e6c:	d504      	bpl.n	8022e78 <__sflush_r+0x7c>
 8022e6e:	1c42      	adds	r2, r0, #1
 8022e70:	d101      	bne.n	8022e76 <__sflush_r+0x7a>
 8022e72:	682b      	ldr	r3, [r5, #0]
 8022e74:	b903      	cbnz	r3, 8022e78 <__sflush_r+0x7c>
 8022e76:	6560      	str	r0, [r4, #84]	; 0x54
 8022e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022e7a:	602f      	str	r7, [r5, #0]
 8022e7c:	2900      	cmp	r1, #0
 8022e7e:	d0ca      	beq.n	8022e16 <__sflush_r+0x1a>
 8022e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e84:	4299      	cmp	r1, r3
 8022e86:	d002      	beq.n	8022e8e <__sflush_r+0x92>
 8022e88:	4628      	mov	r0, r5
 8022e8a:	f7fb ffef 	bl	801ee6c <_free_r>
 8022e8e:	2000      	movs	r0, #0
 8022e90:	6360      	str	r0, [r4, #52]	; 0x34
 8022e92:	e7c1      	b.n	8022e18 <__sflush_r+0x1c>
 8022e94:	6a21      	ldr	r1, [r4, #32]
 8022e96:	2301      	movs	r3, #1
 8022e98:	4628      	mov	r0, r5
 8022e9a:	47b0      	blx	r6
 8022e9c:	1c41      	adds	r1, r0, #1
 8022e9e:	d1c7      	bne.n	8022e30 <__sflush_r+0x34>
 8022ea0:	682b      	ldr	r3, [r5, #0]
 8022ea2:	2b00      	cmp	r3, #0
 8022ea4:	d0c4      	beq.n	8022e30 <__sflush_r+0x34>
 8022ea6:	2b1d      	cmp	r3, #29
 8022ea8:	d001      	beq.n	8022eae <__sflush_r+0xb2>
 8022eaa:	2b16      	cmp	r3, #22
 8022eac:	d101      	bne.n	8022eb2 <__sflush_r+0xb6>
 8022eae:	602f      	str	r7, [r5, #0]
 8022eb0:	e7b1      	b.n	8022e16 <__sflush_r+0x1a>
 8022eb2:	89a3      	ldrh	r3, [r4, #12]
 8022eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022eb8:	81a3      	strh	r3, [r4, #12]
 8022eba:	e7ad      	b.n	8022e18 <__sflush_r+0x1c>
 8022ebc:	690f      	ldr	r7, [r1, #16]
 8022ebe:	2f00      	cmp	r7, #0
 8022ec0:	d0a9      	beq.n	8022e16 <__sflush_r+0x1a>
 8022ec2:	0793      	lsls	r3, r2, #30
 8022ec4:	680e      	ldr	r6, [r1, #0]
 8022ec6:	bf08      	it	eq
 8022ec8:	694b      	ldreq	r3, [r1, #20]
 8022eca:	600f      	str	r7, [r1, #0]
 8022ecc:	bf18      	it	ne
 8022ece:	2300      	movne	r3, #0
 8022ed0:	eba6 0807 	sub.w	r8, r6, r7
 8022ed4:	608b      	str	r3, [r1, #8]
 8022ed6:	f1b8 0f00 	cmp.w	r8, #0
 8022eda:	dd9c      	ble.n	8022e16 <__sflush_r+0x1a>
 8022edc:	6a21      	ldr	r1, [r4, #32]
 8022ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022ee0:	4643      	mov	r3, r8
 8022ee2:	463a      	mov	r2, r7
 8022ee4:	4628      	mov	r0, r5
 8022ee6:	47b0      	blx	r6
 8022ee8:	2800      	cmp	r0, #0
 8022eea:	dc06      	bgt.n	8022efa <__sflush_r+0xfe>
 8022eec:	89a3      	ldrh	r3, [r4, #12]
 8022eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ef2:	81a3      	strh	r3, [r4, #12]
 8022ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ef8:	e78e      	b.n	8022e18 <__sflush_r+0x1c>
 8022efa:	4407      	add	r7, r0
 8022efc:	eba8 0800 	sub.w	r8, r8, r0
 8022f00:	e7e9      	b.n	8022ed6 <__sflush_r+0xda>
 8022f02:	bf00      	nop
 8022f04:	20400001 	.word	0x20400001

08022f08 <_fflush_r>:
 8022f08:	b538      	push	{r3, r4, r5, lr}
 8022f0a:	690b      	ldr	r3, [r1, #16]
 8022f0c:	4605      	mov	r5, r0
 8022f0e:	460c      	mov	r4, r1
 8022f10:	b913      	cbnz	r3, 8022f18 <_fflush_r+0x10>
 8022f12:	2500      	movs	r5, #0
 8022f14:	4628      	mov	r0, r5
 8022f16:	bd38      	pop	{r3, r4, r5, pc}
 8022f18:	b118      	cbz	r0, 8022f22 <_fflush_r+0x1a>
 8022f1a:	6983      	ldr	r3, [r0, #24]
 8022f1c:	b90b      	cbnz	r3, 8022f22 <_fflush_r+0x1a>
 8022f1e:	f000 f887 	bl	8023030 <__sinit>
 8022f22:	4b14      	ldr	r3, [pc, #80]	; (8022f74 <_fflush_r+0x6c>)
 8022f24:	429c      	cmp	r4, r3
 8022f26:	d11b      	bne.n	8022f60 <_fflush_r+0x58>
 8022f28:	686c      	ldr	r4, [r5, #4]
 8022f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f2e:	2b00      	cmp	r3, #0
 8022f30:	d0ef      	beq.n	8022f12 <_fflush_r+0xa>
 8022f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022f34:	07d0      	lsls	r0, r2, #31
 8022f36:	d404      	bmi.n	8022f42 <_fflush_r+0x3a>
 8022f38:	0599      	lsls	r1, r3, #22
 8022f3a:	d402      	bmi.n	8022f42 <_fflush_r+0x3a>
 8022f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022f3e:	f000 f927 	bl	8023190 <__retarget_lock_acquire_recursive>
 8022f42:	4628      	mov	r0, r5
 8022f44:	4621      	mov	r1, r4
 8022f46:	f7ff ff59 	bl	8022dfc <__sflush_r>
 8022f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022f4c:	07da      	lsls	r2, r3, #31
 8022f4e:	4605      	mov	r5, r0
 8022f50:	d4e0      	bmi.n	8022f14 <_fflush_r+0xc>
 8022f52:	89a3      	ldrh	r3, [r4, #12]
 8022f54:	059b      	lsls	r3, r3, #22
 8022f56:	d4dd      	bmi.n	8022f14 <_fflush_r+0xc>
 8022f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022f5a:	f000 f91a 	bl	8023192 <__retarget_lock_release_recursive>
 8022f5e:	e7d9      	b.n	8022f14 <_fflush_r+0xc>
 8022f60:	4b05      	ldr	r3, [pc, #20]	; (8022f78 <_fflush_r+0x70>)
 8022f62:	429c      	cmp	r4, r3
 8022f64:	d101      	bne.n	8022f6a <_fflush_r+0x62>
 8022f66:	68ac      	ldr	r4, [r5, #8]
 8022f68:	e7df      	b.n	8022f2a <_fflush_r+0x22>
 8022f6a:	4b04      	ldr	r3, [pc, #16]	; (8022f7c <_fflush_r+0x74>)
 8022f6c:	429c      	cmp	r4, r3
 8022f6e:	bf08      	it	eq
 8022f70:	68ec      	ldreq	r4, [r5, #12]
 8022f72:	e7da      	b.n	8022f2a <_fflush_r+0x22>
 8022f74:	08025c14 	.word	0x08025c14
 8022f78:	08025c34 	.word	0x08025c34
 8022f7c:	08025bf4 	.word	0x08025bf4

08022f80 <std>:
 8022f80:	2300      	movs	r3, #0
 8022f82:	b510      	push	{r4, lr}
 8022f84:	4604      	mov	r4, r0
 8022f86:	e9c0 3300 	strd	r3, r3, [r0]
 8022f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022f8e:	6083      	str	r3, [r0, #8]
 8022f90:	8181      	strh	r1, [r0, #12]
 8022f92:	6643      	str	r3, [r0, #100]	; 0x64
 8022f94:	81c2      	strh	r2, [r0, #14]
 8022f96:	6183      	str	r3, [r0, #24]
 8022f98:	4619      	mov	r1, r3
 8022f9a:	2208      	movs	r2, #8
 8022f9c:	305c      	adds	r0, #92	; 0x5c
 8022f9e:	f7fb ff5d 	bl	801ee5c <memset>
 8022fa2:	4b05      	ldr	r3, [pc, #20]	; (8022fb8 <std+0x38>)
 8022fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8022fa6:	4b05      	ldr	r3, [pc, #20]	; (8022fbc <std+0x3c>)
 8022fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8022faa:	4b05      	ldr	r3, [pc, #20]	; (8022fc0 <std+0x40>)
 8022fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022fae:	4b05      	ldr	r3, [pc, #20]	; (8022fc4 <std+0x44>)
 8022fb0:	6224      	str	r4, [r4, #32]
 8022fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8022fb4:	bd10      	pop	{r4, pc}
 8022fb6:	bf00      	nop
 8022fb8:	0801fe15 	.word	0x0801fe15
 8022fbc:	0801fe37 	.word	0x0801fe37
 8022fc0:	0801fe6f 	.word	0x0801fe6f
 8022fc4:	0801fe93 	.word	0x0801fe93

08022fc8 <_cleanup_r>:
 8022fc8:	4901      	ldr	r1, [pc, #4]	; (8022fd0 <_cleanup_r+0x8>)
 8022fca:	f000 b8c1 	b.w	8023150 <_fwalk_reent>
 8022fce:	bf00      	nop
 8022fd0:	08022f09 	.word	0x08022f09

08022fd4 <__sfmoreglue>:
 8022fd4:	b570      	push	{r4, r5, r6, lr}
 8022fd6:	1e4a      	subs	r2, r1, #1
 8022fd8:	2568      	movs	r5, #104	; 0x68
 8022fda:	4355      	muls	r5, r2
 8022fdc:	460e      	mov	r6, r1
 8022fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022fe2:	f7fb ff93 	bl	801ef0c <_malloc_r>
 8022fe6:	4604      	mov	r4, r0
 8022fe8:	b140      	cbz	r0, 8022ffc <__sfmoreglue+0x28>
 8022fea:	2100      	movs	r1, #0
 8022fec:	e9c0 1600 	strd	r1, r6, [r0]
 8022ff0:	300c      	adds	r0, #12
 8022ff2:	60a0      	str	r0, [r4, #8]
 8022ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022ff8:	f7fb ff30 	bl	801ee5c <memset>
 8022ffc:	4620      	mov	r0, r4
 8022ffe:	bd70      	pop	{r4, r5, r6, pc}

08023000 <__sfp_lock_acquire>:
 8023000:	4801      	ldr	r0, [pc, #4]	; (8023008 <__sfp_lock_acquire+0x8>)
 8023002:	f000 b8c5 	b.w	8023190 <__retarget_lock_acquire_recursive>
 8023006:	bf00      	nop
 8023008:	2000a958 	.word	0x2000a958

0802300c <__sfp_lock_release>:
 802300c:	4801      	ldr	r0, [pc, #4]	; (8023014 <__sfp_lock_release+0x8>)
 802300e:	f000 b8c0 	b.w	8023192 <__retarget_lock_release_recursive>
 8023012:	bf00      	nop
 8023014:	2000a958 	.word	0x2000a958

08023018 <__sinit_lock_acquire>:
 8023018:	4801      	ldr	r0, [pc, #4]	; (8023020 <__sinit_lock_acquire+0x8>)
 802301a:	f000 b8b9 	b.w	8023190 <__retarget_lock_acquire_recursive>
 802301e:	bf00      	nop
 8023020:	2000a953 	.word	0x2000a953

08023024 <__sinit_lock_release>:
 8023024:	4801      	ldr	r0, [pc, #4]	; (802302c <__sinit_lock_release+0x8>)
 8023026:	f000 b8b4 	b.w	8023192 <__retarget_lock_release_recursive>
 802302a:	bf00      	nop
 802302c:	2000a953 	.word	0x2000a953

08023030 <__sinit>:
 8023030:	b510      	push	{r4, lr}
 8023032:	4604      	mov	r4, r0
 8023034:	f7ff fff0 	bl	8023018 <__sinit_lock_acquire>
 8023038:	69a3      	ldr	r3, [r4, #24]
 802303a:	b11b      	cbz	r3, 8023044 <__sinit+0x14>
 802303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023040:	f7ff bff0 	b.w	8023024 <__sinit_lock_release>
 8023044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023048:	6523      	str	r3, [r4, #80]	; 0x50
 802304a:	4b13      	ldr	r3, [pc, #76]	; (8023098 <__sinit+0x68>)
 802304c:	4a13      	ldr	r2, [pc, #76]	; (802309c <__sinit+0x6c>)
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	62a2      	str	r2, [r4, #40]	; 0x28
 8023052:	42a3      	cmp	r3, r4
 8023054:	bf04      	itt	eq
 8023056:	2301      	moveq	r3, #1
 8023058:	61a3      	streq	r3, [r4, #24]
 802305a:	4620      	mov	r0, r4
 802305c:	f000 f820 	bl	80230a0 <__sfp>
 8023060:	6060      	str	r0, [r4, #4]
 8023062:	4620      	mov	r0, r4
 8023064:	f000 f81c 	bl	80230a0 <__sfp>
 8023068:	60a0      	str	r0, [r4, #8]
 802306a:	4620      	mov	r0, r4
 802306c:	f000 f818 	bl	80230a0 <__sfp>
 8023070:	2200      	movs	r2, #0
 8023072:	60e0      	str	r0, [r4, #12]
 8023074:	2104      	movs	r1, #4
 8023076:	6860      	ldr	r0, [r4, #4]
 8023078:	f7ff ff82 	bl	8022f80 <std>
 802307c:	68a0      	ldr	r0, [r4, #8]
 802307e:	2201      	movs	r2, #1
 8023080:	2109      	movs	r1, #9
 8023082:	f7ff ff7d 	bl	8022f80 <std>
 8023086:	68e0      	ldr	r0, [r4, #12]
 8023088:	2202      	movs	r2, #2
 802308a:	2112      	movs	r1, #18
 802308c:	f7ff ff78 	bl	8022f80 <std>
 8023090:	2301      	movs	r3, #1
 8023092:	61a3      	str	r3, [r4, #24]
 8023094:	e7d2      	b.n	802303c <__sinit+0xc>
 8023096:	bf00      	nop
 8023098:	080257a0 	.word	0x080257a0
 802309c:	08022fc9 	.word	0x08022fc9

080230a0 <__sfp>:
 80230a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230a2:	4607      	mov	r7, r0
 80230a4:	f7ff ffac 	bl	8023000 <__sfp_lock_acquire>
 80230a8:	4b1e      	ldr	r3, [pc, #120]	; (8023124 <__sfp+0x84>)
 80230aa:	681e      	ldr	r6, [r3, #0]
 80230ac:	69b3      	ldr	r3, [r6, #24]
 80230ae:	b913      	cbnz	r3, 80230b6 <__sfp+0x16>
 80230b0:	4630      	mov	r0, r6
 80230b2:	f7ff ffbd 	bl	8023030 <__sinit>
 80230b6:	3648      	adds	r6, #72	; 0x48
 80230b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80230bc:	3b01      	subs	r3, #1
 80230be:	d503      	bpl.n	80230c8 <__sfp+0x28>
 80230c0:	6833      	ldr	r3, [r6, #0]
 80230c2:	b30b      	cbz	r3, 8023108 <__sfp+0x68>
 80230c4:	6836      	ldr	r6, [r6, #0]
 80230c6:	e7f7      	b.n	80230b8 <__sfp+0x18>
 80230c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80230cc:	b9d5      	cbnz	r5, 8023104 <__sfp+0x64>
 80230ce:	4b16      	ldr	r3, [pc, #88]	; (8023128 <__sfp+0x88>)
 80230d0:	60e3      	str	r3, [r4, #12]
 80230d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80230d6:	6665      	str	r5, [r4, #100]	; 0x64
 80230d8:	f000 f859 	bl	802318e <__retarget_lock_init_recursive>
 80230dc:	f7ff ff96 	bl	802300c <__sfp_lock_release>
 80230e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80230e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80230e8:	6025      	str	r5, [r4, #0]
 80230ea:	61a5      	str	r5, [r4, #24]
 80230ec:	2208      	movs	r2, #8
 80230ee:	4629      	mov	r1, r5
 80230f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80230f4:	f7fb feb2 	bl	801ee5c <memset>
 80230f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80230fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023100:	4620      	mov	r0, r4
 8023102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023104:	3468      	adds	r4, #104	; 0x68
 8023106:	e7d9      	b.n	80230bc <__sfp+0x1c>
 8023108:	2104      	movs	r1, #4
 802310a:	4638      	mov	r0, r7
 802310c:	f7ff ff62 	bl	8022fd4 <__sfmoreglue>
 8023110:	4604      	mov	r4, r0
 8023112:	6030      	str	r0, [r6, #0]
 8023114:	2800      	cmp	r0, #0
 8023116:	d1d5      	bne.n	80230c4 <__sfp+0x24>
 8023118:	f7ff ff78 	bl	802300c <__sfp_lock_release>
 802311c:	230c      	movs	r3, #12
 802311e:	603b      	str	r3, [r7, #0]
 8023120:	e7ee      	b.n	8023100 <__sfp+0x60>
 8023122:	bf00      	nop
 8023124:	080257a0 	.word	0x080257a0
 8023128:	ffff0001 	.word	0xffff0001

0802312c <fiprintf>:
 802312c:	b40e      	push	{r1, r2, r3}
 802312e:	b503      	push	{r0, r1, lr}
 8023130:	4601      	mov	r1, r0
 8023132:	ab03      	add	r3, sp, #12
 8023134:	4805      	ldr	r0, [pc, #20]	; (802314c <fiprintf+0x20>)
 8023136:	f853 2b04 	ldr.w	r2, [r3], #4
 802313a:	6800      	ldr	r0, [r0, #0]
 802313c:	9301      	str	r3, [sp, #4]
 802313e:	f000 f875 	bl	802322c <_vfiprintf_r>
 8023142:	b002      	add	sp, #8
 8023144:	f85d eb04 	ldr.w	lr, [sp], #4
 8023148:	b003      	add	sp, #12
 802314a:	4770      	bx	lr
 802314c:	200000c4 	.word	0x200000c4

08023150 <_fwalk_reent>:
 8023150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023154:	4606      	mov	r6, r0
 8023156:	4688      	mov	r8, r1
 8023158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802315c:	2700      	movs	r7, #0
 802315e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023162:	f1b9 0901 	subs.w	r9, r9, #1
 8023166:	d505      	bpl.n	8023174 <_fwalk_reent+0x24>
 8023168:	6824      	ldr	r4, [r4, #0]
 802316a:	2c00      	cmp	r4, #0
 802316c:	d1f7      	bne.n	802315e <_fwalk_reent+0xe>
 802316e:	4638      	mov	r0, r7
 8023170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023174:	89ab      	ldrh	r3, [r5, #12]
 8023176:	2b01      	cmp	r3, #1
 8023178:	d907      	bls.n	802318a <_fwalk_reent+0x3a>
 802317a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802317e:	3301      	adds	r3, #1
 8023180:	d003      	beq.n	802318a <_fwalk_reent+0x3a>
 8023182:	4629      	mov	r1, r5
 8023184:	4630      	mov	r0, r6
 8023186:	47c0      	blx	r8
 8023188:	4307      	orrs	r7, r0
 802318a:	3568      	adds	r5, #104	; 0x68
 802318c:	e7e9      	b.n	8023162 <_fwalk_reent+0x12>

0802318e <__retarget_lock_init_recursive>:
 802318e:	4770      	bx	lr

08023190 <__retarget_lock_acquire_recursive>:
 8023190:	4770      	bx	lr

08023192 <__retarget_lock_release_recursive>:
 8023192:	4770      	bx	lr

08023194 <memmove>:
 8023194:	4288      	cmp	r0, r1
 8023196:	b510      	push	{r4, lr}
 8023198:	eb01 0402 	add.w	r4, r1, r2
 802319c:	d902      	bls.n	80231a4 <memmove+0x10>
 802319e:	4284      	cmp	r4, r0
 80231a0:	4623      	mov	r3, r4
 80231a2:	d807      	bhi.n	80231b4 <memmove+0x20>
 80231a4:	1e43      	subs	r3, r0, #1
 80231a6:	42a1      	cmp	r1, r4
 80231a8:	d008      	beq.n	80231bc <memmove+0x28>
 80231aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80231ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80231b2:	e7f8      	b.n	80231a6 <memmove+0x12>
 80231b4:	4402      	add	r2, r0
 80231b6:	4601      	mov	r1, r0
 80231b8:	428a      	cmp	r2, r1
 80231ba:	d100      	bne.n	80231be <memmove+0x2a>
 80231bc:	bd10      	pop	{r4, pc}
 80231be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80231c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80231c6:	e7f7      	b.n	80231b8 <memmove+0x24>

080231c8 <_malloc_usable_size_r>:
 80231c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80231cc:	1f18      	subs	r0, r3, #4
 80231ce:	2b00      	cmp	r3, #0
 80231d0:	bfbc      	itt	lt
 80231d2:	580b      	ldrlt	r3, [r1, r0]
 80231d4:	18c0      	addlt	r0, r0, r3
 80231d6:	4770      	bx	lr

080231d8 <__sfputc_r>:
 80231d8:	6893      	ldr	r3, [r2, #8]
 80231da:	3b01      	subs	r3, #1
 80231dc:	2b00      	cmp	r3, #0
 80231de:	b410      	push	{r4}
 80231e0:	6093      	str	r3, [r2, #8]
 80231e2:	da08      	bge.n	80231f6 <__sfputc_r+0x1e>
 80231e4:	6994      	ldr	r4, [r2, #24]
 80231e6:	42a3      	cmp	r3, r4
 80231e8:	db01      	blt.n	80231ee <__sfputc_r+0x16>
 80231ea:	290a      	cmp	r1, #10
 80231ec:	d103      	bne.n	80231f6 <__sfputc_r+0x1e>
 80231ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231f2:	f000 b94b 	b.w	802348c <__swbuf_r>
 80231f6:	6813      	ldr	r3, [r2, #0]
 80231f8:	1c58      	adds	r0, r3, #1
 80231fa:	6010      	str	r0, [r2, #0]
 80231fc:	7019      	strb	r1, [r3, #0]
 80231fe:	4608      	mov	r0, r1
 8023200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023204:	4770      	bx	lr

08023206 <__sfputs_r>:
 8023206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023208:	4606      	mov	r6, r0
 802320a:	460f      	mov	r7, r1
 802320c:	4614      	mov	r4, r2
 802320e:	18d5      	adds	r5, r2, r3
 8023210:	42ac      	cmp	r4, r5
 8023212:	d101      	bne.n	8023218 <__sfputs_r+0x12>
 8023214:	2000      	movs	r0, #0
 8023216:	e007      	b.n	8023228 <__sfputs_r+0x22>
 8023218:	f814 1b01 	ldrb.w	r1, [r4], #1
 802321c:	463a      	mov	r2, r7
 802321e:	4630      	mov	r0, r6
 8023220:	f7ff ffda 	bl	80231d8 <__sfputc_r>
 8023224:	1c43      	adds	r3, r0, #1
 8023226:	d1f3      	bne.n	8023210 <__sfputs_r+0xa>
 8023228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802322c <_vfiprintf_r>:
 802322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023230:	460d      	mov	r5, r1
 8023232:	b09d      	sub	sp, #116	; 0x74
 8023234:	4614      	mov	r4, r2
 8023236:	4698      	mov	r8, r3
 8023238:	4606      	mov	r6, r0
 802323a:	b118      	cbz	r0, 8023244 <_vfiprintf_r+0x18>
 802323c:	6983      	ldr	r3, [r0, #24]
 802323e:	b90b      	cbnz	r3, 8023244 <_vfiprintf_r+0x18>
 8023240:	f7ff fef6 	bl	8023030 <__sinit>
 8023244:	4b89      	ldr	r3, [pc, #548]	; (802346c <_vfiprintf_r+0x240>)
 8023246:	429d      	cmp	r5, r3
 8023248:	d11b      	bne.n	8023282 <_vfiprintf_r+0x56>
 802324a:	6875      	ldr	r5, [r6, #4]
 802324c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802324e:	07d9      	lsls	r1, r3, #31
 8023250:	d405      	bmi.n	802325e <_vfiprintf_r+0x32>
 8023252:	89ab      	ldrh	r3, [r5, #12]
 8023254:	059a      	lsls	r2, r3, #22
 8023256:	d402      	bmi.n	802325e <_vfiprintf_r+0x32>
 8023258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802325a:	f7ff ff99 	bl	8023190 <__retarget_lock_acquire_recursive>
 802325e:	89ab      	ldrh	r3, [r5, #12]
 8023260:	071b      	lsls	r3, r3, #28
 8023262:	d501      	bpl.n	8023268 <_vfiprintf_r+0x3c>
 8023264:	692b      	ldr	r3, [r5, #16]
 8023266:	b9eb      	cbnz	r3, 80232a4 <_vfiprintf_r+0x78>
 8023268:	4629      	mov	r1, r5
 802326a:	4630      	mov	r0, r6
 802326c:	f000 f960 	bl	8023530 <__swsetup_r>
 8023270:	b1c0      	cbz	r0, 80232a4 <_vfiprintf_r+0x78>
 8023272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023274:	07dc      	lsls	r4, r3, #31
 8023276:	d50e      	bpl.n	8023296 <_vfiprintf_r+0x6a>
 8023278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802327c:	b01d      	add	sp, #116	; 0x74
 802327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023282:	4b7b      	ldr	r3, [pc, #492]	; (8023470 <_vfiprintf_r+0x244>)
 8023284:	429d      	cmp	r5, r3
 8023286:	d101      	bne.n	802328c <_vfiprintf_r+0x60>
 8023288:	68b5      	ldr	r5, [r6, #8]
 802328a:	e7df      	b.n	802324c <_vfiprintf_r+0x20>
 802328c:	4b79      	ldr	r3, [pc, #484]	; (8023474 <_vfiprintf_r+0x248>)
 802328e:	429d      	cmp	r5, r3
 8023290:	bf08      	it	eq
 8023292:	68f5      	ldreq	r5, [r6, #12]
 8023294:	e7da      	b.n	802324c <_vfiprintf_r+0x20>
 8023296:	89ab      	ldrh	r3, [r5, #12]
 8023298:	0598      	lsls	r0, r3, #22
 802329a:	d4ed      	bmi.n	8023278 <_vfiprintf_r+0x4c>
 802329c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802329e:	f7ff ff78 	bl	8023192 <__retarget_lock_release_recursive>
 80232a2:	e7e9      	b.n	8023278 <_vfiprintf_r+0x4c>
 80232a4:	2300      	movs	r3, #0
 80232a6:	9309      	str	r3, [sp, #36]	; 0x24
 80232a8:	2320      	movs	r3, #32
 80232aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80232b2:	2330      	movs	r3, #48	; 0x30
 80232b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023478 <_vfiprintf_r+0x24c>
 80232b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232bc:	f04f 0901 	mov.w	r9, #1
 80232c0:	4623      	mov	r3, r4
 80232c2:	469a      	mov	sl, r3
 80232c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80232c8:	b10a      	cbz	r2, 80232ce <_vfiprintf_r+0xa2>
 80232ca:	2a25      	cmp	r2, #37	; 0x25
 80232cc:	d1f9      	bne.n	80232c2 <_vfiprintf_r+0x96>
 80232ce:	ebba 0b04 	subs.w	fp, sl, r4
 80232d2:	d00b      	beq.n	80232ec <_vfiprintf_r+0xc0>
 80232d4:	465b      	mov	r3, fp
 80232d6:	4622      	mov	r2, r4
 80232d8:	4629      	mov	r1, r5
 80232da:	4630      	mov	r0, r6
 80232dc:	f7ff ff93 	bl	8023206 <__sfputs_r>
 80232e0:	3001      	adds	r0, #1
 80232e2:	f000 80aa 	beq.w	802343a <_vfiprintf_r+0x20e>
 80232e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232e8:	445a      	add	r2, fp
 80232ea:	9209      	str	r2, [sp, #36]	; 0x24
 80232ec:	f89a 3000 	ldrb.w	r3, [sl]
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	f000 80a2 	beq.w	802343a <_vfiprintf_r+0x20e>
 80232f6:	2300      	movs	r3, #0
 80232f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80232fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023300:	f10a 0a01 	add.w	sl, sl, #1
 8023304:	9304      	str	r3, [sp, #16]
 8023306:	9307      	str	r3, [sp, #28]
 8023308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802330c:	931a      	str	r3, [sp, #104]	; 0x68
 802330e:	4654      	mov	r4, sl
 8023310:	2205      	movs	r2, #5
 8023312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023316:	4858      	ldr	r0, [pc, #352]	; (8023478 <_vfiprintf_r+0x24c>)
 8023318:	f7dc ff62 	bl	80001e0 <memchr>
 802331c:	9a04      	ldr	r2, [sp, #16]
 802331e:	b9d8      	cbnz	r0, 8023358 <_vfiprintf_r+0x12c>
 8023320:	06d1      	lsls	r1, r2, #27
 8023322:	bf44      	itt	mi
 8023324:	2320      	movmi	r3, #32
 8023326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802332a:	0713      	lsls	r3, r2, #28
 802332c:	bf44      	itt	mi
 802332e:	232b      	movmi	r3, #43	; 0x2b
 8023330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023334:	f89a 3000 	ldrb.w	r3, [sl]
 8023338:	2b2a      	cmp	r3, #42	; 0x2a
 802333a:	d015      	beq.n	8023368 <_vfiprintf_r+0x13c>
 802333c:	9a07      	ldr	r2, [sp, #28]
 802333e:	4654      	mov	r4, sl
 8023340:	2000      	movs	r0, #0
 8023342:	f04f 0c0a 	mov.w	ip, #10
 8023346:	4621      	mov	r1, r4
 8023348:	f811 3b01 	ldrb.w	r3, [r1], #1
 802334c:	3b30      	subs	r3, #48	; 0x30
 802334e:	2b09      	cmp	r3, #9
 8023350:	d94e      	bls.n	80233f0 <_vfiprintf_r+0x1c4>
 8023352:	b1b0      	cbz	r0, 8023382 <_vfiprintf_r+0x156>
 8023354:	9207      	str	r2, [sp, #28]
 8023356:	e014      	b.n	8023382 <_vfiprintf_r+0x156>
 8023358:	eba0 0308 	sub.w	r3, r0, r8
 802335c:	fa09 f303 	lsl.w	r3, r9, r3
 8023360:	4313      	orrs	r3, r2
 8023362:	9304      	str	r3, [sp, #16]
 8023364:	46a2      	mov	sl, r4
 8023366:	e7d2      	b.n	802330e <_vfiprintf_r+0xe2>
 8023368:	9b03      	ldr	r3, [sp, #12]
 802336a:	1d19      	adds	r1, r3, #4
 802336c:	681b      	ldr	r3, [r3, #0]
 802336e:	9103      	str	r1, [sp, #12]
 8023370:	2b00      	cmp	r3, #0
 8023372:	bfbb      	ittet	lt
 8023374:	425b      	neglt	r3, r3
 8023376:	f042 0202 	orrlt.w	r2, r2, #2
 802337a:	9307      	strge	r3, [sp, #28]
 802337c:	9307      	strlt	r3, [sp, #28]
 802337e:	bfb8      	it	lt
 8023380:	9204      	strlt	r2, [sp, #16]
 8023382:	7823      	ldrb	r3, [r4, #0]
 8023384:	2b2e      	cmp	r3, #46	; 0x2e
 8023386:	d10c      	bne.n	80233a2 <_vfiprintf_r+0x176>
 8023388:	7863      	ldrb	r3, [r4, #1]
 802338a:	2b2a      	cmp	r3, #42	; 0x2a
 802338c:	d135      	bne.n	80233fa <_vfiprintf_r+0x1ce>
 802338e:	9b03      	ldr	r3, [sp, #12]
 8023390:	1d1a      	adds	r2, r3, #4
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	9203      	str	r2, [sp, #12]
 8023396:	2b00      	cmp	r3, #0
 8023398:	bfb8      	it	lt
 802339a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802339e:	3402      	adds	r4, #2
 80233a0:	9305      	str	r3, [sp, #20]
 80233a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023488 <_vfiprintf_r+0x25c>
 80233a6:	7821      	ldrb	r1, [r4, #0]
 80233a8:	2203      	movs	r2, #3
 80233aa:	4650      	mov	r0, sl
 80233ac:	f7dc ff18 	bl	80001e0 <memchr>
 80233b0:	b140      	cbz	r0, 80233c4 <_vfiprintf_r+0x198>
 80233b2:	2340      	movs	r3, #64	; 0x40
 80233b4:	eba0 000a 	sub.w	r0, r0, sl
 80233b8:	fa03 f000 	lsl.w	r0, r3, r0
 80233bc:	9b04      	ldr	r3, [sp, #16]
 80233be:	4303      	orrs	r3, r0
 80233c0:	3401      	adds	r4, #1
 80233c2:	9304      	str	r3, [sp, #16]
 80233c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233c8:	482c      	ldr	r0, [pc, #176]	; (802347c <_vfiprintf_r+0x250>)
 80233ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80233ce:	2206      	movs	r2, #6
 80233d0:	f7dc ff06 	bl	80001e0 <memchr>
 80233d4:	2800      	cmp	r0, #0
 80233d6:	d03f      	beq.n	8023458 <_vfiprintf_r+0x22c>
 80233d8:	4b29      	ldr	r3, [pc, #164]	; (8023480 <_vfiprintf_r+0x254>)
 80233da:	bb1b      	cbnz	r3, 8023424 <_vfiprintf_r+0x1f8>
 80233dc:	9b03      	ldr	r3, [sp, #12]
 80233de:	3307      	adds	r3, #7
 80233e0:	f023 0307 	bic.w	r3, r3, #7
 80233e4:	3308      	adds	r3, #8
 80233e6:	9303      	str	r3, [sp, #12]
 80233e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233ea:	443b      	add	r3, r7
 80233ec:	9309      	str	r3, [sp, #36]	; 0x24
 80233ee:	e767      	b.n	80232c0 <_vfiprintf_r+0x94>
 80233f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80233f4:	460c      	mov	r4, r1
 80233f6:	2001      	movs	r0, #1
 80233f8:	e7a5      	b.n	8023346 <_vfiprintf_r+0x11a>
 80233fa:	2300      	movs	r3, #0
 80233fc:	3401      	adds	r4, #1
 80233fe:	9305      	str	r3, [sp, #20]
 8023400:	4619      	mov	r1, r3
 8023402:	f04f 0c0a 	mov.w	ip, #10
 8023406:	4620      	mov	r0, r4
 8023408:	f810 2b01 	ldrb.w	r2, [r0], #1
 802340c:	3a30      	subs	r2, #48	; 0x30
 802340e:	2a09      	cmp	r2, #9
 8023410:	d903      	bls.n	802341a <_vfiprintf_r+0x1ee>
 8023412:	2b00      	cmp	r3, #0
 8023414:	d0c5      	beq.n	80233a2 <_vfiprintf_r+0x176>
 8023416:	9105      	str	r1, [sp, #20]
 8023418:	e7c3      	b.n	80233a2 <_vfiprintf_r+0x176>
 802341a:	fb0c 2101 	mla	r1, ip, r1, r2
 802341e:	4604      	mov	r4, r0
 8023420:	2301      	movs	r3, #1
 8023422:	e7f0      	b.n	8023406 <_vfiprintf_r+0x1da>
 8023424:	ab03      	add	r3, sp, #12
 8023426:	9300      	str	r3, [sp, #0]
 8023428:	462a      	mov	r2, r5
 802342a:	4b16      	ldr	r3, [pc, #88]	; (8023484 <_vfiprintf_r+0x258>)
 802342c:	a904      	add	r1, sp, #16
 802342e:	4630      	mov	r0, r6
 8023430:	f7fb fe66 	bl	801f100 <_printf_float>
 8023434:	4607      	mov	r7, r0
 8023436:	1c78      	adds	r0, r7, #1
 8023438:	d1d6      	bne.n	80233e8 <_vfiprintf_r+0x1bc>
 802343a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802343c:	07d9      	lsls	r1, r3, #31
 802343e:	d405      	bmi.n	802344c <_vfiprintf_r+0x220>
 8023440:	89ab      	ldrh	r3, [r5, #12]
 8023442:	059a      	lsls	r2, r3, #22
 8023444:	d402      	bmi.n	802344c <_vfiprintf_r+0x220>
 8023446:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023448:	f7ff fea3 	bl	8023192 <__retarget_lock_release_recursive>
 802344c:	89ab      	ldrh	r3, [r5, #12]
 802344e:	065b      	lsls	r3, r3, #25
 8023450:	f53f af12 	bmi.w	8023278 <_vfiprintf_r+0x4c>
 8023454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023456:	e711      	b.n	802327c <_vfiprintf_r+0x50>
 8023458:	ab03      	add	r3, sp, #12
 802345a:	9300      	str	r3, [sp, #0]
 802345c:	462a      	mov	r2, r5
 802345e:	4b09      	ldr	r3, [pc, #36]	; (8023484 <_vfiprintf_r+0x258>)
 8023460:	a904      	add	r1, sp, #16
 8023462:	4630      	mov	r0, r6
 8023464:	f7fc f8f0 	bl	801f648 <_printf_i>
 8023468:	e7e4      	b.n	8023434 <_vfiprintf_r+0x208>
 802346a:	bf00      	nop
 802346c:	08025c14 	.word	0x08025c14
 8023470:	08025c34 	.word	0x08025c34
 8023474:	08025bf4 	.word	0x08025bf4
 8023478:	08025ba4 	.word	0x08025ba4
 802347c:	08025bae 	.word	0x08025bae
 8023480:	0801f101 	.word	0x0801f101
 8023484:	08023207 	.word	0x08023207
 8023488:	08025baa 	.word	0x08025baa

0802348c <__swbuf_r>:
 802348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802348e:	460e      	mov	r6, r1
 8023490:	4614      	mov	r4, r2
 8023492:	4605      	mov	r5, r0
 8023494:	b118      	cbz	r0, 802349e <__swbuf_r+0x12>
 8023496:	6983      	ldr	r3, [r0, #24]
 8023498:	b90b      	cbnz	r3, 802349e <__swbuf_r+0x12>
 802349a:	f7ff fdc9 	bl	8023030 <__sinit>
 802349e:	4b21      	ldr	r3, [pc, #132]	; (8023524 <__swbuf_r+0x98>)
 80234a0:	429c      	cmp	r4, r3
 80234a2:	d12b      	bne.n	80234fc <__swbuf_r+0x70>
 80234a4:	686c      	ldr	r4, [r5, #4]
 80234a6:	69a3      	ldr	r3, [r4, #24]
 80234a8:	60a3      	str	r3, [r4, #8]
 80234aa:	89a3      	ldrh	r3, [r4, #12]
 80234ac:	071a      	lsls	r2, r3, #28
 80234ae:	d52f      	bpl.n	8023510 <__swbuf_r+0x84>
 80234b0:	6923      	ldr	r3, [r4, #16]
 80234b2:	b36b      	cbz	r3, 8023510 <__swbuf_r+0x84>
 80234b4:	6923      	ldr	r3, [r4, #16]
 80234b6:	6820      	ldr	r0, [r4, #0]
 80234b8:	1ac0      	subs	r0, r0, r3
 80234ba:	6963      	ldr	r3, [r4, #20]
 80234bc:	b2f6      	uxtb	r6, r6
 80234be:	4283      	cmp	r3, r0
 80234c0:	4637      	mov	r7, r6
 80234c2:	dc04      	bgt.n	80234ce <__swbuf_r+0x42>
 80234c4:	4621      	mov	r1, r4
 80234c6:	4628      	mov	r0, r5
 80234c8:	f7ff fd1e 	bl	8022f08 <_fflush_r>
 80234cc:	bb30      	cbnz	r0, 802351c <__swbuf_r+0x90>
 80234ce:	68a3      	ldr	r3, [r4, #8]
 80234d0:	3b01      	subs	r3, #1
 80234d2:	60a3      	str	r3, [r4, #8]
 80234d4:	6823      	ldr	r3, [r4, #0]
 80234d6:	1c5a      	adds	r2, r3, #1
 80234d8:	6022      	str	r2, [r4, #0]
 80234da:	701e      	strb	r6, [r3, #0]
 80234dc:	6963      	ldr	r3, [r4, #20]
 80234de:	3001      	adds	r0, #1
 80234e0:	4283      	cmp	r3, r0
 80234e2:	d004      	beq.n	80234ee <__swbuf_r+0x62>
 80234e4:	89a3      	ldrh	r3, [r4, #12]
 80234e6:	07db      	lsls	r3, r3, #31
 80234e8:	d506      	bpl.n	80234f8 <__swbuf_r+0x6c>
 80234ea:	2e0a      	cmp	r6, #10
 80234ec:	d104      	bne.n	80234f8 <__swbuf_r+0x6c>
 80234ee:	4621      	mov	r1, r4
 80234f0:	4628      	mov	r0, r5
 80234f2:	f7ff fd09 	bl	8022f08 <_fflush_r>
 80234f6:	b988      	cbnz	r0, 802351c <__swbuf_r+0x90>
 80234f8:	4638      	mov	r0, r7
 80234fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80234fc:	4b0a      	ldr	r3, [pc, #40]	; (8023528 <__swbuf_r+0x9c>)
 80234fe:	429c      	cmp	r4, r3
 8023500:	d101      	bne.n	8023506 <__swbuf_r+0x7a>
 8023502:	68ac      	ldr	r4, [r5, #8]
 8023504:	e7cf      	b.n	80234a6 <__swbuf_r+0x1a>
 8023506:	4b09      	ldr	r3, [pc, #36]	; (802352c <__swbuf_r+0xa0>)
 8023508:	429c      	cmp	r4, r3
 802350a:	bf08      	it	eq
 802350c:	68ec      	ldreq	r4, [r5, #12]
 802350e:	e7ca      	b.n	80234a6 <__swbuf_r+0x1a>
 8023510:	4621      	mov	r1, r4
 8023512:	4628      	mov	r0, r5
 8023514:	f000 f80c 	bl	8023530 <__swsetup_r>
 8023518:	2800      	cmp	r0, #0
 802351a:	d0cb      	beq.n	80234b4 <__swbuf_r+0x28>
 802351c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023520:	e7ea      	b.n	80234f8 <__swbuf_r+0x6c>
 8023522:	bf00      	nop
 8023524:	08025c14 	.word	0x08025c14
 8023528:	08025c34 	.word	0x08025c34
 802352c:	08025bf4 	.word	0x08025bf4

08023530 <__swsetup_r>:
 8023530:	4b32      	ldr	r3, [pc, #200]	; (80235fc <__swsetup_r+0xcc>)
 8023532:	b570      	push	{r4, r5, r6, lr}
 8023534:	681d      	ldr	r5, [r3, #0]
 8023536:	4606      	mov	r6, r0
 8023538:	460c      	mov	r4, r1
 802353a:	b125      	cbz	r5, 8023546 <__swsetup_r+0x16>
 802353c:	69ab      	ldr	r3, [r5, #24]
 802353e:	b913      	cbnz	r3, 8023546 <__swsetup_r+0x16>
 8023540:	4628      	mov	r0, r5
 8023542:	f7ff fd75 	bl	8023030 <__sinit>
 8023546:	4b2e      	ldr	r3, [pc, #184]	; (8023600 <__swsetup_r+0xd0>)
 8023548:	429c      	cmp	r4, r3
 802354a:	d10f      	bne.n	802356c <__swsetup_r+0x3c>
 802354c:	686c      	ldr	r4, [r5, #4]
 802354e:	89a3      	ldrh	r3, [r4, #12]
 8023550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023554:	0719      	lsls	r1, r3, #28
 8023556:	d42c      	bmi.n	80235b2 <__swsetup_r+0x82>
 8023558:	06dd      	lsls	r5, r3, #27
 802355a:	d411      	bmi.n	8023580 <__swsetup_r+0x50>
 802355c:	2309      	movs	r3, #9
 802355e:	6033      	str	r3, [r6, #0]
 8023560:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023564:	81a3      	strh	r3, [r4, #12]
 8023566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802356a:	e03e      	b.n	80235ea <__swsetup_r+0xba>
 802356c:	4b25      	ldr	r3, [pc, #148]	; (8023604 <__swsetup_r+0xd4>)
 802356e:	429c      	cmp	r4, r3
 8023570:	d101      	bne.n	8023576 <__swsetup_r+0x46>
 8023572:	68ac      	ldr	r4, [r5, #8]
 8023574:	e7eb      	b.n	802354e <__swsetup_r+0x1e>
 8023576:	4b24      	ldr	r3, [pc, #144]	; (8023608 <__swsetup_r+0xd8>)
 8023578:	429c      	cmp	r4, r3
 802357a:	bf08      	it	eq
 802357c:	68ec      	ldreq	r4, [r5, #12]
 802357e:	e7e6      	b.n	802354e <__swsetup_r+0x1e>
 8023580:	0758      	lsls	r0, r3, #29
 8023582:	d512      	bpl.n	80235aa <__swsetup_r+0x7a>
 8023584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023586:	b141      	cbz	r1, 802359a <__swsetup_r+0x6a>
 8023588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802358c:	4299      	cmp	r1, r3
 802358e:	d002      	beq.n	8023596 <__swsetup_r+0x66>
 8023590:	4630      	mov	r0, r6
 8023592:	f7fb fc6b 	bl	801ee6c <_free_r>
 8023596:	2300      	movs	r3, #0
 8023598:	6363      	str	r3, [r4, #52]	; 0x34
 802359a:	89a3      	ldrh	r3, [r4, #12]
 802359c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80235a0:	81a3      	strh	r3, [r4, #12]
 80235a2:	2300      	movs	r3, #0
 80235a4:	6063      	str	r3, [r4, #4]
 80235a6:	6923      	ldr	r3, [r4, #16]
 80235a8:	6023      	str	r3, [r4, #0]
 80235aa:	89a3      	ldrh	r3, [r4, #12]
 80235ac:	f043 0308 	orr.w	r3, r3, #8
 80235b0:	81a3      	strh	r3, [r4, #12]
 80235b2:	6923      	ldr	r3, [r4, #16]
 80235b4:	b94b      	cbnz	r3, 80235ca <__swsetup_r+0x9a>
 80235b6:	89a3      	ldrh	r3, [r4, #12]
 80235b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80235bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80235c0:	d003      	beq.n	80235ca <__swsetup_r+0x9a>
 80235c2:	4621      	mov	r1, r4
 80235c4:	4630      	mov	r0, r6
 80235c6:	f000 f84d 	bl	8023664 <__smakebuf_r>
 80235ca:	89a0      	ldrh	r0, [r4, #12]
 80235cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80235d0:	f010 0301 	ands.w	r3, r0, #1
 80235d4:	d00a      	beq.n	80235ec <__swsetup_r+0xbc>
 80235d6:	2300      	movs	r3, #0
 80235d8:	60a3      	str	r3, [r4, #8]
 80235da:	6963      	ldr	r3, [r4, #20]
 80235dc:	425b      	negs	r3, r3
 80235de:	61a3      	str	r3, [r4, #24]
 80235e0:	6923      	ldr	r3, [r4, #16]
 80235e2:	b943      	cbnz	r3, 80235f6 <__swsetup_r+0xc6>
 80235e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80235e8:	d1ba      	bne.n	8023560 <__swsetup_r+0x30>
 80235ea:	bd70      	pop	{r4, r5, r6, pc}
 80235ec:	0781      	lsls	r1, r0, #30
 80235ee:	bf58      	it	pl
 80235f0:	6963      	ldrpl	r3, [r4, #20]
 80235f2:	60a3      	str	r3, [r4, #8]
 80235f4:	e7f4      	b.n	80235e0 <__swsetup_r+0xb0>
 80235f6:	2000      	movs	r0, #0
 80235f8:	e7f7      	b.n	80235ea <__swsetup_r+0xba>
 80235fa:	bf00      	nop
 80235fc:	200000c4 	.word	0x200000c4
 8023600:	08025c14 	.word	0x08025c14
 8023604:	08025c34 	.word	0x08025c34
 8023608:	08025bf4 	.word	0x08025bf4

0802360c <abort>:
 802360c:	b508      	push	{r3, lr}
 802360e:	2006      	movs	r0, #6
 8023610:	f000 f890 	bl	8023734 <raise>
 8023614:	2001      	movs	r0, #1
 8023616:	f7eb f9f7 	bl	800ea08 <_exit>

0802361a <__swhatbuf_r>:
 802361a:	b570      	push	{r4, r5, r6, lr}
 802361c:	460e      	mov	r6, r1
 802361e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023622:	2900      	cmp	r1, #0
 8023624:	b096      	sub	sp, #88	; 0x58
 8023626:	4614      	mov	r4, r2
 8023628:	461d      	mov	r5, r3
 802362a:	da07      	bge.n	802363c <__swhatbuf_r+0x22>
 802362c:	2300      	movs	r3, #0
 802362e:	602b      	str	r3, [r5, #0]
 8023630:	89b3      	ldrh	r3, [r6, #12]
 8023632:	061a      	lsls	r2, r3, #24
 8023634:	d410      	bmi.n	8023658 <__swhatbuf_r+0x3e>
 8023636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802363a:	e00e      	b.n	802365a <__swhatbuf_r+0x40>
 802363c:	466a      	mov	r2, sp
 802363e:	f000 f895 	bl	802376c <_fstat_r>
 8023642:	2800      	cmp	r0, #0
 8023644:	dbf2      	blt.n	802362c <__swhatbuf_r+0x12>
 8023646:	9a01      	ldr	r2, [sp, #4]
 8023648:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802364c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023650:	425a      	negs	r2, r3
 8023652:	415a      	adcs	r2, r3
 8023654:	602a      	str	r2, [r5, #0]
 8023656:	e7ee      	b.n	8023636 <__swhatbuf_r+0x1c>
 8023658:	2340      	movs	r3, #64	; 0x40
 802365a:	2000      	movs	r0, #0
 802365c:	6023      	str	r3, [r4, #0]
 802365e:	b016      	add	sp, #88	; 0x58
 8023660:	bd70      	pop	{r4, r5, r6, pc}
	...

08023664 <__smakebuf_r>:
 8023664:	898b      	ldrh	r3, [r1, #12]
 8023666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023668:	079d      	lsls	r5, r3, #30
 802366a:	4606      	mov	r6, r0
 802366c:	460c      	mov	r4, r1
 802366e:	d507      	bpl.n	8023680 <__smakebuf_r+0x1c>
 8023670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023674:	6023      	str	r3, [r4, #0]
 8023676:	6123      	str	r3, [r4, #16]
 8023678:	2301      	movs	r3, #1
 802367a:	6163      	str	r3, [r4, #20]
 802367c:	b002      	add	sp, #8
 802367e:	bd70      	pop	{r4, r5, r6, pc}
 8023680:	ab01      	add	r3, sp, #4
 8023682:	466a      	mov	r2, sp
 8023684:	f7ff ffc9 	bl	802361a <__swhatbuf_r>
 8023688:	9900      	ldr	r1, [sp, #0]
 802368a:	4605      	mov	r5, r0
 802368c:	4630      	mov	r0, r6
 802368e:	f7fb fc3d 	bl	801ef0c <_malloc_r>
 8023692:	b948      	cbnz	r0, 80236a8 <__smakebuf_r+0x44>
 8023694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023698:	059a      	lsls	r2, r3, #22
 802369a:	d4ef      	bmi.n	802367c <__smakebuf_r+0x18>
 802369c:	f023 0303 	bic.w	r3, r3, #3
 80236a0:	f043 0302 	orr.w	r3, r3, #2
 80236a4:	81a3      	strh	r3, [r4, #12]
 80236a6:	e7e3      	b.n	8023670 <__smakebuf_r+0xc>
 80236a8:	4b0d      	ldr	r3, [pc, #52]	; (80236e0 <__smakebuf_r+0x7c>)
 80236aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80236ac:	89a3      	ldrh	r3, [r4, #12]
 80236ae:	6020      	str	r0, [r4, #0]
 80236b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80236b4:	81a3      	strh	r3, [r4, #12]
 80236b6:	9b00      	ldr	r3, [sp, #0]
 80236b8:	6163      	str	r3, [r4, #20]
 80236ba:	9b01      	ldr	r3, [sp, #4]
 80236bc:	6120      	str	r0, [r4, #16]
 80236be:	b15b      	cbz	r3, 80236d8 <__smakebuf_r+0x74>
 80236c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80236c4:	4630      	mov	r0, r6
 80236c6:	f000 f863 	bl	8023790 <_isatty_r>
 80236ca:	b128      	cbz	r0, 80236d8 <__smakebuf_r+0x74>
 80236cc:	89a3      	ldrh	r3, [r4, #12]
 80236ce:	f023 0303 	bic.w	r3, r3, #3
 80236d2:	f043 0301 	orr.w	r3, r3, #1
 80236d6:	81a3      	strh	r3, [r4, #12]
 80236d8:	89a0      	ldrh	r0, [r4, #12]
 80236da:	4305      	orrs	r5, r0
 80236dc:	81a5      	strh	r5, [r4, #12]
 80236de:	e7cd      	b.n	802367c <__smakebuf_r+0x18>
 80236e0:	08022fc9 	.word	0x08022fc9

080236e4 <_raise_r>:
 80236e4:	291f      	cmp	r1, #31
 80236e6:	b538      	push	{r3, r4, r5, lr}
 80236e8:	4604      	mov	r4, r0
 80236ea:	460d      	mov	r5, r1
 80236ec:	d904      	bls.n	80236f8 <_raise_r+0x14>
 80236ee:	2316      	movs	r3, #22
 80236f0:	6003      	str	r3, [r0, #0]
 80236f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80236f6:	bd38      	pop	{r3, r4, r5, pc}
 80236f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80236fa:	b112      	cbz	r2, 8023702 <_raise_r+0x1e>
 80236fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023700:	b94b      	cbnz	r3, 8023716 <_raise_r+0x32>
 8023702:	4620      	mov	r0, r4
 8023704:	f000 f830 	bl	8023768 <_getpid_r>
 8023708:	462a      	mov	r2, r5
 802370a:	4601      	mov	r1, r0
 802370c:	4620      	mov	r0, r4
 802370e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023712:	f000 b817 	b.w	8023744 <_kill_r>
 8023716:	2b01      	cmp	r3, #1
 8023718:	d00a      	beq.n	8023730 <_raise_r+0x4c>
 802371a:	1c59      	adds	r1, r3, #1
 802371c:	d103      	bne.n	8023726 <_raise_r+0x42>
 802371e:	2316      	movs	r3, #22
 8023720:	6003      	str	r3, [r0, #0]
 8023722:	2001      	movs	r0, #1
 8023724:	e7e7      	b.n	80236f6 <_raise_r+0x12>
 8023726:	2400      	movs	r4, #0
 8023728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802372c:	4628      	mov	r0, r5
 802372e:	4798      	blx	r3
 8023730:	2000      	movs	r0, #0
 8023732:	e7e0      	b.n	80236f6 <_raise_r+0x12>

08023734 <raise>:
 8023734:	4b02      	ldr	r3, [pc, #8]	; (8023740 <raise+0xc>)
 8023736:	4601      	mov	r1, r0
 8023738:	6818      	ldr	r0, [r3, #0]
 802373a:	f7ff bfd3 	b.w	80236e4 <_raise_r>
 802373e:	bf00      	nop
 8023740:	200000c4 	.word	0x200000c4

08023744 <_kill_r>:
 8023744:	b538      	push	{r3, r4, r5, lr}
 8023746:	4d07      	ldr	r5, [pc, #28]	; (8023764 <_kill_r+0x20>)
 8023748:	2300      	movs	r3, #0
 802374a:	4604      	mov	r4, r0
 802374c:	4608      	mov	r0, r1
 802374e:	4611      	mov	r1, r2
 8023750:	602b      	str	r3, [r5, #0]
 8023752:	f7eb f949 	bl	800e9e8 <_kill>
 8023756:	1c43      	adds	r3, r0, #1
 8023758:	d102      	bne.n	8023760 <_kill_r+0x1c>
 802375a:	682b      	ldr	r3, [r5, #0]
 802375c:	b103      	cbz	r3, 8023760 <_kill_r+0x1c>
 802375e:	6023      	str	r3, [r4, #0]
 8023760:	bd38      	pop	{r3, r4, r5, pc}
 8023762:	bf00      	nop
 8023764:	2000a94c 	.word	0x2000a94c

08023768 <_getpid_r>:
 8023768:	f7eb b936 	b.w	800e9d8 <_getpid>

0802376c <_fstat_r>:
 802376c:	b538      	push	{r3, r4, r5, lr}
 802376e:	4d07      	ldr	r5, [pc, #28]	; (802378c <_fstat_r+0x20>)
 8023770:	2300      	movs	r3, #0
 8023772:	4604      	mov	r4, r0
 8023774:	4608      	mov	r0, r1
 8023776:	4611      	mov	r1, r2
 8023778:	602b      	str	r3, [r5, #0]
 802377a:	f7eb f994 	bl	800eaa6 <_fstat>
 802377e:	1c43      	adds	r3, r0, #1
 8023780:	d102      	bne.n	8023788 <_fstat_r+0x1c>
 8023782:	682b      	ldr	r3, [r5, #0]
 8023784:	b103      	cbz	r3, 8023788 <_fstat_r+0x1c>
 8023786:	6023      	str	r3, [r4, #0]
 8023788:	bd38      	pop	{r3, r4, r5, pc}
 802378a:	bf00      	nop
 802378c:	2000a94c 	.word	0x2000a94c

08023790 <_isatty_r>:
 8023790:	b538      	push	{r3, r4, r5, lr}
 8023792:	4d06      	ldr	r5, [pc, #24]	; (80237ac <_isatty_r+0x1c>)
 8023794:	2300      	movs	r3, #0
 8023796:	4604      	mov	r4, r0
 8023798:	4608      	mov	r0, r1
 802379a:	602b      	str	r3, [r5, #0]
 802379c:	f7eb f993 	bl	800eac6 <_isatty>
 80237a0:	1c43      	adds	r3, r0, #1
 80237a2:	d102      	bne.n	80237aa <_isatty_r+0x1a>
 80237a4:	682b      	ldr	r3, [r5, #0]
 80237a6:	b103      	cbz	r3, 80237aa <_isatty_r+0x1a>
 80237a8:	6023      	str	r3, [r4, #0]
 80237aa:	bd38      	pop	{r3, r4, r5, pc}
 80237ac:	2000a94c 	.word	0x2000a94c

080237b0 <atanf>:
 80237b0:	b538      	push	{r3, r4, r5, lr}
 80237b2:	ee10 5a10 	vmov	r5, s0
 80237b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80237ba:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80237be:	eef0 7a40 	vmov.f32	s15, s0
 80237c2:	db10      	blt.n	80237e6 <atanf+0x36>
 80237c4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80237c8:	dd04      	ble.n	80237d4 <atanf+0x24>
 80237ca:	ee70 7a00 	vadd.f32	s15, s0, s0
 80237ce:	eeb0 0a67 	vmov.f32	s0, s15
 80237d2:	bd38      	pop	{r3, r4, r5, pc}
 80237d4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 802390c <atanf+0x15c>
 80237d8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8023910 <atanf+0x160>
 80237dc:	2d00      	cmp	r5, #0
 80237de:	bfd8      	it	le
 80237e0:	eef0 7a40 	vmovle.f32	s15, s0
 80237e4:	e7f3      	b.n	80237ce <atanf+0x1e>
 80237e6:	4b4b      	ldr	r3, [pc, #300]	; (8023914 <atanf+0x164>)
 80237e8:	429c      	cmp	r4, r3
 80237ea:	dc10      	bgt.n	802380e <atanf+0x5e>
 80237ec:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80237f0:	da0a      	bge.n	8023808 <atanf+0x58>
 80237f2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8023918 <atanf+0x168>
 80237f6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80237fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80237fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8023802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023806:	dce2      	bgt.n	80237ce <atanf+0x1e>
 8023808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802380c:	e013      	b.n	8023836 <atanf+0x86>
 802380e:	f000 f8e3 	bl	80239d8 <fabsf>
 8023812:	4b42      	ldr	r3, [pc, #264]	; (802391c <atanf+0x16c>)
 8023814:	429c      	cmp	r4, r3
 8023816:	dc4f      	bgt.n	80238b8 <atanf+0x108>
 8023818:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 802381c:	429c      	cmp	r4, r3
 802381e:	dc41      	bgt.n	80238a4 <atanf+0xf4>
 8023820:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8023824:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023828:	eea0 7a27 	vfma.f32	s14, s0, s15
 802382c:	2300      	movs	r3, #0
 802382e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023832:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023836:	1c5a      	adds	r2, r3, #1
 8023838:	ee67 6aa7 	vmul.f32	s13, s15, s15
 802383c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8023920 <atanf+0x170>
 8023840:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8023924 <atanf+0x174>
 8023844:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8023928 <atanf+0x178>
 8023848:	ed9f 0a38 	vldr	s0, [pc, #224]	; 802392c <atanf+0x17c>
 802384c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8023850:	eea7 6a25 	vfma.f32	s12, s14, s11
 8023854:	eddf 5a36 	vldr	s11, [pc, #216]	; 8023930 <atanf+0x180>
 8023858:	eee6 5a07 	vfma.f32	s11, s12, s14
 802385c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8023934 <atanf+0x184>
 8023860:	eea5 6a87 	vfma.f32	s12, s11, s14
 8023864:	eddf 5a34 	vldr	s11, [pc, #208]	; 8023938 <atanf+0x188>
 8023868:	eee6 5a07 	vfma.f32	s11, s12, s14
 802386c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 802393c <atanf+0x18c>
 8023870:	eea5 6a87 	vfma.f32	s12, s11, s14
 8023874:	eddf 5a32 	vldr	s11, [pc, #200]	; 8023940 <atanf+0x190>
 8023878:	eee7 5a05 	vfma.f32	s11, s14, s10
 802387c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8023944 <atanf+0x194>
 8023880:	eea5 5a87 	vfma.f32	s10, s11, s14
 8023884:	eddf 5a30 	vldr	s11, [pc, #192]	; 8023948 <atanf+0x198>
 8023888:	eee5 5a07 	vfma.f32	s11, s10, s14
 802388c:	eea5 0a87 	vfma.f32	s0, s11, s14
 8023890:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023894:	eea6 0a26 	vfma.f32	s0, s12, s13
 8023898:	ee27 0a80 	vmul.f32	s0, s15, s0
 802389c:	d121      	bne.n	80238e2 <atanf+0x132>
 802389e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80238a2:	e794      	b.n	80237ce <atanf+0x1e>
 80238a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80238a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80238ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 80238b0:	2301      	movs	r3, #1
 80238b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80238b6:	e7be      	b.n	8023836 <atanf+0x86>
 80238b8:	4b24      	ldr	r3, [pc, #144]	; (802394c <atanf+0x19c>)
 80238ba:	429c      	cmp	r4, r3
 80238bc:	dc0b      	bgt.n	80238d6 <atanf+0x126>
 80238be:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80238c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80238c6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80238ca:	2302      	movs	r3, #2
 80238cc:	ee70 6a67 	vsub.f32	s13, s0, s15
 80238d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80238d4:	e7af      	b.n	8023836 <atanf+0x86>
 80238d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80238da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80238de:	2303      	movs	r3, #3
 80238e0:	e7a9      	b.n	8023836 <atanf+0x86>
 80238e2:	4a1b      	ldr	r2, [pc, #108]	; (8023950 <atanf+0x1a0>)
 80238e4:	491b      	ldr	r1, [pc, #108]	; (8023954 <atanf+0x1a4>)
 80238e6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80238ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80238ee:	ed93 7a00 	vldr	s14, [r3]
 80238f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80238f6:	2d00      	cmp	r5, #0
 80238f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80238fc:	ed92 0a00 	vldr	s0, [r2]
 8023900:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023904:	bfb8      	it	lt
 8023906:	eef1 7a67 	vneglt.f32	s15, s15
 802390a:	e760      	b.n	80237ce <atanf+0x1e>
 802390c:	3fc90fdb 	.word	0x3fc90fdb
 8023910:	bfc90fdb 	.word	0xbfc90fdb
 8023914:	3edfffff 	.word	0x3edfffff
 8023918:	7149f2ca 	.word	0x7149f2ca
 802391c:	3f97ffff 	.word	0x3f97ffff
 8023920:	3c8569d7 	.word	0x3c8569d7
 8023924:	3d4bda59 	.word	0x3d4bda59
 8023928:	bd15a221 	.word	0xbd15a221
 802392c:	be4ccccd 	.word	0xbe4ccccd
 8023930:	3d886b35 	.word	0x3d886b35
 8023934:	3dba2e6e 	.word	0x3dba2e6e
 8023938:	3e124925 	.word	0x3e124925
 802393c:	3eaaaaab 	.word	0x3eaaaaab
 8023940:	bd6ef16b 	.word	0xbd6ef16b
 8023944:	bd9d8795 	.word	0xbd9d8795
 8023948:	bde38e38 	.word	0xbde38e38
 802394c:	401bffff 	.word	0x401bffff
 8023950:	08025c54 	.word	0x08025c54
 8023954:	08025c64 	.word	0x08025c64

08023958 <cosf>:
 8023958:	ee10 3a10 	vmov	r3, s0
 802395c:	b507      	push	{r0, r1, r2, lr}
 802395e:	4a1c      	ldr	r2, [pc, #112]	; (80239d0 <cosf+0x78>)
 8023960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023964:	4293      	cmp	r3, r2
 8023966:	dc04      	bgt.n	8023972 <cosf+0x1a>
 8023968:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80239d4 <cosf+0x7c>
 802396c:	f000 fdb8 	bl	80244e0 <__kernel_cosf>
 8023970:	e004      	b.n	802397c <cosf+0x24>
 8023972:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023976:	db04      	blt.n	8023982 <cosf+0x2a>
 8023978:	ee30 0a40 	vsub.f32	s0, s0, s0
 802397c:	b003      	add	sp, #12
 802397e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023982:	4668      	mov	r0, sp
 8023984:	f000 fc6c 	bl	8024260 <__ieee754_rem_pio2f>
 8023988:	f000 0003 	and.w	r0, r0, #3
 802398c:	2801      	cmp	r0, #1
 802398e:	d007      	beq.n	80239a0 <cosf+0x48>
 8023990:	2802      	cmp	r0, #2
 8023992:	d00e      	beq.n	80239b2 <cosf+0x5a>
 8023994:	b9a0      	cbnz	r0, 80239c0 <cosf+0x68>
 8023996:	eddd 0a01 	vldr	s1, [sp, #4]
 802399a:	ed9d 0a00 	vldr	s0, [sp]
 802399e:	e7e5      	b.n	802396c <cosf+0x14>
 80239a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80239a4:	ed9d 0a00 	vldr	s0, [sp]
 80239a8:	f001 f884 	bl	8024ab4 <__kernel_sinf>
 80239ac:	eeb1 0a40 	vneg.f32	s0, s0
 80239b0:	e7e4      	b.n	802397c <cosf+0x24>
 80239b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80239b6:	ed9d 0a00 	vldr	s0, [sp]
 80239ba:	f000 fd91 	bl	80244e0 <__kernel_cosf>
 80239be:	e7f5      	b.n	80239ac <cosf+0x54>
 80239c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80239c4:	ed9d 0a00 	vldr	s0, [sp]
 80239c8:	2001      	movs	r0, #1
 80239ca:	f001 f873 	bl	8024ab4 <__kernel_sinf>
 80239ce:	e7d5      	b.n	802397c <cosf+0x24>
 80239d0:	3f490fd8 	.word	0x3f490fd8
 80239d4:	00000000 	.word	0x00000000

080239d8 <fabsf>:
 80239d8:	ee10 3a10 	vmov	r3, s0
 80239dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80239e0:	ee00 3a10 	vmov	s0, r3
 80239e4:	4770      	bx	lr
	...

080239e8 <sinf>:
 80239e8:	ee10 3a10 	vmov	r3, s0
 80239ec:	b507      	push	{r0, r1, r2, lr}
 80239ee:	4a1d      	ldr	r2, [pc, #116]	; (8023a64 <sinf+0x7c>)
 80239f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80239f4:	4293      	cmp	r3, r2
 80239f6:	dc05      	bgt.n	8023a04 <sinf+0x1c>
 80239f8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8023a68 <sinf+0x80>
 80239fc:	2000      	movs	r0, #0
 80239fe:	f001 f859 	bl	8024ab4 <__kernel_sinf>
 8023a02:	e004      	b.n	8023a0e <sinf+0x26>
 8023a04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023a08:	db04      	blt.n	8023a14 <sinf+0x2c>
 8023a0a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023a0e:	b003      	add	sp, #12
 8023a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8023a14:	4668      	mov	r0, sp
 8023a16:	f000 fc23 	bl	8024260 <__ieee754_rem_pio2f>
 8023a1a:	f000 0003 	and.w	r0, r0, #3
 8023a1e:	2801      	cmp	r0, #1
 8023a20:	d008      	beq.n	8023a34 <sinf+0x4c>
 8023a22:	2802      	cmp	r0, #2
 8023a24:	d00d      	beq.n	8023a42 <sinf+0x5a>
 8023a26:	b9b0      	cbnz	r0, 8023a56 <sinf+0x6e>
 8023a28:	eddd 0a01 	vldr	s1, [sp, #4]
 8023a2c:	ed9d 0a00 	vldr	s0, [sp]
 8023a30:	2001      	movs	r0, #1
 8023a32:	e7e4      	b.n	80239fe <sinf+0x16>
 8023a34:	eddd 0a01 	vldr	s1, [sp, #4]
 8023a38:	ed9d 0a00 	vldr	s0, [sp]
 8023a3c:	f000 fd50 	bl	80244e0 <__kernel_cosf>
 8023a40:	e7e5      	b.n	8023a0e <sinf+0x26>
 8023a42:	eddd 0a01 	vldr	s1, [sp, #4]
 8023a46:	ed9d 0a00 	vldr	s0, [sp]
 8023a4a:	2001      	movs	r0, #1
 8023a4c:	f001 f832 	bl	8024ab4 <__kernel_sinf>
 8023a50:	eeb1 0a40 	vneg.f32	s0, s0
 8023a54:	e7db      	b.n	8023a0e <sinf+0x26>
 8023a56:	eddd 0a01 	vldr	s1, [sp, #4]
 8023a5a:	ed9d 0a00 	vldr	s0, [sp]
 8023a5e:	f000 fd3f 	bl	80244e0 <__kernel_cosf>
 8023a62:	e7f5      	b.n	8023a50 <sinf+0x68>
 8023a64:	3f490fd8 	.word	0x3f490fd8
 8023a68:	00000000 	.word	0x00000000

08023a6c <atan2f>:
 8023a6c:	f000 b898 	b.w	8023ba0 <__ieee754_atan2f>

08023a70 <powf>:
 8023a70:	b508      	push	{r3, lr}
 8023a72:	ed2d 8b04 	vpush	{d8-d9}
 8023a76:	eeb0 9a40 	vmov.f32	s18, s0
 8023a7a:	eef0 8a60 	vmov.f32	s17, s1
 8023a7e:	f000 f92f 	bl	8023ce0 <__ieee754_powf>
 8023a82:	4b43      	ldr	r3, [pc, #268]	; (8023b90 <powf+0x120>)
 8023a84:	f993 3000 	ldrsb.w	r3, [r3]
 8023a88:	3301      	adds	r3, #1
 8023a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8023a8e:	d012      	beq.n	8023ab6 <powf+0x46>
 8023a90:	eef4 8a68 	vcmp.f32	s17, s17
 8023a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a98:	d60d      	bvs.n	8023ab6 <powf+0x46>
 8023a9a:	eeb4 9a49 	vcmp.f32	s18, s18
 8023a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aa2:	d70d      	bvc.n	8023ac0 <powf+0x50>
 8023aa4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8023aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023ab0:	bf08      	it	eq
 8023ab2:	eeb0 8a67 	vmoveq.f32	s16, s15
 8023ab6:	eeb0 0a48 	vmov.f32	s0, s16
 8023aba:	ecbd 8b04 	vpop	{d8-d9}
 8023abe:	bd08      	pop	{r3, pc}
 8023ac0:	eddf 9a34 	vldr	s19, [pc, #208]	; 8023b94 <powf+0x124>
 8023ac4:	eeb4 9a69 	vcmp.f32	s18, s19
 8023ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023acc:	d116      	bne.n	8023afc <powf+0x8c>
 8023ace:	eef4 8a69 	vcmp.f32	s17, s19
 8023ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ad6:	d057      	beq.n	8023b88 <powf+0x118>
 8023ad8:	eeb0 0a68 	vmov.f32	s0, s17
 8023adc:	f7ff f944 	bl	8022d68 <finitef>
 8023ae0:	2800      	cmp	r0, #0
 8023ae2:	d0e8      	beq.n	8023ab6 <powf+0x46>
 8023ae4:	eef4 8ae9 	vcmpe.f32	s17, s19
 8023ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aec:	d5e3      	bpl.n	8023ab6 <powf+0x46>
 8023aee:	f7fb f975 	bl	801eddc <__errno>
 8023af2:	2321      	movs	r3, #33	; 0x21
 8023af4:	6003      	str	r3, [r0, #0]
 8023af6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8023b98 <powf+0x128>
 8023afa:	e7dc      	b.n	8023ab6 <powf+0x46>
 8023afc:	f7ff f934 	bl	8022d68 <finitef>
 8023b00:	bb50      	cbnz	r0, 8023b58 <powf+0xe8>
 8023b02:	eeb0 0a49 	vmov.f32	s0, s18
 8023b06:	f7ff f92f 	bl	8022d68 <finitef>
 8023b0a:	b328      	cbz	r0, 8023b58 <powf+0xe8>
 8023b0c:	eeb0 0a68 	vmov.f32	s0, s17
 8023b10:	f7ff f92a 	bl	8022d68 <finitef>
 8023b14:	b300      	cbz	r0, 8023b58 <powf+0xe8>
 8023b16:	eeb4 8a48 	vcmp.f32	s16, s16
 8023b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b1e:	d706      	bvc.n	8023b2e <powf+0xbe>
 8023b20:	f7fb f95c 	bl	801eddc <__errno>
 8023b24:	2321      	movs	r3, #33	; 0x21
 8023b26:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8023b2a:	6003      	str	r3, [r0, #0]
 8023b2c:	e7c3      	b.n	8023ab6 <powf+0x46>
 8023b2e:	f7fb f955 	bl	801eddc <__errno>
 8023b32:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8023b36:	2322      	movs	r3, #34	; 0x22
 8023b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b3c:	6003      	str	r3, [r0, #0]
 8023b3e:	d508      	bpl.n	8023b52 <powf+0xe2>
 8023b40:	eeb0 0a68 	vmov.f32	s0, s17
 8023b44:	f001 f840 	bl	8024bc8 <rintf>
 8023b48:	eeb4 0a68 	vcmp.f32	s0, s17
 8023b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b50:	d1d1      	bne.n	8023af6 <powf+0x86>
 8023b52:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8023b9c <powf+0x12c>
 8023b56:	e7ae      	b.n	8023ab6 <powf+0x46>
 8023b58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b60:	d1a9      	bne.n	8023ab6 <powf+0x46>
 8023b62:	eeb0 0a49 	vmov.f32	s0, s18
 8023b66:	f7ff f8ff 	bl	8022d68 <finitef>
 8023b6a:	2800      	cmp	r0, #0
 8023b6c:	d0a3      	beq.n	8023ab6 <powf+0x46>
 8023b6e:	eeb0 0a68 	vmov.f32	s0, s17
 8023b72:	f7ff f8f9 	bl	8022d68 <finitef>
 8023b76:	2800      	cmp	r0, #0
 8023b78:	d09d      	beq.n	8023ab6 <powf+0x46>
 8023b7a:	f7fb f92f 	bl	801eddc <__errno>
 8023b7e:	2322      	movs	r3, #34	; 0x22
 8023b80:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8023b94 <powf+0x124>
 8023b84:	6003      	str	r3, [r0, #0]
 8023b86:	e796      	b.n	8023ab6 <powf+0x46>
 8023b88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8023b8c:	e793      	b.n	8023ab6 <powf+0x46>
 8023b8e:	bf00      	nop
 8023b90:	20000298 	.word	0x20000298
 8023b94:	00000000 	.word	0x00000000
 8023b98:	ff800000 	.word	0xff800000
 8023b9c:	7f800000 	.word	0x7f800000

08023ba0 <__ieee754_atan2f>:
 8023ba0:	ee10 2a90 	vmov	r2, s1
 8023ba4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8023ba8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023bac:	b510      	push	{r4, lr}
 8023bae:	eef0 7a40 	vmov.f32	s15, s0
 8023bb2:	dc06      	bgt.n	8023bc2 <__ieee754_atan2f+0x22>
 8023bb4:	ee10 0a10 	vmov	r0, s0
 8023bb8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8023bbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023bc0:	dd04      	ble.n	8023bcc <__ieee754_atan2f+0x2c>
 8023bc2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8023bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8023bca:	bd10      	pop	{r4, pc}
 8023bcc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8023bd0:	d103      	bne.n	8023bda <__ieee754_atan2f+0x3a>
 8023bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023bd6:	f7ff bdeb 	b.w	80237b0 <atanf>
 8023bda:	1794      	asrs	r4, r2, #30
 8023bdc:	f004 0402 	and.w	r4, r4, #2
 8023be0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8023be4:	b943      	cbnz	r3, 8023bf8 <__ieee754_atan2f+0x58>
 8023be6:	2c02      	cmp	r4, #2
 8023be8:	d05e      	beq.n	8023ca8 <__ieee754_atan2f+0x108>
 8023bea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8023cbc <__ieee754_atan2f+0x11c>
 8023bee:	2c03      	cmp	r4, #3
 8023bf0:	bf08      	it	eq
 8023bf2:	eef0 7a47 	vmoveq.f32	s15, s14
 8023bf6:	e7e6      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023bf8:	b941      	cbnz	r1, 8023c0c <__ieee754_atan2f+0x6c>
 8023bfa:	eddf 7a31 	vldr	s15, [pc, #196]	; 8023cc0 <__ieee754_atan2f+0x120>
 8023bfe:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8023cc4 <__ieee754_atan2f+0x124>
 8023c02:	2800      	cmp	r0, #0
 8023c04:	bfb8      	it	lt
 8023c06:	eef0 7a40 	vmovlt.f32	s15, s0
 8023c0a:	e7dc      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023c0c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8023c10:	d110      	bne.n	8023c34 <__ieee754_atan2f+0x94>
 8023c12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023c16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8023c1a:	d107      	bne.n	8023c2c <__ieee754_atan2f+0x8c>
 8023c1c:	2c02      	cmp	r4, #2
 8023c1e:	d846      	bhi.n	8023cae <__ieee754_atan2f+0x10e>
 8023c20:	4b29      	ldr	r3, [pc, #164]	; (8023cc8 <__ieee754_atan2f+0x128>)
 8023c22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8023c26:	edd4 7a00 	vldr	s15, [r4]
 8023c2a:	e7cc      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023c2c:	2c02      	cmp	r4, #2
 8023c2e:	d841      	bhi.n	8023cb4 <__ieee754_atan2f+0x114>
 8023c30:	4b26      	ldr	r3, [pc, #152]	; (8023ccc <__ieee754_atan2f+0x12c>)
 8023c32:	e7f6      	b.n	8023c22 <__ieee754_atan2f+0x82>
 8023c34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023c38:	d0df      	beq.n	8023bfa <__ieee754_atan2f+0x5a>
 8023c3a:	1a5b      	subs	r3, r3, r1
 8023c3c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8023c40:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8023c44:	da1a      	bge.n	8023c7c <__ieee754_atan2f+0xdc>
 8023c46:	2a00      	cmp	r2, #0
 8023c48:	da01      	bge.n	8023c4e <__ieee754_atan2f+0xae>
 8023c4a:	313c      	adds	r1, #60	; 0x3c
 8023c4c:	db19      	blt.n	8023c82 <__ieee754_atan2f+0xe2>
 8023c4e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8023c52:	f7ff fec1 	bl	80239d8 <fabsf>
 8023c56:	f7ff fdab 	bl	80237b0 <atanf>
 8023c5a:	eef0 7a40 	vmov.f32	s15, s0
 8023c5e:	2c01      	cmp	r4, #1
 8023c60:	d012      	beq.n	8023c88 <__ieee754_atan2f+0xe8>
 8023c62:	2c02      	cmp	r4, #2
 8023c64:	d017      	beq.n	8023c96 <__ieee754_atan2f+0xf6>
 8023c66:	2c00      	cmp	r4, #0
 8023c68:	d0ad      	beq.n	8023bc6 <__ieee754_atan2f+0x26>
 8023c6a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8023cd0 <__ieee754_atan2f+0x130>
 8023c6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023c72:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8023cd4 <__ieee754_atan2f+0x134>
 8023c76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023c7a:	e7a4      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023c7c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8023cc0 <__ieee754_atan2f+0x120>
 8023c80:	e7ed      	b.n	8023c5e <__ieee754_atan2f+0xbe>
 8023c82:	eddf 7a15 	vldr	s15, [pc, #84]	; 8023cd8 <__ieee754_atan2f+0x138>
 8023c86:	e7ea      	b.n	8023c5e <__ieee754_atan2f+0xbe>
 8023c88:	ee17 3a90 	vmov	r3, s15
 8023c8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023c90:	ee07 3a90 	vmov	s15, r3
 8023c94:	e797      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023c96:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8023cd0 <__ieee754_atan2f+0x130>
 8023c9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023c9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023cd4 <__ieee754_atan2f+0x134>
 8023ca2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023ca6:	e78e      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023ca8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8023cd4 <__ieee754_atan2f+0x134>
 8023cac:	e78b      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023cae:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8023cdc <__ieee754_atan2f+0x13c>
 8023cb2:	e788      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023cb4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8023cd8 <__ieee754_atan2f+0x138>
 8023cb8:	e785      	b.n	8023bc6 <__ieee754_atan2f+0x26>
 8023cba:	bf00      	nop
 8023cbc:	c0490fdb 	.word	0xc0490fdb
 8023cc0:	3fc90fdb 	.word	0x3fc90fdb
 8023cc4:	bfc90fdb 	.word	0xbfc90fdb
 8023cc8:	08025c74 	.word	0x08025c74
 8023ccc:	08025c80 	.word	0x08025c80
 8023cd0:	33bbbd2e 	.word	0x33bbbd2e
 8023cd4:	40490fdb 	.word	0x40490fdb
 8023cd8:	00000000 	.word	0x00000000
 8023cdc:	3f490fdb 	.word	0x3f490fdb

08023ce0 <__ieee754_powf>:
 8023ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ce4:	ee10 5a90 	vmov	r5, s1
 8023ce8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8023cec:	ed2d 8b02 	vpush	{d8}
 8023cf0:	eeb0 8a40 	vmov.f32	s16, s0
 8023cf4:	eef0 8a60 	vmov.f32	s17, s1
 8023cf8:	f000 8291 	beq.w	802421e <__ieee754_powf+0x53e>
 8023cfc:	ee10 8a10 	vmov	r8, s0
 8023d00:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8023d04:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8023d08:	dc06      	bgt.n	8023d18 <__ieee754_powf+0x38>
 8023d0a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8023d0e:	dd0a      	ble.n	8023d26 <__ieee754_powf+0x46>
 8023d10:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8023d14:	f000 8283 	beq.w	802421e <__ieee754_powf+0x53e>
 8023d18:	ecbd 8b02 	vpop	{d8}
 8023d1c:	48d8      	ldr	r0, [pc, #864]	; (8024080 <__ieee754_powf+0x3a0>)
 8023d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023d22:	f7fb bfdf 	b.w	801fce4 <nanf>
 8023d26:	f1b8 0f00 	cmp.w	r8, #0
 8023d2a:	da1f      	bge.n	8023d6c <__ieee754_powf+0x8c>
 8023d2c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8023d30:	da2e      	bge.n	8023d90 <__ieee754_powf+0xb0>
 8023d32:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8023d36:	f2c0 827b 	blt.w	8024230 <__ieee754_powf+0x550>
 8023d3a:	15fb      	asrs	r3, r7, #23
 8023d3c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8023d40:	fa47 f603 	asr.w	r6, r7, r3
 8023d44:	fa06 f303 	lsl.w	r3, r6, r3
 8023d48:	42bb      	cmp	r3, r7
 8023d4a:	f040 8271 	bne.w	8024230 <__ieee754_powf+0x550>
 8023d4e:	f006 0601 	and.w	r6, r6, #1
 8023d52:	f1c6 0602 	rsb	r6, r6, #2
 8023d56:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8023d5a:	d120      	bne.n	8023d9e <__ieee754_powf+0xbe>
 8023d5c:	2d00      	cmp	r5, #0
 8023d5e:	f280 8264 	bge.w	802422a <__ieee754_powf+0x54a>
 8023d62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023d66:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8023d6a:	e00d      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023d6c:	2600      	movs	r6, #0
 8023d6e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8023d72:	d1f0      	bne.n	8023d56 <__ieee754_powf+0x76>
 8023d74:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8023d78:	f000 8251 	beq.w	802421e <__ieee754_powf+0x53e>
 8023d7c:	dd0a      	ble.n	8023d94 <__ieee754_powf+0xb4>
 8023d7e:	2d00      	cmp	r5, #0
 8023d80:	f280 8250 	bge.w	8024224 <__ieee754_powf+0x544>
 8023d84:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8024084 <__ieee754_powf+0x3a4>
 8023d88:	ecbd 8b02 	vpop	{d8}
 8023d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d90:	2602      	movs	r6, #2
 8023d92:	e7ec      	b.n	8023d6e <__ieee754_powf+0x8e>
 8023d94:	2d00      	cmp	r5, #0
 8023d96:	daf5      	bge.n	8023d84 <__ieee754_powf+0xa4>
 8023d98:	eeb1 0a68 	vneg.f32	s0, s17
 8023d9c:	e7f4      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023d9e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8023da2:	d102      	bne.n	8023daa <__ieee754_powf+0xca>
 8023da4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8023da8:	e7ee      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023daa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8023dae:	eeb0 0a48 	vmov.f32	s0, s16
 8023db2:	d108      	bne.n	8023dc6 <__ieee754_powf+0xe6>
 8023db4:	f1b8 0f00 	cmp.w	r8, #0
 8023db8:	db05      	blt.n	8023dc6 <__ieee754_powf+0xe6>
 8023dba:	ecbd 8b02 	vpop	{d8}
 8023dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023dc2:	f000 bb89 	b.w	80244d8 <__ieee754_sqrtf>
 8023dc6:	f7ff fe07 	bl	80239d8 <fabsf>
 8023dca:	b124      	cbz	r4, 8023dd6 <__ieee754_powf+0xf6>
 8023dcc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8023dd0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8023dd4:	d117      	bne.n	8023e06 <__ieee754_powf+0x126>
 8023dd6:	2d00      	cmp	r5, #0
 8023dd8:	bfbc      	itt	lt
 8023dda:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8023dde:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8023de2:	f1b8 0f00 	cmp.w	r8, #0
 8023de6:	dacf      	bge.n	8023d88 <__ieee754_powf+0xa8>
 8023de8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8023dec:	ea54 0306 	orrs.w	r3, r4, r6
 8023df0:	d104      	bne.n	8023dfc <__ieee754_powf+0x11c>
 8023df2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023df6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8023dfa:	e7c5      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023dfc:	2e01      	cmp	r6, #1
 8023dfe:	d1c3      	bne.n	8023d88 <__ieee754_powf+0xa8>
 8023e00:	eeb1 0a40 	vneg.f32	s0, s0
 8023e04:	e7c0      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023e06:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8023e0a:	3801      	subs	r0, #1
 8023e0c:	ea56 0300 	orrs.w	r3, r6, r0
 8023e10:	d104      	bne.n	8023e1c <__ieee754_powf+0x13c>
 8023e12:	ee38 8a48 	vsub.f32	s16, s16, s16
 8023e16:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023e1a:	e7b5      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023e1c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8023e20:	dd6b      	ble.n	8023efa <__ieee754_powf+0x21a>
 8023e22:	4b99      	ldr	r3, [pc, #612]	; (8024088 <__ieee754_powf+0x3a8>)
 8023e24:	429c      	cmp	r4, r3
 8023e26:	dc06      	bgt.n	8023e36 <__ieee754_powf+0x156>
 8023e28:	2d00      	cmp	r5, #0
 8023e2a:	daab      	bge.n	8023d84 <__ieee754_powf+0xa4>
 8023e2c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 802408c <__ieee754_powf+0x3ac>
 8023e30:	ee20 0a00 	vmul.f32	s0, s0, s0
 8023e34:	e7a8      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023e36:	4b96      	ldr	r3, [pc, #600]	; (8024090 <__ieee754_powf+0x3b0>)
 8023e38:	429c      	cmp	r4, r3
 8023e3a:	dd02      	ble.n	8023e42 <__ieee754_powf+0x162>
 8023e3c:	2d00      	cmp	r5, #0
 8023e3e:	dcf5      	bgt.n	8023e2c <__ieee754_powf+0x14c>
 8023e40:	e7a0      	b.n	8023d84 <__ieee754_powf+0xa4>
 8023e42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023e46:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023e4a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8024094 <__ieee754_powf+0x3b4>
 8023e4e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8023e52:	eee0 6a67 	vfms.f32	s13, s0, s15
 8023e56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023e5a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8023e5e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8023e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023e66:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8024098 <__ieee754_powf+0x3b8>
 8023e6a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8023e6e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 802409c <__ieee754_powf+0x3bc>
 8023e72:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023e76:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80240a0 <__ieee754_powf+0x3c0>
 8023e7a:	eef0 6a67 	vmov.f32	s13, s15
 8023e7e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8023e82:	ee16 3a90 	vmov	r3, s13
 8023e86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8023e8a:	f023 030f 	bic.w	r3, r3, #15
 8023e8e:	ee00 3a90 	vmov	s1, r3
 8023e92:	eee0 0a47 	vfms.f32	s1, s0, s14
 8023e96:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8023e9a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8023e9e:	f025 050f 	bic.w	r5, r5, #15
 8023ea2:	ee07 5a10 	vmov	s14, r5
 8023ea6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8023eaa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8023eae:	ee07 3a90 	vmov	s15, r3
 8023eb2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8023eb6:	3e01      	subs	r6, #1
 8023eb8:	ea56 0200 	orrs.w	r2, r6, r0
 8023ebc:	ee07 5a10 	vmov	s14, r5
 8023ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023ec4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8023ec8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8023ecc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8023ed0:	ee17 4a10 	vmov	r4, s14
 8023ed4:	bf08      	it	eq
 8023ed6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8023eda:	2c00      	cmp	r4, #0
 8023edc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8023ee0:	f340 8184 	ble.w	80241ec <__ieee754_powf+0x50c>
 8023ee4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8023ee8:	f340 80fc 	ble.w	80240e4 <__ieee754_powf+0x404>
 8023eec:	eddf 7a67 	vldr	s15, [pc, #412]	; 802408c <__ieee754_powf+0x3ac>
 8023ef0:	ee28 0a27 	vmul.f32	s0, s16, s15
 8023ef4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023ef8:	e746      	b.n	8023d88 <__ieee754_powf+0xa8>
 8023efa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8023efe:	bf01      	itttt	eq
 8023f00:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80240a4 <__ieee754_powf+0x3c4>
 8023f04:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8023f08:	f06f 0217 	mvneq.w	r2, #23
 8023f0c:	ee17 4a90 	vmoveq	r4, s15
 8023f10:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8023f14:	bf18      	it	ne
 8023f16:	2200      	movne	r2, #0
 8023f18:	3b7f      	subs	r3, #127	; 0x7f
 8023f1a:	4413      	add	r3, r2
 8023f1c:	4a62      	ldr	r2, [pc, #392]	; (80240a8 <__ieee754_powf+0x3c8>)
 8023f1e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8023f22:	4294      	cmp	r4, r2
 8023f24:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8023f28:	dd06      	ble.n	8023f38 <__ieee754_powf+0x258>
 8023f2a:	4a60      	ldr	r2, [pc, #384]	; (80240ac <__ieee754_powf+0x3cc>)
 8023f2c:	4294      	cmp	r4, r2
 8023f2e:	f340 80a4 	ble.w	802407a <__ieee754_powf+0x39a>
 8023f32:	3301      	adds	r3, #1
 8023f34:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8023f38:	2400      	movs	r4, #0
 8023f3a:	4a5d      	ldr	r2, [pc, #372]	; (80240b0 <__ieee754_powf+0x3d0>)
 8023f3c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8023f40:	ee07 1a90 	vmov	s15, r1
 8023f44:	ed92 7a00 	vldr	s14, [r2]
 8023f48:	4a5a      	ldr	r2, [pc, #360]	; (80240b4 <__ieee754_powf+0x3d4>)
 8023f4a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8023f4e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8023f52:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8023f56:	1049      	asrs	r1, r1, #1
 8023f58:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8023f5c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8023f60:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8023f64:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8023f68:	ee06 1a10 	vmov	s12, r1
 8023f6c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8023f70:	ee36 7a47 	vsub.f32	s14, s12, s14
 8023f74:	ee14 7a90 	vmov	r7, s9
 8023f78:	4017      	ands	r7, r2
 8023f7a:	ee05 7a90 	vmov	s11, r7
 8023f7e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8023f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023f86:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80240b8 <__ieee754_powf+0x3d8>
 8023f8a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8023f8e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8023f92:	ee25 6a26 	vmul.f32	s12, s10, s13
 8023f96:	eddf 6a49 	vldr	s13, [pc, #292]	; 80240bc <__ieee754_powf+0x3dc>
 8023f9a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8023f9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80240c0 <__ieee754_powf+0x3e0>
 8023fa2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023fa6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8024094 <__ieee754_powf+0x3b4>
 8023faa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023fae:	eddf 6a45 	vldr	s13, [pc, #276]	; 80240c4 <__ieee754_powf+0x3e4>
 8023fb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023fb6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80240c8 <__ieee754_powf+0x3e8>
 8023fba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023fbe:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8023fc2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8023fc6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8023fca:	eee5 6a07 	vfma.f32	s13, s10, s14
 8023fce:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8023fd2:	eef0 7a45 	vmov.f32	s15, s10
 8023fd6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8023fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023fde:	ee17 1a90 	vmov	r1, s15
 8023fe2:	4011      	ands	r1, r2
 8023fe4:	ee07 1a90 	vmov	s15, r1
 8023fe8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8023fec:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8023ff0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8023ff4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8023ff8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023ffc:	eeb0 6a47 	vmov.f32	s12, s14
 8024000:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8024004:	ee16 1a10 	vmov	r1, s12
 8024008:	4011      	ands	r1, r2
 802400a:	ee06 1a90 	vmov	s13, r1
 802400e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8024012:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80240cc <__ieee754_powf+0x3ec>
 8024016:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80240d0 <__ieee754_powf+0x3f0>
 802401a:	ee37 7a66 	vsub.f32	s14, s14, s13
 802401e:	ee06 1a10 	vmov	s12, r1
 8024022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024026:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80240d4 <__ieee754_powf+0x3f4>
 802402a:	492b      	ldr	r1, [pc, #172]	; (80240d8 <__ieee754_powf+0x3f8>)
 802402c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8024030:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024034:	edd1 7a00 	vldr	s15, [r1]
 8024038:	ee37 7a27 	vadd.f32	s14, s14, s15
 802403c:	ee07 3a90 	vmov	s15, r3
 8024040:	4b26      	ldr	r3, [pc, #152]	; (80240dc <__ieee754_powf+0x3fc>)
 8024042:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8024046:	eef0 7a47 	vmov.f32	s15, s14
 802404a:	eee6 7a25 	vfma.f32	s15, s12, s11
 802404e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024052:	edd4 0a00 	vldr	s1, [r4]
 8024056:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802405a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802405e:	ee17 3a90 	vmov	r3, s15
 8024062:	4013      	ands	r3, r2
 8024064:	ee07 3a90 	vmov	s15, r3
 8024068:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802406c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8024070:	eee6 6a65 	vfms.f32	s13, s12, s11
 8024074:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024078:	e70f      	b.n	8023e9a <__ieee754_powf+0x1ba>
 802407a:	2401      	movs	r4, #1
 802407c:	e75d      	b.n	8023f3a <__ieee754_powf+0x25a>
 802407e:	bf00      	nop
 8024080:	08025bf0 	.word	0x08025bf0
 8024084:	00000000 	.word	0x00000000
 8024088:	3f7ffff7 	.word	0x3f7ffff7
 802408c:	7149f2ca 	.word	0x7149f2ca
 8024090:	3f800007 	.word	0x3f800007
 8024094:	3eaaaaab 	.word	0x3eaaaaab
 8024098:	3fb8aa3b 	.word	0x3fb8aa3b
 802409c:	36eca570 	.word	0x36eca570
 80240a0:	3fb8aa00 	.word	0x3fb8aa00
 80240a4:	4b800000 	.word	0x4b800000
 80240a8:	001cc471 	.word	0x001cc471
 80240ac:	005db3d6 	.word	0x005db3d6
 80240b0:	08025c8c 	.word	0x08025c8c
 80240b4:	fffff000 	.word	0xfffff000
 80240b8:	3e6c3255 	.word	0x3e6c3255
 80240bc:	3e53f142 	.word	0x3e53f142
 80240c0:	3e8ba305 	.word	0x3e8ba305
 80240c4:	3edb6db7 	.word	0x3edb6db7
 80240c8:	3f19999a 	.word	0x3f19999a
 80240cc:	3f76384f 	.word	0x3f76384f
 80240d0:	3f763800 	.word	0x3f763800
 80240d4:	369dc3a0 	.word	0x369dc3a0
 80240d8:	08025c9c 	.word	0x08025c9c
 80240dc:	08025c94 	.word	0x08025c94
 80240e0:	3338aa3c 	.word	0x3338aa3c
 80240e4:	f040 8092 	bne.w	802420c <__ieee754_powf+0x52c>
 80240e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80240e0 <__ieee754_powf+0x400>
 80240ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80240f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80240f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80240f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240fc:	f73f aef6 	bgt.w	8023eec <__ieee754_powf+0x20c>
 8024100:	15db      	asrs	r3, r3, #23
 8024102:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8024106:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802410a:	4103      	asrs	r3, r0
 802410c:	4423      	add	r3, r4
 802410e:	4949      	ldr	r1, [pc, #292]	; (8024234 <__ieee754_powf+0x554>)
 8024110:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024114:	3a7f      	subs	r2, #127	; 0x7f
 8024116:	4111      	asrs	r1, r2
 8024118:	ea23 0101 	bic.w	r1, r3, r1
 802411c:	ee07 1a10 	vmov	s14, r1
 8024120:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024124:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8024128:	f1c2 0217 	rsb	r2, r2, #23
 802412c:	4110      	asrs	r0, r2
 802412e:	2c00      	cmp	r4, #0
 8024130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024134:	bfb8      	it	lt
 8024136:	4240      	neglt	r0, r0
 8024138:	ee37 7aa0 	vadd.f32	s14, s15, s1
 802413c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8024238 <__ieee754_powf+0x558>
 8024140:	ee17 3a10 	vmov	r3, s14
 8024144:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024148:	f023 030f 	bic.w	r3, r3, #15
 802414c:	ee07 3a10 	vmov	s14, r3
 8024150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024154:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8024158:	eddf 7a38 	vldr	s15, [pc, #224]	; 802423c <__ieee754_powf+0x55c>
 802415c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024160:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8024164:	eddf 6a36 	vldr	s13, [pc, #216]	; 8024240 <__ieee754_powf+0x560>
 8024168:	eeb0 0a67 	vmov.f32	s0, s15
 802416c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8024170:	eeb0 6a40 	vmov.f32	s12, s0
 8024174:	eea7 6a66 	vfms.f32	s12, s14, s13
 8024178:	ee20 7a00 	vmul.f32	s14, s0, s0
 802417c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8024180:	eddf 6a30 	vldr	s13, [pc, #192]	; 8024244 <__ieee754_powf+0x564>
 8024184:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8024248 <__ieee754_powf+0x568>
 8024188:	eea7 6a26 	vfma.f32	s12, s14, s13
 802418c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 802424c <__ieee754_powf+0x56c>
 8024190:	eee6 6a07 	vfma.f32	s13, s12, s14
 8024194:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8024250 <__ieee754_powf+0x570>
 8024198:	eea6 6a87 	vfma.f32	s12, s13, s14
 802419c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8024254 <__ieee754_powf+0x574>
 80241a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80241a4:	eeb0 6a40 	vmov.f32	s12, s0
 80241a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80241ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80241b0:	eeb0 7a46 	vmov.f32	s14, s12
 80241b4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80241b8:	ee20 6a06 	vmul.f32	s12, s0, s12
 80241bc:	eee0 7a27 	vfma.f32	s15, s0, s15
 80241c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80241c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80241c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80241cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80241d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80241d4:	ee10 3a10 	vmov	r3, s0
 80241d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80241dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80241e0:	da1a      	bge.n	8024218 <__ieee754_powf+0x538>
 80241e2:	f7fb fd85 	bl	801fcf0 <scalbnf>
 80241e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80241ea:	e5cd      	b.n	8023d88 <__ieee754_powf+0xa8>
 80241ec:	4a1a      	ldr	r2, [pc, #104]	; (8024258 <__ieee754_powf+0x578>)
 80241ee:	4293      	cmp	r3, r2
 80241f0:	dd02      	ble.n	80241f8 <__ieee754_powf+0x518>
 80241f2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 802425c <__ieee754_powf+0x57c>
 80241f6:	e67b      	b.n	8023ef0 <__ieee754_powf+0x210>
 80241f8:	d108      	bne.n	802420c <__ieee754_powf+0x52c>
 80241fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80241fe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8024202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024206:	f6ff af7b 	blt.w	8024100 <__ieee754_powf+0x420>
 802420a:	e7f2      	b.n	80241f2 <__ieee754_powf+0x512>
 802420c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8024210:	f73f af76 	bgt.w	8024100 <__ieee754_powf+0x420>
 8024214:	2000      	movs	r0, #0
 8024216:	e78f      	b.n	8024138 <__ieee754_powf+0x458>
 8024218:	ee00 3a10 	vmov	s0, r3
 802421c:	e7e3      	b.n	80241e6 <__ieee754_powf+0x506>
 802421e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024222:	e5b1      	b.n	8023d88 <__ieee754_powf+0xa8>
 8024224:	eeb0 0a68 	vmov.f32	s0, s17
 8024228:	e5ae      	b.n	8023d88 <__ieee754_powf+0xa8>
 802422a:	eeb0 0a48 	vmov.f32	s0, s16
 802422e:	e5ab      	b.n	8023d88 <__ieee754_powf+0xa8>
 8024230:	2600      	movs	r6, #0
 8024232:	e590      	b.n	8023d56 <__ieee754_powf+0x76>
 8024234:	007fffff 	.word	0x007fffff
 8024238:	3f317218 	.word	0x3f317218
 802423c:	35bfbe8c 	.word	0x35bfbe8c
 8024240:	3f317200 	.word	0x3f317200
 8024244:	3331bb4c 	.word	0x3331bb4c
 8024248:	b5ddea0e 	.word	0xb5ddea0e
 802424c:	388ab355 	.word	0x388ab355
 8024250:	bb360b61 	.word	0xbb360b61
 8024254:	3e2aaaab 	.word	0x3e2aaaab
 8024258:	43160000 	.word	0x43160000
 802425c:	0da24260 	.word	0x0da24260

08024260 <__ieee754_rem_pio2f>:
 8024260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024262:	ee10 6a10 	vmov	r6, s0
 8024266:	4b8e      	ldr	r3, [pc, #568]	; (80244a0 <__ieee754_rem_pio2f+0x240>)
 8024268:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802426c:	429d      	cmp	r5, r3
 802426e:	b087      	sub	sp, #28
 8024270:	eef0 7a40 	vmov.f32	s15, s0
 8024274:	4604      	mov	r4, r0
 8024276:	dc05      	bgt.n	8024284 <__ieee754_rem_pio2f+0x24>
 8024278:	2300      	movs	r3, #0
 802427a:	ed80 0a00 	vstr	s0, [r0]
 802427e:	6043      	str	r3, [r0, #4]
 8024280:	2000      	movs	r0, #0
 8024282:	e01a      	b.n	80242ba <__ieee754_rem_pio2f+0x5a>
 8024284:	4b87      	ldr	r3, [pc, #540]	; (80244a4 <__ieee754_rem_pio2f+0x244>)
 8024286:	429d      	cmp	r5, r3
 8024288:	dc46      	bgt.n	8024318 <__ieee754_rem_pio2f+0xb8>
 802428a:	2e00      	cmp	r6, #0
 802428c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80244a8 <__ieee754_rem_pio2f+0x248>
 8024290:	4b86      	ldr	r3, [pc, #536]	; (80244ac <__ieee754_rem_pio2f+0x24c>)
 8024292:	f025 050f 	bic.w	r5, r5, #15
 8024296:	dd1f      	ble.n	80242d8 <__ieee754_rem_pio2f+0x78>
 8024298:	429d      	cmp	r5, r3
 802429a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802429e:	d00e      	beq.n	80242be <__ieee754_rem_pio2f+0x5e>
 80242a0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80244b0 <__ieee754_rem_pio2f+0x250>
 80242a4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80242a8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80242ac:	ed80 0a00 	vstr	s0, [r0]
 80242b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80242b4:	2001      	movs	r0, #1
 80242b6:	edc4 7a01 	vstr	s15, [r4, #4]
 80242ba:	b007      	add	sp, #28
 80242bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80242be:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80244b4 <__ieee754_rem_pio2f+0x254>
 80242c2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80244b8 <__ieee754_rem_pio2f+0x258>
 80242c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80242ca:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80242ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80242d2:	edc0 6a00 	vstr	s13, [r0]
 80242d6:	e7eb      	b.n	80242b0 <__ieee754_rem_pio2f+0x50>
 80242d8:	429d      	cmp	r5, r3
 80242da:	ee77 7a80 	vadd.f32	s15, s15, s0
 80242de:	d00e      	beq.n	80242fe <__ieee754_rem_pio2f+0x9e>
 80242e0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80244b0 <__ieee754_rem_pio2f+0x250>
 80242e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80242e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80242ec:	ed80 0a00 	vstr	s0, [r0]
 80242f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80242f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80242f8:	edc4 7a01 	vstr	s15, [r4, #4]
 80242fc:	e7dd      	b.n	80242ba <__ieee754_rem_pio2f+0x5a>
 80242fe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80244b4 <__ieee754_rem_pio2f+0x254>
 8024302:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80244b8 <__ieee754_rem_pio2f+0x258>
 8024306:	ee77 7a80 	vadd.f32	s15, s15, s0
 802430a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802430e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024312:	edc0 6a00 	vstr	s13, [r0]
 8024316:	e7eb      	b.n	80242f0 <__ieee754_rem_pio2f+0x90>
 8024318:	4b68      	ldr	r3, [pc, #416]	; (80244bc <__ieee754_rem_pio2f+0x25c>)
 802431a:	429d      	cmp	r5, r3
 802431c:	dc72      	bgt.n	8024404 <__ieee754_rem_pio2f+0x1a4>
 802431e:	f7ff fb5b 	bl	80239d8 <fabsf>
 8024322:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80244c0 <__ieee754_rem_pio2f+0x260>
 8024326:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802432a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802432e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024336:	ee17 0a90 	vmov	r0, s15
 802433a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80244a8 <__ieee754_rem_pio2f+0x248>
 802433e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8024342:	281f      	cmp	r0, #31
 8024344:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80244b0 <__ieee754_rem_pio2f+0x250>
 8024348:	ee67 7a27 	vmul.f32	s15, s14, s15
 802434c:	eeb1 6a47 	vneg.f32	s12, s14
 8024350:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024354:	ee16 2a90 	vmov	r2, s13
 8024358:	dc1c      	bgt.n	8024394 <__ieee754_rem_pio2f+0x134>
 802435a:	495a      	ldr	r1, [pc, #360]	; (80244c4 <__ieee754_rem_pio2f+0x264>)
 802435c:	1e47      	subs	r7, r0, #1
 802435e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8024362:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024366:	428b      	cmp	r3, r1
 8024368:	d014      	beq.n	8024394 <__ieee754_rem_pio2f+0x134>
 802436a:	6022      	str	r2, [r4, #0]
 802436c:	ed94 7a00 	vldr	s14, [r4]
 8024370:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024374:	2e00      	cmp	r6, #0
 8024376:	ee30 0a67 	vsub.f32	s0, s0, s15
 802437a:	ed84 0a01 	vstr	s0, [r4, #4]
 802437e:	da9c      	bge.n	80242ba <__ieee754_rem_pio2f+0x5a>
 8024380:	eeb1 7a47 	vneg.f32	s14, s14
 8024384:	eeb1 0a40 	vneg.f32	s0, s0
 8024388:	ed84 7a00 	vstr	s14, [r4]
 802438c:	ed84 0a01 	vstr	s0, [r4, #4]
 8024390:	4240      	negs	r0, r0
 8024392:	e792      	b.n	80242ba <__ieee754_rem_pio2f+0x5a>
 8024394:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024398:	15eb      	asrs	r3, r5, #23
 802439a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802439e:	2d08      	cmp	r5, #8
 80243a0:	dde3      	ble.n	802436a <__ieee754_rem_pio2f+0x10a>
 80243a2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80244b4 <__ieee754_rem_pio2f+0x254>
 80243a6:	eef0 6a40 	vmov.f32	s13, s0
 80243aa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80243ae:	ee30 0a66 	vsub.f32	s0, s0, s13
 80243b2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80243b6:	eddf 7a40 	vldr	s15, [pc, #256]	; 80244b8 <__ieee754_rem_pio2f+0x258>
 80243ba:	ee97 0a27 	vfnms.f32	s0, s14, s15
 80243be:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80243c2:	eef0 7a40 	vmov.f32	s15, s0
 80243c6:	ee15 2a90 	vmov	r2, s11
 80243ca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80243ce:	1a5b      	subs	r3, r3, r1
 80243d0:	2b19      	cmp	r3, #25
 80243d2:	dc04      	bgt.n	80243de <__ieee754_rem_pio2f+0x17e>
 80243d4:	edc4 5a00 	vstr	s11, [r4]
 80243d8:	eeb0 0a66 	vmov.f32	s0, s13
 80243dc:	e7c6      	b.n	802436c <__ieee754_rem_pio2f+0x10c>
 80243de:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80244c8 <__ieee754_rem_pio2f+0x268>
 80243e2:	eeb0 0a66 	vmov.f32	s0, s13
 80243e6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80243ea:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80243ee:	eddf 6a37 	vldr	s13, [pc, #220]	; 80244cc <__ieee754_rem_pio2f+0x26c>
 80243f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80243f6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80243fa:	ee30 7a67 	vsub.f32	s14, s0, s15
 80243fe:	ed84 7a00 	vstr	s14, [r4]
 8024402:	e7b3      	b.n	802436c <__ieee754_rem_pio2f+0x10c>
 8024404:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024408:	db06      	blt.n	8024418 <__ieee754_rem_pio2f+0x1b8>
 802440a:	ee70 7a40 	vsub.f32	s15, s0, s0
 802440e:	edc0 7a01 	vstr	s15, [r0, #4]
 8024412:	edc0 7a00 	vstr	s15, [r0]
 8024416:	e733      	b.n	8024280 <__ieee754_rem_pio2f+0x20>
 8024418:	15ea      	asrs	r2, r5, #23
 802441a:	3a86      	subs	r2, #134	; 0x86
 802441c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8024420:	ee07 3a90 	vmov	s15, r3
 8024424:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024428:	eddf 6a29 	vldr	s13, [pc, #164]	; 80244d0 <__ieee754_rem_pio2f+0x270>
 802442c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024430:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024434:	ed8d 7a03 	vstr	s14, [sp, #12]
 8024438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802443c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024440:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024448:	ed8d 7a04 	vstr	s14, [sp, #16]
 802444c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024458:	edcd 7a05 	vstr	s15, [sp, #20]
 802445c:	d11e      	bne.n	802449c <__ieee754_rem_pio2f+0x23c>
 802445e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8024462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024466:	bf14      	ite	ne
 8024468:	2302      	movne	r3, #2
 802446a:	2301      	moveq	r3, #1
 802446c:	4919      	ldr	r1, [pc, #100]	; (80244d4 <__ieee754_rem_pio2f+0x274>)
 802446e:	9101      	str	r1, [sp, #4]
 8024470:	2102      	movs	r1, #2
 8024472:	9100      	str	r1, [sp, #0]
 8024474:	a803      	add	r0, sp, #12
 8024476:	4621      	mov	r1, r4
 8024478:	f000 f892 	bl	80245a0 <__kernel_rem_pio2f>
 802447c:	2e00      	cmp	r6, #0
 802447e:	f6bf af1c 	bge.w	80242ba <__ieee754_rem_pio2f+0x5a>
 8024482:	edd4 7a00 	vldr	s15, [r4]
 8024486:	eef1 7a67 	vneg.f32	s15, s15
 802448a:	edc4 7a00 	vstr	s15, [r4]
 802448e:	edd4 7a01 	vldr	s15, [r4, #4]
 8024492:	eef1 7a67 	vneg.f32	s15, s15
 8024496:	edc4 7a01 	vstr	s15, [r4, #4]
 802449a:	e779      	b.n	8024390 <__ieee754_rem_pio2f+0x130>
 802449c:	2303      	movs	r3, #3
 802449e:	e7e5      	b.n	802446c <__ieee754_rem_pio2f+0x20c>
 80244a0:	3f490fd8 	.word	0x3f490fd8
 80244a4:	4016cbe3 	.word	0x4016cbe3
 80244a8:	3fc90f80 	.word	0x3fc90f80
 80244ac:	3fc90fd0 	.word	0x3fc90fd0
 80244b0:	37354443 	.word	0x37354443
 80244b4:	37354400 	.word	0x37354400
 80244b8:	2e85a308 	.word	0x2e85a308
 80244bc:	43490f80 	.word	0x43490f80
 80244c0:	3f22f984 	.word	0x3f22f984
 80244c4:	08025ca4 	.word	0x08025ca4
 80244c8:	2e85a300 	.word	0x2e85a300
 80244cc:	248d3132 	.word	0x248d3132
 80244d0:	43800000 	.word	0x43800000
 80244d4:	08025d24 	.word	0x08025d24

080244d8 <__ieee754_sqrtf>:
 80244d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80244dc:	4770      	bx	lr
	...

080244e0 <__kernel_cosf>:
 80244e0:	ee10 3a10 	vmov	r3, s0
 80244e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80244e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80244ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80244f0:	da05      	bge.n	80244fe <__kernel_cosf+0x1e>
 80244f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80244f6:	ee17 2a90 	vmov	r2, s15
 80244fa:	2a00      	cmp	r2, #0
 80244fc:	d03d      	beq.n	802457a <__kernel_cosf+0x9a>
 80244fe:	ee60 5a00 	vmul.f32	s11, s0, s0
 8024502:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024580 <__kernel_cosf+0xa0>
 8024506:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024584 <__kernel_cosf+0xa4>
 802450a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8024588 <__kernel_cosf+0xa8>
 802450e:	4a1f      	ldr	r2, [pc, #124]	; (802458c <__kernel_cosf+0xac>)
 8024510:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8024514:	4293      	cmp	r3, r2
 8024516:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8024590 <__kernel_cosf+0xb0>
 802451a:	eee7 7a25 	vfma.f32	s15, s14, s11
 802451e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024594 <__kernel_cosf+0xb4>
 8024522:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024526:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8024598 <__kernel_cosf+0xb8>
 802452a:	eee7 7a25 	vfma.f32	s15, s14, s11
 802452e:	eeb0 7a66 	vmov.f32	s14, s13
 8024532:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024536:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 802453a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 802453e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8024542:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8024546:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802454a:	dc04      	bgt.n	8024556 <__kernel_cosf+0x76>
 802454c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8024550:	ee36 0a47 	vsub.f32	s0, s12, s14
 8024554:	4770      	bx	lr
 8024556:	4a11      	ldr	r2, [pc, #68]	; (802459c <__kernel_cosf+0xbc>)
 8024558:	4293      	cmp	r3, r2
 802455a:	bfda      	itte	le
 802455c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8024560:	ee06 3a90 	vmovle	s13, r3
 8024564:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8024568:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802456c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8024570:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024574:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024578:	4770      	bx	lr
 802457a:	eeb0 0a46 	vmov.f32	s0, s12
 802457e:	4770      	bx	lr
 8024580:	ad47d74e 	.word	0xad47d74e
 8024584:	310f74f6 	.word	0x310f74f6
 8024588:	3d2aaaab 	.word	0x3d2aaaab
 802458c:	3e999999 	.word	0x3e999999
 8024590:	b493f27c 	.word	0xb493f27c
 8024594:	37d00d01 	.word	0x37d00d01
 8024598:	bab60b61 	.word	0xbab60b61
 802459c:	3f480000 	.word	0x3f480000

080245a0 <__kernel_rem_pio2f>:
 80245a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a4:	ed2d 8b04 	vpush	{d8-d9}
 80245a8:	b0d7      	sub	sp, #348	; 0x15c
 80245aa:	4616      	mov	r6, r2
 80245ac:	4698      	mov	r8, r3
 80245ae:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80245b0:	4bbb      	ldr	r3, [pc, #748]	; (80248a0 <__kernel_rem_pio2f+0x300>)
 80245b2:	9001      	str	r0, [sp, #4]
 80245b4:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80245b8:	1d33      	adds	r3, r6, #4
 80245ba:	460d      	mov	r5, r1
 80245bc:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 80245c0:	db29      	blt.n	8024616 <__kernel_rem_pio2f+0x76>
 80245c2:	1ef1      	subs	r1, r6, #3
 80245c4:	bf48      	it	mi
 80245c6:	1d31      	addmi	r1, r6, #4
 80245c8:	10c9      	asrs	r1, r1, #3
 80245ca:	1c4c      	adds	r4, r1, #1
 80245cc:	00e3      	lsls	r3, r4, #3
 80245ce:	9302      	str	r3, [sp, #8]
 80245d0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80245d2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80248b0 <__kernel_rem_pio2f+0x310>
 80245d6:	eba1 0009 	sub.w	r0, r1, r9
 80245da:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80245de:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80245e2:	eb07 0c09 	add.w	ip, r7, r9
 80245e6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80245ea:	2300      	movs	r3, #0
 80245ec:	4563      	cmp	r3, ip
 80245ee:	dd14      	ble.n	802461a <__kernel_rem_pio2f+0x7a>
 80245f0:	ab1a      	add	r3, sp, #104	; 0x68
 80245f2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80245f6:	46cc      	mov	ip, r9
 80245f8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80245fc:	f1c8 0b01 	rsb	fp, r8, #1
 8024600:	eb0b 020c 	add.w	r2, fp, ip
 8024604:	4297      	cmp	r7, r2
 8024606:	db27      	blt.n	8024658 <__kernel_rem_pio2f+0xb8>
 8024608:	f8dd e004 	ldr.w	lr, [sp, #4]
 802460c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80248b0 <__kernel_rem_pio2f+0x310>
 8024610:	4618      	mov	r0, r3
 8024612:	2200      	movs	r2, #0
 8024614:	e016      	b.n	8024644 <__kernel_rem_pio2f+0xa4>
 8024616:	2100      	movs	r1, #0
 8024618:	e7d7      	b.n	80245ca <__kernel_rem_pio2f+0x2a>
 802461a:	42d8      	cmn	r0, r3
 802461c:	bf5d      	ittte	pl
 802461e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8024622:	ee07 2a90 	vmovpl	s15, r2
 8024626:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802462a:	eef0 7a47 	vmovmi.f32	s15, s14
 802462e:	ecea 7a01 	vstmia	sl!, {s15}
 8024632:	3301      	adds	r3, #1
 8024634:	e7da      	b.n	80245ec <__kernel_rem_pio2f+0x4c>
 8024636:	ecfe 6a01 	vldmia	lr!, {s13}
 802463a:	ed90 7a00 	vldr	s14, [r0]
 802463e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024642:	3201      	adds	r2, #1
 8024644:	454a      	cmp	r2, r9
 8024646:	f1a0 0004 	sub.w	r0, r0, #4
 802464a:	ddf4      	ble.n	8024636 <__kernel_rem_pio2f+0x96>
 802464c:	ecea 7a01 	vstmia	sl!, {s15}
 8024650:	3304      	adds	r3, #4
 8024652:	f10c 0c01 	add.w	ip, ip, #1
 8024656:	e7d3      	b.n	8024600 <__kernel_rem_pio2f+0x60>
 8024658:	ab06      	add	r3, sp, #24
 802465a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 802465e:	9304      	str	r3, [sp, #16]
 8024660:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8024662:	eddf 8a92 	vldr	s17, [pc, #584]	; 80248ac <__kernel_rem_pio2f+0x30c>
 8024666:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80248a8 <__kernel_rem_pio2f+0x308>
 802466a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802466e:	9303      	str	r3, [sp, #12]
 8024670:	46ba      	mov	sl, r7
 8024672:	ab56      	add	r3, sp, #344	; 0x158
 8024674:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8024678:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 802467c:	ab06      	add	r3, sp, #24
 802467e:	4618      	mov	r0, r3
 8024680:	4652      	mov	r2, sl
 8024682:	2a00      	cmp	r2, #0
 8024684:	dc51      	bgt.n	802472a <__kernel_rem_pio2f+0x18a>
 8024686:	4620      	mov	r0, r4
 8024688:	9305      	str	r3, [sp, #20]
 802468a:	f7fb fb31 	bl	801fcf0 <scalbnf>
 802468e:	eeb0 8a40 	vmov.f32	s16, s0
 8024692:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8024696:	ee28 0a00 	vmul.f32	s0, s16, s0
 802469a:	f000 fa53 	bl	8024b44 <floorf>
 802469e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80246a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80246a6:	2c00      	cmp	r4, #0
 80246a8:	9b05      	ldr	r3, [sp, #20]
 80246aa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80246ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80246b2:	edcd 7a00 	vstr	s15, [sp]
 80246b6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80246ba:	dd4b      	ble.n	8024754 <__kernel_rem_pio2f+0x1b4>
 80246bc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80246c0:	aa06      	add	r2, sp, #24
 80246c2:	f1c4 0e08 	rsb	lr, r4, #8
 80246c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80246ca:	ee17 1a90 	vmov	r1, s15
 80246ce:	fa42 f00e 	asr.w	r0, r2, lr
 80246d2:	4401      	add	r1, r0
 80246d4:	9100      	str	r1, [sp, #0]
 80246d6:	fa00 f00e 	lsl.w	r0, r0, lr
 80246da:	a906      	add	r1, sp, #24
 80246dc:	1a12      	subs	r2, r2, r0
 80246de:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80246e2:	f1c4 0007 	rsb	r0, r4, #7
 80246e6:	fa42 fb00 	asr.w	fp, r2, r0
 80246ea:	f1bb 0f00 	cmp.w	fp, #0
 80246ee:	dd43      	ble.n	8024778 <__kernel_rem_pio2f+0x1d8>
 80246f0:	9a00      	ldr	r2, [sp, #0]
 80246f2:	f04f 0e00 	mov.w	lr, #0
 80246f6:	3201      	adds	r2, #1
 80246f8:	9200      	str	r2, [sp, #0]
 80246fa:	4670      	mov	r0, lr
 80246fc:	45f2      	cmp	sl, lr
 80246fe:	dc6c      	bgt.n	80247da <__kernel_rem_pio2f+0x23a>
 8024700:	2c00      	cmp	r4, #0
 8024702:	dd04      	ble.n	802470e <__kernel_rem_pio2f+0x16e>
 8024704:	2c01      	cmp	r4, #1
 8024706:	d079      	beq.n	80247fc <__kernel_rem_pio2f+0x25c>
 8024708:	2c02      	cmp	r4, #2
 802470a:	f000 8082 	beq.w	8024812 <__kernel_rem_pio2f+0x272>
 802470e:	f1bb 0f02 	cmp.w	fp, #2
 8024712:	d131      	bne.n	8024778 <__kernel_rem_pio2f+0x1d8>
 8024714:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024718:	ee30 8a48 	vsub.f32	s16, s0, s16
 802471c:	b360      	cbz	r0, 8024778 <__kernel_rem_pio2f+0x1d8>
 802471e:	4620      	mov	r0, r4
 8024720:	f7fb fae6 	bl	801fcf0 <scalbnf>
 8024724:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024728:	e026      	b.n	8024778 <__kernel_rem_pio2f+0x1d8>
 802472a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802472e:	3a01      	subs	r2, #1
 8024730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024734:	a942      	add	r1, sp, #264	; 0x108
 8024736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802473a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 802473e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8024742:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024746:	eca0 0a01 	vstmia	r0!, {s0}
 802474a:	ed9c 0a00 	vldr	s0, [ip]
 802474e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8024752:	e796      	b.n	8024682 <__kernel_rem_pio2f+0xe2>
 8024754:	d107      	bne.n	8024766 <__kernel_rem_pio2f+0x1c6>
 8024756:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 802475a:	a906      	add	r1, sp, #24
 802475c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8024760:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8024764:	e7c1      	b.n	80246ea <__kernel_rem_pio2f+0x14a>
 8024766:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802476a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802476e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024772:	da2f      	bge.n	80247d4 <__kernel_rem_pio2f+0x234>
 8024774:	f04f 0b00 	mov.w	fp, #0
 8024778:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024780:	f040 8098 	bne.w	80248b4 <__kernel_rem_pio2f+0x314>
 8024784:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8024788:	469c      	mov	ip, r3
 802478a:	2200      	movs	r2, #0
 802478c:	45bc      	cmp	ip, r7
 802478e:	da48      	bge.n	8024822 <__kernel_rem_pio2f+0x282>
 8024790:	2a00      	cmp	r2, #0
 8024792:	d05f      	beq.n	8024854 <__kernel_rem_pio2f+0x2b4>
 8024794:	aa06      	add	r2, sp, #24
 8024796:	3c08      	subs	r4, #8
 8024798:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802479c:	2900      	cmp	r1, #0
 802479e:	d07d      	beq.n	802489c <__kernel_rem_pio2f+0x2fc>
 80247a0:	4620      	mov	r0, r4
 80247a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80247a6:	9301      	str	r3, [sp, #4]
 80247a8:	f7fb faa2 	bl	801fcf0 <scalbnf>
 80247ac:	9b01      	ldr	r3, [sp, #4]
 80247ae:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80248ac <__kernel_rem_pio2f+0x30c>
 80247b2:	4619      	mov	r1, r3
 80247b4:	2900      	cmp	r1, #0
 80247b6:	f280 80af 	bge.w	8024918 <__kernel_rem_pio2f+0x378>
 80247ba:	4618      	mov	r0, r3
 80247bc:	2400      	movs	r4, #0
 80247be:	2800      	cmp	r0, #0
 80247c0:	f2c0 80d0 	blt.w	8024964 <__kernel_rem_pio2f+0x3c4>
 80247c4:	a942      	add	r1, sp, #264	; 0x108
 80247c6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80247ca:	4a36      	ldr	r2, [pc, #216]	; (80248a4 <__kernel_rem_pio2f+0x304>)
 80247cc:	eddf 7a38 	vldr	s15, [pc, #224]	; 80248b0 <__kernel_rem_pio2f+0x310>
 80247d0:	2100      	movs	r1, #0
 80247d2:	e0bb      	b.n	802494c <__kernel_rem_pio2f+0x3ac>
 80247d4:	f04f 0b02 	mov.w	fp, #2
 80247d8:	e78a      	b.n	80246f0 <__kernel_rem_pio2f+0x150>
 80247da:	681a      	ldr	r2, [r3, #0]
 80247dc:	b948      	cbnz	r0, 80247f2 <__kernel_rem_pio2f+0x252>
 80247de:	b11a      	cbz	r2, 80247e8 <__kernel_rem_pio2f+0x248>
 80247e0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80247e4:	601a      	str	r2, [r3, #0]
 80247e6:	2201      	movs	r2, #1
 80247e8:	f10e 0e01 	add.w	lr, lr, #1
 80247ec:	3304      	adds	r3, #4
 80247ee:	4610      	mov	r0, r2
 80247f0:	e784      	b.n	80246fc <__kernel_rem_pio2f+0x15c>
 80247f2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80247f6:	601a      	str	r2, [r3, #0]
 80247f8:	4602      	mov	r2, r0
 80247fa:	e7f5      	b.n	80247e8 <__kernel_rem_pio2f+0x248>
 80247fc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8024800:	ab06      	add	r3, sp, #24
 8024802:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8024806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802480a:	aa06      	add	r2, sp, #24
 802480c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8024810:	e77d      	b.n	802470e <__kernel_rem_pio2f+0x16e>
 8024812:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8024816:	ab06      	add	r3, sp, #24
 8024818:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 802481c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024820:	e7f3      	b.n	802480a <__kernel_rem_pio2f+0x26a>
 8024822:	a906      	add	r1, sp, #24
 8024824:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8024828:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 802482c:	4302      	orrs	r2, r0
 802482e:	e7ad      	b.n	802478c <__kernel_rem_pio2f+0x1ec>
 8024830:	3001      	adds	r0, #1
 8024832:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8024836:	2a00      	cmp	r2, #0
 8024838:	d0fa      	beq.n	8024830 <__kernel_rem_pio2f+0x290>
 802483a:	a91a      	add	r1, sp, #104	; 0x68
 802483c:	eb0a 0208 	add.w	r2, sl, r8
 8024840:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8024844:	f10a 0301 	add.w	r3, sl, #1
 8024848:	eb0a 0100 	add.w	r1, sl, r0
 802484c:	4299      	cmp	r1, r3
 802484e:	da04      	bge.n	802485a <__kernel_rem_pio2f+0x2ba>
 8024850:	468a      	mov	sl, r1
 8024852:	e70e      	b.n	8024672 <__kernel_rem_pio2f+0xd2>
 8024854:	9b04      	ldr	r3, [sp, #16]
 8024856:	2001      	movs	r0, #1
 8024858:	e7eb      	b.n	8024832 <__kernel_rem_pio2f+0x292>
 802485a:	9803      	ldr	r0, [sp, #12]
 802485c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8024860:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8024864:	9000      	str	r0, [sp, #0]
 8024866:	ee07 0a90 	vmov	s15, r0
 802486a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802486e:	2000      	movs	r0, #0
 8024870:	ece2 7a01 	vstmia	r2!, {s15}
 8024874:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80248b0 <__kernel_rem_pio2f+0x310>
 8024878:	4696      	mov	lr, r2
 802487a:	4548      	cmp	r0, r9
 802487c:	dd06      	ble.n	802488c <__kernel_rem_pio2f+0x2ec>
 802487e:	a842      	add	r0, sp, #264	; 0x108
 8024880:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024884:	edc0 7a00 	vstr	s15, [r0]
 8024888:	3301      	adds	r3, #1
 802488a:	e7df      	b.n	802484c <__kernel_rem_pio2f+0x2ac>
 802488c:	ecfc 6a01 	vldmia	ip!, {s13}
 8024890:	ed3e 7a01 	vldmdb	lr!, {s14}
 8024894:	3001      	adds	r0, #1
 8024896:	eee6 7a87 	vfma.f32	s15, s13, s14
 802489a:	e7ee      	b.n	802487a <__kernel_rem_pio2f+0x2da>
 802489c:	3b01      	subs	r3, #1
 802489e:	e779      	b.n	8024794 <__kernel_rem_pio2f+0x1f4>
 80248a0:	08026068 	.word	0x08026068
 80248a4:	0802603c 	.word	0x0802603c
 80248a8:	43800000 	.word	0x43800000
 80248ac:	3b800000 	.word	0x3b800000
 80248b0:	00000000 	.word	0x00000000
 80248b4:	9b02      	ldr	r3, [sp, #8]
 80248b6:	eeb0 0a48 	vmov.f32	s0, s16
 80248ba:	1b98      	subs	r0, r3, r6
 80248bc:	f7fb fa18 	bl	801fcf0 <scalbnf>
 80248c0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80248a8 <__kernel_rem_pio2f+0x308>
 80248c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80248c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248cc:	db1b      	blt.n	8024906 <__kernel_rem_pio2f+0x366>
 80248ce:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80248ac <__kernel_rem_pio2f+0x30c>
 80248d2:	ee60 7a27 	vmul.f32	s15, s0, s15
 80248d6:	aa06      	add	r2, sp, #24
 80248d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80248dc:	a906      	add	r1, sp, #24
 80248de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80248e2:	3408      	adds	r4, #8
 80248e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80248e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80248ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80248f0:	ee10 3a10 	vmov	r3, s0
 80248f4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80248f8:	ee17 2a90 	vmov	r2, s15
 80248fc:	f10a 0301 	add.w	r3, sl, #1
 8024900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8024904:	e74c      	b.n	80247a0 <__kernel_rem_pio2f+0x200>
 8024906:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802490a:	aa06      	add	r2, sp, #24
 802490c:	ee10 3a10 	vmov	r3, s0
 8024910:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8024914:	4653      	mov	r3, sl
 8024916:	e743      	b.n	80247a0 <__kernel_rem_pio2f+0x200>
 8024918:	aa42      	add	r2, sp, #264	; 0x108
 802491a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 802491e:	aa06      	add	r2, sp, #24
 8024920:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8024924:	9201      	str	r2, [sp, #4]
 8024926:	ee07 2a90 	vmov	s15, r2
 802492a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802492e:	3901      	subs	r1, #1
 8024930:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024934:	ee20 0a07 	vmul.f32	s0, s0, s14
 8024938:	edc0 7a00 	vstr	s15, [r0]
 802493c:	e73a      	b.n	80247b4 <__kernel_rem_pio2f+0x214>
 802493e:	ecf2 6a01 	vldmia	r2!, {s13}
 8024942:	ecb6 7a01 	vldmia	r6!, {s14}
 8024946:	eee6 7a87 	vfma.f32	s15, s13, s14
 802494a:	3101      	adds	r1, #1
 802494c:	42b9      	cmp	r1, r7
 802494e:	dc01      	bgt.n	8024954 <__kernel_rem_pio2f+0x3b4>
 8024950:	428c      	cmp	r4, r1
 8024952:	daf4      	bge.n	802493e <__kernel_rem_pio2f+0x39e>
 8024954:	aa56      	add	r2, sp, #344	; 0x158
 8024956:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 802495a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802495e:	3801      	subs	r0, #1
 8024960:	3401      	adds	r4, #1
 8024962:	e72c      	b.n	80247be <__kernel_rem_pio2f+0x21e>
 8024964:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8024966:	2a02      	cmp	r2, #2
 8024968:	dc0a      	bgt.n	8024980 <__kernel_rem_pio2f+0x3e0>
 802496a:	2a00      	cmp	r2, #0
 802496c:	dc61      	bgt.n	8024a32 <__kernel_rem_pio2f+0x492>
 802496e:	d03c      	beq.n	80249ea <__kernel_rem_pio2f+0x44a>
 8024970:	9b00      	ldr	r3, [sp, #0]
 8024972:	f003 0007 	and.w	r0, r3, #7
 8024976:	b057      	add	sp, #348	; 0x15c
 8024978:	ecbd 8b04 	vpop	{d8-d9}
 802497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024980:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8024982:	2a03      	cmp	r2, #3
 8024984:	d1f4      	bne.n	8024970 <__kernel_rem_pio2f+0x3d0>
 8024986:	aa2e      	add	r2, sp, #184	; 0xb8
 8024988:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 802498c:	4608      	mov	r0, r1
 802498e:	461c      	mov	r4, r3
 8024990:	2c00      	cmp	r4, #0
 8024992:	f1a0 0004 	sub.w	r0, r0, #4
 8024996:	dc59      	bgt.n	8024a4c <__kernel_rem_pio2f+0x4ac>
 8024998:	4618      	mov	r0, r3
 802499a:	2801      	cmp	r0, #1
 802499c:	f1a1 0104 	sub.w	r1, r1, #4
 80249a0:	dc64      	bgt.n	8024a6c <__kernel_rem_pio2f+0x4cc>
 80249a2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80248b0 <__kernel_rem_pio2f+0x310>
 80249a6:	2b01      	cmp	r3, #1
 80249a8:	dc70      	bgt.n	8024a8c <__kernel_rem_pio2f+0x4ec>
 80249aa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80249ae:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80249b2:	f1bb 0f00 	cmp.w	fp, #0
 80249b6:	d172      	bne.n	8024a9e <__kernel_rem_pio2f+0x4fe>
 80249b8:	edc5 6a00 	vstr	s13, [r5]
 80249bc:	ed85 7a01 	vstr	s14, [r5, #4]
 80249c0:	edc5 7a02 	vstr	s15, [r5, #8]
 80249c4:	e7d4      	b.n	8024970 <__kernel_rem_pio2f+0x3d0>
 80249c6:	aa2e      	add	r2, sp, #184	; 0xb8
 80249c8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80249cc:	ed91 7a00 	vldr	s14, [r1]
 80249d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80249d4:	3b01      	subs	r3, #1
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	daf5      	bge.n	80249c6 <__kernel_rem_pio2f+0x426>
 80249da:	f1bb 0f00 	cmp.w	fp, #0
 80249de:	d001      	beq.n	80249e4 <__kernel_rem_pio2f+0x444>
 80249e0:	eef1 7a67 	vneg.f32	s15, s15
 80249e4:	edc5 7a00 	vstr	s15, [r5]
 80249e8:	e7c2      	b.n	8024970 <__kernel_rem_pio2f+0x3d0>
 80249ea:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80248b0 <__kernel_rem_pio2f+0x310>
 80249ee:	e7f2      	b.n	80249d6 <__kernel_rem_pio2f+0x436>
 80249f0:	aa2e      	add	r2, sp, #184	; 0xb8
 80249f2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80249f6:	edd0 7a00 	vldr	s15, [r0]
 80249fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80249fe:	3901      	subs	r1, #1
 8024a00:	2900      	cmp	r1, #0
 8024a02:	daf5      	bge.n	80249f0 <__kernel_rem_pio2f+0x450>
 8024a04:	f1bb 0f00 	cmp.w	fp, #0
 8024a08:	d017      	beq.n	8024a3a <__kernel_rem_pio2f+0x49a>
 8024a0a:	eef1 7a47 	vneg.f32	s15, s14
 8024a0e:	edc5 7a00 	vstr	s15, [r5]
 8024a12:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8024a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024a1a:	a82f      	add	r0, sp, #188	; 0xbc
 8024a1c:	2101      	movs	r1, #1
 8024a1e:	428b      	cmp	r3, r1
 8024a20:	da0e      	bge.n	8024a40 <__kernel_rem_pio2f+0x4a0>
 8024a22:	f1bb 0f00 	cmp.w	fp, #0
 8024a26:	d001      	beq.n	8024a2c <__kernel_rem_pio2f+0x48c>
 8024a28:	eef1 7a67 	vneg.f32	s15, s15
 8024a2c:	edc5 7a01 	vstr	s15, [r5, #4]
 8024a30:	e79e      	b.n	8024970 <__kernel_rem_pio2f+0x3d0>
 8024a32:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80248b0 <__kernel_rem_pio2f+0x310>
 8024a36:	4619      	mov	r1, r3
 8024a38:	e7e2      	b.n	8024a00 <__kernel_rem_pio2f+0x460>
 8024a3a:	eef0 7a47 	vmov.f32	s15, s14
 8024a3e:	e7e6      	b.n	8024a0e <__kernel_rem_pio2f+0x46e>
 8024a40:	ecb0 7a01 	vldmia	r0!, {s14}
 8024a44:	3101      	adds	r1, #1
 8024a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024a4a:	e7e8      	b.n	8024a1e <__kernel_rem_pio2f+0x47e>
 8024a4c:	edd0 7a00 	vldr	s15, [r0]
 8024a50:	edd0 6a01 	vldr	s13, [r0, #4]
 8024a54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024a58:	3c01      	subs	r4, #1
 8024a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024a5e:	ed80 7a00 	vstr	s14, [r0]
 8024a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024a66:	edc0 7a01 	vstr	s15, [r0, #4]
 8024a6a:	e791      	b.n	8024990 <__kernel_rem_pio2f+0x3f0>
 8024a6c:	edd1 7a00 	vldr	s15, [r1]
 8024a70:	edd1 6a01 	vldr	s13, [r1, #4]
 8024a74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024a78:	3801      	subs	r0, #1
 8024a7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024a7e:	ed81 7a00 	vstr	s14, [r1]
 8024a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024a86:	edc1 7a01 	vstr	s15, [r1, #4]
 8024a8a:	e786      	b.n	802499a <__kernel_rem_pio2f+0x3fa>
 8024a8c:	aa2e      	add	r2, sp, #184	; 0xb8
 8024a8e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024a92:	ed91 7a00 	vldr	s14, [r1]
 8024a96:	3b01      	subs	r3, #1
 8024a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024a9c:	e783      	b.n	80249a6 <__kernel_rem_pio2f+0x406>
 8024a9e:	eef1 6a66 	vneg.f32	s13, s13
 8024aa2:	eeb1 7a47 	vneg.f32	s14, s14
 8024aa6:	edc5 6a00 	vstr	s13, [r5]
 8024aaa:	ed85 7a01 	vstr	s14, [r5, #4]
 8024aae:	eef1 7a67 	vneg.f32	s15, s15
 8024ab2:	e785      	b.n	80249c0 <__kernel_rem_pio2f+0x420>

08024ab4 <__kernel_sinf>:
 8024ab4:	ee10 3a10 	vmov	r3, s0
 8024ab8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024abc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8024ac0:	da04      	bge.n	8024acc <__kernel_sinf+0x18>
 8024ac2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024ac6:	ee17 3a90 	vmov	r3, s15
 8024aca:	b35b      	cbz	r3, 8024b24 <__kernel_sinf+0x70>
 8024acc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8024ad0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8024b28 <__kernel_sinf+0x74>
 8024ad4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8024b2c <__kernel_sinf+0x78>
 8024ad8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024adc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8024b30 <__kernel_sinf+0x7c>
 8024ae0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024ae4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8024b34 <__kernel_sinf+0x80>
 8024ae8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024aec:	eddf 7a12 	vldr	s15, [pc, #72]	; 8024b38 <__kernel_sinf+0x84>
 8024af0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8024af4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024af8:	b930      	cbnz	r0, 8024b08 <__kernel_sinf+0x54>
 8024afa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8024b3c <__kernel_sinf+0x88>
 8024afe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024b02:	eea6 0a26 	vfma.f32	s0, s12, s13
 8024b06:	4770      	bx	lr
 8024b08:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8024b0c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8024b10:	eee0 7a86 	vfma.f32	s15, s1, s12
 8024b14:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8024b18:	eddf 7a09 	vldr	s15, [pc, #36]	; 8024b40 <__kernel_sinf+0x8c>
 8024b1c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8024b20:	ee30 0a60 	vsub.f32	s0, s0, s1
 8024b24:	4770      	bx	lr
 8024b26:	bf00      	nop
 8024b28:	2f2ec9d3 	.word	0x2f2ec9d3
 8024b2c:	b2d72f34 	.word	0xb2d72f34
 8024b30:	3638ef1b 	.word	0x3638ef1b
 8024b34:	b9500d01 	.word	0xb9500d01
 8024b38:	3c088889 	.word	0x3c088889
 8024b3c:	be2aaaab 	.word	0xbe2aaaab
 8024b40:	3e2aaaab 	.word	0x3e2aaaab

08024b44 <floorf>:
 8024b44:	ee10 3a10 	vmov	r3, s0
 8024b48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024b4c:	3a7f      	subs	r2, #127	; 0x7f
 8024b4e:	2a16      	cmp	r2, #22
 8024b50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024b54:	dc2a      	bgt.n	8024bac <floorf+0x68>
 8024b56:	2a00      	cmp	r2, #0
 8024b58:	da11      	bge.n	8024b7e <floorf+0x3a>
 8024b5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024bbc <floorf+0x78>
 8024b5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024b62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b6a:	dd05      	ble.n	8024b78 <floorf+0x34>
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	da23      	bge.n	8024bb8 <floorf+0x74>
 8024b70:	4a13      	ldr	r2, [pc, #76]	; (8024bc0 <floorf+0x7c>)
 8024b72:	2900      	cmp	r1, #0
 8024b74:	bf18      	it	ne
 8024b76:	4613      	movne	r3, r2
 8024b78:	ee00 3a10 	vmov	s0, r3
 8024b7c:	4770      	bx	lr
 8024b7e:	4911      	ldr	r1, [pc, #68]	; (8024bc4 <floorf+0x80>)
 8024b80:	4111      	asrs	r1, r2
 8024b82:	420b      	tst	r3, r1
 8024b84:	d0fa      	beq.n	8024b7c <floorf+0x38>
 8024b86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024bbc <floorf+0x78>
 8024b8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8024b8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b96:	ddef      	ble.n	8024b78 <floorf+0x34>
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	bfbe      	ittt	lt
 8024b9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8024ba0:	fa40 f202 	asrlt.w	r2, r0, r2
 8024ba4:	189b      	addlt	r3, r3, r2
 8024ba6:	ea23 0301 	bic.w	r3, r3, r1
 8024baa:	e7e5      	b.n	8024b78 <floorf+0x34>
 8024bac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024bb0:	d3e4      	bcc.n	8024b7c <floorf+0x38>
 8024bb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024bb6:	4770      	bx	lr
 8024bb8:	2300      	movs	r3, #0
 8024bba:	e7dd      	b.n	8024b78 <floorf+0x34>
 8024bbc:	7149f2ca 	.word	0x7149f2ca
 8024bc0:	bf800000 	.word	0xbf800000
 8024bc4:	007fffff 	.word	0x007fffff

08024bc8 <rintf>:
 8024bc8:	ee10 2a10 	vmov	r2, s0
 8024bcc:	b513      	push	{r0, r1, r4, lr}
 8024bce:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024bd2:	397f      	subs	r1, #127	; 0x7f
 8024bd4:	2916      	cmp	r1, #22
 8024bd6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8024bda:	dc47      	bgt.n	8024c6c <rintf+0xa4>
 8024bdc:	b32b      	cbz	r3, 8024c2a <rintf+0x62>
 8024bde:	2900      	cmp	r1, #0
 8024be0:	ee10 3a10 	vmov	r3, s0
 8024be4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8024be8:	da21      	bge.n	8024c2e <rintf+0x66>
 8024bea:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8024bee:	425b      	negs	r3, r3
 8024bf0:	4921      	ldr	r1, [pc, #132]	; (8024c78 <rintf+0xb0>)
 8024bf2:	0a5b      	lsrs	r3, r3, #9
 8024bf4:	0d12      	lsrs	r2, r2, #20
 8024bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024bfa:	0512      	lsls	r2, r2, #20
 8024bfc:	4313      	orrs	r3, r2
 8024bfe:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8024c02:	ee07 3a90 	vmov	s15, r3
 8024c06:	edd1 6a00 	vldr	s13, [r1]
 8024c0a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8024c0e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8024c12:	eddd 7a01 	vldr	s15, [sp, #4]
 8024c16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024c1a:	ee17 3a90 	vmov	r3, s15
 8024c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024c22:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8024c26:	ee00 3a10 	vmov	s0, r3
 8024c2a:	b002      	add	sp, #8
 8024c2c:	bd10      	pop	{r4, pc}
 8024c2e:	4a13      	ldr	r2, [pc, #76]	; (8024c7c <rintf+0xb4>)
 8024c30:	410a      	asrs	r2, r1
 8024c32:	4213      	tst	r3, r2
 8024c34:	d0f9      	beq.n	8024c2a <rintf+0x62>
 8024c36:	0854      	lsrs	r4, r2, #1
 8024c38:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8024c3c:	d006      	beq.n	8024c4c <rintf+0x84>
 8024c3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8024c42:	ea23 0304 	bic.w	r3, r3, r4
 8024c46:	fa42 f101 	asr.w	r1, r2, r1
 8024c4a:	430b      	orrs	r3, r1
 8024c4c:	4a0a      	ldr	r2, [pc, #40]	; (8024c78 <rintf+0xb0>)
 8024c4e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8024c52:	ed90 7a00 	vldr	s14, [r0]
 8024c56:	ee07 3a90 	vmov	s15, r3
 8024c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024c5e:	edcd 7a01 	vstr	s15, [sp, #4]
 8024c62:	ed9d 0a01 	vldr	s0, [sp, #4]
 8024c66:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024c6a:	e7de      	b.n	8024c2a <rintf+0x62>
 8024c6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024c70:	d3db      	bcc.n	8024c2a <rintf+0x62>
 8024c72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024c76:	e7d8      	b.n	8024c2a <rintf+0x62>
 8024c78:	08026074 	.word	0x08026074
 8024c7c:	007fffff 	.word	0x007fffff

08024c80 <_init>:
 8024c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c82:	bf00      	nop
 8024c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024c86:	bc08      	pop	{r3}
 8024c88:	469e      	mov	lr, r3
 8024c8a:	4770      	bx	lr

08024c8c <_fini>:
 8024c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c8e:	bf00      	nop
 8024c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024c92:	bc08      	pop	{r3}
 8024c94:	469e      	mov	lr, r3
 8024c96:	4770      	bx	lr
