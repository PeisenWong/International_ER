
International_ER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000250e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013ac  08025278  08025278  00035278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026624  08026624  0004029c  2**0
                  CONTENTS
  4 .ARM          00000008  08026624  08026624  00036624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802662c  0802662c  0004029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802662c  0802662c  0003662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026630  08026630  00036630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  08026634  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a6bc  200002a0  080268d0  000402a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a95c  080268d0  0004a95c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000aab33  00000000  00000000  000402cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a618  00000000  00000000  000eadff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002888  00000000  00000000  000f5418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025d8  00000000  00000000  000f7ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031beb  00000000  00000000  000fa278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000499a6  00000000  00000000  0012be63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb6c5  00000000  00000000  00175809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00260ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c060  00000000  00000000  00260f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08025260 	.word	0x08025260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	08025260 	.word	0x08025260

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ABTInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void ABTInit(float samp_time, float a, float b, float g, float *ip, float *pos, float *vel, float *acc, ABT_t *filt)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a07 	vstr	s0, [r7, #28]
 8000ff6:	edc7 0a06 	vstr	s1, [r7, #24]
 8000ffa:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ffe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
	filt->sample_time = samp_time;
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	filt->alpha = a;
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	filt->beta = b;
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	filt->gamma = g;
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
	filt->input = ip;
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	611a      	str	r2, [r3, #16]
	filt->pos_output = pos;
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	615a      	str	r2, [r3, #20]
	filt->vel_output = vel;
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
	filt->acc_output = acc;
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	61da      	str	r2, [r3, #28]
}
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <ABTEstimateInit>:

void ABTEstimateInit(ABT_t *filt)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	*(filt->pos_output) = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	*(filt->vel_output) = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	*(filt->acc_output) = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8001078:	b408      	push	{r3}
 800107a:	b580      	push	{r7, lr}
 800107c:	b089      	sub	sp, #36	; 0x24
 800107e:	af02      	add	r7, sp, #8
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001098:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	617a      	str	r2, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1d1a      	adds	r2, r3, #4
 80010b8:	617a      	str	r2, [r7, #20]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	617a      	str	r2, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1d1a      	adds	r2, r3, #4
 80010d2:	617a      	str	r2, [r7, #20]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6858      	ldr	r0, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8919      	ldrh	r1, [r3, #8]
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	f000 f908 	bl	8001300 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68d8      	ldr	r0, [r3, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8a19      	ldrh	r1, [r3, #16]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2302      	movs	r3, #2
 80010fe:	2201      	movs	r2, #1
 8001100:	f000 f8fe 	bl	8001300 <GPIOPinsInit>
 8001104:	e017      	b.n	8001136 <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	617a      	str	r2, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	1d1a      	adds	r2, r3, #4
 800111e:	617a      	str	r2, [r7, #20]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	1d1a      	adds	r2, r3, #4
 800112c:	617a      	str	r2, [r7, #20]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <BDCInit+0xd2>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001148:	e018      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d105      	bne.n	800115e <BDCInit+0xe6>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800115c:	e00e      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	2b08      	cmp	r3, #8
 8001164:	d105      	bne.n	8001172 <BDCInit+0xfa>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001170:	e004      	b.n	800117c <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001186:	b001      	add	sp, #4
 8001188:	4770      	bx	lr

0800118a <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db52      	blt.n	8001240 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <WriteBDC+0x24>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e018      	b.n	80011e0 <WriteBDC+0x56>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d105      	bne.n	80011c2 <WriteBDC+0x38>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6393      	str	r3, [r2, #56]	; 0x38
 80011c0:	e00e      	b.n	80011e0 <WriteBDC+0x56>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d105      	bne.n	80011d6 <WriteBDC+0x4c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011d4:	e004      	b.n	80011e0 <WriteBDC+0x56>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d110      	bne.n	800120a <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6858      	ldr	r0, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	891b      	ldrh	r3, [r3, #8]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	f016 fdc8 	bl	8017d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68d8      	ldr	r0, [r3, #12]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	f016 fdc0 	bl	8017d88 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 8001208:	e076      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d172      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7e1a      	ldrb	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	430a      	orrs	r2, r1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	7819      	ldrb	r1, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	43db      	mvns	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	400a      	ands	r2, r1
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
}
 800123e:	e05b      	b.n	80012f8 <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da58      	bge.n	80012f8 <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <WriteBDC+0xd2>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425a      	negs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e01e      	b.n	800129a <WriteBDC+0x110>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <WriteBDC+0xea>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	4259      	negs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	460b      	mov	r3, r1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	e012      	b.n	800129a <WriteBDC+0x110>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d107      	bne.n	800128c <WriteBDC+0x102>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4259      	negs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e006      	b.n	800129a <WriteBDC+0x110>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d110      	bne.n	80012c4 <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6858      	ldr	r0, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	891b      	ldrh	r3, [r3, #8]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f016 fd6b 	bl	8017d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68d8      	ldr	r0, [r3, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f016 fd63 	bl	8017d88 <HAL_GPIO_WritePin>
}
 80012c2:	e019      	b.n	80012f8 <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d115      	bne.n	80012f8 <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	7819      	ldrb	r1, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7e1b      	ldrb	r3, [r3, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	400a      	ands	r2, r1
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	7819      	ldrb	r1, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7e5a      	ldrb	r2, [r3, #25]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	701a      	strb	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b092      	sub	sp, #72	; 0x48
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a6a      	ldr	r2, [pc, #424]	; (80014cc <GPIOPinsInit+0x1cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f000 80af 	beq.w	8001488 <GPIOPinsInit+0x188>
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIOPinsInit+0x1cc>)
 800132c:	4293      	cmp	r3, r2
 800132e:	f200 80ba 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <GPIOPinsInit+0x1d0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f000 8098 	beq.w	800146a <GPIOPinsInit+0x16a>
 800133a:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <GPIOPinsInit+0x1d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f200 80b2 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001342:	4a64      	ldr	r2, [pc, #400]	; (80014d4 <GPIOPinsInit+0x1d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f000 8081 	beq.w	800144c <GPIOPinsInit+0x14c>
 800134a:	4a62      	ldr	r2, [pc, #392]	; (80014d4 <GPIOPinsInit+0x1d4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	f200 80aa 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <GPIOPinsInit+0x1d8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d06a      	beq.n	800142e <GPIOPinsInit+0x12e>
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIOPinsInit+0x1d8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80a3 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 8001360:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d054      	beq.n	8001410 <GPIOPinsInit+0x110>
 8001366:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <GPIOPinsInit+0x1dc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f200 809c 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800136e:	4a5c      	ldr	r2, [pc, #368]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03e      	beq.n	80013f2 <GPIOPinsInit+0xf2>
 8001374:	4a5a      	ldr	r2, [pc, #360]	; (80014e0 <GPIOPinsInit+0x1e0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	f200 8095 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <GPIOPinsInit+0x1e4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <GPIOPinsInit+0xd4>
 8001382:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <GPIOPinsInit+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f200 808e 	bhi.w	80014a6 <GPIOPinsInit+0x1a6>
 800138a:	4a57      	ldr	r2, [pc, #348]	; (80014e8 <GPIOPinsInit+0x1e8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d003      	beq.n	8001398 <GPIOPinsInit+0x98>
 8001390:	4a56      	ldr	r2, [pc, #344]	; (80014ec <GPIOPinsInit+0x1ec>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00f      	beq.n	80013b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001396:	e086      	b.n	80014a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80013b4:	e078      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80013d2:	e069      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80013f0:	e05a      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3d      	ldr	r2, [pc, #244]	; (80014f0 <GPIOPinsInit+0x1f0>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800140e:	e04b      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a35      	ldr	r2, [pc, #212]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800142c:	e03c      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	break;
 800144a:	e02d      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
	break;
 8001468:	e01e      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
	break;
 8001486:	e00f      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <GPIOPinsInit+0x1f0>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <GPIOPinsInit+0x1f0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
	break;
 80014a4:	e000      	b.n	80014a8 <GPIOPinsInit+0x1a8>
	default: break;
 80014a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80014a8:	897b      	ldrh	r3, [r7, #10]
 80014aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80014b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80014b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014bc:	4619      	mov	r1, r3
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f016 f9b2 	bl	8017828 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3748      	adds	r7, #72	; 0x48
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021c00 	.word	0x40021c00
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40023800 	.word	0x40023800

080014f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <PWMTimeBaseInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d103      	bne.n	8001528 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <PWMTimeBaseInit+0x174>)
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e057      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a50      	ldr	r2, [pc, #320]	; (800166c <PWMTimeBaseInit+0x178>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d104      	bne.n	800153a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e04e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a4c      	ldr	r2, [pc, #304]	; (8001670 <PWMTimeBaseInit+0x17c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d103      	bne.n	800154a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <PWMTimeBaseInit+0x180>)
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e046      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <PWMTimeBaseInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d103      	bne.n	800155a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <PWMTimeBaseInit+0x188>)
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e03e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <PWMTimeBaseInit+0x18c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d103      	bne.n	800156a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <PWMTimeBaseInit+0x190>)
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e036      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <PWMTimeBaseInit+0x194>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d103      	bne.n	800157a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <PWMTimeBaseInit+0x198>)
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e02e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <PWMTimeBaseInit+0x19c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d103      	bne.n	800158a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <PWMTimeBaseInit+0x1a0>)
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e026      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <PWMTimeBaseInit+0x1a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a41      	ldr	r2, [pc, #260]	; (800169c <PWMTimeBaseInit+0x1a8>)
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e01e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4a40      	ldr	r2, [pc, #256]	; (80016a0 <PWMTimeBaseInit+0x1ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <PWMTimeBaseInit+0x1b0>)
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e016      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <PWMTimeBaseInit+0x1b4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <PWMTimeBaseInit+0x1b8>)
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e00e      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <PWMTimeBaseInit+0x1bc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d103      	bne.n	80015ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a3b      	ldr	r2, [pc, #236]	; (80016b4 <PWMTimeBaseInit+0x1c0>)
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e006      	b.n	80015d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <PWMTimeBaseInit+0x1c4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a39      	ldr	r2, [pc, #228]	; (80016bc <PWMTimeBaseInit+0x1c8>)
 80015d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f019 f9ee 	bl	801a9dc <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001606:	f003 f895 	bl	8004734 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	4619      	mov	r1, r3
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f019 fd54 	bl	801b0c4 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001622:	f003 f887 	bl	8004734 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f019 fa4b 	bl	801aac2 <HAL_TIM_PWM_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001632:	f003 f87f 	bl	8004734 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f01a f939 	bl	801b8bc <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001650:	f003 f870 	bl	8004734 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f019 f9ec 	bl	801aa32 <HAL_TIM_Base_Start>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20005f2c 	.word	0x20005f2c
 8001668:	40010000 	.word	0x40010000
 800166c:	20006030 	.word	0x20006030
 8001670:	20005ce0 	.word	0x20005ce0
 8001674:	40000400 	.word	0x40000400
 8001678:	20005b1c 	.word	0x20005b1c
 800167c:	40000800 	.word	0x40000800
 8001680:	20005ca0 	.word	0x20005ca0
 8001684:	40000c00 	.word	0x40000c00
 8001688:	20005adc 	.word	0x20005adc
 800168c:	40010400 	.word	0x40010400
 8001690:	20005f6c 	.word	0x20005f6c
 8001694:	40014000 	.word	0x40014000
 8001698:	20005bfc 	.word	0x20005bfc
 800169c:	40014400 	.word	0x40014400
 80016a0:	20005e44 	.word	0x20005e44
 80016a4:	40014800 	.word	0x40014800
 80016a8:	20006150 	.word	0x20006150
 80016ac:	40001800 	.word	0x40001800
 80016b0:	20005dc4 	.word	0x20005dc4
 80016b4:	40001c00 	.word	0x40001c00
 80016b8:	20006110 	.word	0x20006110
 80016bc:	40002000 	.word	0x40002000

080016c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	615a      	str	r2, [r3, #20]
 80016e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016f2:	2370      	movs	r3, #112	; 0x70
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80016fe:	2308      	movs	r3, #8
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800170e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f019 fc0e 	bl	801af38 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001722:	f003 f807 	bl	8004734 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a95      	ldr	r2, [pc, #596]	; (8001980 <PWMChannelConfig+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	f000 80af 	beq.w	800188e <PWMChannelConfig+0x1ce>
 8001730:	4a93      	ldr	r2, [pc, #588]	; (8001980 <PWMChannelConfig+0x2c0>)
 8001732:	4293      	cmp	r3, r2
 8001734:	f200 80ba 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <PWMChannelConfig+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f000 8098 	beq.w	8001870 <PWMChannelConfig+0x1b0>
 8001740:	4a90      	ldr	r2, [pc, #576]	; (8001984 <PWMChannelConfig+0x2c4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f200 80b2 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001748:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <PWMChannelConfig+0x2c8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f000 8081 	beq.w	8001852 <PWMChannelConfig+0x192>
 8001750:	4a8d      	ldr	r2, [pc, #564]	; (8001988 <PWMChannelConfig+0x2c8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	f200 80aa 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001758:	4a8c      	ldr	r2, [pc, #560]	; (800198c <PWMChannelConfig+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d06a      	beq.n	8001834 <PWMChannelConfig+0x174>
 800175e:	4a8b      	ldr	r2, [pc, #556]	; (800198c <PWMChannelConfig+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	f200 80a3 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001766:	4a8a      	ldr	r2, [pc, #552]	; (8001990 <PWMChannelConfig+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <PWMChannelConfig+0x156>
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <PWMChannelConfig+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	f200 809c 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001774:	4a87      	ldr	r2, [pc, #540]	; (8001994 <PWMChannelConfig+0x2d4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d03e      	beq.n	80017f8 <PWMChannelConfig+0x138>
 800177a:	4a86      	ldr	r2, [pc, #536]	; (8001994 <PWMChannelConfig+0x2d4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f200 8095 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001782:	4a85      	ldr	r2, [pc, #532]	; (8001998 <PWMChannelConfig+0x2d8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d028      	beq.n	80017da <PWMChannelConfig+0x11a>
 8001788:	4a83      	ldr	r2, [pc, #524]	; (8001998 <PWMChannelConfig+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	f200 808e 	bhi.w	80018ac <PWMChannelConfig+0x1ec>
 8001790:	4a82      	ldr	r2, [pc, #520]	; (800199c <PWMChannelConfig+0x2dc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <PWMChannelConfig+0xde>
 8001796:	4a82      	ldr	r2, [pc, #520]	; (80019a0 <PWMChannelConfig+0x2e0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00f      	beq.n	80017bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800179c:	e086      	b.n	80018ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7f      	ldr	r2, [pc, #508]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80017ba:	e078      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a77      	ldr	r2, [pc, #476]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
 80017cc:	4b75      	ldr	r3, [pc, #468]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80017d8:	e069      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80017f6:	e05a      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	4a68      	ldr	r2, [pc, #416]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6313      	str	r3, [r2, #48]	; 0x30
 8001808:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001814:	e04b      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a61      	ldr	r2, [pc, #388]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001832:	e03c      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	4a59      	ldr	r2, [pc, #356]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6313      	str	r3, [r2, #48]	; 0x30
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001850:	e02d      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]
		break;
 800186e:	e01e      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a4a      	ldr	r2, [pc, #296]	; (80019a4 <PWMChannelConfig+0x2e4>)
 800187a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]
		break;
 800188c:	e00f      	b.n	80018ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <PWMChannelConfig+0x2e4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <PWMChannelConfig+0x2e4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
		break;
 80018aa:	e000      	b.n	80018ae <PWMChannelConfig+0x1ee>
		default: break;
 80018ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <PWMChannelConfig+0x2e8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d102      	bne.n	80018cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ca:	e04b      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <PWMChannelConfig+0x2ec>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d102      	bne.n	80018da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d8:	e044      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <PWMChannelConfig+0x2f0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d102      	bne.n	80018e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e6:	e03d      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a32      	ldr	r2, [pc, #200]	; (80019b4 <PWMChannelConfig+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d102      	bne.n	80018f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80018f4:	e036      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <PWMChannelConfig+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d102      	bne.n	8001904 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018fe:	2302      	movs	r3, #2
 8001900:	64bb      	str	r3, [r7, #72]	; 0x48
 8001902:	e02f      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a2d      	ldr	r2, [pc, #180]	; (80019bc <PWMChannelConfig+0x2fc>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d102      	bne.n	8001912 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001910:	e028      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a2a      	ldr	r2, [pc, #168]	; (80019c0 <PWMChannelConfig+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d102      	bne.n	8001920 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800191a:	2303      	movs	r3, #3
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	e021      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <PWMChannelConfig+0x304>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d102      	bne.n	800192e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001928:	2303      	movs	r3, #3
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
 800192c:	e01a      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <PWMChannelConfig+0x308>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001936:	2303      	movs	r3, #3
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
 800193a:	e013      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <PWMChannelConfig+0x30c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001944:	2309      	movs	r3, #9
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
 8001948:	e00c      	b.n	8001964 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <PWMChannelConfig+0x310>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001952:	2309      	movs	r3, #9
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e005      	b.n	8001964 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <PWMChannelConfig+0x314>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001960:	2309      	movs	r3, #9
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f015 ff5c 	bl	8017828 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f019 f8d0 	bl	801ab18 <HAL_TIM_PWM_Start>

}
 8001978:	bf00      	nop
 800197a:	3768      	adds	r7, #104	; 0x68
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40022000 	.word	0x40022000
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40021800 	.word	0x40021800
 800198c:	40021400 	.word	0x40021400
 8001990:	40021000 	.word	0x40021000
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40020800 	.word	0x40020800
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020400 	.word	0x40020400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	20005f2c 	.word	0x20005f2c
 80019ac:	20006030 	.word	0x20006030
 80019b0:	20005ce0 	.word	0x20005ce0
 80019b4:	20005b1c 	.word	0x20005b1c
 80019b8:	20005ca0 	.word	0x20005ca0
 80019bc:	20005adc 	.word	0x20005adc
 80019c0:	20005f6c 	.word	0x20005f6c
 80019c4:	20005bfc 	.word	0x20005bfc
 80019c8:	20005e44 	.word	0x20005e44
 80019cc:	20006150 	.word	0x20006150
 80019d0:	20005dc4 	.word	0x20005dc4
 80019d4:	20006110 	.word	0x20006110

080019d8 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 80019e0:	f107 0310 	add.w	r3, r7, #16
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f01d fd27 	bl	801f43c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a6b      	ldr	r2, [pc, #428]	; (8001ba8 <QEIInit+0x1d0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d106      	bne.n	8001a0e <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <QEIInit+0x1d4>)
 8001a04:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001a06:	2319      	movs	r3, #25
 8001a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a0c:	e036      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <QEIInit+0x1d8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d107      	bne.n	8001a26 <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1c:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001a1e:	231c      	movs	r3, #28
 8001a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a24:	e02a      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	; (8001bb4 <QEIInit+0x1dc>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d106      	bne.n	8001a3c <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <QEIInit+0x1e0>)
 8001a32:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001a34:	231d      	movs	r3, #29
 8001a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a3a:	e01f      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <QEIInit+0x1e4>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d106      	bne.n	8001a52 <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <QEIInit+0x1e8>)
 8001a48:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001a4a:	231e      	movs	r3, #30
 8001a4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a50:	e014      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <QEIInit+0x1ec>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d106      	bne.n	8001a68 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <QEIInit+0x1f0>)
 8001a5e:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a66:	e009      	b.n	8001a7c <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <QEIInit+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a57      	ldr	r2, [pc, #348]	; (8001bd0 <QEIInit+0x1f8>)
 8001a74:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001a76:	232c      	movs	r3, #44	; 0x2c
 8001a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8e:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	4619      	mov	r1, r3
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f019 f861 	bl	801ab94 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <QEIInit+0x104>
	{
		Error_Handler();
 8001ad8:	f002 fe2c 	bl	8004734 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 0308 	add.w	r3, r7, #8
 8001ae8:	4619      	mov	r1, r3
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f019 fee6 	bl	801b8bc <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <QEIInit+0x122>
	{
		Error_Handler();
 8001af6:	f002 fe1d 	bl	8004734 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0201 	mvn.w	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <QEIInit+0x1d0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b20:	2200      	movs	r2, #0
 8001b22:	210e      	movs	r1, #14
 8001b24:	4618      	mov	r0, r3
 8001b26:	f015 fa2f 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f015 fa62 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f015 fa41 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8001b3e:	e02a      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <QEIInit+0x1e4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001b48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	210e      	movs	r1, #14
 8001b50:	4618      	mov	r0, r3
 8001b52:	f015 fa19 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f015 fa4c 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b60:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b64:	4618      	mov	r0, r3
 8001b66:	f015 fa2b 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8001b6a:	e014      	b.n	8001b96 <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <QEIInit+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d110      	bne.n	8001b96 <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001b74:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b78:	2200      	movs	r2, #0
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f015 fa03 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001b82:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b86:	4618      	mov	r0, r3
 8001b88:	f015 fa36 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001b8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b90:	4618      	mov	r0, r3
 8001b92:	f015 fa15 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b96:	213c      	movs	r1, #60	; 0x3c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f019 f88d 	bl	801acb8 <HAL_TIM_Encoder_Start>
}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20005f2c 	.word	0x20005f2c
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	20006030 	.word	0x20006030
 8001bb4:	20005ce0 	.word	0x20005ce0
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	20005b1c 	.word	0x20005b1c
 8001bc0:	40000800 	.word	0x40000800
 8001bc4:	20005ca0 	.word	0x20005ca0
 8001bc8:	40000c00 	.word	0x40000c00
 8001bcc:	20005adc 	.word	0x20005adc
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d839      	bhi.n	8001c5a <QEIReset+0x86>
 8001be6:	a201      	add	r2, pc, #4	; (adr r2, 8001bec <QEIReset+0x18>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c05 	.word	0x08001c05
 8001bf0:	08001c13 	.word	0x08001c13
 8001bf4:	08001c23 	.word	0x08001c23
 8001bf8:	08001c31 	.word	0x08001c31
 8001bfc:	08001c3f 	.word	0x08001c3f
 8001c00:	08001c4d 	.word	0x08001c4d

	case QEI1:	TIM1->CNT = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <QEIReset+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <QEIReset+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
	break;
 8001c10:	e023      	b.n	8001c5a <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <QEIReset+0x9c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
	break;
 8001c20:	e01b      	b.n	8001c5a <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <QEIReset+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <QEIReset+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	break;
 8001c2e:	e014      	b.n	8001c5a <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <QEIReset+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <QEIReset+0xac>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	break;
 8001c3c:	e00d      	b.n	8001c5a <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <QEIReset+0xb0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <QEIReset+0xb4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
	break;
 8001c4a:	e006      	b.n	8001c5a <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <QEIReset+0xb8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <QEIReset+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
	break;
 8001c58:	bf00      	nop

	}
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40010000 	.word	0x40010000
 8001c6c:	200064a8 	.word	0x200064a8
 8001c70:	200064ac 	.word	0x200064ac
 8001c74:	40000400 	.word	0x40000400
 8001c78:	200064a4 	.word	0x200064a4
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	200064cc 	.word	0x200064cc
 8001c84:	40000c00 	.word	0x40000c00
 8001c88:	200064c8 	.word	0x200064c8
 8001c8c:	40010400 	.word	0x40010400
 8001c90:	200064d0 	.word	0x200064d0

08001c94 <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 8001caa:	e002      	b.n	8001cb2 <QEIDelay+0x1e>
	{
		currentvalues++;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f8      	bcc.n	8001cac <QEIDelay+0x18>
	}
	currentvalues = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	2b05      	cmp	r3, #5
 8001cdc:	d845      	bhi.n	8001d6a <QEIRead+0x9e>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <QEIRead+0x18>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001cfd 	.word	0x08001cfd
 8001ce8:	08001d0f 	.word	0x08001d0f
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d47 	.word	0x08001d47
 8001cf8:	08001d59 	.word	0x08001d59

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <QEIRead+0xb0>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <QEIRead+0xb4>)
 8001d04:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <QEIRead+0xb4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
	break;
 8001d0c:	e02e      	b.n	8001d6c <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8001d0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <QEIRead+0xb8>)
 8001d18:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <QEIRead+0xb8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
	break;
 8001d20:	e024      	b.n	8001d6c <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <QEIRead+0xbc>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <QEIRead+0xc0>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <QEIRead+0xc0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
	break;
 8001d32:	e01b      	b.n	8001d6c <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <QEIRead+0xc4>)
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <QEIRead+0xc8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <QEIRead+0xc8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	break;
 8001d44:	e012      	b.n	8001d6c <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <QEIRead+0xcc>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <QEIRead+0xd0>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <QEIRead+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
	break;
 8001d56:	e009      	b.n	8001d6c <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <QEIRead+0xd4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <QEIRead+0xd8>)
 8001d60:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <QEIRead+0xd8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60fb      	str	r3, [r7, #12]
	break;
 8001d68:	e000      	b.n	8001d6c <QEIRead+0xa0>

	default: break;
 8001d6a:	bf00      	nop
	}

	return value;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	200064a8 	.word	0x200064a8
 8001d84:	200064ac 	.word	0x200064ac
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	200064a4 	.word	0x200064a4
 8001d90:	40000800 	.word	0x40000800
 8001d94:	200064cc 	.word	0x200064cc
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	200064c8 	.word	0x200064c8
 8001da0:	40010400 	.word	0x40010400
 8001da4:	200064d0 	.word	0x200064d0

08001da8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7afa      	ldrb	r2, [r7, #11]
 8001dc0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	893a      	ldrh	r2, [r7, #8]
 8001dcc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8bba      	ldrh	r2, [r7, #28]
 8001dd8:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a3a      	ldr	r2, [r7, #32]
 8001dde:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de4:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8899      	ldrh	r1, [r3, #4]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2302      	movs	r3, #2
 8001df4:	2201      	movs	r2, #1
 8001df6:	f7ff fa83 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6898      	ldr	r0, [r3, #8]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8999      	ldrh	r1, [r3, #12]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2302      	movs	r3, #2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7ff fa79 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6918      	ldr	r0, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8a99      	ldrh	r1, [r3, #20]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f7ff fa6f 	bl	8001300 <GPIOPinsInit>

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7d9b      	ldrb	r3, [r3, #22]
 8001e36:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	889b      	ldrh	r3, [r3, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	f015 ffa0 	bl	8017d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	899b      	ldrh	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	4619      	mov	r1, r3
 8001e54:	f015 ff98 	bl	8017d88 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3206      	adds	r2, #6
 8001e5e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001e62:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001e64:	2308      	movs	r3, #8
 8001e66:	737b      	strb	r3, [r7, #13]
 8001e68:	e02a      	b.n	8001ec0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da08      	bge.n	8001e84 <SHIFTREGShift+0x5a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6918      	ldr	r0, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8a9b      	ldrh	r3, [r3, #20]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f015 ff83 	bl	8017d88 <HAL_GPIO_WritePin>
 8001e82:	e007      	b.n	8001e94 <SHIFTREGShift+0x6a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8a9b      	ldrh	r3, [r3, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f015 ff7a 	bl	8017d88 <HAL_GPIO_WritePin>
			out <<= 1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	889b      	ldrh	r3, [r3, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f015 ff6f 	bl	8017d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	889b      	ldrh	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f015 ff67 	bl	8017d88 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 8001eba:	7b7b      	ldrb	r3, [r7, #13]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	737b      	strb	r3, [r7, #13]
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1d1      	bne.n	8001e6a <SHIFTREGShift+0x40>
		}
	}while(i--);
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	73ba      	strb	r2, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1c3      	bne.n	8001e58 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	899b      	ldrh	r3, [r3, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4619      	mov	r1, r3
 8001edc:	f015 ff54 	bl	8017d88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6898      	ldr	r0, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	899b      	ldrh	r3, [r3, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4619      	mov	r1, r3
 8001eec:	f015 ff4c 	bl	8017d88 <HAL_GPIO_WritePin>

}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f015 f823 	bl	8016f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x128>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d135      	bne.n	8001fde <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4a40      	ldr	r2, [pc, #256]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10d      	bne.n	8001fa0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482b      	ldr	r0, [pc, #172]	; (8002084 <HAL_CAN_MspInit+0x134>)
 8001fd8:	f015 fc26 	bl	8017828 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001fdc:	e048      	b.n	8002070 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_CAN_MspInit+0x138>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d143      	bne.n	8002070 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a23      	ldr	r2, [pc, #140]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_CAN_MspInit+0x12c>)
 800200c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_CAN_MspInit+0x12c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10d      	bne.n	8002032 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002020:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_CAN_MspInit+0x130>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_CAN_MspInit+0x130>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800204e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002060:	2309      	movs	r3, #9
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_CAN_MspInit+0x13c>)
 800206c:	f015 fbdc 	bl	8017828 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3730      	adds	r7, #48	; 0x30
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40006400 	.word	0x40006400
 800207c:	200002bc 	.word	0x200002bc
 8002080:	40023800 	.word	0x40023800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40006800 	.word	0x40006800
 800208c:	40020400 	.word	0x40020400

08002090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_I2C_MspInit+0x190>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12d      	bne.n	800210e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a5a      	ldr	r2, [pc, #360]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b58      	ldr	r3, [pc, #352]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	484f      	ldr	r0, [pc, #316]	; (8002228 <HAL_I2C_MspInit+0x198>)
 80020ec:	f015 fb9c 	bl	8017828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800210c:	e083      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_I2C_MspInit+0x19c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12d      	bne.n	8002174 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a40      	ldr	r2, [pc, #256]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b3e      	ldr	r3, [pc, #248]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002146:	2304      	movs	r3, #4
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	; (8002228 <HAL_I2C_MspInit+0x198>)
 8002152:	f015 fb69 	bl	8017828 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
}
 8002172:	e050      	b.n	8002216 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <HAL_I2C_MspInit+0x1a0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14b      	bne.n	8002216 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_I2C_MspInit+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021c8:	2304      	movs	r3, #4
 80021ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	; (8002234 <HAL_I2C_MspInit+0x1a4>)
 80021d4:	f015 fb28 	bl	8017828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4810      	ldr	r0, [pc, #64]	; (8002238 <HAL_I2C_MspInit+0x1a8>)
 80021f6:	f015 fb17 	bl	8017828 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x194>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x194>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3738      	adds	r7, #56	; 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005800 	.word	0x40005800
 8002230:	40005c00 	.word	0x40005c00
 8002234:	40020800 	.word	0x40020800
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_I2C_MspDeInit+0xb8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d116      	bne.n	800227c <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800225a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002260:	f015 fc7e 	bl	8017b60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 800226a:	f015 fc79 	bl	8017b60 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f014 feb4 	bl	8016fdc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002274:	2020      	movs	r0, #32
 8002276:	f014 feb1 	bl	8016fdc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800227a:	e036      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_I2C_MspDeInit+0xc4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d116      	bne.n	80022b4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a1b      	ldr	r2, [pc, #108]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 800228c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002296:	4819      	ldr	r0, [pc, #100]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 8002298:	f015 fc62 	bl	8017b60 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <HAL_I2C_MspDeInit+0xc0>)
 80022a2:	f015 fc5d 	bl	8017b60 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80022a6:	2021      	movs	r0, #33	; 0x21
 80022a8:	f014 fe98 	bl	8016fdc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80022ac:	2022      	movs	r0, #34	; 0x22
 80022ae:	f014 fe95 	bl	8016fdc <HAL_NVIC_DisableIRQ>
}
 80022b2:	e01a      	b.n	80022ea <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_I2C_MspDeInit+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d115      	bne.n	80022ea <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_I2C_MspDeInit+0xbc>)
 80022c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80022ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_I2C_MspDeInit+0xcc>)
 80022d0:	f015 fc46 	bl	8017b60 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspDeInit+0xd0>)
 80022da:	f015 fc41 	bl	8017b60 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80022de:	2048      	movs	r0, #72	; 0x48
 80022e0:	f014 fe7c 	bl	8016fdc <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80022e4:	2049      	movs	r0, #73	; 0x49
 80022e6:	f014 fe79 	bl	8016fdc <HAL_NVIC_DisableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40005400 	.word	0x40005400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40005800 	.word	0x40005800
 8002304:	40005c00 	.word	0x40005c00
 8002308:	40020800 	.word	0x40020800
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002310:	b480      	push	{r7}
 8002312:	b091      	sub	sp, #68	; 0x44
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_TIM_PWM_MspInit+0x244>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800233c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 800233e:	e102      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d10e      	bne.n	8002368 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002366:	e0ee      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_TIM_PWM_MspInit+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d10e      	bne.n	8002390 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
 8002376:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b75      	ldr	r3, [pc, #468]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800238e:	e0da      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_TIM_PWM_MspInit+0x250>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80023b6:	e0c6      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <HAL_TIM_PWM_MspInit+0x254>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80023de:	e0b2      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a60      	ldr	r2, [pc, #384]	; (8002568 <HAL_TIM_PWM_MspInit+0x258>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a59      	ldr	r2, [pc, #356]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002406:	e09e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_TIM_PWM_MspInit+0x25c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800242e:	e08a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a4e      	ldr	r2, [pc, #312]	; (8002570 <HAL_TIM_PWM_MspInit+0x260>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
}
 8002456:	e076      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_TIM_PWM_MspInit+0x264>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
}
 800247e:	e062      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_TIM_PWM_MspInit+0x268>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	4b32      	ldr	r3, [pc, #200]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a31      	ldr	r2, [pc, #196]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	e04e      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <HAL_TIM_PWM_MspInit+0x26c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_TIM_PWM_MspInit+0x270>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
}
 80024f6:	e026      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_TIM_PWM_MspInit+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIM_PWM_MspInit+0x278>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_TIM_PWM_MspInit+0x248>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3744      	adds	r7, #68	; 0x44
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40010000 	.word	0x40010000
 8002558:	40023800 	.word	0x40023800
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40001000 	.word	0x40001000
 800256c:	40001400 	.word	0x40001400
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b091      	sub	sp, #68	; 0x44
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a8d      	ldr	r2, [pc, #564]	; (80027d0 <HAL_TIM_Base_MspInit+0x244>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a2:	4b8c      	ldr	r3, [pc, #560]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a8b      	ldr	r2, [pc, #556]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 80025ba:	e102      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a81      	ldr	r2, [pc, #516]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b7f      	ldr	r3, [pc, #508]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025e2:	e0ee      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_TIM_Base_MspInit+0x24c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800260a:	e0da      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_TIM_Base_MspInit+0x250>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a6d      	ldr	r2, [pc, #436]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b6b      	ldr	r3, [pc, #428]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002632:	e0c6      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_Base_MspInit+0x254>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800265a:	e0b2      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_TIM_Base_MspInit+0x258>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002682:	e09e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_TIM_Base_MspInit+0x25c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002698:	f043 0320 	orr.w	r3, r3, #32
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b4d      	ldr	r3, [pc, #308]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026aa:	e08a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4e      	ldr	r2, [pc, #312]	; (80027ec <HAL_TIM_Base_MspInit+0x260>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	4b46      	ldr	r3, [pc, #280]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a45      	ldr	r2, [pc, #276]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
}
 80026d2:	e076      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a45      	ldr	r2, [pc, #276]	; (80027f0 <HAL_TIM_Base_MspInit+0x264>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
}
 80026fa:	e062      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <HAL_TIM_Base_MspInit+0x268>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	e04e      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_Base_MspInit+0x26c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10e      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b28      	ldr	r3, [pc, #160]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	e03a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_TIM_Base_MspInit+0x270>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	e026      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_TIM_Base_MspInit+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10e      	bne.n	800279c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a13      	ldr	r2, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	e012      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_TIM_Base_MspInit+0x278>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_TIM_Base_MspInit+0x248>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
}
 80027c2:	bf00      	nop
 80027c4:	3744      	adds	r7, #68	; 0x44
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40001400 	.word	0x40001400
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	40001800 	.word	0x40001800
 8002800:	40001c00 	.word	0x40001c00
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b094      	sub	sp, #80	; 0x50
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_UART_MspInit+0x250>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002874:	2307      	movs	r3, #7
 8002876:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800287c:	4619      	mov	r1, r3
 800287e:	4878      	ldr	r0, [pc, #480]	; (8002a60 <HAL_UART_MspInit+0x258>)
 8002880:	f014 ffd2 	bl	8017828 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002884:	e12b      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_UART_MspInit+0x25c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a70      	ldr	r2, [pc, #448]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a69      	ldr	r2, [pc, #420]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028c8:	2360      	movs	r3, #96	; 0x60
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028e0:	4619      	mov	r1, r3
 80028e2:	4861      	ldr	r0, [pc, #388]	; (8002a68 <HAL_UART_MspInit+0x260>)
 80028e4:	f014 ffa0 	bl	8017828 <HAL_GPIO_Init>
}
 80028e8:	e0f9      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_UART_MspInit+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d12d      	bne.n	8002950 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b55      	ldr	r3, [pc, #340]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a50      	ldr	r2, [pc, #320]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800291a:	f043 0308 	orr.w	r3, r3, #8
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800292c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293e:	2307      	movs	r3, #7
 8002940:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002946:	4619      	mov	r1, r3
 8002948:	4847      	ldr	r0, [pc, #284]	; (8002a68 <HAL_UART_MspInit+0x260>)
 800294a:	f014 ff6d 	bl	8017828 <HAL_GPIO_Init>
}
 800294e:	e0c6      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_UART_MspInit+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d12d      	bne.n	80029b6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	4b3f      	ldr	r3, [pc, #252]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002968:	6413      	str	r3, [r2, #64]	; 0x40
 800296a:	4b3c      	ldr	r3, [pc, #240]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_UART_MspInit+0x254>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a37      	ldr	r2, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002980:	f043 0304 	orr.w	r3, r3, #4
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029a4:	2308      	movs	r3, #8
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4831      	ldr	r0, [pc, #196]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 80029b0:	f014 ff3a 	bl	8017828 <HAL_GPIO_Init>
}
 80029b4:	e093      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_UART_MspInit+0x270>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x254>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_UART_MspInit+0x254>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a26:	2308      	movs	r3, #8
 8002a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4810      	ldr	r0, [pc, #64]	; (8002a74 <HAL_UART_MspInit+0x26c>)
 8002a32:	f014 fef9 	bl	8017828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a46:	2308      	movs	r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x260>)
 8002a52:	f014 fee9 	bl	8017828 <HAL_GPIO_Init>
}
 8002a56:	e042      	b.n	8002ade <HAL_UART_MspInit+0x2d6>
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40004400 	.word	0x40004400
 8002a68:	40020c00 	.word	0x40020c00
 8002a6c:	40004800 	.word	0x40004800
 8002a70:	40004c00 	.word	0x40004c00
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_UART_MspInit+0x2e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12b      	bne.n	8002ade <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b15      	ldr	r3, [pc, #84]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_UART_MspInit+0x2e4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002abe:	23c0      	movs	r3, #192	; 0xc0
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ace:	2308      	movs	r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ad2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_UART_MspInit+0x2e8>)
 8002ada:	f014 fea5 	bl	8017828 <HAL_GPIO_Init>
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	; 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020800 	.word	0x40020800

08002af4 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b094      	sub	sp, #80	; 0x50
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8c      	ldr	r2, [pc, #560]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x250>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12d      	bne.n	8002b72 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a8a      	ldr	r2, [pc, #552]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
 8002b36:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	4a83      	ldr	r2, [pc, #524]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	; 0x30
 8002b42:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002b4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x258>)
 8002b6c:	f014 fe5c 	bl	8017828 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8002b70:	e12b      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d14b      	bne.n	8002c14 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b80:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8c:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	633b      	str	r3, [r7, #48]	; 0x30
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a62      	ldr	r2, [pc, #392]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bea:	4619      	mov	r1, r3
 8002bec:	4858      	ldr	r0, [pc, #352]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002bee:	f014 fe1b 	bl	8017828 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4851      	ldr	r0, [pc, #324]	; (8002d54 <HAL_TIM_Encoder_MspInit+0x260>)
 8002c0e:	f014 fe0b 	bl	8017828 <HAL_GPIO_Init>
}
 8002c12:	e0da      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_TIM_Encoder_MspInit+0x264>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c66:	2302      	movs	r3, #2
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4837      	ldr	r0, [pc, #220]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c72:	f014 fdd9 	bl	8017828 <HAL_GPIO_Init>
}
 8002c76:	e0a8      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a37      	ldr	r2, [pc, #220]	; (8002d5c <HAL_TIM_Encoder_MspInit+0x268>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d12d      	bne.n	8002cde <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002ca8:	f043 0308 	orr.w	r3, r3, #8
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002cba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4822      	ldr	r0, [pc, #136]	; (8002d60 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002cd8:	f014 fda6 	bl	8017828 <HAL_GPIO_Init>
}
 8002cdc:	e075      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_TIM_Encoder_MspInit+0x270>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13f      	bne.n	8002d68 <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d20:	2303      	movs	r3, #3
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d30:	2302      	movs	r3, #2
 8002d32:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	f014 fd74 	bl	8017828 <HAL_GPIO_Init>
}
 8002d40:	e043      	b.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40020000 	.word	0x40020000
 8002d54:	40020400 	.word	0x40020400
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40020c00 	.word	0x40020c00
 8002d64:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002dc6:	f014 fd2f 	bl	8017828 <HAL_GPIO_Init>
}
 8002dca:	bf00      	nop
 8002dcc:	3750      	adds	r7, #80	; 0x50
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40010400 	.word	0x40010400
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020800 	.word	0x40020800

08002de0 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b094      	sub	sp, #80	; 0x50
 8002de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	2230      	movs	r2, #48	; 0x30
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f01c fb24 	bl	801f43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e20:	2300      	movs	r3, #0
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e46:	2302      	movs	r3, #2
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e50:	2308      	movs	r3, #8
 8002e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	4618      	mov	r0, r3
 8002e68:	f016 fff0 	bl	8019e4c <HAL_RCC_OscConfig>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002e72:	f001 fc5f 	bl	8004734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e76:	230f      	movs	r3, #15
 8002e78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2105      	movs	r1, #5
 8002e94:	4618      	mov	r0, r3
 8002e96:	f017 fa49 	bl	801a32c <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ea0:	f001 fc48 	bl	8004734 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ea4:	f017 fb28 	bl	801a4f8 <HAL_RCC_EnableCSS>
}
 8002ea8:	bf00      	nop
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a9b      	ldr	r2, [pc, #620]	; (8003148 <TIMxInit+0x290>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a9a      	ldr	r2, [pc, #616]	; (800314c <TIMxInit+0x294>)
 8002ee2:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e081      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <TIMxInit+0x298>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d106      	bne.n	8002f00 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ef8:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 8002efa:	231c      	movs	r3, #28
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	e076      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a94      	ldr	r2, [pc, #592]	; (8003154 <TIMxInit+0x29c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d105      	bne.n	8002f14 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a93      	ldr	r2, [pc, #588]	; (8003158 <TIMxInit+0x2a0>)
 8002f0c:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002f0e:	231d      	movs	r3, #29
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e06c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <TIMxInit+0x2a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d105      	bne.n	8002f28 <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a90      	ldr	r2, [pc, #576]	; (8003160 <TIMxInit+0x2a8>)
 8002f20:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002f22:	231e      	movs	r3, #30
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e062      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a8e      	ldr	r2, [pc, #568]	; (8003164 <TIMxInit+0x2ac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a8d      	ldr	r2, [pc, #564]	; (8003168 <TIMxInit+0x2b0>)
 8002f34:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e058      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a8b      	ldr	r2, [pc, #556]	; (800316c <TIMxInit+0x2b4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d105      	bne.n	8002f50 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a8a      	ldr	r2, [pc, #552]	; (8003170 <TIMxInit+0x2b8>)
 8002f48:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 8002f4a:	2336      	movs	r3, #54	; 0x36
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e04e      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a88      	ldr	r2, [pc, #544]	; (8003174 <TIMxInit+0x2bc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d105      	bne.n	8002f64 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <TIMxInit+0x2c0>)
 8002f5c:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002f5e:	2337      	movs	r3, #55	; 0x37
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e044      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a85      	ldr	r2, [pc, #532]	; (800317c <TIMxInit+0x2c4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <TIMxInit+0x2c8>)
 8002f70:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002f72:	232e      	movs	r3, #46	; 0x2e
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e03a      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a82      	ldr	r2, [pc, #520]	; (8003184 <TIMxInit+0x2cc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d105      	bne.n	8002f8c <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a81      	ldr	r2, [pc, #516]	; (8003188 <TIMxInit+0x2d0>)
 8002f84:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 8002f86:	2318      	movs	r3, #24
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e030      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a7f      	ldr	r2, [pc, #508]	; (800318c <TIMxInit+0x2d4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a7e      	ldr	r2, [pc, #504]	; (8003190 <TIMxInit+0x2d8>)
 8002f98:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e026      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a7c      	ldr	r2, [pc, #496]	; (8003194 <TIMxInit+0x2dc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d105      	bne.n	8002fb4 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a7b      	ldr	r2, [pc, #492]	; (8003198 <TIMxInit+0x2e0>)
 8002fac:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8002fae:	231a      	movs	r3, #26
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e01c      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a79      	ldr	r2, [pc, #484]	; (800319c <TIMxInit+0x2e4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <TIMxInit+0x2e8>)
 8002fc0:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8002fc2:	232b      	movs	r3, #43	; 0x2b
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e012      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <TIMxInit+0x2ec>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d105      	bne.n	8002fdc <TIMxInit+0x124>
		htimx->Instance = TIM13;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <TIMxInit+0x2f0>)
 8002fd4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 8002fd6:	232c      	movs	r3, #44	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e008      	b.n	8002fee <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a73      	ldr	r2, [pc, #460]	; (80031ac <TIMxInit+0x2f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d104      	bne.n	8002fee <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a72      	ldr	r2, [pc, #456]	; (80031b0 <TIMxInit+0x2f8>)
 8002fe8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 8002fea:	232d      	movs	r3, #45	; 0x2d
 8002fec:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002fee:	883a      	ldrh	r2, [r7, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 8002ffa:	887a      	ldrh	r2, [r7, #2]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f017 fce8 	bl	801a9dc <HAL_TIM_Base_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <TIMxInit+0x15e>
	{
		Error_Handler();
 8003012:	f001 fb8f 	bl	8004734 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f018 fc49 	bl	801b8bc <HAL_TIMEx_MasterConfigSynchronization>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003030:	f001 fb80 	bl	8004734 <Error_Handler>
	}

	if(htimx == &htim1){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a44      	ldr	r2, [pc, #272]	; (8003148 <TIMxInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f000 80cb 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a43      	ldr	r2, [pc, #268]	; (8003150 <TIMxInit+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f000 80c6 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIMxInit+0x29c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	f000 80c1 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <TIMxInit+0x2a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80bc 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <TIMxInit+0x2ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 80b7 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <TIMxInit+0x2b4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	2200      	movs	r2, #0
 8003074:	2107      	movs	r1, #7
 8003076:	4618      	mov	r0, r3
 8003078:	f013 ff86 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	f013 ff9d 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003086:	e0a5      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <TIMxInit+0x2bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10c      	bne.n	80030aa <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2200      	movs	r2, #0
 8003096:	210e      	movs	r1, #14
 8003098:	4618      	mov	r0, r3
 800309a:	f013 ff75 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f013 ff8c 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 80030a8:	e094      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a33      	ldr	r2, [pc, #204]	; (800317c <TIMxInit+0x2c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	f000 8090 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <TIMxInit+0x2cc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f000 808b 	beq.w	80031d4 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a32      	ldr	r2, [pc, #200]	; (800318c <TIMxInit+0x2d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10c      	bne.n	80030e0 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	210e      	movs	r1, #14
 80030ce:	4618      	mov	r0, r3
 80030d0:	f013 ff5a 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f013 ff71 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 80030de:	e079      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIMxInit+0x2dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	2200      	movs	r2, #0
 80030ee:	210e      	movs	r1, #14
 80030f0:	4618      	mov	r0, r3
 80030f2:	f013 ff49 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f013 ff60 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003100:	e068      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a25      	ldr	r2, [pc, #148]	; (800319c <TIMxInit+0x2e4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10c      	bne.n	8003124 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b25b      	sxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	210e      	movs	r1, #14
 8003112:	4618      	mov	r0, r3
 8003114:	f013 ff38 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f013 ff4f 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003122:	e057      	b.n	80031d4 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <TIMxInit+0x2ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d143      	bne.n	80031b4 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	b25b      	sxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	210e      	movs	r1, #14
 8003134:	4618      	mov	r0, r3
 8003136:	f013 ff27 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	b25b      	sxtb	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f013 ff3e 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003144:	e046      	b.n	80031d4 <TIMxInit+0x31c>
 8003146:	bf00      	nop
 8003148:	20005f2c 	.word	0x20005f2c
 800314c:	40010000 	.word	0x40010000
 8003150:	20006030 	.word	0x20006030
 8003154:	20005ce0 	.word	0x20005ce0
 8003158:	40000400 	.word	0x40000400
 800315c:	20005b1c 	.word	0x20005b1c
 8003160:	40000800 	.word	0x40000800
 8003164:	20005ca0 	.word	0x20005ca0
 8003168:	40000c00 	.word	0x40000c00
 800316c:	20005eec 	.word	0x20005eec
 8003170:	40001000 	.word	0x40001000
 8003174:	20006190 	.word	0x20006190
 8003178:	40001400 	.word	0x40001400
 800317c:	20005adc 	.word	0x20005adc
 8003180:	40010400 	.word	0x40010400
 8003184:	20005f6c 	.word	0x20005f6c
 8003188:	40014000 	.word	0x40014000
 800318c:	20005bfc 	.word	0x20005bfc
 8003190:	40014400 	.word	0x40014400
 8003194:	20005e44 	.word	0x20005e44
 8003198:	40014800 	.word	0x40014800
 800319c:	20006150 	.word	0x20006150
 80031a0:	40001800 	.word	0x40001800
 80031a4:	20005dc4 	.word	0x20005dc4
 80031a8:	40001c00 	.word	0x40001c00
 80031ac:	20006110 	.word	0x20006110
 80031b0:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <TIMxInit+0x330>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10b      	bne.n	80031d4 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b25b      	sxtb	r3, r3
 80031c0:	2200      	movs	r2, #0
 80031c2:	210e      	movs	r1, #14
 80031c4:	4618      	mov	r0, r3
 80031c6:	f013 fedf 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f013 fef6 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f017 fc2c 	bl	801aa32 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f017 fc4d 	bl	801aa7a <HAL_TIM_Base_Start_IT>

}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20006110 	.word	0x20006110

080031ec <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	; (80033b8 <UARTInit+0x1cc>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d107      	bne.n	8003212 <UARTInit+0x26>
		huartx->Instance = USART1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a6d      	ldr	r2, [pc, #436]	; (80033bc <UARTInit+0x1d0>)
 8003206:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8003208:	2325      	movs	r3, #37	; 0x25
 800320a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <UARTInit+0x1d4>)
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e036      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a6b      	ldr	r2, [pc, #428]	; (80033c4 <UARTInit+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d107      	bne.n	800322a <UARTInit+0x3e>
		huartx->Instance = USART2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <UARTInit+0x1dc>)
 800321e:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8003220:	2326      	movs	r3, #38	; 0x26
 8003222:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <UARTInit+0x1e0>)
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e02a      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart3){
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a68      	ldr	r2, [pc, #416]	; (80033d0 <UARTInit+0x1e4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d107      	bne.n	8003242 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <UARTInit+0x1e8>)
 8003236:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8003238:	2327      	movs	r3, #39	; 0x27
 800323a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 800323c:	4b66      	ldr	r3, [pc, #408]	; (80033d8 <UARTInit+0x1ec>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e01e      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4a65      	ldr	r2, [pc, #404]	; (80033dc <UARTInit+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d107      	bne.n	800325a <UARTInit+0x6e>
		huartx->Instance = UART4;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a64      	ldr	r2, [pc, #400]	; (80033e0 <UARTInit+0x1f4>)
 800324e:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003250:	2334      	movs	r3, #52	; 0x34
 8003252:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <UARTInit+0x1f8>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e012      	b.n	8003280 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <UARTInit+0x1fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d107      	bne.n	8003272 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <UARTInit+0x200>)
 8003266:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 800326c:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <UARTInit+0x204>)
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	e006      	b.n	8003280 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a5f      	ldr	r2, [pc, #380]	; (80033f4 <UARTInit+0x208>)
 8003276:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8003278:	2347      	movs	r3, #71	; 0x47
 800327a:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 800327c:	4b5e      	ldr	r3, [pc, #376]	; (80033f8 <UARTInit+0x20c>)
 800327e:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	220c      	movs	r2, #12
 800329c:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f018 fb96 	bl	801b9dc <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <UARTInit+0xce>
	{
		Error_Handler();
 80032b6:	f001 fa3d 	bl	8004734 <Error_Handler>
	}

	if(rxstate == ENABLE){
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d176      	bne.n	80033ae <UARTInit+0x1c2>
		if(huartx == &huart2){
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a40      	ldr	r2, [pc, #256]	; (80033c4 <UARTInit+0x1d8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d119      	bne.n	80032fc <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 80032c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2105      	movs	r1, #5
 80032d0:	4618      	mov	r0, r3
 80032d2:	f013 fe59 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80032d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032da:	4618      	mov	r0, r3
 80032dc:	f013 fe8c 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80032e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f013 fe6b 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80032fa:	e058      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UARTInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d119      	bne.n	8003338 <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003308:	2200      	movs	r2, #0
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f013 fe3b 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003316:	4618      	mov	r0, r3
 8003318:	f013 fe6e 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800331c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003320:	4618      	mov	r0, r3
 8003322:	f013 fe4d 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0220 	orr.w	r2, r2, #32
 8003334:	60da      	str	r2, [r3, #12]
}
 8003336:	e03a      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <UARTInit+0x1f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d119      	bne.n	8003374 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003340:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f013 fe1d 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800334e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003352:	4618      	mov	r0, r3
 8003354:	f013 fe50 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800335c:	4618      	mov	r0, r3
 800335e:	f013 fe2f 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0220 	orr.w	r2, r2, #32
 8003370:	60da      	str	r2, [r3, #12]
}
 8003372:	e01c      	b.n	80033ae <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a1c      	ldr	r2, [pc, #112]	; (80033e8 <UARTInit+0x1fc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d118      	bne.n	80033ae <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2200      	movs	r2, #0
 8003382:	210e      	movs	r1, #14
 8003384:	4618      	mov	r0, r3
 8003386:	f013 fdff 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800338e:	4618      	mov	r0, r3
 8003390:	f013 fe32 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	4618      	mov	r0, r3
 800339a:	f013 fe11 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0220 	orr.w	r2, r2, #32
 80033ac:	60da      	str	r2, [r3, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20005e04 	.word	0x20005e04
 80033bc:	40011000 	.word	0x40011000
 80033c0:	20005ad8 	.word	0x20005ad8
 80033c4:	20006070 	.word	0x20006070
 80033c8:	40004400 	.word	0x40004400
 80033cc:	20005e84 	.word	0x20005e84
 80033d0:	20005bbc 	.word	0x20005bbc
 80033d4:	40004800 	.word	0x40004800
 80033d8:	20005d21 	.word	0x20005d21
 80033dc:	20005ff0 	.word	0x20005ff0
 80033e0:	40004c00 	.word	0x40004c00
 80033e4:	20005fec 	.word	0x20005fec
 80033e8:	20005d24 	.word	0x20005d24
 80033ec:	40005000 	.word	0x40005000
 80033f0:	20005c9c 	.word	0x20005c9c
 80033f4:	40011400 	.word	0x40011400
 80033f8:	20005d20 	.word	0x20005d20

080033fc <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	4b5a      	ldr	r3, [pc, #360]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	4a59      	ldr	r2, [pc, #356]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 8003412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003416:	6313      	str	r3, [r2, #48]	; 0x30
 8003418:	4b57      	ldr	r3, [pc, #348]	; (8003578 <UARTx_DMA_Rx_Init+0x17c>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <UARTx_DMA_Rx_Init+0x180>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d119      	bne.n	8003460 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 800342c:	2310      	movs	r3, #16
 800342e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a53      	ldr	r2, [pc, #332]	; (8003580 <UARTx_DMA_Rx_Init+0x184>)
 8003434:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800343a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800343c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003440:	2200      	movs	r2, #0
 8003442:	2105      	movs	r1, #5
 8003444:	4618      	mov	r0, r3
 8003446:	f013 fd9f 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800344a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800344e:	4618      	mov	r0, r3
 8003450:	f013 fdd2 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003454:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003458:	4618      	mov	r0, r3
 800345a:	f013 fdb1 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 800345e:	e058      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4a48      	ldr	r2, [pc, #288]	; (8003584 <UARTx_DMA_Rx_Init+0x188>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d119      	bne.n	800349c <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8003468:	230c      	movs	r3, #12
 800346a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4a46      	ldr	r2, [pc, #280]	; (8003588 <UARTx_DMA_Rx_Init+0x18c>)
 8003470:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003476:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8003478:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800347c:	2200      	movs	r2, #0
 800347e:	2104      	movs	r1, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f013 fd81 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800348a:	4618      	mov	r0, r3
 800348c:	f013 fdb4 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003490:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003494:	4618      	mov	r0, r3
 8003496:	f013 fd93 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 800349a:	e03a      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <UARTx_DMA_Rx_Init+0x190>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d119      	bne.n	80034d8 <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 80034a4:	230d      	movs	r3, #13
 80034a6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <UARTx_DMA_Rx_Init+0x194>)
 80034ac:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 80034b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f013 fd63 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f013 fd96 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80034cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f013 fd75 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 80034d6:	e01c      	b.n	8003512 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4a2e      	ldr	r2, [pc, #184]	; (8003594 <UARTx_DMA_Rx_Init+0x198>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d118      	bne.n	8003512 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80034e0:	230b      	movs	r3, #11
 80034e2:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UARTx_DMA_Rx_Init+0x19c>)
 80034e8:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80034ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ee:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80034f0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80034f4:	2200      	movs	r2, #0
 80034f6:	210e      	movs	r1, #14
 80034f8:	4618      	mov	r0, r3
 80034fa:	f013 fd45 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80034fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003502:	4618      	mov	r0, r3
 8003504:	f013 fd78 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003508:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800350c:	4618      	mov	r0, r3
 800350e:	f013 fd57 	bl	8016fc0 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8003512:	2200      	movs	r2, #0
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fe68 	bl	80031ec <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003534:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2200      	movs	r2, #0
 800353a:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f013 fd5d 	bl	8017014 <HAL_DMA_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003560:	f001 f8e8 	bl	8004734 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	635a      	str	r2, [r3, #52]	; 0x34
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	20005a78 	.word	0x20005a78
 8003580:	40026088 	.word	0x40026088
 8003584:	20005b5c 	.word	0x20005b5c
 8003588:	40026028 	.word	0x40026028
 800358c:	20005a18 	.word	0x20005a18
 8003590:	40026040 	.word	0x40026040
 8003594:	200060b0 	.word	0x200060b0
 8003598:	40026010 	.word	0x40026010

0800359c <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <USART1_IRQHandler+0x10>)
 80035a2:	f018 fb57 	bl	801bc54 <HAL_UART_IRQHandler>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20005e04 	.word	0x20005e04

080035b0 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <USART2_IRQHandler+0x10>)
 80035b6:	f018 fb4d 	bl	801bc54 <HAL_UART_IRQHandler>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20006070 	.word	0x20006070

080035c4 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f018 fb43 	bl	801bc54 <HAL_UART_IRQHandler>
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20005bbc 	.word	0x20005bbc

080035d8 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <UART4_IRQHandler+0x10>)
 80035de:	f018 fb39 	bl	801bc54 <HAL_UART_IRQHandler>
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20005ff0 	.word	0x20005ff0

080035ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <UART5_IRQHandler+0x10>)
 80035f2:	f018 fb2f 	bl	801bc54 <HAL_UART_IRQHandler>
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20005d24 	.word	0x20005d24

08003600 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART6_IRQHandler+0x10>)
 8003606:	f018 fb25 	bl	801bc54 <HAL_UART_IRQHandler>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20005fac 	.word	0x20005fac

08003614 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003614:	b580      	push	{r7, lr}
 8003616:	b08e      	sub	sp, #56	; 0x38
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	2228      	movs	r2, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f01b ff03 	bl	801f43c <memset>

	if(hcanx == &hcan1){
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a53      	ldr	r2, [pc, #332]	; (8003788 <CANxInit+0x174>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <CANxInit+0x178>)
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e002      	b.n	800364c <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a51      	ldr	r2, [pc, #324]	; (8003790 <CANxInit+0x17c>)
 800364a:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 800364c:	897a      	ldrh	r2, [r7, #10]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 800365e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003662:	2b01      	cmp	r3, #1
 8003664:	d108      	bne.n	8003678 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800366c:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003674:	615a      	str	r2, [r3, #20]
 8003676:	e00b      	b.n	8003690 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003678:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003686:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800368e:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f012 fcdf 	bl	8016078 <HAL_CAN_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <CANxInit+0xb0>
	{
		Error_Handler();
 80036c0:	f001 f838 	bl	8004734 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 80036c4:	230e      	movs	r3, #14
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	015b      	lsls	r3, r3, #5
 80036d8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 80036de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 80036ea:	2301      	movs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 80036ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f012 fdb8 	bl	8016270 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <CANxInit+0x174>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d11c      	bne.n	8003742 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2101      	movs	r1, #1
 8003712:	2014      	movs	r0, #20
 8003714:	f013 fc38 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003718:	2014      	movs	r0, #20
 800371a:	f013 fc51 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800371e:	2102      	movs	r1, #2
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f013 f8eb 	bl	80168fc <HAL_CAN_ActivateNotification>
 8003726:	e028      	b.n	800377a <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003728:	2200      	movs	r2, #0
 800372a:	2101      	movs	r1, #1
 800372c:	2015      	movs	r0, #21
 800372e:	f013 fc2b 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003732:	2015      	movs	r0, #21
 8003734:	f013 fc44 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003738:	2110      	movs	r1, #16
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f013 f8de 	bl	80168fc <HAL_CAN_ActivateNotification>
 8003740:	e01b      	b.n	800377a <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2101      	movs	r1, #1
 800374c:	2040      	movs	r0, #64	; 0x40
 800374e:	f013 fc1b 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003752:	2040      	movs	r0, #64	; 0x40
 8003754:	f013 fc34 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003758:	2102      	movs	r1, #2
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f013 f8ce 	bl	80168fc <HAL_CAN_ActivateNotification>
 8003760:	e00b      	b.n	800377a <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2102      	movs	r1, #2
 8003766:	2041      	movs	r0, #65	; 0x41
 8003768:	f013 fc0e 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800376c:	2041      	movs	r0, #65	; 0x41
 800376e:	f013 fc27 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003772:	2110      	movs	r1, #16
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f013 f8c1 	bl	80168fc <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f012 fe58 	bl	8016430 <HAL_CAN_Start>

}
 8003780:	bf00      	nop
 8003782:	3738      	adds	r7, #56	; 0x38
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000a15c 	.word	0x2000a15c
 800378c:	40006400 	.word	0x40006400
 8003790:	40006800 	.word	0x40006800

08003794 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	; 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
//	sys.rns_busy = 1;
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80037a2:	bf00      	nop
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f012 ff62 	bl	801666e <HAL_CAN_GetTxMailboxesFreeLevel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f9      	beq.n	80037a4 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80037b4:	2300      	movs	r3, #0
 80037b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80037d2:	e00c      	b.n	80037ee <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80037dc:	1c51      	adds	r1, r2, #1
 80037de:	8779      	strh	r1, [r7, #58]	; 0x3a
 80037e0:	4611      	mov	r1, r2
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80037e8:	440b      	add	r3, r1
 80037ea:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 80037ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	873a      	strh	r2, [r7, #56]	; 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ed      	bne.n	80037d4 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 80037f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 80037fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	f107 0214 	add.w	r2, r7, #20
 800380a:	f107 0120 	add.w	r1, r7, #32
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f012 fe52 	bl	80164b8 <HAL_CAN_AddTxMessage>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <CAN_TxMsg+0x8a>
			Error_Handler();
 800381a:	f000 ff8b 	bl	8004734 <Error_Handler>
		}

	}
//	sys.rns_busy = 0;

	return(canMailbox);
 800381e:	69fb      	ldr	r3, [r7, #28]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	; 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b090      	sub	sp, #64	; 0x40
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003836:	bf00      	nop
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f012 ff18 	bl	801666e <HAL_CAN_GetTxMailboxesFreeLevel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f9      	beq.n	8003838 <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003848:	2300      	movs	r3, #0
 800384a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003850:	2300      	movs	r3, #0
 8003852:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 8003858:	2304      	movs	r3, #4
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003860:	2300      	movs	r3, #0
 8003862:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003866:	e01f      	b.n	80038a8 <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003870:	1c51      	adds	r1, r2, #1
 8003872:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003874:	4611      	mov	r1, r2
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800387c:	440b      	add	r3, r1
 800387e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 8003882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003884:	2b08      	cmp	r3, #8
 8003886:	d10f      	bne.n	80038a8 <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 8003888:	2308      	movs	r3, #8
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	f107 0214 	add.w	r2, r7, #20
 8003894:	f107 0120 	add.w	r1, r7, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f012 fe0d 	bl	80164b8 <HAL_CAN_AddTxMessage>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <CAN_TxMsgEID+0x80>
				Error_Handler();
 80038a4:	f000 ff46 	bl	8004734 <Error_Handler>
	while(datalen--)
 80038a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	873a      	strh	r2, [r7, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1da      	bne.n	8003868 <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80038b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80038b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	f107 0214 	add.w	r2, r7, #20
 80038c4:	f107 0120 	add.w	r1, r7, #32
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f012 fdf5 	bl	80164b8 <HAL_CAN_AddTxMessage>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80038d4:	f000 ff2e 	bl	8004734 <Error_Handler>
		}

	}

	return(canMailbox);
 80038d8:	69fb      	ldr	r3, [r7, #28]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3740      	adds	r7, #64	; 0x40
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <FH_CheckCAN>:
 * Function Arguments	: 	*fh	, pointer to structure FaulHaber_t
 * 							dat	, data received by CAN
 * Function Return		: 	0(FaulHaber ID found) or 1(not from FaulHaber)
 * Function Example		: 	FH_CheckCAN(&fh1, temp);
 */
uint8_t FH_CheckCAN(FaulHaber_t *fh, uint8_t dat[8]){
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	uint32_t id;
	if(fh->hcanx==&hcan1){
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <FH_CheckCAN+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <FH_CheckCAN+0x1c>
		id=CAN1RxMessage.StdId;
 80038f8:	4b69      	ldr	r3, [pc, #420]	; (8003aa0 <FH_CheckCAN+0x1bc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e002      	b.n	8003906 <FH_CheckCAN+0x22>
	}else{
		id=CAN2RxMessage.StdId;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <FH_CheckCAN+0x1c0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
	}

	if((id - fh->nodeID) & 0b00001111111)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <FH_CheckCAN+0x38>
		return 1;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <FH_CheckCAN+0x1aa>
	switch((id)>>7){
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	09db      	lsrs	r3, r3, #7
 8003920:	2b0e      	cmp	r3, #14
 8003922:	d821      	bhi.n	8003968 <FH_CheckCAN+0x84>
 8003924:	2b03      	cmp	r3, #3
 8003926:	f0c0 80b1 	bcc.w	8003a8c <FH_CheckCAN+0x1a8>
 800392a:	3b03      	subs	r3, #3
 800392c:	2b0b      	cmp	r3, #11
 800392e:	f200 80ad 	bhi.w	8003a8c <FH_CheckCAN+0x1a8>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <FH_CheckCAN+0x54>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003977 	.word	0x08003977
 800393c:	08003a8d 	.word	0x08003a8d
 8003940:	080039dd 	.word	0x080039dd
 8003944:	08003a8d 	.word	0x08003a8d
 8003948:	08003a09 	.word	0x08003a09
 800394c:	08003a8d 	.word	0x08003a8d
 8003950:	08003a27 	.word	0x08003a27
 8003954:	08003a8d 	.word	0x08003a8d
 8003958:	08003a45 	.word	0x08003a45
 800395c:	08003a8d 	.word	0x08003a8d
 8003960:	08003a8d 	.word	0x08003a8d
 8003964:	0800396f 	.word	0x0800396f
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d002      	beq.n	8003972 <FH_CheckCAN+0x8e>
 800396c:	e08e      	b.n	8003a8c <FH_CheckCAN+0x1a8>

		case 0b1110:		//boot up messege
			return 0;
 800396e:	2300      	movs	r3, #0
 8003970:	e08d      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case 0x80:		//error messege
			return 0;
 8003972:	2300      	movs	r3, #0
 8003974:	e08b      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO1Tx:		//PDO1/statusword
			fh->target=(dat[1]>>2) & 0b01;		//target reached bit in PP mode
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800398c:	f361 1304 	bfi	r3, r1, #4, #1
 8003990:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			if(dat[0] & 0b01000000)				//switch on disabled bit
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <FH_CheckCAN+0xcc>
				fh->PDOInit=1;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80039ae:	e00c      	b.n	80039ca <FH_CheckCAN+0xe6>
			else if(dat[0] & 0b00000100)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <FH_CheckCAN+0xe6>
				fh->start=1;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			fh->waiting=0;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039d0:	f36f 0341 	bfc	r3, #1, #1
 80039d4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e058      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO2Tx:		//PDO2/position
			memcpy(fh->rx_buff, &dat[2], 4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	3202      	adds	r2, #2
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			fh->rx-=fh->offset;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
			fh->waiting=0;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80039fc:	f36f 0341 	bfc	r3, #1, #1
 8003a00:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e042      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO3Tx:		//PDO3/velocity
			memcpy(fh->rx_buff, &dat[2], 4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	3202      	adds	r2, #2
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a1a:	f36f 0341 	bfc	r3, #1, #1
 8003a1e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e033      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case PDO4Tx:		//PDO4/torque
			memcpy(fh->rx_buff, &dat[2], 4);//not sure if need to convert to int16, because datasheet says type is S16, not S32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3324      	adds	r3, #36	; 0x24
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	3202      	adds	r2, #2
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			fh->waiting=0;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a38:	f36f 0341 	bfc	r3, #1, #1
 8003a3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e024      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		case SDOTx:		//SDO
			if((dat[0]=0x60)&&(dat[1]==fh->conf[0])&&(dat[2]==fh->conf[1])&&(dat[3]==fh->conf[2]))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2260      	movs	r2, #96	; 0x60
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d10e      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d106      	bne.n	8003a88 <FH_CheckCAN+0x1a4>
				fh->waiting=0;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8003a80:	f36f 0341 	bfc	r3, #1, #1
 8003a84:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			return 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <FH_CheckCAN+0x1aa>
			break;

		default :
			return 1;
 8003a8c:	2301      	movs	r3, #1
			break;
	}
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	2000a15c 	.word	0x2000a15c
 8003aa0:	2000a75c 	.word	0x2000a75c
 8003aa4:	20006ae0 	.word	0x20006ae0

08003aa8 <FaulHaber_Handler>:
 * 							the CAN data is from FaulHaber or not
 * Function Arguments	: 	dat	, data received by CAN
 * Function Return		: 	None
 * Function Example		: 	FaulHaber_Handler(aData);
 */
void FaulHaber_Handler(uint8_t dat[8]){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	led2 = 1;
 8003ab0:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <FaulHaber_Handler+0x50>)
 8003ab2:	7853      	ldrb	r3, [r2, #1]
 8003ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab8:	7053      	strb	r3, [r2, #1]
	uint8_t bflag=1, ad=0;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73bb      	strb	r3, [r7, #14]
	while(bflag && pfh[ad]!=0)
 8003ac2:	e00c      	b.n	8003ade <FaulHaber_Handler+0x36>
		bflag=FH_CheckCAN(pfh[ad++], dat);
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	73ba      	strb	r2, [r7, #14]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff05 	bl	80038e4 <FH_CheckCAN>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	while(bflag && pfh[ad]!=0)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <FaulHaber_Handler+0x48>
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	4a05      	ldr	r2, [pc, #20]	; (8003afc <FaulHaber_Handler+0x54>)
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e9      	bne.n	8003ac4 <FaulHaber_Handler+0x1c>

}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40020814 	.word	0x40020814
 8003afc:	20006a4c 	.word	0x20006a4c

08003b00 <I2CxInit>:
 * 						  InterruptEnable				interrupt enable for I2C can be ENABLE or DISABLE
 * Function Return		: NONE
 * Function Example		: I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
 */
void I2CxInit(I2C_HandleTypeDef* hi2cx,uint8_t OwnAddress,uint32_t ClockSpeed,int InterruptEnable)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	72fb      	strb	r3, [r7, #11]

	IRQn_Type nvicER = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
	IRQn_Type nvicEV = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75bb      	strb	r3, [r7, #22]

	if(hi2cx == &hi2c1){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a4d      	ldr	r2, [pc, #308]	; (8003c50 <I2CxInit+0x150>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d107      	bne.n	8003b30 <I2CxInit+0x30>
		hi2cx->Instance = I2C1;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <I2CxInit+0x154>)
 8003b24:	601a      	str	r2, [r3, #0]
		nvicER = I2C1_ER_IRQn;
 8003b26:	2320      	movs	r3, #32
 8003b28:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C1_EV_IRQn;
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	75bb      	strb	r3, [r7, #22]
 8003b2e:	e012      	b.n	8003b56 <I2CxInit+0x56>
	}else if(hi2cx == &hi2c2){
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a49      	ldr	r2, [pc, #292]	; (8003c58 <I2CxInit+0x158>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <I2CxInit+0x48>
		hi2cx->Instance = I2C2;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a48      	ldr	r2, [pc, #288]	; (8003c5c <I2CxInit+0x15c>)
 8003b3c:	601a      	str	r2, [r3, #0]
		nvicER = I2C2_ER_IRQn;
 8003b3e:	2322      	movs	r3, #34	; 0x22
 8003b40:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C2_EV_IRQn;
 8003b42:	2321      	movs	r3, #33	; 0x21
 8003b44:	75bb      	strb	r3, [r7, #22]
 8003b46:	e006      	b.n	8003b56 <I2CxInit+0x56>
	}else{
		hi2cx->Instance = I2C3;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <I2CxInit+0x160>)
 8003b4c:	601a      	str	r2, [r3, #0]
		nvicER = I2C3_ER_IRQn;
 8003b4e:	2349      	movs	r3, #73	; 0x49
 8003b50:	75fb      	strb	r3, [r7, #23]
		nvicEV = I2C3_EV_IRQn;
 8003b52:	2348      	movs	r3, #72	; 0x48
 8003b54:	75bb      	strb	r3, [r7, #22]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]



	if(InterruptEnable){
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d051      	beq.n	8003c36 <I2CxInit+0x136>
		if(hi2cx == &hi2c1){
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <I2CxInit+0x150>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d118      	bne.n	8003bcc <I2CxInit+0xcc>
			HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f013 f9f0 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f013 fa07 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003bb2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f013 f9e4 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bc0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f013 f9fb 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003bca:	e034      	b.n	8003c36 <I2CxInit+0x136>
		}else if(hi2cx == &hi2c2){
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <I2CxInit+0x158>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d118      	bne.n	8003c06 <I2CxInit+0x106>
			HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	210e      	movs	r1, #14
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f013 f9d3 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f013 f9ea 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003bec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	210e      	movs	r1, #14
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f013 f9c7 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003bfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f013 f9de 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003c04:	e017      	b.n	8003c36 <I2CxInit+0x136>
		}else{
			HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	210e      	movs	r1, #14
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f013 f9ba 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicER);
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f013 f9d1 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003c1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c22:	2200      	movs	r2, #0
 8003c24:	210e      	movs	r1, #14
 8003c26:	4618      	mov	r0, r3
 8003c28:	f013 f9ae 	bl	8016f88 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(nvicEV);
 8003c2c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f013 f9c5 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
		}
	}


	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f014 f8c0 	bl	8017dbc <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2CxInit+0x146>
	{
		Error_Handler();
 8003c42:	f000 fd77 	bl	8004734 <Error_Handler>
	}

}
 8003c46:	bf00      	nop
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20006bb0 	.word	0x20006bb0
 8003c54:	40005400 	.word	0x40005400
 8003c58:	20006c0c 	.word	0x20006c0c
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	40005c00 	.word	0x40005c00

08003c64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	4b9e      	ldr	r3, [pc, #632]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c82:	6313      	str	r3, [r2, #48]	; 0x30
 8003c84:	4b9b      	ldr	r3, [pc, #620]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d11d      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <I2CX_DMA_RX_Init+0x298>)
 8003c9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a97      	ldr	r2, [pc, #604]	; (8003f00 <I2CX_DMA_RX_Init+0x29c>)
 8003ca2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003ca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ca8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003caa:	230b      	movs	r3, #11
 8003cac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003cb2:	231f      	movs	r3, #31
 8003cb4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	4b8e      	ldr	r3, [pc, #568]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ef4 <I2CX_DMA_RX_Init+0x290>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	e022      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a8a      	ldr	r2, [pc, #552]	; (8003f08 <I2CX_DMA_RX_Init+0x2a4>)
 8003ce0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <I2CX_DMA_RX_Init+0x2a8>)
 8003ce6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003ce8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cee:	230e      	movs	r3, #14
 8003cf0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cf2:	2322      	movs	r3, #34	; 0x22
 8003cf4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cf6:	2321      	movs	r3, #33	; 0x21
 8003cf8:	777b      	strb	r3, [r7, #29]
 8003cfa:	e00e      	b.n	8003d1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a84      	ldr	r2, [pc, #528]	; (8003f10 <I2CX_DMA_RX_Init+0x2ac>)
 8003d00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a83      	ldr	r2, [pc, #524]	; (8003f14 <I2CX_DMA_RX_Init+0x2b0>)
 8003d06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003d0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003d12:	2349      	movs	r3, #73	; 0x49
 8003d14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003d16:	2348      	movs	r3, #72	; 0x48
 8003d18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2200      	movs	r2, #0
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2203      	movs	r2, #3
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f013 f952 	bl	8017014 <HAL_DMA_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d76:	f000 fcdd 	bl	8004734 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5b      	ldr	r2, [pc, #364]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d111      	bne.n	8003db2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d92:	2200      	movs	r2, #0
 8003d94:	210a      	movs	r1, #10
 8003d96:	4618      	mov	r0, r3
 8003d98:	f013 f8f6 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f013 f929 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f013 f908 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003db0:	e026      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a53      	ldr	r2, [pc, #332]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	210e      	movs	r1, #14
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f013 f8e0 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f013 f913 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f013 f8f2 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003ddc:	e010      	b.n	8003e00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003dde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003de2:	2200      	movs	r2, #0
 8003de4:	210e      	movs	r1, #14
 8003de6:	4618      	mov	r0, r3
 8003de8:	f013 f8ce 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f013 f901 	bl	8016ff8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f013 f8e0 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	461a      	mov	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <I2CX_DMA_RX_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d118      	bne.n	8003e70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f013 f89e 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f013 f8b5 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f013 f892 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f013 f8a9 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003e6e:	e034      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <I2CX_DMA_RX_Init+0x2a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d118      	bne.n	8003eaa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	210e      	movs	r1, #14
 8003e80:	4618      	mov	r0, r3
 8003e82:	f013 f881 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f013 f898 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e94:	2200      	movs	r2, #0
 8003e96:	210e      	movs	r1, #14
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f013 f875 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f013 f88c 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
 8003ea8:	e017      	b.n	8003eda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	210e      	movs	r1, #14
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f013 f868 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003eb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f013 f87f 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003ec2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	210e      	movs	r1, #14
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f013 f85c 	bl	8016f88 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ed0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f013 f873 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f013 ff6e 	bl	8017dbc <HAL_I2C_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ee6:	f000 fc25 	bl	8004734 <Error_Handler>
	}
}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	20006bb0 	.word	0x20006bb0
 8003efc:	40005400 	.word	0x40005400
 8003f00:	40026010 	.word	0x40026010
 8003f04:	20006c0c 	.word	0x20006c0c
 8003f08:	40005800 	.word	0x40005800
 8003f0c:	40026058 	.word	0x40026058
 8003f10:	40005c00 	.word	0x40005c00
 8003f14:	40026040 	.word	0x40026040

08003f18 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C2_EV_IRQHandler+0x10>)
 8003f1e:	f014 f9d7 	bl	80182d0 <HAL_I2C_EV_IRQHandler>


}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20006c0c 	.word	0x20006c0c

08003f2c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f30:	4802      	ldr	r0, [pc, #8]	; (8003f3c <I2C2_ER_IRQHandler+0x10>)
 8003f32:	f014 fb3a 	bl	80185aa <HAL_I2C_ER_IRQHandler>


}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20006c0c 	.word	0x20006c0c

08003f40 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f44:	4802      	ldr	r0, [pc, #8]	; (8003f50 <I2C3_EV_IRQHandler+0x10>)
 8003f46:	f014 f9c3 	bl	80182d0 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200067fc 	.word	0x200067fc

08003f54 <LaserUpdate>:
 * Function Arguments	: *laser		, pointer to structure Laser_t
 * 						  channel_no	, ADC channel
 * Function Return		: None
 * Function Example		: LaserUpdate(&lsr1, 0);
 */
void LaserUpdate(Laser_t *laser, uint8_t channel_no){
 8003f54:	b4b0      	push	{r4, r5, r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
	laser->rawCu+=adc.ADC_value[channel_no];
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <LaserUpdate+0x44>)
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	889b      	ldrh	r3, [r3, #4]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	1884      	adds	r4, r0, r2
 8003f7a:	eb41 0503 	adc.w	r5, r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	e9c3 4500 	strd	r4, r5, [r3]
	laser->cnt++;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bcb0      	pop	{r4, r5, r7}
 8003f96:	4770      	bx	lr
 8003f98:	200063c8 	.word	0x200063c8

08003f9c <DMA2_Stream2_IRQHandler>:



void DMA2_Stream2_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	LaserUpdate(&lsrx, 0);
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4806      	ldr	r0, [pc, #24]	; (8003fbc <DMA2_Stream2_IRQHandler+0x20>)
 8003fa4:	f7ff ffd6 	bl	8003f54 <LaserUpdate>
	LaserUpdate(&lsry, 1);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	4805      	ldr	r0, [pc, #20]	; (8003fc0 <DMA2_Stream2_IRQHandler+0x24>)
 8003fac:	f7ff ffd2 	bl	8003f54 <LaserUpdate>

	HAL_DMA_IRQHandler(&hdma_adc1);
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <DMA2_Stream2_IRQHandler+0x28>)
 8003fb2:	f013 f9b5 	bl	8017320 <HAL_DMA_IRQHandler>

}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20006cf0 	.word	0x20006cf0
 8003fc0:	2000a2c0 	.word	0x2000a2c0
 8003fc4:	200063e4 	.word	0x200063e4

08003fc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0a4      	sub	sp, #144	; 0x90
 8003fcc:	af00      	add	r7, sp, #0
	set();
 8003fce:	f008 f9e9 	bl	800c3a4 <set>
	const osThreadAttr_t MainTask_attributes =
 8003fd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f01b fa2e 	bl	801f43c <memset>
 8003fe0:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <main+0xe0>)
 8003fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fe8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fec:	2318      	movs	r3, #24
 8003fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{ .name = "MainTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t CheckingTask_attributes =
 8003ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f01b fa1e 	bl	801f43c <memset>
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <main+0xe4>)
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
 8004004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400a:	2318      	movs	r3, #24
 800400c:	663b      	str	r3, [r7, #96]	; 0x60
			{ .name = "CheckingTask", .stack_size =512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t NaviTask_attributes =
 800400e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f01b fa10 	bl	801f43c <memset>
 800401c:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <main+0xe8>)
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
 8004020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
 8004026:	2318      	movs	r3, #24
 8004028:	63fb      	str	r3, [r7, #60]	; 0x3c
			{ .name = "NaviTask", .stack_size = 512 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	const osThreadAttr_t EmergencyTask_attributes =
 800402a:	463b      	mov	r3, r7
 800402c:	2224      	movs	r2, #36	; 0x24
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f01b fa03 	bl	801f43c <memset>
 8004036:	4b1f      	ldr	r3, [pc, #124]	; (80040b4 <main+0xec>)
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	2318      	movs	r3, #24
 8004042:	61bb      	str	r3, [r7, #24]
			{ .name = "EmergencyTask", .stack_size = 256 * 4, .priority =
					(osPriority_t) osPriorityNormal, };

	osKernelInitialize();
 8004044:	f018 fc66 	bl	801c914 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004048:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800404c:	461a      	mov	r2, r3
 800404e:	2100      	movs	r1, #0
 8004050:	4819      	ldr	r0, [pc, #100]	; (80040b8 <main+0xf0>)
 8004052:	f018 fca9 	bl	801c9a8 <osThreadNew>
 8004056:	4603      	mov	r3, r0
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <main+0xf4>)
 800405a:	6013      	str	r3, [r2, #0]
	NaviTaskHandle = osThreadNew(NaviTask, NULL, &NaviTask_attributes);
 800405c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004060:	461a      	mov	r2, r3
 8004062:	2100      	movs	r1, #0
 8004064:	4816      	ldr	r0, [pc, #88]	; (80040c0 <main+0xf8>)
 8004066:	f018 fc9f 	bl	801c9a8 <osThreadNew>
 800406a:	4603      	mov	r3, r0
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <main+0xfc>)
 800406e:	6013      	str	r3, [r2, #0]
	CheckingTaskHandle = osThreadNew(CheckingTask, NULL,
 8004070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004074:	461a      	mov	r2, r3
 8004076:	2100      	movs	r1, #0
 8004078:	4813      	ldr	r0, [pc, #76]	; (80040c8 <main+0x100>)
 800407a:	f018 fc95 	bl	801c9a8 <osThreadNew>
 800407e:	4603      	mov	r3, r0
 8004080:	4a12      	ldr	r2, [pc, #72]	; (80040cc <main+0x104>)
 8004082:	6013      	str	r3, [r2, #0]
			&CheckingTask_attributes);
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL,
 8004084:	463b      	mov	r3, r7
 8004086:	461a      	mov	r2, r3
 8004088:	2100      	movs	r1, #0
 800408a:	4811      	ldr	r0, [pc, #68]	; (80040d0 <main+0x108>)
 800408c:	f018 fc8c 	bl	801c9a8 <osThreadNew>
 8004090:	4603      	mov	r3, r0
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <main+0x10c>)
 8004094:	6013      	str	r3, [r2, #0]
			&EmergencyTask_attributes);
	led2 = 1;
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <main+0x110>)
 8004098:	7853      	ldrb	r3, [r2, #1]
 800409a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409e:	7053      	strb	r3, [r2, #1]
	osKernelStart();
 80040a0:	f018 fc5c 	bl	801c95c <osKernelStart>

	while (1) {
 80040a4:	e7fe      	b.n	80040a4 <main+0xdc>
 80040a6:	bf00      	nop
 80040a8:	08025278 	.word	0x08025278
 80040ac:	08025284 	.word	0x08025284
 80040b0:	08025294 	.word	0x08025294
 80040b4:	080252a0 	.word	0x080252a0
 80040b8:	08004209 	.word	0x08004209
 80040bc:	200079d4 	.word	0x200079d4
 80040c0:	08004349 	.word	0x08004349
 80040c4:	200073b4 	.word	0x200073b4
 80040c8:	08004555 	.word	0x08004555
 80040cc:	2000a0f0 	.word	0x2000a0f0
 80040d0:	0800462d 	.word	0x0800462d
 80040d4:	20009fe4 	.word	0x20009fe4
 80040d8:	40020814 	.word	0x40020814

080040dc <TIM6_DAC_IRQHandler>:

	}
}

void TIM6_DAC_IRQHandler(void) {
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	b093      	sub	sp, #76	; 0x4c
 80040e2:	af0c      	add	r7, sp, #48	; 0x30

	static int counter = 0;
	counter++;
 80040e4:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	4a3b      	ldr	r2, [pc, #236]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 80040ec:	6013      	str	r3, [r2, #0]

	if(counter % 4 == 0)
 80040ee:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d160      	bne.n	80041bc <TIM6_DAC_IRQHandler+0xe0>
	{
		led1 = !led1;
 80040fa:	4b38      	ldr	r3, [pc, #224]	; (80041dc <TIM6_DAC_IRQHandler+0x100>)
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4a35      	ldr	r2, [pc, #212]	; (80041dc <TIM6_DAC_IRQHandler+0x100>)
 8004106:	2b00      	cmp	r3, #0
 8004108:	bf0c      	ite	eq
 800410a:	2301      	moveq	r3, #1
 800410c:	2300      	movne	r3, #0
 800410e:	b2d9      	uxtb	r1, r3
 8004110:	7853      	ldrb	r3, [r2, #1]
 8004112:	f361 1345 	bfi	r3, r1, #5, #1
 8004116:	7053      	strb	r3, [r2, #1]
		counter = 0;
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <TIM6_DAC_IRQHandler+0xfc>)
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
//	//				lidar.pos_counter, pp.error_x, pp.error_y, pp.real_x, pp.real_y, pp.real_z, pick_enc);
//	//		sprintf((char*)debug, "VESC: %f\n", vesc_duty);
//		}

		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800411e:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fa10 	bl	8000548 <__aeabi_f2d>
 8004128:	e9c7 0104 	strd	r0, r1, [r7, #16]
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fa09 	bl	8000548 <__aeabi_f2d>
 8004136:	4680      	mov	r8, r0
 8004138:	4689      	mov	r9, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc fa02 	bl	8000548 <__aeabi_f2d>
 8004144:	4682      	mov	sl, r0
 8004146:	468b      	mov	fp, r1
 8004148:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <TIM6_DAC_IRQHandler+0x108>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fc f9fb 	bl	8000548 <__aeabi_f2d>
 8004152:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004156:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <TIM6_DAC_IRQHandler+0x10c>)
 8004158:	681e      	ldr	r6, [r3, #0]
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <TIM6_DAC_IRQHandler+0x110>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	607b      	str	r3, [r7, #4]
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 8004160:	4b23      	ldr	r3, [pc, #140]	; (80041f0 <TIM6_DAC_IRQHandler+0x114>)
 8004162:	69db      	ldr	r3, [r3, #28]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004164:	4618      	mov	r0, r3
 8004166:	f7fc f9ef 	bl	8000548 <__aeabi_f2d>
 800416a:	4604      	mov	r4, r0
 800416c:	460d      	mov	r5, r1
				pp.real_x, pp.real_y, pp.real_z, vesc_duty, extra_rpm, pick_enc, lsrL.dist, lsrR.dist);
 800416e:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <TIM6_DAC_IRQHandler+0x118>)
 8004170:	69db      	ldr	r3, [r3, #28]
		sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f VESC: %.2f Extra: %d P: %ld LSRL: %.2f LSRR: %.2f\n",
 8004172:	4618      	mov	r0, r3
 8004174:	f7fc f9e8 	bl	8000548 <__aeabi_f2d>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004180:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	9307      	str	r3, [sp, #28]
 8004188:	9606      	str	r6, [sp, #24]
 800418a:	ed97 7b02 	vldr	d7, [r7, #8]
 800418e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004192:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004196:	e9cd 8900 	strd	r8, r9, [sp]
 800419a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800419e:	4916      	ldr	r1, [pc, #88]	; (80041f8 <TIM6_DAC_IRQHandler+0x11c>)
 80041a0:	4816      	ldr	r0, [pc, #88]	; (80041fc <TIM6_DAC_IRQHandler+0x120>)
 80041a2:	f01c f907 	bl	80203b4 <siprintf>
//		sprintf((char*) debug, "Left: %.2f Right: %.2f VESC: %.2f\n",
//				vesc1.vel, vesc2.vel, vesc_speed);
		HAL_UART_Transmit(&huart5, debug, strlen((char*) debug), HAL_MAX_DELAY);
 80041a6:	4815      	ldr	r0, [pc, #84]	; (80041fc <TIM6_DAC_IRQHandler+0x120>)
 80041a8:	f7fc f812 	bl	80001d0 <strlen>
 80041ac:	4603      	mov	r3, r0
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041b4:	4911      	ldr	r1, [pc, #68]	; (80041fc <TIM6_DAC_IRQHandler+0x120>)
 80041b6:	4812      	ldr	r0, [pc, #72]	; (8004200 <TIM6_DAC_IRQHandler+0x124>)
 80041b8:	f017 fc5d 	bl	801ba76 <HAL_UART_Transmit>
//
//	flywheelPID(vesc_speed);
//	flywheelAct();

//	enq();
	PathPlan(&pp);
 80041bc:	4808      	ldr	r0, [pc, #32]	; (80041e0 <TIM6_DAC_IRQHandler+0x104>)
 80041be:	f002 f8d7 	bl	8006370 <PathPlan>
	CheckPickEnc();
 80041c2:	f009 fbd7 	bl	800d974 <CheckPickEnc>

//	sprintf((char*) debug, "X: %.2f Y: %.2f Yaw: %.2f \n", fXPos, fYPos, fyaw);
//	HAL_UART_Transmit(&huart4, debug, strlen((char*) debug), HAL_MAX_DELAY);
	HAL_TIM_IRQHandler(&htim6);
 80041c6:	480f      	ldr	r0, [pc, #60]	; (8004204 <TIM6_DAC_IRQHandler+0x128>)
 80041c8:	f016 fdae 	bl	801ad28 <HAL_TIM_IRQHandler>

}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	200002c0 	.word	0x200002c0
 80041dc:	40020814 	.word	0x40020814
 80041e0:	20006d44 	.word	0x20006d44
 80041e4:	20007494 	.word	0x20007494
 80041e8:	2000665c 	.word	0x2000665c
 80041ec:	20006c08 	.word	0x20006c08
 80041f0:	20007728 	.word	0x20007728
 80041f4:	200095f8 	.word	0x200095f8
 80041f8:	080252b0 	.word	0x080252b0
 80041fc:	200075a0 	.word	0x200075a0
 8004200:	20005d24 	.word	0x20005d24
 8004204:	20005eec 	.word	0x20005eec

08004208 <MainTask>:

// Can be polling
void MainTask(void *argument) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	RobotStart();
 8004210:	f008 fbf8 	bl	800ca04 <RobotStart>
	while (1) {
		if (ps4.button == SELECT)
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <MainTask+0x128>)
 8004216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d110      	bne.n	800423e <MainTask+0x36>
		{
			while (ps4.button == SELECT);
 800421c:	bf00      	nop
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <MainTask+0x128>)
 8004220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d0fb      	beq.n	800421e <MainTask+0x16>
			mode++;
 8004226:	4b43      	ldr	r3, [pc, #268]	; (8004334 <MainTask+0x12c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	4a41      	ldr	r2, [pc, #260]	; (8004334 <MainTask+0x12c>)
 800422e:	6013      	str	r3, [r2, #0]

			if (mode > 1)
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <MainTask+0x12c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	dd02      	ble.n	800423e <MainTask+0x36>
				mode = 0;
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <MainTask+0x12c>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == L1)
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <MainTask+0x128>)
 8004240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d127      	bne.n	8004298 <MainTask+0x90>
		{
			while(ps4.button == L1);
 8004248:	bf00      	nop
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <MainTask+0x128>)
 800424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d0fa      	beq.n	800424a <MainTask+0x42>
			vesc_speed += 0.05;
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <MainTask+0x130>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f975 	bl	8000548 <__aeabi_f2d>
 800425e:	a332      	add	r3, pc, #200	; (adr r3, 8004328 <MainTask+0x120>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f812 	bl	800028c <__adddf3>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f7fc fcba 	bl	8000be8 <__aeabi_d2f>
 8004274:	4603      	mov	r3, r0
 8004276:	4a30      	ldr	r2, [pc, #192]	; (8004338 <MainTask+0x130>)
 8004278:	6013      	str	r3, [r2, #0]
			vesc_duty += 5;
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <MainTask+0x134>)
 800427c:	edd3 7a00 	vldr	s15, [r3]
 8004280:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004288:	4b2c      	ldr	r3, [pc, #176]	; (800433c <MainTask+0x134>)
 800428a:	edc3 7a00 	vstr	s15, [r3]
			manual_adjust++;
 800428e:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <MainTask+0x138>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3301      	adds	r3, #1
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <MainTask+0x138>)
 8004296:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, 50);
//			ServoMovePulse(&servo_ring_new, -50);
		}

		if(ps4.button == R1)
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <MainTask+0x128>)
 800429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a0:	d127      	bne.n	80042f2 <MainTask+0xea>
		{
			while(ps4.button == R1);
 80042a2:	bf00      	nop
 80042a4:	4b22      	ldr	r3, [pc, #136]	; (8004330 <MainTask+0x128>)
 80042a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ac:	d0fa      	beq.n	80042a4 <MainTask+0x9c>
			vesc_speed -= 0.05;
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <MainTask+0x130>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f948 	bl	8000548 <__aeabi_f2d>
 80042b8:	a31b      	add	r3, pc, #108	; (adr r3, 8004328 <MainTask+0x120>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fb ffe3 	bl	8000288 <__aeabi_dsub>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc fc8d 	bl	8000be8 <__aeabi_d2f>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <MainTask+0x130>)
 80042d2:	6013      	str	r3, [r2, #0]
			vesc_duty -= 5;
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <MainTask+0x134>)
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80042de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042e2:	4b16      	ldr	r3, [pc, #88]	; (800433c <MainTask+0x134>)
 80042e4:	edc3 7a00 	vstr	s15, [r3]
			manual_adjust--;
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <MainTask+0x138>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a14      	ldr	r2, [pc, #80]	; (8004340 <MainTask+0x138>)
 80042f0:	6013      	str	r3, [r2, #0]
//			ServoMovePulse(&servo_ring, -50);
//			ServoMovePulse(&servo_ring_new, 50);
		}

		switch (mode)
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <MainTask+0x12c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d00f      	beq.n	800431a <MainTask+0x112>
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	dc8a      	bgt.n	8004214 <MainTask+0xc>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <MainTask+0x100>
 8004302:	2b01      	cmp	r3, #1
 8004304:	d003      	beq.n	800430e <MainTask+0x106>
 8004306:	e00b      	b.n	8004320 <MainTask+0x118>
		{
			case NORMAL:
				NormalControl();
 8004308:	f008 fc7a 	bl	800cc00 <NormalControl>
			break;
 800430c:	e008      	b.n	8004320 <MainTask+0x118>

			case AUTO:
				Auto();
 800430e:	f009 f91b 	bl	800d548 <Auto>
				LidarControl(&lidar);
 8004312:	480c      	ldr	r0, [pc, #48]	; (8004344 <MainTask+0x13c>)
 8004314:	f011 f98a 	bl	801562c <LidarControl>
			break;
 8004318:	e002      	b.n	8004320 <MainTask+0x118>

			case TUNE:
				tune();
 800431a:	f00a f861 	bl	800e3e0 <tune>
			break;
 800431e:	bf00      	nop
		if (ps4.button == SELECT)
 8004320:	e778      	b.n	8004214 <MainTask+0xc>
 8004322:	bf00      	nop
 8004324:	f3af 8000 	nop.w
 8004328:	9999999a 	.word	0x9999999a
 800432c:	3fa99999 	.word	0x3fa99999
 8004330:	2000a240 	.word	0x2000a240
 8004334:	20009450 	.word	0x20009450
 8004338:	200065b8 	.word	0x200065b8
 800433c:	20007494 	.word	0x20007494
 8004340:	20007598 	.word	0x20007598
 8004344:	200091a0 	.word	0x200091a0

08004348 <NaviTask>:
		}
	}
}

// Cannot Polling
void NaviTask(void *argument) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
//			{
//				pitch_stop;
//			}
//		}

		switch(go_type_3)
 8004350:	4b6e      	ldr	r3, [pc, #440]	; (800450c <NaviTask+0x1c4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d823      	bhi.n	80043a0 <NaviTask+0x58>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <NaviTask+0x18>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004371 	.word	0x08004371
 8004364:	0800437d 	.word	0x0800437d
 8004368:	08004389 	.word	0x08004389
 800436c:	08004395 	.word	0x08004395
		{
			case 0:
				led5_off;
 8004370:	4a67      	ldr	r2, [pc, #412]	; (8004510 <NaviTask+0x1c8>)
 8004372:	7e13      	ldrb	r3, [r2, #24]
 8004374:	f36f 13c7 	bfc	r3, #7, #1
 8004378:	7613      	strb	r3, [r2, #24]
				break;
 800437a:	e012      	b.n	80043a2 <NaviTask+0x5a>

			case 1:
				led5_on;
 800437c:	4a64      	ldr	r2, [pc, #400]	; (8004510 <NaviTask+0x1c8>)
 800437e:	7e13      	ldrb	r3, [r2, #24]
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	7613      	strb	r3, [r2, #24]
				break;
 8004386:	e00c      	b.n	80043a2 <NaviTask+0x5a>

			case 2:
				led5_off;
 8004388:	4a61      	ldr	r2, [pc, #388]	; (8004510 <NaviTask+0x1c8>)
 800438a:	7e13      	ldrb	r3, [r2, #24]
 800438c:	f36f 13c7 	bfc	r3, #7, #1
 8004390:	7613      	strb	r3, [r2, #24]
				break;
 8004392:	e006      	b.n	80043a2 <NaviTask+0x5a>

			case 3:
				led5_on;
 8004394:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <NaviTask+0x1c8>)
 8004396:	7e13      	ldrb	r3, [r2, #24]
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	7613      	strb	r3, [r2, #24]
				break;
 800439e:	e000      	b.n	80043a2 <NaviTask+0x5a>

			default:
				break;
 80043a0:	bf00      	nop
		}

		if(!load_start && !set_pick_enc && !reload)
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <NaviTask+0x1cc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d117      	bne.n	80043da <NaviTask+0x92>
 80043aa:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <NaviTask+0x1d0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d113      	bne.n	80043da <NaviTask+0x92>
 80043b2:	4b5a      	ldr	r3, [pc, #360]	; (800451c <NaviTask+0x1d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <NaviTask+0x92>
			pick_manual(ps4.joyR_y * 14000);
 80043ba:	4b59      	ldr	r3, [pc, #356]	; (8004520 <NaviTask+0x1d8>)
 80043bc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043c0:	eef1 7a67 	vneg.f32	s15, s15
 80043c4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8004524 <NaviTask+0x1dc>
 80043c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d0:	ee17 1a90 	vmov	r1, s15
 80043d4:	4854      	ldr	r0, [pc, #336]	; (8004528 <NaviTask+0x1e0>)
 80043d6:	f7fc fed8 	bl	800118a <WriteBDC>

		if(vesc_duty > 0.0)
 80043da:	4b54      	ldr	r3, [pc, #336]	; (800452c <NaviTask+0x1e4>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	dd03      	ble.n	80043f2 <NaviTask+0xaa>
			vesc_start = 1;
 80043ea:	4b51      	ldr	r3, [pc, #324]	; (8004530 <NaviTask+0x1e8>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <NaviTask+0xb0>
		else
			vesc_start = 0;
 80043f2:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <NaviTask+0x1e8>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

		if(vesc_start)
 80043f8:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <NaviTask+0x1e8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d03a      	beq.n	8004476 <NaviTask+0x12e>
		{
			if(vesc_duty == type1Duty)
 8004400:	4b4a      	ldr	r3, [pc, #296]	; (800452c <NaviTask+0x1e4>)
 8004402:	edd3 7a00 	vldr	s15, [r3]
 8004406:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004534 <NaviTask+0x1ec>
 800440a:	eef4 7a47 	vcmp.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d110      	bne.n	8004436 <NaviTask+0xee>
			{
				VESCRPM(vesc_duty, &vesc1);
 8004414:	4b45      	ldr	r3, [pc, #276]	; (800452c <NaviTask+0x1e4>)
 8004416:	edd3 7a00 	vldr	s15, [r3]
 800441a:	4847      	ldr	r0, [pc, #284]	; (8004538 <NaviTask+0x1f0>)
 800441c:	eeb0 0a67 	vmov.f32	s0, s15
 8004420:	f00b f90a 	bl	800f638 <VESCRPM>
				VESCRPM(vesc_duty, &vesc2);
 8004424:	4b41      	ldr	r3, [pc, #260]	; (800452c <NaviTask+0x1e4>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	4844      	ldr	r0, [pc, #272]	; (800453c <NaviTask+0x1f4>)
 800442c:	eeb0 0a67 	vmov.f32	s0, s15
 8004430:	f00b f902 	bl	800f638 <VESCRPM>
 8004434:	e01f      	b.n	8004476 <NaviTask+0x12e>
			}
			else
			{
				VESCRPM(vesc_duty + extra_rpm, &vesc1);
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <NaviTask+0x1f8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004442:	4b3a      	ldr	r3, [pc, #232]	; (800452c <NaviTask+0x1e4>)
 8004444:	edd3 7a00 	vldr	s15, [r3]
 8004448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444c:	483a      	ldr	r0, [pc, #232]	; (8004538 <NaviTask+0x1f0>)
 800444e:	eeb0 0a67 	vmov.f32	s0, s15
 8004452:	f00b f8f1 	bl	800f638 <VESCRPM>
				VESCRPM(vesc_duty + extra_rpm, &vesc2);
 8004456:	4b3a      	ldr	r3, [pc, #232]	; (8004540 <NaviTask+0x1f8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004462:	4b32      	ldr	r3, [pc, #200]	; (800452c <NaviTask+0x1e4>)
 8004464:	edd3 7a00 	vldr	s15, [r3]
 8004468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446c:	4833      	ldr	r0, [pc, #204]	; (800453c <NaviTask+0x1f4>)
 800446e:	eeb0 0a67 	vmov.f32	s0, s15
 8004472:	f00b f8e1 	bl	800f638 <VESCRPM>
//		if(stick_fence && MODN.x_vel == 0.0 && MODN.y_vel == 0.0 && !In_LS_Shot_1 && !In_LS_Shot_2)
//			RNSVelocity(0.25, 0.25, 0.25, 0.25, &rns);
//		else if(stick_fence && In_LS_Shot_1 && In_LS_Shot_2)
//			RNSStop(&rns);

		enq();
 8004476:	f009 ff87 	bl	800e388 <enq>
		pick_enc = QEIRead(QEI1);
 800447a:	2001      	movs	r0, #1
 800447c:	f7fd fc26 	bl	8001ccc <QEIRead>
 8004480:	4603      	mov	r3, r0
 8004482:	4a30      	ldr	r2, [pc, #192]	; (8004544 <NaviTask+0x1fc>)
 8004484:	6013      	str	r3, [r2, #0]

		if(!pp.pp_start && !vel_adjust && !pp.lsr_start)
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <NaviTask+0x200>)
 8004488:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d110      	bne.n	80044b8 <NaviTask+0x170>
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <NaviTask+0x204>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <NaviTask+0x170>
 800449e:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <NaviTask+0x200>)
 80044a0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <NaviTask+0x170>
//			if (ps4.button == R1) {
//				while (ps4.button == R1);
//				moveSpeed--;
//				setSpeedMODN(moveSpeed);
//			}
			realMODN(&ps4, &rns);
 80044ae:	4928      	ldr	r1, [pc, #160]	; (8004550 <NaviTask+0x208>)
 80044b0:	481b      	ldr	r0, [pc, #108]	; (8004520 <NaviTask+0x1d8>)
 80044b2:	f000 f9a5 	bl	8004800 <realMODN>
 80044b6:	e027      	b.n	8004508 <NaviTask+0x1c0>
		}
		else if(pp.pp_start || pp.lsr_start)
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <NaviTask+0x200>)
 80044ba:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d108      	bne.n	80044da <NaviTask+0x192>
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <NaviTask+0x200>)
 80044ca:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f43f af3b 	beq.w	8004350 <NaviTask+0x8>
			RNSVelocity(pp.v1, pp.v2, pp.v3, pp.v4, &rns);
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <NaviTask+0x200>)
 80044dc:	edd3 7abe 	vldr	s15, [r3, #760]	; 0x2f8
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <NaviTask+0x200>)
 80044e2:	ed93 7abf 	vldr	s14, [r3, #764]	; 0x2fc
 80044e6:	4b18      	ldr	r3, [pc, #96]	; (8004548 <NaviTask+0x200>)
 80044e8:	edd3 6ac0 	vldr	s13, [r3, #768]	; 0x300
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <NaviTask+0x200>)
 80044ee:	ed93 6ac1 	vldr	s12, [r3, #772]	; 0x304
 80044f2:	4817      	ldr	r0, [pc, #92]	; (8004550 <NaviTask+0x208>)
 80044f4:	eef0 1a46 	vmov.f32	s3, s12
 80044f8:	eeb0 1a66 	vmov.f32	s2, s13
 80044fc:	eef0 0a47 	vmov.f32	s1, s14
 8004500:	eeb0 0a67 	vmov.f32	s0, s15
 8004504:	f006 fd18 	bl	800af38 <RNSVelocity>
		switch(go_type_3)
 8004508:	e722      	b.n	8004350 <NaviTask+0x8>
 800450a:	bf00      	nop
 800450c:	20006d40 	.word	0x20006d40
 8004510:	200097d4 	.word	0x200097d4
 8004514:	2000745c 	.word	0x2000745c
 8004518:	2000789c 	.word	0x2000789c
 800451c:	200078b8 	.word	0x200078b8
 8004520:	2000a240 	.word	0x2000a240
 8004524:	465ac000 	.word	0x465ac000
 8004528:	20007878 	.word	0x20007878
 800452c:	20007494 	.word	0x20007494
 8004530:	20006a48 	.word	0x20006a48
 8004534:	445e8000 	.word	0x445e8000
 8004538:	20006b2c 	.word	0x20006b2c
 800453c:	20009b9c 	.word	0x20009b9c
 8004540:	2000665c 	.word	0x2000665c
 8004544:	20006c08 	.word	0x20006c08
 8004548:	20006d44 	.word	0x20006d44
 800454c:	20009194 	.word	0x20009194
 8004550:	20009074 	.word	0x20009074

08004554 <CheckingTask>:

	}
}

void CheckingTask(void *argument)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Checking();
 800455c:	f009 fe92 	bl	800e284 <Checking>
//		else
//		{
//			led4_off;
//		}

		if(blue)
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <CheckingTask+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <CheckingTask+0x20>
		{
			led4_on;
 8004568:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <CheckingTask+0xc0>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
 8004572:	e003      	b.n	800457c <CheckingTask+0x28>
		}
		else
		{
			led4_off;
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <CheckingTask+0xc0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
//		else
//		{
//			led5_off;
//		}

		if(In_Load)
 800457c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004580:	4825      	ldr	r0, [pc, #148]	; (8004618 <CheckingTask+0xc4>)
 8004582:	f013 fbe9 	bl	8017d58 <HAL_GPIO_ReadPin>
 8004586:	4603      	mov	r3, r0
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <CheckingTask+0x44>
		{
			led6_on;
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <CheckingTask+0xc8>)
 800458e:	7e13      	ldrb	r3, [r2, #24]
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	7613      	strb	r3, [r2, #24]
 8004596:	e004      	b.n	80045a2 <CheckingTask+0x4e>
		}
		else
		{
			led6_off;
 8004598:	4a20      	ldr	r2, [pc, #128]	; (800461c <CheckingTask+0xc8>)
 800459a:	7e13      	ldrb	r3, [r2, #24]
 800459c:	f36f 1386 	bfc	r3, #6, #1
 80045a0:	7613      	strb	r3, [r2, #24]
		}

		if(In_Pick)
 80045a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045a6:	481c      	ldr	r0, [pc, #112]	; (8004618 <CheckingTask+0xc4>)
 80045a8:	f013 fbd6 	bl	8017d58 <HAL_GPIO_ReadPin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <CheckingTask+0x6a>
		{
			led7_on;
 80045b2:	4b18      	ldr	r3, [pc, #96]	; (8004614 <CheckingTask+0xc0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80045bc:	e003      	b.n	80045c6 <CheckingTask+0x72>
		}
		else
		{
			led7_off;
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <CheckingTask+0xc0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(led_enb)
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <CheckingTask+0xcc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0c6      	beq.n	800455c <CheckingTask+0x8>
		{
			if (HAL_GetTick() - before_shot >= shot_prd)
 80045ce:	f011 fd47 	bl	8016060 <HAL_GetTick>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <CheckingTask+0xd0>)
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	4a13      	ldr	r2, [pc, #76]	; (8004628 <CheckingTask+0xd4>)
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	4293      	cmp	r3, r2
 80045e0:	d3bc      	bcc.n	800455c <CheckingTask+0x8>
			{
				led8 = !led8;
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <CheckingTask+0xc8>)
 80045e4:	7e1b      	ldrb	r3, [r3, #24]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2d9      	uxtb	r1, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <CheckingTask+0xc8>)
 80045f8:	7e13      	ldrb	r3, [r2, #24]
 80045fa:	f361 1345 	bfi	r3, r1, #5, #1
 80045fe:	7613      	strb	r3, [r2, #24]
				before_shot = HAL_GetTick();
 8004600:	f011 fd2e 	bl	8016060 <HAL_GetTick>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <CheckingTask+0xd0>)
 800460a:	601a      	str	r2, [r3, #0]
		Checking();
 800460c:	e7a6      	b.n	800455c <CheckingTask+0x8>
 800460e:	bf00      	nop
 8004610:	20006a44 	.word	0x20006a44
 8004614:	20005ca0 	.word	0x20005ca0
 8004618:	40021000 	.word	0x40021000
 800461c:	200097d4 	.word	0x200097d4
 8004620:	2000a858 	.word	0x2000a858
 8004624:	20006afc 	.word	0x20006afc
 8004628:	2000a5cc 	.word	0x2000a5cc

0800462c <EmergencyTask>:
			}
		}
	}
}

void EmergencyTask(void *argument) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

	while (1) {

		if(servo_enb)
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <EmergencyTask+0xb4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d03b      	beq.n	80046b4 <EmergencyTask+0x88>
		{
			for(int i = 0; i < 4; i++)
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e028      	b.n	8004694 <EmergencyTask+0x68>
			{
				if(ps4.button == SQUARE)
 8004642:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <EmergencyTask+0xb8>)
 8004644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d106      	bne.n	800465a <EmergencyTask+0x2e>
				{
					while(ps4.button == SQUARE);
 800464c:	bf00      	nop
 800464e:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <EmergencyTask+0xb8>)
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	d0fa      	beq.n	800464e <EmergencyTask+0x22>
					break;
 8004658:	e01f      	b.n	800469a <EmergencyTask+0x6e>
				}

				load_adjust_servo;
 800465a:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 800465e:	4822      	ldr	r0, [pc, #136]	; (80046e8 <EmergencyTask+0xbc>)
 8004660:	f007 f876 	bl	800b750 <ServoSetPulse>
 8004664:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004668:	4820      	ldr	r0, [pc, #128]	; (80046ec <EmergencyTask+0xc0>)
 800466a:	f007 f871 	bl	800b750 <ServoSetPulse>
				osDelay(100);
 800466e:	2064      	movs	r0, #100	; 0x64
 8004670:	f018 fa2c 	bl	801cacc <osDelay>
				close_servo;
 8004674:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8004678:	481b      	ldr	r0, [pc, #108]	; (80046e8 <EmergencyTask+0xbc>)
 800467a:	f007 f869 	bl	800b750 <ServoSetPulse>
 800467e:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8004682:	481a      	ldr	r0, [pc, #104]	; (80046ec <EmergencyTask+0xc0>)
 8004684:	f007 f864 	bl	800b750 <ServoSetPulse>
				osDelay(100);
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	f018 fa1f 	bl	801cacc <osDelay>
			for(int i = 0; i < 4; i++)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b03      	cmp	r3, #3
 8004698:	ddd3      	ble.n	8004642 <EmergencyTask+0x16>
	//			{
	//				adjust_servo;
	//				break;
	//			}
			}
			adjust_servo;
 800469a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800469e:	4812      	ldr	r0, [pc, #72]	; (80046e8 <EmergencyTask+0xbc>)
 80046a0:	f007 f856 	bl	800b750 <ServoSetPulse>
 80046a4:	f640 0166 	movw	r1, #2150	; 0x866
 80046a8:	4810      	ldr	r0, [pc, #64]	; (80046ec <EmergencyTask+0xc0>)
 80046aa:	f007 f851 	bl	800b750 <ServoSetPulse>
			servo_enb = 0;
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <EmergencyTask+0xb4>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
		}


		if (ps4.button == TOUCH) {
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <EmergencyTask+0xb8>)
 80046b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046bc:	d1ba      	bne.n	8004634 <EmergencyTask+0x8>
//			const osThreadAttr_t MainTask_attributes = { .name = "MainTask",
//					.stack_size = 256 * 4, .priority =
//							(osPriority_t) osPriorityNormal, };
//
//			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
			while(ps4.button == TOUCH)
 80046be:	e004      	b.n	80046ca <EmergencyTask+0x9e>
				pp.target_vel[0] = 1.5;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <EmergencyTask+0xc4>)
 80046c2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80046c6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
			while(ps4.button == TOUCH)
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <EmergencyTask+0xb8>)
 80046cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046d2:	d0f5      	beq.n	80046c0 <EmergencyTask+0x94>
			pp.target_vel[0] = 0.4;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <EmergencyTask+0xc4>)
 80046d6:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <EmergencyTask+0xc8>)
 80046d8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		if(servo_enb)
 80046dc:	e7aa      	b.n	8004634 <EmergencyTask+0x8>
 80046de:	bf00      	nop
 80046e0:	2000a7e8 	.word	0x2000a7e8
 80046e4:	2000a240 	.word	0x2000a240
 80046e8:	200079d8 	.word	0x200079d8
 80046ec:	2000a5e8 	.word	0x2000a5e8
 80046f0:	20006d44 	.word	0x20006d44
 80046f4:	3ecccccd 	.word	0x3ecccccd

080046f8 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	if (huart == IMU.huartx) {
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_UART_RxCpltCallback+0x34>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	429a      	cmp	r2, r3
 8004708:	d102      	bne.n	8004710 <HAL_UART_RxCpltCallback+0x18>
		R6091U_Handler(&IMU);
 800470a:	4808      	ldr	r0, [pc, #32]	; (800472c <HAL_UART_RxCpltCallback+0x34>)
 800470c:	f006 fa66 	bl	800abdc <R6091U_Handler>
	}

	if(huart == lidar.lidar_UART)
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <HAL_UART_RxCpltCallback+0x38>)
 8004712:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d102      	bne.n	8004722 <HAL_UART_RxCpltCallback+0x2a>
	{
		ObstacleHandler(&lidar);
 800471c:	4804      	ldr	r0, [pc, #16]	; (8004730 <HAL_UART_RxCpltCallback+0x38>)
 800471e:	f011 fa37 	bl	8015b90 <ObstacleHandler>
	}
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20006c90 	.word	0x20006c90
 8004730:	200091a0 	.word	0x200091a0

08004734 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void) {
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0

}
 8004738:	bf00      	nop
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	0000      	movs	r0, r0
 8004744:	0000      	movs	r0, r0
	...

08004748 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	ed87 0a04 	vstr	s0, [r7, #16]
 8004754:	edc7 0a03 	vstr	s1, [r7, #12]
 8004758:	ed87 1a02 	vstr	s2, [r7, #8]
 800475c:	edc7 1a01 	vstr	s3, [r7, #4]
 8004760:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 8004762:	4a23      	ldr	r2, [pc, #140]	; (80047f0 <MODNInit+0xa8>)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 800476a:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <MODNInit+0xa8>)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <MODNInit+0xa8>)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	f7fb fee6 	bl	8000548 <__aeabi_f2d>
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <MODNInit+0xac>)
 8004782:	f7fc f863 	bl	800084c <__aeabi_ddiv>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	a316      	add	r3, pc, #88	; (adr r3, 80047e8 <MODNInit+0xa0>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb ff30 	bl	80005f8 <__aeabi_dmul>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc fa22 	bl	8000be8 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <MODNInit+0xa8>)
 80047a8:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 80047aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80047ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <MODNInit+0xa8>)
 80047b8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80047bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <MODNInit+0xa8>)
 80047c2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <MODNInit+0xa8>)
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = OPERATOR_TURNED_0_DEGREE;
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <MODNInit+0xa8>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.real_x_vel = &(MODN.x_vel);
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <MODNInit+0xa8>)
 80047d6:	4a06      	ldr	r2, [pc, #24]	; (80047f0 <MODNInit+0xa8>)
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_y_vel = &(MODN.y_vel);
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <MODNInit+0xa8>)
 80047dc:	4a06      	ldr	r2, [pc, #24]	; (80047f8 <MODNInit+0xb0>)
 80047de:	649a      	str	r2, [r3, #72]	; 0x48
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	54442eea 	.word	0x54442eea
 80047ec:	400921fb 	.word	0x400921fb
 80047f0:	20006a94 	.word	0x20006a94
 80047f4:	40668000 	.word	0x40668000
 80047f8:	20006a98 	.word	0x20006a98
 80047fc:	00000000 	.word	0x00000000

08004800 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	ed2d 8b02 	vpush	{d8}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	switch(MODN.orientation)
 800480e:	4b52      	ldr	r3, [pc, #328]	; (8004958 <realMODN+0x158>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b03      	cmp	r3, #3
 8004814:	d86e      	bhi.n	80048f4 <realMODN+0xf4>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <realMODN+0x1c>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	0800482d 	.word	0x0800482d
 8004820:	0800485f 	.word	0x0800485f
 8004824:	0800488d 	.word	0x0800488d
 8004828:	080048bf 	.word	0x080048bf
	{
		case OPERATOR_TURNED_0_DEGREE:
			MODN.x_vel = -(psx->joyL_x) * MODN.speed;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004832:	eeb1 7a67 	vneg.f32	s14, s15
 8004836:	4b48      	ldr	r3, [pc, #288]	; (8004958 <realMODN+0x158>)
 8004838:	edd3 7a07 	vldr	s15, [r3, #28]
 800483c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004840:	4b45      	ldr	r3, [pc, #276]	; (8004958 <realMODN+0x158>)
 8004842:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800484c:	4b42      	ldr	r3, [pc, #264]	; (8004958 <realMODN+0x158>)
 800484e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <realMODN+0x158>)
 8004858:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800485c:	e04a      	b.n	80048f4 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_CLOCKWISE:
			MODN.x_vel =  psx->joyL_y * MODN.speed;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004864:	4b3c      	ldr	r3, [pc, #240]	; (8004958 <realMODN+0x158>)
 8004866:	edd3 7a07 	vldr	s15, [r3, #28]
 800486a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486e:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <realMODN+0x158>)
 8004870:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel =  psx->joyL_x * MODN.speed;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <realMODN+0x158>)
 800487c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <realMODN+0x158>)
 8004886:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 800488a:	e033      	b.n	80048f4 <realMODN+0xf4>
		case OPERATOR_TURNED_180_DEGREES:
			MODN.x_vel =  psx->joyL_x * MODN.speed;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004892:	4b31      	ldr	r3, [pc, #196]	; (8004958 <realMODN+0x158>)
 8004894:	edd3 7a07 	vldr	s15, [r3, #28]
 8004898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489c:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <realMODN+0x158>)
 800489e:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_y * MODN.speed;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80048a8:	eeb1 7a67 	vneg.f32	s14, s15
 80048ac:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <realMODN+0x158>)
 80048ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	4b28      	ldr	r3, [pc, #160]	; (8004958 <realMODN+0x158>)
 80048b8:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80048bc:	e01a      	b.n	80048f4 <realMODN+0xf4>
		case OPERATOR_TURNED_90_DEGREES_ANTICLOCKWISE:
			MODN.x_vel = -psx->joyL_y * MODN.speed;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80048c4:	eeb1 7a67 	vneg.f32	s14, s15
 80048c8:	4b23      	ldr	r3, [pc, #140]	; (8004958 <realMODN+0x158>)
 80048ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	4b21      	ldr	r3, [pc, #132]	; (8004958 <realMODN+0x158>)
 80048d4:	edc3 7a00 	vstr	s15, [r3]
			MODN.y_vel = -psx->joyL_x * MODN.speed;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80048de:	eeb1 7a67 	vneg.f32	s14, s15
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <realMODN+0x158>)
 80048e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80048e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <realMODN+0x158>)
 80048ee:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80048f2:	bf00      	nop
	}

	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004900:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004904:	4b14      	ldr	r3, [pc, #80]	; (8004958 <realMODN+0x158>)
 8004906:	edd3 7a07 	vldr	s15, [r3, #28]
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <realMODN+0x158>)
 8004910:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <realMODN+0x158>)
 8004916:	edd3 7a00 	vldr	s15, [r3]
 800491a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	d11b      	bne.n	800495c <realMODN+0x15c>
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <realMODN+0x158>)
 8004926:	edd3 7a01 	vldr	s15, [r3, #4]
 800492a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d113      	bne.n	800495c <realMODN+0x15c>
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <realMODN+0x158>)
 8004936:	edd3 7a02 	vldr	s15, [r3, #8]
 800493a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	d10b      	bne.n	800495c <realMODN+0x15c>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800494a:	2b01      	cmp	r3, #1
 800494c:	f000 8226 	beq.w	8004d9c <realMODN+0x59c>
			RNSStop(rns);
 8004950:	6838      	ldr	r0, [r7, #0]
 8004952:	f006 fa6d 	bl	800ae30 <RNSStop>
		if(rns->RNS_data.common_instruction != RNS_BUSY)
 8004956:	e221      	b.n	8004d9c <realMODN+0x59c>
 8004958:	20006a94 	.word	0x20006a94
	}else{
//		RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
//		float realZrad = rns->enq.enq_buffer[3].data;
		float realZrad = pp.real_z_rad;
 800495c:	4ba2      	ldr	r3, [pc, #648]	; (8004be8 <realMODN+0x3e8>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	60fb      	str	r3, [r7, #12]

		if(MODN.base == MODN_FWD_OMNI) {
 8004962:	4ba2      	ldr	r3, [pc, #648]	; (8004bec <realMODN+0x3ec>)
 8004964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 8141 	bne.w	8004bf0 <realMODN+0x3f0>
			MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 800496e:	4b9f      	ldr	r3, [pc, #636]	; (8004bec <realMODN+0x3ec>)
 8004970:	ed93 8a00 	vldr	s16, [r3]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7fb fde7 	bl	8000548 <__aeabi_f2d>
 800497a:	4602      	mov	r2, r0
 800497c:	460b      	mov	r3, r1
 800497e:	a196      	add	r1, pc, #600	; (adr r1, 8004bd8 <realMODN+0x3d8>)
 8004980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004984:	f7fb fc80 	bl	8000288 <__aeabi_dsub>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f7fc f92a 	bl	8000be8 <__aeabi_d2f>
 8004994:	4603      	mov	r3, r0
 8004996:	ee00 3a10 	vmov	s0, r3
 800499a:	f01f facd 	bl	8023f38 <cosf>
 800499e:	eef0 7a40 	vmov.f32	s15, s0
 80049a2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80049a6:	4b91      	ldr	r3, [pc, #580]	; (8004bec <realMODN+0x3ec>)
 80049a8:	edd3 8a01 	vldr	s17, [r3, #4]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7fb fdcb 	bl	8000548 <__aeabi_f2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	a188      	add	r1, pc, #544	; (adr r1, 8004bd8 <realMODN+0x3d8>)
 80049b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049bc:	f7fb fc64 	bl	8000288 <__aeabi_dsub>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	f7fc f90e 	bl	8000be8 <__aeabi_d2f>
 80049cc:	4603      	mov	r3, r0
 80049ce:	ee00 3a10 	vmov	s0, r3
 80049d2:	f01f faf9 	bl	8023fc8 <sinf>
 80049d6:	eef0 7a40 	vmov.f32	s15, s0
 80049da:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049de:	ee38 7a27 	vadd.f32	s14, s16, s15
 80049e2:	4b82      	ldr	r3, [pc, #520]	; (8004bec <realMODN+0x3ec>)
 80049e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80049e8:	4b80      	ldr	r3, [pc, #512]	; (8004bec <realMODN+0x3ec>)
 80049ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80049ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f6:	4b7d      	ldr	r3, [pc, #500]	; (8004bec <realMODN+0x3ec>)
 80049f8:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 80049fc:	4b7b      	ldr	r3, [pc, #492]	; (8004bec <realMODN+0x3ec>)
 80049fe:	ed93 8a00 	vldr	s16, [r3]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7fb fda0 	bl	8000548 <__aeabi_f2d>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	a174      	add	r1, pc, #464	; (adr r1, 8004be0 <realMODN+0x3e0>)
 8004a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a12:	f7fb fc39 	bl	8000288 <__aeabi_dsub>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7fc f8e3 	bl	8000be8 <__aeabi_d2f>
 8004a22:	4603      	mov	r3, r0
 8004a24:	ee00 3a10 	vmov	s0, r3
 8004a28:	f01f fa86 	bl	8023f38 <cosf>
 8004a2c:	eef0 7a40 	vmov.f32	s15, s0
 8004a30:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004a34:	4b6d      	ldr	r3, [pc, #436]	; (8004bec <realMODN+0x3ec>)
 8004a36:	edd3 8a01 	vldr	s17, [r3, #4]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7fb fd84 	bl	8000548 <__aeabi_f2d>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	a166      	add	r1, pc, #408	; (adr r1, 8004be0 <realMODN+0x3e0>)
 8004a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a4a:	f7fb fc1d 	bl	8000288 <__aeabi_dsub>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4610      	mov	r0, r2
 8004a54:	4619      	mov	r1, r3
 8004a56:	f7fc f8c7 	bl	8000be8 <__aeabi_d2f>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	ee00 3a10 	vmov	s0, r3
 8004a60:	f01f fab2 	bl	8023fc8 <sinf>
 8004a64:	eef0 7a40 	vmov.f32	s15, s0
 8004a68:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a6c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004a70:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <realMODN+0x3ec>)
 8004a72:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a76:	4b5d      	ldr	r3, [pc, #372]	; (8004bec <realMODN+0x3ec>)
 8004a78:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a84:	4b59      	ldr	r3, [pc, #356]	; (8004bec <realMODN+0x3ec>)
 8004a86:	edc3 7a04 	vstr	s15, [r3, #16]
			MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 8004a8a:	4b58      	ldr	r3, [pc, #352]	; (8004bec <realMODN+0x3ec>)
 8004a8c:	ed93 8a00 	vldr	s16, [r3]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7fb fd59 	bl	8000548 <__aeabi_f2d>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	a151      	add	r1, pc, #324	; (adr r1, 8004be0 <realMODN+0x3e0>)
 8004a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa0:	f7fb fbf2 	bl	8000288 <__aeabi_dsub>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f7fc f89c 	bl	8000be8 <__aeabi_d2f>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	ee00 3a10 	vmov	s0, r3
 8004ab6:	f01f fa3f 	bl	8023f38 <cosf>
 8004aba:	eef0 7a40 	vmov.f32	s15, s0
 8004abe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <realMODN+0x3ec>)
 8004ac4:	edd3 8a01 	vldr	s17, [r3, #4]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fb fd3d 	bl	8000548 <__aeabi_f2d>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	a143      	add	r1, pc, #268	; (adr r1, 8004be0 <realMODN+0x3e0>)
 8004ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad8:	f7fb fbd6 	bl	8000288 <__aeabi_dsub>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7fc f880 	bl	8000be8 <__aeabi_d2f>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	ee00 3a10 	vmov	s0, r3
 8004aee:	f01f fa6b 	bl	8023fc8 <sinf>
 8004af2:	eef0 7a40 	vmov.f32	s15, s0
 8004af6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004afa:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <realMODN+0x3ec>)
 8004b00:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b04:	4b39      	ldr	r3, [pc, #228]	; (8004bec <realMODN+0x3ec>)
 8004b06:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <realMODN+0x3ec>)
 8004b14:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8004b18:	4b34      	ldr	r3, [pc, #208]	; (8004bec <realMODN+0x3ec>)
 8004b1a:	ed93 8a00 	vldr	s16, [r3]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f7fb fd12 	bl	8000548 <__aeabi_f2d>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	a12b      	add	r1, pc, #172	; (adr r1, 8004bd8 <realMODN+0x3d8>)
 8004b2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b2e:	f7fb fbab 	bl	8000288 <__aeabi_dsub>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	f7fc f855 	bl	8000be8 <__aeabi_d2f>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	ee00 3a10 	vmov	s0, r3
 8004b44:	f01f f9f8 	bl	8023f38 <cosf>
 8004b48:	eef0 7a40 	vmov.f32	s15, s0
 8004b4c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b50:	4b26      	ldr	r3, [pc, #152]	; (8004bec <realMODN+0x3ec>)
 8004b52:	edd3 8a01 	vldr	s17, [r3, #4]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7fb fcf6 	bl	8000548 <__aeabi_f2d>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	a11d      	add	r1, pc, #116	; (adr r1, 8004bd8 <realMODN+0x3d8>)
 8004b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b66:	f7fb fb8f 	bl	8000288 <__aeabi_dsub>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	f7fc f839 	bl	8000be8 <__aeabi_d2f>
 8004b76:	4603      	mov	r3, r0
 8004b78:	ee00 3a10 	vmov	s0, r3
 8004b7c:	f01f fa24 	bl	8023fc8 <sinf>
 8004b80:	eef0 7a40 	vmov.f32	s15, s0
 8004b84:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b88:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <realMODN+0x3ec>)
 8004b8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b92:	4b16      	ldr	r3, [pc, #88]	; (8004bec <realMODN+0x3ec>)
 8004b94:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <realMODN+0x3ec>)
 8004ba2:	edc3 7a06 	vstr	s15, [r3, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <realMODN+0x3ec>)
 8004ba8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <realMODN+0x3ec>)
 8004bae:	ed93 7a04 	vldr	s14, [r3, #16]
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <realMODN+0x3ec>)
 8004bb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <realMODN+0x3ec>)
 8004bba:	ed93 6a06 	vldr	s12, [r3, #24]
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	eef0 1a46 	vmov.f32	s3, s12
 8004bc4:	eeb0 1a66 	vmov.f32	s2, s13
 8004bc8:	eef0 0a47 	vmov.f32	s1, s14
 8004bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd0:	f006 f9b2 	bl	800af38 <RNSVelocity>
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8004bd4:	e0e2      	b.n	8004d9c <realMODN+0x59c>
 8004bd6:	bf00      	nop
 8004bd8:	2e48e8a7 	.word	0x2e48e8a7
 8004bdc:	3fe921ff 	.word	0x3fe921ff
 8004be0:	62b6ae7d 	.word	0x62b6ae7d
 8004be4:	4002d97f 	.word	0x4002d97f
 8004be8:	20006d44 	.word	0x20006d44
 8004bec:	20006a94 	.word	0x20006a94
		else if (MODN.base == MODN_TRI_OMNI){
 8004bf0:	4b71      	ldr	r3, [pc, #452]	; (8004db8 <realMODN+0x5b8>)
 8004bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 80d0 	bne.w	8004d9c <realMODN+0x59c>
			MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8004bfc:	4b6e      	ldr	r3, [pc, #440]	; (8004db8 <realMODN+0x5b8>)
 8004bfe:	ed93 8a01 	vldr	s16, [r3, #4]
 8004c02:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c06:	eef1 7a67 	vneg.f32	s15, s15
 8004c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0e:	f01f f9db 	bl	8023fc8 <sinf>
 8004c12:	eef0 7a40 	vmov.f32	s15, s0
 8004c16:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004c1a:	4b67      	ldr	r3, [pc, #412]	; (8004db8 <realMODN+0x5b8>)
 8004c1c:	edd3 8a00 	vldr	s17, [r3]
 8004c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c24:	eef1 7a67 	vneg.f32	s15, s15
 8004c28:	eeb0 0a67 	vmov.f32	s0, s15
 8004c2c:	f01f f984 	bl	8023f38 <cosf>
 8004c30:	eef0 7a40 	vmov.f32	s15, s0
 8004c34:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004c38:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004c3c:	4b5e      	ldr	r3, [pc, #376]	; (8004db8 <realMODN+0x5b8>)
 8004c3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c42:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <realMODN+0x5b8>)
 8004c44:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <realMODN+0x5b8>)
 8004c52:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 8004c56:	4b58      	ldr	r3, [pc, #352]	; (8004db8 <realMODN+0x5b8>)
 8004c58:	ed93 8a01 	vldr	s16, [r3, #4]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7fb fc73 	bl	8000548 <__aeabi_f2d>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	a150      	add	r1, pc, #320	; (adr r1, 8004da8 <realMODN+0x5a8>)
 8004c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c6c:	f7fb fb0c 	bl	8000288 <__aeabi_dsub>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	f7fb ffb6 	bl	8000be8 <__aeabi_d2f>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	ee00 3a10 	vmov	s0, r3
 8004c82:	f01f f9a1 	bl	8023fc8 <sinf>
 8004c86:	eef0 7a40 	vmov.f32	s15, s0
 8004c8a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <realMODN+0x5b8>)
 8004c90:	edd3 8a00 	vldr	s17, [r3]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7fb fc57 	bl	8000548 <__aeabi_f2d>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	a142      	add	r1, pc, #264	; (adr r1, 8004da8 <realMODN+0x5a8>)
 8004ca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ca4:	f7fb faf0 	bl	8000288 <__aeabi_dsub>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4610      	mov	r0, r2
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f7fb ff9a 	bl	8000be8 <__aeabi_d2f>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	ee00 3a10 	vmov	s0, r3
 8004cba:	f01f f93d 	bl	8023f38 <cosf>
 8004cbe:	eef0 7a40 	vmov.f32	s15, s0
 8004cc2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004cc6:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004cca:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <realMODN+0x5b8>)
 8004ccc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <realMODN+0x5b8>)
 8004cd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8004cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <realMODN+0x5b8>)
 8004ce0:	edc3 7a03 	vstr	s15, [r3, #12]
			MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <realMODN+0x5b8>)
 8004ce6:	ed93 8a01 	vldr	s16, [r3, #4]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7fb fc2c 	bl	8000548 <__aeabi_f2d>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	a12e      	add	r1, pc, #184	; (adr r1, 8004db0 <realMODN+0x5b0>)
 8004cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cfa:	f7fb fac5 	bl	8000288 <__aeabi_dsub>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4610      	mov	r0, r2
 8004d04:	4619      	mov	r1, r3
 8004d06:	f7fb ff6f 	bl	8000be8 <__aeabi_d2f>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	ee00 3a10 	vmov	s0, r3
 8004d10:	f01f f95a 	bl	8023fc8 <sinf>
 8004d14:	eef0 7a40 	vmov.f32	s15, s0
 8004d18:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004d1c:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <realMODN+0x5b8>)
 8004d1e:	edd3 8a00 	vldr	s17, [r3]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fb fc10 	bl	8000548 <__aeabi_f2d>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	a120      	add	r1, pc, #128	; (adr r1, 8004db0 <realMODN+0x5b0>)
 8004d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d32:	f7fb faa9 	bl	8000288 <__aeabi_dsub>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f7fb ff53 	bl	8000be8 <__aeabi_d2f>
 8004d42:	4603      	mov	r3, r0
 8004d44:	ee00 3a10 	vmov	s0, r3
 8004d48:	f01f f8f6 	bl	8023f38 <cosf>
 8004d4c:	eef0 7a40 	vmov.f32	s15, s0
 8004d50:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004d54:	ee38 7a27 	vadd.f32	s14, s16, s15
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <realMODN+0x5b8>)
 8004d5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <realMODN+0x5b8>)
 8004d60:	edd3 7a08 	vldr	s15, [r3, #32]
 8004d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <realMODN+0x5b8>)
 8004d6e:	edc3 7a04 	vstr	s15, [r3, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <realMODN+0x5b8>)
 8004d74:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <realMODN+0x5b8>)
 8004d7a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <realMODN+0x5b8>)
 8004d80:	edd3 6a05 	vldr	s13, [r3, #20]
 8004d84:	6838      	ldr	r0, [r7, #0]
 8004d86:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8004dbc <realMODN+0x5bc>
 8004d8a:	eeb0 1a66 	vmov.f32	s2, s13
 8004d8e:	eef0 0a47 	vmov.f32	s1, s14
 8004d92:	eeb0 0a67 	vmov.f32	s0, s15
 8004d96:	f006 f8cf 	bl	800af38 <RNSVelocity>
}
 8004d9a:	e7ff      	b.n	8004d9c <realMODN+0x59c>
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	ecbd 8b02 	vpop	{d8}
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	c985f06f 	.word	0xc985f06f
 8004dac:	4000c154 	.word	0x4000c154
 8004db0:	c985f06f 	.word	0xc985f06f
 8004db4:	3ff0c154 	.word	0x3ff0c154
 8004db8:	20006a94 	.word	0x20006a94
 8004dbc:	00000000 	.word	0x00000000

08004dc0 <setOrientationMODN>:
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
void setOrientationMODN(OrientationMODN_t orientation)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
	MODN.orientation = orientation;
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	4a03      	ldr	r2, [pc, #12]	; (8004ddc <setOrientationMODN+0x1c>)
 8004dce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	20006a94 	.word	0x20006a94

08004de0 <setSpeedMODN>:

void setSpeedMODN(float speed){
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	ed87 0a01 	vstr	s0, [r7, #4]
	MODN.speed = speed;
 8004dea:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <setSpeedMODN+0x3c>)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	61d3      	str	r3, [r2, #28]
	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <setSpeedMODN+0x3c>)
 8004df2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dfa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <setSpeedMODN+0x3c>)
 8004e00:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e08:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <setSpeedMODN+0x3c>)
 8004e0a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20006a94 	.word	0x20006a94

08004e20 <decode_Odrive>:
		break;
	}

 * */
void decode_Odrive(Odrv_t* odrive)
{
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	float data=0;
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
	uint16_t id = Odrvmsg.RXmsg.StdId;
 8004e2e:	4b72      	ldr	r3, [pc, #456]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	82fb      	strh	r3, [r7, #22]
	uint16_t mask = 0x01F;
 8004e34:	231f      	movs	r3, #31
 8004e36:	82bb      	strh	r3, [r7, #20]
	uint16_t command=id&mask;
 8004e38:	8afa      	ldrh	r2, [r7, #22]
 8004e3a:	8abb      	ldrh	r3, [r7, #20]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	827b      	strh	r3, [r7, #18]
	if(command==GET_ENCODER_ESTIMATE){
 8004e40:	8a7b      	ldrh	r3, [r7, #18]
 8004e42:	2b09      	cmp	r3, #9
 8004e44:	d136      	bne.n	8004eb4 <decode_Odrive+0x94>

		if(odrive->type==DENG_FOC)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <decode_Odrive+0x36>
			odrive->busy[TURN_COUNT_AND_VELOCITY]=0;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	749a      	strb	r2, [r3, #18]
 8004e56:	4b68      	ldr	r3, [pc, #416]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004e58:	69db      	ldr	r3, [r3, #28]

		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004e5a:	60fb      	str	r3, [r7, #12]
		odrive->feedback.encoder=data;
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
 8004e62:	4b65      	ldr	r3, [pc, #404]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004e64:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004e66:	60fb      	str	r3, [r7, #12]
		odrive->feedback.round_per_second=data;
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c
		odrive->feedback.velocity=odrive->feedback.round_per_second*M_PI*odrive->wheel_diameter;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb fb68 	bl	8000548 <__aeabi_f2d>
 8004e78:	a35d      	add	r3, pc, #372	; (adr r3, 8004ff0 <decode_Odrive+0x1d0>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb fbbb 	bl	80005f8 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4614      	mov	r4, r2
 8004e88:	461d      	mov	r5, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fb5a 	bl	8000548 <__aeabi_f2d>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4620      	mov	r0, r4
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7fb fbac 	bl	80005f8 <__aeabi_dmul>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f7fb fe9e 	bl	8000be8 <__aeabi_d2f>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
		odrive->feedback.shadow_count=data;
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
		odrive->feedback.cpr=data;
		odrive->busy[SHADOW_COUNT]=0;
	}
}
 8004eb2:	e097      	b.n	8004fe4 <decode_Odrive+0x1c4>
	else if(command==HEARTBEAT){
 8004eb4:	8a7b      	ldrh	r3, [r7, #18]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d123      	bne.n	8004f02 <decode_Odrive+0xe2>
 8004eba:	4b4f      	ldr	r3, [pc, #316]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004ebe:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error=data;
 8004ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec8:	ee17 2a90 	vmov	r2, s15
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
		odrive->feedback.state=Odrvmsg.Data[4];
 8004ed0:	4b49      	ldr	r3, [pc, #292]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004ed2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		odrive->feedback.traj_state = Odrvmsg.Data[7];
 8004edc:	4b46      	ldr	r3, [pc, #280]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004ede:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if(odrive->feedback.traj_state == TRAJECTORY_DONE && odrive->turning == 1)//TRAJECTORY
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d178      	bne.n	8004fe4 <decode_Odrive+0x1c4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7c1b      	ldrb	r3, [r3, #16]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d174      	bne.n	8004fe4 <decode_Odrive+0x1c4>
			odrive->turning = 0; // Done turning
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	741a      	strb	r2, [r3, #16]
}
 8004f00:	e070      	b.n	8004fe4 <decode_Odrive+0x1c4>
	else if(command==GET_BUS_VOLTAGE){
 8004f02:	8a7b      	ldrh	r3, [r7, #18]
 8004f04:	2b17      	cmp	r3, #23
 8004f06:	d109      	bne.n	8004f1c <decode_Odrive+0xfc>
 8004f08:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004f0c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.bus_voltage=data;
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
		odrive->busy[BUS_VOLTAGE]=0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	745a      	strb	r2, [r3, #17]
}
 8004f1a:	e063      	b.n	8004fe4 <decode_Odrive+0x1c4>
	else if(command==GET_SENSORLESS_ESTIMATES){
 8004f1c:	8a7b      	ldrh	r3, [r7, #18]
 8004f1e:	2b15      	cmp	r3, #21
 8004f20:	d10f      	bne.n	8004f42 <decode_Odrive+0x122>
 8004f22:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004f24:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004f26:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.position=data;
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f2e:	4b32      	ldr	r3, [pc, #200]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004f32:	60fb      	str	r3, [r7, #12]
		odrive->feedback.sensorless_estimates.velocity=data;
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	661a      	str	r2, [r3, #96]	; 0x60
		odrive->busy[SENSORLESS_ESTIMATE]=0;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	75da      	strb	r2, [r3, #23]
}
 8004f40:	e050      	b.n	8004fe4 <decode_Odrive+0x1c4>
	else if(command==GET_IQ){
 8004f42:	8a7b      	ldrh	r3, [r7, #18]
 8004f44:	2b14      	cmp	r3, #20
 8004f46:	d10f      	bne.n	8004f68 <decode_Odrive+0x148>
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004f4a:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004f4c:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_setpoint=data;
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	665a      	str	r2, [r3, #100]	; 0x64
 8004f54:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004f58:	60fb      	str	r3, [r7, #12]
		odrive->feedback.Iq.iq_measured=data;
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68
		odrive->busy[IQ_VALUE]=0;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	755a      	strb	r2, [r3, #21]
}
 8004f66:	e03d      	b.n	8004fe4 <decode_Odrive+0x1c4>
	else if(command==GET_MOTOR_ERROR){
 8004f68:	8a7b      	ldrh	r3, [r7, #18]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d128      	bne.n	8004fc0 <decode_Odrive+0x1a0>
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004f70:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004f72:	60fb      	str	r3, [r7, #12]
		odrive->feedback.error_code=data;
 8004f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7c:	ee17 2a90 	vmov	r2, s15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	671a      	str	r2, [r3, #112]	; 0x70
		strcat(odrive->feedback.error_msg, Odrive_Error_To_String(odrive->feedback.error_code));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f836 	bl	8005000 <Odrive_Error_To_String>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f01b fa6e 	bl	802047a <strcat>
		strcat(odrive->feedback.error_msg, "\n");
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7fb f913 	bl	80001d0 <strlen>
 8004faa:	4603      	mov	r3, r0
 8004fac:	4423      	add	r3, r4
 8004fae:	4913      	ldr	r1, [pc, #76]	; (8004ffc <decode_Odrive+0x1dc>)
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	8013      	strh	r3, [r2, #0]
		odrive->busy[ODRIVE_ERROR_CODE]=0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	759a      	strb	r2, [r3, #22]
}
 8004fbe:	e011      	b.n	8004fe4 <decode_Odrive+0x1c4>
	else if(command==GET_SHADOW_COUNT){
 8004fc0:	8a7b      	ldrh	r3, [r7, #18]
 8004fc2:	2b0a      	cmp	r3, #10
 8004fc4:	d10e      	bne.n	8004fe4 <decode_Odrive+0x1c4>
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
		memcpy(&data,&Odrvmsg.Data[0],sizeof(float));
 8004fca:	60fb      	str	r3, [r7, #12]
		odrive->feedback.shadow_count=data;
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <decode_Odrive+0x1d8>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
		memcpy(&data,&Odrvmsg.Data[4],sizeof(float));
 8004fd6:	60fb      	str	r3, [r7, #12]
		odrive->feedback.cpr=data;
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
		odrive->busy[SHADOW_COUNT]=0;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	751a      	strb	r2, [r3, #20]
}
 8004fe4:	bf00      	nop
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bdb0      	pop	{r4, r5, r7, pc}
 8004fec:	f3af 8000 	nop.w
 8004ff0:	54442d18 	.word	0x54442d18
 8004ff4:	400921fb 	.word	0x400921fb
 8004ff8:	200068ac 	.word	0x200068ac
 8004ffc:	080253e8 	.word	0x080253e8

08005000 <Odrive_Error_To_String>:
	memcpy(&TxBuffer[0],&vel_gains,4);
	memcpy(&TxBuffer[4],&vel_integrator_gains,4);
	OdriveSendCAN(odrive,SET_VEL_GAIN,TxBuffer);
}

const char* Odrive_Error_To_String(error_code fault) {
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	switch (fault) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	f000 80fd 	beq.w	800520c <Odrive_Error_To_String+0x20c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005018:	f200 80fa 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005022:	f000 80f1 	beq.w	8005208 <Odrive_Error_To_String+0x208>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800502c:	f200 80f0 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005036:	f000 80e5 	beq.w	8005204 <Odrive_Error_To_String+0x204>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005040:	f200 80e6 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800504a:	f000 80d9 	beq.w	8005200 <Odrive_Error_To_String+0x200>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005054:	f200 80dc 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505e:	f000 80cd 	beq.w	80051fc <Odrive_Error_To_String+0x1fc>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005068:	f200 80d2 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005072:	f000 80c1 	beq.w	80051f8 <Odrive_Error_To_String+0x1f8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	f200 80c8 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005086:	f000 80b5 	beq.w	80051f4 <Odrive_Error_To_String+0x1f4>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005090:	f200 80be 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800509a:	f000 80a9 	beq.w	80051f0 <Odrive_Error_To_String+0x1f0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a4:	f200 80b4 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ae:	f000 809d 	beq.w	80051ec <Odrive_Error_To_String+0x1ec>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b8:	f200 80aa 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	f000 8091 	beq.w	80051e8 <Odrive_Error_To_String+0x1e8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	f200 80a0 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	f000 8085 	beq.w	80051e4 <Odrive_Error_To_String+0x1e4>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e0:	f200 8096 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ea:	d079      	beq.n	80051e0 <Odrive_Error_To_String+0x1e0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	f200 808d 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fc:	d06e      	beq.n	80051dc <Odrive_Error_To_String+0x1dc>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	f200 8084 	bhi.w	8005210 <Odrive_Error_To_String+0x210>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800510e:	d063      	beq.n	80051d8 <Odrive_Error_To_String+0x1d8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005116:	d87b      	bhi.n	8005210 <Odrive_Error_To_String+0x210>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b20      	cmp	r3, #32
 800511c:	d848      	bhi.n	80051b0 <Odrive_Error_To_String+0x1b0>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b20      	cmp	r3, #32
 8005122:	d875      	bhi.n	8005210 <Odrive_Error_To_String+0x210>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <Odrive_Error_To_String+0x12c>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	080051b9 	.word	0x080051b9
 8005130:	080051bd 	.word	0x080051bd
 8005134:	080051c1 	.word	0x080051c1
 8005138:	08005211 	.word	0x08005211
 800513c:	080051c5 	.word	0x080051c5
 8005140:	08005211 	.word	0x08005211
 8005144:	08005211 	.word	0x08005211
 8005148:	08005211 	.word	0x08005211
 800514c:	080051c9 	.word	0x080051c9
 8005150:	08005211 	.word	0x08005211
 8005154:	08005211 	.word	0x08005211
 8005158:	08005211 	.word	0x08005211
 800515c:	08005211 	.word	0x08005211
 8005160:	08005211 	.word	0x08005211
 8005164:	08005211 	.word	0x08005211
 8005168:	08005211 	.word	0x08005211
 800516c:	080051cd 	.word	0x080051cd
 8005170:	08005211 	.word	0x08005211
 8005174:	08005211 	.word	0x08005211
 8005178:	08005211 	.word	0x08005211
 800517c:	08005211 	.word	0x08005211
 8005180:	08005211 	.word	0x08005211
 8005184:	08005211 	.word	0x08005211
 8005188:	08005211 	.word	0x08005211
 800518c:	08005211 	.word	0x08005211
 8005190:	08005211 	.word	0x08005211
 8005194:	08005211 	.word	0x08005211
 8005198:	08005211 	.word	0x08005211
 800519c:	08005211 	.word	0x08005211
 80051a0:	08005211 	.word	0x08005211
 80051a4:	08005211 	.word	0x08005211
 80051a8:	08005211 	.word	0x08005211
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d00e      	beq.n	80051d4 <Odrive_Error_To_String+0x1d4>
 80051b6:	e02b      	b.n	8005210 <Odrive_Error_To_String+0x210>
	case NO_ERROR: return "NO_ERROR";
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <Odrive_Error_To_String+0x220>)
 80051ba:	e02a      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case INITIALIZING: return "INITIALIZING";
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <Odrive_Error_To_String+0x224>)
 80051be:	e028      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case SYSTEM_LEVEL: return "SYSTEM_LEVEL";	//firmware bug / system error: memory corruption, stack overflow, frozen thread
 80051c0:	4b19      	ldr	r3, [pc, #100]	; (8005228 <Odrive_Error_To_String+0x228>)
 80051c2:	e026      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case TIMING_ERROR: return "TIMING_ERROR";
 80051c4:	4b19      	ldr	r3, [pc, #100]	; (800522c <Odrive_Error_To_String+0x22c>)
 80051c6:	e024      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case MISSING_ESTIMATE: return "MISSING_ESTIMATE";
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <Odrive_Error_To_String+0x230>)
 80051ca:	e022      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case BAD_CONFIG: return "BAD_CONFIG";
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <Odrive_Error_To_String+0x234>)
 80051ce:	e020      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case DRV_FAULT: return "DRV_FAULT";
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <Odrive_Error_To_String+0x238>)
 80051d2:	e01e      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case MISSING_INPUT: return "MISSING_INPUT";
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <Odrive_Error_To_String+0x23c>)
 80051d6:	e01c      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_VOLTAGE: return "DC_BUS_OVER_VOLTAGE";
 80051d8:	4b19      	ldr	r3, [pc, #100]	; (8005240 <Odrive_Error_To_String+0x240>)
 80051da:	e01a      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case DC_BUS_UNDER_VOLTAGE: return "DC_BUS_UNDER_VOLTAGE";
 80051dc:	4b19      	ldr	r3, [pc, #100]	; (8005244 <Odrive_Error_To_String+0x244>)
 80051de:	e018      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_CURRENT: return "DC_BUS_OVER_CURRENT";
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <Odrive_Error_To_String+0x248>)
 80051e2:	e016      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case DC_BUS_OVER_REGEN_CURRENT: return "DC_BUS_OVER_REGEN_CURRENT";
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <Odrive_Error_To_String+0x24c>)
 80051e6:	e014      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case CURRENT_LIMIT_VIOLATION: return "CURRENT_LIMIT_VIOLATION";
 80051e8:	4b19      	ldr	r3, [pc, #100]	; (8005250 <Odrive_Error_To_String+0x250>)
 80051ea:	e012      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case MOTOR_OVER_TEMP: return "MOTOR_OVER_TEMP";
 80051ec:	4b19      	ldr	r3, [pc, #100]	; (8005254 <Odrive_Error_To_String+0x254>)
 80051ee:	e010      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case INVERTER_OVER_TEMP: return "INVERTER_OVER_TEMP";
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <Odrive_Error_To_String+0x258>)
 80051f2:	e00e      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case VELOCITY_LIMIT_VIOLATION: return "VELOCITY_LIMIT_VIOLATION";
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <Odrive_Error_To_String+0x25c>)
 80051f6:	e00c      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case POSITION_LIMIT_VIOLATION: return "POSITION_LIMIT_VIOLATION";
 80051f8:	4b19      	ldr	r3, [pc, #100]	; (8005260 <Odrive_Error_To_String+0x260>)
 80051fa:	e00a      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case WATCHDOG_TIMER_EXPIRED: return "WATCHDOG_TIMER_EXPIRED";
 80051fc:	4b19      	ldr	r3, [pc, #100]	; (8005264 <Odrive_Error_To_String+0x264>)
 80051fe:	e008      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case ESTOP_REQUESTED: return "ESTOP_REQUESTED";
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <Odrive_Error_To_String+0x268>)
 8005202:	e006      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case SPINOUT_DETECTED: return "SPINOUT_DETECTED";
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <Odrive_Error_To_String+0x26c>)
 8005206:	e004      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case OTHER_DEVICE_FAILED: return "OTHER_DEVICE_FAILED";
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <Odrive_Error_To_String+0x270>)
 800520a:	e002      	b.n	8005212 <Odrive_Error_To_String+0x212>
	case CALIBRATION_ERROR: return "CALIBRATION_ERROR";
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <Odrive_Error_To_String+0x274>)
 800520e:	e000      	b.n	8005212 <Odrive_Error_To_String+0x212>
	}

	return "Unknown fault";
 8005210:	4b19      	ldr	r3, [pc, #100]	; (8005278 <Odrive_Error_To_String+0x278>)
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	080253ec 	.word	0x080253ec
 8005224:	080253f8 	.word	0x080253f8
 8005228:	08025408 	.word	0x08025408
 800522c:	08025418 	.word	0x08025418
 8005230:	08025428 	.word	0x08025428
 8005234:	0802543c 	.word	0x0802543c
 8005238:	08025448 	.word	0x08025448
 800523c:	08025454 	.word	0x08025454
 8005240:	08025464 	.word	0x08025464
 8005244:	08025478 	.word	0x08025478
 8005248:	08025490 	.word	0x08025490
 800524c:	080254a4 	.word	0x080254a4
 8005250:	080254c0 	.word	0x080254c0
 8005254:	080254d8 	.word	0x080254d8
 8005258:	080254e8 	.word	0x080254e8
 800525c:	080254fc 	.word	0x080254fc
 8005260:	08025518 	.word	0x08025518
 8005264:	08025534 	.word	0x08025534
 8005268:	0802554c 	.word	0x0802554c
 800526c:	0802555c 	.word	0x0802555c
 8005270:	08025570 	.word	0x08025570
 8005274:	08025584 	.word	0x08025584
 8005278:	08025598 	.word	0x08025598

0800527c <OdriveCAN_Handler>:
}



void OdriveCAN_Handler()
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
	static int c[2];
	uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 8005282:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005286:	807b      	strh	r3, [r7, #2]
	uint16_t id = CAN1RxMessage.StdId&command_mask;
 8005288:	4b2f      	ldr	r3, [pc, #188]	; (8005348 <OdriveCAN_Handler+0xcc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	4013      	ands	r3, r2
 8005292:	803b      	strh	r3, [r7, #0]
	id=id>>5;
 8005294:	883b      	ldrh	r3, [r7, #0]
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	803b      	strh	r3, [r7, #0]
	int i=0;
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
	for( i=0 ; i < number_of_odrive; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	e01f      	b.n	80052e4 <OdriveCAN_Handler+0x68>
	{
		if(id == P_to_Odrive[i]->Instance)
 80052a4:	4b29      	ldr	r3, [pc, #164]	; (800534c <OdriveCAN_Handler+0xd0>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	8b1b      	ldrh	r3, [r3, #24]
 80052b2:	883a      	ldrh	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d112      	bne.n	80052de <OdriveCAN_Handler+0x62>
		{
			decode_Odrive(P_to_Odrive[i]);
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <OdriveCAN_Handler+0xd0>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fdab 	bl	8004e20 <decode_Odrive>
			c[i]++;
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <OdriveCAN_Handler+0xd4>)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	491e      	ldr	r1, [pc, #120]	; (8005350 <OdriveCAN_Handler+0xd4>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 80052dc:	e007      	b.n	80052ee <OdriveCAN_Handler+0x72>
	for( i=0 ; i < number_of_odrive; i++)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3301      	adds	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <OdriveCAN_Handler+0xd8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	dbda      	blt.n	80052a4 <OdriveCAN_Handler+0x28>
		//			decode_Odrive(&Odrv2);
		//			break;
		//		}
	}

	if(c[0]==100)
 80052ee:	4b18      	ldr	r3, [pc, #96]	; (8005350 <OdriveCAN_Handler+0xd4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d111      	bne.n	800531a <OdriveCAN_Handler+0x9e>
	{
		c[0]=0;
 80052f6:	4b16      	ldr	r3, [pc, #88]	; (8005350 <OdriveCAN_Handler+0xd4>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
		GPIOC_OUT->bit14=!GPIOC_OUT->bit14;
 80052fc:	4b16      	ldr	r3, [pc, #88]	; (8005358 <OdriveCAN_Handler+0xdc>)
 80052fe:	785b      	ldrb	r3, [r3, #1]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	b2db      	uxtb	r3, r3
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <OdriveCAN_Handler+0xdc>)
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2d9      	uxtb	r1, r3
 8005312:	7853      	ldrb	r3, [r2, #1]
 8005314:	f361 1386 	bfi	r3, r1, #6, #1
 8005318:	7053      	strb	r3, [r2, #1]
	}

	if(c[1]==100)
 800531a:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <OdriveCAN_Handler+0xd4>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d10e      	bne.n	8005340 <OdriveCAN_Handler+0xc4>
	{
		c[1]=0;
 8005322:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <OdriveCAN_Handler+0xd4>)
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]
		GPIOC_OUT->bit15=!GPIOC_OUT->bit15;
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <OdriveCAN_Handler+0xdc>)
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	b25b      	sxtb	r3, r3
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <OdriveCAN_Handler+0xdc>)
 8005330:	43db      	mvns	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	b2d9      	uxtb	r1, r3
 8005338:	7853      	ldrb	r3, [r2, #1]
 800533a:	f361 13c7 	bfi	r3, r1, #7, #1
 800533e:	7053      	strb	r3, [r2, #1]
	}

}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000a75c 	.word	0x2000a75c
 800534c:	2000a88c 	.word	0x2000a88c
 8005350:	200002c8 	.word	0x200002c8
 8005354:	200002c4 	.word	0x200002c4
 8005358:	40020814 	.word	0x40020814

0800535c <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800538a:	edc7 0a08 	vstr	s1, [r7, #32]
 800538e:	ed87 1a07 	vstr	s2, [r7, #28]
 8005392:	edc7 1a06 	vstr	s3, [r7, #24]
 8005396:	ed87 2a05 	vstr	s4, [r7, #20]
 800539a:	edc7 2a04 	vstr	s5, [r7, #16]
 800539e:	ed87 3a03 	vstr	s6, [r7, #12]
 80053a2:	edc7 3a02 	vstr	s7, [r7, #8]
 80053a6:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ac:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f81b 	bl	8005414 <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <PIDGainSet>:

void PIDGainSet (unsigned char a, float value, PID_t *pid)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	4603      	mov	r3, r0
 80053ee:	ed87 0a02 	vstr	s0, [r7, #8]
 80053f2:	6079      	str	r1, [r7, #4]
 80053f4:	73fb      	strb	r3, [r7, #15]
	pid->K[a] = value;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	3302      	adds	r3, #2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	3304      	adds	r3, #4
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	601a      	str	r2, [r3, #0]
	PIDCoeffCalc(pid);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f804 	bl	8005414 <PIDCoeffCalc>
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <PIDCoeffCalc>:

void PIDCoeffCalc (PID_t *pid)
{
 8005414:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	edd3 7a08 	vldr	s15, [r3, #32]
 8005424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542c:	d013      	beq.n	8005456 <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	ed93 7a03 	vldr	s14, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	edd3 7a08 	vldr	s15, [r3, #32]
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
 8005454:	e007      	b.n	8005466 <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	edd3 7a07 	vldr	s15, [r3, #28]
 800546c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005474:	d108      	bne.n	8005488 <PIDCoeffCalc+0x74>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800547c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005484:	f000 80ef 	beq.w	8005666 <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	ed93 7a03 	vldr	s14, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005498:	ee17 0a90 	vmov	r0, s15
 800549c:	f7fb f854 	bl	8000548 <__aeabi_f2d>
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054a8:	f7fa feee 	bl	8000288 <__aeabi_dsub>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4614      	mov	r4, r2
 80054b2:	461d      	mov	r5, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80054c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c4:	ee17 0a90 	vmov	r0, s15
 80054c8:	f7fb f83e 	bl	8000548 <__aeabi_f2d>
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054d4:	f7fa feda 	bl	800028c <__adddf3>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	f7fb f9b4 	bl	800084c <__aeabi_ddiv>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4610      	mov	r0, r2
 80054ea:	4619      	mov	r1, r3
 80054ec:	f7fb fb7c 	bl	8000be8 <__aeabi_d2f>
 80054f0:	4603      	mov	r3, r0
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef1 7a67 	vneg.f32	s15, s15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	4618      	mov	r0, r3
 8005506:	f7fb f81f 	bl	8000548 <__aeabi_f2d>
 800550a:	4604      	mov	r4, r0
 800550c:	460d      	mov	r5, r1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	4618      	mov	r0, r3
 8005514:	f7fb f818 	bl	8000548 <__aeabi_f2d>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	f7fa feb6 	bl	800028c <__adddf3>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	4690      	mov	r8, r2
 8005526:	4699      	mov	r9, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	4618      	mov	r0, r3
 800552e:	f7fb f80b 	bl	8000548 <__aeabi_f2d>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4640      	mov	r0, r8
 8005538:	4649      	mov	r1, r9
 800553a:	f7fb f85d 	bl	80005f8 <__aeabi_dmul>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4690      	mov	r8, r2
 8005544:	4699      	mov	r9, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005556:	ee17 0a90 	vmov	r0, s15
 800555a:	f7fa fff5 	bl	8000548 <__aeabi_f2d>
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005566:	f7fa fe91 	bl	800028c <__adddf3>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	4640      	mov	r0, r8
 8005570:	4649      	mov	r1, r9
 8005572:	f7fb f96b 	bl	800084c <__aeabi_ddiv>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4620      	mov	r0, r4
 800557c:	4629      	mov	r1, r5
 800557e:	f7fa fe85 	bl	800028c <__adddf3>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4610      	mov	r0, r2
 8005588:	4619      	mov	r1, r3
 800558a:	f7fb fb2d 	bl	8000be8 <__aeabi_d2f>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	edd3 7a03 	vldr	s15, [r3, #12]
 80055a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a4:	ee17 0a90 	vmov	r0, s15
 80055a8:	f7fa ffce 	bl	8000548 <__aeabi_f2d>
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055b4:	f7fa fe68 	bl	8000288 <__aeabi_dsub>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	461d      	mov	r5, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fa ffbf 	bl	8000548 <__aeabi_f2d>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4620      	mov	r0, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7fb f811 	bl	80005f8 <__aeabi_dmul>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4614      	mov	r4, r2
 80055dc:	461d      	mov	r5, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fa ffb0 	bl	8000548 <__aeabi_f2d>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	f7fa fe4e 	bl	800028c <__adddf3>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4690      	mov	r8, r2
 80055f6:	4699      	mov	r9, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fa ffa3 	bl	8000548 <__aeabi_f2d>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fa fff5 	bl	80005f8 <__aeabi_dmul>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	f7fa fe37 	bl	8000288 <__aeabi_dsub>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4614      	mov	r4, r2
 8005620:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	edd3 7a03 	vldr	s15, [r3, #12]
 800562e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005632:	ee17 0a90 	vmov	r0, s15
 8005636:	f7fa ff87 	bl	8000548 <__aeabi_f2d>
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005642:	f7fa fe23 	bl	800028c <__adddf3>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	f7fb f8fd 	bl	800084c <__aeabi_ddiv>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	f7fb fac5 	bl	8000be8 <__aeabi_d2f>
 800565e:	4602      	mov	r2, r0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c
 8005664:	e00c      	b.n	8005680 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800568a <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80056dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80056e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e4:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80056f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	d033      	beq.n	8005768 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005714:	edd7 7a03 	vldr	s15, [r7, #12]
 8005718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005722:	e003      	b.n	800572c <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800573e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005742:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005756:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	edd3 7a07 	vldr	s15, [r3, #28]
 800576e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005776:	d107      	bne.n	8005788 <PID+0xc2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800577e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005786:	d02c      	beq.n	80057e2 <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005798:	edd7 7a03 	vldr	s15, [r7, #12]
 800579c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80057b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057bc:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80057cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057d0:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80057ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80057f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	dd0f      	ble.n	800581c <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	edd3 7a06 	vldr	s15, [r3, #24]
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7813      	ldrb	r3, [r2, #0]
 8005814:	f36f 0300 	bfc	r3, #0, #1
 8005818:	7013      	strb	r3, [r2, #0]
 800581a:	e02b      	b.n	8005874 <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	edd3 7a04 	vldr	s15, [r3, #16]
 8005822:	eef1 7a67 	vneg.f32	s15, s15
 8005826:	ed97 7a02 	vldr	s14, [r7, #8]
 800582a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800582e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005832:	d511      	bpl.n	8005858 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	ed93 7a04 	vldr	s14, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005844:	eef1 7a67 	vneg.f32	s15, s15
 8005848:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	7813      	ldrb	r3, [r2, #0]
 8005850:	f36f 0300 	bfc	r3, #0, #1
 8005854:	7013      	strb	r3, [r2, #0]
 8005856:	e00d      	b.n	8005874 <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	edd3 7a06 	vldr	s15, [r3, #24]
 800585e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	7813      	ldrb	r3, [r2, #0]
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	601a      	str	r2, [r3, #0]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <PPInit>:
//#include "PP.h"
#include "../adapter.h"
#include <math.h>

void PPInit  (uint8_t base,float *qeix, float *qeiy, float*imu,PathPlan_t *pp, Laser_t *lsrx, Laser_t *lsry, Laser_t* lsrR){
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]

	pp->base_shape=base;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	7bfa      	ldrb	r2, [r7, #15]
 800589c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
	pp->qeix = qeix;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	601a      	str	r2, [r3, #0]
	pp->qeiy = qeiy;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	605a      	str	r2, [r3, #4]
	pp->lsrx = &(lsrx->dist);
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f103 021c 	add.w	r2, r3, #28
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	60da      	str	r2, [r3, #12]
	pp->lsry = &(lsry->dist);
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	f103 021c 	add.w	r2, r3, #28
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	611a      	str	r2, [r3, #16]
	pp->lsrR = &(lsrR->dist);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	f103 021c 	add.w	r2, r3, #28
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	615a      	str	r2, [r3, #20]
	pp->lsrx_swap=0;
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80058d0:	f36f 1386 	bfc	r3, #6, #1
 80058d4:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->lsry_swap=0;
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80058de:	f36f 1345 	bfc	r3, #5, #1
 80058e2:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->yaw = imu;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	609a      	str	r2, [r3, #8]
	pp->point_start=1;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

	PIDSourceInit(&(pp->error_x), &(pp->outx), &(pp->x));
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f503 7133 	add.w	r1, r3, #716	; 0x2cc
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800590c:	461a      	mov	r2, r3
 800590e:	f7ff fd25 	bl	800535c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->x));
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005918:	4618      	mov	r0, r3
 800591a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800591e:	ed9f 3a39 	vldr	s6, [pc, #228]	; 8005a04 <PPInit+0x17c>
 8005922:	eddf 2a39 	vldr	s5, [pc, #228]	; 8005a08 <PPInit+0x180>
 8005926:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800592a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800592e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005932:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005936:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8005a0c <PPInit+0x184>
 800593a:	f7ff fd21 	bl	8005380 <PIDGainInit>
	PIDDelayInit(&(pp->x));
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fea0 	bl	800568a <PIDDelayInit>

	PIDSourceInit(&(pp->error_y), &(pp->outy), &(pp->y));
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f503 7134 	add.w	r1, r3, #720	; 0x2d0
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800595c:	461a      	mov	r2, r3
 800595e:	f7ff fcfd 	bl	800535c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, 1.0, 1.0, 1.0, 0.0, 0.4, 30.0, &(pp->y));
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005968:	4618      	mov	r0, r3
 800596a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800596e:	ed9f 3a25 	vldr	s6, [pc, #148]	; 8005a04 <PPInit+0x17c>
 8005972:	eddf 2a25 	vldr	s5, [pc, #148]	; 8005a08 <PPInit+0x180>
 8005976:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800597a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800597e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005982:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005986:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8005a0c <PPInit+0x184>
 800598a:	f7ff fcf9 	bl	8005380 <PIDGainInit>
	PIDDelayInit(&(pp->y));
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fe78 	bl	800568a <PIDDelayInit>

	PIDSourceInit(&(pp->error_z), &(pp->outz), &(pp->z));
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80059ac:	461a      	mov	r2, r3
 80059ae:	f7ff fcd5 	bl	800535c <PIDSourceInit>
	PIDGainInit(0.005, 1.0, (1.0 / 30.0), 0.5, 5.0, 0.2, 0.2, 30.0, &(pp->z));
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80059b8:	4618      	mov	r0, r3
 80059ba:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80059be:	ed9f 3a14 	vldr	s6, [pc, #80]	; 8005a10 <PPInit+0x188>
 80059c2:	eddf 2a13 	vldr	s5, [pc, #76]	; 8005a10 <PPInit+0x188>
 80059c6:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 80059ca:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80059ce:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005a14 <PPInit+0x18c>
 80059d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80059d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8005a0c <PPInit+0x184>
 80059da:	f7ff fcd1 	bl	8005380 <PIDGainInit>
	PIDDelayInit(&(pp->z));
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fe50 	bl	800568a <PIDDelayInit>

	pp->tol_xy_crv= 0.6;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <PPInit+0x190>)
 80059ee:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388

	pp->yaw_offset=*(pp->yaw);
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80059fc:	bf00      	nop
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	3ecccccd 	.word	0x3ecccccd
 8005a08:	00000000 	.word	0x00000000
 8005a0c:	3ba3d70a 	.word	0x3ba3d70a
 8005a10:	3e4ccccd 	.word	0x3e4ccccd
 8005a14:	3d088889 	.word	0x3d088889
 8005a18:	3f19999a 	.word	0x3f19999a

08005a1c <PP_PIDPathSet>:

void PP_PIDPathSet(float kp, float ki, float kd, PathPlan_t *pp){
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a26:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a2a:	ed87 1a01 	vstr	s2, [r7, #4]
 8005a2e:	6038      	str	r0, [r7, #0]

	pp->kp[0]=kp;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	pp->ki[0]=ki;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	pp->kd[0]=kd;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

	PIDGainSet(KP,kp,&(pp->x));
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005a4e:	4619      	mov	r1, r3
 8005a50:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a54:	2004      	movs	r0, #4
 8005a56:	f7ff fcc6 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005a60:	4619      	mov	r1, r3
 8005a62:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a66:	2005      	movs	r0, #5
 8005a68:	f7ff fcbd 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005a72:	4619      	mov	r1, r3
 8005a74:	ed97 0a01 	vldr	s0, [r7, #4]
 8005a78:	2006      	movs	r0, #6
 8005a7a:	f7ff fcb4 	bl	80053e6 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005a84:	4619      	mov	r1, r3
 8005a86:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a8a:	2004      	movs	r0, #4
 8005a8c:	f7ff fcab 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005a96:	4619      	mov	r1, r3
 8005a98:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a9c:	2005      	movs	r0, #5
 8005a9e:	f7ff fca2 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	ed97 0a01 	vldr	s0, [r7, #4]
 8005aae:	2006      	movs	r0, #6
 8005ab0:	f7ff fc99 	bl	80053e6 <PIDGainSet>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <PP_PIDZSet>:

void PP_PIDZSet(float kp, float ki, float kd, float ku, PathPlan_t *pp){
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	ed87 0a05 	vstr	s0, [r7, #20]
 8005ac6:	edc7 0a04 	vstr	s1, [r7, #16]
 8005aca:	ed87 1a03 	vstr	s2, [r7, #12]
 8005ace:	edc7 1a02 	vstr	s3, [r7, #8]
 8005ad2:	6078      	str	r0, [r7, #4]

	PIDGainSet(KP,kp,&(pp->z));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005ada:	4619      	mov	r1, r3
 8005adc:	ed97 0a05 	vldr	s0, [r7, #20]
 8005ae0:	2004      	movs	r0, #4
 8005ae2:	f7ff fc80 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->z));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005aec:	4619      	mov	r1, r3
 8005aee:	ed97 0a04 	vldr	s0, [r7, #16]
 8005af2:	2005      	movs	r0, #5
 8005af4:	f7ff fc77 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->z));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005afe:	4619      	mov	r1, r3
 8005b00:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b04:	2006      	movs	r0, #6
 8005b06:	f7ff fc6e 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KU,ku,&(pp->z));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8005b10:	4619      	mov	r1, r3
 8005b12:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b16:	2003      	movs	r0, #3
 8005b18:	f7ff fc65 	bl	80053e6 <PIDGainSet>
	pp->pp_orgz_kp = kp;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	601a      	str	r2, [r3, #0]

}
 8005b26:	bf00      	nop
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <PP_PIDEndSet>:
void PP_PIDEndSet(float kp, float ki, float kd, PathPlan_t *pp){
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b38:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b3c:	ed87 1a01 	vstr	s2, [r7, #4]
 8005b40:	6038      	str	r0, [r7, #0]

	pp->kp[1]=kp;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	pp->ki[1]=ki;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
	pp->kd[1]=kd;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0

	PIDGainSet(KP,kp,&(pp->x));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005b60:	4619      	mov	r1, r3
 8005b62:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b66:	2004      	movs	r0, #4
 8005b68:	f7ff fc3d 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->x));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005b72:	4619      	mov	r1, r3
 8005b74:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b78:	2005      	movs	r0, #5
 8005b7a:	f7ff fc34 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->x));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005b84:	4619      	mov	r1, r3
 8005b86:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b8a:	2006      	movs	r0, #6
 8005b8c:	f7ff fc2b 	bl	80053e6 <PIDGainSet>

	PIDGainSet(KP,kp,&(pp->y));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005b96:	4619      	mov	r1, r3
 8005b98:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b9c:	2004      	movs	r0, #4
 8005b9e:	f7ff fc22 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KI,ki,&(pp->y));
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	ed97 0a02 	vldr	s0, [r7, #8]
 8005bae:	2005      	movs	r0, #5
 8005bb0:	f7ff fc19 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KD,kd,&(pp->y));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bc0:	2006      	movs	r0, #6
 8005bc2:	f7ff fc10 	bl	80053e6 <PIDGainSet>
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <PP_start>:

void PP_start(float point[][7],int no_point,PathPlan_t *pp){
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	ed2d 8b02 	vpush	{d8}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]

	int i;
	for(i=0;i<no_point;i++){
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e106      	b.n	8005df4 <PP_start+0x224>
		pp->target_vel[i] = point[i][0];
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	3378      	adds	r3, #120	; 0x78
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1];
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4613      	mov	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	331e      	adds	r3, #30
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	601a      	str	r2, [r3, #0]
		pp->target_y[i] = point[i][2];
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	332c      	adds	r3, #44	; 0x2c
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3304      	adds	r3, #4
 8005c40:	601a      	str	r2, [r3, #0]
		pp->target_accurate[i] = point[i][5];
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4613      	mov	r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	334a      	adds	r3, #74	; 0x4a
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3304      	adds	r3, #4
 8005c60:	601a      	str	r2, [r3, #0]
		pp->pp_crv_radius[i] =  point[i][6];
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	3304      	adds	r3, #4
 8005c82:	601a      	str	r2, [r3, #0]
		if(i == 0)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11f      	bne.n	8005cca <PP_start+0xfa>
			pp->target_angle1[0] = atanf((fabs)(point[0][2] - pp->real_y) / (fabs)(point[0][1]- pp->real_x));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8005c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c9a:	eeb0 7ae7 	vabs.f32	s14, s15
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005caa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005cae:	eef0 7ae7 	vabs.f32	s15, s15
 8005cb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005cb6:	eeb0 0a66 	vmov.f32	s0, s13
 8005cba:	f01e f869 	bl	8023d90 <atanf>
 8005cbe:	eef0 7a40 	vmov.f32	s15, s0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	edc3 7a69 	vstr	s15, [r3, #420]	; 0x1a4
 8005cc8:	e03f      	b.n	8005d4a <PP_start+0x17a>
		else
			pp->target_angle1[i]= atanf((fabs)(point[i][2]-point[i-1][2]) / (fabs)(point[i][1]-point[i-1][1]));
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	1a9b      	subs	r3, r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	ed93 7a02 	vldr	s14, [r3, #8]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	3b1c      	subs	r3, #28
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cf6:	eeb0 7ae7 	vabs.f32	s14, s15
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	461a      	mov	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	1a9b      	subs	r3, r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	3b1c      	subs	r3, #28
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d26:	eef0 7ae7 	vabs.f32	s15, s15
 8005d2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d2e:	eeb0 0a66 	vmov.f32	s0, s13
 8005d32:	f01e f82d 	bl	8023d90 <atanf>
 8005d36:	eef0 7a40 	vmov.f32	s15, s0
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3368      	adds	r3, #104	; 0x68
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	3304      	adds	r3, #4
 8005d46:	edc3 7a00 	vstr	s15, [r3]
		pp->target_z[i] = point[i][3];
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	461a      	mov	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	333c      	adds	r3, #60	; 0x3c
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4]* cosf(pp->target_angle1[i]);
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	461a      	mov	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	ed93 8a04 	vldr	s16, [r3, #16]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	3368      	adds	r3, #104	; 0x68
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	edd3 7a00 	vldr	s15, [r3]
 8005d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d90:	f01e f8d2 	bl	8023f38 <cosf>
 8005d94:	eef0 7a40 	vmov.f32	s15, s0
 8005d98:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	3388      	adds	r3, #136	; 0x88
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	edc3 7a00 	vstr	s15, [r3]
		pp->ku_y[i] = point[i][4]* sinf(pp->target_angle1[i]);
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4613      	mov	r3, r2
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	ed93 8a04 	vldr	s16, [r3, #16]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3368      	adds	r3, #104	; 0x68
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	edd3 7a00 	vldr	s15, [r3]
 8005dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8005dd4:	f01e f8f8 	bl	8023fc8 <sinf>
 8005dd8:	eef0 7a40 	vmov.f32	s15, s0
 8005ddc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	3398      	adds	r3, #152	; 0x98
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	edc3 7a00 	vstr	s15, [r3]
	for(i=0;i<no_point;i++){
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	3301      	adds	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	f6ff aef4 	blt.w	8005be6 <PP_start+0x16>
	}

	pp->target_point=no_point;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
	if(fabs(pp->real_x - pp->target_x[0])){
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	d017      	beq.n	8005e50 <PP_start+0x280>
		PIDGainSet(KE,1.0/fabs(pp->real_x - pp->target_x[0]),&(pp->x));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8005e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e30:	eef0 7ae7 	vabs.f32	s15, s15
 8005e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005e42:	4619      	mov	r1, r3
 8005e44:	eeb0 0a47 	vmov.f32	s0, s14
 8005e48:	2002      	movs	r0, #2
 8005e4a:	f7ff facc 	bl	80053e6 <PIDGainSet>
 8005e4e:	e008      	b.n	8005e62 <PP_start+0x292>
	} else {
		PIDGainSet(KE,1.0,&(pp->x));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005e56:	4619      	mov	r1, r3
 8005e58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005e5c:	2002      	movs	r0, #2
 8005e5e:	f7ff fac2 	bl	80053e6 <PIDGainSet>
	}
	if(fabs(pp->real_y - pp->target_y[0])){
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7a:	d017      	beq.n	8005eac <PP_start+0x2dc>
		PIDGainSet(KE,1.0/fabs(pp->real_y - pp->target_y[0]),&(pp->y));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8005e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e8c:	eef0 7ae7 	vabs.f32	s15, s15
 8005e90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f7ff fa9e 	bl	80053e6 <PIDGainSet>
 8005eaa:	e008      	b.n	8005ebe <PP_start+0x2ee>
	} else {
		PIDGainSet(KE,1.0,&(pp->y));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f7ff fa94 	bl	80053e6 <PIDGainSet>
	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005eca:	4619      	mov	r1, r3
 8005ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f7ff fa88 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KU,pp->ku_y[0],&(pp->y));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	edd3 7a98 	vldr	s15, [r3, #608]	; 0x260
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ee8:	2003      	movs	r0, #3
 8005eea:	f7ff fa7c 	bl	80053e6 <PIDGainSet>

	pp->point_count=0;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
	pp->crnt_crv_pt=0;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	pp->pp_crv_calc=0;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	pp->pp_start=1;
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->rotate=0;
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8005f1a:	f36f 03c3 	bfc	r3, #3, #1
 8005f1e:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

	pp->tol_xy=0.20;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a0b      	ldr	r2, [pc, #44]	; (8005f54 <PP_start+0x384>)
 8005f26:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	pp->tol_z=2.0;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f30:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c

	pp->f_tol_xy[0]=0.06;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a08      	ldr	r2, [pc, #32]	; (8005f58 <PP_start+0x388>)
 8005f38:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
	pp->f_tol_z[0]=1.0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f42:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
//		sprintf(uartbuff,"%f %f %f %f %f %f %f\r\n",point[0][0],point[0][1],
//				point[0][2],point[0][3],point[0][4],
//				point[0][5],point[0][6]);
//							UARTPrintString(UART5,uartbuff);

}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	ecbd 8b02 	vpop	{d8}
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	3e4ccccd 	.word	0x3e4ccccd
 8005f58:	3d75c28f 	.word	0x3d75c28f

08005f5c <LSR_start>:

void LSR_start(float point[][7], int no_point, PathPlan_t *pp, uint8_t single, uint8_t right){
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	70fb      	strb	r3, [r7, #3]

	int i;
	for(i=0;i<no_point;i++){
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e07d      	b.n	800606c <LSR_start+0x110>
		pp->target_vel[i] = point[i][0];
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	4613      	mov	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4413      	add	r3, r2
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3378      	adds	r3, #120	; 0x78
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	601a      	str	r2, [r3, #0]
		pp->target_x[i] = point[i][1];
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	461a      	mov	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	331e      	adds	r3, #30
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	601a      	str	r2, [r3, #0]
		pp->target_y[i] = point[i][2];
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	332c      	adds	r3, #44	; 0x2c
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3304      	adds	r3, #4
 8005fca:	601a      	str	r2, [r3, #0]
		pp->target_z[i] = point[i][3];
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	1a9b      	subs	r3, r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	333c      	adds	r3, #60	; 0x3c
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	601a      	str	r2, [r3, #0]
		pp->ku_x[i] = point[i][4];
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4613      	mov	r3, r2
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3388      	adds	r3, #136	; 0x88
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	3304      	adds	r3, #4
 8006008:	601a      	str	r2, [r3, #0]
		pp->ku_y[i] = point[i][4];
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4613      	mov	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	461a      	mov	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	3398      	adds	r3, #152	; 0x98
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	601a      	str	r2, [r3, #0]
		pp->f_tol_xy[i]= point[i][5];
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4613      	mov	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	461a      	mov	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	33c4      	adds	r3, #196	; 0xc4
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	601a      	str	r2, [r3, #0]
		pp->f_tol_z[i]= point[i][6];
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	461a      	mov	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	33d2      	adds	r3, #210	; 0xd2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3304      	adds	r3, #4
 8006064:	601a      	str	r2, [r3, #0]
	for(i=0;i<no_point;i++){
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	3301      	adds	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	f6ff af7d 	blt.w	8005f70 <LSR_start+0x14>

	}

	PIDGainSet(KU,pp->ku_x[0],&(pp->x));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006082:	4619      	mov	r1, r3
 8006084:	eeb0 0a67 	vmov.f32	s0, s15
 8006088:	2003      	movs	r0, #3
 800608a:	f7ff f9ac 	bl	80053e6 <PIDGainSet>
	PIDGainSet(KU, 1.5, &(pp->y));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006094:	4619      	mov	r1, r3
 8006096:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800609a:	2003      	movs	r0, #3
 800609c:	f7ff f9a3 	bl	80053e6 <PIDGainSet>
	PP_PIDEndSet(1.0, 1.5, 0.8, pp);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	ed9f 1a66 	vldr	s2, [pc, #408]	; 800623c <LSR_start+0x2e0>
 80060a6:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 80060aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80060ae:	f7ff fd3e 	bl	8005b2e <PP_PIDEndSet>

	if(right)
 80060b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d03f      	beq.n	800613a <LSR_start+0x1de>
	{
		pp->error_x = -(pp->target_x[pp->point_count] - *(pp->lsrR));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	331e      	adds	r3, #30
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	ed93 7a00 	vldr	s14, [r3]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d8:	eef1 7a67 	vneg.f32	s15, s15
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		if(fabs(pp->error_x)){
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80060e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80060ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f0:	d012      	beq.n	8006118 <LSR_start+0x1bc>
			PIDGainSet(KE,1.0/fabs(pp->error_x),&(pp->x));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80060f8:	eef0 7ae7 	vabs.f32	s15, s15
 80060fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800610a:	4619      	mov	r1, r3
 800610c:	eeb0 0a47 	vmov.f32	s0, s14
 8006110:	2002      	movs	r0, #2
 8006112:	f7ff f968 	bl	80053e6 <PIDGainSet>
 8006116:	e008      	b.n	800612a <LSR_start+0x1ce>
		} else {
			PIDGainSet(KE,1.0,&(pp->x));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800611e:	4619      	mov	r1, r3
 8006120:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006124:	2002      	movs	r0, #2
 8006126:	f7ff f95e 	bl	80053e6 <PIDGainSet>
		}
		pp->right_lsr = 1;
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8006130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006134:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
 8006138:	e03c      	b.n	80061b4 <LSR_start+0x258>
	}
	else
	{
		pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	331e      	adds	r3, #30
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	ed93 7a00 	vldr	s14, [r3]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	edd3 7a00 	vldr	s15, [r3]
 8006154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		if(fabs(pp->error_x)){
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006164:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	d012      	beq.n	8006194 <LSR_start+0x238>
			PIDGainSet(KE,1.0/fabs(pp->error_x),&(pp->x));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006174:	eef0 7ae7 	vabs.f32	s15, s15
 8006178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800617c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006186:	4619      	mov	r1, r3
 8006188:	eeb0 0a47 	vmov.f32	s0, s14
 800618c:	2002      	movs	r0, #2
 800618e:	f7ff f92a 	bl	80053e6 <PIDGainSet>
 8006192:	e008      	b.n	80061a6 <LSR_start+0x24a>
		} else {
			PIDGainSet(KE,1.0,&(pp->x));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800619a:	4619      	mov	r1, r3
 800619c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80061a0:	2002      	movs	r0, #2
 80061a2:	f7ff f920 	bl	80053e6 <PIDGainSet>
		}

		pp->right_lsr = 0;
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80061ac:	f36f 13c7 	bfc	r3, #7, #1
 80061b0:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	}

	pp->target_point=no_point;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

	pp->lsr_start=1;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80061c2:	f043 0310 	orr.w	r3, r3, #16
 80061c6:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->point_count=0;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
	pp->lsr_init=0;
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80061d8:	f36f 0382 	bfc	r3, #2, #1
 80061dc:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->pp_lck_enb = 0;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
	pp->pp_lck_count = 0.0;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
	pp->pp_lck_cal   = 0.0;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]

	pp->rotate=0;
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8006206:	f36f 03c3 	bfc	r3, #3, #1
 800620a:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

	PIDDelayInit(&(pp->x));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa38 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fa32 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fa2c 	bl	800568a <PIDDelayInit>

}
 8006232:	bf00      	nop
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	3f4ccccd 	.word	0x3f4ccccd

08006240 <PP_stop>:

void PP_stop (PathPlan_t *pp){
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

	pp->pp_start=0;
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800624e:	f36f 0300 	bfc	r3, #0, #1
 8006252:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	pp->lsr_start=0;
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800625c:	f36f 1304 	bfc	r3, #4, #1
 8006260:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
	PIDDelayInit(&(pp->x));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fa0d 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fa07 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fa01 	bl	800568a <PIDDelayInit>


//	LED4 = 1;

	pp->pp_lck_enb = 0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <PP_reset>:

void PP_reset (PathPlan_t *pp){
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	pp->pos_x = 0.0;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pp->pos_y = 0.0;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	64da      	str	r2, [r3, #76]	; 0x4c
	pp->prev_x = 0.0;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
	pp->prev_y = 0.0;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	651a      	str	r2, [r3, #80]	; 0x50
	pp->prev_real_x = 0.0;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	649a      	str	r2, [r3, #72]	; 0x48
	pp->prev_real_y = 0.0;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f04f 0200 	mov.w	r2, #0
 80062ce:	659a      	str	r2, [r3, #88]	; 0x58
	pp->del_pos_x = 0.0;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	65da      	str	r2, [r3, #92]	; 0x5c
	pp->del_pos_y = 0.0;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	661a      	str	r2, [r3, #96]	; 0x60
	//	pp->yaw_constant = 0.0;
	//	pp->yaw_offset = *(pp->yaw);
	//	pp->prev_yaw = *(pp->yaw);
	pp->real_x=0.0;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44
	pp->real_y=0.0;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
	PIDDelayInit(&(pp->x));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff f9c7 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&(pp->y));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff f9c1 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&(pp->z));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff f9bb 	bl	800568a <PIDDelayInit>
	//	pp->real_z=0.0;
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <PP_SetZ>:


void PP_SetZ (float z,PathPlan_t *pp){
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	ed87 0a01 	vstr	s0, [r7, #4]
 8006326:	6038      	str	r0, [r7, #0]

	pp->setz=z;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
	pp->yaw_constant=0;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
	//	pp->yaw_offset=*(pp->yaw);
	pp->prev_yaw=*(pp->yaw);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	621a      	str	r2, [r3, #32]

}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <PP_SetCrv_Points>:

void PP_SetCrv_Points (int z,PathPlan_t *pp){
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]

	pp->pp_no_crv_pts = z;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0

}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	0000      	movs	r0, r0
 800636c:	0000      	movs	r0, r0
	...

08006370 <PathPlan>:

void PathPlan (PathPlan_t *pp){
 8006370:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006374:	ed2d 8b02 	vpush	{d8}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]

	if(pp->point_start){
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 8150 	beq.w	8006630 <PathPlan+0x2c0>
		pp->pos_x=*(pp->qeix);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c
		pp->pos_y=*(pp->qeiy);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	64da      	str	r2, [r3, #76]	; 0x4c

		if(*(pp->yaw) < 50.0){
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	edd3 7a00 	vldr	s15, [r3]
 80063ac:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80063e8 <PathPlan+0x78>
 80063b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b8:	d518      	bpl.n	80063ec <PathPlan+0x7c>
			if(pp->prev_yaw > 330.0){
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80063c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80063e4 <PathPlan+0x74>
 80063c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063cc:	dd2d      	ble.n	800642a <PathPlan+0xba>
				pp->yaw_constant++;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80063d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
 80063e2:	e022      	b.n	800642a <PathPlan+0xba>
 80063e4:	43a50000 	.word	0x43a50000
 80063e8:	42480000 	.word	0x42480000
			}
		}else if(*(pp->yaw) > 330.0){
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	edd3 7a00 	vldr	s15, [r3]
 80063f4:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80063e4 <PathPlan+0x74>
 80063f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006400:	dd13      	ble.n	800642a <PathPlan+0xba>
			if(pp->prev_yaw < 50.0){
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	edd3 7a08 	vldr	s15, [r3, #32]
 8006408:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80063e8 <PathPlan+0x78>
 800640c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	d509      	bpl.n	800642a <PathPlan+0xba>
				pp->yaw_constant--;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800641c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			}
		}


		pp->prev_yaw = *(pp->yaw);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	621a      	str	r2, [r3, #32]
		pp->real_z = *(pp->yaw) + (pp->yaw_constant)*360.0 - pp->yaw_offset+pp->setz;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fa f884 	bl	8000548 <__aeabi_f2d>
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	4618      	mov	r0, r3
 800644a:	f7fa f87d 	bl	8000548 <__aeabi_f2d>
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	4b75      	ldr	r3, [pc, #468]	; (8006628 <PathPlan+0x2b8>)
 8006454:	f7fa f8d0 	bl	80005f8 <__aeabi_dmul>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4620      	mov	r0, r4
 800645e:	4629      	mov	r1, r5
 8006460:	f7f9 ff14 	bl	800028c <__adddf3>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4614      	mov	r4, r2
 800646a:	461d      	mov	r5, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006470:	4618      	mov	r0, r3
 8006472:	f7fa f869 	bl	8000548 <__aeabi_f2d>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4620      	mov	r0, r4
 800647c:	4629      	mov	r1, r5
 800647e:	f7f9 ff03 	bl	8000288 <__aeabi_dsub>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4614      	mov	r4, r2
 8006488:	461d      	mov	r5, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa f85a 	bl	8000548 <__aeabi_f2d>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4620      	mov	r0, r4
 800649a:	4629      	mov	r1, r5
 800649c:	f7f9 fef6 	bl	800028c <__adddf3>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4610      	mov	r0, r2
 80064a6:	4619      	mov	r1, r3
 80064a8:	f7fa fb9e 	bl	8000be8 <__aeabi_d2f>
 80064ac:	4602      	mov	r2, r0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
		pp->real_z_rad = (pp->real_z / 180.0) * 3.141593;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fa f846 	bl	8000548 <__aeabi_f2d>
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	4b5a      	ldr	r3, [pc, #360]	; (800662c <PathPlan+0x2bc>)
 80064c2:	f7fa f9c3 	bl	800084c <__aeabi_ddiv>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4610      	mov	r0, r2
 80064cc:	4619      	mov	r1, r3
 80064ce:	a354      	add	r3, pc, #336	; (adr r3, 8006620 <PathPlan+0x2b0>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f7fa f890 	bl	80005f8 <__aeabi_dmul>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	f7fa fb82 	bl	8000be8 <__aeabi_d2f>
 80064e4:	4602      	mov	r2, r0
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	62da      	str	r2, [r3, #44]	; 0x2c

		pp->del_pos_x = pp->pos_x - pp->prev_x;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80064f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		pp->del_pos_y = pp->pos_y - pp->prev_y;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800650c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006522:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800652c:	eeb0 0a67 	vmov.f32	s0, s15
 8006530:	f01d fd02 	bl	8023f38 <cosf>
 8006534:	eef0 7a40 	vmov.f32	s15, s0
 8006538:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * sinf(pp->real_z_rad);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006548:	ee77 8a67 	vsub.f32	s17, s14, s15
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006552:	eeb0 0a67 	vmov.f32	s0, s15
 8006556:	f01d fd37 	bl	8023fc8 <sinf>
 800655a:	eef0 7a40 	vmov.f32	s15, s0
 800655e:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_x =  (pp->pos_x - pp->prev_x) * cosf(pp->real_z_rad) +
 8006562:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800657c:	eeb1 8a67 	vneg.f32	s16, s15
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006586:	eeb0 0a67 	vmov.f32	s0, s15
 800658a:	f01d fd1d 	bl	8023fc8 <sinf>
 800658e:	eef0 7a40 	vmov.f32	s15, s0
 8006592:	ee28 8a27 	vmul.f32	s16, s16, s15
				(pp->pos_y - pp->prev_y) * cosf(pp->real_z_rad);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80065a2:	ee77 8a67 	vsub.f32	s17, s14, s15
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80065ac:	eeb0 0a67 	vmov.f32	s0, s15
 80065b0:	f01d fcc2 	bl	8023f38 <cosf>
 80065b4:	eef0 7a40 	vmov.f32	s15, s0
 80065b8:	ee68 7aa7 	vmul.f32	s15, s17, s15
		pp->del_pos_y = -(pp->pos_x - pp->prev_x) * sinf(pp->real_z_rad) +
 80065bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

		pp->real_x = pp->real_x + pp->del_pos_x;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80065d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		pp->real_y = pp->real_y + pp->del_pos_y;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80065e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

		pp->prev_x = pp->pos_x;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40
		pp->prev_y = pp->pos_y;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	651a      	str	r2, [r3, #80]	; 0x50

		pp->prev_real_x = pp->real_x;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	649a      	str	r2, [r3, #72]	; 0x48
		pp->prev_real_y = pp->real_y;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	659a      	str	r2, [r3, #88]	; 0x58
		pp->prev_real_z= pp->real_z;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	629a      	str	r2, [r3, #40]	; 0x28
 800661a:	e009      	b.n	8006630 <PathPlan+0x2c0>
 800661c:	f3af 8000 	nop.w
 8006620:	82c2bd7f 	.word	0x82c2bd7f
 8006624:	400921fb 	.word	0x400921fb
 8006628:	40768000 	.word	0x40768000
 800662c:	40668000 	.word	0x40668000
	}


	if(pp->point_start && pp->pp_start){ // If path plan started
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	f002 8516 	beq.w	800906e <PathPlan+0x2cfe>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f002 850d 	beq.w	800906e <PathPlan+0x2cfe>

		if(pp->pp_crv_radius[pp->point_count]){
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	3304      	adds	r3, #4
 8006666:	edd3 7a00 	vldr	s15, [r3]
 800666a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800666e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006672:	f001 8389 	beq.w	8007d88 <PathPlan+0x1a18>


			if(!pp->pp_crv_calc){
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 35a8 	ldr.w	r3, [r3, #1448]	; 0x5a8
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 8208 	bne.w	8006a92 <PathPlan+0x722>
				pp->pp_rad_ptx = ((pp->target_x[pp->point_count] - pp->real_x)/(float)2.0) + (pp->pp_crv_radius[pp->point_count] * sinf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	331e      	adds	r3, #30
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	ed93 7a00 	vldr	s14, [r3]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800669a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066a2:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	3304      	adds	r3, #4
 80066b8:	edd3 8a00 	vldr	s17, [r3]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	332c      	adds	r3, #44	; 0x2c
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	3304      	adds	r3, #4
 80066cc:	ed93 7a00 	vldr	s14, [r3]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80066d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	331e      	adds	r3, #30
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	ed93 7a00 	vldr	s14, [r3]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80066f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066f6:	eef0 0a67 	vmov.f32	s1, s15
 80066fa:	eeb0 0a66 	vmov.f32	s0, s13
 80066fe:	f01d fca5 	bl	802404c <atan2f>
 8006702:	eef0 7a40 	vmov.f32	s15, s0
 8006706:	eeb0 0a67 	vmov.f32	s0, s15
 800670a:	f01d fc5d 	bl	8023fc8 <sinf>
 800670e:	eef0 7a40 	vmov.f32	s15, s0
 8006712:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006716:	ee78 7a27 	vadd.f32	s15, s16, s15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8006720:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_rad_pty = ((pp->target_y[pp->point_count] - pp->real_y)/(float)2.0) - (pp->pp_crv_radius[pp->point_count] * cosf(atan2f(pp->target_y[pp->point_count] - pp->real_y, pp->target_x[pp->point_count] - pp->real_x)));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	332c      	adds	r3, #44	; 0x2c
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	3304      	adds	r3, #4
 8006734:	ed93 7a00 	vldr	s14, [r3]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800673e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006742:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006746:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	edd3 8a00 	vldr	s17, [r3]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	332c      	adds	r3, #44	; 0x2c
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	ed93 7a00 	vldr	s14, [r3]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800677a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	331e      	adds	r3, #30
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	ed93 7a00 	vldr	s14, [r3]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800679a:	eef0 0a67 	vmov.f32	s1, s15
 800679e:	eeb0 0a66 	vmov.f32	s0, s13
 80067a2:	f01d fc53 	bl	802404c <atan2f>
 80067a6:	eef0 7a40 	vmov.f32	s15, s0
 80067aa:	eeb0 0a67 	vmov.f32	s0, s15
 80067ae:	f01d fbc3 	bl	8023f38 <cosf>
 80067b2:	eef0 7a40 	vmov.f32	s15, s0
 80067b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80067ba:	ee78 7a67 	vsub.f32	s15, s16, s15
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80067c4:	edc3 7a00 	vstr	s15, [r3]
				pp->pp_crv_const[pp->point_count] = pp->target_z[pp->point_count]/pp->pp_no_crv_pts;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	333c      	adds	r3, #60	; 0x3c
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	edd3 6a00 	vldr	s13, [r3]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80067ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	edc3 7a00 	vstr	s15, [r3]

				float crvpath = (float)1.0/pp->pp_no_crv_pts;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006816:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	e12d      	b.n	8006a7c <PathPlan+0x70c>
					pp->pp_crv_x[i]= powf((1-crvpath),2) * pp->real_x + 2.0*(1-crvpath)*crvpath*pp->pp_rad_ptx + powf(crvpath,2) * pp->target_x[pp->point_count];
 8006820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006824:	edd7 7a03 	vldr	s15, [r7, #12]
 8006828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800682c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006830:	eeb0 0a67 	vmov.f32	s0, s15
 8006834:	f01d fc0c 	bl	8024050 <powf>
 8006838:	eeb0 7a40 	vmov.f32	s14, s0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006846:	ee17 0a90 	vmov	r0, s15
 800684a:	f7f9 fe7d 	bl	8000548 <__aeabi_f2d>
 800684e:	4604      	mov	r4, r0
 8006850:	460d      	mov	r5, r1
 8006852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006856:	edd7 7a03 	vldr	s15, [r7, #12]
 800685a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800685e:	ee17 0a90 	vmov	r0, s15
 8006862:	f7f9 fe71 	bl	8000548 <__aeabi_f2d>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	f7f9 fd0f 	bl	800028c <__adddf3>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4690      	mov	r8, r2
 8006874:	4699      	mov	r9, r3
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7f9 fe66 	bl	8000548 <__aeabi_f2d>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4640      	mov	r0, r8
 8006882:	4649      	mov	r1, r9
 8006884:	f7f9 feb8 	bl	80005f8 <__aeabi_dmul>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4690      	mov	r8, r2
 800688e:	4699      	mov	r9, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7f9 fe55 	bl	8000548 <__aeabi_f2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7f9 fea7 	bl	80005f8 <__aeabi_dmul>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4620      	mov	r0, r4
 80068b0:	4629      	mov	r1, r5
 80068b2:	f7f9 fceb 	bl	800028c <__adddf3>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4614      	mov	r4, r2
 80068bc:	461d      	mov	r5, r3
 80068be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80068c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80068c6:	f01d fbc3 	bl	8024050 <powf>
 80068ca:	eeb0 7a40 	vmov.f32	s14, s0
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	331e      	adds	r3, #30
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	edd3 7a00 	vldr	s15, [r3]
 80068e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e4:	ee17 0a90 	vmov	r0, s15
 80068e8:	f7f9 fe2e 	bl	8000548 <__aeabi_f2d>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7f9 fcca 	bl	800028c <__adddf3>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	f7fa f972 	bl	8000be8 <__aeabi_d2f>
 8006904:	4601      	mov	r1, r0
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	6019      	str	r1, [r3, #0]
					pp->pp_crv_y[i]= powf((1-crvpath),2) * pp->real_y + 2.0*(1-crvpath)*crvpath*pp->pp_rad_pty + powf(crvpath,2) * pp->target_y[pp->point_count];
 8006914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006918:	edd7 7a03 	vldr	s15, [r7, #12]
 800691c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006920:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8006924:	eeb0 0a67 	vmov.f32	s0, s15
 8006928:	f01d fb92 	bl	8024050 <powf>
 800692c:	eeb0 7a40 	vmov.f32	s14, s0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	ee17 0a90 	vmov	r0, s15
 800693e:	f7f9 fe03 	bl	8000548 <__aeabi_f2d>
 8006942:	4604      	mov	r4, r0
 8006944:	460d      	mov	r5, r1
 8006946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800694a:	edd7 7a03 	vldr	s15, [r7, #12]
 800694e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006952:	ee17 0a90 	vmov	r0, s15
 8006956:	f7f9 fdf7 	bl	8000548 <__aeabi_f2d>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	f7f9 fc95 	bl	800028c <__adddf3>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4690      	mov	r8, r2
 8006968:	4699      	mov	r9, r3
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7f9 fdec 	bl	8000548 <__aeabi_f2d>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4640      	mov	r0, r8
 8006976:	4649      	mov	r1, r9
 8006978:	f7f9 fe3e 	bl	80005f8 <__aeabi_dmul>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4690      	mov	r8, r2
 8006982:	4699      	mov	r9, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7f9 fddb 	bl	8000548 <__aeabi_f2d>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f7f9 fe2d 	bl	80005f8 <__aeabi_dmul>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7f9 fc71 	bl	800028c <__adddf3>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4614      	mov	r4, r2
 80069b0:	461d      	mov	r5, r3
 80069b2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80069b6:	ed97 0a03 	vldr	s0, [r7, #12]
 80069ba:	f01d fb49 	bl	8024050 <powf>
 80069be:	eeb0 7a40 	vmov.f32	s14, s0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	332c      	adds	r3, #44	; 0x2c
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	3304      	adds	r3, #4
 80069d2:	edd3 7a00 	vldr	s15, [r3]
 80069d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069da:	ee17 0a90 	vmov	r0, s15
 80069de:	f7f9 fdb3 	bl	8000548 <__aeabi_f2d>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7f9 fc4f 	bl	800028c <__adddf3>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4610      	mov	r0, r2
 80069f4:	4619      	mov	r1, r3
 80069f6:	f7fa f8f7 	bl	8000be8 <__aeabi_d2f>
 80069fa:	4601      	mov	r1, r0
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	6019      	str	r1, [r3, #0]
					pp->pp_crv_z[i] = pp->pp_crv_const[pp->point_count] + pp->pp_crv_const[pp->point_count]*i;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	ed93 7a00 	vldr	s14, [r3]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	edd3 6a00 	vldr	s13, [r3]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	edc3 7a00 	vstr	s15, [r3]
					crvpath+=(float)1.0/pp->pp_no_crv_pts;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a72:	edc7 7a03 	vstr	s15, [r7, #12]
				for(int i = 0;i<pp->pp_no_crv_pts;i++){
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	f6ff aecb 	blt.w	8006820 <PathPlan+0x4b0>
				}
				//				PIDGainSet(KP,(pp->target_vel[pp->point_count]/(float)4.0),&(pp->z));
				pp->pp_crv_calc = 1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
			}

			pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	ed93 7a00 	vldr	s14, [r3]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
			pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	ed93 7a00 	vldr	s14, [r3]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
			pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	ed93 7a00 	vldr	s14, [r3]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8


			if( pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && ((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d14a      	bne.n	8006ba6 <PathPlan+0x836>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006b16:	eef0 7ae7 	vabs.f32	s15, s15
 8006b1a:	ee17 0a90 	vmov	r0, s15
 8006b1e:	f7f9 fd13 	bl	8000548 <__aeabi_f2d>
 8006b22:	4604      	mov	r4, r0
 8006b24:	460d      	mov	r5, r1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006b2c:	eef0 7ae7 	vabs.f32	s15, s15
 8006b30:	ee17 0a90 	vmov	r0, s15
 8006b34:	f7f9 fd08 	bl	8000548 <__aeabi_f2d>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	f7f9 fba4 	bl	800028c <__adddf3>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b54:	f7f9 fe7a 	bl	800084c <__aeabi_ddiv>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	461d      	mov	r5, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7f9 fcee 	bl	8000548 <__aeabi_f2d>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 ffb2 	bl	8000adc <__aeabi_dcmplt>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d013      	beq.n	8006ba6 <PathPlan+0x836>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8006b84:	eeb0 7ae7 	vabs.f32	s14, s15
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 8006b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b96:	d506      	bpl.n	8006ba6 <PathPlan+0x836>
				pp->pp_lck = 1.0;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006b9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e005      	b.n	8006bb2 <PathPlan+0x842>
			else
				pp->pp_lck = 0.0;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006bb8:	edd3 7a00 	vldr	s15, [r3]
 8006bbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006bca:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006bd4:	edd3 7a00 	vldr	s15, [r3]
 8006bd8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006e70 <PathPlan+0xb00>
 8006bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be4:	d811      	bhi.n	8006c0a <PathPlan+0x89a>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006bec:	ed93 7a00 	vldr	s14, [r3]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006bf6:	edd3 7a00 	vldr	s15, [r3]
 8006bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006c04:	edc3 7a00 	vstr	s15, [r3]
 8006c08:	e034      	b.n	8006c74 <PathPlan+0x904>
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006c10:	edd3 6a00 	vldr	s13, [r3]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006c1a:	ed93 7a00 	vldr	s14, [r3]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006c28:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7f9 fc87 	bl	8000548 <__aeabi_f2d>
 8006c3a:	a38b      	add	r3, pc, #556	; (adr r3, 8006e68 <PathPlan+0xaf8>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 ff60 	bl	8000b04 <__aeabi_dcmpge>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <PathPlan+0x8e4>
					pp->pp_lck_enb = 1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8006c52:	e003      	b.n	8006c5c <PathPlan+0x8ec>
				else
					pp->pp_lck_enb = 0;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
				pp->pp_lck_count = 0.0;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy_crv){
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8006c7e:	ee17 0a90 	vmov	r0, s15
 8006c82:	f7f9 fc61 	bl	8000548 <__aeabi_f2d>
 8006c86:	4604      	mov	r4, r0
 8006c88:	460d      	mov	r5, r1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006c90:	eef0 7ae7 	vabs.f32	s15, s15
 8006c94:	ee17 0a90 	vmov	r0, s15
 8006c98:	f7f9 fc56 	bl	8000548 <__aeabi_f2d>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	f7f9 faf2 	bl	800028c <__adddf3>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4610      	mov	r0, r2
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cb8:	f7f9 fdc8 	bl	800084c <__aeabi_ddiv>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7f9 fc3c 	bl	8000548 <__aeabi_f2d>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	f7f9 ff00 	bl	8000adc <__aeabi_dcmplt>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8462 	beq.w	80075a8 <PathPlan+0x1238>
				if(pp->crnt_crv_pt < pp->pp_no_crv_pts - 1){
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	f280 8135 	bge.w	8006f62 <PathPlan+0xbf2>
					PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8006cfe:	edd3 7a00 	vldr	s15, [r3]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8006d08:	4619      	mov	r1, r3
 8006d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0e:	2004      	movs	r0, #4
 8006d10:	f7fe fb69 	bl	80053e6 <PIDGainSet>
					pp->crnt_crv_pt++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
					pp->error_x = pp->pp_crv_x[pp->crnt_crv_pt] - pp->real_x;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	ed93 7a00 	vldr	s14, [r3]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
					pp->error_y = pp->pp_crv_y[pp->crnt_crv_pt] - pp->real_y;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	ed93 7a00 	vldr	s14, [r3]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
					pp->error_z = pp->pp_crv_z[pp->crnt_crv_pt] - pp->real_z;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	ed93 7a00 	vldr	s14, [r3]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

					if(pp->target_x[pp->point_count]-pp->real_x){
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	331e      	adds	r3, #30
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	ed93 7a00 	vldr	s14, [r3]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006daa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	d01d      	beq.n	8006df0 <PathPlan+0xa80>
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	331e      	adds	r3, #30
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	ed93 7a00 	vldr	s14, [r3]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006dd0:	eef0 7ae7 	vabs.f32	s15, s15
 8006dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006de2:	4619      	mov	r1, r3
 8006de4:	eeb0 0a47 	vmov.f32	s0, s14
 8006de8:	2002      	movs	r0, #2
 8006dea:	f7fe fafc 	bl	80053e6 <PIDGainSet>
 8006dee:	e008      	b.n	8006e02 <PathPlan+0xa92>
					} else {
						PIDGainSet(KE,1.0,&(pp->x));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006df6:	4619      	mov	r1, r3
 8006df8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006dfc:	2002      	movs	r0, #2
 8006dfe:	f7fe faf2 	bl	80053e6 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	332c      	adds	r3, #44	; 0x2c
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	3304      	adds	r3, #4
 8006e12:	ed93 7a00 	vldr	s14, [r3]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	d024      	beq.n	8006e74 <PathPlan+0xb04>
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	332c      	adds	r3, #44	; 0x2c
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	3304      	adds	r3, #4
 8006e3a:	ed93 7a00 	vldr	s14, [r3]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006e44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e48:	eef0 7ae7 	vabs.f32	s15, s15
 8006e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	eeb0 0a47 	vmov.f32	s0, s14
 8006e60:	2002      	movs	r0, #2
 8006e62:	f7fe fac0 	bl	80053e6 <PIDGainSet>
 8006e66:	e00e      	b.n	8006e86 <PathPlan+0xb16>
 8006e68:	66666666 	.word	0x66666666
 8006e6c:	3fee6666 	.word	0x3fee6666
 8006e70:	42700000 	.word	0x42700000
					} else {
						PIDGainSet(KE,1.0,&(pp->y));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e80:	2002      	movs	r0, #2
 8006e82:	f7fe fab0 	bl	80053e6 <PIDGainSet>
					}
					PIDGainSet(KP,pp->kp[0],&(pp->x));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006e92:	4619      	mov	r1, r3
 8006e94:	eeb0 0a67 	vmov.f32	s0, s15
 8006e98:	2004      	movs	r0, #4
 8006e9a:	f7fe faa4 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KP,pp->kp[0],&(pp->y));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	eeb0 0a67 	vmov.f32	s0, s15
 8006eb0:	2004      	movs	r0, #4
 8006eb2:	f7fe fa98 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->x));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ec8:	2005      	movs	r0, #5
 8006eca:	f7fe fa8c 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KI,pp->ki[0],&(pp->y));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006eda:	4619      	mov	r1, r3
 8006edc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ee0:	2005      	movs	r0, #5
 8006ee2:	f7fe fa80 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->x));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef8:	2006      	movs	r0, #6
 8006efa:	f7fe fa74 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KD,pp->kd[0],&(pp->y));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8006f10:	2006      	movs	r0, #6
 8006f12:	f7fe fa68 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	3388      	adds	r3, #136	; 0x88
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	3304      	adds	r3, #4
 8006f26:	edd3 7a00 	vldr	s15, [r3]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8006f30:	4619      	mov	r1, r3
 8006f32:	eeb0 0a67 	vmov.f32	s0, s15
 8006f36:	2003      	movs	r0, #3
 8006f38:	f7fe fa55 	bl	80053e6 <PIDGainSet>
					PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	3398      	adds	r3, #152	; 0x98
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	edd3 7a00 	vldr	s15, [r3]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8006f54:	4619      	mov	r1, r3
 8006f56:	eeb0 0a67 	vmov.f32	s0, s15
 8006f5a:	2003      	movs	r0, #3
 8006f5c:	f7fe fa43 	bl	80053e6 <PIDGainSet>
 8006f60:	e322      	b.n	80075a8 <PathPlan+0x1238>


				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && (pp->point_count < (pp->target_point - 1)) ){
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	429a      	cmp	r2, r3
 8006f72:	f040 8252 	bne.w	800741a <PathPlan+0x10aa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8006f82:	3b01      	subs	r3, #1
 8006f84:	429a      	cmp	r2, r3
 8006f86:	f280 8248 	bge.w	800741a <PathPlan+0x10aa>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8006f90:	eef0 7ae7 	vabs.f32	s15, s15
 8006f94:	ee17 0a90 	vmov	r0, s15
 8006f98:	f7f9 fad6 	bl	8000548 <__aeabi_f2d>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	460d      	mov	r5, r1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8006fa6:	eef0 7ae7 	vabs.f32	s15, s15
 8006faa:	ee17 0a90 	vmov	r0, s15
 8006fae:	f7f9 facb 	bl	8000548 <__aeabi_f2d>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7f9 f967 	bl	800028c <__adddf3>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fce:	f7f9 fc3d 	bl	800084c <__aeabi_ddiv>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461d      	mov	r5, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7f9 fab1 	bl	8000548 <__aeabi_f2d>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 fd75 	bl	8000adc <__aeabi_dcmplt>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 82d6 	beq.w	80075a6 <PathPlan+0x1236>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007000:	eeb0 7ae7 	vabs.f32	s14, s15
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 800700a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007012:	d400      	bmi.n	8007016 <PathPlan+0xca6>
 8007014:	e2c7      	b.n	80075a6 <PathPlan+0x1236>
						if(pp->target_accurate[pp->point_count] == 1.0){
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	334a      	adds	r3, #74	; 0x4a
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	3304      	adds	r3, #4
 8007026:	edd3 7a00 	vldr	s15, [r3]
 800702a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800702e:	eef4 7a47 	vcmp.f32	s15, s14
 8007032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007036:	f040 80fd 	bne.w	8007234 <PathPlan+0xec4>
							if(pp->pp_lck_enb == 1){
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8007040:	2b01      	cmp	r3, #1
 8007042:	f040 82b0 	bne.w	80075a6 <PathPlan+0x1236>

								pp->point_count++;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
								if(pp->target_x[pp->point_count]-pp->real_x){
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	331e      	adds	r3, #30
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	ed93 7a00 	vldr	s14, [r3]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800706c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007070:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007078:	d01d      	beq.n	80070b6 <PathPlan+0xd46>
									PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	331e      	adds	r3, #30
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	ed93 7a00 	vldr	s14, [r3]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007096:	eef0 7ae7 	vabs.f32	s15, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80070a8:	4619      	mov	r1, r3
 80070aa:	eeb0 0a47 	vmov.f32	s0, s14
 80070ae:	2002      	movs	r0, #2
 80070b0:	f7fe f999 	bl	80053e6 <PIDGainSet>
 80070b4:	e008      	b.n	80070c8 <PathPlan+0xd58>
								} else {
									PIDGainSet(KE,1.0,&(pp->x));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80070bc:	4619      	mov	r1, r3
 80070be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80070c2:	2002      	movs	r0, #2
 80070c4:	f7fe f98f 	bl	80053e6 <PIDGainSet>
								}
								if(pp->target_y[pp->point_count]-pp->real_y){
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	332c      	adds	r3, #44	; 0x2c
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	3304      	adds	r3, #4
 80070d8:	ed93 7a00 	vldr	s14, [r3]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80070e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ee:	d01e      	beq.n	800712e <PathPlan+0xdbe>
									PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	332c      	adds	r3, #44	; 0x2c
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	3304      	adds	r3, #4
 8007100:	ed93 7a00 	vldr	s14, [r3]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800710a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800710e:	eef0 7ae7 	vabs.f32	s15, s15
 8007112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007120:	4619      	mov	r1, r3
 8007122:	eeb0 0a47 	vmov.f32	s0, s14
 8007126:	2002      	movs	r0, #2
 8007128:	f7fe f95d 	bl	80053e6 <PIDGainSet>
 800712c:	e008      	b.n	8007140 <PathPlan+0xdd0>
								} else {
									PIDGainSet(KE,1.0,&(pp->y));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007134:	4619      	mov	r1, r3
 8007136:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800713a:	2002      	movs	r0, #2
 800713c:	f7fe f953 	bl	80053e6 <PIDGainSet>
								}
								PIDGainSet(KP,pp->kp[0],&(pp->x));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800714c:	4619      	mov	r1, r3
 800714e:	eeb0 0a67 	vmov.f32	s0, s15
 8007152:	2004      	movs	r0, #4
 8007154:	f7fe f947 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KP,pp->kp[0],&(pp->y));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007164:	4619      	mov	r1, r3
 8007166:	eeb0 0a67 	vmov.f32	s0, s15
 800716a:	2004      	movs	r0, #4
 800716c:	f7fe f93b 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->x));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800717c:	4619      	mov	r1, r3
 800717e:	eeb0 0a67 	vmov.f32	s0, s15
 8007182:	2005      	movs	r0, #5
 8007184:	f7fe f92f 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KI,pp->ki[0],&(pp->y));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007194:	4619      	mov	r1, r3
 8007196:	eeb0 0a67 	vmov.f32	s0, s15
 800719a:	2005      	movs	r0, #5
 800719c:	f7fe f923 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->x));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80071ac:	4619      	mov	r1, r3
 80071ae:	eeb0 0a67 	vmov.f32	s0, s15
 80071b2:	2006      	movs	r0, #6
 80071b4:	f7fe f917 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KD,pp->kd[0],&(pp->y));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80071c4:	4619      	mov	r1, r3
 80071c6:	eeb0 0a67 	vmov.f32	s0, s15
 80071ca:	2006      	movs	r0, #6
 80071cc:	f7fe f90b 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	3388      	adds	r3, #136	; 0x88
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	3304      	adds	r3, #4
 80071e0:	edd3 7a00 	vldr	s15, [r3]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80071ea:	4619      	mov	r1, r3
 80071ec:	eeb0 0a67 	vmov.f32	s0, s15
 80071f0:	2003      	movs	r0, #3
 80071f2:	f7fe f8f8 	bl	80053e6 <PIDGainSet>
								PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	3398      	adds	r3, #152	; 0x98
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	edd3 7a00 	vldr	s15, [r3]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800720e:	4619      	mov	r1, r3
 8007210:	eeb0 0a67 	vmov.f32	s0, s15
 8007214:	2003      	movs	r0, #3
 8007216:	f7fe f8e6 	bl	80053e6 <PIDGainSet>
								pp->crnt_crv_pt=0;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
								pp->pp_crv_calc = 0;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8

								pp->pp_lck_enb = 0;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007232:	e1b8      	b.n	80075a6 <PathPlan+0x1236>

							}
						}else{
							pp->point_count++;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
							if(pp->target_x[pp->point_count]-pp->real_x){
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	331e      	adds	r3, #30
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	ed93 7a00 	vldr	s14, [r3]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800725a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800725e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007266:	d01d      	beq.n	80072a4 <PathPlan+0xf34>
								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	331e      	adds	r3, #30
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	ed93 7a00 	vldr	s14, [r3]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007284:	eef0 7ae7 	vabs.f32	s15, s15
 8007288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007296:	4619      	mov	r1, r3
 8007298:	eeb0 0a47 	vmov.f32	s0, s14
 800729c:	2002      	movs	r0, #2
 800729e:	f7fe f8a2 	bl	80053e6 <PIDGainSet>
 80072a2:	e008      	b.n	80072b6 <PathPlan+0xf46>
							} else {
								PIDGainSet(KE,1.0,&(pp->x));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80072aa:	4619      	mov	r1, r3
 80072ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072b0:	2002      	movs	r0, #2
 80072b2:	f7fe f898 	bl	80053e6 <PIDGainSet>
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	332c      	adds	r3, #44	; 0x2c
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	3304      	adds	r3, #4
 80072c6:	ed93 7a00 	vldr	s14, [r3]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80072d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80072d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072dc:	d01e      	beq.n	800731c <PathPlan+0xfac>
								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	332c      	adds	r3, #44	; 0x2c
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	ed93 7a00 	vldr	s14, [r3]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80072f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072fc:	eef0 7ae7 	vabs.f32	s15, s15
 8007300:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800730e:	4619      	mov	r1, r3
 8007310:	eeb0 0a47 	vmov.f32	s0, s14
 8007314:	2002      	movs	r0, #2
 8007316:	f7fe f866 	bl	80053e6 <PIDGainSet>
 800731a:	e008      	b.n	800732e <PathPlan+0xfbe>
							} else {
								PIDGainSet(KE,1.0,&(pp->y));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007322:	4619      	mov	r1, r3
 8007324:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007328:	2002      	movs	r0, #2
 800732a:	f7fe f85c 	bl	80053e6 <PIDGainSet>
							}
							PIDGainSet(KP,pp->kp[0],&(pp->x));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800733a:	4619      	mov	r1, r3
 800733c:	eeb0 0a67 	vmov.f32	s0, s15
 8007340:	2004      	movs	r0, #4
 8007342:	f7fe f850 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KP,pp->kp[0],&(pp->y));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	edd3 7aa7 	vldr	s15, [r3, #668]	; 0x29c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007352:	4619      	mov	r1, r3
 8007354:	eeb0 0a67 	vmov.f32	s0, s15
 8007358:	2004      	movs	r0, #4
 800735a:	f7fe f844 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->x));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800736a:	4619      	mov	r1, r3
 800736c:	eeb0 0a67 	vmov.f32	s0, s15
 8007370:	2005      	movs	r0, #5
 8007372:	f7fe f838 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KI,pp->ki[0],&(pp->y));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	edd3 7aa9 	vldr	s15, [r3, #676]	; 0x2a4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007382:	4619      	mov	r1, r3
 8007384:	eeb0 0a67 	vmov.f32	s0, s15
 8007388:	2005      	movs	r0, #5
 800738a:	f7fe f82c 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->x));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800739a:	4619      	mov	r1, r3
 800739c:	eeb0 0a67 	vmov.f32	s0, s15
 80073a0:	2006      	movs	r0, #6
 80073a2:	f7fe f820 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KD,pp->kd[0],&(pp->y));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	edd3 7aab 	vldr	s15, [r3, #684]	; 0x2ac
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80073b2:	4619      	mov	r1, r3
 80073b4:	eeb0 0a67 	vmov.f32	s0, s15
 80073b8:	2006      	movs	r0, #6
 80073ba:	f7fe f814 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	3388      	adds	r3, #136	; 0x88
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	edd3 7a00 	vldr	s15, [r3]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80073d8:	4619      	mov	r1, r3
 80073da:	eeb0 0a67 	vmov.f32	s0, s15
 80073de:	2003      	movs	r0, #3
 80073e0:	f7fe f801 	bl	80053e6 <PIDGainSet>
							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	3398      	adds	r3, #152	; 0x98
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	edd3 7a00 	vldr	s15, [r3]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80073fc:	4619      	mov	r1, r3
 80073fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007402:	2003      	movs	r0, #3
 8007404:	f7fd ffef 	bl	80053e6 <PIDGainSet>
							pp->crnt_crv_pt=0;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
							pp->pp_crv_calc = 0;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 8007418:	e0c5      	b.n	80075a6 <PathPlan+0x1236>
						}
					}

				}else if(pp->crnt_crv_pt == pp->pp_no_crv_pts - 1 && pp->point_count == (pp->target_point - 1) ){
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 25a4 	ldr.w	r2, [r3, #1444]	; 0x5a4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8007426:	3b01      	subs	r3, #1
 8007428:	429a      	cmp	r2, r3
 800742a:	f040 80bd 	bne.w	80075a8 <PathPlan+0x1238>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800743a:	3b01      	subs	r3, #1
 800743c:	429a      	cmp	r2, r3
 800743e:	f040 80b3 	bne.w	80075a8 <PathPlan+0x1238>

					if(fabs(pp->error_x)< pp->f_tol_xy[0] && fabs(pp->error_y)<pp->f_tol_xy[0] && (int)pp->error_z<=pp->f_tol_z[0]){
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8007448:	eeb0 7ae7 	vabs.f32	s14, s15
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 8007452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745a:	f140 80a5 	bpl.w	80075a8 <PathPlan+0x1238>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007464:	eeb0 7ae7 	vabs.f32	s14, s15
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 800746e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007476:	f140 8097 	bpl.w	80075a8 <PathPlan+0x1238>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	edd3 7ad3 	vldr	s15, [r3, #844]	; 0x34c
 800748e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007496:	f200 8087 	bhi.w	80075a8 <PathPlan+0x1238>

						if(pp->target_accurate[pp->point_count] == 1.0){
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	334a      	adds	r3, #74	; 0x4a
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	3304      	adds	r3, #4
 80074aa:	edd3 7a00 	vldr	s15, [r3]
 80074ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b2:	eef4 7a47 	vcmp.f32	s15, s14
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	d13e      	bne.n	800753a <PathPlan+0x11ca>
							if(pp->pp_lck_enb == 1){
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d170      	bne.n	80075a8 <PathPlan+0x1238>
								PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 80074cc:	edd3 7a00 	vldr	s15, [r3]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80074d6:	4619      	mov	r1, r3
 80074d8:	eeb0 0a67 	vmov.f32	s0, s15
 80074dc:	2004      	movs	r0, #4
 80074de:	f7fd ff82 	bl	80053e6 <PIDGainSet>
								//								APPStop();
//								RNSStop(&rns);
//								PP_stop(&pp);
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 80074e2:	2201      	movs	r2, #1
 80074e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074e8:	487e      	ldr	r0, [pc, #504]	; (80076e4 <PathPlan+0x1374>)
 80074ea:	f010 fc4d 	bl	8017d88 <HAL_GPIO_WritePin>
								//								LED4 = 1;
								PIDDelayInit(&(pp->x));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe f8c8 	bl	800568a <PIDDelayInit>
								PIDDelayInit(&(pp->y));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f8c2 	bl	800568a <PIDDelayInit>
								PIDDelayInit(&(pp->z));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe f8bc 	bl	800568a <PIDDelayInit>
								pp->crnt_crv_pt=0;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
								pp->pp_crv_calc = 0;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
								pp->pp_start=0;
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8007528:	f36f 0300 	bfc	r3, #0, #1
 800752c:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
								pp->pp_lck_enb = 0;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8007538:	e036      	b.n	80075a8 <PathPlan+0x1238>
							}
						}else{
							PIDGainSet(KP,(pp->pp_orgz_kp),&(pp->z));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8007540:	edd3 7a00 	vldr	s15, [r3]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800754a:	4619      	mov	r1, r3
 800754c:	eeb0 0a67 	vmov.f32	s0, s15
 8007550:	2004      	movs	r0, #4
 8007552:	f7fd ff48 	bl	80053e6 <PIDGainSet>
//							RNSStop(&rns);
//							PP_stop(&pp);
							//							APPStop();
							//							LED4 = 1;
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8007556:	2201      	movs	r2, #1
 8007558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800755c:	4861      	ldr	r0, [pc, #388]	; (80076e4 <PathPlan+0x1374>)
 800755e:	f010 fc13 	bl	8017d88 <HAL_GPIO_WritePin>
							PIDDelayInit(&(pp->x));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f88e 	bl	800568a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe f888 	bl	800568a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8007580:	4618      	mov	r0, r3
 8007582:	f7fe f882 	bl	800568a <PIDDelayInit>
							pp->crnt_crv_pt=0;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
							pp->pp_crv_calc = 0;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
							pp->pp_start=0;
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800759c:	f36f 0300 	bfc	r3, #0, #1
 80075a0:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
 80075a4:	e000      	b.n	80075a8 <PathPlan+0x1238>
					if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){
 80075a6:	bf00      	nop

				}
			}


			if(pp->pp_start){
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f002 87bd 	beq.w	800a534 <PathPlan+0x41c4>

				pp->dx = pp->pp_crv_x[pp->crnt_crv_pt] - pp->prev_real_x;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	f503 739d 	add.w	r3, r3, #314	; 0x13a
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	ed93 7a00 	vldr	s14, [r3]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80075d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				pp->dy = pp->pp_crv_y[pp->crnt_crv_pt] - pp->prev_real_y;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	; 0x5a4
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	ed93 7a00 	vldr	s14, [r3]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80075f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

				pp->rotate=0;
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8007608:	f36f 03c3 	bfc	r3, #3, #1
 800760c:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8007616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	d107      	bne.n	8007630 <PathPlan+0x12c0>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8007626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800762a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762e:	d021      	beq.n	8007674 <PathPlan+0x1304>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8007636:	eef5 7a40 	vcmp.f32	s15, #0.0
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	d107      	bne.n	8007650 <PathPlan+0x12e0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8007646:	eef5 7a40 	vcmp.f32	s15, #0.0
 800764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764e:	d011      	beq.n	8007674 <PathPlan+0x1304>
					pp->heading = atan2f(pp->dy, pp->dx);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800765c:	eef0 0a47 	vmov.f32	s1, s14
 8007660:	eeb0 0a67 	vmov.f32	s0, s15
 8007664:	f01c fcf2 	bl	802404c <atan2f>
 8007668:	eef0 7a40 	vmov.f32	s15, s0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8007672:	e048      	b.n	8007706 <PathPlan+0x1396>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800767a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007682:	d007      	beq.n	8007694 <PathPlan+0x1324>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800768a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007692:	d10b      	bne.n	80076ac <PathPlan+0x133c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800769a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800769e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a2:	d503      	bpl.n	80076ac <PathPlan+0x133c>
						pp->heading = 1.5708;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <PathPlan+0x1378>)
 80076a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80076aa:	e02c      	b.n	8007706 <PathPlan+0x1396>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80076b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ba:	d007      	beq.n	80076cc <PathPlan+0x135c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80076c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d111      	bne.n	80076f0 <PathPlan+0x1380>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80076d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	dd09      	ble.n	80076f0 <PathPlan+0x1380>
						pp->heading = -1.5708;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a03      	ldr	r2, [pc, #12]	; (80076ec <PathPlan+0x137c>)
 80076e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80076e2:	e010      	b.n	8007706 <PathPlan+0x1396>
 80076e4:	40020800 	.word	0x40020800
 80076e8:	3fc90ff9 	.word	0x3fc90ff9
 80076ec:	bfc90ff9 	.word	0xbfc90ff9
					} else {
						pp->heading = 0.0;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	66da      	str	r2, [r3, #108]	; 0x6c
						pp->rotate = 1;
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80076fe:	f043 0308 	orr.w	r3, r3, #8
 8007702:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	3378      	adds	r3, #120	; 0x78
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	ed93 8a00 	vldr	s16, [r3]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800771e:	eeb0 0a67 	vmov.f32	s0, s15
 8007722:	f01c fc09 	bl	8023f38 <cosf>
 8007726:	eef0 7a40 	vmov.f32	s15, s0
 800772a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	3378      	adds	r3, #120	; 0x78
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	ed93 8a00 	vldr	s16, [r3]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800774c:	eeb0 0a67 	vmov.f32	s0, s15
 8007750:	f01c fc3a 	bl	8023fc8 <sinf>
 8007754:	eef0 7a40 	vmov.f32	s15, s0
 8007758:	ee68 7a27 	vmul.f32	s15, s16, s15
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

				if(pp->rotate){
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <PathPlan+0x1412>
					pp->vx = pp->vy = 0.0;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	675a      	str	r2, [r3, #116]	; 0x74
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	671a      	str	r2, [r3, #112]	; 0x70
				}

				PID(&(pp->x));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd ff9c 	bl	80056c6 <PID>
				PID(&(pp->y));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fd ff96 	bl	80056c6 <PID>
				PID(&(pp->z));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fd ff90 	bl	80056c6 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80077b2:	eeb0 0a67 	vmov.f32	s0, s15
 80077b6:	f01c fbbf 	bl	8023f38 <cosf>
 80077ba:	eef0 7a40 	vmov.f32	s15, s0
 80077be:	ee28 8a27 	vmul.f32	s16, s16, s15
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80077ce:	eeb0 0a67 	vmov.f32	s0, s15
 80077d2:	f01c fbf9 	bl	8023fc8 <sinf>
 80077d6:	eef0 7a40 	vmov.f32	s15, s0
 80077da:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80077de:	ee78 7a67 	vsub.f32	s15, s16, s15
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	edc3 7ab6 	vstr	s15, [r3, #728]	; 0x2d8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80077f4:	eeb0 0a67 	vmov.f32	s0, s15
 80077f8:	f01c fbe6 	bl	8023fc8 <sinf>
 80077fc:	eef0 7a40 	vmov.f32	s15, s0
 8007800:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007810:	eeb0 0a67 	vmov.f32	s0, s15
 8007814:	f01c fb90 	bl	8023f38 <cosf>
 8007818:	eef0 7a40 	vmov.f32	s15, s0
 800781c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007820:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007836:	eeb0 0a67 	vmov.f32	s0, s15
 800783a:	f01c fb7d 	bl	8023f38 <cosf>
 800783e:	eef0 7a40 	vmov.f32	s15, s0
 8007842:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007852:	eeb0 0a67 	vmov.f32	s0, s15
 8007856:	f01c fbb7 	bl	8023fc8 <sinf>
 800785a:	eef0 7a40 	vmov.f32	s15, s0
 800785e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007862:	ee78 7a67 	vsub.f32	s15, s16, s15
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007878:	eeb0 0a67 	vmov.f32	s0, s15
 800787c:	f01c fba4 	bl	8023fc8 <sinf>
 8007880:	eef0 7a40 	vmov.f32	s15, s0
 8007884:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007894:	eeb0 0a67 	vmov.f32	s0, s15
 8007898:	f01c fb4e 	bl	8023f38 <cosf>
 800789c:	eef0 7a40 	vmov.f32	s15, s0
 80078a0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80078a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4

				if(pp->base_shape== 0){
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 8161 	bne.w	8007b7c <PathPlan+0x180c>
					pp->u1 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80078c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ca:	ee17 0a90 	vmov	r0, s15
 80078ce:	f7f8 fe3b 	bl	8000548 <__aeabi_f2d>
 80078d2:	f20f 6338 	addw	r3, pc, #1592	; 0x638
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f7f8 fe8d 	bl	80005f8 <__aeabi_dmul>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4614      	mov	r4, r2
 80078e4:	461d      	mov	r5, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7f8 fe2b 	bl	8000548 <__aeabi_f2d>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f8 fcc5 	bl	8000288 <__aeabi_dsub>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4610      	mov	r0, r2
 8007904:	4619      	mov	r1, r3
 8007906:	f7f9 f96f 	bl	8000be8 <__aeabi_d2f>
 800790a:	4602      	mov	r2, r0
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800791e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007922:	ee17 0a90 	vmov	r0, s15
 8007926:	f7f8 fe0f 	bl	8000548 <__aeabi_f2d>
 800792a:	f20f 53e0 	addw	r3, pc, #1504	; 0x5e0
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fe61 	bl	80005f8 <__aeabi_dmul>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4614      	mov	r4, r2
 800793c:	461d      	mov	r5, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007944:	4618      	mov	r0, r3
 8007946:	f7f8 fdff 	bl	8000548 <__aeabi_f2d>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4620      	mov	r0, r4
 8007950:	4629      	mov	r1, r5
 8007952:	f7f8 fc9b 	bl	800028c <__adddf3>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	f7f9 f943 	bl	8000be8 <__aeabi_d2f>
 8007962:	4602      	mov	r2, r0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8007976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800797a:	ee17 0a90 	vmov	r0, s15
 800797e:	f7f8 fde3 	bl	8000548 <__aeabi_f2d>
 8007982:	f20f 5388 	addw	r3, pc, #1416	; 0x588
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4614      	mov	r4, r2
 8007994:	461d      	mov	r5, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800799c:	4618      	mov	r0, r3
 800799e:	f7f8 fdd3 	bl	8000548 <__aeabi_f2d>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f8 fc6f 	bl	800028c <__adddf3>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4610      	mov	r0, r2
 80079b4:	4619      	mov	r1, r3
 80079b6:	f7f9 f917 	bl	8000be8 <__aeabi_d2f>
 80079ba:	4602      	mov	r2, r0
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80079ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079d2:	ee17 0a90 	vmov	r0, s15
 80079d6:	f7f8 fdb7 	bl	8000548 <__aeabi_f2d>
 80079da:	f20f 5330 	addw	r3, pc, #1328	; 0x530
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4614      	mov	r4, r2
 80079ec:	461d      	mov	r5, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7f8 fda7 	bl	8000548 <__aeabi_f2d>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4620      	mov	r0, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7f8 fc41 	bl	8000288 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7f9 f8eb 	bl	8000be8 <__aeabi_d2f>
 8007a12:	4602      	mov	r2, r0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4

					pp->v1 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u1;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a2a:	ee17 0a90 	vmov	r0, s15
 8007a2e:	f7f8 fd8b 	bl	8000548 <__aeabi_f2d>
 8007a32:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4614      	mov	r4, r2
 8007a44:	461d      	mov	r5, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7f8 fd7b 	bl	8000548 <__aeabi_f2d>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f7f8 fc17 	bl	800028c <__adddf3>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4610      	mov	r0, r2
 8007a64:	4619      	mov	r1, r3
 8007a66:	f7f9 f8bf 	bl	8000be8 <__aeabi_d2f>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a82:	ee17 0a90 	vmov	r0, s15
 8007a86:	f7f8 fd5f 	bl	8000548 <__aeabi_f2d>
 8007a8a:	f20f 4380 	addw	r3, pc, #1152	; 0x480
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	f7f8 fdb1 	bl	80005f8 <__aeabi_dmul>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4614      	mov	r4, r2
 8007a9c:	461d      	mov	r5, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7f8 fd4f 	bl	8000548 <__aeabi_f2d>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f7f8 fbeb 	bl	800028c <__adddf3>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7f9 f893 	bl	8000be8 <__aeabi_d2f>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ada:	ee17 0a90 	vmov	r0, s15
 8007ade:	f7f8 fd33 	bl	8000548 <__aeabi_f2d>
 8007ae2:	f20f 4328 	addw	r3, pc, #1064	; 0x428
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fd85 	bl	80005f8 <__aeabi_dmul>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4614      	mov	r4, r2
 8007af4:	461d      	mov	r5, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7f8 fd23 	bl	8000548 <__aeabi_f2d>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 fbbf 	bl	800028c <__adddf3>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	4610      	mov	r0, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	f7f9 f867 	bl	8000be8 <__aeabi_d2f>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8007b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b32:	ee17 0a90 	vmov	r0, s15
 8007b36:	f7f8 fd07 	bl	8000548 <__aeabi_f2d>
 8007b3a:	a3f4      	add	r3, pc, #976	; (adr r3, 8007f0c <PathPlan+0x1b9c>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4614      	mov	r4, r2
 8007b4a:	461d      	mov	r5, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f8 fcf8 	bl	8000548 <__aeabi_f2d>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	4629      	mov	r1, r5
 8007b60:	f7f8 fb94 	bl	800028c <__adddf3>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f7f9 f83c 	bl	8000be8 <__aeabi_d2f>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if(pp->pp_crv_radius[pp->point_count]){
 8007b78:	f002 bcdc 	b.w	800a534 <PathPlan+0x41c4>

					//				pp->move(pp->v2,pp->v1,pp->v3,pp->v4,pp->rns);
				} else if(pp->base_shape==1){
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	f042 84d6 	bne.w	800a534 <PathPlan+0x41c4>

					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f8 fcda 	bl	8000548 <__aeabi_f2d>
 8007b94:	a3d8      	add	r3, pc, #864	; (adr r3, 8007ef8 <PathPlan+0x1b88>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fd2d 	bl	80005f8 <__aeabi_dmul>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4614      	mov	r4, r2
 8007ba4:	461d      	mov	r5, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7f8 fccb 	bl	8000548 <__aeabi_f2d>
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	4bd2      	ldr	r3, [pc, #840]	; (8007f00 <PathPlan+0x1b90>)
 8007bb8:	f7f8 fd1e 	bl	80005f8 <__aeabi_dmul>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f7f8 fb60 	bl	8000288 <__aeabi_dsub>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4614      	mov	r4, r2
 8007bce:	461d      	mov	r5, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7f8 fcb6 	bl	8000548 <__aeabi_f2d>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4620      	mov	r0, r4
 8007be2:	4629      	mov	r1, r5
 8007be4:	f7f8 fb52 	bl	800028c <__adddf3>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4610      	mov	r0, r2
 8007bee:	4619      	mov	r1, r3
 8007bf0:	f7f8 fffa 	bl	8000be8 <__aeabi_d2f>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7f8 fca0 	bl	8000548 <__aeabi_f2d>
 8007c08:	a3bb      	add	r3, pc, #748	; (adr r3, 8007ef8 <PathPlan+0x1b88>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	f7f8 fcf3 	bl	80005f8 <__aeabi_dmul>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4614      	mov	r4, r2
 8007c18:	461d      	mov	r5, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7f8 fc91 	bl	8000548 <__aeabi_f2d>
 8007c26:	f04f 0200 	mov.w	r2, #0
 8007c2a:	4bb5      	ldr	r3, [pc, #724]	; (8007f00 <PathPlan+0x1b90>)
 8007c2c:	f7f8 fce4 	bl	80005f8 <__aeabi_dmul>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f7f8 fb28 	bl	800028c <__adddf3>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4614      	mov	r4, r2
 8007c42:	461d      	mov	r5, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7f8 fc7c 	bl	8000548 <__aeabi_f2d>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f8 fb16 	bl	8000288 <__aeabi_dsub>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4610      	mov	r0, r2
 8007c62:	4619      	mov	r1, r3
 8007c64:	f7f8 ffc0 	bl	8000be8 <__aeabi_d2f>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8007c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7f8 fc5b 	bl	8000548 <__aeabi_f2d>
 8007c92:	a399      	add	r3, pc, #612	; (adr r3, 8007ef8 <PathPlan+0x1b88>)
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f7f8 fcae 	bl	80005f8 <__aeabi_dmul>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4614      	mov	r4, r2
 8007ca2:	461d      	mov	r5, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7f8 fc4c 	bl	8000548 <__aeabi_f2d>
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	4b92      	ldr	r3, [pc, #584]	; (8007f00 <PathPlan+0x1b90>)
 8007cb6:	f7f8 fc9f 	bl	80005f8 <__aeabi_dmul>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 fae1 	bl	8000288 <__aeabi_dsub>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4614      	mov	r4, r2
 8007ccc:	461d      	mov	r5, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7f8 fc37 	bl	8000548 <__aeabi_f2d>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 fad3 	bl	800028c <__adddf3>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7f8 ff7b 	bl	8000be8 <__aeabi_d2f>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7f8 fc21 	bl	8000548 <__aeabi_f2d>
 8007d06:	a37c      	add	r3, pc, #496	; (adr r3, 8007ef8 <PathPlan+0x1b88>)
 8007d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	461d      	mov	r5, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7f8 fc12 	bl	8000548 <__aeabi_f2d>
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	4b75      	ldr	r3, [pc, #468]	; (8007f00 <PathPlan+0x1b90>)
 8007d2a:	f7f8 fc65 	bl	80005f8 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4620      	mov	r0, r4
 8007d34:	4629      	mov	r1, r5
 8007d36:	f7f8 faa9 	bl	800028c <__adddf3>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	4614      	mov	r4, r2
 8007d40:	461d      	mov	r5, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7f8 fbfd 	bl	8000548 <__aeabi_f2d>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f7f8 fa99 	bl	800028c <__adddf3>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4610      	mov	r0, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	f7f8 ff41 	bl	8000be8 <__aeabi_d2f>
 8007d66:	4602      	mov	r2, r0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	ed93 7ab8 	vldr	s14, [r3, #736]	; 0x2e0
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8007d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
		if(pp->pp_crv_radius[pp->point_count]){
 8007d84:	f002 bbd6 	b.w	800a534 <PathPlan+0x41c4>


		}
		// No curve moving
		else{
			led3 = 1;
 8007d88:	4a5e      	ldr	r2, [pc, #376]	; (8007f04 <PathPlan+0x1b94>)
 8007d8a:	7853      	ldrb	r3, [r2, #1]
 8007d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d90:	7053      	strb	r3, [r2, #1]
			pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	331e      	adds	r3, #30
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	ed93 7a00 	vldr	s14, [r3]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8007daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
			pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	332c      	adds	r3, #44	; 0x2c
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	ed93 7a00 	vldr	s14, [r3]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
			pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	333c      	adds	r3, #60	; 0x3c
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	ed93 7a00 	vldr	s14, [r3]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

			// I think code here is to calculate time to enable pp_lck_enb or not
			// If error < tol, add pp_lck
			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8007e00:	eef0 7ae7 	vabs.f32	s15, s15
 8007e04:	ee17 0a90 	vmov	r0, s15
 8007e08:	f7f8 fb9e 	bl	8000548 <__aeabi_f2d>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007e16:	eef0 7ae7 	vabs.f32	s15, s15
 8007e1a:	ee17 0a90 	vmov	r0, s15
 8007e1e:	f7f8 fb93 	bl	8000548 <__aeabi_f2d>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4620      	mov	r0, r4
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f8 fa2f 	bl	800028c <__adddf3>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	f04f 0200 	mov.w	r2, #0
 8007e3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e3e:	f7f8 fd05 	bl	800084c <__aeabi_ddiv>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4614      	mov	r4, r2
 8007e48:	461d      	mov	r5, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7f8 fb79 	bl	8000548 <__aeabi_f2d>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fe3d 	bl	8000adc <__aeabi_dcmplt>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d013      	beq.n	8007e90 <PathPlan+0x1b20>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007e6e:	eeb0 7ae7 	vabs.f32	s14, s15
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 8007e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e80:	d506      	bpl.n	8007e90 <PathPlan+0x1b20>
				pp->pp_lck = 1.0;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e88:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e005      	b.n	8007e9c <PathPlan+0x1b2c>
			else
				pp->pp_lck = 0.0;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007e96:	f04f 0200 	mov.w	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

			// Increase when no moving curve
			pp->pp_lck_count = pp->pp_lck_count + 1.0;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007ea2:	edd3 7a00 	vldr	s15, [r3]
 8007ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007eb4:	edc3 7a00 	vstr	s15, [r3]

			if(pp->pp_lck_count <= 60.0)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007ebe:	edd3 7a00 	vldr	s15, [r3]
 8007ec2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007f08 <PathPlan+0x1b98>
 8007ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ece:	d821      	bhi.n	8007f14 <PathPlan+0x1ba4>
				pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007ed6:	ed93 7a00 	vldr	s14, [r3]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8007ee0:	edd3 7a00 	vldr	s15, [r3]
 8007ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007eee:	edc3 7a00 	vstr	s15, [r3]
 8007ef2:	e045      	b.n	8007f80 <PathPlan+0x1c10>
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	a1cac083 	.word	0xa1cac083
 8007efc:	3febb645 	.word	0x3febb645
 8007f00:	3fe00000 	.word	0x3fe00000
 8007f04:	40020814 	.word	0x40020814
 8007f08:	42700000 	.word	0x42700000
 8007f0c:	dbf8b9bb 	.word	0xdbf8b9bb
 8007f10:	3fe6a09e 	.word	0x3fe6a09e
			else{
				pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007f1a:	edd3 6a00 	vldr	s13, [r3]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f24:	ed93 7a00 	vldr	s14, [r3]
 8007f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007f32:	edc3 7a00 	vstr	s15, [r3]
				if(pp->pp_lck_final >= 0.95)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7f8 fb02 	bl	8000548 <__aeabi_f2d>
 8007f44:	f20f 43d8 	addw	r3, pc, #1240	; 0x4d8
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <PathPlan+0x1bf0>
					pp->pp_lck_enb = 1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8007f5e:	e003      	b.n	8007f68 <PathPlan+0x1bf8>
				else
					pp->pp_lck_enb = 0;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
				pp->pp_lck_count = 0.0;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
				pp->pp_lck_cal   = 0.0;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
			}


			if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8007f86:	eef0 7ae7 	vabs.f32	s15, s15
 8007f8a:	ee17 0a90 	vmov	r0, s15
 8007f8e:	f7f8 fadb 	bl	8000548 <__aeabi_f2d>
 8007f92:	4604      	mov	r4, r0
 8007f94:	460d      	mov	r5, r1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8007f9c:	eef0 7ae7 	vabs.f32	s15, s15
 8007fa0:	ee17 0a90 	vmov	r0, s15
 8007fa4:	f7f8 fad0 	bl	8000548 <__aeabi_f2d>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4620      	mov	r0, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 f96c 	bl	800028c <__adddf3>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007fc4:	f7f8 fc42 	bl	800084c <__aeabi_ddiv>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4614      	mov	r4, r2
 8007fce:	461d      	mov	r5, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7f8 fab6 	bl	8000548 <__aeabi_f2d>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f7f8 fd7a 	bl	8000adc <__aeabi_dcmplt>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 84a6 	beq.w	800893c <PathPlan+0x25cc>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8007ff6:	eeb0 7ae7 	vabs.f32	s14, s15
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 8008000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008008:	f140 8498 	bpl.w	800893c <PathPlan+0x25cc>
				if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008018:	3b02      	subs	r3, #2
 800801a:	429a      	cmp	r2, r3
 800801c:	f280 8206 	bge.w	800842c <PathPlan+0x20bc>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	334a      	adds	r3, #74	; 0x4a
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	3304      	adds	r3, #4
 8008030:	edd3 7a00 	vldr	s15, [r3]
 8008034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008038:	eef4 7a47 	vcmp.f32	s15, s14
 800803c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008040:	f040 813a 	bne.w	80082b8 <PathPlan+0x1f48>
						if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800804a:	2b01      	cmp	r3, #1
 800804c:	f040 8476 	bne.w	800893c <PathPlan+0x25cc>
							pp->point_count++; // Showing reached previous destination
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	331e      	adds	r3, #30
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	ed93 7a00 	vldr	s14, [r3]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	332c      	adds	r3, #44	; 0x2c
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	ed93 7a00 	vldr	s14, [r3]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800809a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	333c      	adds	r3, #60	; 0x3c
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	ed93 7a00 	vldr	s14, [r3]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80080bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
							if(pp->target_x[pp->point_count]-pp->real_x){
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	331e      	adds	r3, #30
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	ed93 7a00 	vldr	s14, [r3]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80080de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ea:	d03d      	beq.n	8008168 <PathPlan+0x1df8>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	331e      	adds	r3, #30
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	ed93 7a00 	vldr	s14, [r3]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008108:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800810c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	3388      	adds	r3, #136	; 0x88
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	3304      	adds	r3, #4
 8008124:	edd3 7a00 	vldr	s15, [r3]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008140:	4618      	mov	r0, r3
 8008142:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008146:	eeb0 3a65 	vmov.f32	s6, s11
 800814a:	eef0 2a46 	vmov.f32	s5, s12
 800814e:	eeb0 2a66 	vmov.f32	s4, s13
 8008152:	eef0 1a67 	vmov.f32	s3, s15
 8008156:	eeb0 1a47 	vmov.f32	s2, s14
 800815a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800815e:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8008428 <PathPlan+0x20b8>
 8008162:	f7fd f90d 	bl	8005380 <PIDGainInit>
 8008166:	e028      	b.n	80081ba <PathPlan+0x1e4a>
								//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_x[pp->point_count],
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	3388      	adds	r3, #136	; 0x88
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	3304      	adds	r3, #4
 8008178:	edd3 7a00 	vldr	s15, [r3]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008194:	4618      	mov	r0, r3
 8008196:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800819a:	eeb0 3a46 	vmov.f32	s6, s12
 800819e:	eef0 2a66 	vmov.f32	s5, s13
 80081a2:	eeb0 2a47 	vmov.f32	s4, s14
 80081a6:	eef0 1a67 	vmov.f32	s3, s15
 80081aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80081ae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80081b2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008428 <PathPlan+0x20b8>
 80081b6:	f7fd f8e3 	bl	8005380 <PIDGainInit>
										pp->kd[0],
										30.0,
										&(pp->x));
								//								PIDGainSet(KE,1.0,&(pp->x));
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	332c      	adds	r3, #44	; 0x2c
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	3304      	adds	r3, #4
 80081ca:	ed93 7a00 	vldr	s14, [r3]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80081d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e0:	d03d      	beq.n	800825e <PathPlan+0x1eee>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	332c      	adds	r3, #44	; 0x2c
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	ed93 7a00 	vldr	s14, [r3]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80081fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008200:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	3398      	adds	r3, #152	; 0x98
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	edd3 7a00 	vldr	s15, [r3]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008236:	4618      	mov	r0, r3
 8008238:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800823c:	eeb0 3a65 	vmov.f32	s6, s11
 8008240:	eef0 2a46 	vmov.f32	s5, s12
 8008244:	eeb0 2a66 	vmov.f32	s4, s13
 8008248:	eef0 1a67 	vmov.f32	s3, s15
 800824c:	eeb0 1a47 	vmov.f32	s2, s14
 8008250:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008254:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8008428 <PathPlan+0x20b8>
 8008258:	f7fd f892 	bl	8005380 <PIDGainInit>
 800825c:	e027      	b.n	80082ae <PathPlan+0x1f3e>
								//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_y[pp->point_count],
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	3398      	adds	r3, #152	; 0x98
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	edd3 7a00 	vldr	s15, [r3]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008288:	4618      	mov	r0, r3
 800828a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800828e:	eeb0 3a46 	vmov.f32	s6, s12
 8008292:	eef0 2a66 	vmov.f32	s5, s13
 8008296:	eeb0 2a47 	vmov.f32	s4, s14
 800829a:	eef0 1a67 	vmov.f32	s3, s15
 800829e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80082a2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80082a6:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8008428 <PathPlan+0x20b8>
 80082aa:	f7fd f869 	bl	8005380 <PIDGainInit>
							//							PIDGainSet(KI,pp->ki[0],&(pp->y));
							//							PIDGainSet(KD,pp->kd[0],&(pp->x));
							//							PIDGainSet(KD,pp->kd[0],&(pp->y));
							//							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
							//							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
							pp->pp_lck_enb = 0;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80082b6:	e341      	b.n	800893c <PathPlan+0x25cc>
						}
					}
					else{ // Already between tol, but point lck not enable
						pp->point_count++; // Assuming reached previous point
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	331e      	adds	r3, #30
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	ed93 7a00 	vldr	s14, [r3]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80082de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	332c      	adds	r3, #44	; 0x2c
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	3304      	adds	r3, #4
 80082f8:	ed93 7a00 	vldr	s14, [r3]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	333c      	adds	r3, #60	; 0x3c
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	ed93 7a00 	vldr	s14, [r3]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count]-pp->real_x){
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	331e      	adds	r3, #30
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	ed93 7a00 	vldr	s14, [r3]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800834a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800834e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008352:	d01d      	beq.n	8008390 <PathPlan+0x2020>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	331e      	adds	r3, #30
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	ed93 7a00 	vldr	s14, [r3]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800836c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008370:	eef0 7ae7 	vabs.f32	s15, s15
 8008374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008382:	4619      	mov	r1, r3
 8008384:	eeb0 0a47 	vmov.f32	s0, s14
 8008388:	2002      	movs	r0, #2
 800838a:	f7fd f82c 	bl	80053e6 <PIDGainSet>
 800838e:	e008      	b.n	80083a2 <PathPlan+0x2032>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0,&(pp->x));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008396:	4619      	mov	r1, r3
 8008398:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800839c:	2002      	movs	r0, #2
 800839e:	f7fd f822 	bl	80053e6 <PIDGainSet>
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	332c      	adds	r3, #44	; 0x2c
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	ed93 7a00 	vldr	s14, [r3]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80083bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	d01e      	beq.n	8008408 <PathPlan+0x2098>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	332c      	adds	r3, #44	; 0x2c
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	ed93 7a00 	vldr	s14, [r3]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80083e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083e8:	eef0 7ae7 	vabs.f32	s15, s15
 80083ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80083fa:	4619      	mov	r1, r3
 80083fc:	eeb0 0a47 	vmov.f32	s0, s14
 8008400:	2002      	movs	r0, #2
 8008402:	f7fc fff0 	bl	80053e6 <PIDGainSet>
 8008406:	e299      	b.n	800893c <PathPlan+0x25cc>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0,&(pp->y));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800840e:	4619      	mov	r1, r3
 8008410:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008414:	2002      	movs	r0, #2
 8008416:	f7fc ffe6 	bl	80053e6 <PIDGainSet>
 800841a:	e28f      	b.n	800893c <PathPlan+0x25cc>
 800841c:	f3af 8000 	nop.w
 8008420:	66666666 	.word	0x66666666
 8008424:	3fee6666 	.word	0x3fee6666
 8008428:	3ba3d70a 	.word	0x3ba3d70a
						}
					}
				} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008438:	3b02      	subs	r3, #2
 800843a:	429a      	cmp	r2, r3
 800843c:	f040 81fe 	bne.w	800883c <PathPlan+0x24cc>
					if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	334a      	adds	r3, #74	; 0x4a
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	3304      	adds	r3, #4
 8008450:	edd3 7a00 	vldr	s15, [r3]
 8008454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008458:	eef4 7a47 	vcmp.f32	s15, s14
 800845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008460:	f040 813a 	bne.w	80086d8 <PathPlan+0x2368>
						if(pp->pp_lck_enb == 1){
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800846a:	2b01      	cmp	r3, #1
 800846c:	f040 8266 	bne.w	800893c <PathPlan+0x25cc>
							pp->point_count++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
							pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	331e      	adds	r3, #30
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	ed93 7a00 	vldr	s14, [r3]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
							pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	332c      	adds	r3, #44	; 0x2c
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	3304      	adds	r3, #4
 80084b0:	ed93 7a00 	vldr	s14, [r3]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80084ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
							pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	333c      	adds	r3, #60	; 0x3c
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	ed93 7a00 	vldr	s14, [r3]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80084dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
							if(pp->target_x[pp->point_count]-pp->real_x){
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	331e      	adds	r3, #30
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	ed93 7a00 	vldr	s14, [r3]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80084fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008502:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	d03d      	beq.n	8008588 <PathPlan+0x2218>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	331e      	adds	r3, #30
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	ed93 7a00 	vldr	s14, [r3]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008528:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 800852c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_x[pp->point_count],
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	3388      	adds	r3, #136	; 0x88
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	3304      	adds	r3, #4
 8008544:	edd3 7a00 	vldr	s15, [r3]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008560:	4618      	mov	r0, r3
 8008562:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008566:	eeb0 3a65 	vmov.f32	s6, s11
 800856a:	eef0 2a46 	vmov.f32	s5, s12
 800856e:	eeb0 2a66 	vmov.f32	s4, s13
 8008572:	eef0 1a67 	vmov.f32	s3, s15
 8008576:	eeb0 1a47 	vmov.f32	s2, s14
 800857a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800857e:	ed1f 0a56 	vldr	s0, [pc, #-344]	; 8008428 <PathPlan+0x20b8>
 8008582:	f7fc fefd 	bl	8005380 <PIDGainInit>
 8008586:	e028      	b.n	80085da <PathPlan+0x226a>
								//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_x[pp->point_count],
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	3388      	adds	r3, #136	; 0x88
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	3304      	adds	r3, #4
 8008598:	edd3 7a00 	vldr	s15, [r3]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80085b4:	4618      	mov	r0, r3
 80085b6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80085ba:	eeb0 3a46 	vmov.f32	s6, s12
 80085be:	eef0 2a66 	vmov.f32	s5, s13
 80085c2:	eeb0 2a47 	vmov.f32	s4, s14
 80085c6:	eef0 1a67 	vmov.f32	s3, s15
 80085ca:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80085ce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80085d2:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8008428 <PathPlan+0x20b8>
 80085d6:	f7fc fed3 	bl	8005380 <PIDGainInit>
										pp->kd[1],
										30.0,
										&(pp->x));
								//								PIDGainSet(KE,1.0,&(pp->x));
							}
							if(pp->target_y[pp->point_count]-pp->real_y){
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	332c      	adds	r3, #44	; 0x2c
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	3304      	adds	r3, #4
 80085ea:	ed93 7a00 	vldr	s14, [r3]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80085f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80085fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008600:	d03d      	beq.n	800867e <PathPlan+0x230e>
								PIDGainInit(0.005,
										1.0,
										1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	332c      	adds	r3, #44	; 0x2c
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	3304      	adds	r3, #4
 8008612:	ed93 7a00 	vldr	s14, [r3]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800861c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008620:	eef0 7ae7 	vabs.f32	s15, s15
								PIDGainInit(0.005,
 8008624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
										pp->ku_y[pp->point_count],
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	3398      	adds	r3, #152	; 0x98
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4413      	add	r3, r2
 800863a:	edd3 7a00 	vldr	s15, [r3]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008656:	4618      	mov	r0, r3
 8008658:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800865c:	eeb0 3a65 	vmov.f32	s6, s11
 8008660:	eef0 2a46 	vmov.f32	s5, s12
 8008664:	eeb0 2a66 	vmov.f32	s4, s13
 8008668:	eef0 1a67 	vmov.f32	s3, s15
 800866c:	eeb0 1a47 	vmov.f32	s2, s14
 8008670:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008674:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 8008428 <PathPlan+0x20b8>
 8008678:	f7fc fe82 	bl	8005380 <PIDGainInit>
 800867c:	e027      	b.n	80086ce <PathPlan+0x235e>
								//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
							} else {
								PIDGainInit(0.005,
										1.0,
										1.0,
										pp->ku_y[pp->point_count],
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
								PIDGainInit(0.005,
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	3398      	adds	r3, #152	; 0x98
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	edd3 7a00 	vldr	s15, [r3]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80086a8:	4618      	mov	r0, r3
 80086aa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80086ae:	eeb0 3a46 	vmov.f32	s6, s12
 80086b2:	eef0 2a66 	vmov.f32	s5, s13
 80086b6:	eeb0 2a47 	vmov.f32	s4, s14
 80086ba:	eef0 1a67 	vmov.f32	s3, s15
 80086be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80086c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80086c6:	ed1f 0aa8 	vldr	s0, [pc, #-672]	; 8008428 <PathPlan+0x20b8>
 80086ca:	f7fc fe59 	bl	8005380 <PIDGainInit>
										pp->kd[1],
										30.0,
										&(pp->y));
								//								PIDGainSet(KE,1.0,&(pp->y));
							}
							pp->pp_lck_enb = 0;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80086d6:	e131      	b.n	800893c <PathPlan+0x25cc>
						}
					}
					else{
						pp->point_count++;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - pp->real_x;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	331e      	adds	r3, #30
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	ed93 7a00 	vldr	s14, [r3]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80086fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	332c      	adds	r3, #44	; 0x2c
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	3304      	adds	r3, #4
 8008718:	ed93 7a00 	vldr	s14, [r3]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	333c      	adds	r3, #60	; 0x3c
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	ed93 7a00 	vldr	s14, [r3]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count]-pp->real_x){
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	331e      	adds	r3, #30
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	ed93 7a00 	vldr	s14, [r3]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800876a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008772:	d01d      	beq.n	80087b0 <PathPlan+0x2440>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	331e      	adds	r3, #30
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	ed93 7a00 	vldr	s14, [r3]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800878c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008790:	eef0 7ae7 	vabs.f32	s15, s15
 8008794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80087a2:	4619      	mov	r1, r3
 80087a4:	eeb0 0a47 	vmov.f32	s0, s14
 80087a8:	2002      	movs	r0, #2
 80087aa:	f7fc fe1c 	bl	80053e6 <PIDGainSet>
 80087ae:	e008      	b.n	80087c2 <PathPlan+0x2452>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->x));
							PIDGainSet(KE,1.0,&(pp->x));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80087b6:	4619      	mov	r1, r3
 80087b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087bc:	2002      	movs	r0, #2
 80087be:	f7fc fe12 	bl	80053e6 <PIDGainSet>
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	332c      	adds	r3, #44	; 0x2c
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	3304      	adds	r3, #4
 80087d2:	ed93 7a00 	vldr	s14, [r3]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80087dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80087e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e8:	d01e      	beq.n	8008828 <PathPlan+0x24b8>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	332c      	adds	r3, #44	; 0x2c
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	3304      	adds	r3, #4
 80087fa:	ed93 7a00 	vldr	s14, [r3]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008808:	eef0 7ae7 	vabs.f32	s15, s15
 800880c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800881a:	4619      	mov	r1, r3
 800881c:	eeb0 0a47 	vmov.f32	s0, s14
 8008820:	2002      	movs	r0, #2
 8008822:	f7fc fde0 	bl	80053e6 <PIDGainSet>
 8008826:	e089      	b.n	800893c <PathPlan+0x25cc>
//									pp->kp[1],
//									pp->ki[1],
//									pp->kd[1],
//									30.0,
//									&(pp->y));
							PIDGainSet(KE,1.0,&(pp->y));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800882e:	4619      	mov	r1, r3
 8008830:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008834:	2002      	movs	r0, #2
 8008836:	f7fc fdd6 	bl	80053e6 <PIDGainSet>
 800883a:	e07f      	b.n	800893c <PathPlan+0x25cc>
						}
					}
				}else if(fabs(pp->error_x)<pp->f_tol_xy[0] && fabs(pp->error_y)<pp->f_tol_xy[0] && (int)pp->error_z<=pp->f_tol_z[0]){ // Reached last point
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8008842:	eeb0 7ae7 	vabs.f32	s14, s15
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 800884c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008854:	d572      	bpl.n	800893c <PathPlan+0x25cc>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800885c:	eeb0 7ae7 	vabs.f32	s14, s15
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 8008866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d565      	bpl.n	800893c <PathPlan+0x25cc>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8008876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800887a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	edd3 7ad3 	vldr	s15, [r3, #844]	; 0x34c
 8008884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800888c:	d856      	bhi.n	800893c <PathPlan+0x25cc>
					if(pp->target_accurate[pp->point_count] == 1.0){
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	334a      	adds	r3, #74	; 0x4a
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	3304      	adds	r3, #4
 800889e:	edd3 7a00 	vldr	s15, [r3]
 80088a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088a6:	eef4 7a47 	vcmp.f32	s15, s14
 80088aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ae:	d127      	bne.n	8008900 <PathPlan+0x2590>
						if(pp->pp_lck_enb == 1){
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d140      	bne.n	800893c <PathPlan+0x25cc>
//							RNSStop(&rns);
//							PP_stop(&pp);
							led3 = 0;
 80088ba:	4a7d      	ldr	r2, [pc, #500]	; (8008ab0 <PathPlan+0x2740>)
 80088bc:	7853      	ldrb	r3, [r2, #1]
 80088be:	f36f 13c7 	bfc	r3, #7, #1
 80088c2:	7053      	strb	r3, [r2, #1]
							//								APPStop();
							//								LED4 = 1;
							PIDDelayInit(&(pp->x));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fc fedd 	bl	800568a <PIDDelayInit>
							PIDDelayInit(&(pp->y));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fc fed7 	bl	800568a <PIDDelayInit>
							PIDDelayInit(&(pp->z));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fc fed1 	bl	800568a <PIDDelayInit>
							pp->pp_start=0;
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 80088ee:	f36f 0300 	bfc	r3, #0, #1
 80088f2:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
							pp->pp_lck_enb = 0;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80088fe:	e01d      	b.n	800893c <PathPlan+0x25cc>
						}
					}
					else{
						//							APPStop();
						//							LED4 = 1;
						led3 = 0;
 8008900:	4a6b      	ldr	r2, [pc, #428]	; (8008ab0 <PathPlan+0x2740>)
 8008902:	7853      	ldrb	r3, [r2, #1]
 8008904:	f36f 13c7 	bfc	r3, #7, #1
 8008908:	7053      	strb	r3, [r2, #1]
//						RNSStop(&rns);
//						PP_stop(&pp);
						PIDDelayInit(&(pp->x));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008910:	4618      	mov	r0, r3
 8008912:	f7fc feba 	bl	800568a <PIDDelayInit>
						PIDDelayInit(&(pp->y));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 800891c:	4618      	mov	r0, r3
 800891e:	f7fc feb4 	bl	800568a <PIDDelayInit>
						PIDDelayInit(&(pp->z));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8008928:	4618      	mov	r0, r3
 800892a:	f7fc feae 	bl	800568a <PIDDelayInit>
						pp->pp_start=0;
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8008934:	f36f 0300 	bfc	r3, #0, #1
 8008938:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
					}
				}
			}

			if(pp->pp_start){
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	f001 85f3 	beq.w	800a534 <PathPlan+0x41c4>

				pp->dx = pp->target_x[pp->point_count] - pp->prev_real_x;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	331e      	adds	r3, #30
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	ed93 7a00 	vldr	s14, [r3]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8008966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
				pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	332c      	adds	r3, #44	; 0x2c
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	3304      	adds	r3, #4
 8008980:	ed93 7a00 	vldr	s14, [r3]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800898a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

				pp->rotate=0;
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800899a:	f36f 03c3 	bfc	r3, #3, #1
 800899e:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

				if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80089a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b0:	d107      	bne.n	80089c2 <PathPlan+0x2652>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80089b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c0:	d021      	beq.n	8008a06 <PathPlan+0x2696>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80089c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d0:	d107      	bne.n	80089e2 <PathPlan+0x2672>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80089d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e0:	d011      	beq.n	8008a06 <PathPlan+0x2696>
					pp->heading = atan2f(pp->dy, pp->dx);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80089ee:	eef0 0a47 	vmov.f32	s1, s14
 80089f2:	eeb0 0a67 	vmov.f32	s0, s15
 80089f6:	f01b fb29 	bl	802404c <atan2f>
 80089fa:	eef0 7a40 	vmov.f32	s15, s0
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8008a04:	e075      	b.n	8008af2 <PathPlan+0x2782>
				} else {
					if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a14:	d007      	beq.n	8008a26 <PathPlan+0x26b6>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a24:	d10b      	bne.n	8008a3e <PathPlan+0x26ce>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a34:	d503      	bpl.n	8008a3e <PathPlan+0x26ce>
						pp->heading = -1.5708;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a1e      	ldr	r2, [pc, #120]	; (8008ab4 <PathPlan+0x2744>)
 8008a3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a3c:	e059      	b.n	8008af2 <PathPlan+0x2782>
					} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4c:	d007      	beq.n	8008a5e <PathPlan+0x26ee>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5c:	d10b      	bne.n	8008a76 <PathPlan+0x2706>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6c:	dd03      	ble.n	8008a76 <PathPlan+0x2706>
						pp->heading = 1.5708;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a11      	ldr	r2, [pc, #68]	; (8008ab8 <PathPlan+0x2748>)
 8008a72:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a74:	e03d      	b.n	8008af2 <PathPlan+0x2782>
					} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a84:	d007      	beq.n	8008a96 <PathPlan+0x2726>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a94:	d112      	bne.n	8008abc <PathPlan+0x274c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa4:	dd0a      	ble.n	8008abc <PathPlan+0x274c>
						pp->heading = 0.0;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	66da      	str	r2, [r3, #108]	; 0x6c
 8008aae:	e020      	b.n	8008af2 <PathPlan+0x2782>
 8008ab0:	40020814 	.word	0x40020814
 8008ab4:	bfc90ff9 	.word	0xbfc90ff9
 8008ab8:	3fc90ff9 	.word	0x3fc90ff9
//						pp->rotate = 1;
					}
					else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008ac2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aca:	d007      	beq.n	8008adc <PathPlan+0x276c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8008ad2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ada:	d10a      	bne.n	8008af2 <PathPlan+0x2782>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008ae2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	d502      	bpl.n	8008af2 <PathPlan+0x2782>
					{
						pp->heading = M_PI;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4ad6      	ldr	r2, [pc, #856]	; (8008e48 <PathPlan+0x2ad8>)
 8008af0:	66da      	str	r2, [r3, #108]	; 0x6c
					}
				}

				pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	3378      	adds	r3, #120	; 0x78
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	ed93 8a00 	vldr	s16, [r3]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8008b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b0e:	f01b fa13 	bl	8023f38 <cosf>
 8008b12:	eef0 7a40 	vmov.f32	s15, s0
 8008b16:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	3378      	adds	r3, #120	; 0x78
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	ed93 8a00 	vldr	s16, [r3]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8008b38:	eeb0 0a67 	vmov.f32	s0, s15
 8008b3c:	f01b fa44 	bl	8023fc8 <sinf>
 8008b40:	eef0 7a40 	vmov.f32	s15, s0
 8008b44:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

				if(pp->rotate){
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8008b54:	f003 0308 	and.w	r3, r3, #8
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <PathPlan+0x27fe>
					pp->vx = pp->vy = 0.0;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f04f 0200 	mov.w	r2, #0
 8008b64:	675a      	str	r2, [r3, #116]	; 0x74
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	671a      	str	r2, [r3, #112]	; 0x70
				}

				PID(&(pp->x));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fc fda6 	bl	80056c6 <PID>
				PID(&(pp->y));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fc fda0 	bl	80056c6 <PID>
				PID(&(pp->z));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fc fd9a 	bl	80056c6 <PID>

				pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8008ba2:	f01b f9c9 	bl	8023f38 <cosf>
 8008ba6:	eef0 7a40 	vmov.f32	s15, s0
 8008baa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008bba:	eeb0 0a67 	vmov.f32	s0, s15
 8008bbe:	f01b fa03 	bl	8023fc8 <sinf>
 8008bc2:	eef0 7a40 	vmov.f32	s15, s0
 8008bc6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008bca:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	edc3 7ab6 	vstr	s15, [r3, #728]	; 0x2d8
				pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008be0:	eeb0 0a67 	vmov.f32	s0, s15
 8008be4:	f01b f9f0 	bl	8023fc8 <sinf>
 8008be8:	eef0 7a40 	vmov.f32	s15, s0
 8008bec:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8008c00:	f01b f99a 	bl	8023f38 <cosf>
 8008c04:	eef0 7a40 	vmov.f32	s15, s0
 8008c08:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008c0c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
				pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c22:	eeb0 0a67 	vmov.f32	s0, s15
 8008c26:	f01b f987 	bl	8023f38 <cosf>
 8008c2a:	eef0 7a40 	vmov.f32	s15, s0
 8008c2e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c42:	f01b f9c1 	bl	8023fc8 <sinf>
 8008c46:	eef0 7a40 	vmov.f32	s15, s0
 8008c4a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008c4e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
				pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c64:	eeb0 0a67 	vmov.f32	s0, s15
 8008c68:	f01b f9ae 	bl	8023fc8 <sinf>
 8008c6c:	eef0 7a40 	vmov.f32	s15, s0
 8008c70:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008c80:	eeb0 0a67 	vmov.f32	s0, s15
 8008c84:	f01b f958 	bl	8023f38 <cosf>
 8008c88:	eef0 7a40 	vmov.f32	s15, s0
 8008c8c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8008c90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4

				if(pp->base_shape== fwd_omni){
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	f040 80de 	bne.w	8008e62 <PathPlan+0x2af2>
//					pp->u1 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
//					pp->u2 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
//					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
//					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);

					pp->u1 = (pp->outz * 1.0);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = -pp->outz * 1.0;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8008cb8:	eef1 7a67 	vneg.f32	s15, s15
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	edc3 7abb 	vstr	s15, [r3, #748]	; 0x2ec
					pp->u3 = (pp->outz * 1.0);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->u4 = -(pp->outz * 1.0);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f7 fc37 	bl	8000548 <__aeabi_f2d>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4610      	mov	r0, r2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	f7f7 ff81 	bl	8000be8 <__aeabi_d2f>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef1 7a67 	vneg.f32	s15, s15
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	edc3 7abd 	vstr	s15, [r3, #756]	; 0x2f4


					pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d06:	ee17 0a90 	vmov	r0, s15
 8008d0a:	f7f7 fc1d 	bl	8000548 <__aeabi_f2d>
 8008d0e:	a34c      	add	r3, pc, #304	; (adr r3, 8008e40 <PathPlan+0x2ad0>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fc70 	bl	80005f8 <__aeabi_dmul>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	461d      	mov	r5, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f7 fc0e 	bl	8000548 <__aeabi_f2d>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4620      	mov	r0, r4
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7f7 faaa 	bl	800028c <__adddf3>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4619      	mov	r1, r3
 8008d40:	f7f7 ff52 	bl	8000be8 <__aeabi_d2f>
 8008d44:	4602      	mov	r2, r0
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d5c:	ee17 0a90 	vmov	r0, s15
 8008d60:	f7f7 fbf2 	bl	8000548 <__aeabi_f2d>
 8008d64:	a336      	add	r3, pc, #216	; (adr r3, 8008e40 <PathPlan+0x2ad0>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f7f7 fc45 	bl	80005f8 <__aeabi_dmul>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4614      	mov	r4, r2
 8008d74:	461d      	mov	r5, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7f7 fbe3 	bl	8000548 <__aeabi_f2d>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fa7f 	bl	800028c <__adddf3>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7f7 ff27 	bl	8000be8 <__aeabi_d2f>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008db2:	ee17 0a90 	vmov	r0, s15
 8008db6:	f7f7 fbc7 	bl	8000548 <__aeabi_f2d>
 8008dba:	a321      	add	r3, pc, #132	; (adr r3, 8008e40 <PathPlan+0x2ad0>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f7f7 fc1a 	bl	80005f8 <__aeabi_dmul>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4614      	mov	r4, r2
 8008dca:	461d      	mov	r5, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f7 fbb8 	bl	8000548 <__aeabi_f2d>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4620      	mov	r0, r4
 8008dde:	4629      	mov	r1, r5
 8008de0:	f7f7 fa54 	bl	800028c <__adddf3>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4610      	mov	r0, r2
 8008dea:	4619      	mov	r1, r3
 8008dec:	f7f7 fefc 	bl	8000be8 <__aeabi_d2f>
 8008df0:	4602      	mov	r2, r0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
					pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8008e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e08:	ee17 0a90 	vmov	r0, s15
 8008e0c:	f7f7 fb9c 	bl	8000548 <__aeabi_f2d>
 8008e10:	a30b      	add	r3, pc, #44	; (adr r3, 8008e40 <PathPlan+0x2ad0>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4614      	mov	r4, r2
 8008e20:	461d      	mov	r5, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7f7 fb8d 	bl	8000548 <__aeabi_f2d>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4620      	mov	r0, r4
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7f7 fa29 	bl	800028c <__adddf3>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	e006      	b.n	8008e4c <PathPlan+0x2adc>
 8008e3e:	bf00      	nop
 8008e40:	dbf8b9bb 	.word	0xdbf8b9bb
 8008e44:	3fe6a09e 	.word	0x3fe6a09e
 8008e48:	40490fdb 	.word	0x40490fdb
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	f7f7 fec9 	bl	8000be8 <__aeabi_d2f>
 8008e56:	4602      	mov	r2, r0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		if(pp->pp_crv_radius[pp->point_count]){
 8008e5e:	f001 bb69 	b.w	800a534 <PathPlan+0x41c4>

					//				pp->move(pp->v2,pp->v1,pp->v3,pp->v4,pp->rns);
				} else if(pp->base_shape== 1){
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	f041 8363 	bne.w	800a534 <PathPlan+0x41c4>

					pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f7 fb67 	bl	8000548 <__aeabi_f2d>
 8008e7a:	a3d7      	add	r3, pc, #860	; (adr r3, 80091d8 <PathPlan+0x2e68>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 fbba 	bl	80005f8 <__aeabi_dmul>
 8008e84:	4602      	mov	r2, r0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	461d      	mov	r5, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f7 fb58 	bl	8000548 <__aeabi_f2d>
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	4bd0      	ldr	r3, [pc, #832]	; (80091e0 <PathPlan+0x2e70>)
 8008e9e:	f7f7 fbab 	bl	80005f8 <__aeabi_dmul>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 f9ed 	bl	8000288 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	461d      	mov	r5, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7f7 fb43 	bl	8000548 <__aeabi_f2d>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7f7 f9df 	bl	800028c <__adddf3>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	f7f7 fe87 	bl	8000be8 <__aeabi_d2f>
 8008eda:	4602      	mov	r2, r0
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7f7 fb2d 	bl	8000548 <__aeabi_f2d>
 8008eee:	a3ba      	add	r3, pc, #744	; (adr r3, 80091d8 <PathPlan+0x2e68>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 fb80 	bl	80005f8 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	461d      	mov	r5, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f7 fb1e 	bl	8000548 <__aeabi_f2d>
 8008f0c:	f04f 0200 	mov.w	r2, #0
 8008f10:	4bb3      	ldr	r3, [pc, #716]	; (80091e0 <PathPlan+0x2e70>)
 8008f12:	f7f7 fb71 	bl	80005f8 <__aeabi_dmul>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	f7f7 f9b5 	bl	800028c <__adddf3>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4614      	mov	r4, r2
 8008f28:	461d      	mov	r5, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7f7 fb09 	bl	8000548 <__aeabi_f2d>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7f7 f9a3 	bl	8000288 <__aeabi_dsub>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4610      	mov	r0, r2
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f7f7 fe4d 	bl	8000be8 <__aeabi_d2f>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8008f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
					pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7f7 fae8 	bl	8000548 <__aeabi_f2d>
 8008f78:	a397      	add	r3, pc, #604	; (adr r3, 80091d8 <PathPlan+0x2e68>)
 8008f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7e:	f7f7 fb3b 	bl	80005f8 <__aeabi_dmul>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4614      	mov	r4, r2
 8008f88:	461d      	mov	r5, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7f7 fad9 	bl	8000548 <__aeabi_f2d>
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	4b91      	ldr	r3, [pc, #580]	; (80091e0 <PathPlan+0x2e70>)
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	f7f7 f96e 	bl	8000288 <__aeabi_dsub>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	461d      	mov	r5, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7f7 fac4 	bl	8000548 <__aeabi_f2d>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f7f7 f960 	bl	800028c <__adddf3>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f7f7 fe08 	bl	8000be8 <__aeabi_d2f>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
					pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f7 faae 	bl	8000548 <__aeabi_f2d>
 8008fec:	a37a      	add	r3, pc, #488	; (adr r3, 80091d8 <PathPlan+0x2e68>)
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f7f7 fb01 	bl	80005f8 <__aeabi_dmul>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4614      	mov	r4, r2
 8008ffc:	461d      	mov	r5, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8009004:	4618      	mov	r0, r3
 8009006:	f7f7 fa9f 	bl	8000548 <__aeabi_f2d>
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	4b74      	ldr	r3, [pc, #464]	; (80091e0 <PathPlan+0x2e70>)
 8009010:	f7f7 faf2 	bl	80005f8 <__aeabi_dmul>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4620      	mov	r0, r4
 800901a:	4629      	mov	r1, r5
 800901c:	f7f7 f936 	bl	800028c <__adddf3>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4614      	mov	r4, r2
 8009026:	461d      	mov	r5, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800902e:	4618      	mov	r0, r3
 8009030:	f7f7 fa8a 	bl	8000548 <__aeabi_f2d>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4620      	mov	r0, r4
 800903a:	4629      	mov	r1, r5
 800903c:	f7f7 f926 	bl	800028c <__adddf3>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4610      	mov	r0, r2
 8009046:	4619      	mov	r1, r3
 8009048:	f7f7 fdce 	bl	8000be8 <__aeabi_d2f>
 800904c:	4602      	mov	r2, r0
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
					pp->v3 = 1.0 * pp->rvx + pp->u3;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	ed93 7ab8 	vldr	s14, [r3, #736]	; 0x2e0
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8009060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
		if(pp->pp_crv_radius[pp->point_count]){
 800906a:	f001 ba63 	b.w	800a534 <PathPlan+0x41c4>
//				hb_count = HAL_GetTick();

			}
		}
	}
	else if(pp->point_start && pp->lsr_start) // In this code, only moving in x direction but using left and right
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	f001 825b 	beq.w	800a536 <PathPlan+0x41c6>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009086:	f003 0310 	and.w	r3, r3, #16
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	f001 8252 	beq.w	800a536 <PathPlan+0x41c6>
	{
		led3 = 1;
 8009092:	4a54      	ldr	r2, [pc, #336]	; (80091e4 <PathPlan+0x2e74>)
 8009094:	7853      	ldrb	r3, [r2, #1]
 8009096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909a:	7053      	strb	r3, [r2, #1]
		if(!pp->right_lsr)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80090a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d112      	bne.n	80090d2 <PathPlan+0x2d62>
			pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	331e      	adds	r3, #30
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	ed93 7a00 	vldr	s14, [r3]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	edd3 7a00 	vldr	s15, [r3]
 80090c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
 80090d0:	e013      	b.n	80090fa <PathPlan+0x2d8a>
		else
			pp->error_x = -(pp->target_x[pp->point_count] - *(pp->lsrR));
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	331e      	adds	r3, #30
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	ed93 7a00 	vldr	s14, [r3]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	edd3 7a00 	vldr	s15, [r3]
 80090ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090f0:	eef1 7a67 	vneg.f32	s15, s15
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
		pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	332c      	adds	r3, #44	; 0x2c
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	3304      	adds	r3, #4
 800910a:	ed93 7a00 	vldr	s14, [r3]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
		pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	333c      	adds	r3, #60	; 0x3c
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	ed93 7a00 	vldr	s14, [r3]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8

		// I think code here is to calculate time to enable pp_lck_enb or not
		// If error < tol, add pp_lck
		if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009146:	eef0 7ae7 	vabs.f32	s15, s15
 800914a:	ee17 0a90 	vmov	r0, s15
 800914e:	f7f7 f9fb 	bl	8000548 <__aeabi_f2d>
 8009152:	4604      	mov	r4, r0
 8009154:	460d      	mov	r5, r1
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800915c:	eef0 7ae7 	vabs.f32	s15, s15
 8009160:	ee17 0a90 	vmov	r0, s15
 8009164:	f7f7 f9f0 	bl	8000548 <__aeabi_f2d>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 f88c 	bl	800028c <__adddf3>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4610      	mov	r0, r2
 800917a:	4619      	mov	r1, r3
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009184:	f7f7 fb62 	bl	800084c <__aeabi_ddiv>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4614      	mov	r4, r2
 800918e:	461d      	mov	r5, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9d6 	bl	8000548 <__aeabi_f2d>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4620      	mov	r0, r4
 80091a2:	4629      	mov	r1, r5
 80091a4:	f7f7 fc9a 	bl	8000adc <__aeabi_dcmplt>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01e      	beq.n	80091ec <PathPlan+0x2e7c>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80091b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 80091be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c6:	d511      	bpl.n	80091ec <PathPlan+0x2e7c>
			pp->pp_lck = 1.0;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80091ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e010      	b.n	80091f8 <PathPlan+0x2e88>
 80091d6:	bf00      	nop
 80091d8:	a1cac083 	.word	0xa1cac083
 80091dc:	3febb645 	.word	0x3febb645
 80091e0:	3fe00000 	.word	0x3fe00000
 80091e4:	40020814 	.word	0x40020814
 80091e8:	42700000 	.word	0x42700000
		else
			pp->pp_lck = 0.0;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 80091f2:	f04f 0200 	mov.w	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]

		// Increase when no moving curve
		pp->pp_lck_count = pp->pp_lck_count + 1.0;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80091fe:	edd3 7a00 	vldr	s15, [r3]
 8009202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009210:	edc3 7a00 	vstr	s15, [r3]

		if(pp->pp_lck_count <= 60.0)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800921a:	edd3 7a00 	vldr	s15, [r3]
 800921e:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 80091e8 <PathPlan+0x2e78>
 8009222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922a:	d811      	bhi.n	8009250 <PathPlan+0x2ee0>
			pp->pp_lck_cal = pp->pp_lck_cal + pp->pp_lck;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8009232:	ed93 7a00 	vldr	s14, [r3]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800923c:	edd3 7a00 	vldr	s15, [r3]
 8009240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 800924a:	edc3 7a00 	vstr	s15, [r3]
 800924e:	e035      	b.n	80092bc <PathPlan+0x2f4c>
		else{
			pp->pp_lck_final = (pp->pp_lck_cal) / (pp->pp_lck_count) ;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 8009256:	edd3 6a00 	vldr	s13, [r3]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009260:	ed93 7a00 	vldr	s14, [r3]
 8009264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800926e:	edc3 7a00 	vstr	s15, [r3]
			if(pp->pp_lck_final >= 0.95)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f7f7 f964 	bl	8000548 <__aeabi_f2d>
 8009280:	f20f 43e4 	addw	r3, pc, #1252	; 0x4e4
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 fc3c 	bl	8000b04 <__aeabi_dcmpge>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <PathPlan+0x2f2c>
				pp->pp_lck_enb = 1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 800929a:	e003      	b.n	80092a4 <PathPlan+0x2f34>
			else
				pp->pp_lck_enb = 0;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
			pp->pp_lck_count = 0.0;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80092aa:	f04f 0200 	mov.w	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
			pp->pp_lck_cal   = 0.0;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	601a      	str	r2, [r3, #0]
		}


		if(((fabs(pp->error_x)+fabs(pp->error_y))/2) < pp->tol_xy && fabs(pp->error_z) < pp->tol_z){ // Already almost at destination
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80092c2:	eef0 7ae7 	vabs.f32	s15, s15
 80092c6:	ee17 0a90 	vmov	r0, s15
 80092ca:	f7f7 f93d 	bl	8000548 <__aeabi_f2d>
 80092ce:	4604      	mov	r4, r0
 80092d0:	460d      	mov	r5, r1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80092d8:	eef0 7ae7 	vabs.f32	s15, s15
 80092dc:	ee17 0a90 	vmov	r0, s15
 80092e0:	f7f7 f932 	bl	8000548 <__aeabi_f2d>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	f7f6 ffce 	bl	800028c <__adddf3>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4610      	mov	r0, r2
 80092f6:	4619      	mov	r1, r3
 80092f8:	f04f 0200 	mov.w	r2, #0
 80092fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009300:	f7f7 faa4 	bl	800084c <__aeabi_ddiv>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4614      	mov	r4, r2
 800930a:	461d      	mov	r5, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8009312:	4618      	mov	r0, r3
 8009314:	f7f7 f918 	bl	8000548 <__aeabi_f2d>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4620      	mov	r0, r4
 800931e:	4629      	mov	r1, r5
 8009320:	f7f7 fbdc 	bl	8000adc <__aeabi_dcmplt>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 84f3 	beq.w	8009d12 <PathPlan+0x39a2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8009332:	eeb0 7ae7 	vabs.f32	s14, s15
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	edd3 7ac3 	vldr	s15, [r3, #780]	; 0x30c
 800933c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009344:	f140 84e5 	bpl.w	8009d12 <PathPlan+0x39a2>
			if(pp->point_count < (pp->target_point - 2)){ // Checking is second last point or not
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009354:	3b02      	subs	r3, #2
 8009356:	429a      	cmp	r2, r3
 8009358:	f280 820c 	bge.w	8009774 <PathPlan+0x3404>
				if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	334a      	adds	r3, #74	; 0x4a
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	3304      	adds	r3, #4
 800936c:	edd3 7a00 	vldr	s15, [r3]
 8009370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009374:	eef4 7a47 	vcmp.f32	s15, s14
 8009378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937c:	f040 813d 	bne.w	80095fa <PathPlan+0x328a>
					if(pp->pp_lck_enb == 1){ // After < tol some time, lck_enb = 1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 8009386:	2b01      	cmp	r3, #1
 8009388:	f040 84c3 	bne.w	8009d12 <PathPlan+0x39a2>
						pp->point_count++; // Showing reached previous destination
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	331e      	adds	r3, #30
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	ed93 7a00 	vldr	s14, [r3]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	edd3 7a00 	vldr	s15, [r3]
 80093b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	332c      	adds	r3, #44	; 0x2c
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	3304      	adds	r3, #4
 80093ce:	ed93 7a00 	vldr	s14, [r3]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80093d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	333c      	adds	r3, #60	; 0x3c
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	ed93 7a00 	vldr	s14, [r3]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80093fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count] - *(pp->lsrx)){
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	331e      	adds	r3, #30
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	ed93 7a00 	vldr	s14, [r3]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	edd3 7a00 	vldr	s15, [r3]
 800941e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009422:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942a:	d03e      	beq.n	80094aa <PathPlan+0x313a>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_x[pp->point_count] - *(pp->lsrx)),
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	331e      	adds	r3, #30
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	ed93 7a00 	vldr	s14, [r3]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	edd3 7a00 	vldr	s15, [r3]
 8009446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800944a:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 800944e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_x[pp->point_count],
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	3388      	adds	r3, #136	; 0x88
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	3304      	adds	r3, #4
 8009466:	edd3 7a00 	vldr	s15, [r3]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009482:	4618      	mov	r0, r3
 8009484:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009488:	eeb0 3a65 	vmov.f32	s6, s11
 800948c:	eef0 2a46 	vmov.f32	s5, s12
 8009490:	eeb0 2a66 	vmov.f32	s4, s13
 8009494:	eef0 1a67 	vmov.f32	s3, s15
 8009498:	eeb0 1a47 	vmov.f32	s2, s14
 800949c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80094a0:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8009770 <PathPlan+0x3400>
 80094a4:	f7fb ff6c 	bl	8005380 <PIDGainInit>
 80094a8:	e028      	b.n	80094fc <PathPlan+0x318c>
							//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_x[pp->point_count],
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	3388      	adds	r3, #136	; 0x88
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	3304      	adds	r3, #4
 80094ba:	edd3 7a00 	vldr	s15, [r3]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80094d6:	4618      	mov	r0, r3
 80094d8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80094dc:	eeb0 3a46 	vmov.f32	s6, s12
 80094e0:	eef0 2a66 	vmov.f32	s5, s13
 80094e4:	eeb0 2a47 	vmov.f32	s4, s14
 80094e8:	eef0 1a67 	vmov.f32	s3, s15
 80094ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80094f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80094f4:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8009770 <PathPlan+0x3400>
 80094f8:	f7fb ff42 	bl	8005380 <PIDGainInit>
									pp->kd[0],
									30.0,
									&(pp->x));
							//								PIDGainSet(KE,1.0,&(pp->x));
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	332c      	adds	r3, #44	; 0x2c
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	3304      	adds	r3, #4
 800950c:	ed93 7a00 	vldr	s14, [r3]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800951a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009522:	d03d      	beq.n	80095a0 <PathPlan+0x3230>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	332c      	adds	r3, #44	; 0x2c
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	3304      	adds	r3, #4
 8009534:	ed93 7a00 	vldr	s14, [r3]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800953e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009542:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	3398      	adds	r3, #152	; 0x98
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	edd3 7a00 	vldr	s15, [r3]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	edd3 6aa7 	vldr	s13, [r3, #668]	; 0x29c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	ed93 6aa9 	vldr	s12, [r3, #676]	; 0x2a4
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	edd3 5aab 	vldr	s11, [r3, #684]	; 0x2ac
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009578:	4618      	mov	r0, r3
 800957a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 800957e:	eeb0 3a65 	vmov.f32	s6, s11
 8009582:	eef0 2a46 	vmov.f32	s5, s12
 8009586:	eeb0 2a66 	vmov.f32	s4, s13
 800958a:	eef0 1a67 	vmov.f32	s3, s15
 800958e:	eeb0 1a47 	vmov.f32	s2, s14
 8009592:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009596:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8009770 <PathPlan+0x3400>
 800959a:	f7fb fef1 	bl	8005380 <PIDGainInit>
 800959e:	e027      	b.n	80095f0 <PathPlan+0x3280>
							//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_y[pp->point_count],
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	3398      	adds	r3, #152	; 0x98
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	edd3 7a00 	vldr	s15, [r3]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	ed93 7aa7 	vldr	s14, [r3, #668]	; 0x29c
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	edd3 6aa9 	vldr	s13, [r3, #676]	; 0x2a4
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	ed93 6aab 	vldr	s12, [r3, #684]	; 0x2ac
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80095ca:	4618      	mov	r0, r3
 80095cc:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80095d0:	eeb0 3a46 	vmov.f32	s6, s12
 80095d4:	eef0 2a66 	vmov.f32	s5, s13
 80095d8:	eeb0 2a47 	vmov.f32	s4, s14
 80095dc:	eef0 1a67 	vmov.f32	s3, s15
 80095e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80095e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80095e8:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8009770 <PathPlan+0x3400>
 80095ec:	f7fb fec8 	bl	8005380 <PIDGainInit>
						//							PIDGainSet(KI,pp->ki[0],&(pp->y));
						//							PIDGainSet(KD,pp->kd[0],&(pp->x));
						//							PIDGainSet(KD,pp->kd[0],&(pp->y));
						//							PIDGainSet(KU,pp->ku_x[pp->point_count],&(pp->x));
						//							PIDGainSet(KU,pp->ku_y[pp->point_count],&(pp->y));
						pp->pp_lck_enb = 0;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80095f8:	e38b      	b.n	8009d12 <PathPlan+0x39a2>
					}
				}
				else{ // Already between tol, but point lck not enable
					pp->point_count++; // Assuming reached previous point
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	331e      	adds	r3, #30
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	ed93 7a00 	vldr	s14, [r3]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	edd3 7a00 	vldr	s15, [r3]
 8009622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
					pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	332c      	adds	r3, #44	; 0x2c
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	3304      	adds	r3, #4
 800963c:	ed93 7a00 	vldr	s14, [r3]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
					pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	333c      	adds	r3, #60	; 0x3c
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	ed93 7a00 	vldr	s14, [r3]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
					if(pp->target_x[pp->point_count] - *(pp->lsrx)){
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	331e      	adds	r3, #30
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	ed93 7a00 	vldr	s14, [r3]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	edd3 7a00 	vldr	s15, [r3]
 800968c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009690:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009698:	d01e      	beq.n	80096d8 <PathPlan+0x3368>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
						PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count] - *(pp->lsrx)),&(pp->x));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	331e      	adds	r3, #30
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	ed93 7a00 	vldr	s14, [r3]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	edd3 7a00 	vldr	s15, [r3]
 80096b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096b8:	eef0 7ae7 	vabs.f32	s15, s15
 80096bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80096ca:	4619      	mov	r1, r3
 80096cc:	eeb0 0a47 	vmov.f32	s0, s14
 80096d0:	2002      	movs	r0, #2
 80096d2:	f7fb fe88 	bl	80053e6 <PIDGainSet>
 80096d6:	e008      	b.n	80096ea <PathPlan+0x337a>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->x));
						PIDGainSet(KE,1.0,&(pp->x));
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80096de:	4619      	mov	r1, r3
 80096e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096e4:	2002      	movs	r0, #2
 80096e6:	f7fb fe7e 	bl	80053e6 <PIDGainSet>
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	332c      	adds	r3, #44	; 0x2c
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	3304      	adds	r3, #4
 80096fa:	ed93 7a00 	vldr	s14, [r3]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009708:	eef5 7a40 	vcmp.f32	s15, #0.0
 800970c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009710:	d01e      	beq.n	8009750 <PathPlan+0x33e0>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
						PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	332c      	adds	r3, #44	; 0x2c
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	3304      	adds	r3, #4
 8009722:	ed93 7a00 	vldr	s14, [r3]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800972c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009730:	eef0 7ae7 	vabs.f32	s15, s15
 8009734:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009742:	4619      	mov	r1, r3
 8009744:	eeb0 0a47 	vmov.f32	s0, s14
 8009748:	2002      	movs	r0, #2
 800974a:	f7fb fe4c 	bl	80053e6 <PIDGainSet>
 800974e:	e2e0      	b.n	8009d12 <PathPlan+0x39a2>
//									pp->kp[0],
//									pp->ki[0],
//									pp->kd[0],
//									30.0,
//									&(pp->y));
						PIDGainSet(KE,1.0,&(pp->y));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009756:	4619      	mov	r1, r3
 8009758:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800975c:	2002      	movs	r0, #2
 800975e:	f7fb fe42 	bl	80053e6 <PIDGainSet>
 8009762:	e2d6      	b.n	8009d12 <PathPlan+0x39a2>
 8009764:	f3af 8000 	nop.w
 8009768:	66666666 	.word	0x66666666
 800976c:	3fee6666 	.word	0x3fee6666
 8009770:	3ba3d70a 	.word	0x3ba3d70a
					}
				}
			} else if(pp->point_count == (pp->target_point - 2)){ // Reached second last going last point
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009780:	3b02      	subs	r3, #2
 8009782:	429a      	cmp	r2, r3
 8009784:	f040 8273 	bne.w	8009c6e <PathPlan+0x38fe>
				if(pp->target_accurate[pp->point_count] == 1.0){ // point_lock enable
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	334a      	adds	r3, #74	; 0x4a
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	3304      	adds	r3, #4
 8009798:	edd3 7a00 	vldr	s15, [r3]
 800979c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097a0:	eef4 7a47 	vcmp.f32	s15, s14
 80097a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a8:	f040 813d 	bne.w	8009a26 <PathPlan+0x36b6>
					if(pp->pp_lck_enb == 1){
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	f040 82ad 	bne.w	8009d12 <PathPlan+0x39a2>
						pp->point_count++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
						pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	331e      	adds	r3, #30
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	ed93 7a00 	vldr	s14, [r3]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
						pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	332c      	adds	r3, #44	; 0x2c
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	3304      	adds	r3, #4
 80097fa:	ed93 7a00 	vldr	s14, [r3]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
						pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	333c      	adds	r3, #60	; 0x3c
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	ed93 7a00 	vldr	s14, [r3]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
						if(pp->target_x[pp->point_count] - *(pp->lsrx)){
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	331e      	adds	r3, #30
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	ed93 7a00 	vldr	s14, [r3]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	edd3 7a00 	vldr	s15, [r3]
 800984a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800984e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009856:	d03e      	beq.n	80098d6 <PathPlan+0x3566>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_x[pp->point_count] - *(pp->lsrx)),
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	331e      	adds	r3, #30
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	ed93 7a00 	vldr	s14, [r3]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	edd3 7a00 	vldr	s15, [r3]
 8009872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009876:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 800987a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800987e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_x[pp->point_count],
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	3388      	adds	r3, #136	; 0x88
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	edd3 7a00 	vldr	s15, [r3]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80098ae:	4618      	mov	r0, r3
 80098b0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80098b4:	eeb0 3a65 	vmov.f32	s6, s11
 80098b8:	eef0 2a46 	vmov.f32	s5, s12
 80098bc:	eeb0 2a66 	vmov.f32	s4, s13
 80098c0:	eef0 1a67 	vmov.f32	s3, s15
 80098c4:	eeb0 1a47 	vmov.f32	s2, s14
 80098c8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80098cc:	ed1f 0a58 	vldr	s0, [pc, #-352]	; 8009770 <PathPlan+0x3400>
 80098d0:	f7fb fd56 	bl	8005380 <PIDGainInit>
 80098d4:	e028      	b.n	8009928 <PathPlan+0x35b8>
							//								PIDGainSet(KE,1.0/fabs(pp->target_x[pp->point_count]-pp->real_x),&(pp->x));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_x[pp->point_count],
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	3388      	adds	r3, #136	; 0x88
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	4413      	add	r3, r2
 80098e4:	3304      	adds	r3, #4
 80098e6:	edd3 7a00 	vldr	s15, [r3]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009902:	4618      	mov	r0, r3
 8009904:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009908:	eeb0 3a46 	vmov.f32	s6, s12
 800990c:	eef0 2a66 	vmov.f32	s5, s13
 8009910:	eeb0 2a47 	vmov.f32	s4, s14
 8009914:	eef0 1a67 	vmov.f32	s3, s15
 8009918:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800991c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009920:	ed1f 0a6d 	vldr	s0, [pc, #-436]	; 8009770 <PathPlan+0x3400>
 8009924:	f7fb fd2c 	bl	8005380 <PIDGainInit>
									pp->kd[1],
									30.0,
									&(pp->x));
							//								PIDGainSet(KE,1.0,&(pp->x));
						}
						if(pp->target_y[pp->point_count]-pp->real_y){
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	332c      	adds	r3, #44	; 0x2c
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	3304      	adds	r3, #4
 8009938:	ed93 7a00 	vldr	s14, [r3]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009946:	eef5 7a40 	vcmp.f32	s15, #0.0
 800994a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800994e:	d03d      	beq.n	80099cc <PathPlan+0x365c>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	332c      	adds	r3, #44	; 0x2c
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	3304      	adds	r3, #4
 8009960:	ed93 7a00 	vldr	s14, [r3]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800996a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800996e:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	3398      	adds	r3, #152	; 0x98
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	edd3 7a00 	vldr	s15, [r3]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80099a4:	4618      	mov	r0, r3
 80099a6:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80099aa:	eeb0 3a65 	vmov.f32	s6, s11
 80099ae:	eef0 2a46 	vmov.f32	s5, s12
 80099b2:	eeb0 2a66 	vmov.f32	s4, s13
 80099b6:	eef0 1a67 	vmov.f32	s3, s15
 80099ba:	eeb0 1a47 	vmov.f32	s2, s14
 80099be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80099c2:	ed1f 0a95 	vldr	s0, [pc, #-596]	; 8009770 <PathPlan+0x3400>
 80099c6:	f7fb fcdb 	bl	8005380 <PIDGainInit>
 80099ca:	e027      	b.n	8009a1c <PathPlan+0x36ac>
							//								PIDGainSet(KE,1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),&(pp->y));
						} else {
							PIDGainInit(0.005,
									1.0,
									1.0,
									pp->ku_y[pp->point_count],
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	3398      	adds	r3, #152	; 0x98
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4413      	add	r3, r2
 80099da:	edd3 7a00 	vldr	s15, [r3]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 80099f6:	4618      	mov	r0, r3
 80099f8:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 80099fc:	eeb0 3a46 	vmov.f32	s6, s12
 8009a00:	eef0 2a66 	vmov.f32	s5, s13
 8009a04:	eeb0 2a47 	vmov.f32	s4, s14
 8009a08:	eef0 1a67 	vmov.f32	s3, s15
 8009a0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009a10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009a14:	ed1f 0aaa 	vldr	s0, [pc, #-680]	; 8009770 <PathPlan+0x3400>
 8009a18:	f7fb fcb2 	bl	8005380 <PIDGainInit>
									pp->kd[1],
									30.0,
									&(pp->y));
							//								PIDGainSet(KE,1.0,&(pp->y));
						}
						pp->pp_lck_enb = 0;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8009a24:	e175      	b.n	8009d12 <PathPlan+0x39a2>
					}
				}
				else{
					pp->point_count++;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
					if(!pp->right_lsr)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009a3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d112      	bne.n	8009a6a <PathPlan+0x36fa>
						pp->error_x = pp->target_x[pp->point_count] - *(pp->lsrx);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	331e      	adds	r3, #30
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	ed93 7a00 	vldr	s14, [r3]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	edd3 7a00 	vldr	s15, [r3]
 8009a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
 8009a68:	e013      	b.n	8009a92 <PathPlan+0x3722>
					else
						pp->error_x = -(pp->target_x[pp->point_count] - *(pp->lsrR));
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	331e      	adds	r3, #30
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	ed93 7a00 	vldr	s14, [r3]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	edd3 7a00 	vldr	s15, [r3]
 8009a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a88:	eef1 7a67 	vneg.f32	s15, s15
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	edc3 7ab0 	vstr	s15, [r3, #704]	; 0x2c0
					pp->error_y = pp->target_y[pp->point_count] - pp->real_y;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	332c      	adds	r3, #44	; 0x2c
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	ed93 7a00 	vldr	s14, [r3]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	edc3 7ab1 	vstr	s15, [r3, #708]	; 0x2c4
					pp->error_z = pp->target_z[pp->point_count] - pp->real_z;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	333c      	adds	r3, #60	; 0x3c
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	ed93 7a00 	vldr	s14, [r3]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8009ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	edc3 7ab2 	vstr	s15, [r3, #712]	; 0x2c8
					if(pp->error_x){
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009ade:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae6:	d02b      	beq.n	8009b40 <PathPlan+0x37d0>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->error_x),
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009aee:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009b18:	4618      	mov	r0, r3
 8009b1a:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009b1e:	eeb0 3a65 	vmov.f32	s6, s11
 8009b22:	eef0 2a46 	vmov.f32	s5, s12
 8009b26:	eeb0 2a66 	vmov.f32	s4, s13
 8009b2a:	eef0 1a67 	vmov.f32	s3, s15
 8009b2e:	eeb0 1a47 	vmov.f32	s2, s14
 8009b32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009b36:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8009e70 <PathPlan+0x3b00>
 8009b3a:	f7fb fc21 	bl	8005380 <PIDGainInit>
 8009b3e:	e021      	b.n	8009b84 <PathPlan+0x3814>
									pp->ki[1],
									pp->kd[1],
									30.0,
									&(pp->x));
					} else {
							PIDGainInit(0.005,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	edd3 7a89 	vldr	s15, [r3, #548]	; 0x224
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009b5e:	4618      	mov	r0, r3
 8009b60:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009b64:	eeb0 3a46 	vmov.f32	s6, s12
 8009b68:	eef0 2a66 	vmov.f32	s5, s13
 8009b6c:	eeb0 2a47 	vmov.f32	s4, s14
 8009b70:	eef0 1a67 	vmov.f32	s3, s15
 8009b74:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009b78:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009b7c:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8009e70 <PathPlan+0x3b00>
 8009b80:	f7fb fbfe 	bl	8005380 <PIDGainInit>
									pp->ki[1],
									pp->kd[1],
									30.0,
									&(pp->x));
					}
					if(pp->target_y[pp->point_count]-pp->real_y){
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	332c      	adds	r3, #44	; 0x2c
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	3304      	adds	r3, #4
 8009b94:	ed93 7a00 	vldr	s14, [r3]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ba2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009baa:	d03d      	beq.n	8009c28 <PathPlan+0x38b8>
							PIDGainInit(0.005,
									1.0,
									1.0/fabs(pp->target_y[pp->point_count]-pp->real_y),
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	332c      	adds	r3, #44	; 0x2c
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	3304      	adds	r3, #4
 8009bbc:	ed93 7a00 	vldr	s14, [r3]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bca:	eef0 7ae7 	vabs.f32	s15, s15
							PIDGainInit(0.005,
 8009bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
									pp->ku_y[pp->point_count],
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
							PIDGainInit(0.005,
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	3398      	adds	r3, #152	; 0x98
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	edd3 7a00 	vldr	s15, [r3]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	edd3 6aa8 	vldr	s13, [r3, #672]	; 0x2a0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	ed93 6aaa 	vldr	s12, [r3, #680]	; 0x2a8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	edd3 5aac 	vldr	s11, [r3, #688]	; 0x2b0
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009c00:	4618      	mov	r0, r3
 8009c02:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009c06:	eeb0 3a65 	vmov.f32	s6, s11
 8009c0a:	eef0 2a46 	vmov.f32	s5, s12
 8009c0e:	eeb0 2a66 	vmov.f32	s4, s13
 8009c12:	eef0 1a67 	vmov.f32	s3, s15
 8009c16:	eeb0 1a47 	vmov.f32	s2, s14
 8009c1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009c1e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8009e70 <PathPlan+0x3b00>
 8009c22:	f7fb fbad 	bl	8005380 <PIDGainInit>
 8009c26:	e074      	b.n	8009d12 <PathPlan+0x39a2>
									pp->ki[1],
									pp->kd[1],
									30.0,
									&(pp->y));
					} else {
							PIDGainInit(0.005,
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	edd3 7a98 	vldr	s15, [r3, #608]	; 0x260
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	ed93 7aa8 	vldr	s14, [r3, #672]	; 0x2a0
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	edd3 6aaa 	vldr	s13, [r3, #680]	; 0x2a8
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	ed93 6aac 	vldr	s12, [r3, #688]	; 0x2b0
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009c46:	4618      	mov	r0, r3
 8009c48:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8009c4c:	eeb0 3a46 	vmov.f32	s6, s12
 8009c50:	eef0 2a66 	vmov.f32	s5, s13
 8009c54:	eeb0 2a47 	vmov.f32	s4, s14
 8009c58:	eef0 1a67 	vmov.f32	s3, s15
 8009c5c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8009c60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8009c64:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8009e70 <PathPlan+0x3b00>
 8009c68:	f7fb fb8a 	bl	8005380 <PIDGainInit>
 8009c6c:	e051      	b.n	8009d12 <PathPlan+0x39a2>
									pp->kd[1],
									30.0,
									&(pp->y));
					}
				}
			}else if(fabs(pp->error_x)<pp->f_tol_xy[0] && fabs(pp->error_y)<pp->f_tol_xy[0] && (int)pp->error_z<=pp->f_tol_z[0]){ // Reached last point
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 8009c74:	eeb0 7ae7 	vabs.f32	s14, s15
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 8009c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c86:	d544      	bpl.n	8009d12 <PathPlan+0x39a2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8009c8e:	eeb0 7ae7 	vabs.f32	s14, s15
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	edd3 7ac4 	vldr	s15, [r3, #784]	; 0x310
 8009c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca0:	d537      	bpl.n	8009d12 <PathPlan+0x39a2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8009ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	edd3 7ad3 	vldr	s15, [r3, #844]	; 0x34c
 8009cb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbe:	d828      	bhi.n	8009d12 <PathPlan+0x39a2>
				led3 = 0;
 8009cc0:	4a6c      	ldr	r2, [pc, #432]	; (8009e74 <PathPlan+0x3b04>)
 8009cc2:	7853      	ldrb	r3, [r2, #1]
 8009cc4:	f36f 13c7 	bfc	r3, #7, #1
 8009cc8:	7053      	strb	r3, [r2, #1]
				PIDDelayInit(&(pp->x));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7fb fcda 	bl	800568a <PIDDelayInit>
				PIDDelayInit(&(pp->y));
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fb fcd4 	bl	800568a <PIDDelayInit>
				PIDDelayInit(&(pp->z));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fb fcce 	bl	800568a <PIDDelayInit>
				pp->pp_start=0;
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8009cf4:	f36f 0300 	bfc	r3, #0, #1
 8009cf8:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
				pp->lsr_start = 0;
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8009d02:	f36f 1304 	bfc	r3, #4, #1
 8009d06:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
				pp->pp_lck_enb = 0;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
//					pp->lsr_start = 0;
//				}
			}
		}

		if(pp->lsr_start){
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009d18:	f003 0310 	and.w	r3, r3, #16
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 8409 	beq.w	800a536 <PathPlan+0x41c6>

			pp->dx = pp->error_x;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	665a      	str	r2, [r3, #100]	; 0x64
			pp->dy = pp->target_y[pp->point_count] - pp->prev_real_y;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	332c      	adds	r3, #44	; 0x2c
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	ed93 7a00 	vldr	s14, [r3]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

			pp->rotate=0;
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 8009d58:	f36f 03c3 	bfc	r3, #3, #1
 8009d5c:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc

			if ((pp->dx != 0.0 || pp->dx != -0.0)&&(pp->dy != -0.0 || pp->dy != 0.0)){
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009d66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	d107      	bne.n	8009d80 <PathPlan+0x3a10>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009d76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7e:	d021      	beq.n	8009dc4 <PathPlan+0x3a54>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009d86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8e:	d107      	bne.n	8009da0 <PathPlan+0x3a30>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009d96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9e:	d011      	beq.n	8009dc4 <PathPlan+0x3a54>
				pp->heading = atan2f(pp->dy, pp->dx);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8009dac:	eef0 0a47 	vmov.f32	s1, s14
 8009db0:	eeb0 0a67 	vmov.f32	s0, s15
 8009db4:	f01a f94a 	bl	802404c <atan2f>
 8009db8:	eef0 7a40 	vmov.f32	s15, s0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8009dc2:	e078      	b.n	8009eb6 <PathPlan+0x3b46>
			} else {
				if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy < 0.0) { // Backward
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009dca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd2:	d007      	beq.n	8009de4 <PathPlan+0x3a74>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009dda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de2:	d10b      	bne.n	8009dfc <PathPlan+0x3a8c>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df2:	d503      	bpl.n	8009dfc <PathPlan+0x3a8c>
					pp->heading = -1.5708;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a20      	ldr	r2, [pc, #128]	; (8009e78 <PathPlan+0x3b08>)
 8009df8:	66da      	str	r2, [r3, #108]	; 0x6c
 8009dfa:	e05c      	b.n	8009eb6 <PathPlan+0x3b46>
				} else if((pp->dx == 0.0 || pp->dx == -0.0) && pp->dy > 0.0) { // Forward
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0a:	d007      	beq.n	8009e1c <PathPlan+0x3aac>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1a:	d10b      	bne.n	8009e34 <PathPlan+0x3ac4>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2a:	dd03      	ble.n	8009e34 <PathPlan+0x3ac4>
					pp->heading = 1.5708;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a13      	ldr	r2, [pc, #76]	; (8009e7c <PathPlan+0x3b0c>)
 8009e30:	66da      	str	r2, [r3, #108]	; 0x6c
 8009e32:	e040      	b.n	8009eb6 <PathPlan+0x3b46>
				} else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx > 0){ // Right
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e42:	d007      	beq.n	8009e54 <PathPlan+0x3ae4>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e52:	d115      	bne.n	8009e80 <PathPlan+0x3b10>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009e5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	dd0d      	ble.n	8009e80 <PathPlan+0x3b10>
					pp->heading = 0.0;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f04f 0200 	mov.w	r2, #0
 8009e6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009e6c:	e023      	b.n	8009eb6 <PathPlan+0x3b46>
 8009e6e:	bf00      	nop
 8009e70:	3ba3d70a 	.word	0x3ba3d70a
 8009e74:	40020814 	.word	0x40020814
 8009e78:	bfc90ff9 	.word	0xbfc90ff9
 8009e7c:	3fc90ff9 	.word	0x3fc90ff9
//						pp->rotate = 1;
				}
				else if((pp->dy == 0.0 || pp->dy == -0.0) && pp->dx < 0) // Left
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8e:	d007      	beq.n	8009ea0 <PathPlan+0x3b30>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8009e96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9e:	d10a      	bne.n	8009eb6 <PathPlan+0x3b46>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8009ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	d502      	bpl.n	8009eb6 <PathPlan+0x3b46>
				{
					pp->heading = M_PI;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4ad7      	ldr	r2, [pc, #860]	; (800a210 <PathPlan+0x3ea0>)
 8009eb4:	66da      	str	r2, [r3, #108]	; 0x6c
				}
			}

			pp->vx  = pp->target_vel[pp->point_count] * cosf(pp->heading);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	3378      	adds	r3, #120	; 0x78
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	ed93 8a00 	vldr	s16, [r3]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8009ece:	eeb0 0a67 	vmov.f32	s0, s15
 8009ed2:	f01a f831 	bl	8023f38 <cosf>
 8009ed6:	eef0 7a40 	vmov.f32	s15, s0
 8009eda:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			pp->vy  = pp->target_vel[pp->point_count] * sinf(pp->heading);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	3378      	adds	r3, #120	; 0x78
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	ed93 8a00 	vldr	s16, [r3]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8009efc:	eeb0 0a67 	vmov.f32	s0, s15
 8009f00:	f01a f862 	bl	8023fc8 <sinf>
 8009f04:	eef0 7a40 	vmov.f32	s15, s0
 8009f08:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

			if(pp->rotate){
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <PathPlan+0x3bc2>
				pp->vx = pp->vy = 0.0;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	675a      	str	r2, [r3, #116]	; 0x74
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	671a      	str	r2, [r3, #112]	; 0x70
			}

			PID(&(pp->x));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fb fbc4 	bl	80056c6 <PID>
			PID(&(pp->y));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 7379 	add.w	r3, r3, #996	; 0x3e4
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fb fbbe 	bl	80056c6 <PID>
			PID(&(pp->z));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fb fbb8 	bl	80056c6 <PID>

			pp->rux =   pp->outx*cosf(pp->real_z_rad) - pp->outy*sinf(pp->real_z_rad);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009f62:	eeb0 0a67 	vmov.f32	s0, s15
 8009f66:	f019 ffe7 	bl	8023f38 <cosf>
 8009f6a:	eef0 7a40 	vmov.f32	s15, s0
 8009f6e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f82:	f01a f821 	bl	8023fc8 <sinf>
 8009f86:	eef0 7a40 	vmov.f32	s15, s0
 8009f8a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8009f8e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	edc3 7ab6 	vstr	s15, [r3, #728]	; 0x2d8
			pp->ruy =   pp->outx*sinf(pp->real_z_rad) + pp->outy*cosf(pp->real_z_rad);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	ed93 8ab3 	vldr	s16, [r3, #716]	; 0x2cc
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8009fa8:	f01a f80e 	bl	8023fc8 <sinf>
 8009fac:	eef0 7a40 	vmov.f32	s15, s0
 8009fb0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	edd3 8ab4 	vldr	s17, [r3, #720]	; 0x2d0
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8009fc4:	f019 ffb8 	bl	8023f38 <cosf>
 8009fc8:	eef0 7a40 	vmov.f32	s15, s0
 8009fcc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8009fd0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	edc3 7ab7 	vstr	s15, [r3, #732]	; 0x2dc
			pp->rvx =   pp->vx*cosf(pp->real_z_rad) - pp->vy*sinf(pp->real_z_rad);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8009fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8009fea:	f019 ffa5 	bl	8023f38 <cosf>
 8009fee:	eef0 7a40 	vmov.f32	s15, s0
 8009ff2:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a002:	eeb0 0a67 	vmov.f32	s0, s15
 800a006:	f019 ffdf 	bl	8023fc8 <sinf>
 800a00a:	eef0 7a40 	vmov.f32	s15, s0
 800a00e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a012:	ee78 7a67 	vsub.f32	s15, s16, s15
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	edc3 7ab8 	vstr	s15, [r3, #736]	; 0x2e0
			pp->rvy =   pp->vx*sinf(pp->real_z_rad) + pp->vy*cosf(pp->real_z_rad);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	ed93 8a1c 	vldr	s16, [r3, #112]	; 0x70
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a028:	eeb0 0a67 	vmov.f32	s0, s15
 800a02c:	f019 ffcc 	bl	8023fc8 <sinf>
 800a030:	eef0 7a40 	vmov.f32	s15, s0
 800a034:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	edd3 8a1d 	vldr	s17, [r3, #116]	; 0x74
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800a044:	eeb0 0a67 	vmov.f32	s0, s15
 800a048:	f019 ff76 	bl	8023f38 <cosf>
 800a04c:	eef0 7a40 	vmov.f32	s15, s0
 800a050:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800a054:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	edc3 7ab9 	vstr	s15, [r3, #740]	; 0x2e4

			if(pp->base_shape== fwd_omni){
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 800a064:	2b02      	cmp	r3, #2
 800a066:	f040 8160 	bne.w	800a32a <PathPlan+0x3fba>
					pp->u1 = 0.707107 * ( pp->ruy + pp->rux) + (pp->outz * 1.0);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a07a:	ee17 0a90 	vmov	r0, s15
 800a07e:	f7f6 fa63 	bl	8000548 <__aeabi_f2d>
 800a082:	a361      	add	r3, pc, #388	; (adr r3, 800a208 <PathPlan+0x3e98>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 fab6 	bl	80005f8 <__aeabi_dmul>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	4614      	mov	r4, r2
 800a092:	461d      	mov	r5, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7f6 fa54 	bl	8000548 <__aeabi_f2d>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 f8f0 	bl	800028c <__adddf3>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f7f6 fd98 	bl	8000be8 <__aeabi_d2f>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
					pp->u2 = 0.707107 * ( pp->ruy - pp->rux) - (pp->outz * 1.0);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0d0:	ee17 0a90 	vmov	r0, s15
 800a0d4:	f7f6 fa38 	bl	8000548 <__aeabi_f2d>
 800a0d8:	a34b      	add	r3, pc, #300	; (adr r3, 800a208 <PathPlan+0x3e98>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4614      	mov	r4, r2
 800a0e8:	461d      	mov	r5, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7f6 fa29 	bl	8000548 <__aeabi_f2d>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	f7f6 f8c3 	bl	8000288 <__aeabi_dsub>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	4610      	mov	r0, r2
 800a108:	4619      	mov	r1, r3
 800a10a:	f7f6 fd6d 	bl	8000be8 <__aeabi_d2f>
 800a10e:	4602      	mov	r2, r0
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
					pp->u3 = 0.707107 * ( pp->ruy - pp->rux) + (pp->outz * 1.0);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a122:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a126:	ee17 0a90 	vmov	r0, s15
 800a12a:	f7f6 fa0d 	bl	8000548 <__aeabi_f2d>
 800a12e:	a336      	add	r3, pc, #216	; (adr r3, 800a208 <PathPlan+0x3e98>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f7f6 fa60 	bl	80005f8 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4614      	mov	r4, r2
 800a13e:	461d      	mov	r5, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a146:	4618      	mov	r0, r3
 800a148:	f7f6 f9fe 	bl	8000548 <__aeabi_f2d>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4620      	mov	r0, r4
 800a152:	4629      	mov	r1, r5
 800a154:	f7f6 f89a 	bl	800028c <__adddf3>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4610      	mov	r0, r2
 800a15e:	4619      	mov	r1, r3
 800a160:	f7f6 fd42 	bl	8000be8 <__aeabi_d2f>
 800a164:	4602      	mov	r2, r0
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
					pp->u4 = 0.707107 * ( pp->ruy + pp->rux) - (pp->outz * 1.0);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	ed93 7ab7 	vldr	s14, [r3, #732]	; 0x2dc
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800a178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a17c:	ee17 0a90 	vmov	r0, s15
 800a180:	f7f6 f9e2 	bl	8000548 <__aeabi_f2d>
 800a184:	a320      	add	r3, pc, #128	; (adr r3, 800a208 <PathPlan+0x3e98>)
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	f7f6 fa35 	bl	80005f8 <__aeabi_dmul>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4614      	mov	r4, r2
 800a194:	461d      	mov	r5, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7f6 f9d3 	bl	8000548 <__aeabi_f2d>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 f86d 	bl	8000288 <__aeabi_dsub>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	f7f6 fd17 	bl	8000be8 <__aeabi_d2f>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
//				pp->u2 = -pp->outz * 1.0;
//				pp->u3 = (pp->outz * 1.0);
//				pp->u4 = -(pp->outz * 1.0);


				pp->v1 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u1;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a1ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1d2:	ee17 0a90 	vmov	r0, s15
 800a1d6:	f7f6 f9b7 	bl	8000548 <__aeabi_f2d>
 800a1da:	a30b      	add	r3, pc, #44	; (adr r3, 800a208 <PathPlan+0x3e98>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 fa0a 	bl	80005f8 <__aeabi_dmul>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	461d      	mov	r5, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f6 f9a8 	bl	8000548 <__aeabi_f2d>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7f6 f844 	bl	800028c <__adddf3>
 800a204:	4602      	mov	r2, r0
 800a206:	e005      	b.n	800a214 <PathPlan+0x3ea4>
 800a208:	dbf8b9bb 	.word	0xdbf8b9bb
 800a20c:	3fe6a09e 	.word	0x3fe6a09e
 800a210:	40490fdb 	.word	0x40490fdb
 800a214:	460b      	mov	r3, r1
 800a216:	4610      	mov	r0, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	f7f6 fce5 	bl	8000be8 <__aeabi_d2f>
 800a21e:	4602      	mov	r2, r0
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
				pp->v2 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u2;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a232:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a236:	ee17 0a90 	vmov	r0, s15
 800a23a:	f7f6 f985 	bl	8000548 <__aeabi_f2d>
 800a23e:	a3c5      	add	r3, pc, #788	; (adr r3, 800a554 <PathPlan+0x41e4>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f6 f9d8 	bl	80005f8 <__aeabi_dmul>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4614      	mov	r4, r2
 800a24e:	461d      	mov	r5, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a256:	4618      	mov	r0, r3
 800a258:	f7f6 f976 	bl	8000548 <__aeabi_f2d>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f812 	bl	800028c <__adddf3>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4610      	mov	r0, r2
 800a26e:	4619      	mov	r1, r3
 800a270:	f7f6 fcba 	bl	8000be8 <__aeabi_d2f>
 800a274:	4602      	mov	r2, r0
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
				pp->v3 = 0.707107 * ( pp->rvy - pp->rvx) + pp->u3;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a28c:	ee17 0a90 	vmov	r0, s15
 800a290:	f7f6 f95a 	bl	8000548 <__aeabi_f2d>
 800a294:	a3af      	add	r3, pc, #700	; (adr r3, 800a554 <PathPlan+0x41e4>)
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f7f6 f9ad 	bl	80005f8 <__aeabi_dmul>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	461d      	mov	r5, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7f6 f94b 	bl	8000548 <__aeabi_f2d>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f5 ffe7 	bl	800028c <__adddf3>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	f7f6 fc8f 	bl	8000be8 <__aeabi_d2f>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
				pp->v4 = 0.707107 * ( pp->rvy + pp->rvx) + pp->u4;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800a2de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2e2:	ee17 0a90 	vmov	r0, s15
 800a2e6:	f7f6 f92f 	bl	8000548 <__aeabi_f2d>
 800a2ea:	a39a      	add	r3, pc, #616	; (adr r3, 800a554 <PathPlan+0x41e4>)
 800a2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f0:	f7f6 f982 	bl	80005f8 <__aeabi_dmul>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	461d      	mov	r5, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800a302:	4618      	mov	r0, r3
 800a304:	f7f6 f920 	bl	8000548 <__aeabi_f2d>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4620      	mov	r0, r4
 800a30e:	4629      	mov	r1, r5
 800a310:	f7f5 ffbc 	bl	800028c <__adddf3>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4610      	mov	r0, r2
 800a31a:	4619      	mov	r1, r3
 800a31c:	f7f6 fc64 	bl	8000be8 <__aeabi_d2f>
 800a320:	4602      	mov	r2, r0
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
//		}




}
 800a328:	e105      	b.n	800a536 <PathPlan+0x41c6>
			} else if(pp->base_shape== 1){
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 800a330:	2b01      	cmp	r3, #1
 800a332:	f040 8100 	bne.w	800a536 <PathPlan+0x41c6>
				pp->u1 = (0.866 * pp->ruy) - (0.5 * pp->rux) + (pp->outz * 1.0);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7f6 f903 	bl	8000548 <__aeabi_f2d>
 800a342:	a381      	add	r3, pc, #516	; (adr r3, 800a548 <PathPlan+0x41d8>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4614      	mov	r4, r2
 800a352:	461d      	mov	r5, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f6 f8f4 	bl	8000548 <__aeabi_f2d>
 800a360:	f04f 0200 	mov.w	r2, #0
 800a364:	4b7a      	ldr	r3, [pc, #488]	; (800a550 <PathPlan+0x41e0>)
 800a366:	f7f6 f947 	bl	80005f8 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f5 ff89 	bl	8000288 <__aeabi_dsub>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4614      	mov	r4, r2
 800a37c:	461d      	mov	r5, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a384:	4618      	mov	r0, r3
 800a386:	f7f6 f8df 	bl	8000548 <__aeabi_f2d>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff7b 	bl	800028c <__adddf3>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4610      	mov	r0, r2
 800a39c:	4619      	mov	r1, r3
 800a39e:	f7f6 fc23 	bl	8000be8 <__aeabi_d2f>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
				pp->u2 = (0.866 * pp->ruy) + (0.5 * pp->rux) - (pp->outz * 1.0);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7f6 f8c9 	bl	8000548 <__aeabi_f2d>
 800a3b6:	a364      	add	r3, pc, #400	; (adr r3, 800a548 <PathPlan+0x41d8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f7f6 f91c 	bl	80005f8 <__aeabi_dmul>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	461d      	mov	r5, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f6 f8ba 	bl	8000548 <__aeabi_f2d>
 800a3d4:	f04f 0200 	mov.w	r2, #0
 800a3d8:	4b5d      	ldr	r3, [pc, #372]	; (800a550 <PathPlan+0x41e0>)
 800a3da:	f7f6 f90d 	bl	80005f8 <__aeabi_dmul>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f7f5 ff51 	bl	800028c <__adddf3>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	461d      	mov	r5, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7f6 f8a5 	bl	8000548 <__aeabi_f2d>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4620      	mov	r0, r4
 800a404:	4629      	mov	r1, r5
 800a406:	f7f5 ff3f 	bl	8000288 <__aeabi_dsub>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4610      	mov	r0, r2
 800a410:	4619      	mov	r1, r3
 800a412:	f7f6 fbe9 	bl	8000be8 <__aeabi_d2f>
 800a416:	4602      	mov	r2, r0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
				pp->u3 = 1.0 * pp->rux + (pp->outz * 1.0);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800a42a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	edc3 7abc 	vstr	s15, [r3, #752]	; 0x2f0
				pp->v1 = (0.866 * pp->rvy) - (0.5 * pp->rvx) + pp->u1;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 f884 	bl	8000548 <__aeabi_f2d>
 800a440:	a341      	add	r3, pc, #260	; (adr r3, 800a548 <PathPlan+0x41d8>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4614      	mov	r4, r2
 800a450:	461d      	mov	r5, r3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800a458:	4618      	mov	r0, r3
 800a45a:	f7f6 f875 	bl	8000548 <__aeabi_f2d>
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	4b3b      	ldr	r3, [pc, #236]	; (800a550 <PathPlan+0x41e0>)
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4620      	mov	r0, r4
 800a46e:	4629      	mov	r1, r5
 800a470:	f7f5 ff0a 	bl	8000288 <__aeabi_dsub>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4614      	mov	r4, r2
 800a47a:	461d      	mov	r5, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a482:	4618      	mov	r0, r3
 800a484:	f7f6 f860 	bl	8000548 <__aeabi_f2d>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4620      	mov	r0, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f5 fefc 	bl	800028c <__adddf3>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4610      	mov	r0, r2
 800a49a:	4619      	mov	r1, r3
 800a49c:	f7f6 fba4 	bl	8000be8 <__aeabi_d2f>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
				pp->v2 = (0.866 * pp->rvy) + (0.5 * pp->rvx) + pp->u2;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f6 f84a 	bl	8000548 <__aeabi_f2d>
 800a4b4:	a324      	add	r3, pc, #144	; (adr r3, 800a548 <PathPlan+0x41d8>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f6 f89d 	bl	80005f8 <__aeabi_dmul>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4614      	mov	r4, r2
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7f6 f83b 	bl	8000548 <__aeabi_f2d>
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <PathPlan+0x41e0>)
 800a4d8:	f7f6 f88e 	bl	80005f8 <__aeabi_dmul>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	f7f5 fed2 	bl	800028c <__adddf3>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	461d      	mov	r5, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f6 f826 	bl	8000548 <__aeabi_f2d>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4620      	mov	r0, r4
 800a502:	4629      	mov	r1, r5
 800a504:	f7f5 fec2 	bl	800028c <__adddf3>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4610      	mov	r0, r2
 800a50e:	4619      	mov	r1, r3
 800a510:	f7f6 fb6a 	bl	8000be8 <__aeabi_d2f>
 800a514:	4602      	mov	r2, r0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
				pp->v3 = 1.0 * pp->rvx + pp->u3;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	ed93 7ab8 	vldr	s14, [r3, #736]	; 0x2e0
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 800a528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	edc3 7ac0 	vstr	s15, [r3, #768]	; 0x300
}
 800a532:	e000      	b.n	800a536 <PathPlan+0x41c6>
		if(pp->pp_crv_radius[pp->point_count]){
 800a534:	bf00      	nop
}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	ecbd 8b02 	vpop	{d8}
 800a540:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a544:	f3af 8000 	nop.w
 800a548:	a1cac083 	.word	0xa1cac083
 800a54c:	3febb645 	.word	0x3febb645
 800a550:	3fe00000 	.word	0x3fe00000
 800a554:	dbf8b9bb 	.word	0xdbf8b9bb
 800a558:	3fe6a09e 	.word	0x3fe6a09e

0800a55c <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	230b      	movs	r3, #11
 800a56e:	2188      	movs	r1, #136	; 0x88
 800a570:	f00d fd98 	bl	80180a4 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f81e 	bl	800a5b6 <PSx_HandlerI2C>
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	230b      	movs	r3, #11
 800a59c:	2188      	movs	r1, #136	; 0x88
 800a59e:	f00d fd81 	bl	80180a4 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a5ae:	bf00      	nop
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	789a      	ldrb	r2, [r3, #2]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	78da      	ldrb	r2, [r3, #3]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	791b      	ldrb	r3, [r3, #4]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	795b      	ldrb	r3, [r3, #5]
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	799b      	ldrb	r3, [r3, #6]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	79db      	ldrb	r3, [r3, #7]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7a1b      	ldrb	r3, [r3, #8]
 800a5fe:	461a      	mov	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	7a5b      	ldrb	r3, [r3, #9]
 800a608:	461a      	mov	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	7a9a      	ldrb	r2, [r3, #10]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7ada      	ldrb	r2, [r3, #11]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f804 	bl	800a630 <PSxBTGetXY>
}
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	ee07 3a90 	vmov	s15, r3
 800a640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a644:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800a948 <PSxBTGetXY+0x318>
 800a648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a650:	d53e      	bpl.n	800a6d0 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	ee17 0a90 	vmov	r0, s15
 800a662:	f7f5 ff71 	bl	8000548 <__aeabi_f2d>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	a1b5      	add	r1, pc, #724	; (adr r1, 800a940 <PSxBTGetXY+0x310>)
 800a66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a670:	f7f5 fe0a 	bl	8000288 <__aeabi_dsub>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4610      	mov	r0, r2
 800a67a:	4619      	mov	r1, r3
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	4bb2      	ldr	r3, [pc, #712]	; (800a94c <PSxBTGetXY+0x31c>)
 800a682:	f7f6 f8e3 	bl	800084c <__aeabi_ddiv>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4610      	mov	r0, r2
 800a68c:	4619      	mov	r1, r3
 800a68e:	f7f6 faab 	bl	8000be8 <__aeabi_d2f>
 800a692:	4602      	mov	r2, r0
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a69e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a6:	d504      	bpl.n	800a6b2 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f04f 0200 	mov.w	r2, #0
 800a6ae:	64da      	str	r2, [r3, #76]	; 0x4c
 800a6b0:	e05d      	b.n	800a76e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a6b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c4:	dd53      	ble.n	800a76e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a6cc:	64da      	str	r2, [r3, #76]	; 0x4c
 800a6ce:	e04e      	b.n	800a76e <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	ee07 3a90 	vmov	s15, r3
 800a6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6dc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800a958 <PSxBTGetXY+0x328>
 800a6e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e8:	dd3d      	ble.n	800a766 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	ee17 0a90 	vmov	r0, s15
 800a6fa:	f7f5 ff25 	bl	8000548 <__aeabi_f2d>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	f04f 0000 	mov.w	r0, #0
 800a706:	4992      	ldr	r1, [pc, #584]	; (800a950 <PSxBTGetXY+0x320>)
 800a708:	f7f5 fdbe 	bl	8000288 <__aeabi_dsub>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4610      	mov	r0, r2
 800a712:	4619      	mov	r1, r3
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	4b8c      	ldr	r3, [pc, #560]	; (800a94c <PSxBTGetXY+0x31c>)
 800a71a:	f7f6 f897 	bl	800084c <__aeabi_ddiv>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4610      	mov	r0, r2
 800a724:	4619      	mov	r1, r3
 800a726:	f7f6 fa5f 	bl	8000be8 <__aeabi_d2f>
 800a72a:	4602      	mov	r2, r0
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a73e:	dd04      	ble.n	800a74a <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	64da      	str	r2, [r3, #76]	; 0x4c
 800a748:	e011      	b.n	800a76e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a750:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a754:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75c:	d507      	bpl.n	800a76e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a7c      	ldr	r2, [pc, #496]	; (800a954 <PSxBTGetXY+0x324>)
 800a762:	64da      	str	r2, [r3, #76]	; 0x4c
 800a764:	e003      	b.n	800a76e <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f04f 0200 	mov.w	r2, #0
 800a76c:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a948 <PSxBTGetXY+0x318>
 800a77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a786:	d53e      	bpl.n	800a806 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78c:	ee07 3a90 	vmov	s15, r3
 800a790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a794:	ee17 0a90 	vmov	r0, s15
 800a798:	f7f5 fed6 	bl	8000548 <__aeabi_f2d>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	a167      	add	r1, pc, #412	; (adr r1, 800a940 <PSxBTGetXY+0x310>)
 800a7a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a6:	f7f5 fd6f 	bl	8000288 <__aeabi_dsub>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	4b65      	ldr	r3, [pc, #404]	; (800a94c <PSxBTGetXY+0x31c>)
 800a7b8:	f7f6 f848 	bl	800084c <__aeabi_ddiv>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	f7f6 fa10 	bl	8000be8 <__aeabi_d2f>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a7d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7dc:	d504      	bpl.n	800a7e8 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f04f 0200 	mov.w	r2, #0
 800a7e4:	651a      	str	r2, [r3, #80]	; 0x50
 800a7e6:	e05d      	b.n	800a8a4 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a7ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fa:	dd53      	ble.n	800a8a4 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a802:	651a      	str	r2, [r3, #80]	; 0x50
 800a804:	e04e      	b.n	800a8a4 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a812:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800a958 <PSxBTGetXY+0x328>
 800a816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81e:	dd3d      	ble.n	800a89c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a824:	ee07 3a90 	vmov	s15, r3
 800a828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82c:	ee17 0a90 	vmov	r0, s15
 800a830:	f7f5 fe8a 	bl	8000548 <__aeabi_f2d>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	f04f 0000 	mov.w	r0, #0
 800a83c:	4944      	ldr	r1, [pc, #272]	; (800a950 <PSxBTGetXY+0x320>)
 800a83e:	f7f5 fd23 	bl	8000288 <__aeabi_dsub>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4610      	mov	r0, r2
 800a848:	4619      	mov	r1, r3
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	4b3f      	ldr	r3, [pc, #252]	; (800a94c <PSxBTGetXY+0x31c>)
 800a850:	f7f5 fffc 	bl	800084c <__aeabi_ddiv>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4610      	mov	r0, r2
 800a85a:	4619      	mov	r1, r3
 800a85c:	f7f6 f9c4 	bl	8000be8 <__aeabi_d2f>
 800a860:	4602      	mov	r2, r0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a86c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a874:	dd04      	ble.n	800a880 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f04f 0200 	mov.w	r2, #0
 800a87c:	651a      	str	r2, [r3, #80]	; 0x50
 800a87e:	e011      	b.n	800a8a4 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a886:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a88a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a892:	d507      	bpl.n	800a8a4 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a2f      	ldr	r2, [pc, #188]	; (800a954 <PSxBTGetXY+0x324>)
 800a898:	651a      	str	r2, [r3, #80]	; 0x50
 800a89a:	e003      	b.n	800a8a4 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f04f 0200 	mov.w	r2, #0
 800a8a2:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a8:	ee07 3a90 	vmov	s15, r3
 800a8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a948 <PSxBTGetXY+0x318>
 800a8b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8bc:	d54e      	bpl.n	800a95c <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c2:	ee07 3a90 	vmov	s15, r3
 800a8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ca:	ee17 0a90 	vmov	r0, s15
 800a8ce:	f7f5 fe3b 	bl	8000548 <__aeabi_f2d>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	a11a      	add	r1, pc, #104	; (adr r1, 800a940 <PSxBTGetXY+0x310>)
 800a8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8dc:	f7f5 fcd4 	bl	8000288 <__aeabi_dsub>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	4b17      	ldr	r3, [pc, #92]	; (800a94c <PSxBTGetXY+0x31c>)
 800a8ee:	f7f5 ffad 	bl	800084c <__aeabi_ddiv>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f7f6 f975 	bl	8000be8 <__aeabi_d2f>
 800a8fe:	4602      	mov	r2, r0
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a90a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a912:	d504      	bpl.n	800a91e <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	655a      	str	r2, [r3, #84]	; 0x54
 800a91c:	e06d      	b.n	800a9fa <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a930:	dd63      	ble.n	800a9fa <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a938:	655a      	str	r2, [r3, #84]	; 0x54
 800a93a:	e05e      	b.n	800a9fa <PSxBTGetXY+0x3ca>
 800a93c:	f3af 8000 	nop.w
 800a940:	00000000 	.word	0x00000000
 800a944:	405cc000 	.word	0x405cc000
 800a948:	42e60000 	.word	0x42e60000
 800a94c:	40590000 	.word	0x40590000
 800a950:	40618000 	.word	0x40618000
 800a954:	bf800000 	.word	0xbf800000
 800a958:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a968:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a958 <PSxBTGetXY+0x328>
 800a96c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a974:	dd3d      	ble.n	800a9f2 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	ee07 3a90 	vmov	s15, r3
 800a97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a982:	ee17 0a90 	vmov	r0, s15
 800a986:	f7f5 fddf 	bl	8000548 <__aeabi_f2d>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	f04f 0000 	mov.w	r0, #0
 800a992:	4981      	ldr	r1, [pc, #516]	; (800ab98 <PSxBTGetXY+0x568>)
 800a994:	f7f5 fc78 	bl	8000288 <__aeabi_dsub>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	4610      	mov	r0, r2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f04f 0200 	mov.w	r2, #0
 800a9a4:	4b7d      	ldr	r3, [pc, #500]	; (800ab9c <PSxBTGetXY+0x56c>)
 800a9a6:	f7f5 ff51 	bl	800084c <__aeabi_ddiv>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f7f6 f919 	bl	8000be8 <__aeabi_d2f>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a9c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ca:	dd04      	ble.n	800a9d6 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f04f 0200 	mov.w	r2, #0
 800a9d2:	655a      	str	r2, [r3, #84]	; 0x54
 800a9d4:	e011      	b.n	800a9fa <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a9dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a9e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e8:	d507      	bpl.n	800a9fa <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a6c      	ldr	r2, [pc, #432]	; (800aba0 <PSxBTGetXY+0x570>)
 800a9ee:	655a      	str	r2, [r3, #84]	; 0x54
 800a9f0:	e003      	b.n	800a9fa <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f04f 0200 	mov.w	r2, #0
 800a9f8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa06:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800aba4 <PSxBTGetXY+0x574>
 800aa0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa12:	d53e      	bpl.n	800aa92 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	ee07 3a90 	vmov	s15, r3
 800aa1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa20:	ee17 0a90 	vmov	r0, s15
 800aa24:	f7f5 fd90 	bl	8000548 <__aeabi_f2d>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	a156      	add	r1, pc, #344	; (adr r1, 800ab88 <PSxBTGetXY+0x558>)
 800aa2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa32:	f7f5 fc29 	bl	8000288 <__aeabi_dsub>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	4b56      	ldr	r3, [pc, #344]	; (800ab9c <PSxBTGetXY+0x56c>)
 800aa44:	f7f5 ff02 	bl	800084c <__aeabi_ddiv>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4619      	mov	r1, r3
 800aa50:	f7f6 f8ca 	bl	8000be8 <__aeabi_d2f>
 800aa54:	4602      	mov	r2, r0
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aa60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa68:	d504      	bpl.n	800aa74 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f04f 0200 	mov.w	r2, #0
 800aa70:	659a      	str	r2, [r3, #88]	; 0x58
 800aa72:	e05d      	b.n	800ab30 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aa7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	dd53      	ble.n	800ab30 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800aa8e:	659a      	str	r2, [r3, #88]	; 0x58
 800aa90:	e04e      	b.n	800ab30 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800aba8 <PSxBTGetXY+0x578>
 800aaa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaaa:	dd3d      	ble.n	800ab28 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab0:	ee07 3a90 	vmov	s15, r3
 800aab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab8:	ee17 0a90 	vmov	r0, s15
 800aabc:	f7f5 fd44 	bl	8000548 <__aeabi_f2d>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	f04f 0000 	mov.w	r0, #0
 800aac8:	4933      	ldr	r1, [pc, #204]	; (800ab98 <PSxBTGetXY+0x568>)
 800aaca:	f7f5 fbdd 	bl	8000288 <__aeabi_dsub>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4610      	mov	r0, r2
 800aad4:	4619      	mov	r1, r3
 800aad6:	f04f 0200 	mov.w	r2, #0
 800aada:	4b30      	ldr	r3, [pc, #192]	; (800ab9c <PSxBTGetXY+0x56c>)
 800aadc:	f7f5 feb6 	bl	800084c <__aeabi_ddiv>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4610      	mov	r0, r2
 800aae6:	4619      	mov	r1, r3
 800aae8:	f7f6 f87e 	bl	8000be8 <__aeabi_d2f>
 800aaec:	4602      	mov	r2, r0
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800aaf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab00:	dd04      	ble.n	800ab0c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f04f 0200 	mov.w	r2, #0
 800ab08:	659a      	str	r2, [r3, #88]	; 0x58
 800ab0a:	e011      	b.n	800ab30 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ab12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1e:	d507      	bpl.n	800ab30 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a1f      	ldr	r2, [pc, #124]	; (800aba0 <PSxBTGetXY+0x570>)
 800ab24:	659a      	str	r2, [r3, #88]	; 0x58
 800ab26:	e003      	b.n	800ab30 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f04f 0200 	mov.w	r2, #0
 800ab2e:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7f5 fce5 	bl	8000504 <__aeabi_ui2d>
 800ab3a:	a315      	add	r3, pc, #84	; (adr r3, 800ab90 <PSxBTGetXY+0x560>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fe84 	bl	800084c <__aeabi_ddiv>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4610      	mov	r0, r2
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	f7f6 f84c 	bl	8000be8 <__aeabi_d2f>
 800ab50:	4602      	mov	r2, r0
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7f5 fcd2 	bl	8000504 <__aeabi_ui2d>
 800ab60:	a30b      	add	r3, pc, #44	; (adr r3, 800ab90 <PSxBTGetXY+0x560>)
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	f7f5 fe71 	bl	800084c <__aeabi_ddiv>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	f7f6 f839 	bl	8000be8 <__aeabi_d2f>
 800ab76:	4602      	mov	r2, r0
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	f3af 8000 	nop.w
 800ab88:	00000000 	.word	0x00000000
 800ab8c:	405cc000 	.word	0x405cc000
 800ab90:	00000000 	.word	0x00000000
 800ab94:	406fe000 	.word	0x406fe000
 800ab98:	40618000 	.word	0x40618000
 800ab9c:	40590000 	.word	0x40590000
 800aba0:	bf800000 	.word	0xbf800000
 800aba4:	42e60000 	.word	0x42e60000
 800aba8:	430c0000 	.word	0x430c0000

0800abac <R6091U_Init>:
	memset(IMU->Buffer, 0, 20);
	HAL_I2C_Master_Receive_DMA(IMU->hi2cimu, 0x35<<1, (uint8_t*)&IMU->Buffer, 20);//RECEIVE FROM R6091U
}


void R6091U_Init(R6091U_t* IMU,UART_HandleTypeDef* huartx){
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]

	IMU->huartx = huartx;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	605a      	str	r2, [r3, #4]
	IMU->State = PENDING_SYNC;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	775a      	strb	r2, [r3, #29]
	HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6858      	ldr	r0, [r3, #4]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3308      	adds	r3, #8
 800abca:	2201      	movs	r2, #1
 800abcc:	4619      	mov	r1, r3
 800abce:	f010 ffeb 	bl	801bba8 <HAL_UART_Receive_IT>

}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <R6091U_Handler>:
void R6091U_Handler(R6091U_t* IMU){
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]

//	uint8_t checksum;

	switch(IMU->State){
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7f5b      	ldrb	r3, [r3, #29]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d035      	beq.n	800ac58 <R6091U_Handler+0x7c>
 800abec:	2b02      	cmp	r3, #2
 800abee:	f300 80b2 	bgt.w	800ad56 <R6091U_Handler+0x17a>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <R6091U_Handler+0x20>
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d011      	beq.n	800ac1e <R6091U_Handler+0x42>
		IMU->State = PENDING_SYNC;
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);

		break;
	}
}
 800abfa:	e0ac      	b.n	800ad56 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0xAA){
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7a1b      	ldrb	r3, [r3, #8]
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2baa      	cmp	r3, #170	; 0xaa
 800ac04:	d102      	bne.n	800ac0c <R6091U_Handler+0x30>
			IMU->State = CONFIRMING_SYNC;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6858      	ldr	r0, [r3, #4]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3308      	adds	r3, #8
 800ac14:	2201      	movs	r2, #1
 800ac16:	4619      	mov	r1, r3
 800ac18:	f010 ffc6 	bl	801bba8 <HAL_UART_Receive_IT>
		break;
 800ac1c:	e09b      	b.n	800ad56 <R6091U_Handler+0x17a>
		if(IMU->Buffer[0] == 0x00){
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	7a1b      	ldrb	r3, [r3, #8]
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10b      	bne.n	800ac40 <R6091U_Handler+0x64>
			IMU->State = IN_SYNC;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 13);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6858      	ldr	r0, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3308      	adds	r3, #8
 800ac36:	220d      	movs	r2, #13
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f010 ffb5 	bl	801bba8 <HAL_UART_Receive_IT>
		break;
 800ac3e:	e08a      	b.n	800ad56 <R6091U_Handler+0x17a>
			IMU->State = PENDING_SYNC;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	775a      	strb	r2, [r3, #29]
			HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6858      	ldr	r0, [r3, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4619      	mov	r1, r3
 800ac52:	f010 ffa9 	bl	801bba8 <HAL_UART_Receive_IT>
		break;
 800ac56:	e07e      	b.n	800ad56 <R6091U_Handler+0x17a>
		IMU->checksum = 0;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	7a1b      	ldrb	r3, [r3, #8]
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7a5b      	ldrb	r3, [r3, #9]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	4413      	add	r3, r2
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7a9b      	ldrb	r3, [r3, #10]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	4413      	add	r3, r2
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	7adb      	ldrb	r3, [r3, #11]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	4413      	add	r3, r2
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	7b1b      	ldrb	r3, [r3, #12]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	4413      	add	r3, r2
 800ac8c:	b2da      	uxtb	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	7b5b      	ldrb	r3, [r3, #13]
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	4413      	add	r3, r2
 800ac96:	b2da      	uxtb	r2, r3
						+ IMU->Buffer[6] + IMU->Buffer[7] + IMU->Buffer[8] + IMU->Buffer[9] + IMU->Buffer[10] + IMU->Buffer[11];
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	7b9b      	ldrb	r3, [r3, #14]
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	4413      	add	r3, r2
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	7bdb      	ldrb	r3, [r3, #15]
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	4413      	add	r3, r2
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	7c1b      	ldrb	r3, [r3, #16]
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	4413      	add	r3, r2
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7c5b      	ldrb	r3, [r3, #17]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	4413      	add	r3, r2
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	7c9b      	ldrb	r3, [r3, #18]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	4413      	add	r3, r2
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	7cdb      	ldrb	r3, [r3, #19]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	4413      	add	r3, r2
 800acd2:	b2da      	uxtb	r2, r3
		IMU->checksum = IMU->Buffer[0] + IMU->Buffer[1] + IMU->Buffer[2] + IMU->Buffer[3] + IMU->Buffer[4] + IMU->Buffer[5]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		if( IMU->checksum == IMU->Buffer[12]){
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	7d1b      	ldrb	r3, [r3, #20]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	429a      	cmp	r2, r3
 800acea:	d121      	bne.n	800ad30 <R6091U_Handler+0x154>
			int16_t yaw = *((uint16_t*)&IMU->Buffer[1]);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	3309      	adds	r3, #9
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	81fb      	strh	r3, [r7, #14]
			fyaw = ((float)(yaw) / (float)100.0) + 180.0 ;
 800acf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ad00:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ad60 <R6091U_Handler+0x184>
 800ad04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad08:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ad64 <R6091U_Handler+0x188>
 800ad0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad10:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <R6091U_Handler+0x18c>)
 800ad12:	edc3 7a00 	vstr	s15, [r3]
			if(testCounter2 >= 20){
 800ad16:	4b15      	ldr	r3, [pc, #84]	; (800ad6c <R6091U_Handler+0x190>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b13      	cmp	r3, #19
 800ad1c:	dd03      	ble.n	800ad26 <R6091U_Handler+0x14a>
				testCounter2 = 0;
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <R6091U_Handler+0x190>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	e004      	b.n	800ad30 <R6091U_Handler+0x154>
				testCounter2 ++;
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <R6091U_Handler+0x190>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	4a0f      	ldr	r2, [pc, #60]	; (800ad6c <R6091U_Handler+0x190>)
 800ad2e:	6013      	str	r3, [r2, #0]
		memset(IMU->Buffer, 0, 13);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3308      	adds	r3, #8
 800ad34:	220d      	movs	r2, #13
 800ad36:	2100      	movs	r1, #0
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f014 fb7f 	bl	801f43c <memset>
		IMU->State = PENDING_SYNC;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	775a      	strb	r2, [r3, #29]
		HAL_UART_Receive_IT(IMU->huartx, IMU->Buffer, 1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6858      	ldr	r0, [r3, #4]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	4619      	mov	r1, r3
 800ad50:	f010 ff2a 	bl	801bba8 <HAL_UART_Receive_IT>
		break;
 800ad54:	bf00      	nop
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	42c80000 	.word	0x42c80000
 800ad64:	43340000 	.word	0x43340000
 800ad68:	20009b8c 	.word	0x20009b8c
 800ad6c:	200067ec 	.word	0x200067ec

0800ad70 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	rns->rns_hcanx = hcanx;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	601a      	str	r2, [r3, #0]

	insData_send[0] = 1;
 800ad80:	4b28      	ldr	r3, [pc, #160]	; (800ae24 <RNSInit+0xb4>)
 800ad82:	2201      	movs	r2, #1
 800ad84:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800ad86:	4b27      	ldr	r3, [pc, #156]	; (800ae24 <RNSInit+0xb4>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	6818      	ldr	r0, [r3, #0]
 800ad90:	2302      	movs	r3, #2
 800ad92:	4a24      	ldr	r2, [pc, #144]	; (800ae24 <RNSInit+0xb4>)
 800ad94:	2117      	movs	r1, #23
 800ad96:	f7f8 fcfd 	bl	8003794 <CAN_TxMsg>
	rns->RNS_data.common_instruction = RNS_PENDING;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 800ada2:	4b20      	ldr	r3, [pc, #128]	; (800ae24 <RNSInit+0xb4>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 800ada8:	4b1e      	ldr	r3, [pc, #120]	; (800ae24 <RNSInit+0xb4>)
 800adaa:	2219      	movs	r2, #25
 800adac:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	6818      	ldr	r0, [r3, #0]
 800adb2:	2302      	movs	r3, #2
 800adb4:	4a1b      	ldr	r2, [pc, #108]	; (800ae24 <RNSInit+0xb4>)
 800adb6:	2117      	movs	r1, #23
 800adb8:	f7f8 fcec 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2202      	movs	r2, #2
 800adc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800adc8:	e022      	b.n	800ae10 <RNSInit+0xa0>
		if(wait >= 2000000){
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4a16      	ldr	r2, [pc, #88]	; (800ae28 <RNSInit+0xb8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	dd1b      	ble.n	800ae0a <RNSInit+0x9a>
			insData_send[0] = 1;
 800add2:	4b14      	ldr	r3, [pc, #80]	; (800ae24 <RNSInit+0xb4>)
 800add4:	2201      	movs	r2, #1
 800add6:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 800add8:	4b12      	ldr	r3, [pc, #72]	; (800ae24 <RNSInit+0xb4>)
 800adda:	2219      	movs	r2, #25
 800addc:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6818      	ldr	r0, [r3, #0]
 800ade2:	2302      	movs	r3, #2
 800ade4:	4a0f      	ldr	r2, [pc, #60]	; (800ae24 <RNSInit+0xb4>)
 800ade6:	2117      	movs	r1, #23
 800ade8:	f7f8 fcd4 	bl	8003794 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 800adec:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <RNSInit+0xbc>)
 800adee:	785b      	ldrb	r3, [r3, #1]
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	4a0e      	ldr	r2, [pc, #56]	; (800ae2c <RNSInit+0xbc>)
 800adf4:	43db      	mvns	r3, r3
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	09db      	lsrs	r3, r3, #7
 800adfa:	b2d9      	uxtb	r1, r3
 800adfc:	7853      	ldrb	r3, [r2, #1]
 800adfe:	f361 13c7 	bfi	r3, r1, #7, #1
 800ae02:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	e002      	b.n	800ae10 <RNSInit+0xa0>
		}else{
			wait ++;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d0d7      	beq.n	800adca <RNSInit+0x5a>
		}
	}
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	2000a904 	.word	0x2000a904
 800ae28:	001e847f 	.word	0x001e847f
 800ae2c:	40020814 	.word	0x40020814

0800ae30 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f04f 0200 	mov.w	r2, #0
 800ae44:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f04f 0200 	mov.w	r2, #0
 800ae4c:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f04f 0200 	mov.w	r2, #0
 800ae5c:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2202      	movs	r2, #2
 800ae62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800ae66:	4b31      	ldr	r3, [pc, #196]	; (800af2c <RNSStop+0xfc>)
 800ae68:	2211      	movs	r2, #17
 800ae6a:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	791a      	ldrb	r2, [r3, #4]
 800ae70:	4b2e      	ldr	r3, [pc, #184]	; (800af2c <RNSStop+0xfc>)
 800ae72:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6818      	ldr	r0, [r3, #0]
 800ae78:	2302      	movs	r3, #2
 800ae7a:	4a2c      	ldr	r2, [pc, #176]	; (800af2c <RNSStop+0xfc>)
 800ae7c:	2117      	movs	r1, #23
 800ae7e:	f7f8 fc89 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6818      	ldr	r0, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f103 0208 	add.w	r2, r3, #8
 800ae8c:	2308      	movs	r3, #8
 800ae8e:	2118      	movs	r1, #24
 800ae90:	f7f8 fc80 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6818      	ldr	r0, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f103 0210 	add.w	r2, r3, #16
 800ae9e:	2308      	movs	r3, #8
 800aea0:	2119      	movs	r1, #25
 800aea2:	f7f8 fc77 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800aeaa:	e035      	b.n	800af18 <RNSStop+0xe8>
	{
		if(wait >= 2000000)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4a20      	ldr	r2, [pc, #128]	; (800af30 <RNSStop+0x100>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	dd2e      	ble.n	800af12 <RNSStop+0xe2>
		{
			insData_send[0] = 17;
 800aeb4:	4b1d      	ldr	r3, [pc, #116]	; (800af2c <RNSStop+0xfc>)
 800aeb6:	2211      	movs	r2, #17
 800aeb8:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	791a      	ldrb	r2, [r3, #4]
 800aebe:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <RNSStop+0xfc>)
 800aec0:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	2302      	movs	r3, #2
 800aec8:	4a18      	ldr	r2, [pc, #96]	; (800af2c <RNSStop+0xfc>)
 800aeca:	2117      	movs	r1, #23
 800aecc:	f7f8 fc62 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6818      	ldr	r0, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f103 0208 	add.w	r2, r3, #8
 800aeda:	2308      	movs	r3, #8
 800aedc:	2118      	movs	r1, #24
 800aede:	f7f8 fc59 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f103 0210 	add.w	r2, r3, #16
 800aeec:	2308      	movs	r3, #8
 800aeee:	2119      	movs	r1, #25
 800aef0:	f7f8 fc50 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800aef4:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <RNSStop+0x104>)
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	b25b      	sxtb	r3, r3
 800aefa:	4a0e      	ldr	r2, [pc, #56]	; (800af34 <RNSStop+0x104>)
 800aefc:	43db      	mvns	r3, r3
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	09db      	lsrs	r3, r3, #7
 800af02:	b2d9      	uxtb	r1, r3
 800af04:	7853      	ldrb	r3, [r2, #1]
 800af06:	f361 13c7 	bfi	r3, r1, #7, #1
 800af0a:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e002      	b.n	800af18 <RNSStop+0xe8>
		}
		else
			wait++;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3301      	adds	r3, #1
 800af16:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d0c4      	beq.n	800aeac <RNSStop+0x7c>
	}


}
 800af22:	bf00      	nop
 800af24:	bf00      	nop
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	2000a904 	.word	0x2000a904
 800af30:	001e847f 	.word	0x001e847f
 800af34:	40020814 	.word	0x40020814

0800af38 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b086      	sub	sp, #24
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	ed87 0a05 	vstr	s0, [r7, #20]
 800af42:	edc7 0a04 	vstr	s1, [r7, #16]
 800af46:	ed87 1a03 	vstr	s2, [r7, #12]
 800af4a:	edc7 1a02 	vstr	s3, [r7, #8]
 800af4e:	6078      	str	r0, [r7, #4]

	rns->ins.instruction = RNS_VELOCITY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2205      	movs	r2, #5
 800af54:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f804 	bl	800af7c <RNSSendIns>

}
 800af74:	bf00      	nop
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 800af84:	bf00      	nop
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d0fa      	beq.n	800af86 <RNSSendIns+0xa>
	rns->RNS_data.common_instruction = RNS_WAITING;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800af98:	4b31      	ldr	r3, [pc, #196]	; (800b060 <RNSSendIns+0xe4>)
 800af9a:	2211      	movs	r2, #17
 800af9c:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	791a      	ldrb	r2, [r3, #4]
 800afa2:	4b2f      	ldr	r3, [pc, #188]	; (800b060 <RNSSendIns+0xe4>)
 800afa4:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	2302      	movs	r3, #2
 800afac:	4a2c      	ldr	r2, [pc, #176]	; (800b060 <RNSSendIns+0xe4>)
 800afae:	2117      	movs	r1, #23
 800afb0:	f7f8 fbf0 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0208 	add.w	r2, r3, #8
 800afbe:	2308      	movs	r3, #8
 800afc0:	2118      	movs	r1, #24
 800afc2:	f7f8 fbe7 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6818      	ldr	r0, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f103 0210 	add.w	r2, r3, #16
 800afd0:	2308      	movs	r3, #8
 800afd2:	2119      	movs	r1, #25
 800afd4:	f7f8 fbde 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800afdc:	e035      	b.n	800b04a <RNSSendIns+0xce>
	{
		if(wait >= 2000000)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4a20      	ldr	r2, [pc, #128]	; (800b064 <RNSSendIns+0xe8>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	dd2e      	ble.n	800b044 <RNSSendIns+0xc8>
		{
			insData_send[0] = 17;
 800afe6:	4b1e      	ldr	r3, [pc, #120]	; (800b060 <RNSSendIns+0xe4>)
 800afe8:	2211      	movs	r2, #17
 800afea:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	791a      	ldrb	r2, [r3, #4]
 800aff0:	4b1b      	ldr	r3, [pc, #108]	; (800b060 <RNSSendIns+0xe4>)
 800aff2:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	2302      	movs	r3, #2
 800affa:	4a19      	ldr	r2, [pc, #100]	; (800b060 <RNSSendIns+0xe4>)
 800affc:	2117      	movs	r1, #23
 800affe:	f7f8 fbc9 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f103 0208 	add.w	r2, r3, #8
 800b00c:	2308      	movs	r3, #8
 800b00e:	2118      	movs	r1, #24
 800b010:	f7f8 fbc0 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f103 0210 	add.w	r2, r3, #16
 800b01e:	2308      	movs	r3, #8
 800b020:	2119      	movs	r1, #25
 800b022:	f7f8 fbb7 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800b026:	4b10      	ldr	r3, [pc, #64]	; (800b068 <RNSSendIns+0xec>)
 800b028:	785b      	ldrb	r3, [r3, #1]
 800b02a:	b25b      	sxtb	r3, r3
 800b02c:	4a0e      	ldr	r2, [pc, #56]	; (800b068 <RNSSendIns+0xec>)
 800b02e:	43db      	mvns	r3, r3
 800b030:	b2db      	uxtb	r3, r3
 800b032:	09db      	lsrs	r3, r3, #7
 800b034:	b2d9      	uxtb	r1, r3
 800b036:	7853      	ldrb	r3, [r2, #1]
 800b038:	f361 13c7 	bfi	r3, r1, #7, #1
 800b03c:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	e002      	b.n	800b04a <RNSSendIns+0xce>
		}
		else
		{
			wait++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3301      	adds	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b050:	2b02      	cmp	r3, #2
 800b052:	d0c4      	beq.n	800afde <RNSSendIns+0x62>
		}
	}

}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	2000a904 	.word	0x2000a904
 800b064:	001e847f 	.word	0x001e847f
 800b068:	40020814 	.word	0x40020814

0800b06c <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 800b06c:	b40e      	push	{r1, r2, r3}
 800b06e:	b580      	push	{r7, lr}
 800b070:	b085      	sub	sp, #20
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]

	va_list value;
	rns->param.parameter = parameter;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	7f3a      	ldrb	r2, [r7, #28]
 800b07a:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 800b07c:	f107 0320 	add.w	r3, r7, #32
 800b080:	60bb      	str	r3, [r7, #8]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 800b082:	bf00      	nop
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d0fa      	beq.n	800b084 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 800b08e:	7f3b      	ldrb	r3, [r7, #28]
 800b090:	2b1d      	cmp	r3, #29
 800b092:	d92b      	bls.n	800b0ec <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	3307      	adds	r3, #7
 800b098:	f023 0307 	bic.w	r3, r3, #7
 800b09c:	f103 0208 	add.w	r2, r3, #8
 800b0a0:	60ba      	str	r2, [r7, #8]
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	f7f5 fd9d 	bl	8000be8 <__aeabi_d2f>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f04f 0200 	mov.w	r2, #0
 800b0ba:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f04f 0200 	mov.w	r2, #0
 800b0ca:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f04f 0200 	mov.w	r2, #0
 800b0d2:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f04f 0200 	mov.w	r2, #0
 800b0e2:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f04f 0200 	mov.w	r2, #0
 800b0ea:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 800b0ec:	7f3b      	ldrb	r3, [r7, #28]
 800b0ee:	2b23      	cmp	r3, #35	; 0x23
 800b0f0:	d927      	bls.n	800b142 <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3307      	adds	r3, #7
 800b0f6:	f023 0307 	bic.w	r3, r3, #7
 800b0fa:	f103 0208 	add.w	r2, r3, #8
 800b0fe:	60ba      	str	r2, [r7, #8]
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	4610      	mov	r0, r2
 800b106:	4619      	mov	r1, r3
 800b108:	f7f5 fd6e 	bl	8000be8 <__aeabi_d2f>
 800b10c:	4602      	mov	r2, r0
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f04f 0200 	mov.w	r2, #0
 800b118:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f04f 0200 	mov.w	r2, #0
 800b130:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f04f 0200 	mov.w	r2, #0
 800b138:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f04f 0200 	mov.w	r2, #0
 800b140:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 800b142:	7f3b      	ldrb	r3, [r7, #28]
 800b144:	2b28      	cmp	r3, #40	; 0x28
 800b146:	d923      	bls.n	800b190 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	3307      	adds	r3, #7
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	f103 0208 	add.w	r2, r3, #8
 800b154:	60ba      	str	r2, [r7, #8]
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	4610      	mov	r0, r2
 800b15c:	4619      	mov	r1, r3
 800b15e:	f7f5 fd43 	bl	8000be8 <__aeabi_d2f>
 800b162:	4602      	mov	r2, r0
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f04f 0200 	mov.w	r2, #0
 800b16e:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f04f 0200 	mov.w	r2, #0
 800b176:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f04f 0200 	mov.w	r2, #0
 800b17e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f04f 0200 	mov.w	r2, #0
 800b186:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f04f 0200 	mov.w	r2, #0
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 800b190:	7f3b      	ldrb	r3, [r7, #28]
 800b192:	2b4d      	cmp	r3, #77	; 0x4d
 800b194:	d91f      	bls.n	800b1d6 <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	3307      	adds	r3, #7
 800b19a:	f023 0307 	bic.w	r3, r3, #7
 800b19e:	f103 0208 	add.w	r2, r3, #8
 800b1a2:	60ba      	str	r2, [r7, #8]
 800b1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	f7f5 fd1c 	bl	8000be8 <__aeabi_d2f>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f04f 0200 	mov.w	r2, #0
 800b1cc:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f04f 0200 	mov.w	r2, #0
 800b1d4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 800b1d6:	7f3b      	ldrb	r3, [r7, #28]
 800b1d8:	2b55      	cmp	r3, #85	; 0x55
 800b1da:	d91b      	bls.n	800b214 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3307      	adds	r3, #7
 800b1e0:	f023 0307 	bic.w	r3, r3, #7
 800b1e4:	f103 0208 	add.w	r2, r3, #8
 800b1e8:	60ba      	str	r2, [r7, #8]
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	f7f5 fcf9 	bl	8000be8 <__aeabi_d2f>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f04f 0200 	mov.w	r2, #0
 800b202:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f04f 0200 	mov.w	r2, #0
 800b212:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 800b214:	7f3b      	ldrb	r3, [r7, #28]
 800b216:	2b56      	cmp	r3, #86	; 0x56
 800b218:	d917      	bls.n	800b24a <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	3307      	adds	r3, #7
 800b21e:	f023 0307 	bic.w	r3, r3, #7
 800b222:	f103 0208 	add.w	r2, r3, #8
 800b226:	60ba      	str	r2, [r7, #8]
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	4610      	mov	r0, r2
 800b22e:	4619      	mov	r1, r3
 800b230:	f7f5 fcda 	bl	8000be8 <__aeabi_d2f>
 800b234:	4602      	mov	r2, r0
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f04f 0200 	mov.w	r2, #0
 800b240:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f04f 0200 	mov.w	r2, #0
 800b248:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 800b24a:	7f3b      	ldrb	r3, [r7, #28]
 800b24c:	2b57      	cmp	r3, #87	; 0x57
 800b24e:	d913      	bls.n	800b278 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	3307      	adds	r3, #7
 800b254:	f023 0307 	bic.w	r3, r3, #7
 800b258:	f103 0208 	add.w	r2, r3, #8
 800b25c:	60ba      	str	r2, [r7, #8]
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	4610      	mov	r0, r2
 800b264:	4619      	mov	r1, r3
 800b266:	f7f5 fcbf 	bl	8000be8 <__aeabi_d2f>
 800b26a:	4602      	mov	r2, r0
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f04f 0200 	mov.w	r2, #0
 800b276:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 800b278:	7f3b      	ldrb	r3, [r7, #28]
 800b27a:	2b59      	cmp	r3, #89	; 0x59
 800b27c:	d90f      	bls.n	800b29e <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	3307      	adds	r3, #7
 800b282:	f023 0307 	bic.w	r3, r3, #7
 800b286:	f103 0208 	add.w	r2, r3, #8
 800b28a:	60ba      	str	r2, [r7, #8]
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	4610      	mov	r0, r2
 800b292:	4619      	mov	r1, r3
 800b294:	f7f5 fca8 	bl	8000be8 <__aeabi_d2f>
 800b298:	4602      	mov	r2, r0
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	insData_send[0] = 17;
 800b29e:	4b4d      	ldr	r3, [pc, #308]	; (800b3d4 <RNSSet+0x368>)
 800b2a0:	2211      	movs	r2, #17
 800b2a2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	7e1a      	ldrb	r2, [r3, #24]
 800b2a8:	4b4a      	ldr	r3, [pc, #296]	; (800b3d4 <RNSSet+0x368>)
 800b2aa:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6818      	ldr	r0, [r3, #0]
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	4a48      	ldr	r2, [pc, #288]	; (800b3d4 <RNSSet+0x368>)
 800b2b4:	2117      	movs	r1, #23
 800b2b6:	f7f8 fa6d 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6818      	ldr	r0, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f103 021c 	add.w	r2, r3, #28
 800b2c4:	2308      	movs	r3, #8
 800b2c6:	2118      	movs	r1, #24
 800b2c8:	f7f8 fa64 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6818      	ldr	r0, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	2119      	movs	r1, #25
 800b2da:	f7f8 fa5b 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800b2de:	7f3b      	ldrb	r3, [r7, #28]
 800b2e0:	2b55      	cmp	r3, #85	; 0x55
 800b2e2:	d908      	bls.n	800b2f6 <RNSSet+0x28a>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b2ee:	2308      	movs	r3, #8
 800b2f0:	211a      	movs	r1, #26
 800b2f2:	f7f8 fa4f 	bl	8003794 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 800b2f6:	7f3b      	ldrb	r3, [r7, #28]
 800b2f8:	2b57      	cmp	r3, #87	; 0x57
 800b2fa:	d908      	bls.n	800b30e <RNSSet+0x2a2>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b306:	2308      	movs	r3, #8
 800b308:	211b      	movs	r1, #27
 800b30a:	f7f8 fa43 	bl	8003794 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2202      	movs	r2, #2
 800b312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]

	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b31a:	e04d      	b.n	800b3b8 <RNSSet+0x34c>
	{
		if(wait >= 2000000)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	4a2e      	ldr	r2, [pc, #184]	; (800b3d8 <RNSSet+0x36c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	dd46      	ble.n	800b3b2 <RNSSet+0x346>
		{
			insData_send[0] = 17;
 800b324:	4b2b      	ldr	r3, [pc, #172]	; (800b3d4 <RNSSet+0x368>)
 800b326:	2211      	movs	r2, #17
 800b328:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->param.parameter;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	7e1a      	ldrb	r2, [r3, #24]
 800b32e:	4b29      	ldr	r3, [pc, #164]	; (800b3d4 <RNSSet+0x368>)
 800b330:	705a      	strb	r2, [r3, #1]

			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	2302      	movs	r3, #2
 800b338:	4a26      	ldr	r2, [pc, #152]	; (800b3d4 <RNSSet+0x368>)
 800b33a:	2117      	movs	r1, #23
 800b33c:	f7f8 fa2a 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->param.param_buffer[0]),8);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6818      	ldr	r0, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f103 021c 	add.w	r2, r3, #28
 800b34a:	2308      	movs	r3, #8
 800b34c:	2118      	movs	r1, #24
 800b34e:	f7f8 fa21 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->param.param_buffer[2]),8);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b35c:	2308      	movs	r3, #8
 800b35e:	2119      	movs	r1, #25
 800b360:	f7f8 fa18 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_5)
 800b364:	7f3b      	ldrb	r3, [r7, #28]
 800b366:	2b55      	cmp	r3, #85	; 0x55
 800b368:	d908      	bls.n	800b37c <RNSSet+0x310>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,&(rns->param.param_buffer[4]),8);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800b374:	2308      	movs	r3, #8
 800b376:	211a      	movs	r1, #26
 800b378:	f7f8 fa0c 	bl	8003794 <CAN_TxMsg>
			if(parameter > RNS_PARAM_7)
 800b37c:	7f3b      	ldrb	r3, [r7, #28]
 800b37e:	2b57      	cmp	r3, #87	; 0x57
 800b380:	d908      	bls.n	800b394 <RNSSet+0x328>
				CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,&(rns->param.param_buffer[6]),8);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b38c:	2308      	movs	r3, #8
 800b38e:	211b      	movs	r1, #27
 800b390:	f7f8 fa00 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <RNSSet+0x370>)
 800b396:	785b      	ldrb	r3, [r3, #1]
 800b398:	b25b      	sxtb	r3, r3
 800b39a:	4a10      	ldr	r2, [pc, #64]	; (800b3dc <RNSSet+0x370>)
 800b39c:	43db      	mvns	r3, r3
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	09db      	lsrs	r3, r3, #7
 800b3a2:	b2d9      	uxtb	r1, r3
 800b3a4:	7853      	ldrb	r3, [r2, #1]
 800b3a6:	f361 13c7 	bfi	r3, r1, #7, #1
 800b3aa:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e002      	b.n	800b3b8 <RNSSet+0x34c>
		}
		else
			wait++;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b3be:	2b02      	cmp	r3, #2
 800b3c0:	d0ac      	beq.n	800b31c <RNSSet+0x2b0>
	}
	//UARTPrintString(&huart5,"1\r\n");

}
 800b3c2:	bf00      	nop
 800b3c4:	bf00      	nop
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3ce:	b003      	add	sp, #12
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	2000a904 	.word	0x2000a904
 800b3d8:	001e847f 	.word	0x001e847f
 800b3dc:	40020814 	.word	0x40020814

0800b3e0 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	6039      	str	r1, [r7, #0]
 800b3ea:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	79fa      	ldrb	r2, [r7, #7]
 800b3f0:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	f04f 0200 	mov.w	r2, #0
 800b3f8:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	f04f 0200 	mov.w	r2, #0
 800b400:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	f04f 0200 	mov.w	r2, #0
 800b408:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	f04f 0200 	mov.w	r2, #0
 800b410:	615a      	str	r2, [r3, #20]

//	RNSSendIns(rns);

	rns->RNS_data.common_instruction = RNS_WAITING;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2202      	movs	r2, #2
 800b416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 800b41a:	4b3b      	ldr	r3, [pc, #236]	; (800b508 <RNSEnquire+0x128>)
 800b41c:	2211      	movs	r2, #17
 800b41e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	791a      	ldrb	r2, [r3, #4]
 800b424:	4b38      	ldr	r3, [pc, #224]	; (800b508 <RNSEnquire+0x128>)
 800b426:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	6818      	ldr	r0, [r3, #0]
 800b42c:	2302      	movs	r3, #2
 800b42e:	4a36      	ldr	r2, [pc, #216]	; (800b508 <RNSEnquire+0x128>)
 800b430:	2117      	movs	r1, #23
 800b432:	f7f8 f9af 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	f103 0208 	add.w	r2, r3, #8
 800b440:	2308      	movs	r3, #8
 800b442:	2118      	movs	r1, #24
 800b444:	f7f8 f9a6 	bl	8003794 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	f103 0210 	add.w	r2, r3, #16
 800b452:	2308      	movs	r3, #8
 800b454:	2119      	movs	r1, #25
 800b456:	f7f8 f99d 	bl	8003794 <CAN_TxMsg>

	int wait = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b45e:	e035      	b.n	800b4cc <RNSEnquire+0xec>
	{
		if(wait >= 2000000)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4a2a      	ldr	r2, [pc, #168]	; (800b50c <RNSEnquire+0x12c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	dd2e      	ble.n	800b4c6 <RNSEnquire+0xe6>
		{
			insData_send[0] = 17;
 800b468:	4b27      	ldr	r3, [pc, #156]	; (800b508 <RNSEnquire+0x128>)
 800b46a:	2211      	movs	r2, #17
 800b46c:	701a      	strb	r2, [r3, #0]
			insData_send[1] = rns->ins.instruction;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	791a      	ldrb	r2, [r3, #4]
 800b472:	4b25      	ldr	r3, [pc, #148]	; (800b508 <RNSEnquire+0x128>)
 800b474:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	2302      	movs	r3, #2
 800b47c:	4a22      	ldr	r2, [pc, #136]	; (800b508 <RNSEnquire+0x128>)
 800b47e:	2117      	movs	r1, #23
 800b480:	f7f8 f988 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0].data),8);
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	6818      	ldr	r0, [r3, #0]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	f103 0208 	add.w	r2, r3, #8
 800b48e:	2308      	movs	r3, #8
 800b490:	2118      	movs	r1, #24
 800b492:	f7f8 f97f 	bl	8003794 <CAN_TxMsg>
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2].data),8);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	f103 0210 	add.w	r2, r3, #16
 800b4a0:	2308      	movs	r3, #8
 800b4a2:	2119      	movs	r1, #25
 800b4a4:	f7f8 f976 	bl	8003794 <CAN_TxMsg>

			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15; // Toggle LED3
 800b4a8:	4b19      	ldr	r3, [pc, #100]	; (800b510 <RNSEnquire+0x130>)
 800b4aa:	785b      	ldrb	r3, [r3, #1]
 800b4ac:	b25b      	sxtb	r3, r3
 800b4ae:	4a18      	ldr	r2, [pc, #96]	; (800b510 <RNSEnquire+0x130>)
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	09db      	lsrs	r3, r3, #7
 800b4b6:	b2d9      	uxtb	r1, r3
 800b4b8:	7853      	ldrb	r3, [r2, #1]
 800b4ba:	f361 13c7 	bfi	r3, r1, #7, #1
 800b4be:	7053      	strb	r3, [r2, #1]
			wait = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e002      	b.n	800b4cc <RNSEnquire+0xec>
		}
		else wait++;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING)
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d0c4      	beq.n	800b460 <RNSEnquire+0x80>

	}

	rns->enq.enquiry = parameter;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	79fa      	ldrb	r2, [r7, #7]
 800b4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	64da      	str	r2, [r3, #76]	; 0x4c


	return 1;
 800b4fe:	2301      	movs	r3, #1
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	2000a904 	.word	0x2000a904
 800b50c:	001e847f 	.word	0x001e847f
 800b510:	40020814 	.word	0x40020814

0800b514 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800b514:	b580      	push	{r7, lr}
 800b516:	b08c      	sub	sp, #48	; 0x30
 800b518:	af02      	add	r7, sp, #8
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b522:	f107 0318 	add.w	r3, r7, #24
 800b526:	2200      	movs	r2, #0
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	605a      	str	r2, [r3, #4]
 800b52c:	609a      	str	r2, [r3, #8]
 800b52e:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b530:	f107 0310 	add.w	r3, r7, #16
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	4a6d      	ldr	r2, [pc, #436]	; (800b6f4 <ServoxInit+0x1e0>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d106      	bne.n	800b550 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	4a6c      	ldr	r2, [pc, #432]	; (800b6f8 <ServoxInit+0x1e4>)
 800b546:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	22a7      	movs	r2, #167	; 0xa7
 800b54c:	605a      	str	r2, [r3, #4]
 800b54e:	e078      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	4a6a      	ldr	r2, [pc, #424]	; (800b6fc <ServoxInit+0x1e8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d107      	bne.n	800b568 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b55e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	2253      	movs	r2, #83	; 0x53
 800b564:	605a      	str	r2, [r3, #4]
 800b566:	e06c      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	4a65      	ldr	r2, [pc, #404]	; (800b700 <ServoxInit+0x1ec>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d106      	bne.n	800b57e <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4a64      	ldr	r2, [pc, #400]	; (800b704 <ServoxInit+0x1f0>)
 800b574:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2253      	movs	r2, #83	; 0x53
 800b57a:	605a      	str	r2, [r3, #4]
 800b57c:	e061      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	4a61      	ldr	r2, [pc, #388]	; (800b708 <ServoxInit+0x1f4>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d106      	bne.n	800b594 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	4a60      	ldr	r2, [pc, #384]	; (800b70c <ServoxInit+0x1f8>)
 800b58a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2253      	movs	r2, #83	; 0x53
 800b590:	605a      	str	r2, [r3, #4]
 800b592:	e056      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	4a5e      	ldr	r2, [pc, #376]	; (800b710 <ServoxInit+0x1fc>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d106      	bne.n	800b5aa <ServoxInit+0x96>
			htimx->Instance = TIM5;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4a5d      	ldr	r2, [pc, #372]	; (800b714 <ServoxInit+0x200>)
 800b5a0:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2253      	movs	r2, #83	; 0x53
 800b5a6:	605a      	str	r2, [r3, #4]
 800b5a8:	e04b      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	4a5a      	ldr	r2, [pc, #360]	; (800b718 <ServoxInit+0x204>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d106      	bne.n	800b5c0 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	4a59      	ldr	r2, [pc, #356]	; (800b71c <ServoxInit+0x208>)
 800b5b6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	22a7      	movs	r2, #167	; 0xa7
 800b5bc:	605a      	str	r2, [r3, #4]
 800b5be:	e040      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4a57      	ldr	r2, [pc, #348]	; (800b720 <ServoxInit+0x20c>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d106      	bne.n	800b5d6 <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4a56      	ldr	r2, [pc, #344]	; (800b724 <ServoxInit+0x210>)
 800b5cc:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	22a7      	movs	r2, #167	; 0xa7
 800b5d2:	605a      	str	r2, [r3, #4]
 800b5d4:	e035      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	4a53      	ldr	r2, [pc, #332]	; (800b728 <ServoxInit+0x214>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d106      	bne.n	800b5ec <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	4a52      	ldr	r2, [pc, #328]	; (800b72c <ServoxInit+0x218>)
 800b5e2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	22a7      	movs	r2, #167	; 0xa7
 800b5e8:	605a      	str	r2, [r3, #4]
 800b5ea:	e02a      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	4a50      	ldr	r2, [pc, #320]	; (800b730 <ServoxInit+0x21c>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d106      	bne.n	800b602 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	4a4f      	ldr	r2, [pc, #316]	; (800b734 <ServoxInit+0x220>)
 800b5f8:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	22a7      	movs	r2, #167	; 0xa7
 800b5fe:	605a      	str	r2, [r3, #4]
 800b600:	e01f      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	4a4c      	ldr	r2, [pc, #304]	; (800b738 <ServoxInit+0x224>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d106      	bne.n	800b618 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	4a4b      	ldr	r2, [pc, #300]	; (800b73c <ServoxInit+0x228>)
 800b60e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2253      	movs	r2, #83	; 0x53
 800b614:	605a      	str	r2, [r3, #4]
 800b616:	e014      	b.n	800b642 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	4a49      	ldr	r2, [pc, #292]	; (800b740 <ServoxInit+0x22c>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d106      	bne.n	800b62e <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	4a48      	ldr	r2, [pc, #288]	; (800b744 <ServoxInit+0x230>)
 800b624:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2253      	movs	r2, #83	; 0x53
 800b62a:	605a      	str	r2, [r3, #4]
 800b62c:	e009      	b.n	800b642 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	4a45      	ldr	r2, [pc, #276]	; (800b748 <ServoxInit+0x234>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d105      	bne.n	800b642 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	4a44      	ldr	r2, [pc, #272]	; (800b74c <ServoxInit+0x238>)
 800b63a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2253      	movs	r2, #83	; 0x53
 800b640:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800b64e:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2200      	movs	r2, #0
 800b654:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2280      	movs	r2, #128	; 0x80
 800b65a:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800b65c:	68b8      	ldr	r0, [r7, #8]
 800b65e:	f00f f9bd 	bl	801a9dc <HAL_TIM_Base_Init>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <ServoxInit+0x158>
		  {
		    Error_Handler();
 800b668:	f7f9 f864 	bl	8004734 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b670:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800b672:	f107 0318 	add.w	r3, r7, #24
 800b676:	4619      	mov	r1, r3
 800b678:	68b8      	ldr	r0, [r7, #8]
 800b67a:	f00f fd23 	bl	801b0c4 <HAL_TIM_ConfigClockSource>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <ServoxInit+0x174>
		  {
		    Error_Handler();
 800b684:	f7f9 f856 	bl	8004734 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800b688:	68b8      	ldr	r0, [r7, #8]
 800b68a:	f00f fa1a 	bl	801aac2 <HAL_TIM_PWM_Init>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <ServoxInit+0x184>
			{
				Error_Handler();
 800b694:	f7f9 f84e 	bl	8004734 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b698:	2300      	movs	r3, #0
 800b69a:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800b6a0:	f107 0310 	add.w	r3, r7, #16
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	68b8      	ldr	r0, [r7, #8]
 800b6a8:	f010 f908 	bl	801b8bc <HAL_TIMEx_MasterConfigSynchronization>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <ServoxInit+0x1a2>
		{
			Error_Handler();
 800b6b2:	f7f9 f83f 	bl	8004734 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800b6b6:	68b8      	ldr	r0, [r7, #8]
 800b6b8:	f00f f9bb 	bl	801aa32 <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b6bc:	8879      	ldrh	r1, [r7, #2]
 800b6be:	2301      	movs	r3, #1
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	2302      	movs	r3, #2
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7f5 fe1a 	bl	8001300 <GPIOPinsInit>

	servo->htimx = htimx;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d6:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 800b6d8:	887b      	ldrh	r3, [r7, #2]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6de:	68b8      	ldr	r0, [r7, #8]
 800b6e0:	f7f5 ffee 	bl	80016c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	621a      	str	r2, [r3, #32]
}
 800b6ea:	bf00      	nop
 800b6ec:	3728      	adds	r7, #40	; 0x28
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20005f2c 	.word	0x20005f2c
 800b6f8:	40010000 	.word	0x40010000
 800b6fc:	20006030 	.word	0x20006030
 800b700:	20005ce0 	.word	0x20005ce0
 800b704:	40000400 	.word	0x40000400
 800b708:	20005b1c 	.word	0x20005b1c
 800b70c:	40000800 	.word	0x40000800
 800b710:	20005ca0 	.word	0x20005ca0
 800b714:	40000c00 	.word	0x40000c00
 800b718:	20005adc 	.word	0x20005adc
 800b71c:	40010400 	.word	0x40010400
 800b720:	20005f6c 	.word	0x20005f6c
 800b724:	40014000 	.word	0x40014000
 800b728:	20005bfc 	.word	0x20005bfc
 800b72c:	40014400 	.word	0x40014400
 800b730:	20005e44 	.word	0x20005e44
 800b734:	40014800 	.word	0x40014800
 800b738:	20006150 	.word	0x20006150
 800b73c:	40001800 	.word	0x40001800
 800b740:	20005dc4 	.word	0x20005dc4
 800b744:	40001c00 	.word	0x40001c00
 800b748:	20006110 	.word	0x20006110
 800b74c:	40002000 	.word	0x40002000

0800b750 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d204      	bcs.n	800b76e <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	695a      	ldr	r2, [r3, #20]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	621a      	str	r2, [r3, #32]
 800b76c:	e00c      	b.n	800b788 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	429a      	cmp	r2, r3
 800b776:	d904      	bls.n	800b782 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	699a      	ldr	r2, [r3, #24]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	621a      	str	r2, [r3, #32]
 800b780:	e002      	b.n	800b788 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <ServoSetPulse+0x4e>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	6a12      	ldr	r2, [r2, #32]
 800b79a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800b79c:	e01b      	b.n	800b7d6 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d106      	bne.n	800b7b4 <ServoSetPulse+0x64>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 800b7b2:	e010      	b.n	800b7d6 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	2b08      	cmp	r3, #8
 800b7ba:	d106      	bne.n	800b7ca <ServoSetPulse+0x7a>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800b7c8:	e005      	b.n	800b7d6 <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a1b      	ldr	r3, [r3, #32]
 800b7d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	60f8      	str	r0, [r7, #12]
 800b7ea:	60b9      	str	r1, [r7, #8]
 800b7ec:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	619a      	str	r2, [r3, #24]
}
 800b7fa:	bf00      	nop
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
	...

0800b808 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 800b80c:	4802      	ldr	r0, [pc, #8]	; (800b818 <SPI1_IRQHandler+0x10>)
 800b80e:	f00e ffc7 	bl	801a7a0 <HAL_SPI_IRQHandler>
}
 800b812:	bf00      	nop
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20009e70 	.word	0x20009e70

0800b81c <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 800b820:	4802      	ldr	r0, [pc, #8]	; (800b82c <SPI2_IRQHandler+0x10>)
 800b822:	f00e ffbd 	bl	801a7a0 <HAL_SPI_IRQHandler>
}
 800b826:	bf00      	nop
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	200068dc 	.word	0x200068dc

0800b830 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 800b834:	4802      	ldr	r0, [pc, #8]	; (800b840 <SPI3_IRQHandler+0x10>)
 800b836:	f00e ffb3 	bl	801a7a0 <HAL_SPI_IRQHandler>
}
 800b83a:	bf00      	nop
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200078e8 	.word	0x200078e8

0800b844 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800b84a:	f00a fbd3 	bl	8015ff4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800b84e:	f7f7 fac7 	bl	8002de0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b852:	2301      	movs	r3, #1
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	2302      	movs	r3, #2
 800b858:	2201      	movs	r2, #1
 800b85a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b85e:	48c6      	ldr	r0, [pc, #792]	; (800bb78 <Initialize+0x334>)
 800b860:	f7f5 fd4e 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b864:	2301      	movs	r3, #1
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	2302      	movs	r3, #2
 800b86a:	2201      	movs	r2, #1
 800b86c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b870:	48c1      	ldr	r0, [pc, #772]	; (800bb78 <Initialize+0x334>)
 800b872:	f7f5 fd45 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b876:	2301      	movs	r3, #1
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	2302      	movs	r3, #2
 800b87c:	2201      	movs	r2, #1
 800b87e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b882:	48bd      	ldr	r0, [pc, #756]	; (800bb78 <Initialize+0x334>)
 800b884:	f7f5 fd3c 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b888:	2301      	movs	r3, #1
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	2302      	movs	r3, #2
 800b88e:	2200      	movs	r2, #0
 800b890:	2180      	movs	r1, #128	; 0x80
 800b892:	48ba      	ldr	r0, [pc, #744]	; (800bb7c <Initialize+0x338>)
 800b894:	f7f5 fd34 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800b898:	2301      	movs	r3, #1
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	2302      	movs	r3, #2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	48b7      	ldr	r0, [pc, #732]	; (800bb80 <Initialize+0x33c>)
 800b8a4:	f7f5 fd2c 	bl	8001300 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b8b4:	48b2      	ldr	r0, [pc, #712]	; (800bb80 <Initialize+0x33c>)
 800b8b6:	f7f5 fd23 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	2301      	movs	r3, #1
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b8c6:	48ae      	ldr	r0, [pc, #696]	; (800bb80 <Initialize+0x33c>)
 800b8c8:	f7f5 fd1a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b8d8:	48a9      	ldr	r0, [pc, #676]	; (800bb80 <Initialize+0x33c>)
 800b8da:	f7f5 fd11 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b8de:	2301      	movs	r3, #1
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b8ea:	48a5      	ldr	r0, [pc, #660]	; (800bb80 <Initialize+0x33c>)
 800b8ec:	f7f5 fd08 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b8fc:	489f      	ldr	r0, [pc, #636]	; (800bb7c <Initialize+0x338>)
 800b8fe:	f7f5 fcff 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b902:	2301      	movs	r3, #1
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	2301      	movs	r3, #1
 800b908:	2200      	movs	r2, #0
 800b90a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b90e:	489b      	ldr	r0, [pc, #620]	; (800bb7c <Initialize+0x338>)
 800b910:	f7f5 fcf6 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b914:	2301      	movs	r3, #1
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	2301      	movs	r3, #1
 800b91a:	2200      	movs	r2, #0
 800b91c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b920:	4898      	ldr	r0, [pc, #608]	; (800bb84 <Initialize+0x340>)
 800b922:	f7f5 fced 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b926:	2301      	movs	r3, #1
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	2301      	movs	r3, #1
 800b92c:	2200      	movs	r2, #0
 800b92e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b932:	4894      	ldr	r0, [pc, #592]	; (800bb84 <Initialize+0x340>)
 800b934:	f7f5 fce4 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b938:	2301      	movs	r3, #1
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	2301      	movs	r3, #1
 800b93e:	2200      	movs	r2, #0
 800b940:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b944:	488c      	ldr	r0, [pc, #560]	; (800bb78 <Initialize+0x334>)
 800b946:	f7f5 fcdb 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b94a:	2301      	movs	r3, #1
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	2301      	movs	r3, #1
 800b950:	2200      	movs	r2, #0
 800b952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b956:	488c      	ldr	r0, [pc, #560]	; (800bb88 <Initialize+0x344>)
 800b958:	f7f5 fcd2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b95c:	2301      	movs	r3, #1
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	2301      	movs	r3, #1
 800b962:	2200      	movs	r2, #0
 800b964:	2108      	movs	r1, #8
 800b966:	4887      	ldr	r0, [pc, #540]	; (800bb84 <Initialize+0x340>)
 800b968:	f7f5 fcca 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b96c:	2301      	movs	r3, #1
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	2301      	movs	r3, #1
 800b972:	2200      	movs	r2, #0
 800b974:	2110      	movs	r1, #16
 800b976:	4883      	ldr	r0, [pc, #524]	; (800bb84 <Initialize+0x340>)
 800b978:	f7f5 fcc2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b97c:	2301      	movs	r3, #1
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	2301      	movs	r3, #1
 800b982:	2200      	movs	r2, #0
 800b984:	2180      	movs	r1, #128	; 0x80
 800b986:	487f      	ldr	r0, [pc, #508]	; (800bb84 <Initialize+0x340>)
 800b988:	f7f5 fcba 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b98c:	2301      	movs	r3, #1
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	2301      	movs	r3, #1
 800b992:	2200      	movs	r2, #0
 800b994:	2120      	movs	r1, #32
 800b996:	4879      	ldr	r0, [pc, #484]	; (800bb7c <Initialize+0x338>)
 800b998:	f7f5 fcb2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b99c:	2301      	movs	r3, #1
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2140      	movs	r1, #64	; 0x40
 800b9a6:	4875      	ldr	r0, [pc, #468]	; (800bb7c <Initialize+0x338>)
 800b9a8:	f7f5 fcaa 	bl	8001300 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2101      	movs	r1, #1
 800b9b6:	4870      	ldr	r0, [pc, #448]	; (800bb78 <Initialize+0x334>)
 800b9b8:	f7f5 fca2 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9bc:	2301      	movs	r3, #1
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2102      	movs	r1, #2
 800b9c6:	486c      	ldr	r0, [pc, #432]	; (800bb78 <Initialize+0x334>)
 800b9c8:	f7f5 fc9a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2104      	movs	r1, #4
 800b9d6:	4868      	ldr	r0, [pc, #416]	; (800bb78 <Initialize+0x334>)
 800b9d8:	f7f5 fc92 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2108      	movs	r1, #8
 800b9e6:	4864      	ldr	r0, [pc, #400]	; (800bb78 <Initialize+0x334>)
 800b9e8:	f7f5 fc8a 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	2110      	movs	r1, #16
 800b9f6:	4860      	ldr	r0, [pc, #384]	; (800bb78 <Initialize+0x334>)
 800b9f8:	f7f5 fc82 	bl	8001300 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2301      	movs	r3, #1
 800ba02:	2200      	movs	r2, #0
 800ba04:	2120      	movs	r1, #32
 800ba06:	485c      	ldr	r0, [pc, #368]	; (800bb78 <Initialize+0x334>)
 800ba08:	f7f5 fc7a 	bl	8001300 <GPIOPinsInit>

	//Unused peripheral pins can be used as GPIO Input or Output
//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800ba0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba10:	9303      	str	r3, [sp, #12]
 800ba12:	4b5b      	ldr	r3, [pc, #364]	; (800bb80 <Initialize+0x33c>)
 800ba14:	9302      	str	r3, [sp, #8]
 800ba16:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	4b58      	ldr	r3, [pc, #352]	; (800bb80 <Initialize+0x33c>)
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	2380      	movs	r3, #128	; 0x80
 800ba22:	4a57      	ldr	r2, [pc, #348]	; (800bb80 <Initialize+0x33c>)
 800ba24:	2101      	movs	r1, #1
 800ba26:	4859      	ldr	r0, [pc, #356]	; (800bb8c <Initialize+0x348>)
 800ba28:	f7f6 f9be 	bl	8001da8 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ba2c:	2003      	movs	r0, #3
 800ba2e:	f00b faa0 	bl	8016f72 <HAL_NVIC_SetPriorityGrouping>


	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800ba32:	4b57      	ldr	r3, [pc, #348]	; (800bb90 <Initialize+0x34c>)
 800ba34:	2208      	movs	r2, #8
 800ba36:	4957      	ldr	r1, [pc, #348]	; (800bb94 <Initialize+0x350>)
 800ba38:	4857      	ldr	r0, [pc, #348]	; (800bb98 <Initialize+0x354>)
 800ba3a:	f7f8 f913 	bl	8003c64 <I2CX_DMA_RX_Init>
	I2CxInit (&hi2c2,main_board_1, CLOCK_SPEED_100KHz,ENABLE);
 800ba3e:	2301      	movs	r3, #1
 800ba40:	4a56      	ldr	r2, [pc, #344]	; (800bb9c <Initialize+0x358>)
 800ba42:	2108      	movs	r1, #8
 800ba44:	4856      	ldr	r0, [pc, #344]	; (800bba0 <Initialize+0x35c>)
 800ba46:	f7f8 f85b 	bl	8003b00 <I2CxInit>

	//Servo Driver - recommended to use 100KHz I2C as 400KHz hang frequently
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800ba4a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ba4e:	4955      	ldr	r1, [pc, #340]	; (800bba4 <Initialize+0x360>)
 800ba50:	4855      	ldr	r0, [pc, #340]	; (800bba8 <Initialize+0x364>)
 800ba52:	f7f7 fcd3 	bl	80033fc <UARTx_DMA_Rx_Init>
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
	UARTInit(&huart3, 115200, ENABLE); // ROS UART
 800ba56:	2201      	movs	r2, #1
 800ba58:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ba5c:	4853      	ldr	r0, [pc, #332]	; (800bbac <Initialize+0x368>)
 800ba5e:	f7f7 fbc5 	bl	80031ec <UARTInit>
	UARTInit(&huart4, 115200, ENABLE); // ROS UART
 800ba62:	2201      	movs	r2, #1
 800ba64:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ba68:	4851      	ldr	r0, [pc, #324]	; (800bbb0 <Initialize+0x36c>)
 800ba6a:	f7f7 fbbf 	bl	80031ec <UARTInit>
	UARTInit(&huart5, 115200, ENABLE);
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800ba74:	484f      	ldr	r0, [pc, #316]	; (800bbb4 <Initialize+0x370>)
 800ba76:	f7f7 fbb9 	bl	80031ec <UARTInit>

	QEIInit(&htim1);
 800ba7a:	484f      	ldr	r0, [pc, #316]	; (800bbb8 <Initialize+0x374>)
 800ba7c:	f7f5 ffac 	bl	80019d8 <QEIInit>
	QEIInit(&htim4);
 800ba80:	484e      	ldr	r0, [pc, #312]	; (800bbbc <Initialize+0x378>)
 800ba82:	f7f5 ffa9 	bl	80019d8 <QEIInit>
	QEIInit(&htim8);
 800ba86:	484e      	ldr	r0, [pc, #312]	; (800bbc0 <Initialize+0x37c>)
 800ba88:	f7f5 ffa6 	bl	80019d8 <QEIInit>

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	2300      	movs	r3, #0
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	2300      	movs	r3, #0
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	2104      	movs	r1, #4
 800ba9e:	4849      	ldr	r0, [pc, #292]	; (800bbc4 <Initialize+0x380>)
 800baa0:	f7f7 fdb8 	bl	8003614 <CANxInit>
	CANxInit(&hcan2,4,CAN_FILTER_FIFO1,0,0,14,CAN_500KHz);
 800baa4:	2300      	movs	r3, #0
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	230e      	movs	r3, #14
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	2300      	movs	r3, #0
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	2300      	movs	r3, #0
 800bab2:	2201      	movs	r2, #1
 800bab4:	2104      	movs	r1, #4
 800bab6:	4844      	ldr	r0, [pc, #272]	; (800bbc8 <Initialize+0x384>)
 800bab8:	f7f7 fdac 	bl	8003614 <CANxInit>

	PWMTimeBaseInit(&htim3, 19999, 83);
 800babc:	2253      	movs	r2, #83	; 0x53
 800babe:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800bac2:	4842      	ldr	r0, [pc, #264]	; (800bbcc <Initialize+0x388>)
 800bac4:	f7f5 fd16 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 800bac8:	2301      	movs	r3, #1
 800baca:	4a2c      	ldr	r2, [pc, #176]	; (800bb7c <Initialize+0x338>)
 800bacc:	2108      	movs	r1, #8
 800bace:	483f      	ldr	r0, [pc, #252]	; (800bbcc <Initialize+0x388>)
 800bad0:	f7f5 fdf6 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 800bad4:	2302      	movs	r3, #2
 800bad6:	4a29      	ldr	r2, [pc, #164]	; (800bb7c <Initialize+0x338>)
 800bad8:	210c      	movs	r1, #12
 800bada:	483c      	ldr	r0, [pc, #240]	; (800bbcc <Initialize+0x388>)
 800badc:	f7f5 fdf0 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 19999, 83);
 800bae0:	2253      	movs	r2, #83	; 0x53
 800bae2:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800bae6:	483a      	ldr	r0, [pc, #232]	; (800bbd0 <Initialize+0x38c>)
 800bae8:	f7f5 fd04 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 800baec:	2301      	movs	r3, #1
 800baee:	4a26      	ldr	r2, [pc, #152]	; (800bb88 <Initialize+0x344>)
 800baf0:	2100      	movs	r1, #0
 800baf2:	4837      	ldr	r0, [pc, #220]	; (800bbd0 <Initialize+0x38c>)
 800baf4:	f7f5 fde4 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800baf8:	2302      	movs	r3, #2
 800bafa:	4a23      	ldr	r2, [pc, #140]	; (800bb88 <Initialize+0x344>)
 800bafc:	2104      	movs	r1, #4
 800bafe:	4834      	ldr	r0, [pc, #208]	; (800bbd0 <Initialize+0x38c>)
 800bb00:	f7f5 fdde 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800bb04:	2304      	movs	r3, #4
 800bb06:	4a20      	ldr	r2, [pc, #128]	; (800bb88 <Initialize+0x344>)
 800bb08:	2108      	movs	r1, #8
 800bb0a:	4831      	ldr	r0, [pc, #196]	; (800bbd0 <Initialize+0x38c>)
 800bb0c:	f7f5 fdd8 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 800bb10:	2308      	movs	r3, #8
 800bb12:	4a1d      	ldr	r2, [pc, #116]	; (800bb88 <Initialize+0x344>)
 800bb14:	210c      	movs	r1, #12
 800bb16:	482e      	ldr	r0, [pc, #184]	; (800bbd0 <Initialize+0x38c>)
 800bb18:	f7f5 fdd2 	bl	80016c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 19999, 167);
 800bb1c:	22a7      	movs	r2, #167	; 0xa7
 800bb1e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800bb22:	482c      	ldr	r0, [pc, #176]	; (800bbd4 <Initialize+0x390>)
 800bb24:	f7f5 fce6 	bl	80014f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800bb28:	2320      	movs	r3, #32
 800bb2a:	4a15      	ldr	r2, [pc, #84]	; (800bb80 <Initialize+0x33c>)
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	4829      	ldr	r0, [pc, #164]	; (800bbd4 <Initialize+0x390>)
 800bb30:	f7f5 fdc6 	bl	80016c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	4a12      	ldr	r2, [pc, #72]	; (800bb80 <Initialize+0x33c>)
 800bb38:	2104      	movs	r1, #4
 800bb3a:	4826      	ldr	r0, [pc, #152]	; (800bbd4 <Initialize+0x390>)
 800bb3c:	f7f5 fdc0 	bl	80016c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 800bb40:	2380      	movs	r3, #128	; 0x80
 800bb42:	9302      	str	r3, [sp, #8]
 800bb44:	2340      	movs	r3, #64	; 0x40
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	4b23      	ldr	r3, [pc, #140]	; (800bbd8 <Initialize+0x394>)
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	220c      	movs	r2, #12
 800bb50:	491e      	ldr	r1, [pc, #120]	; (800bbcc <Initialize+0x388>)
 800bb52:	4822      	ldr	r0, [pc, #136]	; (800bbdc <Initialize+0x398>)
 800bb54:	f7f5 fa90 	bl	8001078 <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800bb58:	2320      	movs	r3, #32
 800bb5a:	9302      	str	r3, [sp, #8]
 800bb5c:	2310      	movs	r3, #16
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	4b1d      	ldr	r3, [pc, #116]	; (800bbd8 <Initialize+0x394>)
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	2208      	movs	r2, #8
 800bb68:	4918      	ldr	r1, [pc, #96]	; (800bbcc <Initialize+0x388>)
 800bb6a:	481d      	ldr	r0, [pc, #116]	; (800bbe0 <Initialize+0x39c>)
 800bb6c:	f7f5 fa84 	bl	8001078 <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 800bb70:	2308      	movs	r3, #8
 800bb72:	9302      	str	r3, [sp, #8]
 800bb74:	2304      	movs	r3, #4
 800bb76:	e035      	b.n	800bbe4 <Initialize+0x3a0>
 800bb78:	40020800 	.word	0x40020800
 800bb7c:	40020400 	.word	0x40020400
 800bb80:	40021000 	.word	0x40021000
 800bb84:	40020c00 	.word	0x40020c00
 800bb88:	40020000 	.word	0x40020000
 800bb8c:	200097d4 	.word	0x200097d4
 800bb90:	00061a80 	.word	0x00061a80
 800bb94:	2000a1d8 	.word	0x2000a1d8
 800bb98:	20006bb0 	.word	0x20006bb0
 800bb9c:	000186a0 	.word	0x000186a0
 800bba0:	20006c0c 	.word	0x20006c0c
 800bba4:	20005a78 	.word	0x20005a78
 800bba8:	20006070 	.word	0x20006070
 800bbac:	20005bbc 	.word	0x20005bbc
 800bbb0:	20005ff0 	.word	0x20005ff0
 800bbb4:	20005d24 	.word	0x20005d24
 800bbb8:	20005f2c 	.word	0x20005f2c
 800bbbc:	20005b1c 	.word	0x20005b1c
 800bbc0:	20005adc 	.word	0x20005adc
 800bbc4:	2000a15c 	.word	0x2000a15c
 800bbc8:	2000916c 	.word	0x2000916c
 800bbcc:	20005ce0 	.word	0x20005ce0
 800bbd0:	20005ca0 	.word	0x20005ca0
 800bbd4:	20005f6c 	.word	0x20005f6c
 800bbd8:	200097f0 	.word	0x200097f0
 800bbdc:	2000a7a4 	.word	0x2000a7a4
 800bbe0:	20007878 	.word	0x20007878
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	4b23      	ldr	r3, [pc, #140]	; (800bc74 <Initialize+0x430>)
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	2300      	movs	r3, #0
 800bbec:	2200      	movs	r2, #0
 800bbee:	4922      	ldr	r1, [pc, #136]	; (800bc78 <Initialize+0x434>)
 800bbf0:	4822      	ldr	r0, [pc, #136]	; (800bc7c <Initialize+0x438>)
 800bbf2:	f7f5 fa41 	bl	8001078 <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	9302      	str	r3, [sp, #8]
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	4b1d      	ldr	r3, [pc, #116]	; (800bc74 <Initialize+0x430>)
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	2300      	movs	r3, #0
 800bc04:	2204      	movs	r2, #4
 800bc06:	491c      	ldr	r1, [pc, #112]	; (800bc78 <Initialize+0x434>)
 800bc08:	481d      	ldr	r0, [pc, #116]	; (800bc80 <Initialize+0x43c>)
 800bc0a:	f7f5 fa35 	bl	8001078 <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800bc0e:	2380      	movs	r3, #128	; 0x80
 800bc10:	9302      	str	r3, [sp, #8]
 800bc12:	2340      	movs	r3, #64	; 0x40
 800bc14:	9301      	str	r3, [sp, #4]
 800bc16:	4b1b      	ldr	r3, [pc, #108]	; (800bc84 <Initialize+0x440>)
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	220c      	movs	r2, #12
 800bc1e:	491a      	ldr	r1, [pc, #104]	; (800bc88 <Initialize+0x444>)
 800bc20:	481a      	ldr	r0, [pc, #104]	; (800bc8c <Initialize+0x448>)
 800bc22:	f7f5 fa29 	bl	8001078 <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 800bc26:	2320      	movs	r3, #32
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	2310      	movs	r3, #16
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	4b15      	ldr	r3, [pc, #84]	; (800bc84 <Initialize+0x440>)
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	2300      	movs	r3, #0
 800bc34:	2208      	movs	r2, #8
 800bc36:	4914      	ldr	r1, [pc, #80]	; (800bc88 <Initialize+0x444>)
 800bc38:	4815      	ldr	r0, [pc, #84]	; (800bc90 <Initialize+0x44c>)
 800bc3a:	f7f5 fa1d 	bl	8001078 <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800bc3e:	2308      	movs	r3, #8
 800bc40:	9302      	str	r3, [sp, #8]
 800bc42:	2304      	movs	r3, #4
 800bc44:	9301      	str	r3, [sp, #4]
 800bc46:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <Initialize+0x440>)
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2204      	movs	r2, #4
 800bc4e:	490e      	ldr	r1, [pc, #56]	; (800bc88 <Initialize+0x444>)
 800bc50:	4810      	ldr	r0, [pc, #64]	; (800bc94 <Initialize+0x450>)
 800bc52:	f7f5 fa11 	bl	8001078 <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 800bc56:	2302      	movs	r3, #2
 800bc58:	9302      	str	r3, [sp, #8]
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <Initialize+0x440>)
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	2300      	movs	r3, #0
 800bc64:	2200      	movs	r2, #0
 800bc66:	4908      	ldr	r1, [pc, #32]	; (800bc88 <Initialize+0x444>)
 800bc68:	480b      	ldr	r0, [pc, #44]	; (800bc98 <Initialize+0x454>)
 800bc6a:	f7f5 fa05 	bl	8001078 <BDCInit>

//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
}
 800bc6e:	bf00      	nop
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	200097f0 	.word	0x200097f0
 800bc78:	20005f6c 	.word	0x20005f6c
 800bc7c:	20006c6c 	.word	0x20006c6c
 800bc80:	20009894 	.word	0x20009894
 800bc84:	200097ec 	.word	0x200097ec
 800bc88:	20005ca0 	.word	0x20005ca0
 800bc8c:	2000a61c 	.word	0x2000a61c
 800bc90:	20009914 	.word	0x20009914
 800bc94:	20009938 	.word	0x20009938
 800bc98:	20007438 	.word	0x20007438

0800bc9c <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 800bca0:	4802      	ldr	r0, [pc, #8]	; (800bcac <CAN1_RX0_IRQHandler+0x10>)
 800bca2:	f00a fe51 	bl	8016948 <HAL_CAN_IRQHandler>

}
 800bca6:	bf00      	nop
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	2000a15c 	.word	0x2000a15c

0800bcb0 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800bcb4:	4802      	ldr	r0, [pc, #8]	; (800bcc0 <CAN2_RX1_IRQHandler+0x10>)
 800bcb6:	f00a fe47 	bl	8016948 <HAL_CAN_IRQHandler>

}
 800bcba:	bf00      	nop
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	2000916c 	.word	0x2000916c

0800bcc4 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	71fb      	strb	r3, [r7, #7]

	switch(packet_src){
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d008      	beq.n	800bce6 <CAN_PROCESS+0x22>
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	dc36      	bgt.n	800bd46 <CAN_PROCESS+0x82>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <CAN_PROCESS+0x28>
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d132      	bne.n	800bd46 <CAN_PROCESS+0x82>

	case VESC_PACKET:
		decode_VESC();
 800bce0:	f003 fbe4 	bl	800f4ac <decode_VESC>
		break;
 800bce4:	e02f      	b.n	800bd46 <CAN_PROCESS+0x82>

	case ODRIVE_PACKET:
		OdriveCAN_Handler();
 800bce6:	f7f9 fac9 	bl	800527c <OdriveCAN_Handler>
		break;
 800bcea:	e02c      	b.n	800bd46 <CAN_PROCESS+0x82>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 800bcec:	4b18      	ldr	r3, [pc, #96]	; (800bd50 <CAN_PROCESS+0x8c>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d107      	bne.n	800bd04 <CAN_PROCESS+0x40>
			rns.RNS_data.common_instruction = insData_receive[1];
 800bcf4:	4b16      	ldr	r3, [pc, #88]	; (800bd50 <CAN_PROCESS+0x8c>)
 800bcf6:	785a      	ldrb	r2, [r3, #1]
 800bcf8:	4b16      	ldr	r3, [pc, #88]	; (800bd54 <CAN_PROCESS+0x90>)
 800bcfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 800bcfe:	4b14      	ldr	r3, [pc, #80]	; (800bd50 <CAN_PROCESS+0x8c>)
 800bd00:	2202      	movs	r2, #2
 800bd02:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800bd04:	4b12      	ldr	r3, [pc, #72]	; (800bd50 <CAN_PROCESS+0x8c>)
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	2b11      	cmp	r3, #17
 800bd0a:	d11b      	bne.n	800bd44 <CAN_PROCESS+0x80>
			if(buf2_flag == 1){
 800bd0c:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <CAN_PROCESS+0x94>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d117      	bne.n	800bd44 <CAN_PROCESS+0x80>
				rns.RNS_data.common_instruction = insData_receive[1];
 800bd14:	4b0e      	ldr	r3, [pc, #56]	; (800bd50 <CAN_PROCESS+0x8c>)
 800bd16:	785a      	ldrb	r2, [r3, #1]
 800bd18:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <CAN_PROCESS+0x90>)
 800bd1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <CAN_PROCESS+0x98>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a0c      	ldr	r2, [pc, #48]	; (800bd54 <CAN_PROCESS+0x90>)
 800bd24:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800bd26:	4b0d      	ldr	r3, [pc, #52]	; (800bd5c <CAN_PROCESS+0x98>)
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	4a0a      	ldr	r2, [pc, #40]	; (800bd54 <CAN_PROCESS+0x90>)
 800bd2c:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 800bd2e:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <CAN_PROCESS+0x9c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a08      	ldr	r2, [pc, #32]	; (800bd54 <CAN_PROCESS+0x90>)
 800bd34:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800bd36:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <CAN_PROCESS+0x9c>)
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	4a06      	ldr	r2, [pc, #24]	; (800bd54 <CAN_PROCESS+0x90>)
 800bd3c:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 800bd3e:	4b04      	ldr	r3, [pc, #16]	; (800bd50 <CAN_PROCESS+0x8c>)
 800bd40:	2203      	movs	r2, #3
 800bd42:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800bd44:	bf00      	nop
	}
}
 800bd46:	bf00      	nop
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20006a64 	.word	0x20006a64
 800bd54:	20009074 	.word	0x20009074
 800bd58:	200002d0 	.word	0x200002d0
 800bd5c:	20009e5c 	.word	0x20009e5c
 800bd60:	20009fc0 	.word	0x20009fc0

0800bd64 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bd64:	b5b0      	push	{r4, r5, r7, lr}
 800bd66:	b08c      	sub	sp, #48	; 0x30
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4aaa      	ldr	r2, [pc, #680]	; (800c020 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	f040 80b4 	bne.w	800bee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	4aa8      	ldr	r2, [pc, #672]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bd82:	2100      	movs	r1, #0
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f00a fca7 	bl	80166d8 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800bd8a:	4ba6      	ldr	r3, [pc, #664]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b04      	cmp	r3, #4
 800bd90:	d118      	bne.n	800bdc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800bd92:	4aa5      	ldr	r2, [pc, #660]	; (800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bd94:	4ba3      	ldr	r3, [pc, #652]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bd96:	4614      	mov	r4, r2
 800bd98:	461d      	mov	r5, r3
 800bd9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bda2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800bda6:	4ba0      	ldr	r3, [pc, #640]	; (800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bda8:	331c      	adds	r3, #28
 800bdaa:	f107 020c 	add.w	r2, r7, #12
 800bdae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bdb2:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800bdb6:	489c      	ldr	r0, [pc, #624]	; (800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bdb8:	f003 fbe6 	bl	800f588 <set_rx_frames>
			source = VESC_PACKET;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bdc2:	e081      	b.n	800bec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800bdca:	231f      	movs	r3, #31
 800bdcc:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800bdce:	4b95      	ldr	r3, [pc, #596]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	8b7b      	ldrh	r3, [r7, #26]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800bdda:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800bdde:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800bde0:	4b90      	ldr	r3, [pc, #576]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	8afb      	ldrh	r3, [r7, #22]
 800bde8:	4013      	ands	r3, r2
 800bdea:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800bdec:	8abb      	ldrh	r3, [r7, #20]
 800bdee:	095b      	lsrs	r3, r3, #5
 800bdf0:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf6:	e016      	b.n	800be26 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800bdf8:	4b8c      	ldr	r3, [pc, #560]	; (800c02c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	8b1b      	ldrh	r3, [r3, #24]
 800be06:	8aba      	ldrh	r2, [r7, #20]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d109      	bne.n	800be20 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 800be0c:	8b3b      	ldrh	r3, [r7, #24]
 800be0e:	2b09      	cmp	r3, #9
 800be10:	d002      	beq.n	800be18 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 800be12:	8b3b      	ldrh	r3, [r7, #24]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d103      	bne.n	800be20 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800be18:	2302      	movs	r3, #2
 800be1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800be1e:	e007      	b.n	800be30 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	3301      	adds	r3, #1
 800be24:	62bb      	str	r3, [r7, #40]	; 0x28
 800be26:	4b82      	ldr	r3, [pc, #520]	; (800c030 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be2c:	429a      	cmp	r2, r3
 800be2e:	dbe3      	blt.n	800bdf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800be30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be34:	2b02      	cmp	r3, #2
 800be36:	d112      	bne.n	800be5e <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800be38:	4a7e      	ldr	r2, [pc, #504]	; (800c034 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800be3a:	4b7a      	ldr	r3, [pc, #488]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be3c:	4614      	mov	r4, r2
 800be3e:	461d      	mov	r5, r3
 800be40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800be4c:	4b75      	ldr	r3, [pc, #468]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	f107 030c 	add.w	r3, r7, #12
 800be54:	4619      	mov	r1, r3
 800be56:	4878      	ldr	r0, [pc, #480]	; (800c038 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800be58:	f013 fae2 	bl	801f420 <memcpy>
 800be5c:	e034      	b.n	800bec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800be5e:	4b71      	ldr	r3, [pc, #452]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b16      	cmp	r3, #22
 800be64:	d01b      	beq.n	800be9e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
 800be66:	2b16      	cmp	r3, #22
 800be68:	d825      	bhi.n	800beb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
 800be6a:	2b14      	cmp	r3, #20
 800be6c:	d002      	beq.n	800be74 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 800be6e:	2b15      	cmp	r3, #21
 800be70:	d00c      	beq.n	800be8c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
 800be72:	e020      	b.n	800beb6 <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800be74:	4b6b      	ldr	r3, [pc, #428]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be76:	691a      	ldr	r2, [r3, #16]
 800be78:	f107 030c 	add.w	r3, r7, #12
 800be7c:	4619      	mov	r1, r3
 800be7e:	486f      	ldr	r0, [pc, #444]	; (800c03c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800be80:	f013 face 	bl	801f420 <memcpy>
					buf2_flag = 0;
 800be84:	4b6e      	ldr	r3, [pc, #440]	; (800c040 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800be86:	2200      	movs	r2, #0
 800be88:	701a      	strb	r2, [r3, #0]

					break;
 800be8a:	e01d      	b.n	800bec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800be8c:	4b65      	ldr	r3, [pc, #404]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800be8e:	691a      	ldr	r2, [r3, #16]
 800be90:	f107 030c 	add.w	r3, r7, #12
 800be94:	4619      	mov	r1, r3
 800be96:	486b      	ldr	r0, [pc, #428]	; (800c044 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800be98:	f013 fac2 	bl	801f420 <memcpy>

					break;
 800be9c:	e014      	b.n	800bec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800be9e:	4b61      	ldr	r3, [pc, #388]	; (800c024 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800bea0:	691a      	ldr	r2, [r3, #16]
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	4619      	mov	r1, r3
 800bea8:	4867      	ldr	r0, [pc, #412]	; (800c048 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800beaa:	f013 fab9 	bl	801f420 <memcpy>
					buf2_flag = 1;
 800beae:	4b64      	ldr	r3, [pc, #400]	; (800c040 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800beb0:	2201      	movs	r2, #1
 800beb2:	701a      	strb	r2, [r3, #0]
					break;
 800beb4:	e008      	b.n	800bec8 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7f7 fdf1 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800bec6:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800bec8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800bed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fef5 	bl	800bcc4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800beda:	2102      	movs	r1, #2
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f00a fd0d 	bl	80168fc <HAL_CAN_ActivateNotification>
		}
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
}
 800bee2:	e0cb      	b.n	800c07c <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800bee4:	f107 030c 	add.w	r3, r7, #12
 800bee8:	4a58      	ldr	r2, [pc, #352]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800beea:	2100      	movs	r1, #0
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f00a fbf3 	bl	80166d8 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800bef2:	4b56      	ldr	r3, [pc, #344]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d118      	bne.n	800bf2c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800befa:	4a4b      	ldr	r2, [pc, #300]	; (800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800befc:	4b53      	ldr	r3, [pc, #332]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800befe:	4614      	mov	r4, r2
 800bf00:	461d      	mov	r5, r3
 800bf02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bf0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800bf0e:	4b46      	ldr	r3, [pc, #280]	; (800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bf10:	331c      	adds	r3, #28
 800bf12:	f107 020c 	add.w	r2, r7, #12
 800bf16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf1a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800bf1e:	4842      	ldr	r0, [pc, #264]	; (800c028 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800bf20:	f003 fb32 	bl	800f588 <set_rx_frames>
			source = VESC_PACKET;
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bf2a:	e09a      	b.n	800c062 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800bf32:	231f      	movs	r3, #31
 800bf34:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800bf36:	4b45      	ldr	r3, [pc, #276]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf3e:	4013      	ands	r3, r2
 800bf40:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800bf42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800bf46:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800bf48:	4b40      	ldr	r3, [pc, #256]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	8bfb      	ldrh	r3, [r7, #30]
 800bf50:	4013      	ands	r3, r2
 800bf52:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800bf54:	8bbb      	ldrh	r3, [r7, #28]
 800bf56:	095b      	lsrs	r3, r3, #5
 800bf58:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf5e:	e016      	b.n	800bf8e <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800bf60:	4b32      	ldr	r3, [pc, #200]	; (800c02c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	8b1b      	ldrh	r3, [r3, #24]
 800bf6e:	8bba      	ldrh	r2, [r7, #28]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d109      	bne.n	800bf88 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 800bf74:	8c3b      	ldrh	r3, [r7, #32]
 800bf76:	2b09      	cmp	r3, #9
 800bf78:	d002      	beq.n	800bf80 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>
 800bf7a:	8c3b      	ldrh	r3, [r7, #32]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d103      	bne.n	800bf88 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800bf80:	2302      	movs	r3, #2
 800bf82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800bf86:	e007      	b.n	800bf98 <HAL_CAN_RxFifo0MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf8e:	4b28      	ldr	r3, [pc, #160]	; (800c030 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf94:	429a      	cmp	r2, r3
 800bf96:	dbe3      	blt.n	800bf60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800bf98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d112      	bne.n	800bfc6 <HAL_CAN_RxFifo0MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800bfa0:	4a24      	ldr	r2, [pc, #144]	; (800c034 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800bfa2:	4b2a      	ldr	r3, [pc, #168]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bfa4:	4614      	mov	r4, r2
 800bfa6:	461d      	mov	r5, r3
 800bfa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bfac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bfb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800bfb4:	4b25      	ldr	r3, [pc, #148]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bfb6:	691a      	ldr	r2, [r3, #16]
 800bfb8:	f107 030c 	add.w	r3, r7, #12
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	481e      	ldr	r0, [pc, #120]	; (800c038 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800bfc0:	f013 fa2e 	bl	801f420 <memcpy>
 800bfc4:	e04d      	b.n	800c062 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800bfc6:	4b21      	ldr	r3, [pc, #132]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b16      	cmp	r3, #22
 800bfcc:	d01b      	beq.n	800c006 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a2>
 800bfce:	2b16      	cmp	r3, #22
 800bfd0:	d83e      	bhi.n	800c050 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
 800bfd2:	2b14      	cmp	r3, #20
 800bfd4:	d002      	beq.n	800bfdc <HAL_CAN_RxFifo0MsgPendingCallback+0x278>
 800bfd6:	2b15      	cmp	r3, #21
 800bfd8:	d00c      	beq.n	800bff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
 800bfda:	e039      	b.n	800c050 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800bfdc:	4b1b      	ldr	r3, [pc, #108]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bfde:	691a      	ldr	r2, [r3, #16]
 800bfe0:	f107 030c 	add.w	r3, r7, #12
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4815      	ldr	r0, [pc, #84]	; (800c03c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 800bfe8:	f013 fa1a 	bl	801f420 <memcpy>
					buf2_flag = 0;
 800bfec:	4b14      	ldr	r3, [pc, #80]	; (800c040 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	701a      	strb	r2, [r3, #0]
					break;
 800bff2:	e036      	b.n	800c062 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800bff4:	4b15      	ldr	r3, [pc, #84]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800bff6:	691a      	ldr	r2, [r3, #16]
 800bff8:	f107 030c 	add.w	r3, r7, #12
 800bffc:	4619      	mov	r1, r3
 800bffe:	4811      	ldr	r0, [pc, #68]	; (800c044 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800c000:	f013 fa0e 	bl	801f420 <memcpy>
					break;
 800c004:	e02d      	b.n	800c062 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800c006:	4b11      	ldr	r3, [pc, #68]	; (800c04c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800c008:	691a      	ldr	r2, [r3, #16]
 800c00a:	f107 030c 	add.w	r3, r7, #12
 800c00e:	4619      	mov	r1, r3
 800c010:	480d      	ldr	r0, [pc, #52]	; (800c048 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 800c012:	f013 fa05 	bl	801f420 <memcpy>
					buf2_flag = 1;
 800c016:	4b0a      	ldr	r3, [pc, #40]	; (800c040 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 800c018:	2201      	movs	r2, #1
 800c01a:	701a      	strb	r2, [r3, #0]
					break;
 800c01c:	e021      	b.n	800c062 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fe>
 800c01e:	bf00      	nop
 800c020:	2000a15c 	.word	0x2000a15c
 800c024:	2000a75c 	.word	0x2000a75c
 800c028:	200098e4 	.word	0x200098e4
 800c02c:	2000a88c 	.word	0x2000a88c
 800c030:	200002c4 	.word	0x200002c4
 800c034:	200068ac 	.word	0x200068ac
 800c038:	200068c8 	.word	0x200068c8
 800c03c:	20006a64 	.word	0x20006a64
 800c040:	200002d0 	.word	0x200002d0
 800c044:	20009e5c 	.word	0x20009e5c
 800c048:	20009fc0 	.word	0x20009fc0
 800c04c:	20006ae0 	.word	0x20006ae0
					rns_can = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800c056:	f107 030c 	add.w	r3, r7, #12
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f7 fd24 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800c060:	bf00      	nop
		if(rns_can)
 800c062:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <HAL_CAN_RxFifo0MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800c06a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff fe28 	bl	800bcc4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800c074:	2102      	movs	r1, #2
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f00a fc40 	bl	80168fc <HAL_CAN_ActivateNotification>
}
 800c07c:	bf00      	nop
 800c07e:	3730      	adds	r7, #48	; 0x30
 800c080:	46bd      	mov	sp, r7
 800c082:	bdb0      	pop	{r4, r5, r7, pc}

0800c084 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800c084:	b5b0      	push	{r4, r5, r7, lr}
 800c086:	b08c      	sub	sp, #48	; 0x30
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
	PACKET_t source;
	uint8_t aData[8];
	uint8_t rns_can = 1;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(hcan == &hcan1){
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4aaa      	ldr	r2, [pc, #680]	; (800c340 <HAL_CAN_RxFifo1MsgPendingCallback+0x2bc>)
 800c096:	4293      	cmp	r3, r2
 800c098:	f040 80b4 	bne.w	800c204 <HAL_CAN_RxFifo1MsgPendingCallback+0x180>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 800c09c:	f107 030c 	add.w	r3, r7, #12
 800c0a0:	4aa8      	ldr	r2, [pc, #672]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f00a fb17 	bl	80166d8 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 800c0aa:	4ba6      	ldr	r3, [pc, #664]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d118      	bne.n	800c0e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800c0b2:	4aa5      	ldr	r2, [pc, #660]	; (800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c0b4:	4ba3      	ldr	r3, [pc, #652]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c0b6:	4614      	mov	r4, r2
 800c0b8:	461d      	mov	r5, r3
 800c0ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800c0c6:	4ba0      	ldr	r3, [pc, #640]	; (800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c0c8:	331c      	adds	r3, #28
 800c0ca:	f107 020c 	add.w	r2, r7, #12
 800c0ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0d2:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800c0d6:	489c      	ldr	r0, [pc, #624]	; (800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c0d8:	f003 fa56 	bl	800f588 <set_rx_frames>
			source = VESC_PACKET;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c0e2:	e081      	b.n	800c1e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
		}else{
			source = RNS_PACKET;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800c0ea:	231f      	movs	r3, #31
 800c0ec:	837b      	strh	r3, [r7, #26]
			uint16_t command = CAN1RxMessage.StdId & id_mask;
 800c0ee:	4b95      	ldr	r3, [pc, #596]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	8b7b      	ldrh	r3, [r7, #26]
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	833b      	strh	r3, [r7, #24]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800c0fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c0fe:	82fb      	strh	r3, [r7, #22]
			uint16_t id = CAN1RxMessage.StdId&command_mask;
 800c100:	4b90      	ldr	r3, [pc, #576]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	b29a      	uxth	r2, r3
 800c106:	8afb      	ldrh	r3, [r7, #22]
 800c108:	4013      	ands	r3, r2
 800c10a:	82bb      	strh	r3, [r7, #20]
			id=id>>5;
 800c10c:	8abb      	ldrh	r3, [r7, #20]
 800c10e:	095b      	lsrs	r3, r3, #5
 800c110:	82bb      	strh	r3, [r7, #20]

			for( int i=0 ; i < number_of_odrive; i++)
 800c112:	2300      	movs	r3, #0
 800c114:	62bb      	str	r3, [r7, #40]	; 0x28
 800c116:	e016      	b.n	800c146 <HAL_CAN_RxFifo1MsgPendingCallback+0xc2>
			{
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800c118:	4b8c      	ldr	r3, [pc, #560]	; (800c34c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	8b1b      	ldrh	r3, [r3, #24]
 800c126:	8aba      	ldrh	r2, [r7, #20]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d109      	bne.n	800c140 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
 800c12c:	8b3b      	ldrh	r3, [r7, #24]
 800c12e:	2b09      	cmp	r3, #9
 800c130:	d002      	beq.n	800c138 <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
 800c132:	8b3b      	ldrh	r3, [r7, #24]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d103      	bne.n	800c140 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>
				{
					source = ODRIVE_PACKET;
 800c138:	2302      	movs	r3, #2
 800c13a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800c13e:	e007      	b.n	800c150 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>
			for( int i=0 ; i < number_of_odrive; i++)
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	3301      	adds	r3, #1
 800c144:	62bb      	str	r3, [r7, #40]	; 0x28
 800c146:	4b82      	ldr	r3, [pc, #520]	; (800c350 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c14c:	429a      	cmp	r2, r3
 800c14e:	dbe3      	blt.n	800c118 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>
				}
			}

			if(source  == ODRIVE_PACKET)
 800c150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c154:	2b02      	cmp	r3, #2
 800c156:	d112      	bne.n	800c17e <HAL_CAN_RxFifo1MsgPendingCallback+0xfa>
			{
				Odrvmsg.RXmsg = CAN1RxMessage;
 800c158:	4a7e      	ldr	r2, [pc, #504]	; (800c354 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800c15a:	4b7a      	ldr	r3, [pc, #488]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c15c:	4614      	mov	r4, r2
 800c15e:	461d      	mov	r5, r3
 800c160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN1RxMessage.DLC);
 800c16c:	4b75      	ldr	r3, [pc, #468]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c16e:	691a      	ldr	r2, [r3, #16]
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	4619      	mov	r1, r3
 800c176:	4878      	ldr	r0, [pc, #480]	; (800c358 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800c178:	f013 f952 	bl	801f420 <memcpy>
 800c17c:	e034      	b.n	800c1e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
			}

			else{
				switch(CAN1RxMessage.StdId){
 800c17e:	4b71      	ldr	r3, [pc, #452]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b16      	cmp	r3, #22
 800c184:	d01b      	beq.n	800c1be <HAL_CAN_RxFifo1MsgPendingCallback+0x13a>
 800c186:	2b16      	cmp	r3, #22
 800c188:	d825      	bhi.n	800c1d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
 800c18a:	2b14      	cmp	r3, #20
 800c18c:	d002      	beq.n	800c194 <HAL_CAN_RxFifo1MsgPendingCallback+0x110>
 800c18e:	2b15      	cmp	r3, #21
 800c190:	d00c      	beq.n	800c1ac <HAL_CAN_RxFifo1MsgPendingCallback+0x128>
 800c192:	e020      	b.n	800c1d6 <HAL_CAN_RxFifo1MsgPendingCallback+0x152>
				case RNS_TO_mainboard:
					memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 800c194:	4b6b      	ldr	r3, [pc, #428]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c196:	691a      	ldr	r2, [r3, #16]
 800c198:	f107 030c 	add.w	r3, r7, #12
 800c19c:	4619      	mov	r1, r3
 800c19e:	486f      	ldr	r0, [pc, #444]	; (800c35c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800c1a0:	f013 f93e 	bl	801f420 <memcpy>
					buf2_flag = 0;
 800c1a4:	4b6e      	ldr	r3, [pc, #440]	; (800c360 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	701a      	strb	r2, [r3, #0]

					break;
 800c1aa:	e01d      	b.n	800c1e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf1:
					memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800c1ac:	4b65      	ldr	r3, [pc, #404]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c1ae:	691a      	ldr	r2, [r3, #16]
 800c1b0:	f107 030c 	add.w	r3, r7, #12
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	486b      	ldr	r0, [pc, #428]	; (800c364 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800c1b8:	f013 f932 	bl	801f420 <memcpy>

					break;
 800c1bc:	e014      	b.n	800c1e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>
				case RNS_TO_mainboard_buf2:
					memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800c1be:	4b61      	ldr	r3, [pc, #388]	; (800c344 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 800c1c0:	691a      	ldr	r2, [r3, #16]
 800c1c2:	f107 030c 	add.w	r3, r7, #12
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4867      	ldr	r0, [pc, #412]	; (800c368 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800c1ca:	f013 f929 	bl	801f420 <memcpy>
					buf2_flag = 1;
 800c1ce:	4b64      	ldr	r3, [pc, #400]	; (800c360 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	701a      	strb	r2, [r3, #0]
					break;
 800c1d4:	e008      	b.n	800c1e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x164>

				default:
					rns_can = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800c1dc:	f107 030c 	add.w	r3, r7, #12
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7f7 fc61 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800c1e6:	bf00      	nop
				}
			}
		}
		if(rns_can)
 800c1e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d004      	beq.n	800c1fa <HAL_CAN_RxFifo1MsgPendingCallback+0x176>
			CAN_PROCESS(source);
 800c1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff fd65 	bl	800bcc4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800c1fa:	2110      	movs	r1, #16
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f00a fb7d 	bl	80168fc <HAL_CAN_ActivateNotification>
		if(rns_can)
			CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800c202:	e0cb      	b.n	800c39c <HAL_CAN_RxFifo1MsgPendingCallback+0x318>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800c204:	f107 030c 	add.w	r3, r7, #12
 800c208:	4a58      	ldr	r2, [pc, #352]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c20a:	2101      	movs	r1, #1
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f00a fa63 	bl	80166d8 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800c212:	4b56      	ldr	r3, [pc, #344]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	2b04      	cmp	r3, #4
 800c218:	d118      	bne.n	800c24c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>
			vescmsg.Rxmsg = CAN2RxMessage;
 800c21a:	4a4b      	ldr	r2, [pc, #300]	; (800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c21c:	4b53      	ldr	r3, [pc, #332]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c21e:	4614      	mov	r4, r2
 800c220:	461d      	mov	r5, r3
 800c222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c22a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 800c22e:	4b46      	ldr	r3, [pc, #280]	; (800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c230:	331c      	adds	r3, #28
 800c232:	f107 020c 	add.w	r2, r7, #12
 800c236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c23a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 800c23e:	4842      	ldr	r0, [pc, #264]	; (800c348 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800c240:	f003 f9a2 	bl	800f588 <set_rx_frames>
			source = VESC_PACKET;
 800c244:	2301      	movs	r3, #1
 800c246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c24a:	e09a      	b.n	800c382 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
			source = RNS_PACKET;
 800c24c:	2300      	movs	r3, #0
 800c24e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint16_t id_mask = 0x1F;   // mask last 7 bits, get only the command
 800c252:	231f      	movs	r3, #31
 800c254:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t command = CAN2RxMessage.StdId & id_mask;
 800c256:	4b45      	ldr	r3, [pc, #276]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c25e:	4013      	ands	r3, r2
 800c260:	843b      	strh	r3, [r7, #32]
			uint16_t command_mask = 0x7E0;  // mask first 7 bits, get only the id
 800c262:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800c266:	83fb      	strh	r3, [r7, #30]
			uint16_t id = CAN2RxMessage.StdId&command_mask;
 800c268:	4b40      	ldr	r3, [pc, #256]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	8bfb      	ldrh	r3, [r7, #30]
 800c270:	4013      	ands	r3, r2
 800c272:	83bb      	strh	r3, [r7, #28]
			id=id>>5;
 800c274:	8bbb      	ldrh	r3, [r7, #28]
 800c276:	095b      	lsrs	r3, r3, #5
 800c278:	83bb      	strh	r3, [r7, #28]
			for( int i=0 ; i < number_of_odrive; i++)
 800c27a:	2300      	movs	r3, #0
 800c27c:	627b      	str	r3, [r7, #36]	; 0x24
 800c27e:	e016      	b.n	800c2ae <HAL_CAN_RxFifo1MsgPendingCallback+0x22a>
				if(id == P_to_Odrive[i]->Instance&&(command == GET_ENCODER_ESTIMATE || command == HEARTBEAT))
 800c280:	4b32      	ldr	r3, [pc, #200]	; (800c34c <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	8b1b      	ldrh	r3, [r3, #24]
 800c28e:	8bba      	ldrh	r2, [r7, #28]
 800c290:	429a      	cmp	r2, r3
 800c292:	d109      	bne.n	800c2a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
 800c294:	8c3b      	ldrh	r3, [r7, #32]
 800c296:	2b09      	cmp	r3, #9
 800c298:	d002      	beq.n	800c2a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>
 800c29a:	8c3b      	ldrh	r3, [r7, #32]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d103      	bne.n	800c2a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>
					source = ODRIVE_PACKET;
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;
 800c2a6:	e007      	b.n	800c2b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>
			for( int i=0 ; i < number_of_odrive; i++)
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ae:	4b28      	ldr	r3, [pc, #160]	; (800c350 <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	dbe3      	blt.n	800c280 <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>
			if(source  == ODRIVE_PACKET)
 800c2b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d112      	bne.n	800c2e6 <HAL_CAN_RxFifo1MsgPendingCallback+0x262>
				Odrvmsg.RXmsg = CAN2RxMessage;
 800c2c0:	4a24      	ldr	r2, [pc, #144]	; (800c354 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800c2c2:	4b2a      	ldr	r3, [pc, #168]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2c4:	4614      	mov	r4, r2
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c2d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				memcpy(Odrvmsg.Data,aData,CAN2RxMessage.DLC);
 800c2d4:	4b25      	ldr	r3, [pc, #148]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	f107 030c 	add.w	r3, r7, #12
 800c2dc:	4619      	mov	r1, r3
 800c2de:	481e      	ldr	r0, [pc, #120]	; (800c358 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 800c2e0:	f013 f89e 	bl	801f420 <memcpy>
 800c2e4:	e04d      	b.n	800c382 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
				switch(CAN2RxMessage.StdId){
 800c2e6:	4b21      	ldr	r3, [pc, #132]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b16      	cmp	r3, #22
 800c2ec:	d01b      	beq.n	800c326 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a2>
 800c2ee:	2b16      	cmp	r3, #22
 800c2f0:	d83e      	bhi.n	800c370 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
 800c2f2:	2b14      	cmp	r3, #20
 800c2f4:	d002      	beq.n	800c2fc <HAL_CAN_RxFifo1MsgPendingCallback+0x278>
 800c2f6:	2b15      	cmp	r3, #21
 800c2f8:	d00c      	beq.n	800c314 <HAL_CAN_RxFifo1MsgPendingCallback+0x290>
 800c2fa:	e039      	b.n	800c370 <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>
					memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800c2fc:	4b1b      	ldr	r3, [pc, #108]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c2fe:	691a      	ldr	r2, [r3, #16]
 800c300:	f107 030c 	add.w	r3, r7, #12
 800c304:	4619      	mov	r1, r3
 800c306:	4815      	ldr	r0, [pc, #84]	; (800c35c <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 800c308:	f013 f88a 	bl	801f420 <memcpy>
					buf2_flag = 0;
 800c30c:	4b14      	ldr	r3, [pc, #80]	; (800c360 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]
					break;
 800c312:	e036      	b.n	800c382 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 800c314:	4b15      	ldr	r3, [pc, #84]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c316:	691a      	ldr	r2, [r3, #16]
 800c318:	f107 030c 	add.w	r3, r7, #12
 800c31c:	4619      	mov	r1, r3
 800c31e:	4811      	ldr	r0, [pc, #68]	; (800c364 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800c320:	f013 f87e 	bl	801f420 <memcpy>
					break;
 800c324:	e02d      	b.n	800c382 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
					memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800c326:	4b11      	ldr	r3, [pc, #68]	; (800c36c <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 800c328:	691a      	ldr	r2, [r3, #16]
 800c32a:	f107 030c 	add.w	r3, r7, #12
 800c32e:	4619      	mov	r1, r3
 800c330:	480d      	ldr	r0, [pc, #52]	; (800c368 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800c332:	f013 f875 	bl	801f420 <memcpy>
					buf2_flag = 1;
 800c336:	4b0a      	ldr	r3, [pc, #40]	; (800c360 <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800c338:	2201      	movs	r2, #1
 800c33a:	701a      	strb	r2, [r3, #0]
					break;
 800c33c:	e021      	b.n	800c382 <HAL_CAN_RxFifo1MsgPendingCallback+0x2fe>
 800c33e:	bf00      	nop
 800c340:	2000a15c 	.word	0x2000a15c
 800c344:	2000a75c 	.word	0x2000a75c
 800c348:	200098e4 	.word	0x200098e4
 800c34c:	2000a88c 	.word	0x2000a88c
 800c350:	200002c4 	.word	0x200002c4
 800c354:	200068ac 	.word	0x200068ac
 800c358:	200068c8 	.word	0x200068c8
 800c35c:	20006a64 	.word	0x20006a64
 800c360:	200002d0 	.word	0x200002d0
 800c364:	20009e5c 	.word	0x20009e5c
 800c368:	20009fc0 	.word	0x20009fc0
 800c36c:	20006ae0 	.word	0x20006ae0
					rns_can = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					FaulHaber_Handler(aData);
 800c376:	f107 030c 	add.w	r3, r7, #12
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7f7 fb94 	bl	8003aa8 <FaulHaber_Handler>
					break;
 800c380:	bf00      	nop
		if(rns_can)
 800c382:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>
			CAN_PROCESS(source);
 800c38a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c38e:	4618      	mov	r0, r3
 800c390:	f7ff fc98 	bl	800bcc4 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800c394:	2110      	movs	r1, #16
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f00a fab0 	bl	80168fc <HAL_CAN_ActivateNotification>
}
 800c39c:	bf00      	nop
 800c39e:	3730      	adds	r7, #48	; 0x30
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c3a4 <set>:

float pickVG[7] = {1.0, 1.0, 19999.0, 1.0, 1.0, 0.001, 60.0};
float flywheelVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};
float flywheelLVG[7] = {1.0, 1.0 / 25.0, 19999, 1.0, 1.5, 0.001, 60};

void set(void) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08a      	sub	sp, #40	; 0x28
 800c3a8:	af04      	add	r7, sp, #16
	Initialize();
 800c3aa:	f7ff fa4b 	bl	800b844 <Initialize>
	PSxInitDMA(&ps4, &hi2c1);
 800c3ae:	49b1      	ldr	r1, [pc, #708]	; (800c674 <set+0x2d0>)
 800c3b0:	48b1      	ldr	r0, [pc, #708]	; (800c678 <set+0x2d4>)
 800c3b2:	f7fe f8e6 	bl	800a582 <PSxInitDMA>
	TIMxInit(&htim6, 5000, 84);
 800c3b6:	2254      	movs	r2, #84	; 0x54
 800c3b8:	f241 3188 	movw	r1, #5000	; 0x1388
 800c3bc:	48af      	ldr	r0, [pc, #700]	; (800c67c <set+0x2d8>)
 800c3be:	f7f6 fd7b 	bl	8002eb8 <TIMxInit>
	MODNInit(MODN_FWD_OMNI, 5.5, 0.5, 2.0, 0.1);
 800c3c2:	eddf 1aaf 	vldr	s3, [pc, #700]	; 800c680 <set+0x2dc>
 800c3c6:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800c3ca:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800c3ce:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	f7f8 f9b8 	bl	8004748 <MODNInit>
	LidarInit(&huart4, DISCONTINUOUS, &lidar);
 800c3d8:	4aaa      	ldr	r2, [pc, #680]	; (800c684 <set+0x2e0>)
 800c3da:	2101      	movs	r1, #1
 800c3dc:	48aa      	ldr	r0, [pc, #680]	; (800c688 <set+0x2e4>)
 800c3de:	f003 f9ab 	bl	800f738 <LidarInit>
	RNS_config(&hcan1);
 800c3e2:	48aa      	ldr	r0, [pc, #680]	; (800c68c <set+0x2e8>)
 800c3e4:	f000 f9a8 	bl	800c738 <RNS_config>

	ServoxInit(&servo_ring, &htim5, IP15_PIN, TIM_CHANNEL_2); // BDC7
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	4aa8      	ldr	r2, [pc, #672]	; (800c690 <set+0x2ec>)
 800c3f0:	49a8      	ldr	r1, [pc, #672]	; (800c694 <set+0x2f0>)
 800c3f2:	48a9      	ldr	r0, [pc, #676]	; (800c698 <set+0x2f4>)
 800c3f4:	f7ff f88e 	bl	800b514 <ServoxInit>
	ServoInitPulseLimit(&servo_ring, 500, 2500);
 800c3f8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c3fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c400:	48a5      	ldr	r0, [pc, #660]	; (800c698 <set+0x2f4>)
 800c402:	f7ff f9ee 	bl	800b7e2 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring, 2220);
 800c406:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800c40a:	48a3      	ldr	r0, [pc, #652]	; (800c698 <set+0x2f4>)
 800c40c:	f7ff f9a0 	bl	800b750 <ServoSetPulse>

	ServoxInit(&servo_ring_new, &htim5, IP15_PIN, TIM_CHANNEL_1); // BDC8
 800c410:	2300      	movs	r3, #0
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	2340      	movs	r3, #64	; 0x40
 800c416:	4a9e      	ldr	r2, [pc, #632]	; (800c690 <set+0x2ec>)
 800c418:	499e      	ldr	r1, [pc, #632]	; (800c694 <set+0x2f0>)
 800c41a:	48a0      	ldr	r0, [pc, #640]	; (800c69c <set+0x2f8>)
 800c41c:	f7ff f87a 	bl	800b514 <ServoxInit>
	ServoInitPulseLimit(&servo_ring_new, 500, 2500);
 800c420:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800c424:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c428:	489c      	ldr	r0, [pc, #624]	; (800c69c <set+0x2f8>)
 800c42a:	f7ff f9da 	bl	800b7e2 <ServoInitPulseLimit>
	ServoSetPulse(&servo_ring_new, 800);
 800c42e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800c432:	489a      	ldr	r0, [pc, #616]	; (800c69c <set+0x2f8>)
 800c434:	f7ff f98c 	bl	800b750 <ServoSetPulse>

	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp, &lsrL, &lsry, &lsrR);
 800c438:	4b99      	ldr	r3, [pc, #612]	; (800c6a0 <set+0x2fc>)
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	4b99      	ldr	r3, [pc, #612]	; (800c6a4 <set+0x300>)
 800c43e:	9302      	str	r3, [sp, #8]
 800c440:	4b99      	ldr	r3, [pc, #612]	; (800c6a8 <set+0x304>)
 800c442:	9301      	str	r3, [sp, #4]
 800c444:	4b99      	ldr	r3, [pc, #612]	; (800c6ac <set+0x308>)
 800c446:	9300      	str	r3, [sp, #0]
 800c448:	4b99      	ldr	r3, [pc, #612]	; (800c6b0 <set+0x30c>)
 800c44a:	4a9a      	ldr	r2, [pc, #616]	; (800c6b4 <set+0x310>)
 800c44c:	499a      	ldr	r1, [pc, #616]	; (800c6b8 <set+0x314>)
 800c44e:	2002      	movs	r0, #2
 800c450:	f7f9 fa1a 	bl	8005888 <PPInit>
//	PPInit(fwd_omni, &fXPos, &fYPos, &fyaw, &pp);
	PP_SetZ(-180, &pp);
 800c454:	4895      	ldr	r0, [pc, #596]	; (800c6ac <set+0x308>)
 800c456:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800c6bc <set+0x318>
 800c45a:	f7f9 ff5f 	bl	800631c <PP_SetZ>
	PP_PIDPathSet(1.5, 1.5, 0.5, &pp);
 800c45e:	4893      	ldr	r0, [pc, #588]	; (800c6ac <set+0x308>)
 800c460:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800c464:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800c468:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800c46c:	f7f9 fad6 	bl	8005a1c <PP_PIDPathSet>
	PP_PIDEndSet(1.0, 1.5, 1.0, &pp);
 800c470:	488e      	ldr	r0, [pc, #568]	; (800c6ac <set+0x308>)
 800c472:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800c476:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800c47a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c47e:	f7f9 fb56 	bl	8005b2e <PP_PIDEndSet>
	PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 800c482:	488a      	ldr	r0, [pc, #552]	; (800c6ac <set+0x308>)
 800c484:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 800c488:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800c6c0 <set+0x31c>
 800c48c:	eddf 0a8d 	vldr	s1, [pc, #564]	; 800c6c4 <set+0x320>
 800c490:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800c494:	f7f9 fb12 	bl	8005abc <PP_PIDZSet>
	PP_SetCrv_Points(10, &pp);
 800c498:	4984      	ldr	r1, [pc, #528]	; (800c6ac <set+0x308>)
 800c49a:	200a      	movs	r0, #10
 800c49c:	f7f9 ff56 	bl	800634c <PP_SetCrv_Points>

	R6091U_Init(&IMU, &huart3);
 800c4a0:	4989      	ldr	r1, [pc, #548]	; (800c6c8 <set+0x324>)
 800c4a2:	488a      	ldr	r0, [pc, #552]	; (800c6cc <set+0x328>)
 800c4a4:	f7fe fb82 	bl	800abac <R6091U_Init>

	PIDSourceInit(&pickErr, &pickU, &pick_PID);
 800c4a8:	4a89      	ldr	r2, [pc, #548]	; (800c6d0 <set+0x32c>)
 800c4aa:	498a      	ldr	r1, [pc, #552]	; (800c6d4 <set+0x330>)
 800c4ac:	488a      	ldr	r0, [pc, #552]	; (800c6d8 <set+0x334>)
 800c4ae:	f7f8 ff55 	bl	800535c <PIDSourceInit>
	PIDDelayInit(&pick_PID);
 800c4b2:	4887      	ldr	r0, [pc, #540]	; (800c6d0 <set+0x32c>)
 800c4b4:	f7f9 f8e9 	bl	800568a <PIDDelayInit>
	PIDGainInit(0.005, pickVG[0], pickVG[1], pickVG[2], pickVG[3], pickVG[4], pickVG[5], pickVG[6], &pick_PID);
 800c4b8:	4b88      	ldr	r3, [pc, #544]	; (800c6dc <set+0x338>)
 800c4ba:	edd3 7a00 	vldr	s15, [r3]
 800c4be:	4b87      	ldr	r3, [pc, #540]	; (800c6dc <set+0x338>)
 800c4c0:	ed93 7a01 	vldr	s14, [r3, #4]
 800c4c4:	4b85      	ldr	r3, [pc, #532]	; (800c6dc <set+0x338>)
 800c4c6:	edd3 6a02 	vldr	s13, [r3, #8]
 800c4ca:	4b84      	ldr	r3, [pc, #528]	; (800c6dc <set+0x338>)
 800c4cc:	ed93 6a03 	vldr	s12, [r3, #12]
 800c4d0:	4b82      	ldr	r3, [pc, #520]	; (800c6dc <set+0x338>)
 800c4d2:	edd3 5a04 	vldr	s11, [r3, #16]
 800c4d6:	4b81      	ldr	r3, [pc, #516]	; (800c6dc <set+0x338>)
 800c4d8:	ed93 5a05 	vldr	s10, [r3, #20]
 800c4dc:	4b7f      	ldr	r3, [pc, #508]	; (800c6dc <set+0x338>)
 800c4de:	edd3 4a06 	vldr	s9, [r3, #24]
 800c4e2:	487b      	ldr	r0, [pc, #492]	; (800c6d0 <set+0x32c>)
 800c4e4:	eef0 3a64 	vmov.f32	s7, s9
 800c4e8:	eeb0 3a45 	vmov.f32	s6, s10
 800c4ec:	eef0 2a65 	vmov.f32	s5, s11
 800c4f0:	eeb0 2a46 	vmov.f32	s4, s12
 800c4f4:	eef0 1a66 	vmov.f32	s3, s13
 800c4f8:	eeb0 1a47 	vmov.f32	s2, s14
 800c4fc:	eef0 0a67 	vmov.f32	s1, s15
 800c500:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800c6e0 <set+0x33c>
 800c504:	f7f8 ff3c 	bl	8005380 <PIDGainInit>

	PIDSourceInit(&leftErr, &leftU, &left_PID);
 800c508:	4a76      	ldr	r2, [pc, #472]	; (800c6e4 <set+0x340>)
 800c50a:	4977      	ldr	r1, [pc, #476]	; (800c6e8 <set+0x344>)
 800c50c:	4877      	ldr	r0, [pc, #476]	; (800c6ec <set+0x348>)
 800c50e:	f7f8 ff25 	bl	800535c <PIDSourceInit>
	PIDDelayInit(&left_PID);
 800c512:	4874      	ldr	r0, [pc, #464]	; (800c6e4 <set+0x340>)
 800c514:	f7f9 f8b9 	bl	800568a <PIDDelayInit>
	PIDGainInit(0.005, flywheelLVG[0], flywheelLVG[1], flywheelLVG[2], flywheelLVG[3], flywheelLVG[4], flywheelLVG[5], flywheelLVG[6], &left_PID);
 800c518:	4b75      	ldr	r3, [pc, #468]	; (800c6f0 <set+0x34c>)
 800c51a:	edd3 7a00 	vldr	s15, [r3]
 800c51e:	4b74      	ldr	r3, [pc, #464]	; (800c6f0 <set+0x34c>)
 800c520:	ed93 7a01 	vldr	s14, [r3, #4]
 800c524:	4b72      	ldr	r3, [pc, #456]	; (800c6f0 <set+0x34c>)
 800c526:	edd3 6a02 	vldr	s13, [r3, #8]
 800c52a:	4b71      	ldr	r3, [pc, #452]	; (800c6f0 <set+0x34c>)
 800c52c:	ed93 6a03 	vldr	s12, [r3, #12]
 800c530:	4b6f      	ldr	r3, [pc, #444]	; (800c6f0 <set+0x34c>)
 800c532:	edd3 5a04 	vldr	s11, [r3, #16]
 800c536:	4b6e      	ldr	r3, [pc, #440]	; (800c6f0 <set+0x34c>)
 800c538:	ed93 5a05 	vldr	s10, [r3, #20]
 800c53c:	4b6c      	ldr	r3, [pc, #432]	; (800c6f0 <set+0x34c>)
 800c53e:	edd3 4a06 	vldr	s9, [r3, #24]
 800c542:	4868      	ldr	r0, [pc, #416]	; (800c6e4 <set+0x340>)
 800c544:	eef0 3a64 	vmov.f32	s7, s9
 800c548:	eeb0 3a45 	vmov.f32	s6, s10
 800c54c:	eef0 2a65 	vmov.f32	s5, s11
 800c550:	eeb0 2a46 	vmov.f32	s4, s12
 800c554:	eef0 1a66 	vmov.f32	s3, s13
 800c558:	eeb0 1a47 	vmov.f32	s2, s14
 800c55c:	eef0 0a67 	vmov.f32	s1, s15
 800c560:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800c6e0 <set+0x33c>
 800c564:	f7f8 ff0c 	bl	8005380 <PIDGainInit>

	PIDSourceInit(&rightErr, &rightU, &right_PID);
 800c568:	4a62      	ldr	r2, [pc, #392]	; (800c6f4 <set+0x350>)
 800c56a:	4963      	ldr	r1, [pc, #396]	; (800c6f8 <set+0x354>)
 800c56c:	4863      	ldr	r0, [pc, #396]	; (800c6fc <set+0x358>)
 800c56e:	f7f8 fef5 	bl	800535c <PIDSourceInit>
	PIDDelayInit(&right_PID);
 800c572:	4860      	ldr	r0, [pc, #384]	; (800c6f4 <set+0x350>)
 800c574:	f7f9 f889 	bl	800568a <PIDDelayInit>
	PIDGainInit(0.005, flywheelVG[0], flywheelVG[1], flywheelVG[2], flywheelVG[3], flywheelVG[4], flywheelVG[5], flywheelVG[6], &right_PID);
 800c578:	4b61      	ldr	r3, [pc, #388]	; (800c700 <set+0x35c>)
 800c57a:	edd3 7a00 	vldr	s15, [r3]
 800c57e:	4b60      	ldr	r3, [pc, #384]	; (800c700 <set+0x35c>)
 800c580:	ed93 7a01 	vldr	s14, [r3, #4]
 800c584:	4b5e      	ldr	r3, [pc, #376]	; (800c700 <set+0x35c>)
 800c586:	edd3 6a02 	vldr	s13, [r3, #8]
 800c58a:	4b5d      	ldr	r3, [pc, #372]	; (800c700 <set+0x35c>)
 800c58c:	ed93 6a03 	vldr	s12, [r3, #12]
 800c590:	4b5b      	ldr	r3, [pc, #364]	; (800c700 <set+0x35c>)
 800c592:	edd3 5a04 	vldr	s11, [r3, #16]
 800c596:	4b5a      	ldr	r3, [pc, #360]	; (800c700 <set+0x35c>)
 800c598:	ed93 5a05 	vldr	s10, [r3, #20]
 800c59c:	4b58      	ldr	r3, [pc, #352]	; (800c700 <set+0x35c>)
 800c59e:	edd3 4a06 	vldr	s9, [r3, #24]
 800c5a2:	4854      	ldr	r0, [pc, #336]	; (800c6f4 <set+0x350>)
 800c5a4:	eef0 3a64 	vmov.f32	s7, s9
 800c5a8:	eeb0 3a45 	vmov.f32	s6, s10
 800c5ac:	eef0 2a65 	vmov.f32	s5, s11
 800c5b0:	eeb0 2a46 	vmov.f32	s4, s12
 800c5b4:	eef0 1a66 	vmov.f32	s3, s13
 800c5b8:	eeb0 1a47 	vmov.f32	s2, s14
 800c5bc:	eef0 0a67 	vmov.f32	s1, s15
 800c5c0:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800c6e0 <set+0x33c>
 800c5c4:	f7f8 fedc 	bl	8005380 <PIDGainInit>

	float fXPosGain[3] = {0.8, 0.4, 0.2};
 800c5c8:	4a4e      	ldr	r2, [pc, #312]	; (800c704 <set+0x360>)
 800c5ca:	f107 030c 	add.w	r3, r7, #12
 800c5ce:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float fYPosGain[3] = {0.8, 0.4, 0.2};
 800c5d4:	4a4b      	ldr	r2, [pc, #300]	; (800c704 <set+0x360>)
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* X & Y position ABT */
	ABTInit(SAMPLE_TIME, fXPosGain[0], fXPosGain[1], fXPosGain[2], &fXEncData, &fXPos, &fXVel, &fXAcc, &x_data);
 800c5de:	edd7 7a03 	vldr	s15, [r7, #12]
 800c5e2:	ed97 7a04 	vldr	s14, [r7, #16]
 800c5e6:	edd7 6a05 	vldr	s13, [r7, #20]
 800c5ea:	4b47      	ldr	r3, [pc, #284]	; (800c708 <set+0x364>)
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	4b47      	ldr	r3, [pc, #284]	; (800c70c <set+0x368>)
 800c5f0:	4a47      	ldr	r2, [pc, #284]	; (800c710 <set+0x36c>)
 800c5f2:	4931      	ldr	r1, [pc, #196]	; (800c6b8 <set+0x314>)
 800c5f4:	4847      	ldr	r0, [pc, #284]	; (800c714 <set+0x370>)
 800c5f6:	eef0 1a66 	vmov.f32	s3, s13
 800c5fa:	eeb0 1a47 	vmov.f32	s2, s14
 800c5fe:	eef0 0a67 	vmov.f32	s1, s15
 800c602:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800c6e0 <set+0x33c>
 800c606:	f7f4 fcf1 	bl	8000fec <ABTInit>
	ABTEstimateInit(&x_data);
 800c60a:	483f      	ldr	r0, [pc, #252]	; (800c708 <set+0x364>)
 800c60c:	f7f4 fd1b 	bl	8001046 <ABTEstimateInit>

	ABTInit(SAMPLE_TIME, fYPosGain[0], fYPosGain[1], fYPosGain[2], &fYEncData, &fYPos, &fYVel, &fYAcc, &y_data);
 800c610:	edd7 7a00 	vldr	s15, [r7]
 800c614:	ed97 7a01 	vldr	s14, [r7, #4]
 800c618:	edd7 6a02 	vldr	s13, [r7, #8]
 800c61c:	4b3e      	ldr	r3, [pc, #248]	; (800c718 <set+0x374>)
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	4b3e      	ldr	r3, [pc, #248]	; (800c71c <set+0x378>)
 800c622:	4a3f      	ldr	r2, [pc, #252]	; (800c720 <set+0x37c>)
 800c624:	4923      	ldr	r1, [pc, #140]	; (800c6b4 <set+0x310>)
 800c626:	483f      	ldr	r0, [pc, #252]	; (800c724 <set+0x380>)
 800c628:	eef0 1a66 	vmov.f32	s3, s13
 800c62c:	eeb0 1a47 	vmov.f32	s2, s14
 800c630:	eef0 0a67 	vmov.f32	s1, s15
 800c634:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800c6e0 <set+0x33c>
 800c638:	f7f4 fcd8 	bl	8000fec <ABTInit>
	ABTEstimateInit(&y_data);
 800c63c:	4836      	ldr	r0, [pc, #216]	; (800c718 <set+0x374>)
 800c63e:	f7f4 fd02 	bl	8001046 <ABTEstimateInit>

	VESCInit(35000, 7, 0.15, 111, &vesc1);
 800c642:	4939      	ldr	r1, [pc, #228]	; (800c728 <set+0x384>)
 800c644:	206f      	movs	r0, #111	; 0x6f
 800c646:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800c72c <set+0x388>
 800c64a:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800c64e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c730 <set+0x38c>
 800c652:	f002 ffcf 	bl	800f5f4 <VESCInit>
	VESCInit(35000, 7, 0.15, 112, &vesc2);
 800c656:	4937      	ldr	r1, [pc, #220]	; (800c734 <set+0x390>)
 800c658:	2070      	movs	r0, #112	; 0x70
 800c65a:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800c72c <set+0x388>
 800c65e:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 800c662:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800c730 <set+0x38c>
 800c666:	f002 ffc5 	bl	800f5f4 <VESCInit>
}
 800c66a:	bf00      	nop
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	20006bb0 	.word	0x20006bb0
 800c678:	2000a240 	.word	0x2000a240
 800c67c:	20005eec 	.word	0x20005eec
 800c680:	3dcccccd 	.word	0x3dcccccd
 800c684:	200091a0 	.word	0x200091a0
 800c688:	20005ff0 	.word	0x20005ff0
 800c68c:	2000a15c 	.word	0x2000a15c
 800c690:	40020400 	.word	0x40020400
 800c694:	20005ca0 	.word	0x20005ca0
 800c698:	200079d8 	.word	0x200079d8
 800c69c:	2000a5e8 	.word	0x2000a5e8
 800c6a0:	200095f8 	.word	0x200095f8
 800c6a4:	2000a2c0 	.word	0x2000a2c0
 800c6a8:	20007728 	.word	0x20007728
 800c6ac:	20006d44 	.word	0x20006d44
 800c6b0:	20009b8c 	.word	0x20009b8c
 800c6b4:	20009a28 	.word	0x20009a28
 800c6b8:	20009bd8 	.word	0x20009bd8
 800c6bc:	c3340000 	.word	0xc3340000
 800c6c0:	3e4ccccd 	.word	0x3e4ccccd
 800c6c4:	3d4ccccd 	.word	0x3d4ccccd
 800c6c8:	20005bbc 	.word	0x20005bbc
 800c6cc:	20006c90 	.word	0x20006c90
 800c6d0:	20009a30 	.word	0x20009a30
 800c6d4:	20007464 	.word	0x20007464
 800c6d8:	200064f0 	.word	0x200064f0
 800c6dc:	20000000 	.word	0x20000000
 800c6e0:	3ba3d70a 	.word	0x3ba3d70a
 800c6e4:	20009020 	.word	0x20009020
 800c6e8:	200068a4 	.word	0x200068a4
 800c6ec:	2000a23c 	.word	0x2000a23c
 800c6f0:	20000038 	.word	0x20000038
 800c6f4:	2000a184 	.word	0x2000a184
 800c6f8:	20006b28 	.word	0x20006b28
 800c6fc:	20009fd8 	.word	0x20009fd8
 800c700:	2000001c 	.word	0x2000001c
 800c704:	080255a8 	.word	0x080255a8
 800c708:	2000a544 	.word	0x2000a544
 800c70c:	20006658 	.word	0x20006658
 800c710:	20009a8c 	.word	0x20009a8c
 800c714:	2000693c 	.word	0x2000693c
 800c718:	20007940 	.word	0x20007940
 800c71c:	20007320 	.word	0x20007320
 800c720:	20006c04 	.word	0x20006c04
 800c724:	2000a568 	.word	0x2000a568
 800c728:	20006b2c 	.word	0x20006b2c
 800c72c:	3e19999a 	.word	0x3e19999a
 800c730:	4708b800 	.word	0x4708b800
 800c734:	20009b9c 	.word	0x20009b9c

0800c738 <RNS_config>:

void RNS_config(CAN_HandleTypeDef *hcanx) {
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af06      	add	r7, sp, #24
 800c73e:	6078      	str	r0, [r7, #4]
	RNSInit(hcanx, &rns);
 800c740:	49a9      	ldr	r1, [pc, #676]	; (800c9e8 <RNS_config+0x2b0>)
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7fe fb14 	bl	800ad70 <RNSInit>
	//0b11100101
	//Encoder dcba(0-swap, 1-keep)  BDC dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b1000000100, (float) fwd_omni,
 800c748:	f04f 0200 	mov.w	r2, #0
 800c74c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c754:	f04f 0200 	mov.w	r2, #0
 800c758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c75c:	e9cd 2300 	strd	r2, r3, [sp]
 800c760:	f04f 0200 	mov.w	r2, #0
 800c764:	4ba1      	ldr	r3, [pc, #644]	; (800c9ec <RNS_config+0x2b4>)
 800c766:	2129      	movs	r1, #41	; 0x29
 800c768:	489f      	ldr	r0, [pc, #636]	; (800c9e8 <RNS_config+0x2b0>)
 800c76a:	f7fe fc7f 	bl	800b06c <RNSSet>
			(float) roboconPID);
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 800c76e:	f04f 0200 	mov.w	r2, #0
 800c772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c776:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c77a:	a37d      	add	r3, pc, #500	; (adr r3, 800c970 <RNS_config+0x238>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c784:	f04f 0200 	mov.w	r2, #0
 800c788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c78c:	e9cd 2300 	strd	r2, r3, [sp]
 800c790:	a377      	add	r3, pc, #476	; (adr r3, 800c970 <RNS_config+0x238>)
 800c792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c796:	214e      	movs	r1, #78	; 0x4e
 800c798:	4893      	ldr	r0, [pc, #588]	; (800c9e8 <RNS_config+0x2b0>)
 800c79a:	f7fe fc67 	bl	800b06c <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, (float) 5816.0 / 5181.0, //remember to put floating point 5175/5174 wrong
 800c79e:	a376      	add	r3, pc, #472	; (adr r3, 800c978 <RNS_config+0x240>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	e9cd 2300 	strd	r2, r3, [sp]
 800c7a8:	a375      	add	r3, pc, #468	; (adr r3, 800c980 <RNS_config+0x248>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	2124      	movs	r1, #36	; 0x24
 800c7b0:	488d      	ldr	r0, [pc, #564]	; (800c9e8 <RNS_config+0x2b0>)
 800c7b2:	f7fe fc5b 	bl	800b06c <RNSSet>
	(float) (3.142 * 0.126 * 2 / 581.6));
	RNSSet(&rns, RNS_B_KCD_PTD, (float) 5191.0 / 5183.0,
 800c7b6:	a374      	add	r3, pc, #464	; (adr r3, 800c988 <RNS_config+0x250>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	e9cd 2300 	strd	r2, r3, [sp]
 800c7c0:	a373      	add	r3, pc, #460	; (adr r3, 800c990 <RNS_config+0x258>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	2125      	movs	r1, #37	; 0x25
 800c7c8:	4887      	ldr	r0, [pc, #540]	; (800c9e8 <RNS_config+0x2b0>)
 800c7ca:	f7fe fc4f 	bl	800b06c <RNSSet>
			(float) (3.142 * 0.126 * 2 / 519.1));

	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 6.88, 19999.0);
 800c7ce:	a372      	add	r3, pc, #456	; (adr r3, 800c998 <RNS_config+0x260>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7d8:	a371      	add	r3, pc, #452	; (adr r3, 800c9a0 <RNS_config+0x268>)
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	e9cd 2300 	strd	r2, r3, [sp]
 800c7e2:	f04f 0200 	mov.w	r2, #0
 800c7e6:	4b82      	ldr	r3, [pc, #520]	; (800c9f0 <RNS_config+0x2b8>)
 800c7e8:	2130      	movs	r1, #48	; 0x30
 800c7ea:	487f      	ldr	r0, [pc, #508]	; (800c9e8 <RNS_config+0x2b0>)
 800c7ec:	f7fe fc3e 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.66, 19999.0);
 800c7f0:	a369      	add	r3, pc, #420	; (adr r3, 800c998 <RNS_config+0x260>)
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7fa:	a36b      	add	r3, pc, #428	; (adr r3, 800c9a8 <RNS_config+0x270>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	e9cd 2300 	strd	r2, r3, [sp]
 800c804:	f04f 0200 	mov.w	r2, #0
 800c808:	4b79      	ldr	r3, [pc, #484]	; (800c9f0 <RNS_config+0x2b8>)
 800c80a:	2131      	movs	r1, #49	; 0x31
 800c80c:	4876      	ldr	r0, [pc, #472]	; (800c9e8 <RNS_config+0x2b0>)
 800c80e:	f7fe fc2d 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.91, 19999.0);
 800c812:	a361      	add	r3, pc, #388	; (adr r3, 800c998 <RNS_config+0x260>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c81c:	a364      	add	r3, pc, #400	; (adr r3, 800c9b0 <RNS_config+0x278>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	e9cd 2300 	strd	r2, r3, [sp]
 800c826:	f04f 0200 	mov.w	r2, #0
 800c82a:	4b71      	ldr	r3, [pc, #452]	; (800c9f0 <RNS_config+0x2b8>)
 800c82c:	2132      	movs	r1, #50	; 0x32
 800c82e:	486e      	ldr	r0, [pc, #440]	; (800c9e8 <RNS_config+0x2b0>)
 800c830:	f7fe fc1c 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 7.79, 19999.0);
 800c834:	a358      	add	r3, pc, #352	; (adr r3, 800c998 <RNS_config+0x260>)
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c83e:	a35e      	add	r3, pc, #376	; (adr r3, 800c9b8 <RNS_config+0x280>)
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	e9cd 2300 	strd	r2, r3, [sp]
 800c848:	f04f 0200 	mov.w	r2, #0
 800c84c:	4b68      	ldr	r3, [pc, #416]	; (800c9f0 <RNS_config+0x2b8>)
 800c84e:	2133      	movs	r1, #51	; 0x33
 800c850:	4865      	ldr	r0, [pc, #404]	; (800c9e8 <RNS_config+0x2b0>)
 800c852:	f7fe fc0b 	bl	800b06c <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c856:	a35a      	add	r3, pc, #360	; (adr r3, 800c9c0 <RNS_config+0x288>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c860:	f04f 0200 	mov.w	r2, #0
 800c864:	4b63      	ldr	r3, [pc, #396]	; (800c9f4 <RNS_config+0x2bc>)
 800c866:	e9cd 2300 	strd	r2, r3, [sp]
 800c86a:	f04f 0200 	mov.w	r2, #0
 800c86e:	4b60      	ldr	r3, [pc, #384]	; (800c9f0 <RNS_config+0x2b8>)
 800c870:	2134      	movs	r1, #52	; 0x34
 800c872:	485d      	ldr	r0, [pc, #372]	; (800c9e8 <RNS_config+0x2b0>)
 800c874:	f7fe fbfa 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c878:	a351      	add	r3, pc, #324	; (adr r3, 800c9c0 <RNS_config+0x288>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c882:	f04f 0200 	mov.w	r2, #0
 800c886:	4b5b      	ldr	r3, [pc, #364]	; (800c9f4 <RNS_config+0x2bc>)
 800c888:	e9cd 2300 	strd	r2, r3, [sp]
 800c88c:	f04f 0200 	mov.w	r2, #0
 800c890:	4b57      	ldr	r3, [pc, #348]	; (800c9f0 <RNS_config+0x2b8>)
 800c892:	2135      	movs	r1, #53	; 0x35
 800c894:	4854      	ldr	r0, [pc, #336]	; (800c9e8 <RNS_config+0x2b0>)
 800c896:	f7fe fbe9 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c89a:	a349      	add	r3, pc, #292	; (adr r3, 800c9c0 <RNS_config+0x288>)
 800c89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8a4:	f04f 0200 	mov.w	r2, #0
 800c8a8:	4b52      	ldr	r3, [pc, #328]	; (800c9f4 <RNS_config+0x2bc>)
 800c8aa:	e9cd 2300 	strd	r2, r3, [sp]
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	4b4f      	ldr	r3, [pc, #316]	; (800c9f0 <RNS_config+0x2b8>)
 800c8b4:	2136      	movs	r1, #54	; 0x36
 800c8b6:	484c      	ldr	r0, [pc, #304]	; (800c9e8 <RNS_config+0x2b0>)
 800c8b8:	f7fe fbd8 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID, 1.0, 1.5, 0.001);   //
 800c8bc:	a340      	add	r3, pc, #256	; (adr r3, 800c9c0 <RNS_config+0x288>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8c6:	f04f 0200 	mov.w	r2, #0
 800c8ca:	4b4a      	ldr	r3, [pc, #296]	; (800c9f4 <RNS_config+0x2bc>)
 800c8cc:	e9cd 2300 	strd	r2, r3, [sp]
 800c8d0:	f04f 0200 	mov.w	r2, #0
 800c8d4:	4b46      	ldr	r3, [pc, #280]	; (800c9f0 <RNS_config+0x2b8>)
 800c8d6:	2137      	movs	r1, #55	; 0x37
 800c8d8:	4843      	ldr	r0, [pc, #268]	; (800c9e8 <RNS_config+0x2b0>)
 800c8da:	f7fe fbc7 	bl	800b06c <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800c8de:	211b      	movs	r1, #27
 800c8e0:	4841      	ldr	r0, [pc, #260]	; (800c9e8 <RNS_config+0x2b0>)
 800c8e2:	f7fe fbc3 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800c8e6:	f04f 0200 	mov.w	r2, #0
 800c8ea:	4b43      	ldr	r3, [pc, #268]	; (800c9f8 <RNS_config+0x2c0>)
 800c8ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8f0:	f04f 0200 	mov.w	r2, #0
 800c8f4:	4b40      	ldr	r3, [pc, #256]	; (800c9f8 <RNS_config+0x2c0>)
 800c8f6:	e9cd 2300 	strd	r2, r3, [sp]
 800c8fa:	f04f 0200 	mov.w	r2, #0
 800c8fe:	4b3c      	ldr	r3, [pc, #240]	; (800c9f0 <RNS_config+0x2b8>)
 800c900:	214b      	movs	r1, #75	; 0x4b
 800c902:	4839      	ldr	r0, [pc, #228]	; (800c9e8 <RNS_config+0x2b0>)
 800c904:	f7fe fbb2 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 0.7);
 800c908:	a32f      	add	r3, pc, #188	; (adr r3, 800c9c8 <RNS_config+0x290>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c912:	a32f      	add	r3, pc, #188	; (adr r3, 800c9d0 <RNS_config+0x298>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	e9cd 2300 	strd	r2, r3, [sp]
 800c91c:	f04f 0200 	mov.w	r2, #0
 800c920:	4b35      	ldr	r3, [pc, #212]	; (800c9f8 <RNS_config+0x2c0>)
 800c922:	214c      	movs	r1, #76	; 0x4c
 800c924:	4830      	ldr	r0, [pc, #192]	; (800c9e8 <RNS_config+0x2b0>)
 800c926:	f7fe fba1 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 0.5, 0.05, 0.2, 8.5);
 800c92a:	f04f 0200 	mov.w	r2, #0
 800c92e:	4b33      	ldr	r3, [pc, #204]	; (800c9fc <RNS_config+0x2c4>)
 800c930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c934:	a328      	add	r3, pc, #160	; (adr r3, 800c9d8 <RNS_config+0x2a0>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c93e:	a328      	add	r3, pc, #160	; (adr r3, 800c9e0 <RNS_config+0x2a8>)
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	e9cd 2300 	strd	r2, r3, [sp]
 800c948:	f04f 0200 	mov.w	r2, #0
 800c94c:	4b2a      	ldr	r3, [pc, #168]	; (800c9f8 <RNS_config+0x2c0>)
 800c94e:	2154      	movs	r1, #84	; 0x54
 800c950:	4825      	ldr	r0, [pc, #148]	; (800c9e8 <RNS_config+0x2b0>)
 800c952:	f7fe fb8b 	bl	800b06c <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0); // Change No. of Points in the Curved Path
 800c956:	f04f 0200 	mov.w	r2, #0
 800c95a:	4b29      	ldr	r3, [pc, #164]	; (800ca00 <RNS_config+0x2c8>)
 800c95c:	2122      	movs	r1, #34	; 0x22
 800c95e:	4822      	ldr	r0, [pc, #136]	; (800c9e8 <RNS_config+0x2b0>)
 800c960:	f7fe fb84 	bl	800b06c <RNSSet>
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	f3af 8000 	nop.w
 800c970:	b9727cf5 	.word	0xb9727cf5
 800c974:	3f049766 	.word	0x3f049766
 800c978:	a0000000 	.word	0xa0000000
 800c97c:	3f564e14 	.word	0x3f564e14
 800c980:	d7a1868c 	.word	0xd7a1868c
 800c984:	3ff1f604 	.word	0x3ff1f604
 800c988:	00000000 	.word	0x00000000
 800c98c:	3f58fd94 	.word	0x3f58fd94
 800c990:	7c2c0ed1 	.word	0x7c2c0ed1
 800c994:	3ff00652 	.word	0x3ff00652
 800c998:	00000000 	.word	0x00000000
 800c99c:	40d387c0 	.word	0x40d387c0
 800c9a0:	6b29aca7 	.word	0x6b29aca7
 800c9a4:	3fc29aca 	.word	0x3fc29aca
 800c9a8:	dd1e2705 	.word	0xdd1e2705
 800c9ac:	3fbd8faa 	.word	0x3fbd8faa
 800c9b0:	b34c0e3d 	.word	0xb34c0e3d
 800c9b4:	3fc02e9a 	.word	0x3fc02e9a
 800c9b8:	21d938da 	.word	0x21d938da
 800c9bc:	3fc06e6b 	.word	0x3fc06e6b
 800c9c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800c9c4:	3f50624d 	.word	0x3f50624d
 800c9c8:	66666666 	.word	0x66666666
 800c9cc:	3fe66666 	.word	0x3fe66666
 800c9d0:	9999999a 	.word	0x9999999a
 800c9d4:	3fb99999 	.word	0x3fb99999
 800c9d8:	9999999a 	.word	0x9999999a
 800c9dc:	3fc99999 	.word	0x3fc99999
 800c9e0:	9999999a 	.word	0x9999999a
 800c9e4:	3fa99999 	.word	0x3fa99999
 800c9e8:	20009074 	.word	0x20009074
 800c9ec:	40802000 	.word	0x40802000
 800c9f0:	3ff00000 	.word	0x3ff00000
 800c9f4:	3ff80000 	.word	0x3ff80000
 800c9f8:	3fe00000 	.word	0x3fe00000
 800c9fc:	40210000 	.word	0x40210000
 800ca00:	40240000 	.word	0x40240000

0800ca04 <RobotStart>:
	}

}

void RobotStart()
{
 800ca04:	b480      	push	{r7}
 800ca06:	af00      	add	r7, sp, #0
	before = 0;
 800ca08:	4b4c      	ldr	r3, [pc, #304]	; (800cb3c <RobotStart+0x138>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]
	mode = 1;
 800ca0e:	4b4c      	ldr	r3, [pc, #304]	; (800cb40 <RobotStart+0x13c>)
 800ca10:	2201      	movs	r2, #1
 800ca12:	601a      	str	r2, [r3, #0]
	servo_close_once = 0;
 800ca14:	4b4b      	ldr	r3, [pc, #300]	; (800cb44 <RobotStart+0x140>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	601a      	str	r2, [r3, #0]
	shoot_done = 0;
 800ca1a:	4b4b      	ldr	r3, [pc, #300]	; (800cb48 <RobotStart+0x144>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]
	shoot_start = 0;
 800ca20:	4b4a      	ldr	r3, [pc, #296]	; (800cb4c <RobotStart+0x148>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]
	pick_start = 0;
 800ca26:	4b4a      	ldr	r3, [pc, #296]	; (800cb50 <RobotStart+0x14c>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
	Robot_Pitch = PITCH45;
 800ca2c:	4b49      	ldr	r3, [pc, #292]	; (800cb54 <RobotStart+0x150>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	701a      	strb	r2, [r3, #0]
	blue = 1;
 800ca32:	4b49      	ldr	r3, [pc, #292]	; (800cb58 <RobotStart+0x154>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	601a      	str	r2, [r3, #0]
	set_pitch = 0;
 800ca38:	4b48      	ldr	r3, [pc, #288]	; (800cb5c <RobotStart+0x158>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
	picked_left = 0;
 800ca3e:	4b48      	ldr	r3, [pc, #288]	; (800cb60 <RobotStart+0x15c>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	601a      	str	r2, [r3, #0]
	picked_right = 0;
 800ca44:	4b47      	ldr	r3, [pc, #284]	; (800cb64 <RobotStart+0x160>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	601a      	str	r2, [r3, #0]
	cylinder_retract;
 800ca4a:	4a47      	ldr	r2, [pc, #284]	; (800cb68 <RobotStart+0x164>)
 800ca4c:	7f13      	ldrb	r3, [r2, #28]
 800ca4e:	f36f 1386 	bfc	r3, #6, #1
 800ca52:	7713      	strb	r3, [r2, #28]
	set_pick_enc = 0;
 800ca54:	4b45      	ldr	r3, [pc, #276]	; (800cb6c <RobotStart+0x168>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	601a      	str	r2, [r3, #0]
	stop_adjust = 0;
 800ca5a:	4b45      	ldr	r3, [pc, #276]	; (800cb70 <RobotStart+0x16c>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
	up_done = 0;
 800ca60:	4b44      	ldr	r3, [pc, #272]	; (800cb74 <RobotStart+0x170>)
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
	servo_enb = 0;
 800ca66:	4b44      	ldr	r3, [pc, #272]	; (800cb78 <RobotStart+0x174>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]
	pick_tol = 100;
 800ca6c:	4b43      	ldr	r3, [pc, #268]	; (800cb7c <RobotStart+0x178>)
 800ca6e:	2264      	movs	r2, #100	; 0x64
 800ca70:	601a      	str	r2, [r3, #0]
	vel_adjust = 0;
 800ca72:	4b43      	ldr	r3, [pc, #268]	; (800cb80 <RobotStart+0x17c>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]
	reload = 0;
 800ca78:	4b42      	ldr	r3, [pc, #264]	; (800cb84 <RobotStart+0x180>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800ca7e:	4b42      	ldr	r3, [pc, #264]	; (800cb88 <RobotStart+0x184>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]
	load_start = 0;
 800ca84:	4b41      	ldr	r3, [pc, #260]	; (800cb8c <RobotStart+0x188>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	601a      	str	r2, [r3, #0]
	wait_load = 0;
 800ca8a:	4b41      	ldr	r3, [pc, #260]	; (800cb90 <RobotStart+0x18c>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	601a      	str	r2, [r3, #0]
	must_load = 0;
 800ca90:	4b40      	ldr	r3, [pc, #256]	; (800cb94 <RobotStart+0x190>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
	wheel = 1;
 800ca96:	4b40      	ldr	r3, [pc, #256]	; (800cb98 <RobotStart+0x194>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]
	loaded = 0;
 800ca9c:	4b3f      	ldr	r3, [pc, #252]	; (800cb9c <RobotStart+0x198>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]
	led_enb = 0;
 800caa2:	4b3f      	ldr	r3, [pc, #252]	; (800cba0 <RobotStart+0x19c>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]
	pick_enc_buf = 0;
 800caa8:	4b3e      	ldr	r3, [pc, #248]	; (800cba4 <RobotStart+0x1a0>)
 800caaa:	2200      	movs	r2, #0
 800caac:	601a      	str	r2, [r3, #0]
	vesc_speed = 0;
 800caae:	4b3e      	ldr	r3, [pc, #248]	; (800cba8 <RobotStart+0x1a4>)
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
	stick_fence = 0;
 800cab6:	4b3d      	ldr	r3, [pc, #244]	; (800cbac <RobotStart+0x1a8>)
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
	vesc_start = 0;
 800cabc:	4b3c      	ldr	r3, [pc, #240]	; (800cbb0 <RobotStart+0x1ac>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]
	pick_left_manual = 0;
 800cac2:	4b3c      	ldr	r3, [pc, #240]	; (800cbb4 <RobotStart+0x1b0>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	601a      	str	r2, [r3, #0]
	load_adjust = 1;
 800cac8:	4b3b      	ldr	r3, [pc, #236]	; (800cbb8 <RobotStart+0x1b4>)
 800caca:	2201      	movs	r2, #1
 800cacc:	601a      	str	r2, [r3, #0]
	shooted = 0;
 800cace:	4b3b      	ldr	r3, [pc, #236]	; (800cbbc <RobotStart+0x1b8>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	601a      	str	r2, [r3, #0]
	adjust_count = 0;
 800cad4:	4b3a      	ldr	r3, [pc, #232]	; (800cbc0 <RobotStart+0x1bc>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	601a      	str	r2, [r3, #0]
	type_3_done = 0;
 800cada:	4b3a      	ldr	r3, [pc, #232]	; (800cbc4 <RobotStart+0x1c0>)
 800cadc:	2200      	movs	r2, #0
 800cade:	601a      	str	r2, [r3, #0]
	go_type_3 = 0;
 800cae0:	4b39      	ldr	r3, [pc, #228]	; (800cbc8 <RobotStart+0x1c4>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
	pick_0 = 0;
 800cae6:	4b39      	ldr	r3, [pc, #228]	; (800cbcc <RobotStart+0x1c8>)
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
	cylinder_load_once = 0;
 800caec:	4b38      	ldr	r3, [pc, #224]	; (800cbd0 <RobotStart+0x1cc>)
 800caee:	2200      	movs	r2, #0
 800caf0:	601a      	str	r2, [r3, #0]
	pick_right_enb = 1;
 800caf2:	4b38      	ldr	r3, [pc, #224]	; (800cbd4 <RobotStart+0x1d0>)
 800caf4:	2201      	movs	r2, #1
 800caf6:	601a      	str	r2, [r3, #0]
	shot_count = 0;
 800caf8:	4b37      	ldr	r3, [pc, #220]	; (800cbd8 <RobotStart+0x1d4>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	601a      	str	r2, [r3, #0]
	manual_adjust = 0;
 800cafe:	4b37      	ldr	r3, [pc, #220]	; (800cbdc <RobotStart+0x1d8>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
	extra_rpm = 0;
 800cb04:	4b36      	ldr	r3, [pc, #216]	; (800cbe0 <RobotStart+0x1dc>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	601a      	str	r2, [r3, #0]
	go_A = 0;
 800cb0a:	4b36      	ldr	r3, [pc, #216]	; (800cbe4 <RobotStart+0x1e0>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]

	// Parameters
	RedPickLess = 60;
 800cb10:	4b35      	ldr	r3, [pc, #212]	; (800cbe8 <RobotStart+0x1e4>)
 800cb12:	223c      	movs	r2, #60	; 0x3c
 800cb14:	601a      	str	r2, [r3, #0]
	BluePickLess = 60;
 800cb16:	4b35      	ldr	r3, [pc, #212]	; (800cbec <RobotStart+0x1e8>)
 800cb18:	223c      	movs	r2, #60	; 0x3c
 800cb1a:	601a      	str	r2, [r3, #0]
	RedPickMore = 0;
 800cb1c:	4b34      	ldr	r3, [pc, #208]	; (800cbf0 <RobotStart+0x1ec>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	601a      	str	r2, [r3, #0]
	vesc_extra = 0.0;
 800cb22:	4b34      	ldr	r3, [pc, #208]	; (800cbf4 <RobotStart+0x1f0>)
 800cb24:	f04f 0200 	mov.w	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
	BluePickMore = 0;
 800cb2a:	4b33      	ldr	r3, [pc, #204]	; (800cbf8 <RobotStart+0x1f4>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
}
 800cb30:	bf00      	nop
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop
 800cb3c:	200073b0 	.word	0x200073b0
 800cb40:	20009450 	.word	0x20009450
 800cb44:	20009a88 	.word	0x20009a88
 800cb48:	200090e8 	.word	0x200090e8
 800cb4c:	2000944c 	.word	0x2000944c
 800cb50:	200079c4 	.word	0x200079c4
 800cb54:	20009892 	.word	0x20009892
 800cb58:	20006a44 	.word	0x20006a44
 800cb5c:	20009878 	.word	0x20009878
 800cb60:	20009a1c 	.word	0x20009a1c
 800cb64:	20007328 	.word	0x20007328
 800cb68:	200097d4 	.word	0x200097d4
 800cb6c:	2000789c 	.word	0x2000789c
 800cb70:	20006500 	.word	0x20006500
 800cb74:	200079cc 	.word	0x200079cc
 800cb78:	2000a7e8 	.word	0x2000a7e8
 800cb7c:	200073c8 	.word	0x200073c8
 800cb80:	20009194 	.word	0x20009194
 800cb84:	200078b8 	.word	0x200078b8
 800cb88:	20009b98 	.word	0x20009b98
 800cb8c:	2000745c 	.word	0x2000745c
 800cb90:	2000759c 	.word	0x2000759c
 800cb94:	20009884 	.word	0x20009884
 800cb98:	200064f4 	.word	0x200064f4
 800cb9c:	200095a8 	.word	0x200095a8
 800cba0:	2000a858 	.word	0x2000a858
 800cba4:	20009e68 	.word	0x20009e68
 800cba8:	200065b8 	.word	0x200065b8
 800cbac:	200073d0 	.word	0x200073d0
 800cbb0:	20006a48 	.word	0x20006a48
 800cbb4:	20009bcc 	.word	0x20009bcc
 800cbb8:	200095bc 	.word	0x200095bc
 800cbbc:	2000a7a0 	.word	0x2000a7a0
 800cbc0:	20009648 	.word	0x20009648
 800cbc4:	200095b4 	.word	0x200095b4
 800cbc8:	20006d40 	.word	0x20006d40
 800cbcc:	20009fbc 	.word	0x20009fbc
 800cbd0:	2000a7e4 	.word	0x2000a7e4
 800cbd4:	20009d34 	.word	0x20009d34
 800cbd8:	200068d8 	.word	0x200068d8
 800cbdc:	20007598 	.word	0x20007598
 800cbe0:	2000665c 	.word	0x2000665c
 800cbe4:	20009bc8 	.word	0x20009bc8
 800cbe8:	2000a534 	.word	0x2000a534
 800cbec:	20006654 	.word	0x20006654
 800cbf0:	2000a7c8 	.word	0x2000a7c8
 800cbf4:	20009ef0 	.word	0x20009ef0
 800cbf8:	2000a60c 	.word	0x2000a60c
 800cbfc:	00000000 	.word	0x00000000

0800cc00 <NormalControl>:

void NormalControl()
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b0ac      	sub	sp, #176	; 0xb0
 800cc04:	af02      	add	r7, sp, #8
	// Cylinder
	if (ps4.button == OPTION)
 800cc06:	4b73      	ldr	r3, [pc, #460]	; (800cdd4 <NormalControl+0x1d4>)
 800cc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc0e:	d10a      	bne.n	800cc26 <NormalControl+0x26>
	{
		while (ps4.button == OPTION);
 800cc10:	bf00      	nop
 800cc12:	4b70      	ldr	r3, [pc, #448]	; (800cdd4 <NormalControl+0x1d4>)
 800cc14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc1a:	d0fa      	beq.n	800cc12 <NormalControl+0x12>
		ResetPickEnc();
 800cc1c:	f001 fba8 	bl	800e370 <ResetPickEnc>
		mode = AUTO;
 800cc20:	4b6d      	ldr	r3, [pc, #436]	; (800cdd8 <NormalControl+0x1d8>)
 800cc22:	2201      	movs	r2, #1
 800cc24:	601a      	str	r2, [r3, #0]
//		pick_0 = 1;
//		pick_down;
	}

	// Cylinder
	if (ps4.button == TRIANGLE)
 800cc26:	4b6b      	ldr	r3, [pc, #428]	; (800cdd4 <NormalControl+0x1d4>)
 800cc28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc2e:	d11e      	bne.n	800cc6e <NormalControl+0x6e>
	{
		while (ps4.button == TRIANGLE);
 800cc30:	bf00      	nop
 800cc32:	4b68      	ldr	r3, [pc, #416]	; (800cdd4 <NormalControl+0x1d4>)
 800cc34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc3a:	d0fa      	beq.n	800cc32 <NormalControl+0x32>
//			cylinder_load;
//			counter = 0;
//		}
//		LidarSendIns(NEAR, &lidar);
//		ResetCoordinate();
		ResetCoordinate();
 800cc3c:	f001 fb86 	bl	800e34c <ResetCoordinate>
		lidar.pos = POS_PENDING;
 800cc40:	4b66      	ldr	r3, [pc, #408]	; (800cddc <NormalControl+0x1dc>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = POS_PENDING;
 800cc48:	4b64      	ldr	r3, [pc, #400]	; (800cddc <NormalControl+0x1dc>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		pick_right = 1;
 800cc50:	4b63      	ldr	r3, [pc, #396]	; (800cde0 <NormalControl+0x1e0>)
 800cc52:	2201      	movs	r2, #1
 800cc54:	601a      	str	r2, [r3, #0]
		vesc_speed = 4;
 800cc56:	4b63      	ldr	r3, [pc, #396]	; (800cde4 <NormalControl+0x1e4>)
 800cc58:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800cc5c:	601a      	str	r2, [r3, #0]
		cylinder_retract;
 800cc5e:	4a62      	ldr	r2, [pc, #392]	; (800cde8 <NormalControl+0x1e8>)
 800cc60:	7f13      	ldrb	r3, [r2, #28]
 800cc62:	f36f 1386 	bfc	r3, #6, #1
 800cc66:	7713      	strb	r3, [r2, #28]
		mode = AUTO;
 800cc68:	4b5b      	ldr	r3, [pc, #364]	; (800cdd8 <NormalControl+0x1d8>)
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	601a      	str	r2, [r3, #0]
	}

	// mode
	if(ps4.button == SQUARE)
 800cc6e:	4b59      	ldr	r3, [pc, #356]	; (800cdd4 <NormalControl+0x1d4>)
 800cc70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc76:	d123      	bne.n	800ccc0 <NormalControl+0xc0>
	{
		while(ps4.button == SQUARE);
 800cc78:	bf00      	nop
 800cc7a:	4b56      	ldr	r3, [pc, #344]	; (800cdd4 <NormalControl+0x1d4>)
 800cc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc82:	d0fa      	beq.n	800cc7a <NormalControl+0x7a>
		if(!pp.pp_start)
 800cc84:	4b59      	ldr	r3, [pc, #356]	; (800cdec <NormalControl+0x1ec>)
 800cc86:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d112      	bne.n	800ccba <NormalControl+0xba>
		{
			static int counter = 0;

			if(counter == 0)
 800cc94:	4b56      	ldr	r3, [pc, #344]	; (800cdf0 <NormalControl+0x1f0>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d108      	bne.n	800ccae <NormalControl+0xae>
			{
				counter++;
 800cc9c:	4b54      	ldr	r3, [pc, #336]	; (800cdf0 <NormalControl+0x1f0>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3301      	adds	r3, #1
 800cca2:	4a53      	ldr	r2, [pc, #332]	; (800cdf0 <NormalControl+0x1f0>)
 800cca4:	6013      	str	r3, [r2, #0]
				blue = 0;
 800cca6:	4b53      	ldr	r3, [pc, #332]	; (800cdf4 <NormalControl+0x1f4>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	e005      	b.n	800ccba <NormalControl+0xba>
			}
			else
			{
				blue = 1;
 800ccae:	4b51      	ldr	r3, [pc, #324]	; (800cdf4 <NormalControl+0x1f4>)
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	601a      	str	r2, [r3, #0]
				counter = 0;
 800ccb4:	4b4e      	ldr	r3, [pc, #312]	; (800cdf0 <NormalControl+0x1f0>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	601a      	str	r2, [r3, #0]
			}
		}
		mode = AUTO;
 800ccba:	4b47      	ldr	r3, [pc, #284]	; (800cdd8 <NormalControl+0x1d8>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == UP)
 800ccc0:	4b44      	ldr	r3, [pc, #272]	; (800cdd4 <NormalControl+0x1d4>)
 800ccc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccc4:	2b10      	cmp	r3, #16
 800ccc6:	d115      	bne.n	800ccf4 <NormalControl+0xf4>
	{
		while(ps4.button == UP);
 800ccc8:	bf00      	nop
 800ccca:	4b42      	ldr	r3, [pc, #264]	; (800cdd4 <NormalControl+0x1d4>)
 800cccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccce:	2b10      	cmp	r3, #16
 800ccd0:	d0fb      	beq.n	800ccca <NormalControl+0xca>

		if(!lidar.autoshot)
 800ccd2:	4b42      	ldr	r3, [pc, #264]	; (800cddc <NormalControl+0x1dc>)
 800ccd4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d104      	bne.n	800cce6 <NormalControl+0xe6>
			lidar.autoshot = 1;
 800ccdc:	4b3f      	ldr	r3, [pc, #252]	; (800cddc <NormalControl+0x1dc>)
 800ccde:	2201      	movs	r2, #1
 800cce0:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 800cce4:	e003      	b.n	800ccee <NormalControl+0xee>
		else
			lidar.autoshot = 0;
 800cce6:	4b3d      	ldr	r3, [pc, #244]	; (800cddc <NormalControl+0x1dc>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

		mode = AUTO;
 800ccee:	4b3a      	ldr	r3, [pc, #232]	; (800cdd8 <NormalControl+0x1d8>)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == CROSS)
 800ccf4:	4b37      	ldr	r3, [pc, #220]	; (800cdd4 <NormalControl+0x1d4>)
 800ccf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccfc:	d13d      	bne.n	800cd7a <NormalControl+0x17a>
	{
		while(ps4.button == CROSS);
 800ccfe:	bf00      	nop
 800cd00:	4b34      	ldr	r3, [pc, #208]	; (800cdd4 <NormalControl+0x1d4>)
 800cd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd08:	d0fa      	beq.n	800cd00 <NormalControl+0x100>
		static int counter = 0;

		if(counter == 0)
 800cd0a:	4b3b      	ldr	r3, [pc, #236]	; (800cdf8 <NormalControl+0x1f8>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d11b      	bne.n	800cd4a <NormalControl+0x14a>
		{
			lidar.pos = CENTER_4;
 800cd12:	4b32      	ldr	r3, [pc, #200]	; (800cddc <NormalControl+0x1dc>)
 800cd14:	2207      	movs	r2, #7
 800cd16:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_4;
 800cd1a:	4b30      	ldr	r3, [pc, #192]	; (800cddc <NormalControl+0x1dc>)
 800cd1c:	2207      	movs	r2, #7
 800cd1e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			vesc_duty = type1Duty;
 800cd22:	4b36      	ldr	r3, [pc, #216]	; (800cdfc <NormalControl+0x1fc>)
 800cd24:	4a36      	ldr	r2, [pc, #216]	; (800ce00 <NormalControl+0x200>)
 800cd26:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800cd28:	4b2e      	ldr	r3, [pc, #184]	; (800cde4 <NormalControl+0x1e4>)
 800cd2a:	4a36      	ldr	r2, [pc, #216]	; (800ce04 <NormalControl+0x204>)
 800cd2c:	601a      	str	r2, [r3, #0]
			led7_on;
 800cd2e:	4b36      	ldr	r3, [pc, #216]	; (800ce08 <NormalControl+0x208>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800cd36:	63da      	str	r2, [r3, #60]	; 0x3c
			mode = AUTO;
 800cd38:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <NormalControl+0x1d8>)
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	601a      	str	r2, [r3, #0]
			counter++;
 800cd3e:	4b2e      	ldr	r3, [pc, #184]	; (800cdf8 <NormalControl+0x1f8>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	4a2c      	ldr	r2, [pc, #176]	; (800cdf8 <NormalControl+0x1f8>)
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	e017      	b.n	800cd7a <NormalControl+0x17a>
		}
		else
		{
			lidar.pos = CENTER_1;
 800cd4a:	4b24      	ldr	r3, [pc, #144]	; (800cddc <NormalControl+0x1dc>)
 800cd4c:	2203      	movs	r2, #3
 800cd4e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			lidar.pos_counter = CENTER_1;
 800cd52:	4b22      	ldr	r3, [pc, #136]	; (800cddc <NormalControl+0x1dc>)
 800cd54:	2203      	movs	r2, #3
 800cd56:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			led7_off;
 800cd5a:	4b2b      	ldr	r3, [pc, #172]	; (800ce08 <NormalControl+0x208>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	63da      	str	r2, [r3, #60]	; 0x3c
			vesc_speed = type1;
 800cd62:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <NormalControl+0x1e4>)
 800cd64:	4a27      	ldr	r2, [pc, #156]	; (800ce04 <NormalControl+0x204>)
 800cd66:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800cd68:	4b24      	ldr	r3, [pc, #144]	; (800cdfc <NormalControl+0x1fc>)
 800cd6a:	4a25      	ldr	r2, [pc, #148]	; (800ce00 <NormalControl+0x200>)
 800cd6c:	601a      	str	r2, [r3, #0]
			mode = AUTO;
 800cd6e:	4b1a      	ldr	r3, [pc, #104]	; (800cdd8 <NormalControl+0x1d8>)
 800cd70:	2201      	movs	r2, #1
 800cd72:	601a      	str	r2, [r3, #0]
			counter = 0;
 800cd74:	4b20      	ldr	r3, [pc, #128]	; (800cdf8 <NormalControl+0x1f8>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
		}
	}

	// Apply extra rpm
	if(ps4.button == CIRCLE)
 800cd7a:	4b16      	ldr	r3, [pc, #88]	; (800cdd4 <NormalControl+0x1d4>)
 800cd7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd82:	d10f      	bne.n	800cda4 <NormalControl+0x1a4>
	{
		while(ps4.button == CIRCLE);
 800cd84:	bf00      	nop
 800cd86:	4b13      	ldr	r3, [pc, #76]	; (800cdd4 <NormalControl+0x1d4>)
 800cd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd8e:	d0fa      	beq.n	800cd86 <NormalControl+0x186>
		extra_rpm = manual_adjust * 5;
 800cd90:	4b1e      	ldr	r3, [pc, #120]	; (800ce0c <NormalControl+0x20c>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	4a1d      	ldr	r2, [pc, #116]	; (800ce10 <NormalControl+0x210>)
 800cd9c:	6013      	str	r3, [r2, #0]

		mode = AUTO;
 800cd9e:	4b0e      	ldr	r3, [pc, #56]	; (800cdd8 <NormalControl+0x1d8>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800cda4:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <NormalControl+0x1d4>)
 800cda6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d140      	bne.n	800ce2e <NormalControl+0x22e>
	{
		while(ps4.button == RIGHT);
 800cdac:	bf00      	nop
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <NormalControl+0x1d4>)
 800cdb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdb2:	2b20      	cmp	r3, #32
 800cdb4:	d0fb      	beq.n	800cdae <NormalControl+0x1ae>
		static int counter = 0;
		counter++;
 800cdb6:	4b17      	ldr	r3, [pc, #92]	; (800ce14 <NormalControl+0x214>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	4a15      	ldr	r2, [pc, #84]	; (800ce14 <NormalControl+0x214>)
 800cdbe:	6013      	str	r3, [r2, #0]

		if(counter == 1)
 800cdc0:	4b14      	ldr	r3, [pc, #80]	; (800ce14 <NormalControl+0x214>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d127      	bne.n	800ce18 <NormalControl+0x218>
		{
			cylinder_load;
 800cdc8:	4a07      	ldr	r2, [pc, #28]	; (800cde8 <NormalControl+0x1e8>)
 800cdca:	7f13      	ldrb	r3, [r2, #28]
 800cdcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdd0:	7713      	strb	r3, [r2, #28]
 800cdd2:	e029      	b.n	800ce28 <NormalControl+0x228>
 800cdd4:	2000a240 	.word	0x2000a240
 800cdd8:	20009450 	.word	0x20009450
 800cddc:	200091a0 	.word	0x200091a0
 800cde0:	2000a89c 	.word	0x2000a89c
 800cde4:	200065b8 	.word	0x200065b8
 800cde8:	200097d4 	.word	0x200097d4
 800cdec:	20006d44 	.word	0x20006d44
 800cdf0:	200002d4 	.word	0x200002d4
 800cdf4:	20006a44 	.word	0x20006a44
 800cdf8:	200002d8 	.word	0x200002d8
 800cdfc:	20007494 	.word	0x20007494
 800ce00:	445e8000 	.word	0x445e8000
 800ce04:	406ccccd 	.word	0x406ccccd
 800ce08:	20005ca0 	.word	0x20005ca0
 800ce0c:	20007598 	.word	0x20007598
 800ce10:	2000665c 	.word	0x2000665c
 800ce14:	200002dc 	.word	0x200002dc
		}
		else
		{
			cylinder_retract;
 800ce18:	4aaf      	ldr	r2, [pc, #700]	; (800d0d8 <NormalControl+0x4d8>)
 800ce1a:	7f13      	ldrb	r3, [r2, #28]
 800ce1c:	f36f 1386 	bfc	r3, #6, #1
 800ce20:	7713      	strb	r3, [r2, #28]
			counter = 0;
 800ce22:	4bae      	ldr	r3, [pc, #696]	; (800d0dc <NormalControl+0x4dc>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	601a      	str	r2, [r3, #0]
		}
		mode = AUTO;
 800ce28:	4bad      	ldr	r3, [pc, #692]	; (800d0e0 <NormalControl+0x4e0>)
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	601a      	str	r2, [r3, #0]
	}

	// Adjust for A and B
	if(ps4.button == LEFT)
 800ce2e:	4bad      	ldr	r3, [pc, #692]	; (800d0e4 <NormalControl+0x4e4>)
 800ce30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce32:	2b80      	cmp	r3, #128	; 0x80
 800ce34:	f040 832b 	bne.w	800d48e <NormalControl+0x88e>
	{
		while(ps4.button == LEFT);
 800ce38:	bf00      	nop
 800ce3a:	4baa      	ldr	r3, [pc, #680]	; (800d0e4 <NormalControl+0x4e4>)
 800ce3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce3e:	2b80      	cmp	r3, #128	; 0x80
 800ce40:	d0fb      	beq.n	800ce3a <NormalControl+0x23a>

		float center_2_to_A[1][7] = {{0, 4.22, pp.real_y + 0.3, -90, 3.5, 0.06, 1}};
 800ce42:	f04f 0300 	mov.w	r3, #0
 800ce46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ce4a:	4ba7      	ldr	r3, [pc, #668]	; (800d0e8 <NormalControl+0x4e8>)
 800ce4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce50:	4ba6      	ldr	r3, [pc, #664]	; (800d0ec <NormalControl+0x4ec>)
 800ce52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f3 fb77 	bl	8000548 <__aeabi_f2d>
 800ce5a:	a39d      	add	r3, pc, #628	; (adr r3, 800d0d0 <NormalControl+0x4d0>)
 800ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce60:	f7f3 fa14 	bl	800028c <__adddf3>
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	4610      	mov	r0, r2
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	f7f3 febc 	bl	8000be8 <__aeabi_d2f>
 800ce70:	4603      	mov	r3, r0
 800ce72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce76:	4b9e      	ldr	r3, [pc, #632]	; (800d0f0 <NormalControl+0x4f0>)
 800ce78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ce7c:	4b9d      	ldr	r3, [pc, #628]	; (800d0f4 <NormalControl+0x4f4>)
 800ce7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ce82:	4b9d      	ldr	r3, [pc, #628]	; (800d0f8 <NormalControl+0x4f8>)
 800ce84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ce88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ce8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		float A_to_center_2[1][7] = {{0, 4.32, pp.real_y + 0.3, -90, 3.5, 0.06, 1}};
 800ce90:	f04f 0300 	mov.w	r3, #0
 800ce94:	673b      	str	r3, [r7, #112]	; 0x70
 800ce96:	4b99      	ldr	r3, [pc, #612]	; (800d0fc <NormalControl+0x4fc>)
 800ce98:	677b      	str	r3, [r7, #116]	; 0x74
 800ce9a:	4b94      	ldr	r3, [pc, #592]	; (800d0ec <NormalControl+0x4ec>)
 800ce9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7f3 fb52 	bl	8000548 <__aeabi_f2d>
 800cea4:	a38a      	add	r3, pc, #552	; (adr r3, 800d0d0 <NormalControl+0x4d0>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 f9ef 	bl	800028c <__adddf3>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	f7f3 fe97 	bl	8000be8 <__aeabi_d2f>
 800ceba:	4603      	mov	r3, r0
 800cebc:	67bb      	str	r3, [r7, #120]	; 0x78
 800cebe:	4b8c      	ldr	r3, [pc, #560]	; (800d0f0 <NormalControl+0x4f0>)
 800cec0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cec2:	4b8c      	ldr	r3, [pc, #560]	; (800d0f4 <NormalControl+0x4f4>)
 800cec4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cec8:	4b8b      	ldr	r3, [pc, #556]	; (800d0f8 <NormalControl+0x4f8>)
 800ceca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cece:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ced2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		float center_3_to_B[1][7] = {{0, 4.76, pp.real_y + 0.3, -90, 3.5, 0.06, 1}};
 800ced6:	f04f 0300 	mov.w	r3, #0
 800ceda:	657b      	str	r3, [r7, #84]	; 0x54
 800cedc:	4b88      	ldr	r3, [pc, #544]	; (800d100 <NormalControl+0x500>)
 800cede:	65bb      	str	r3, [r7, #88]	; 0x58
 800cee0:	4b82      	ldr	r3, [pc, #520]	; (800d0ec <NormalControl+0x4ec>)
 800cee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7f3 fb2f 	bl	8000548 <__aeabi_f2d>
 800ceea:	a379      	add	r3, pc, #484	; (adr r3, 800d0d0 <NormalControl+0x4d0>)
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	f7f3 f9cc 	bl	800028c <__adddf3>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4610      	mov	r0, r2
 800cefa:	4619      	mov	r1, r3
 800cefc:	f7f3 fe74 	bl	8000be8 <__aeabi_d2f>
 800cf00:	4603      	mov	r3, r0
 800cf02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf04:	4b7a      	ldr	r3, [pc, #488]	; (800d0f0 <NormalControl+0x4f0>)
 800cf06:	663b      	str	r3, [r7, #96]	; 0x60
 800cf08:	4b7a      	ldr	r3, [pc, #488]	; (800d0f4 <NormalControl+0x4f4>)
 800cf0a:	667b      	str	r3, [r7, #100]	; 0x64
 800cf0c:	4b7a      	ldr	r3, [pc, #488]	; (800d0f8 <NormalControl+0x4f8>)
 800cf0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf14:	66fb      	str	r3, [r7, #108]	; 0x6c
		float B_to_center_3[1][7] = {{0, 4.66, pp.real_y + 0.3, -90, 3.5, 0.06, 1}};
 800cf16:	f04f 0300 	mov.w	r3, #0
 800cf1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf1c:	4b79      	ldr	r3, [pc, #484]	; (800d104 <NormalControl+0x504>)
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf20:	4b72      	ldr	r3, [pc, #456]	; (800d0ec <NormalControl+0x4ec>)
 800cf22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7f3 fb0f 	bl	8000548 <__aeabi_f2d>
 800cf2a:	a369      	add	r3, pc, #420	; (adr r3, 800d0d0 <NormalControl+0x4d0>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f7f3 f9ac 	bl	800028c <__adddf3>
 800cf34:	4602      	mov	r2, r0
 800cf36:	460b      	mov	r3, r1
 800cf38:	4610      	mov	r0, r2
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	f7f3 fe54 	bl	8000be8 <__aeabi_d2f>
 800cf40:	4603      	mov	r3, r0
 800cf42:	643b      	str	r3, [r7, #64]	; 0x40
 800cf44:	4b6a      	ldr	r3, [pc, #424]	; (800d0f0 <NormalControl+0x4f0>)
 800cf46:	647b      	str	r3, [r7, #68]	; 0x44
 800cf48:	4b6a      	ldr	r3, [pc, #424]	; (800d0f4 <NormalControl+0x4f4>)
 800cf4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf4c:	4b6a      	ldr	r3, [pc, #424]	; (800d0f8 <NormalControl+0x4f8>)
 800cf4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf54:	653b      	str	r3, [r7, #80]	; 0x50

		float center_to_three[1][7] = {{0, 5.6, pp.real_y + 0.3, -90, 3.5, 0.06, 1}};
 800cf56:	f04f 0300 	mov.w	r3, #0
 800cf5a:	61fb      	str	r3, [r7, #28]
 800cf5c:	4b6a      	ldr	r3, [pc, #424]	; (800d108 <NormalControl+0x508>)
 800cf5e:	623b      	str	r3, [r7, #32]
 800cf60:	4b62      	ldr	r3, [pc, #392]	; (800d0ec <NormalControl+0x4ec>)
 800cf62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7f3 faef 	bl	8000548 <__aeabi_f2d>
 800cf6a:	a359      	add	r3, pc, #356	; (adr r3, 800d0d0 <NormalControl+0x4d0>)
 800cf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf70:	f7f3 f98c 	bl	800028c <__adddf3>
 800cf74:	4602      	mov	r2, r0
 800cf76:	460b      	mov	r3, r1
 800cf78:	4610      	mov	r0, r2
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	f7f3 fe34 	bl	8000be8 <__aeabi_d2f>
 800cf80:	4603      	mov	r3, r0
 800cf82:	627b      	str	r3, [r7, #36]	; 0x24
 800cf84:	4b5a      	ldr	r3, [pc, #360]	; (800d0f0 <NormalControl+0x4f0>)
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf88:	4b5a      	ldr	r3, [pc, #360]	; (800d0f4 <NormalControl+0x4f4>)
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf8c:	4b5a      	ldr	r3, [pc, #360]	; (800d0f8 <NormalControl+0x4f8>)
 800cf8e:	633b      	str	r3, [r7, #48]	; 0x30
 800cf90:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf94:	637b      	str	r3, [r7, #52]	; 0x34
		float three_to_center[1][7] = {{0, 5.82, pp.real_y + 0.3, -90, 3.5, 0.06, 1}};
 800cf96:	f04f 0300 	mov.w	r3, #0
 800cf9a:	603b      	str	r3, [r7, #0]
 800cf9c:	4b5b      	ldr	r3, [pc, #364]	; (800d10c <NormalControl+0x50c>)
 800cf9e:	607b      	str	r3, [r7, #4]
 800cfa0:	4b52      	ldr	r3, [pc, #328]	; (800d0ec <NormalControl+0x4ec>)
 800cfa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7f3 facf 	bl	8000548 <__aeabi_f2d>
 800cfaa:	a349      	add	r3, pc, #292	; (adr r3, 800d0d0 <NormalControl+0x4d0>)
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	f7f3 f96c 	bl	800028c <__adddf3>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4619      	mov	r1, r3
 800cfbc:	f7f3 fe14 	bl	8000be8 <__aeabi_d2f>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	60bb      	str	r3, [r7, #8]
 800cfc4:	4b4a      	ldr	r3, [pc, #296]	; (800d0f0 <NormalControl+0x4f0>)
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	4b4a      	ldr	r3, [pc, #296]	; (800d0f4 <NormalControl+0x4f4>)
 800cfca:	613b      	str	r3, [r7, #16]
 800cfcc:	4b4a      	ldr	r3, [pc, #296]	; (800d0f8 <NormalControl+0x4f8>)
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cfd4:	61bb      	str	r3, [r7, #24]

		if(lidar.pos == CENTER_2)
 800cfd6:	4b4e      	ldr	r3, [pc, #312]	; (800d110 <NormalControl+0x510>)
 800cfd8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	d14f      	bne.n	800d080 <NormalControl+0x480>
		{
			if(blue)
 800cfe0:	4b4c      	ldr	r3, [pc, #304]	; (800d114 <NormalControl+0x514>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d006      	beq.n	800cff6 <NormalControl+0x3f6>
			{
				vesc_speed = BlueOppoType2;
 800cfe8:	4b4b      	ldr	r3, [pc, #300]	; (800d118 <NormalControl+0x518>)
 800cfea:	4a4c      	ldr	r2, [pc, #304]	; (800d11c <NormalControl+0x51c>)
 800cfec:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800cfee:	4b4c      	ldr	r3, [pc, #304]	; (800d120 <NormalControl+0x520>)
 800cff0:	4a4c      	ldr	r2, [pc, #304]	; (800d124 <NormalControl+0x524>)
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	e005      	b.n	800d002 <NormalControl+0x402>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800cff6:	4b48      	ldr	r3, [pc, #288]	; (800d118 <NormalControl+0x518>)
 800cff8:	4a4b      	ldr	r2, [pc, #300]	; (800d128 <NormalControl+0x528>)
 800cffa:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800cffc:	4b48      	ldr	r3, [pc, #288]	; (800d120 <NormalControl+0x520>)
 800cffe:	4a4b      	ldr	r2, [pc, #300]	; (800d12c <NormalControl+0x52c>)
 800d000:	601a      	str	r2, [r3, #0]
			}

			lidar.pos = A;
 800d002:	4b43      	ldr	r3, [pc, #268]	; (800d110 <NormalControl+0x510>)
 800d004:	220a      	movs	r2, #10
 800d006:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			LSR_start(center_2_to_A, 1, &pp, 0, 0);
 800d00a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800d00e:	2300      	movs	r3, #0
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	2300      	movs	r3, #0
 800d014:	4a35      	ldr	r2, [pc, #212]	; (800d0ec <NormalControl+0x4ec>)
 800d016:	2101      	movs	r1, #1
 800d018:	f7f8 ffa0 	bl	8005f5c <LSR_start>
			while(pp.lsr_start)
 800d01c:	e01b      	b.n	800d056 <NormalControl+0x456>
			{
				if(ps4.button == SQUARE)
 800d01e:	4b31      	ldr	r3, [pc, #196]	; (800d0e4 <NormalControl+0x4e4>)
 800d020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d026:	d108      	bne.n	800d03a <NormalControl+0x43a>
				{
					while(ps4.button == SQUARE);
 800d028:	bf00      	nop
 800d02a:	4b2e      	ldr	r3, [pc, #184]	; (800d0e4 <NormalControl+0x4e4>)
 800d02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d02e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d032:	d0fa      	beq.n	800d02a <NormalControl+0x42a>
					PP_stop(&pp);
 800d034:	482d      	ldr	r0, [pc, #180]	; (800d0ec <NormalControl+0x4ec>)
 800d036:	f7f9 f903 	bl	8006240 <PP_stop>
				}

				if(lsrL.dist <= center_2_to_A[0][1])
 800d03a:	4b3d      	ldr	r3, [pc, #244]	; (800d130 <NormalControl+0x530>)
 800d03c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d040:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800d044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04c:	d900      	bls.n	800d050 <NormalControl+0x450>
 800d04e:	e002      	b.n	800d056 <NormalControl+0x456>
					PP_stop(&pp);
 800d050:	4826      	ldr	r0, [pc, #152]	; (800d0ec <NormalControl+0x4ec>)
 800d052:	f7f9 f8f5 	bl	8006240 <PP_stop>
			while(pp.lsr_start)
 800d056:	4b25      	ldr	r3, [pc, #148]	; (800d0ec <NormalControl+0x4ec>)
 800d058:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d05c:	f003 0310 	and.w	r3, r3, #16
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1db      	bne.n	800d01e <NormalControl+0x41e>
			}

			if(lidar.autoshot)
 800d066:	4b2a      	ldr	r3, [pc, #168]	; (800d110 <NormalControl+0x510>)
 800d068:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f000 820b 	beq.w	800d488 <NormalControl+0x888>
			{
				osDelay(300);
 800d072:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d076:	f00f fd29 	bl	801cacc <osDelay>
				Shot();
 800d07a:	f001 fcb5 	bl	800e9e8 <Shot>
 800d07e:	e203      	b.n	800d488 <NormalControl+0x888>
			}
		}

		else if(lidar.pos == A)
 800d080:	4b23      	ldr	r3, [pc, #140]	; (800d110 <NormalControl+0x510>)
 800d082:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d086:	2b0a      	cmp	r3, #10
 800d088:	f040 808d 	bne.w	800d1a6 <NormalControl+0x5a6>
		{
			if(blue)
 800d08c:	4b21      	ldr	r3, [pc, #132]	; (800d114 <NormalControl+0x514>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d006      	beq.n	800d0a2 <NormalControl+0x4a2>
			{
				vesc_speed = BlueType2;
 800d094:	4b20      	ldr	r3, [pc, #128]	; (800d118 <NormalControl+0x518>)
 800d096:	4a27      	ldr	r2, [pc, #156]	; (800d134 <NormalControl+0x534>)
 800d098:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800d09a:	4b21      	ldr	r3, [pc, #132]	; (800d120 <NormalControl+0x520>)
 800d09c:	4a26      	ldr	r2, [pc, #152]	; (800d138 <NormalControl+0x538>)
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	e005      	b.n	800d0ae <NormalControl+0x4ae>
			}
			else
			{
				vesc_speed = RedType2;
 800d0a2:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <NormalControl+0x518>)
 800d0a4:	4a25      	ldr	r2, [pc, #148]	; (800d13c <NormalControl+0x53c>)
 800d0a6:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800d0a8:	4b1d      	ldr	r3, [pc, #116]	; (800d120 <NormalControl+0x520>)
 800d0aa:	4a25      	ldr	r2, [pc, #148]	; (800d140 <NormalControl+0x540>)
 800d0ac:	601a      	str	r2, [r3, #0]
			}

			lidar.pos = CENTER_2;
 800d0ae:	4b18      	ldr	r3, [pc, #96]	; (800d110 <NormalControl+0x510>)
 800d0b0:	2204      	movs	r2, #4
 800d0b2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			LSR_start(A_to_center_2, 1, &pp, 0, 0);
 800d0b6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	2300      	movs	r3, #0
 800d0c0:	4a0a      	ldr	r2, [pc, #40]	; (800d0ec <NormalControl+0x4ec>)
 800d0c2:	2101      	movs	r1, #1
 800d0c4:	f7f8 ff4a 	bl	8005f5c <LSR_start>
			while(pp.lsr_start)
 800d0c8:	e058      	b.n	800d17c <NormalControl+0x57c>
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	33333333 	.word	0x33333333
 800d0d4:	3fd33333 	.word	0x3fd33333
 800d0d8:	200097d4 	.word	0x200097d4
 800d0dc:	200002dc 	.word	0x200002dc
 800d0e0:	20009450 	.word	0x20009450
 800d0e4:	2000a240 	.word	0x2000a240
 800d0e8:	40870a3d 	.word	0x40870a3d
 800d0ec:	20006d44 	.word	0x20006d44
 800d0f0:	c2b40000 	.word	0xc2b40000
 800d0f4:	40600000 	.word	0x40600000
 800d0f8:	3d75c28f 	.word	0x3d75c28f
 800d0fc:	408a3d71 	.word	0x408a3d71
 800d100:	409851ec 	.word	0x409851ec
 800d104:	40951eb8 	.word	0x40951eb8
 800d108:	40b33333 	.word	0x40b33333
 800d10c:	40ba3d71 	.word	0x40ba3d71
 800d110:	200091a0 	.word	0x200091a0
 800d114:	20006a44 	.word	0x20006a44
 800d118:	200065b8 	.word	0x200065b8
 800d11c:	414f3333 	.word	0x414f3333
 800d120:	20007494 	.word	0x20007494
 800d124:	45020000 	.word	0x45020000
 800d128:	4154cccd 	.word	0x4154cccd
 800d12c:	45039000 	.word	0x45039000
 800d130:	20007728 	.word	0x20007728
 800d134:	41026666 	.word	0x41026666
 800d138:	44bea000 	.word	0x44bea000
 800d13c:	4104cccd 	.word	0x4104cccd
 800d140:	44c1c000 	.word	0x44c1c000
			{
				if(ps4.button == SQUARE)
 800d144:	4baf      	ldr	r3, [pc, #700]	; (800d404 <NormalControl+0x804>)
 800d146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d14c:	d108      	bne.n	800d160 <NormalControl+0x560>
				{
					while(ps4.button == SQUARE);
 800d14e:	bf00      	nop
 800d150:	4bac      	ldr	r3, [pc, #688]	; (800d404 <NormalControl+0x804>)
 800d152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d158:	d0fa      	beq.n	800d150 <NormalControl+0x550>
					PP_stop(&pp);
 800d15a:	48ab      	ldr	r0, [pc, #684]	; (800d408 <NormalControl+0x808>)
 800d15c:	f7f9 f870 	bl	8006240 <PP_stop>
				}

				if(lsrL.dist >= A_to_center_2[0][1])
 800d160:	4baa      	ldr	r3, [pc, #680]	; (800d40c <NormalControl+0x80c>)
 800d162:	ed93 7a07 	vldr	s14, [r3, #28]
 800d166:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800d16a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d172:	da00      	bge.n	800d176 <NormalControl+0x576>
 800d174:	e002      	b.n	800d17c <NormalControl+0x57c>
					PP_stop(&pp);
 800d176:	48a4      	ldr	r0, [pc, #656]	; (800d408 <NormalControl+0x808>)
 800d178:	f7f9 f862 	bl	8006240 <PP_stop>
			while(pp.lsr_start)
 800d17c:	4ba2      	ldr	r3, [pc, #648]	; (800d408 <NormalControl+0x808>)
 800d17e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d182:	f003 0310 	and.w	r3, r3, #16
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1db      	bne.n	800d144 <NormalControl+0x544>
			}

			if(lidar.autoshot)
 800d18c:	4ba0      	ldr	r3, [pc, #640]	; (800d410 <NormalControl+0x810>)
 800d18e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 8178 	beq.w	800d488 <NormalControl+0x888>
			{
				osDelay(300);
 800d198:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d19c:	f00f fc96 	bl	801cacc <osDelay>
				Shot();
 800d1a0:	f001 fc22 	bl	800e9e8 <Shot>
 800d1a4:	e170      	b.n	800d488 <NormalControl+0x888>
			}
		}

		else if(lidar.pos == CENTER_3)
 800d1a6:	4b9a      	ldr	r3, [pc, #616]	; (800d410 <NormalControl+0x810>)
 800d1a8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d1ac:	2b06      	cmp	r3, #6
 800d1ae:	d14f      	bne.n	800d250 <NormalControl+0x650>
		{
			if(blue)
 800d1b0:	4b98      	ldr	r3, [pc, #608]	; (800d414 <NormalControl+0x814>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d006      	beq.n	800d1c6 <NormalControl+0x5c6>
			{
				vesc_speed = BlueOppoType2;
 800d1b8:	4b97      	ldr	r3, [pc, #604]	; (800d418 <NormalControl+0x818>)
 800d1ba:	4a98      	ldr	r2, [pc, #608]	; (800d41c <NormalControl+0x81c>)
 800d1bc:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800d1be:	4b98      	ldr	r3, [pc, #608]	; (800d420 <NormalControl+0x820>)
 800d1c0:	4a98      	ldr	r2, [pc, #608]	; (800d424 <NormalControl+0x824>)
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e005      	b.n	800d1d2 <NormalControl+0x5d2>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800d1c6:	4b94      	ldr	r3, [pc, #592]	; (800d418 <NormalControl+0x818>)
 800d1c8:	4a97      	ldr	r2, [pc, #604]	; (800d428 <NormalControl+0x828>)
 800d1ca:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800d1cc:	4b94      	ldr	r3, [pc, #592]	; (800d420 <NormalControl+0x820>)
 800d1ce:	4a97      	ldr	r2, [pc, #604]	; (800d42c <NormalControl+0x82c>)
 800d1d0:	601a      	str	r2, [r3, #0]
			}

			lidar.pos = B;
 800d1d2:	4b8f      	ldr	r3, [pc, #572]	; (800d410 <NormalControl+0x810>)
 800d1d4:	220b      	movs	r2, #11
 800d1d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			LSR_start(center_3_to_B, 1, &pp, 0, 1);
 800d1da:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800d1de:	2301      	movs	r3, #1
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	4a88      	ldr	r2, [pc, #544]	; (800d408 <NormalControl+0x808>)
 800d1e6:	2101      	movs	r1, #1
 800d1e8:	f7f8 feb8 	bl	8005f5c <LSR_start>
			while(pp.lsr_start)
 800d1ec:	e01b      	b.n	800d226 <NormalControl+0x626>
			{
				if(ps4.button == SQUARE)
 800d1ee:	4b85      	ldr	r3, [pc, #532]	; (800d404 <NormalControl+0x804>)
 800d1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1f6:	d108      	bne.n	800d20a <NormalControl+0x60a>
				{
					while(ps4.button == SQUARE);
 800d1f8:	bf00      	nop
 800d1fa:	4b82      	ldr	r3, [pc, #520]	; (800d404 <NormalControl+0x804>)
 800d1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d202:	d0fa      	beq.n	800d1fa <NormalControl+0x5fa>
					PP_stop(&pp);
 800d204:	4880      	ldr	r0, [pc, #512]	; (800d408 <NormalControl+0x808>)
 800d206:	f7f9 f81b 	bl	8006240 <PP_stop>
				}

				if(lsrR.dist >= center_3_to_B[0][1])
 800d20a:	4b89      	ldr	r3, [pc, #548]	; (800d430 <NormalControl+0x830>)
 800d20c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d210:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800d214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21c:	da00      	bge.n	800d220 <NormalControl+0x620>
 800d21e:	e002      	b.n	800d226 <NormalControl+0x626>
					PP_stop(&pp);
 800d220:	4879      	ldr	r0, [pc, #484]	; (800d408 <NormalControl+0x808>)
 800d222:	f7f9 f80d 	bl	8006240 <PP_stop>
			while(pp.lsr_start)
 800d226:	4b78      	ldr	r3, [pc, #480]	; (800d408 <NormalControl+0x808>)
 800d228:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d22c:	f003 0310 	and.w	r3, r3, #16
 800d230:	b2db      	uxtb	r3, r3
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1db      	bne.n	800d1ee <NormalControl+0x5ee>
			}

			if(lidar.autoshot)
 800d236:	4b76      	ldr	r3, [pc, #472]	; (800d410 <NormalControl+0x810>)
 800d238:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f000 8123 	beq.w	800d488 <NormalControl+0x888>
			{
				osDelay(300);
 800d242:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d246:	f00f fc41 	bl	801cacc <osDelay>
				Shot();
 800d24a:	f001 fbcd 	bl	800e9e8 <Shot>
 800d24e:	e11b      	b.n	800d488 <NormalControl+0x888>
			}
		}

		else if(lidar.pos == B)
 800d250:	4b6f      	ldr	r3, [pc, #444]	; (800d410 <NormalControl+0x810>)
 800d252:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d256:	2b0b      	cmp	r3, #11
 800d258:	d14f      	bne.n	800d2fa <NormalControl+0x6fa>
		{
			if(blue)
 800d25a:	4b6e      	ldr	r3, [pc, #440]	; (800d414 <NormalControl+0x814>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <NormalControl+0x670>
			{
				vesc_speed = BlueType2;
 800d262:	4b6d      	ldr	r3, [pc, #436]	; (800d418 <NormalControl+0x818>)
 800d264:	4a73      	ldr	r2, [pc, #460]	; (800d434 <NormalControl+0x834>)
 800d266:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800d268:	4b6d      	ldr	r3, [pc, #436]	; (800d420 <NormalControl+0x820>)
 800d26a:	4a73      	ldr	r2, [pc, #460]	; (800d438 <NormalControl+0x838>)
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	e005      	b.n	800d27c <NormalControl+0x67c>
			}
			else
			{
				vesc_speed = RedType2;
 800d270:	4b69      	ldr	r3, [pc, #420]	; (800d418 <NormalControl+0x818>)
 800d272:	4a72      	ldr	r2, [pc, #456]	; (800d43c <NormalControl+0x83c>)
 800d274:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800d276:	4b6a      	ldr	r3, [pc, #424]	; (800d420 <NormalControl+0x820>)
 800d278:	4a71      	ldr	r2, [pc, #452]	; (800d440 <NormalControl+0x840>)
 800d27a:	601a      	str	r2, [r3, #0]
			}

			lidar.pos = CENTER_3;
 800d27c:	4b64      	ldr	r3, [pc, #400]	; (800d410 <NormalControl+0x810>)
 800d27e:	2206      	movs	r2, #6
 800d280:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			LSR_start(B_to_center_3, 1, &pp, 0, 1);
 800d284:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800d288:	2301      	movs	r3, #1
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	2300      	movs	r3, #0
 800d28e:	4a5e      	ldr	r2, [pc, #376]	; (800d408 <NormalControl+0x808>)
 800d290:	2101      	movs	r1, #1
 800d292:	f7f8 fe63 	bl	8005f5c <LSR_start>
			while(pp.lsr_start)
 800d296:	e01b      	b.n	800d2d0 <NormalControl+0x6d0>
			{
				if(ps4.button == SQUARE)
 800d298:	4b5a      	ldr	r3, [pc, #360]	; (800d404 <NormalControl+0x804>)
 800d29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d29c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2a0:	d108      	bne.n	800d2b4 <NormalControl+0x6b4>
				{
					while(ps4.button == SQUARE);
 800d2a2:	bf00      	nop
 800d2a4:	4b57      	ldr	r3, [pc, #348]	; (800d404 <NormalControl+0x804>)
 800d2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2ac:	d0fa      	beq.n	800d2a4 <NormalControl+0x6a4>
					PP_stop(&pp);
 800d2ae:	4856      	ldr	r0, [pc, #344]	; (800d408 <NormalControl+0x808>)
 800d2b0:	f7f8 ffc6 	bl	8006240 <PP_stop>
				}

				if(lsrR.dist <= B_to_center_3[0][1])
 800d2b4:	4b5e      	ldr	r3, [pc, #376]	; (800d430 <NormalControl+0x830>)
 800d2b6:	ed93 7a07 	vldr	s14, [r3, #28]
 800d2ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d2be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c6:	d900      	bls.n	800d2ca <NormalControl+0x6ca>
 800d2c8:	e002      	b.n	800d2d0 <NormalControl+0x6d0>
					PP_stop(&pp);
 800d2ca:	484f      	ldr	r0, [pc, #316]	; (800d408 <NormalControl+0x808>)
 800d2cc:	f7f8 ffb8 	bl	8006240 <PP_stop>
			while(pp.lsr_start)
 800d2d0:	4b4d      	ldr	r3, [pc, #308]	; (800d408 <NormalControl+0x808>)
 800d2d2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d2d6:	f003 0310 	and.w	r3, r3, #16
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1db      	bne.n	800d298 <NormalControl+0x698>
			}

			if(lidar.autoshot)
 800d2e0:	4b4b      	ldr	r3, [pc, #300]	; (800d410 <NormalControl+0x810>)
 800d2e2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f000 80ce 	beq.w	800d488 <NormalControl+0x888>
			{
				osDelay(300);
 800d2ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d2f0:	f00f fbec 	bl	801cacc <osDelay>
				Shot();
 800d2f4:	f001 fb78 	bl	800e9e8 <Shot>
 800d2f8:	e0c6      	b.n	800d488 <NormalControl+0x888>
			}
		}

		else if(lidar.pos == CENTER)
 800d2fa:	4b45      	ldr	r3, [pc, #276]	; (800d410 <NormalControl+0x810>)
 800d2fc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d300:	2b05      	cmp	r3, #5
 800d302:	d14e      	bne.n	800d3a2 <NormalControl+0x7a2>
		{
			if(blue)
 800d304:	4b43      	ldr	r3, [pc, #268]	; (800d414 <NormalControl+0x814>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d006      	beq.n	800d31a <NormalControl+0x71a>
			{
				vesc_speed = BlueType3;
 800d30c:	4b42      	ldr	r3, [pc, #264]	; (800d418 <NormalControl+0x818>)
 800d30e:	4a4d      	ldr	r2, [pc, #308]	; (800d444 <NormalControl+0x844>)
 800d310:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType3Duty;
 800d312:	4b43      	ldr	r3, [pc, #268]	; (800d420 <NormalControl+0x820>)
 800d314:	4a4c      	ldr	r2, [pc, #304]	; (800d448 <NormalControl+0x848>)
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	e005      	b.n	800d326 <NormalControl+0x726>
			}
			else
			{
				vesc_speed = RedType3;
 800d31a:	4b3f      	ldr	r3, [pc, #252]	; (800d418 <NormalControl+0x818>)
 800d31c:	4a4b      	ldr	r2, [pc, #300]	; (800d44c <NormalControl+0x84c>)
 800d31e:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType3Duty;
 800d320:	4b3f      	ldr	r3, [pc, #252]	; (800d420 <NormalControl+0x820>)
 800d322:	4a4b      	ldr	r2, [pc, #300]	; (800d450 <NormalControl+0x850>)
 800d324:	601a      	str	r2, [r3, #0]
			}

			lidar.pos = TYPE_THREE;
 800d326:	4b3a      	ldr	r3, [pc, #232]	; (800d410 <NormalControl+0x810>)
 800d328:	220c      	movs	r2, #12
 800d32a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			LSR_start(center_to_three, 1, &pp, 0, 0);
 800d32e:	f107 001c 	add.w	r0, r7, #28
 800d332:	2300      	movs	r3, #0
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	2300      	movs	r3, #0
 800d338:	4a33      	ldr	r2, [pc, #204]	; (800d408 <NormalControl+0x808>)
 800d33a:	2101      	movs	r1, #1
 800d33c:	f7f8 fe0e 	bl	8005f5c <LSR_start>
			while(pp.lsr_start)
 800d340:	e01b      	b.n	800d37a <NormalControl+0x77a>
			{
				if(ps4.button == SQUARE)
 800d342:	4b30      	ldr	r3, [pc, #192]	; (800d404 <NormalControl+0x804>)
 800d344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d34a:	d108      	bne.n	800d35e <NormalControl+0x75e>
				{
					while(ps4.button == SQUARE);
 800d34c:	bf00      	nop
 800d34e:	4b2d      	ldr	r3, [pc, #180]	; (800d404 <NormalControl+0x804>)
 800d350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d356:	d0fa      	beq.n	800d34e <NormalControl+0x74e>
					PP_stop(&pp);
 800d358:	482b      	ldr	r0, [pc, #172]	; (800d408 <NormalControl+0x808>)
 800d35a:	f7f8 ff71 	bl	8006240 <PP_stop>
				}

				if(lsrL.dist <= center_to_three[0][1])
 800d35e:	4b2b      	ldr	r3, [pc, #172]	; (800d40c <NormalControl+0x80c>)
 800d360:	ed93 7a07 	vldr	s14, [r3, #28]
 800d364:	edd7 7a08 	vldr	s15, [r7, #32]
 800d368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d370:	d900      	bls.n	800d374 <NormalControl+0x774>
 800d372:	e002      	b.n	800d37a <NormalControl+0x77a>
					PP_stop(&pp);
 800d374:	4824      	ldr	r0, [pc, #144]	; (800d408 <NormalControl+0x808>)
 800d376:	f7f8 ff63 	bl	8006240 <PP_stop>
			while(pp.lsr_start)
 800d37a:	4b23      	ldr	r3, [pc, #140]	; (800d408 <NormalControl+0x808>)
 800d37c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d380:	f003 0310 	and.w	r3, r3, #16
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1db      	bne.n	800d342 <NormalControl+0x742>
			}

			if(lidar.autoshot)
 800d38a:	4b21      	ldr	r3, [pc, #132]	; (800d410 <NormalControl+0x810>)
 800d38c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d079      	beq.n	800d488 <NormalControl+0x888>
			{
				osDelay(300);
 800d394:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d398:	f00f fb98 	bl	801cacc <osDelay>
				Shot();
 800d39c:	f001 fb24 	bl	800e9e8 <Shot>
 800d3a0:	e072      	b.n	800d488 <NormalControl+0x888>
			}
		}

		else if(lidar.pos == TYPE_THREE)
 800d3a2:	4b1b      	ldr	r3, [pc, #108]	; (800d410 <NormalControl+0x810>)
 800d3a4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d3a8:	2b0c      	cmp	r3, #12
 800d3aa:	d16d      	bne.n	800d488 <NormalControl+0x888>
		{
			vesc_speed = type1;
 800d3ac:	4b1a      	ldr	r3, [pc, #104]	; (800d418 <NormalControl+0x818>)
 800d3ae:	4a29      	ldr	r2, [pc, #164]	; (800d454 <NormalControl+0x854>)
 800d3b0:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800d3b2:	4b1b      	ldr	r3, [pc, #108]	; (800d420 <NormalControl+0x820>)
 800d3b4:	4a28      	ldr	r2, [pc, #160]	; (800d458 <NormalControl+0x858>)
 800d3b6:	601a      	str	r2, [r3, #0]

			lidar.pos = CENTER;
 800d3b8:	4b15      	ldr	r3, [pc, #84]	; (800d410 <NormalControl+0x810>)
 800d3ba:	2205      	movs	r2, #5
 800d3bc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
			LSR_start(three_to_center, 1, &pp, 0, 1);
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4a0f      	ldr	r2, [pc, #60]	; (800d408 <NormalControl+0x808>)
 800d3ca:	2101      	movs	r1, #1
 800d3cc:	f7f8 fdc6 	bl	8005f5c <LSR_start>
			while(pp.lsr_start)
 800d3d0:	e047      	b.n	800d462 <NormalControl+0x862>
			{
				if(ps4.button == SQUARE)
 800d3d2:	4b0c      	ldr	r3, [pc, #48]	; (800d404 <NormalControl+0x804>)
 800d3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3da:	d108      	bne.n	800d3ee <NormalControl+0x7ee>
				{
					while(ps4.button == SQUARE);
 800d3dc:	bf00      	nop
 800d3de:	4b09      	ldr	r3, [pc, #36]	; (800d404 <NormalControl+0x804>)
 800d3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3e6:	d0fa      	beq.n	800d3de <NormalControl+0x7de>
					PP_stop(&pp);
 800d3e8:	4807      	ldr	r0, [pc, #28]	; (800d408 <NormalControl+0x808>)
 800d3ea:	f7f8 ff29 	bl	8006240 <PP_stop>
				}

				if(lsrL.dist >= three_to_center[0][1])
 800d3ee:	4b07      	ldr	r3, [pc, #28]	; (800d40c <NormalControl+0x80c>)
 800d3f0:	ed93 7a07 	vldr	s14, [r3, #28]
 800d3f4:	edd7 7a01 	vldr	s15, [r7, #4]
 800d3f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d400:	da2c      	bge.n	800d45c <NormalControl+0x85c>
 800d402:	e02e      	b.n	800d462 <NormalControl+0x862>
 800d404:	2000a240 	.word	0x2000a240
 800d408:	20006d44 	.word	0x20006d44
 800d40c:	20007728 	.word	0x20007728
 800d410:	200091a0 	.word	0x200091a0
 800d414:	20006a44 	.word	0x20006a44
 800d418:	200065b8 	.word	0x200065b8
 800d41c:	414f3333 	.word	0x414f3333
 800d420:	20007494 	.word	0x20007494
 800d424:	45020000 	.word	0x45020000
 800d428:	4154cccd 	.word	0x4154cccd
 800d42c:	45039000 	.word	0x45039000
 800d430:	200095f8 	.word	0x200095f8
 800d434:	41026666 	.word	0x41026666
 800d438:	44bea000 	.word	0x44bea000
 800d43c:	4104cccd 	.word	0x4104cccd
 800d440:	44c1c000 	.word	0x44c1c000
 800d444:	4151999a 	.word	0x4151999a
 800d448:	44f78000 	.word	0x44f78000
 800d44c:	41540000 	.word	0x41540000
 800d450:	44fbe000 	.word	0x44fbe000
 800d454:	406ccccd 	.word	0x406ccccd
 800d458:	445e8000 	.word	0x445e8000
					PP_stop(&pp);
 800d45c:	4833      	ldr	r0, [pc, #204]	; (800d52c <NormalControl+0x92c>)
 800d45e:	f7f8 feef 	bl	8006240 <PP_stop>
			while(pp.lsr_start)
 800d462:	4b32      	ldr	r3, [pc, #200]	; (800d52c <NormalControl+0x92c>)
 800d464:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d468:	f003 0310 	and.w	r3, r3, #16
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1af      	bne.n	800d3d2 <NormalControl+0x7d2>
			}

			if(lidar.autoshot)
 800d472:	4b2f      	ldr	r3, [pc, #188]	; (800d530 <NormalControl+0x930>)
 800d474:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d005      	beq.n	800d488 <NormalControl+0x888>
			{
				osDelay(300);
 800d47c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d480:	f00f fb24 	bl	801cacc <osDelay>
				Shot();
 800d484:	f001 fab0 	bl	800e9e8 <Shot>
			}
		}

		mode = AUTO;
 800d488:	4b2a      	ldr	r3, [pc, #168]	; (800d534 <NormalControl+0x934>)
 800d48a:	2201      	movs	r2, #1
 800d48c:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == DOWN)
 800d48e:	4b2a      	ldr	r3, [pc, #168]	; (800d538 <NormalControl+0x938>)
 800d490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d492:	2b40      	cmp	r3, #64	; 0x40
 800d494:	d128      	bne.n	800d4e8 <NormalControl+0x8e8>
	{
		while(ps4.button == DOWN);
 800d496:	bf00      	nop
 800d498:	4b27      	ldr	r3, [pc, #156]	; (800d538 <NormalControl+0x938>)
 800d49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d49c:	2b40      	cmp	r3, #64	; 0x40
 800d49e:	d0fb      	beq.n	800d498 <NormalControl+0x898>
//		stick_fence = 0;
		if(lidar.pos == A)
 800d4a0:	4b23      	ldr	r3, [pc, #140]	; (800d530 <NormalControl+0x930>)
 800d4a2:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d4a6:	2b0a      	cmp	r3, #10
 800d4a8:	d104      	bne.n	800d4b4 <NormalControl+0x8b4>
			lidar.pos = CENTER_2;
 800d4aa:	4b21      	ldr	r3, [pc, #132]	; (800d530 <NormalControl+0x930>)
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 800d4b2:	e012      	b.n	800d4da <NormalControl+0x8da>
		else if(lidar.pos == B)
 800d4b4:	4b1e      	ldr	r3, [pc, #120]	; (800d530 <NormalControl+0x930>)
 800d4b6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d4ba:	2b0b      	cmp	r3, #11
 800d4bc:	d104      	bne.n	800d4c8 <NormalControl+0x8c8>
			lidar.pos = CENTER_3;
 800d4be:	4b1c      	ldr	r3, [pc, #112]	; (800d530 <NormalControl+0x930>)
 800d4c0:	2206      	movs	r2, #6
 800d4c2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
 800d4c6:	e008      	b.n	800d4da <NormalControl+0x8da>
		else if(lidar.pos == TYPE_THREE)
 800d4c8:	4b19      	ldr	r3, [pc, #100]	; (800d530 <NormalControl+0x930>)
 800d4ca:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 800d4ce:	2b0c      	cmp	r3, #12
 800d4d0:	d103      	bne.n	800d4da <NormalControl+0x8da>
			lidar.pos = CENTER;
 800d4d2:	4b17      	ldr	r3, [pc, #92]	; (800d530 <NormalControl+0x930>)
 800d4d4:	2205      	movs	r2, #5
 800d4d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

		lidar.pos_counter = PICK_RIGHT;
 800d4da:	4b15      	ldr	r3, [pc, #84]	; (800d530 <NormalControl+0x930>)
 800d4dc:	2209      	movs	r2, #9
 800d4de:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		mode = AUTO;
 800d4e2:	4b14      	ldr	r3, [pc, #80]	; (800d534 <NormalControl+0x934>)
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	601a      	str	r2, [r3, #0]

	}

	if (HAL_GetTick() - before >= NormalMode) {
 800d4e8:	f008 fdba 	bl	8016060 <HAL_GetTick>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	4a13      	ldr	r2, [pc, #76]	; (800d53c <NormalControl+0x93c>)
 800d4f0:	6812      	ldr	r2, [r2, #0]
 800d4f2:	1a9b      	subs	r3, r3, r2
 800d4f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d4f8:	d314      	bcc.n	800d524 <NormalControl+0x924>
		led9= !led9;
 800d4fa:	4b11      	ldr	r3, [pc, #68]	; (800d540 <NormalControl+0x940>)
 800d4fc:	7e1b      	ldrb	r3, [r3, #24]
 800d4fe:	f003 0310 	and.w	r3, r3, #16
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b00      	cmp	r3, #0
 800d506:	bf0c      	ite	eq
 800d508:	2301      	moveq	r3, #1
 800d50a:	2300      	movne	r3, #0
 800d50c:	b2d9      	uxtb	r1, r3
 800d50e:	4a0c      	ldr	r2, [pc, #48]	; (800d540 <NormalControl+0x940>)
 800d510:	7e13      	ldrb	r3, [r2, #24]
 800d512:	f361 1304 	bfi	r3, r1, #4, #1
 800d516:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800d518:	f008 fda2 	bl	8016060 <HAL_GetTick>
 800d51c:	4603      	mov	r3, r0
 800d51e:	461a      	mov	r2, r3
 800d520:	4b06      	ldr	r3, [pc, #24]	; (800d53c <NormalControl+0x93c>)
 800d522:	601a      	str	r2, [r3, #0]
	}
}
 800d524:	bf00      	nop
 800d526:	37a8      	adds	r7, #168	; 0xa8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	20006d44 	.word	0x20006d44
 800d530:	200091a0 	.word	0x200091a0
 800d534:	20009450 	.word	0x20009450
 800d538:	2000a240 	.word	0x2000a240
 800d53c:	200073b0 	.word	0x200073b0
 800d540:	200097d4 	.word	0x200097d4
 800d544:	00000000 	.word	0x00000000

0800d548 <Auto>:

void Auto() {
 800d548:	b5b0      	push	{r4, r5, r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af00      	add	r7, sp, #0
	if(ps4.button == OPTION)
 800d54e:	4b84      	ldr	r3, [pc, #528]	; (800d760 <Auto+0x218>)
 800d550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d556:	d176      	bne.n	800d646 <Auto+0xfe>
	{
		while(ps4.button == OPTION);
 800d558:	bf00      	nop
 800d55a:	4b81      	ldr	r3, [pc, #516]	; (800d760 <Auto+0x218>)
 800d55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d562:	d0fa      	beq.n	800d55a <Auto+0x12>

		shot_count++;
 800d564:	4b7f      	ldr	r3, [pc, #508]	; (800d764 <Auto+0x21c>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3301      	adds	r3, #1
 800d56a:	4a7e      	ldr	r2, [pc, #504]	; (800d764 <Auto+0x21c>)
 800d56c:	6013      	str	r3, [r2, #0]

		if(shot_count == 1)
 800d56e:	4b7d      	ldr	r3, [pc, #500]	; (800d764 <Auto+0x21c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d119      	bne.n	800d5aa <Auto+0x62>
		{
			led_enb = 0;
 800d576:	4b7c      	ldr	r3, [pc, #496]	; (800d768 <Auto+0x220>)
 800d578:	2200      	movs	r2, #0
 800d57a:	601a      	str	r2, [r3, #0]
			if(blue)
 800d57c:	4b7b      	ldr	r3, [pc, #492]	; (800d76c <Auto+0x224>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d006      	beq.n	800d592 <Auto+0x4a>
			{
				vesc_speed = BlueType3;
 800d584:	4b7a      	ldr	r3, [pc, #488]	; (800d770 <Auto+0x228>)
 800d586:	4a7b      	ldr	r2, [pc, #492]	; (800d774 <Auto+0x22c>)
 800d588:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType3Duty;
 800d58a:	4b7b      	ldr	r3, [pc, #492]	; (800d778 <Auto+0x230>)
 800d58c:	4a7b      	ldr	r2, [pc, #492]	; (800d77c <Auto+0x234>)
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e005      	b.n	800d59e <Auto+0x56>
			}
			else
			{
				vesc_speed = RedType3;
 800d592:	4b77      	ldr	r3, [pc, #476]	; (800d770 <Auto+0x228>)
 800d594:	4a7a      	ldr	r2, [pc, #488]	; (800d780 <Auto+0x238>)
 800d596:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType3Duty;
 800d598:	4b77      	ldr	r3, [pc, #476]	; (800d778 <Auto+0x230>)
 800d59a:	4a7a      	ldr	r2, [pc, #488]	; (800d784 <Auto+0x23c>)
 800d59c:	601a      	str	r2, [r3, #0]
			}
			led8 = 1;
 800d59e:	4a7a      	ldr	r2, [pc, #488]	; (800d788 <Auto+0x240>)
 800d5a0:	7e13      	ldrb	r3, [r2, #24]
 800d5a2:	f043 0320 	orr.w	r3, r3, #32
 800d5a6:	7613      	strb	r3, [r2, #24]
 800d5a8:	e04d      	b.n	800d646 <Auto+0xfe>
		}
		else if(shot_count == 2)
 800d5aa:	4b6e      	ldr	r3, [pc, #440]	; (800d764 <Auto+0x21c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b02      	cmp	r3, #2
 800d5b0:	d117      	bne.n	800d5e2 <Auto+0x9a>
		{
			led_enb = 1;
 800d5b2:	4b6d      	ldr	r3, [pc, #436]	; (800d768 <Auto+0x220>)
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	601a      	str	r2, [r3, #0]
			shot_prd = 125;
 800d5b8:	4b74      	ldr	r3, [pc, #464]	; (800d78c <Auto+0x244>)
 800d5ba:	227d      	movs	r2, #125	; 0x7d
 800d5bc:	601a      	str	r2, [r3, #0]
			if(blue)
 800d5be:	4b6b      	ldr	r3, [pc, #428]	; (800d76c <Auto+0x224>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d006      	beq.n	800d5d4 <Auto+0x8c>
			{
				vesc_speed = BlueType2;
 800d5c6:	4b6a      	ldr	r3, [pc, #424]	; (800d770 <Auto+0x228>)
 800d5c8:	4a71      	ldr	r2, [pc, #452]	; (800d790 <Auto+0x248>)
 800d5ca:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueType2Duty;
 800d5cc:	4b6a      	ldr	r3, [pc, #424]	; (800d778 <Auto+0x230>)
 800d5ce:	4a71      	ldr	r2, [pc, #452]	; (800d794 <Auto+0x24c>)
 800d5d0:	601a      	str	r2, [r3, #0]
 800d5d2:	e038      	b.n	800d646 <Auto+0xfe>
			}
			else
			{
				vesc_speed = RedType2;
 800d5d4:	4b66      	ldr	r3, [pc, #408]	; (800d770 <Auto+0x228>)
 800d5d6:	4a70      	ldr	r2, [pc, #448]	; (800d798 <Auto+0x250>)
 800d5d8:	601a      	str	r2, [r3, #0]
				vesc_duty = RedType2Duty;
 800d5da:	4b67      	ldr	r3, [pc, #412]	; (800d778 <Auto+0x230>)
 800d5dc:	4a6f      	ldr	r2, [pc, #444]	; (800d79c <Auto+0x254>)
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	e031      	b.n	800d646 <Auto+0xfe>
			}
//			vesc_duty = 0.275;
//			vesc_speed = 8.0;
		}
		else if(shot_count == 3)
 800d5e2:	4b60      	ldr	r3, [pc, #384]	; (800d764 <Auto+0x21c>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b03      	cmp	r3, #3
 800d5e8:	d118      	bne.n	800d61c <Auto+0xd4>
		{
			led_enb = 1;
 800d5ea:	4b5f      	ldr	r3, [pc, #380]	; (800d768 <Auto+0x220>)
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	601a      	str	r2, [r3, #0]
			shot_prd = 500;
 800d5f0:	4b66      	ldr	r3, [pc, #408]	; (800d78c <Auto+0x244>)
 800d5f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d5f6:	601a      	str	r2, [r3, #0]
//			vesc_duty = 0.39;
//			vesc_speed = 12.2;
			if(blue)
 800d5f8:	4b5c      	ldr	r3, [pc, #368]	; (800d76c <Auto+0x224>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d006      	beq.n	800d60e <Auto+0xc6>
			{
				vesc_speed = BlueOppoType2;
 800d600:	4b5b      	ldr	r3, [pc, #364]	; (800d770 <Auto+0x228>)
 800d602:	4a67      	ldr	r2, [pc, #412]	; (800d7a0 <Auto+0x258>)
 800d604:	601a      	str	r2, [r3, #0]
				vesc_duty = BlueOppoType2Duty;
 800d606:	4b5c      	ldr	r3, [pc, #368]	; (800d778 <Auto+0x230>)
 800d608:	4a66      	ldr	r2, [pc, #408]	; (800d7a4 <Auto+0x25c>)
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	e01b      	b.n	800d646 <Auto+0xfe>
			}
			else
			{
				vesc_speed = RedOppoType2;
 800d60e:	4b58      	ldr	r3, [pc, #352]	; (800d770 <Auto+0x228>)
 800d610:	4a65      	ldr	r2, [pc, #404]	; (800d7a8 <Auto+0x260>)
 800d612:	601a      	str	r2, [r3, #0]
				vesc_duty = RedOppoType2Duty;
 800d614:	4b58      	ldr	r3, [pc, #352]	; (800d778 <Auto+0x230>)
 800d616:	4a65      	ldr	r2, [pc, #404]	; (800d7ac <Auto+0x264>)
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	e014      	b.n	800d646 <Auto+0xfe>
			}
		}

		else if(shot_count == 4)
 800d61c:	4b51      	ldr	r3, [pc, #324]	; (800d764 <Auto+0x21c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b04      	cmp	r3, #4
 800d622:	d110      	bne.n	800d646 <Auto+0xfe>
		{
			led_enb = 0;
 800d624:	4b50      	ldr	r3, [pc, #320]	; (800d768 <Auto+0x220>)
 800d626:	2200      	movs	r2, #0
 800d628:	601a      	str	r2, [r3, #0]
			vesc_duty = type1Duty;
 800d62a:	4b53      	ldr	r3, [pc, #332]	; (800d778 <Auto+0x230>)
 800d62c:	4a60      	ldr	r2, [pc, #384]	; (800d7b0 <Auto+0x268>)
 800d62e:	601a      	str	r2, [r3, #0]
			vesc_speed = type1;
 800d630:	4b4f      	ldr	r3, [pc, #316]	; (800d770 <Auto+0x228>)
 800d632:	4a60      	ldr	r2, [pc, #384]	; (800d7b4 <Auto+0x26c>)
 800d634:	601a      	str	r2, [r3, #0]
			led8 = 0;
 800d636:	4a54      	ldr	r2, [pc, #336]	; (800d788 <Auto+0x240>)
 800d638:	7e13      	ldrb	r3, [r2, #24]
 800d63a:	f36f 1345 	bfc	r3, #5, #1
 800d63e:	7613      	strb	r3, [r2, #24]
			shot_count = 0;
 800d640:	4b48      	ldr	r3, [pc, #288]	; (800d764 <Auto+0x21c>)
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
		}
	}

	// Shoot
	if(ps4.button == CROSS)
 800d646:	4b46      	ldr	r3, [pc, #280]	; (800d760 <Auto+0x218>)
 800d648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d64a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d64e:	d118      	bne.n	800d682 <Auto+0x13a>
	{
		while(ps4.button == CROSS);
 800d650:	bf00      	nop
 800d652:	4b43      	ldr	r3, [pc, #268]	; (800d760 <Auto+0x218>)
 800d654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d65a:	d0fa      	beq.n	800d652 <Auto+0x10a>
		push_shoot;
 800d65c:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800d660:	4855      	ldr	r0, [pc, #340]	; (800d7b8 <Auto+0x270>)
 800d662:	f7f3 fd92 	bl	800118a <WriteBDC>
		shoot_start = 1;
 800d666:	4b55      	ldr	r3, [pc, #340]	; (800d7bc <Auto+0x274>)
 800d668:	2201      	movs	r2, #1
 800d66a:	601a      	str	r2, [r3, #0]
		stop_adjust = 1;
 800d66c:	4b54      	ldr	r3, [pc, #336]	; (800d7c0 <Auto+0x278>)
 800d66e:	2201      	movs	r2, #1
 800d670:	601a      	str	r2, [r3, #0]
		wait_load = 1;
 800d672:	4b54      	ldr	r3, [pc, #336]	; (800d7c4 <Auto+0x27c>)
 800d674:	2201      	movs	r2, #1
 800d676:	601a      	str	r2, [r3, #0]
		shooted++;
 800d678:	4b53      	ldr	r3, [pc, #332]	; (800d7c8 <Auto+0x280>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3301      	adds	r3, #1
 800d67e:	4a52      	ldr	r2, [pc, #328]	; (800d7c8 <Auto+0x280>)
 800d680:	6013      	str	r3, [r2, #0]
//			pick_manual(5000);
//			counter = 0;
//		}
	}

	if(ps4.button == SQUARE)
 800d682:	4b37      	ldr	r3, [pc, #220]	; (800d760 <Auto+0x218>)
 800d684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d68a:	d140      	bne.n	800d70e <Auto+0x1c6>
	{
		while(ps4.button == SQUARE);
 800d68c:	bf00      	nop
 800d68e:	4b34      	ldr	r3, [pc, #208]	; (800d760 <Auto+0x218>)
 800d690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d696:	d0fa      	beq.n	800d68e <Auto+0x146>

		if(pp.pp_start)
 800d698:	4b4c      	ldr	r3, [pc, #304]	; (800d7cc <Auto+0x284>)
 800d69a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d003      	beq.n	800d6b0 <Auto+0x168>
		{
			PP_stop(&pp);
 800d6a8:	4848      	ldr	r0, [pc, #288]	; (800d7cc <Auto+0x284>)
 800d6aa:	f7f8 fdc9 	bl	8006240 <PP_stop>
 800d6ae:	e02e      	b.n	800d70e <Auto+0x1c6>
		}
		else
		{
			loaded = 0;
 800d6b0:	4b47      	ldr	r3, [pc, #284]	; (800d7d0 <Auto+0x288>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]
			vesc_duty = 0.0;
 800d6b6:	4b30      	ldr	r3, [pc, #192]	; (800d778 <Auto+0x230>)
 800d6b8:	f04f 0200 	mov.w	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
			shot_count = 0;
 800d6be:	4b29      	ldr	r3, [pc, #164]	; (800d764 <Auto+0x21c>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	601a      	str	r2, [r3, #0]
			flywheelStop();
 800d6c4:	f001 f966 	bl	800e994 <flywheelStop>
			pick_stop;
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	4842      	ldr	r0, [pc, #264]	; (800d7d4 <Auto+0x28c>)
 800d6cc:	f7f3 fd5d 	bl	800118a <WriteBDC>
			setPick(500);
 800d6d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d6d4:	f000 f93a 	bl	800d94c <setPick>
			cylinder_load;
 800d6d8:	4a2b      	ldr	r2, [pc, #172]	; (800d788 <Auto+0x240>)
 800d6da:	7f13      	ldrb	r3, [r2, #28]
 800d6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e0:	7713      	strb	r3, [r2, #28]
			open_servo;
 800d6e2:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800d6e6:	483c      	ldr	r0, [pc, #240]	; (800d7d8 <Auto+0x290>)
 800d6e8:	f7fe f832 	bl	800b750 <ServoSetPulse>
 800d6ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d6f0:	483a      	ldr	r0, [pc, #232]	; (800d7dc <Auto+0x294>)
 800d6f2:	f7fe f82d 	bl	800b750 <ServoSetPulse>
			reload = 0;
 800d6f6:	4b3a      	ldr	r3, [pc, #232]	; (800d7e0 <Auto+0x298>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	601a      	str	r2, [r3, #0]
			load_start = 0;
 800d6fc:	4b39      	ldr	r3, [pc, #228]	; (800d7e4 <Auto+0x29c>)
 800d6fe:	2200      	movs	r2, #0
 800d700:	601a      	str	r2, [r3, #0]
//			load_adjust = 0;
			stick_fence = 0;
 800d702:	4b39      	ldr	r3, [pc, #228]	; (800d7e8 <Auto+0x2a0>)
 800d704:	2200      	movs	r2, #0
 800d706:	601a      	str	r2, [r3, #0]
			picked_manual = 0;
 800d708:	4b38      	ldr	r3, [pc, #224]	; (800d7ec <Auto+0x2a4>)
 800d70a:	2200      	movs	r2, #0
 800d70c:	601a      	str	r2, [r3, #0]
//			pick_right_enb = 0;
		}
	}

	if(ps4.button == CIRCLE)
 800d70e:	4b14      	ldr	r3, [pc, #80]	; (800d760 <Auto+0x218>)
 800d710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d716:	f040 80ae 	bne.w	800d876 <Auto+0x32e>
	{
		while(ps4.button == CIRCLE);
 800d71a:	bf00      	nop
 800d71c:	4b10      	ldr	r3, [pc, #64]	; (800d760 <Auto+0x218>)
 800d71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d724:	d0fa      	beq.n	800d71c <Auto+0x1d4>

		lidar.pos = PICK_LEFT;
 800d726:	4b32      	ldr	r3, [pc, #200]	; (800d7f0 <Auto+0x2a8>)
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800d72e:	4b30      	ldr	r3, [pc, #192]	; (800d7f0 <Auto+0x2a8>)
 800d730:	2201      	movs	r2, #1
 800d732:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288

		setPick(2200);
 800d736:	f640 0098 	movw	r0, #2200	; 0x898
 800d73a:	f000 f907 	bl	800d94c <setPick>

		float pick_left_point[1][7] = {{12.0, -3.6, 0.0, 0, 0, 0, 0}};
 800d73e:	4b2d      	ldr	r3, [pc, #180]	; (800d7f4 <Auto+0x2ac>)
 800d740:	1d3c      	adds	r4, r7, #4
 800d742:	461d      	mov	r5, r3
 800d744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d74c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800d750:	1d3b      	adds	r3, r7, #4
 800d752:	4a1e      	ldr	r2, [pc, #120]	; (800d7cc <Auto+0x284>)
 800d754:	2101      	movs	r1, #1
 800d756:	4618      	mov	r0, r3
 800d758:	f7f8 fa3a 	bl	8005bd0 <PP_start>
		while(pp.pp_start)
 800d75c:	e076      	b.n	800d84c <Auto+0x304>
 800d75e:	bf00      	nop
 800d760:	2000a240 	.word	0x2000a240
 800d764:	200068d8 	.word	0x200068d8
 800d768:	2000a858 	.word	0x2000a858
 800d76c:	20006a44 	.word	0x20006a44
 800d770:	200065b8 	.word	0x200065b8
 800d774:	4151999a 	.word	0x4151999a
 800d778:	20007494 	.word	0x20007494
 800d77c:	44f78000 	.word	0x44f78000
 800d780:	41540000 	.word	0x41540000
 800d784:	44fbe000 	.word	0x44fbe000
 800d788:	200097d4 	.word	0x200097d4
 800d78c:	2000a5cc 	.word	0x2000a5cc
 800d790:	41026666 	.word	0x41026666
 800d794:	44bea000 	.word	0x44bea000
 800d798:	4104cccd 	.word	0x4104cccd
 800d79c:	44c1c000 	.word	0x44c1c000
 800d7a0:	414f3333 	.word	0x414f3333
 800d7a4:	45020000 	.word	0x45020000
 800d7a8:	4154cccd 	.word	0x4154cccd
 800d7ac:	45039000 	.word	0x45039000
 800d7b0:	445e8000 	.word	0x445e8000
 800d7b4:	406ccccd 	.word	0x406ccccd
 800d7b8:	20009894 	.word	0x20009894
 800d7bc:	2000944c 	.word	0x2000944c
 800d7c0:	20006500 	.word	0x20006500
 800d7c4:	2000759c 	.word	0x2000759c
 800d7c8:	2000a7a0 	.word	0x2000a7a0
 800d7cc:	20006d44 	.word	0x20006d44
 800d7d0:	200095a8 	.word	0x200095a8
 800d7d4:	20007878 	.word	0x20007878
 800d7d8:	200079d8 	.word	0x200079d8
 800d7dc:	2000a5e8 	.word	0x2000a5e8
 800d7e0:	200078b8 	.word	0x200078b8
 800d7e4:	2000745c 	.word	0x2000745c
 800d7e8:	200073d0 	.word	0x200073d0
 800d7ec:	200096c0 	.word	0x200096c0
 800d7f0:	200091a0 	.word	0x200091a0
 800d7f4:	080255b4 	.word	0x080255b4
		{
			if(ps4.button == SQUARE)
 800d7f8:	4b49      	ldr	r3, [pc, #292]	; (800d920 <Auto+0x3d8>)
 800d7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d800:	d108      	bne.n	800d814 <Auto+0x2cc>
			{
				while(ps4.button == SQUARE);
 800d802:	bf00      	nop
 800d804:	4b46      	ldr	r3, [pc, #280]	; (800d920 <Auto+0x3d8>)
 800d806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d80c:	d0fa      	beq.n	800d804 <Auto+0x2bc>
				PP_stop(&pp);
 800d80e:	4845      	ldr	r0, [pc, #276]	; (800d924 <Auto+0x3dc>)
 800d810:	f7f8 fd16 	bl	8006240 <PP_stop>
			}

			if(pp.real_x <= -3.2)
 800d814:	4b43      	ldr	r3, [pc, #268]	; (800d924 <Auto+0x3dc>)
 800d816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d818:	4618      	mov	r0, r3
 800d81a:	f7f2 fe95 	bl	8000548 <__aeabi_f2d>
 800d81e:	a33e      	add	r3, pc, #248	; (adr r3, 800d918 <Auto+0x3d0>)
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	f7f3 f964 	bl	8000af0 <__aeabi_dcmple>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <Auto+0x2ec>
				PP_stop(&pp);
 800d82e:	483d      	ldr	r0, [pc, #244]	; (800d924 <Auto+0x3dc>)
 800d830:	f7f8 fd06 	bl	8006240 <PP_stop>

			if(ps4.button == UP)
 800d834:	4b3a      	ldr	r3, [pc, #232]	; (800d920 <Auto+0x3d8>)
 800d836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d838:	2b10      	cmp	r3, #16
 800d83a:	d107      	bne.n	800d84c <Auto+0x304>
			{
				while(ps4.button == UP);
 800d83c:	bf00      	nop
 800d83e:	4b38      	ldr	r3, [pc, #224]	; (800d920 <Auto+0x3d8>)
 800d840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d842:	2b10      	cmp	r3, #16
 800d844:	d0fb      	beq.n	800d83e <Auto+0x2f6>
				go_A = 1;
 800d846:	4b38      	ldr	r3, [pc, #224]	; (800d928 <Auto+0x3e0>)
 800d848:	2201      	movs	r2, #1
 800d84a:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800d84c:	4b35      	ldr	r3, [pc, #212]	; (800d924 <Auto+0x3dc>)
 800d84e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	b2db      	uxtb	r3, r3
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1cd      	bne.n	800d7f8 <Auto+0x2b0>
			}
		}
		pick_left = 1;
 800d85c:	4b33      	ldr	r3, [pc, #204]	; (800d92c <Auto+0x3e4>)
 800d85e:	2201      	movs	r2, #1
 800d860:	601a      	str	r2, [r3, #0]
		counter++;
 800d862:	4b33      	ldr	r3, [pc, #204]	; (800d930 <Auto+0x3e8>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3301      	adds	r3, #1
 800d868:	4a31      	ldr	r2, [pc, #196]	; (800d930 <Auto+0x3e8>)
 800d86a:	6013      	str	r3, [r2, #0]
		cylinder_retract;
 800d86c:	4a31      	ldr	r2, [pc, #196]	; (800d934 <Auto+0x3ec>)
 800d86e:	7f13      	ldrb	r3, [r2, #28]
 800d870:	f36f 1386 	bfc	r3, #6, #1
 800d874:	7713      	strb	r3, [r2, #28]


	}

	if(ps4.button == TRIANGLE)
 800d876:	4b2a      	ldr	r3, [pc, #168]	; (800d920 <Auto+0x3d8>)
 800d878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d87e:	d128      	bne.n	800d8d2 <Auto+0x38a>
	{
		while(ps4.button == TRIANGLE);
 800d880:	bf00      	nop
 800d882:	4b27      	ldr	r3, [pc, #156]	; (800d920 <Auto+0x3d8>)
 800d884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d88a:	d0fa      	beq.n	800d882 <Auto+0x33a>
		LoadRing();
 800d88c:	f000 fd06 	bl	800e29c <LoadRing>
		load_adjust = 1;
 800d890:	4b29      	ldr	r3, [pc, #164]	; (800d938 <Auto+0x3f0>)
 800d892:	2201      	movs	r2, #1
 800d894:	601a      	str	r2, [r3, #0]
		picked_manual = 1;
 800d896:	4b29      	ldr	r3, [pc, #164]	; (800d93c <Auto+0x3f4>)
 800d898:	2201      	movs	r2, #1
 800d89a:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800d89c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d8a0:	4827      	ldr	r0, [pc, #156]	; (800d940 <Auto+0x3f8>)
 800d8a2:	f7fd ff55 	bl	800b750 <ServoSetPulse>
 800d8a6:	f640 0166 	movw	r1, #2150	; 0x866
 800d8aa:	4826      	ldr	r0, [pc, #152]	; (800d944 <Auto+0x3fc>)
 800d8ac:	f7fd ff50 	bl	800b750 <ServoSetPulse>
		cylinder_retract;
 800d8b0:	4a20      	ldr	r2, [pc, #128]	; (800d934 <Auto+0x3ec>)
 800d8b2:	7f13      	ldrb	r3, [r2, #28]
 800d8b4:	f36f 1386 	bfc	r3, #6, #1
 800d8b8:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800d8ba:	f000 fd35 	bl	800e328 <AdjustRings>
		adjust_servo;
 800d8be:	f44f 7148 	mov.w	r1, #800	; 0x320
 800d8c2:	481f      	ldr	r0, [pc, #124]	; (800d940 <Auto+0x3f8>)
 800d8c4:	f7fd ff44 	bl	800b750 <ServoSetPulse>
 800d8c8:	f640 0166 	movw	r1, #2150	; 0x866
 800d8cc:	481d      	ldr	r0, [pc, #116]	; (800d944 <Auto+0x3fc>)
 800d8ce:	f7fd ff3f 	bl	800b750 <ServoSetPulse>
	}

	if (HAL_GetTick() - before >= AutoMode)
 800d8d2:	f008 fbc5 	bl	8016060 <HAL_GetTick>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	4a1b      	ldr	r2, [pc, #108]	; (800d948 <Auto+0x400>)
 800d8da:	6812      	ldr	r2, [r2, #0]
 800d8dc:	1a9b      	subs	r3, r3, r2
 800d8de:	2b7c      	cmp	r3, #124	; 0x7c
 800d8e0:	d914      	bls.n	800d90c <Auto+0x3c4>
	{
		led9= !led9;
 800d8e2:	4b14      	ldr	r3, [pc, #80]	; (800d934 <Auto+0x3ec>)
 800d8e4:	7e1b      	ldrb	r3, [r3, #24]
 800d8e6:	f003 0310 	and.w	r3, r3, #16
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	bf0c      	ite	eq
 800d8f0:	2301      	moveq	r3, #1
 800d8f2:	2300      	movne	r3, #0
 800d8f4:	b2d9      	uxtb	r1, r3
 800d8f6:	4a0f      	ldr	r2, [pc, #60]	; (800d934 <Auto+0x3ec>)
 800d8f8:	7e13      	ldrb	r3, [r2, #24]
 800d8fa:	f361 1304 	bfi	r3, r1, #4, #1
 800d8fe:	7613      	strb	r3, [r2, #24]
		before = HAL_GetTick();
 800d900:	f008 fbae 	bl	8016060 <HAL_GetTick>
 800d904:	4603      	mov	r3, r0
 800d906:	461a      	mov	r2, r3
 800d908:	4b0f      	ldr	r3, [pc, #60]	; (800d948 <Auto+0x400>)
 800d90a:	601a      	str	r2, [r3, #0]
	}
}
 800d90c:	bf00      	nop
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bdb0      	pop	{r4, r5, r7, pc}
 800d914:	f3af 8000 	nop.w
 800d918:	9999999a 	.word	0x9999999a
 800d91c:	c0099999 	.word	0xc0099999
 800d920:	2000a240 	.word	0x2000a240
 800d924:	20006d44 	.word	0x20006d44
 800d928:	20009bc8 	.word	0x20009bc8
 800d92c:	200079c8 	.word	0x200079c8
 800d930:	20009910 	.word	0x20009910
 800d934:	200097d4 	.word	0x200097d4
 800d938:	200095bc 	.word	0x200095bc
 800d93c:	200096c0 	.word	0x200096c0
 800d940:	200079d8 	.word	0x200079d8
 800d944:	2000a5e8 	.word	0x2000a5e8
 800d948:	200073b0 	.word	0x200073b0

0800d94c <setPick>:
			break;
	}
}

void setPick(int32_t target)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	pick_target_enc = target;
 800d954:	4a05      	ldr	r2, [pc, #20]	; (800d96c <setPick+0x20>)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6013      	str	r3, [r2, #0]
	set_pick_enc = 1;
 800d95a:	4b05      	ldr	r3, [pc, #20]	; (800d970 <setPick+0x24>)
 800d95c:	2201      	movs	r2, #1
 800d95e:	601a      	str	r2, [r3, #0]
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	200065c4 	.word	0x200065c4
 800d970:	2000789c 	.word	0x2000789c

0800d974 <CheckPickEnc>:

void CheckPickEnc(void)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	af00      	add	r7, sp, #0
	if(set_pick_enc)
 800d978:	4b1b      	ldr	r3, [pc, #108]	; (800d9e8 <CheckPickEnc+0x74>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d030      	beq.n	800d9e2 <CheckPickEnc+0x6e>
	{
		pickErr = pick_target_enc - pick_enc;
 800d980:	4b1a      	ldr	r3, [pc, #104]	; (800d9ec <CheckPickEnc+0x78>)
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	4b1a      	ldr	r3, [pc, #104]	; (800d9f0 <CheckPickEnc+0x7c>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d992:	4b18      	ldr	r3, [pc, #96]	; (800d9f4 <CheckPickEnc+0x80>)
 800d994:	edc3 7a00 	vstr	s15, [r3]
		PID(&pick_PID);
 800d998:	4817      	ldr	r0, [pc, #92]	; (800d9f8 <CheckPickEnc+0x84>)
 800d99a:	f7f7 fe94 	bl	80056c6 <PID>
		pick_manual((int32_t)pickU);
 800d99e:	4b17      	ldr	r3, [pc, #92]	; (800d9fc <CheckPickEnc+0x88>)
 800d9a0:	edd3 7a00 	vldr	s15, [r3]
 800d9a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9a8:	ee17 3a90 	vmov	r3, s15
 800d9ac:	425b      	negs	r3, r3
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	4813      	ldr	r0, [pc, #76]	; (800da00 <CheckPickEnc+0x8c>)
 800d9b2:	f7f3 fbea 	bl	800118a <WriteBDC>

		if(abs(pickErr) < pick_tol)
 800d9b6:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <CheckPickEnc+0x80>)
 800d9b8:	edd3 7a00 	vldr	s15, [r3]
 800d9bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d9c0:	ee17 3a90 	vmov	r3, s15
 800d9c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800d9c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800d9cc:	4b0d      	ldr	r3, [pc, #52]	; (800da04 <CheckPickEnc+0x90>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	da06      	bge.n	800d9e2 <CheckPickEnc+0x6e>
		{
			set_pick_enc = 0;
 800d9d4:	4b04      	ldr	r3, [pc, #16]	; (800d9e8 <CheckPickEnc+0x74>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]
			pick_stop;
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4808      	ldr	r0, [pc, #32]	; (800da00 <CheckPickEnc+0x8c>)
 800d9de:	f7f3 fbd4 	bl	800118a <WriteBDC>
		}
	}
}
 800d9e2:	bf00      	nop
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	2000789c 	.word	0x2000789c
 800d9ec:	200065c4 	.word	0x200065c4
 800d9f0:	20006c08 	.word	0x20006c08
 800d9f4:	200064f0 	.word	0x200064f0
 800d9f8:	20009a30 	.word	0x20009a30
 800d9fc:	20007464 	.word	0x20007464
 800da00:	20007878 	.word	0x20007878
 800da04:	200073c8 	.word	0x200073c8

0800da08 <CheckPitch>:

void CheckPitch()
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
	if(set_pitch)
 800da0c:	4b1b      	ldr	r3, [pc, #108]	; (800da7c <CheckPitch+0x74>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d02c      	beq.n	800da6e <CheckPitch+0x66>
	{
		switch(Robot_Pitch)
 800da14:	4b1a      	ldr	r3, [pc, #104]	; (800da80 <CheckPitch+0x78>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <CheckPitch+0x1a>
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d013      	beq.n	800da48 <CheckPitch+0x40>
					set_pitch = 0;
				}
				break;
		}
	}
}
 800da20:	e02a      	b.n	800da78 <CheckPitch+0x70>
				if(In_Pitch70)
 800da22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da26:	4817      	ldr	r0, [pc, #92]	; (800da84 <CheckPitch+0x7c>)
 800da28:	f00a f996 	bl	8017d58 <HAL_GPIO_ReadPin>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d11f      	bne.n	800da72 <CheckPitch+0x6a>
					pitch_stop;
 800da32:	2100      	movs	r1, #0
 800da34:	4814      	ldr	r0, [pc, #80]	; (800da88 <CheckPitch+0x80>)
 800da36:	f7f3 fba8 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH70;
 800da3a:	4b11      	ldr	r3, [pc, #68]	; (800da80 <CheckPitch+0x78>)
 800da3c:	2201      	movs	r2, #1
 800da3e:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800da40:	4b0e      	ldr	r3, [pc, #56]	; (800da7c <CheckPitch+0x74>)
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]
				break;
 800da46:	e014      	b.n	800da72 <CheckPitch+0x6a>
				if(In_Pitch45)
 800da48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800da4c:	480d      	ldr	r0, [pc, #52]	; (800da84 <CheckPitch+0x7c>)
 800da4e:	f00a f983 	bl	8017d58 <HAL_GPIO_ReadPin>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10e      	bne.n	800da76 <CheckPitch+0x6e>
					pitch_stop;
 800da58:	2100      	movs	r1, #0
 800da5a:	480b      	ldr	r0, [pc, #44]	; (800da88 <CheckPitch+0x80>)
 800da5c:	f7f3 fb95 	bl	800118a <WriteBDC>
					Robot_Pitch = PITCH45;
 800da60:	4b07      	ldr	r3, [pc, #28]	; (800da80 <CheckPitch+0x78>)
 800da62:	2200      	movs	r2, #0
 800da64:	701a      	strb	r2, [r3, #0]
					set_pitch = 0;
 800da66:	4b05      	ldr	r3, [pc, #20]	; (800da7c <CheckPitch+0x74>)
 800da68:	2200      	movs	r2, #0
 800da6a:	601a      	str	r2, [r3, #0]
				break;
 800da6c:	e003      	b.n	800da76 <CheckPitch+0x6e>
	}
 800da6e:	bf00      	nop
 800da70:	e002      	b.n	800da78 <CheckPitch+0x70>
				break;
 800da72:	bf00      	nop
 800da74:	e000      	b.n	800da78 <CheckPitch+0x70>
				break;
 800da76:	bf00      	nop
}
 800da78:	bf00      	nop
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	20009878 	.word	0x20009878
 800da80:	20009892 	.word	0x20009892
 800da84:	40020400 	.word	0x40020400
 800da88:	20006c6c 	.word	0x20006c6c
 800da8c:	00000000 	.word	0x00000000

0800da90 <CheckPick>:

void CheckPick()
{
 800da90:	b5b0      	push	{r4, r5, r7, lr}
 800da92:	b0a4      	sub	sp, #144	; 0x90
 800da94:	af00      	add	r7, sp, #0
	if(pick_left)
 800da96:	4baa      	ldr	r3, [pc, #680]	; (800dd40 <CheckPick+0x2b0>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 8113 	beq.w	800dcc6 <CheckPick+0x236>
	{
		lidar.pos = PICK_LEFT;
 800daa0:	4ba8      	ldr	r3, [pc, #672]	; (800dd44 <CheckPick+0x2b4>)
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_LEFT;
 800daa8:	4ba6      	ldr	r3, [pc, #664]	; (800dd44 <CheckPick+0x2b4>)
 800daaa:	2201      	movs	r2, #1
 800daac:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		float stick_fence_point[1][7] = {{2.0, 0.0, -5, 0, 0, 0, 0}};
 800dab0:	4ba5      	ldr	r3, [pc, #660]	; (800dd48 <CheckPick+0x2b8>)
 800dab2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800dab6:	461d      	mov	r5, r3
 800dab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dabc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 800dac4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800dac8:	4aa0      	ldr	r2, [pc, #640]	; (800dd4c <CheckPick+0x2bc>)
 800daca:	2101      	movs	r1, #1
 800dacc:	4618      	mov	r0, r3
 800dace:	f7f8 f87f 	bl	8005bd0 <PP_start>
		while(pp.pp_start)
 800dad2:	e020      	b.n	800db16 <CheckPick+0x86>
		{
			if(ps4.button == SQUARE)
 800dad4:	4b9e      	ldr	r3, [pc, #632]	; (800dd50 <CheckPick+0x2c0>)
 800dad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dadc:	d108      	bne.n	800daf0 <CheckPick+0x60>
			{
				while(ps4.button == SQUARE);
 800dade:	bf00      	nop
 800dae0:	4b9b      	ldr	r3, [pc, #620]	; (800dd50 <CheckPick+0x2c0>)
 800dae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dae8:	d0fa      	beq.n	800dae0 <CheckPick+0x50>
				PP_stop(&pp);
 800daea:	4898      	ldr	r0, [pc, #608]	; (800dd4c <CheckPick+0x2bc>)
 800daec:	f7f8 fba8 	bl	8006240 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800daf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800daf4:	4897      	ldr	r0, [pc, #604]	; (800dd54 <CheckPick+0x2c4>)
 800daf6:	f00a f92f 	bl	8017d58 <HAL_GPIO_ReadPin>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d007      	beq.n	800db10 <CheckPick+0x80>
 800db00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800db04:	4893      	ldr	r0, [pc, #588]	; (800dd54 <CheckPick+0x2c4>)
 800db06:	f00a f927 	bl	8017d58 <HAL_GPIO_ReadPin>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d102      	bne.n	800db16 <CheckPick+0x86>
				PP_stop(&pp);
 800db10:	488e      	ldr	r0, [pc, #568]	; (800dd4c <CheckPick+0x2bc>)
 800db12:	f7f8 fb95 	bl	8006240 <PP_stop>
		while(pp.pp_start)
 800db16:	4b8d      	ldr	r3, [pc, #564]	; (800dd4c <CheckPick+0x2bc>)
 800db18:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1d6      	bne.n	800dad4 <CheckPick+0x44>
		}
		pick_left = 0;
 800db26:	4b86      	ldr	r3, [pc, #536]	; (800dd40 <CheckPick+0x2b0>)
 800db28:	2200      	movs	r2, #0
 800db2a:	601a      	str	r2, [r3, #0]
		picked_left = 1;
 800db2c:	4b8a      	ldr	r3, [pc, #552]	; (800dd58 <CheckPick+0x2c8>)
 800db2e:	2201      	movs	r2, #1
 800db30:	601a      	str	r2, [r3, #0]

		setPick(0);
 800db32:	2000      	movs	r0, #0
 800db34:	f7ff ff0a 	bl	800d94c <setPick>

		if(pick_left_manual)
 800db38:	4b88      	ldr	r3, [pc, #544]	; (800dd5c <CheckPick+0x2cc>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <CheckPick+0xb4>
			ResetCoordinate();
 800db40:	f000 fc04 	bl	800e34c <ResetCoordinate>

		float pick_left_point[1][7] = {{3.0, -10, -1.5, 0, 0, 0, 0}};
 800db44:	4b86      	ldr	r3, [pc, #536]	; (800dd60 <CheckPick+0x2d0>)
 800db46:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800db4a:	461d      	mov	r5, r3
 800db4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800db54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_left_point, 1, &pp);
 800db58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800db5c:	4a7b      	ldr	r2, [pc, #492]	; (800dd4c <CheckPick+0x2bc>)
 800db5e:	2101      	movs	r1, #1
 800db60:	4618      	mov	r0, r3
 800db62:	f7f8 f835 	bl	8005bd0 <PP_start>
		while(pp.pp_start)
 800db66:	e061      	b.n	800dc2c <CheckPick+0x19c>
		{
			if(!pick_left_manual)
 800db68:	4b7c      	ldr	r3, [pc, #496]	; (800dd5c <CheckPick+0x2cc>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d126      	bne.n	800dbbe <CheckPick+0x12e>
			{
				if(pp.real_x <= -4.2)
 800db70:	4b76      	ldr	r3, [pc, #472]	; (800dd4c <CheckPick+0x2bc>)
 800db72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db74:	4618      	mov	r0, r3
 800db76:	f7f2 fce7 	bl	8000548 <__aeabi_f2d>
 800db7a:	a36d      	add	r3, pc, #436	; (adr r3, 800dd30 <CheckPick+0x2a0>)
 800db7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db80:	f7f2 ffb6 	bl	8000af0 <__aeabi_dcmple>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <CheckPick+0x102>
					pp.target_vel[0] = 0.7;
 800db8a:	4b70      	ldr	r3, [pc, #448]	; (800dd4c <CheckPick+0x2bc>)
 800db8c:	4a75      	ldr	r2, [pc, #468]	; (800dd64 <CheckPick+0x2d4>)
 800db8e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

				if(In_Pick && pp.real_x <= -5.0)
 800db92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800db96:	4874      	ldr	r0, [pc, #464]	; (800dd68 <CheckPick+0x2d8>)
 800db98:	f00a f8de 	bl	8017d58 <HAL_GPIO_ReadPin>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d133      	bne.n	800dc0a <CheckPick+0x17a>
 800dba2:	4b6a      	ldr	r3, [pc, #424]	; (800dd4c <CheckPick+0x2bc>)
 800dba4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800dba8:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800dbac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb4:	d829      	bhi.n	800dc0a <CheckPick+0x17a>
					PP_stop(&pp);
 800dbb6:	4865      	ldr	r0, [pc, #404]	; (800dd4c <CheckPick+0x2bc>)
 800dbb8:	f7f8 fb42 	bl	8006240 <PP_stop>
 800dbbc:	e025      	b.n	800dc0a <CheckPick+0x17a>
			}
			else
			{
				if(pp.real_x <= -0.25)
 800dbbe:	4b63      	ldr	r3, [pc, #396]	; (800dd4c <CheckPick+0x2bc>)
 800dbc0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800dbc4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800dbc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd0:	d803      	bhi.n	800dbda <CheckPick+0x14a>
					pp.target_vel[0] = 0.55;
 800dbd2:	4b5e      	ldr	r3, [pc, #376]	; (800dd4c <CheckPick+0x2bc>)
 800dbd4:	4a65      	ldr	r2, [pc, #404]	; (800dd6c <CheckPick+0x2dc>)
 800dbd6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

				if(In_Pick && pp.real_x <= -0.3)
 800dbda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dbde:	4862      	ldr	r0, [pc, #392]	; (800dd68 <CheckPick+0x2d8>)
 800dbe0:	f00a f8ba 	bl	8017d58 <HAL_GPIO_ReadPin>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d10f      	bne.n	800dc0a <CheckPick+0x17a>
 800dbea:	4b58      	ldr	r3, [pc, #352]	; (800dd4c <CheckPick+0x2bc>)
 800dbec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7f2 fcaa 	bl	8000548 <__aeabi_f2d>
 800dbf4:	a350      	add	r3, pc, #320	; (adr r3, 800dd38 <CheckPick+0x2a8>)
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	f7f2 ff79 	bl	8000af0 <__aeabi_dcmple>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <CheckPick+0x17a>
					PP_stop(&pp);
 800dc04:	4851      	ldr	r0, [pc, #324]	; (800dd4c <CheckPick+0x2bc>)
 800dc06:	f7f8 fb1b 	bl	8006240 <PP_stop>
			}

			if(ps4.button == SQUARE)
 800dc0a:	4b51      	ldr	r3, [pc, #324]	; (800dd50 <CheckPick+0x2c0>)
 800dc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc12:	d10b      	bne.n	800dc2c <CheckPick+0x19c>
			{
				while(ps4.button == SQUARE);
 800dc14:	bf00      	nop
 800dc16:	4b4e      	ldr	r3, [pc, #312]	; (800dd50 <CheckPick+0x2c0>)
 800dc18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc1e:	d0fa      	beq.n	800dc16 <CheckPick+0x186>
				PP_stop(&pp);
 800dc20:	484a      	ldr	r0, [pc, #296]	; (800dd4c <CheckPick+0x2bc>)
 800dc22:	f7f8 fb0d 	bl	8006240 <PP_stop>
				picked_left = 0;
 800dc26:	4b4c      	ldr	r3, [pc, #304]	; (800dd58 <CheckPick+0x2c8>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800dc2c:	4b47      	ldr	r3, [pc, #284]	; (800dd4c <CheckPick+0x2bc>)
 800dc2e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800dc32:	f003 0301 	and.w	r3, r3, #1
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d195      	bne.n	800db68 <CheckPick+0xd8>
			}
		}
		pick_left_manual = 0;
 800dc3c:	4b47      	ldr	r3, [pc, #284]	; (800dd5c <CheckPick+0x2cc>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	601a      	str	r2, [r3, #0]
		if(picked_left)
 800dc42:	4b45      	ldr	r3, [pc, #276]	; (800dd58 <CheckPick+0x2c8>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d03d      	beq.n	800dcc6 <CheckPick+0x236>
		{
			ResetCoordinate();
 800dc4a:	f000 fb7f 	bl	800e34c <ResetCoordinate>
			float pick_left_adjust_servo[1][7] = {{4.0, 0.7, 0.2, 0, 0, 0, 0}};
 800dc4e:	4b48      	ldr	r3, [pc, #288]	; (800dd70 <CheckPick+0x2e0>)
 800dc50:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800dc54:	461d      	mov	r5, r3
 800dc56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dc5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			PP_start(pick_left_adjust_servo, 1, &pp);
 800dc62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc66:	4a39      	ldr	r2, [pc, #228]	; (800dd4c <CheckPick+0x2bc>)
 800dc68:	2101      	movs	r1, #1
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7f7 ffb0 	bl	8005bd0 <PP_start>
			while(pp.pp_start)
 800dc70:	e00d      	b.n	800dc8e <CheckPick+0x1fe>
			{
				if(ps4.button == SQUARE)
 800dc72:	4b37      	ldr	r3, [pc, #220]	; (800dd50 <CheckPick+0x2c0>)
 800dc74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc7a:	d108      	bne.n	800dc8e <CheckPick+0x1fe>
				{
					while(ps4.button == SQUARE);
 800dc7c:	bf00      	nop
 800dc7e:	4b34      	ldr	r3, [pc, #208]	; (800dd50 <CheckPick+0x2c0>)
 800dc80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc86:	d0fa      	beq.n	800dc7e <CheckPick+0x1ee>
					PP_stop(&pp);
 800dc88:	4830      	ldr	r0, [pc, #192]	; (800dd4c <CheckPick+0x2bc>)
 800dc8a:	f7f8 fad9 	bl	8006240 <PP_stop>
			while(pp.pp_start)
 800dc8e:	4b2f      	ldr	r3, [pc, #188]	; (800dd4c <CheckPick+0x2bc>)
 800dc90:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1e9      	bne.n	800dc72 <CheckPick+0x1e2>
				}
			}
			LoadRing();
 800dc9e:	f000 fafd 	bl	800e29c <LoadRing>
			if(go_A)
 800dca2:	4b34      	ldr	r3, [pc, #208]	; (800dd74 <CheckPick+0x2e4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <CheckPick+0x224>
				lidar.pos_counter = CENTER_2;
 800dcaa:	4b26      	ldr	r3, [pc, #152]	; (800dd44 <CheckPick+0x2b4>)
 800dcac:	2204      	movs	r2, #4
 800dcae:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 800dcb2:	e003      	b.n	800dcbc <CheckPick+0x22c>
			else
				lidar.pos_counter = CENTER_1;
 800dcb4:	4b23      	ldr	r3, [pc, #140]	; (800dd44 <CheckPick+0x2b4>)
 800dcb6:	2203      	movs	r2, #3
 800dcb8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			load_adjust = 1;
 800dcbc:	4b2e      	ldr	r3, [pc, #184]	; (800dd78 <CheckPick+0x2e8>)
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	601a      	str	r2, [r3, #0]
			AdjustRings();
 800dcc2:	f000 fb31 	bl	800e328 <AdjustRings>
//			osDelay(500);
//			setSpeedMODN(5.5);
		}
	}

	if(pick_right)
 800dcc6:	4b2d      	ldr	r3, [pc, #180]	; (800dd7c <CheckPick+0x2ec>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f000 8129 	beq.w	800df22 <CheckPick+0x492>
	{
		load_stop_once = 0;
 800dcd0:	4b2b      	ldr	r3, [pc, #172]	; (800dd80 <CheckPick+0x2f0>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	601a      	str	r2, [r3, #0]
		loaded = 0;
 800dcd6:	4b2b      	ldr	r3, [pc, #172]	; (800dd84 <CheckPick+0x2f4>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	601a      	str	r2, [r3, #0]
		load_adjust = 1;
 800dcdc:	4b26      	ldr	r3, [pc, #152]	; (800dd78 <CheckPick+0x2e8>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	601a      	str	r2, [r3, #0]

//		pick_0 = 1;
//		pick_manual(-10000);

		lidar.pos = PICK_RIGHT;
 800dce2:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <CheckPick+0x2b4>)
 800dce4:	2209      	movs	r2, #9
 800dce6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar.pos_counter = PICK_RIGHT;
 800dcea:	4b16      	ldr	r3, [pc, #88]	; (800dd44 <CheckPick+0x2b4>)
 800dcec:	2209      	movs	r2, #9
 800dcee:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		// Stick to fence
		open_servo;
 800dcf2:	f640 01ac 	movw	r1, #2220	; 0x8ac
 800dcf6:	4824      	ldr	r0, [pc, #144]	; (800dd88 <CheckPick+0x2f8>)
 800dcf8:	f7fd fd2a 	bl	800b750 <ServoSetPulse>
 800dcfc:	f44f 7148 	mov.w	r1, #800	; 0x320
 800dd00:	4822      	ldr	r0, [pc, #136]	; (800dd8c <CheckPick+0x2fc>)
 800dd02:	f7fd fd25 	bl	800b750 <ServoSetPulse>
		pick_right = 0;
 800dd06:	4b1d      	ldr	r3, [pc, #116]	; (800dd7c <CheckPick+0x2ec>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]
		float stick_fence_right[1][7] = {{2.0, 10, 0, -90, 0, 0, 0}};
 800dd0c:	4b20      	ldr	r3, [pc, #128]	; (800dd90 <CheckPick+0x300>)
 800dd0e:	f107 0420 	add.w	r4, r7, #32
 800dd12:	461d      	mov	r5, r3
 800dd14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_right, 1, &pp);
 800dd20:	f107 0320 	add.w	r3, r7, #32
 800dd24:	4a09      	ldr	r2, [pc, #36]	; (800dd4c <CheckPick+0x2bc>)
 800dd26:	2101      	movs	r1, #1
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7f7 ff51 	bl	8005bd0 <PP_start>
		while(pp.pp_start)
 800dd2e:	e052      	b.n	800ddd6 <CheckPick+0x346>
 800dd30:	cccccccd 	.word	0xcccccccd
 800dd34:	c010cccc 	.word	0xc010cccc
 800dd38:	33333333 	.word	0x33333333
 800dd3c:	bfd33333 	.word	0xbfd33333
 800dd40:	200079c8 	.word	0x200079c8
 800dd44:	200091a0 	.word	0x200091a0
 800dd48:	080255d0 	.word	0x080255d0
 800dd4c:	20006d44 	.word	0x20006d44
 800dd50:	2000a240 	.word	0x2000a240
 800dd54:	40020c00 	.word	0x40020c00
 800dd58:	20009a1c 	.word	0x20009a1c
 800dd5c:	20009bcc 	.word	0x20009bcc
 800dd60:	080255ec 	.word	0x080255ec
 800dd64:	3f333333 	.word	0x3f333333
 800dd68:	40021000 	.word	0x40021000
 800dd6c:	3f0ccccd 	.word	0x3f0ccccd
 800dd70:	08025608 	.word	0x08025608
 800dd74:	20009bc8 	.word	0x20009bc8
 800dd78:	200095bc 	.word	0x200095bc
 800dd7c:	2000a89c 	.word	0x2000a89c
 800dd80:	20009b98 	.word	0x20009b98
 800dd84:	200095a8 	.word	0x200095a8
 800dd88:	200079d8 	.word	0x200079d8
 800dd8c:	2000a5e8 	.word	0x2000a5e8
 800dd90:	08025624 	.word	0x08025624
		{
			if(ps4.button == SQUARE)
 800dd94:	4b68      	ldr	r3, [pc, #416]	; (800df38 <CheckPick+0x4a8>)
 800dd96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd9c:	d108      	bne.n	800ddb0 <CheckPick+0x320>
			{
				while(ps4.button == SQUARE);
 800dd9e:	bf00      	nop
 800dda0:	4b65      	ldr	r3, [pc, #404]	; (800df38 <CheckPick+0x4a8>)
 800dda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dda4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dda8:	d0fa      	beq.n	800dda0 <CheckPick+0x310>
				PP_stop(&pp);
 800ddaa:	4864      	ldr	r0, [pc, #400]	; (800df3c <CheckPick+0x4ac>)
 800ddac:	f7f8 fa48 	bl	8006240 <PP_stop>
			}

			if(In_LS_Left_1 || In_LS_Left_2)
 800ddb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ddb4:	4862      	ldr	r0, [pc, #392]	; (800df40 <CheckPick+0x4b0>)
 800ddb6:	f009 ffcf 	bl	8017d58 <HAL_GPIO_ReadPin>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d007      	beq.n	800ddd0 <CheckPick+0x340>
 800ddc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ddc4:	485e      	ldr	r0, [pc, #376]	; (800df40 <CheckPick+0x4b0>)
 800ddc6:	f009 ffc7 	bl	8017d58 <HAL_GPIO_ReadPin>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d102      	bne.n	800ddd6 <CheckPick+0x346>
				PP_stop(&pp);
 800ddd0:	485a      	ldr	r0, [pc, #360]	; (800df3c <CheckPick+0x4ac>)
 800ddd2:	f7f8 fa35 	bl	8006240 <PP_stop>
		while(pp.pp_start)
 800ddd6:	4b59      	ldr	r3, [pc, #356]	; (800df3c <CheckPick+0x4ac>)
 800ddd8:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800dddc:	f003 0301 	and.w	r3, r3, #1
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1d6      	bne.n	800dd94 <CheckPick+0x304>
		}

		picked_right = 1;
 800dde6:	4b57      	ldr	r3, [pc, #348]	; (800df44 <CheckPick+0x4b4>)
 800dde8:	2201      	movs	r2, #1
 800ddea:	601a      	str	r2, [r3, #0]
		ResetCoordinate();
 800ddec:	f000 faae 	bl	800e34c <ResetCoordinate>
		osDelay(10);
 800ddf0:	200a      	movs	r0, #10
 800ddf2:	f00e fe6b 	bl	801cacc <osDelay>
		setPick(0);
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	f7ff fda8 	bl	800d94c <setPick>
		float pick_right_point[1][7] = {{4.5, 1.5, -5, -90, 0, 0, 0}};
 800ddfc:	4b52      	ldr	r3, [pc, #328]	; (800df48 <CheckPick+0x4b8>)
 800ddfe:	1d3c      	adds	r4, r7, #4
 800de00:	461d      	mov	r5, r3
 800de02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(pick_right_point, 1, &pp);
 800de0e:	1d3b      	adds	r3, r7, #4
 800de10:	4a4a      	ldr	r2, [pc, #296]	; (800df3c <CheckPick+0x4ac>)
 800de12:	2101      	movs	r1, #1
 800de14:	4618      	mov	r0, r3
 800de16:	f7f7 fedb 	bl	8005bd0 <PP_start>
		while(pp.pp_start)
 800de1a:	e04e      	b.n	800deba <CheckPick+0x42a>
		{
			if(ps4.button == SQUARE)
 800de1c:	4b46      	ldr	r3, [pc, #280]	; (800df38 <CheckPick+0x4a8>)
 800de1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de24:	d10b      	bne.n	800de3e <CheckPick+0x3ae>
			{
				while(ps4.button == SQUARE);
 800de26:	bf00      	nop
 800de28:	4b43      	ldr	r3, [pc, #268]	; (800df38 <CheckPick+0x4a8>)
 800de2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de30:	d0fa      	beq.n	800de28 <CheckPick+0x398>
				PP_stop(&pp);
 800de32:	4842      	ldr	r0, [pc, #264]	; (800df3c <CheckPick+0x4ac>)
 800de34:	f7f8 fa04 	bl	8006240 <PP_stop>
				picked_right = 0;
 800de38:	4b42      	ldr	r3, [pc, #264]	; (800df44 <CheckPick+0x4b4>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
			}

			if(pp.real_y <= -0.3)
 800de3e:	4b3f      	ldr	r3, [pc, #252]	; (800df3c <CheckPick+0x4ac>)
 800de40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de42:	4618      	mov	r0, r3
 800de44:	f7f2 fb80 	bl	8000548 <__aeabi_f2d>
 800de48:	a339      	add	r3, pc, #228	; (adr r3, 800df30 <CheckPick+0x4a0>)
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	f7f2 fe4f 	bl	8000af0 <__aeabi_dcmple>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d003      	beq.n	800de60 <CheckPick+0x3d0>
				pp.target_vel[0] = 0.7;
 800de58:	4b38      	ldr	r3, [pc, #224]	; (800df3c <CheckPick+0x4ac>)
 800de5a:	4a3c      	ldr	r2, [pc, #240]	; (800df4c <CheckPick+0x4bc>)
 800de5c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

			if(In_Pick && pp.real_y <= -0.3)
 800de60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800de64:	483a      	ldr	r0, [pc, #232]	; (800df50 <CheckPick+0x4c0>)
 800de66:	f009 ff77 	bl	8017d58 <HAL_GPIO_ReadPin>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d10f      	bne.n	800de90 <CheckPick+0x400>
 800de70:	4b32      	ldr	r3, [pc, #200]	; (800df3c <CheckPick+0x4ac>)
 800de72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de74:	4618      	mov	r0, r3
 800de76:	f7f2 fb67 	bl	8000548 <__aeabi_f2d>
 800de7a:	a32d      	add	r3, pc, #180	; (adr r3, 800df30 <CheckPick+0x4a0>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 fe36 	bl	8000af0 <__aeabi_dcmple>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <CheckPick+0x400>
				PP_stop(&pp);
 800de8a:	482c      	ldr	r0, [pc, #176]	; (800df3c <CheckPick+0x4ac>)
 800de8c:	f7f8 f9d8 	bl	8006240 <PP_stop>

			if(ps4.button == UP)
 800de90:	4b29      	ldr	r3, [pc, #164]	; (800df38 <CheckPick+0x4a8>)
 800de92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de94:	2b10      	cmp	r3, #16
 800de96:	d110      	bne.n	800deba <CheckPick+0x42a>
			{
				while(ps4.button == UP);
 800de98:	bf00      	nop
 800de9a:	4b27      	ldr	r3, [pc, #156]	; (800df38 <CheckPick+0x4a8>)
 800de9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d0fb      	beq.n	800de9a <CheckPick+0x40a>
				go_type_3++;
 800dea2:	4b2c      	ldr	r3, [pc, #176]	; (800df54 <CheckPick+0x4c4>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	3301      	adds	r3, #1
 800dea8:	4a2a      	ldr	r2, [pc, #168]	; (800df54 <CheckPick+0x4c4>)
 800deaa:	6013      	str	r3, [r2, #0]

				if(go_type_3 > 3)
 800deac:	4b29      	ldr	r3, [pc, #164]	; (800df54 <CheckPick+0x4c4>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b03      	cmp	r3, #3
 800deb2:	dd02      	ble.n	800deba <CheckPick+0x42a>
					go_type_3 = 0;
 800deb4:	4b27      	ldr	r3, [pc, #156]	; (800df54 <CheckPick+0x4c4>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
		while(pp.pp_start)
 800deba:	4b20      	ldr	r3, [pc, #128]	; (800df3c <CheckPick+0x4ac>)
 800debc:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1a8      	bne.n	800de1c <CheckPick+0x38c>
			}
		}

		if(picked_right)
 800deca:	4b1e      	ldr	r3, [pc, #120]	; (800df44 <CheckPick+0x4b4>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d027      	beq.n	800df22 <CheckPick+0x492>
		{
//			LoadRing()
			switch(go_type_3)
 800ded2:	4b20      	ldr	r3, [pc, #128]	; (800df54 <CheckPick+0x4c4>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b03      	cmp	r3, #3
 800ded8:	d81e      	bhi.n	800df18 <CheckPick+0x488>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <CheckPick+0x450>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800def1 	.word	0x0800def1
 800dee4:	0800defb 	.word	0x0800defb
 800dee8:	0800df05 	.word	0x0800df05
 800deec:	0800df0f 	.word	0x0800df0f
			{
				case 0:
					lidar.pos_counter = CENTER_4;
 800def0:	4b19      	ldr	r3, [pc, #100]	; (800df58 <CheckPick+0x4c8>)
 800def2:	2207      	movs	r2, #7
 800def4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800def8:	e00f      	b.n	800df1a <CheckPick+0x48a>

				case 1:
					lidar.pos_counter = CENTER_3;
 800defa:	4b17      	ldr	r3, [pc, #92]	; (800df58 <CheckPick+0x4c8>)
 800defc:	2206      	movs	r2, #6
 800defe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800df02:	e00a      	b.n	800df1a <CheckPick+0x48a>

				case 2:
					lidar.pos_counter = CENTER;
 800df04:	4b14      	ldr	r3, [pc, #80]	; (800df58 <CheckPick+0x4c8>)
 800df06:	2205      	movs	r2, #5
 800df08:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800df0c:	e005      	b.n	800df1a <CheckPick+0x48a>

				case 3:
					lidar.pos_counter = CENTER_2;
 800df0e:	4b12      	ldr	r3, [pc, #72]	; (800df58 <CheckPick+0x4c8>)
 800df10:	2204      	movs	r2, #4
 800df12:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
					break;
 800df16:	e000      	b.n	800df1a <CheckPick+0x48a>

				default:
					break;
 800df18:	bf00      	nop
			}
//			osDelay(500);
//			close_servo;
			setSpeedMODN(5.5);
 800df1a:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800df1e:	f7f6 ff5f 	bl	8004de0 <setSpeedMODN>
		}
	}
}
 800df22:	bf00      	nop
 800df24:	3790      	adds	r7, #144	; 0x90
 800df26:	46bd      	mov	sp, r7
 800df28:	bdb0      	pop	{r4, r5, r7, pc}
 800df2a:	bf00      	nop
 800df2c:	f3af 8000 	nop.w
 800df30:	33333333 	.word	0x33333333
 800df34:	bfd33333 	.word	0xbfd33333
 800df38:	2000a240 	.word	0x2000a240
 800df3c:	20006d44 	.word	0x20006d44
 800df40:	40020c00 	.word	0x40020c00
 800df44:	20007328 	.word	0x20007328
 800df48:	08025640 	.word	0x08025640
 800df4c:	3f333333 	.word	0x3f333333
 800df50:	40021000 	.word	0x40021000
 800df54:	20006d40 	.word	0x20006d40
 800df58:	200091a0 	.word	0x200091a0

0800df5c <CheckShoot>:

void CheckShoot()
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	af00      	add	r7, sp, #0
//	if(In_ShotDone)
//		led3 = 1;
//	else
//		led3 = 0;

	if(shoot_start && In_ShotDone)
 800df60:	4b3b      	ldr	r3, [pc, #236]	; (800e050 <CheckShoot+0xf4>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d012      	beq.n	800df8e <CheckShoot+0x32>
 800df68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800df6c:	4839      	ldr	r0, [pc, #228]	; (800e054 <CheckShoot+0xf8>)
 800df6e:	f009 fef3 	bl	8017d58 <HAL_GPIO_ReadPin>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10a      	bne.n	800df8e <CheckShoot+0x32>
	{
		shoot_done = 1;
 800df78:	4b37      	ldr	r3, [pc, #220]	; (800e058 <CheckShoot+0xfc>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	601a      	str	r2, [r3, #0]
		shoot_start = 0;
 800df7e:	4b34      	ldr	r3, [pc, #208]	; (800e050 <CheckShoot+0xf4>)
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
		push_return;
 800df84:	4935      	ldr	r1, [pc, #212]	; (800e05c <CheckShoot+0x100>)
 800df86:	4836      	ldr	r0, [pc, #216]	; (800e060 <CheckShoot+0x104>)
 800df88:	f7f3 f8ff 	bl	800118a <WriteBDC>
 800df8c:	e00e      	b.n	800dfac <CheckShoot+0x50>
	}
	else if(In_ShotDone)
 800df8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800df92:	4830      	ldr	r0, [pc, #192]	; (800e054 <CheckShoot+0xf8>)
 800df94:	f009 fee0 	bl	8017d58 <HAL_GPIO_ReadPin>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <CheckShoot+0x50>
	{
		push_return;
 800df9e:	492f      	ldr	r1, [pc, #188]	; (800e05c <CheckShoot+0x100>)
 800dfa0:	482f      	ldr	r0, [pc, #188]	; (800e060 <CheckShoot+0x104>)
 800dfa2:	f7f3 f8f2 	bl	800118a <WriteBDC>
		shoot_done = 1;
 800dfa6:	4b2c      	ldr	r3, [pc, #176]	; (800e058 <CheckShoot+0xfc>)
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	601a      	str	r2, [r3, #0]
	}

	// Done Shooting
	if(shoot_done && In_ShotReady && wait_load)
 800dfac:	4b2a      	ldr	r3, [pc, #168]	; (800e058 <CheckShoot+0xfc>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d02a      	beq.n	800e00a <CheckShoot+0xae>
 800dfb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800dfb8:	4826      	ldr	r0, [pc, #152]	; (800e054 <CheckShoot+0xf8>)
 800dfba:	f009 fecd 	bl	8017d58 <HAL_GPIO_ReadPin>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d122      	bne.n	800e00a <CheckShoot+0xae>
 800dfc4:	4b27      	ldr	r3, [pc, #156]	; (800e064 <CheckShoot+0x108>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d01e      	beq.n	800e00a <CheckShoot+0xae>
	{
		wait_load = 0;
 800dfcc:	4b25      	ldr	r3, [pc, #148]	; (800e064 <CheckShoot+0x108>)
 800dfce:	2200      	movs	r2, #0
 800dfd0:	601a      	str	r2, [r3, #0]
		shoot_done = 0;
 800dfd2:	4b21      	ldr	r3, [pc, #132]	; (800e058 <CheckShoot+0xfc>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
		push_stop;
 800dfd8:	2100      	movs	r1, #0
 800dfda:	4821      	ldr	r0, [pc, #132]	; (800e060 <CheckShoot+0x104>)
 800dfdc:	f7f3 f8d5 	bl	800118a <WriteBDC>
		adjust_servo;
 800dfe0:	f44f 7148 	mov.w	r1, #800	; 0x320
 800dfe4:	4820      	ldr	r0, [pc, #128]	; (800e068 <CheckShoot+0x10c>)
 800dfe6:	f7fd fbb3 	bl	800b750 <ServoSetPulse>
 800dfea:	f640 0166 	movw	r1, #2150	; 0x866
 800dfee:	481f      	ldr	r0, [pc, #124]	; (800e06c <CheckShoot+0x110>)
 800dff0:	f7fd fbae 	bl	800b750 <ServoSetPulse>
		reload = 1;
 800dff4:	4b1e      	ldr	r3, [pc, #120]	; (800e070 <CheckShoot+0x114>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	601a      	str	r2, [r3, #0]
		pick_manual(4000);
 800dffa:	491e      	ldr	r1, [pc, #120]	; (800e074 <CheckShoot+0x118>)
 800dffc:	481e      	ldr	r0, [pc, #120]	; (800e078 <CheckShoot+0x11c>)
 800dffe:	f7f3 f8c4 	bl	800118a <WriteBDC>
		must_load = 1;
 800e002:	4b1e      	ldr	r3, [pc, #120]	; (800e07c <CheckShoot+0x120>)
 800e004:	2201      	movs	r2, #1
 800e006:	601a      	str	r2, [r3, #0]
//		open_servo;
//	}

//	if(In_ShotReady && !shoot_start)
//		push_stop;
}
 800e008:	e020      	b.n	800e04c <CheckShoot+0xf0>
	else if(shoot_done && In_ShotReady)
 800e00a:	4b13      	ldr	r3, [pc, #76]	; (800e058 <CheckShoot+0xfc>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d01c      	beq.n	800e04c <CheckShoot+0xf0>
 800e012:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e016:	480f      	ldr	r0, [pc, #60]	; (800e054 <CheckShoot+0xf8>)
 800e018:	f009 fe9e 	bl	8017d58 <HAL_GPIO_ReadPin>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d114      	bne.n	800e04c <CheckShoot+0xf0>
		shoot_done = 0;
 800e022:	4b0d      	ldr	r3, [pc, #52]	; (800e058 <CheckShoot+0xfc>)
 800e024:	2200      	movs	r2, #0
 800e026:	601a      	str	r2, [r3, #0]
		push_stop;
 800e028:	2100      	movs	r1, #0
 800e02a:	480d      	ldr	r0, [pc, #52]	; (800e060 <CheckShoot+0x104>)
 800e02c:	f7f3 f8ad 	bl	800118a <WriteBDC>
		if(wait_load)
 800e030:	4b0c      	ldr	r3, [pc, #48]	; (800e064 <CheckShoot+0x108>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d009      	beq.n	800e04c <CheckShoot+0xf0>
			reload = 1;
 800e038:	4b0d      	ldr	r3, [pc, #52]	; (800e070 <CheckShoot+0x114>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	601a      	str	r2, [r3, #0]
			pick_manual(4000);
 800e03e:	490d      	ldr	r1, [pc, #52]	; (800e074 <CheckShoot+0x118>)
 800e040:	480d      	ldr	r0, [pc, #52]	; (800e078 <CheckShoot+0x11c>)
 800e042:	f7f3 f8a2 	bl	800118a <WriteBDC>
			wait_load = 0;
 800e046:	4b07      	ldr	r3, [pc, #28]	; (800e064 <CheckShoot+0x108>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
}
 800e04c:	bf00      	nop
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	2000944c 	.word	0x2000944c
 800e054:	40021000 	.word	0x40021000
 800e058:	200090e8 	.word	0x200090e8
 800e05c:	ffffb1e1 	.word	0xffffb1e1
 800e060:	20009894 	.word	0x20009894
 800e064:	2000759c 	.word	0x2000759c
 800e068:	200079d8 	.word	0x200079d8
 800e06c:	2000a5e8 	.word	0x2000a5e8
 800e070:	200078b8 	.word	0x200078b8
 800e074:	fffff060 	.word	0xfffff060
 800e078:	20007878 	.word	0x20007878
 800e07c:	20009884 	.word	0x20009884

0800e080 <CheckLoad>:

void CheckLoad()
{
 800e080:	b580      	push	{r7, lr}
 800e082:	af00      	add	r7, sp, #0
//	else if(load_start)
//	{
//		pick_up;
//	}

	if(load_start || reload)
 800e084:	4b6e      	ldr	r3, [pc, #440]	; (800e240 <CheckLoad+0x1c0>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d103      	bne.n	800e094 <CheckLoad+0x14>
 800e08c:	4b6d      	ldr	r3, [pc, #436]	; (800e244 <CheckLoad+0x1c4>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d031      	beq.n	800e0f8 <CheckLoad+0x78>
	{
		if(pick_enc >= 7000 && !load_stop_once)
 800e094:	4b6c      	ldr	r3, [pc, #432]	; (800e248 <CheckLoad+0x1c8>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f641 3257 	movw	r2, #6999	; 0x1b57
 800e09c:	4293      	cmp	r3, r2
 800e09e:	dd1b      	ble.n	800e0d8 <CheckLoad+0x58>
 800e0a0:	4b6a      	ldr	r3, [pc, #424]	; (800e24c <CheckLoad+0x1cc>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d117      	bne.n	800e0d8 <CheckLoad+0x58>
		{
			pick_stop;
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	4869      	ldr	r0, [pc, #420]	; (800e250 <CheckLoad+0x1d0>)
 800e0ac:	f7f3 f86d 	bl	800118a <WriteBDC>
			osDelay(200);
 800e0b0:	20c8      	movs	r0, #200	; 0xc8
 800e0b2:	f00e fd0b 	bl	801cacc <osDelay>
			pick_manual(4000);
 800e0b6:	4967      	ldr	r1, [pc, #412]	; (800e254 <CheckLoad+0x1d4>)
 800e0b8:	4865      	ldr	r0, [pc, #404]	; (800e250 <CheckLoad+0x1d0>)
 800e0ba:	f7f3 f866 	bl	800118a <WriteBDC>
			adjust_servo;
 800e0be:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e0c2:	4865      	ldr	r0, [pc, #404]	; (800e258 <CheckLoad+0x1d8>)
 800e0c4:	f7fd fb44 	bl	800b750 <ServoSetPulse>
 800e0c8:	f640 0166 	movw	r1, #2150	; 0x866
 800e0cc:	4863      	ldr	r0, [pc, #396]	; (800e25c <CheckLoad+0x1dc>)
 800e0ce:	f7fd fb3f 	bl	800b750 <ServoSetPulse>
//			close_servo;
			load_stop_once = 1;
 800e0d2:	4b5e      	ldr	r3, [pc, #376]	; (800e24c <CheckLoad+0x1cc>)
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	601a      	str	r2, [r3, #0]
		}

		if(pick_enc >= 13000)
 800e0d8:	4b5b      	ldr	r3, [pc, #364]	; (800e248 <CheckLoad+0x1c8>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f243 22c7 	movw	r2, #12999	; 0x32c7
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	dd09      	ble.n	800e0f8 <CheckLoad+0x78>
		{
			load_start = 0;
 800e0e4:	4b56      	ldr	r3, [pc, #344]	; (800e240 <CheckLoad+0x1c0>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	601a      	str	r2, [r3, #0]
			reload = 0;
 800e0ea:	4b56      	ldr	r3, [pc, #344]	; (800e244 <CheckLoad+0x1c4>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]
			pick_stop;
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4857      	ldr	r0, [pc, #348]	; (800e250 <CheckLoad+0x1d0>)
 800e0f4:	f7f3 f849 	bl	800118a <WriteBDC>
		}
	}

	if(load_start && In_Load && pick_enc >= 6000)
 800e0f8:	4b51      	ldr	r3, [pc, #324]	; (800e240 <CheckLoad+0x1c0>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d04b      	beq.n	800e198 <CheckLoad+0x118>
 800e100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e104:	4856      	ldr	r0, [pc, #344]	; (800e260 <CheckLoad+0x1e0>)
 800e106:	f009 fe27 	bl	8017d58 <HAL_GPIO_ReadPin>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d143      	bne.n	800e198 <CheckLoad+0x118>
 800e110:	4b4d      	ldr	r3, [pc, #308]	; (800e248 <CheckLoad+0x1c8>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f241 726f 	movw	r2, #5999	; 0x176f
 800e118:	4293      	cmp	r3, r2
 800e11a:	dd3d      	ble.n	800e198 <CheckLoad+0x118>
	{
		load_start = 0;
 800e11c:	4b48      	ldr	r3, [pc, #288]	; (800e240 <CheckLoad+0x1c0>)
 800e11e:	2200      	movs	r2, #0
 800e120:	601a      	str	r2, [r3, #0]
		pick_enc_buf = pick_enc;
 800e122:	4b49      	ldr	r3, [pc, #292]	; (800e248 <CheckLoad+0x1c8>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a4f      	ldr	r2, [pc, #316]	; (800e264 <CheckLoad+0x1e4>)
 800e128:	6013      	str	r3, [r2, #0]
//		{
//			while(abs(pick_enc - pick_enc_buf) < RedPickMore)
//				pick_manual(2500);
//		}

		if(blue)
 800e12a:	4b4f      	ldr	r3, [pc, #316]	; (800e268 <CheckLoad+0x1e8>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d018      	beq.n	800e164 <CheckLoad+0xe4>
		{
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800e132:	e004      	b.n	800e13e <CheckLoad+0xbe>
				pick_manual(-2500);
 800e134:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800e138:	4845      	ldr	r0, [pc, #276]	; (800e250 <CheckLoad+0x1d0>)
 800e13a:	f7f3 f826 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800e13e:	4b49      	ldr	r3, [pc, #292]	; (800e264 <CheckLoad+0x1e4>)
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	4b41      	ldr	r3, [pc, #260]	; (800e248 <CheckLoad+0x1c8>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e14c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e150:	4b46      	ldr	r3, [pc, #280]	; (800e26c <CheckLoad+0x1ec>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	dbed      	blt.n	800e134 <CheckLoad+0xb4>
 800e158:	e011      	b.n	800e17e <CheckLoad+0xfe>
		}
		else
		{
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
				pick_manual(-2500);
 800e15a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800e15e:	483c      	ldr	r0, [pc, #240]	; (800e250 <CheckLoad+0x1d0>)
 800e160:	f7f3 f813 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
 800e164:	4b3f      	ldr	r3, [pc, #252]	; (800e264 <CheckLoad+0x1e4>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	4b37      	ldr	r3, [pc, #220]	; (800e248 <CheckLoad+0x1c8>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e172:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e176:	4b3e      	ldr	r3, [pc, #248]	; (800e270 <CheckLoad+0x1f0>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	dbed      	blt.n	800e15a <CheckLoad+0xda>
		}

		pick_tol = 100;
 800e17e:	4b3d      	ldr	r3, [pc, #244]	; (800e274 <CheckLoad+0x1f4>)
 800e180:	2264      	movs	r2, #100	; 0x64
 800e182:	601a      	str	r2, [r3, #0]
		pick_stop;
 800e184:	2100      	movs	r1, #0
 800e186:	4832      	ldr	r0, [pc, #200]	; (800e250 <CheckLoad+0x1d0>)
 800e188:	f7f2 ffff 	bl	800118a <WriteBDC>

		if(mode == AUTO)
 800e18c:	4b3a      	ldr	r3, [pc, #232]	; (800e278 <CheckLoad+0x1f8>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d101      	bne.n	800e198 <CheckLoad+0x118>
			AutoLoadRing();
 800e194:	f000 f8a6 	bl	800e2e4 <AutoLoadRing>
	}

	if(reload && In_Load)
 800e198:	4b2a      	ldr	r3, [pc, #168]	; (800e244 <CheckLoad+0x1c4>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d045      	beq.n	800e22c <CheckLoad+0x1ac>
 800e1a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e1a4:	482e      	ldr	r0, [pc, #184]	; (800e260 <CheckLoad+0x1e0>)
 800e1a6:	f009 fdd7 	bl	8017d58 <HAL_GPIO_ReadPin>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d13d      	bne.n	800e22c <CheckLoad+0x1ac>
	{
		pick_enc_buf = pick_enc;
 800e1b0:	4b25      	ldr	r3, [pc, #148]	; (800e248 <CheckLoad+0x1c8>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a2b      	ldr	r2, [pc, #172]	; (800e264 <CheckLoad+0x1e4>)
 800e1b6:	6013      	str	r3, [r2, #0]
//		{
//			while(abs(pick_enc - pick_enc_buf) < RedPickMore)
//				pick_manual(2500);
//		}

		if(blue)
 800e1b8:	4b2b      	ldr	r3, [pc, #172]	; (800e268 <CheckLoad+0x1e8>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d018      	beq.n	800e1f2 <CheckLoad+0x172>
		{
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800e1c0:	e004      	b.n	800e1cc <CheckLoad+0x14c>
				pick_manual(-2500);
 800e1c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800e1c6:	4822      	ldr	r0, [pc, #136]	; (800e250 <CheckLoad+0x1d0>)
 800e1c8:	f7f2 ffdf 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < BluePickLess)
 800e1cc:	4b25      	ldr	r3, [pc, #148]	; (800e264 <CheckLoad+0x1e4>)
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	4b1d      	ldr	r3, [pc, #116]	; (800e248 <CheckLoad+0x1c8>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e1da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e1de:	4b23      	ldr	r3, [pc, #140]	; (800e26c <CheckLoad+0x1ec>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	dbed      	blt.n	800e1c2 <CheckLoad+0x142>
 800e1e6:	e011      	b.n	800e20c <CheckLoad+0x18c>
		}
		else
		{
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
				pick_manual(-2500);
 800e1e8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800e1ec:	4818      	ldr	r0, [pc, #96]	; (800e250 <CheckLoad+0x1d0>)
 800e1ee:	f7f2 ffcc 	bl	800118a <WriteBDC>
			while(abs(pick_enc_buf - pick_enc) < RedPickLess)
 800e1f2:	4b1c      	ldr	r3, [pc, #112]	; (800e264 <CheckLoad+0x1e4>)
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	4b14      	ldr	r3, [pc, #80]	; (800e248 <CheckLoad+0x1c8>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800e200:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800e204:	4b1a      	ldr	r3, [pc, #104]	; (800e270 <CheckLoad+0x1f0>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	429a      	cmp	r2, r3
 800e20a:	dbed      	blt.n	800e1e8 <CheckLoad+0x168>
		}
//		pick_tol = 100;
		reload = 0;
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <CheckLoad+0x1c4>)
 800e20e:	2200      	movs	r2, #0
 800e210:	601a      	str	r2, [r3, #0]
		must_load = 0;
 800e212:	4b1a      	ldr	r3, [pc, #104]	; (800e27c <CheckLoad+0x1fc>)
 800e214:	2200      	movs	r2, #0
 800e216:	601a      	str	r2, [r3, #0]
		pick_stop;
 800e218:	2100      	movs	r1, #0
 800e21a:	480d      	ldr	r0, [pc, #52]	; (800e250 <CheckLoad+0x1d0>)
 800e21c:	f7f2 ffb5 	bl	800118a <WriteBDC>

		if(mode == AUTO)
 800e220:	4b15      	ldr	r3, [pc, #84]	; (800e278 <CheckLoad+0x1f8>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d101      	bne.n	800e22c <CheckLoad+0x1ac>
			AutoLoadRing();
 800e228:	f000 f85c 	bl	800e2e4 <AutoLoadRing>

//	if(loaded >= 8)
//	{
//		load_adjust_servo;
//	}
	if(loaded >= 10)
 800e22c:	4b14      	ldr	r3, [pc, #80]	; (800e280 <CheckLoad+0x200>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2b09      	cmp	r3, #9
 800e232:	dd02      	ble.n	800e23a <CheckLoad+0x1ba>
		loaded = 0;
 800e234:	4b12      	ldr	r3, [pc, #72]	; (800e280 <CheckLoad+0x200>)
 800e236:	2200      	movs	r2, #0
 800e238:	601a      	str	r2, [r3, #0]

}
 800e23a:	bf00      	nop
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	2000745c 	.word	0x2000745c
 800e244:	200078b8 	.word	0x200078b8
 800e248:	20006c08 	.word	0x20006c08
 800e24c:	20009b98 	.word	0x20009b98
 800e250:	20007878 	.word	0x20007878
 800e254:	fffff060 	.word	0xfffff060
 800e258:	200079d8 	.word	0x200079d8
 800e25c:	2000a5e8 	.word	0x2000a5e8
 800e260:	40021000 	.word	0x40021000
 800e264:	20009e68 	.word	0x20009e68
 800e268:	20006a44 	.word	0x20006a44
 800e26c:	20006654 	.word	0x20006654
 800e270:	2000a534 	.word	0x2000a534
 800e274:	200073c8 	.word	0x200073c8
 800e278:	20009450 	.word	0x20009450
 800e27c:	20009884 	.word	0x20009884
 800e280:	200095a8 	.word	0x200095a8

0800e284 <Checking>:
	}

}

void Checking()
{
 800e284:	b580      	push	{r7, lr}
 800e286:	af00      	add	r7, sp, #0
	CheckShoot();
 800e288:	f7ff fe68 	bl	800df5c <CheckShoot>
	CheckLoad();
 800e28c:	f7ff fef8 	bl	800e080 <CheckLoad>
	CheckPick();
 800e290:	f7ff fbfe 	bl	800da90 <CheckPick>
	CheckPitch();
 800e294:	f7ff fbb8 	bl	800da08 <CheckPitch>
}
 800e298:	bf00      	nop
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <LoadRing>:

void LoadRing(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
	load_start = 1;
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <LoadRing+0x1c>)
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	601a      	str	r2, [r3, #0]
	load_stop_once = 0;
 800e2a6:	4b05      	ldr	r3, [pc, #20]	; (800e2bc <LoadRing+0x20>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
	pick_up;
 800e2ac:	4904      	ldr	r1, [pc, #16]	; (800e2c0 <LoadRing+0x24>)
 800e2ae:	4805      	ldr	r0, [pc, #20]	; (800e2c4 <LoadRing+0x28>)
 800e2b0:	f7f2 ff6b 	bl	800118a <WriteBDC>
}
 800e2b4:	bf00      	nop
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	2000745c 	.word	0x2000745c
 800e2bc:	20009b98 	.word	0x20009b98
 800e2c0:	ffffb1e1 	.word	0xffffb1e1
 800e2c4:	20007878 	.word	0x20007878

0800e2c8 <StopAutoPP>:

void StopAutoPP(void)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	af00      	add	r7, sp, #0
	PP_stop(&pp);
 800e2cc:	4803      	ldr	r0, [pc, #12]	; (800e2dc <StopAutoPP+0x14>)
 800e2ce:	f7f7 ffb7 	bl	8006240 <PP_stop>
	RNSStop(&rns);
 800e2d2:	4803      	ldr	r0, [pc, #12]	; (800e2e0 <StopAutoPP+0x18>)
 800e2d4:	f7fc fdac 	bl	800ae30 <RNSStop>
}
 800e2d8:	bf00      	nop
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20006d44 	.word	0x20006d44
 800e2e0:	20009074 	.word	0x20009074

0800e2e4 <AutoLoadRing>:

void AutoLoadRing(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
	cylinder_load;
 800e2e8:	4a0d      	ldr	r2, [pc, #52]	; (800e320 <AutoLoadRing+0x3c>)
 800e2ea:	7f13      	ldrb	r3, [r2, #28]
 800e2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f0:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800e2f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e2f6:	f00e fbe9 	bl	801cacc <osDelay>
	cylinder_retract;
 800e2fa:	4a09      	ldr	r2, [pc, #36]	; (800e320 <AutoLoadRing+0x3c>)
 800e2fc:	7f13      	ldrb	r3, [r2, #28]
 800e2fe:	f36f 1386 	bfc	r3, #6, #1
 800e302:	7713      	strb	r3, [r2, #28]
	osDelay(500);
 800e304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e308:	f00e fbe0 	bl	801cacc <osDelay>
	loaded++;
 800e30c:	4b05      	ldr	r3, [pc, #20]	; (800e324 <AutoLoadRing+0x40>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	4a04      	ldr	r2, [pc, #16]	; (800e324 <AutoLoadRing+0x40>)
 800e314:	6013      	str	r3, [r2, #0]

	AdjustRings();
 800e316:	f000 f807 	bl	800e328 <AdjustRings>
}
 800e31a:	bf00      	nop
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	200097d4 	.word	0x200097d4
 800e324:	200095a8 	.word	0x200095a8

0800e328 <AdjustRings>:

void AdjustRings(void)
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
	if(load_adjust)
 800e32c:	4b05      	ldr	r3, [pc, #20]	; (800e344 <AdjustRings+0x1c>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <AdjustRings+0x12>
	{
		servo_enb = 1;
 800e334:	4b04      	ldr	r3, [pc, #16]	; (800e348 <AdjustRings+0x20>)
 800e336:	2201      	movs	r2, #1
 800e338:	601a      	str	r2, [r3, #0]
	}
}
 800e33a:	bf00      	nop
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	200095bc 	.word	0x200095bc
 800e348:	2000a7e8 	.word	0x2000a7e8

0800e34c <ResetCoordinate>:

void ResetCoordinate(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
	RNSSet(&rns, RNS_PP_Reset);
 800e350:	211c      	movs	r1, #28
 800e352:	4805      	ldr	r0, [pc, #20]	; (800e368 <ResetCoordinate+0x1c>)
 800e354:	f7fc fe8a 	bl	800b06c <RNSSet>
	PP_reset(&pp);
 800e358:	4804      	ldr	r0, [pc, #16]	; (800e36c <ResetCoordinate+0x20>)
 800e35a:	f7f7 ff9d 	bl	8006298 <PP_reset>
	osDelay(50);
 800e35e:	2032      	movs	r0, #50	; 0x32
 800e360:	f00e fbb4 	bl	801cacc <osDelay>
}
 800e364:	bf00      	nop
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20009074 	.word	0x20009074
 800e36c:	20006d44 	.word	0x20006d44

0800e370 <ResetPickEnc>:

void ResetPickEnc(void)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	af00      	add	r7, sp, #0
	QEIReset(QEI1);
 800e374:	2001      	movs	r0, #1
 800e376:	f7f3 fc2d 	bl	8001bd4 <QEIReset>
	pick_enc = 0;
 800e37a:	4b02      	ldr	r3, [pc, #8]	; (800e384 <ResetPickEnc+0x14>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]
}
 800e380:	bf00      	nop
 800e382:	bd80      	pop	{r7, pc}
 800e384:	20006c08 	.word	0x20006c08

0800e388 <enq>:

void enq(void) {
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
//	xpos = rns.enq.enq_buffer[0].data;
//	ypos = rns.enq.enq_buffer[1].data;
//	z = rns.enq.enq_buffer[2].data;
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", xpos, ypos, z);

	RNSEnquire(RNS_LSR_DIST, &rns);
 800e38c:	490e      	ldr	r1, [pc, #56]	; (800e3c8 <enq+0x40>)
 800e38e:	2067      	movs	r0, #103	; 0x67
 800e390:	f7fd f826 	bl	800b3e0 <RNSEnquire>
	lsrL.dist = rns.enq.enq_buffer[0].data;
 800e394:	4b0c      	ldr	r3, [pc, #48]	; (800e3c8 <enq+0x40>)
 800e396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e398:	4a0c      	ldr	r2, [pc, #48]	; (800e3cc <enq+0x44>)
 800e39a:	61d3      	str	r3, [r2, #28]
	lsrR.dist = rns.enq.enq_buffer[1].data;
 800e39c:	4b0a      	ldr	r3, [pc, #40]	; (800e3c8 <enq+0x40>)
 800e39e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a0:	4a0b      	ldr	r2, [pc, #44]	; (800e3d0 <enq+0x48>)
 800e3a2:	61d3      	str	r3, [r2, #28]

	RNSEnquire(RNS_XYZ_RAW, &rns);
 800e3a4:	4908      	ldr	r1, [pc, #32]	; (800e3c8 <enq+0x40>)
 800e3a6:	2069      	movs	r0, #105	; 0x69
 800e3a8:	f7fd f81a 	bl	800b3e0 <RNSEnquire>
	fXPos = rns.enq.enq_buffer[0].data;
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <enq+0x40>)
 800e3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3b0:	4a08      	ldr	r2, [pc, #32]	; (800e3d4 <enq+0x4c>)
 800e3b2:	6013      	str	r3, [r2, #0]
	fYPos = rns.enq.enq_buffer[1].data;
 800e3b4:	4b04      	ldr	r3, [pc, #16]	; (800e3c8 <enq+0x40>)
 800e3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b8:	4a07      	ldr	r2, [pc, #28]	; (800e3d8 <enq+0x50>)
 800e3ba:	6013      	str	r3, [r2, #0]
	fyaw = rns.enq.enq_buffer[2].data;
 800e3bc:	4b02      	ldr	r3, [pc, #8]	; (800e3c8 <enq+0x40>)
 800e3be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3c0:	4a06      	ldr	r2, [pc, #24]	; (800e3dc <enq+0x54>)
 800e3c2:	6013      	str	r3, [r2, #0]

//	sprintf((char*)debug, "A: %.2f B: %.2f C: %.2f D: %.2f X: %.2f Y: %.2f Z: %.2f Servo: %ld\n", a, b, c, d, fXPos, fYPos, fyaw, servo_ring.currentPulse);
//	sprintf((char*)debug, "X: %.2f Y: %.2f Yaw: %.2f\n", fXPos, fYPos, fyaw);
}
 800e3c4:	bf00      	nop
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	20009074 	.word	0x20009074
 800e3cc:	20007728 	.word	0x20007728
 800e3d0:	200095f8 	.word	0x200095f8
 800e3d4:	20009bd8 	.word	0x20009bd8
 800e3d8:	20009a28 	.word	0x20009a28
 800e3dc:	20009b8c 	.word	0x20009b8c

0800e3e0 <tune>:

void tune(void)
{
 800e3e0:	b5b0      	push	{r4, r5, r7, lr}
 800e3e2:	af00      	add	r7, sp, #0
	if(ps4.button == UP)
 800e3e4:	4bb0      	ldr	r3, [pc, #704]	; (800e6a8 <tune+0x2c8>)
 800e3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e8:	2b10      	cmp	r3, #16
 800e3ea:	d117      	bne.n	800e41c <tune+0x3c>
	{
		while(ps4.button == UP);
 800e3ec:	bf00      	nop
 800e3ee:	4bae      	ldr	r3, [pc, #696]	; (800e6a8 <tune+0x2c8>)
 800e3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3f2:	2b10      	cmp	r3, #16
 800e3f4:	d0fb      	beq.n	800e3ee <tune+0xe>
//		tune_p = 1;
//		tune_i = 0;
//		tune_d = 0;
		if(blue)
 800e3f6:	4bad      	ldr	r3, [pc, #692]	; (800e6ac <tune+0x2cc>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d007      	beq.n	800e40e <tune+0x2e>
			BluePickLess = pick_enc_buf - pick_enc;
 800e3fe:	4bac      	ldr	r3, [pc, #688]	; (800e6b0 <tune+0x2d0>)
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	4bac      	ldr	r3, [pc, #688]	; (800e6b4 <tune+0x2d4>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	1ad3      	subs	r3, r2, r3
 800e408:	4aab      	ldr	r2, [pc, #684]	; (800e6b8 <tune+0x2d8>)
 800e40a:	6013      	str	r3, [r2, #0]
 800e40c:	e006      	b.n	800e41c <tune+0x3c>
		else
			RedPickLess = pick_enc_buf - pick_enc;
 800e40e:	4ba8      	ldr	r3, [pc, #672]	; (800e6b0 <tune+0x2d0>)
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	4ba8      	ldr	r3, [pc, #672]	; (800e6b4 <tune+0x2d4>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	4aa8      	ldr	r2, [pc, #672]	; (800e6bc <tune+0x2dc>)
 800e41a:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == DOWN)
 800e41c:	4ba2      	ldr	r3, [pc, #648]	; (800e6a8 <tune+0x2c8>)
 800e41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e420:	2b40      	cmp	r3, #64	; 0x40
 800e422:	d117      	bne.n	800e454 <tune+0x74>
	{
		while(ps4.button == DOWN);
 800e424:	bf00      	nop
 800e426:	4ba0      	ldr	r3, [pc, #640]	; (800e6a8 <tune+0x2c8>)
 800e428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e42a:	2b40      	cmp	r3, #64	; 0x40
 800e42c:	d0fb      	beq.n	800e426 <tune+0x46>
		if(blue)
 800e42e:	4b9f      	ldr	r3, [pc, #636]	; (800e6ac <tune+0x2cc>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d007      	beq.n	800e446 <tune+0x66>
			BluePickMore = pick_enc - pick_enc_buf;
 800e436:	4b9f      	ldr	r3, [pc, #636]	; (800e6b4 <tune+0x2d4>)
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	4b9d      	ldr	r3, [pc, #628]	; (800e6b0 <tune+0x2d0>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	4a9f      	ldr	r2, [pc, #636]	; (800e6c0 <tune+0x2e0>)
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	e006      	b.n	800e454 <tune+0x74>
		else
			RedPickMore = pick_enc - pick_enc_buf;
 800e446:	4b9b      	ldr	r3, [pc, #620]	; (800e6b4 <tune+0x2d4>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b99      	ldr	r3, [pc, #612]	; (800e6b0 <tune+0x2d0>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	4a9c      	ldr	r2, [pc, #624]	; (800e6c4 <tune+0x2e4>)
 800e452:	6013      	str	r3, [r2, #0]
	}

	if(ps4.button == LEFT)
 800e454:	4b94      	ldr	r3, [pc, #592]	; (800e6a8 <tune+0x2c8>)
 800e456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e458:	2b80      	cmp	r3, #128	; 0x80
 800e45a:	d10d      	bne.n	800e478 <tune+0x98>
	{
		while(ps4.button == LEFT);
 800e45c:	bf00      	nop
 800e45e:	4b92      	ldr	r3, [pc, #584]	; (800e6a8 <tune+0x2c8>)
 800e460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e462:	2b80      	cmp	r3, #128	; 0x80
 800e464:	d0fb      	beq.n	800e45e <tune+0x7e>
		tune_p = 0;
 800e466:	4b98      	ldr	r3, [pc, #608]	; (800e6c8 <tune+0x2e8>)
 800e468:	2200      	movs	r2, #0
 800e46a:	601a      	str	r2, [r3, #0]
		tune_i = 0;
 800e46c:	4b97      	ldr	r3, [pc, #604]	; (800e6cc <tune+0x2ec>)
 800e46e:	2200      	movs	r2, #0
 800e470:	601a      	str	r2, [r3, #0]
		tune_d = 1;
 800e472:	4b97      	ldr	r3, [pc, #604]	; (800e6d0 <tune+0x2f0>)
 800e474:	2201      	movs	r2, #1
 800e476:	601a      	str	r2, [r3, #0]
	}

	if(ps4.button == RIGHT)
 800e478:	4b8b      	ldr	r3, [pc, #556]	; (800e6a8 <tune+0x2c8>)
 800e47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e47c:	2b20      	cmp	r3, #32
 800e47e:	d110      	bne.n	800e4a2 <tune+0xc2>
	{
		while(ps4.button == RIGHT);
 800e480:	bf00      	nop
 800e482:	4b89      	ldr	r3, [pc, #548]	; (800e6a8 <tune+0x2c8>)
 800e484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e486:	2b20      	cmp	r3, #32
 800e488:	d0fb      	beq.n	800e482 <tune+0xa2>
		wheel++;
 800e48a:	4b92      	ldr	r3, [pc, #584]	; (800e6d4 <tune+0x2f4>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3301      	adds	r3, #1
 800e490:	4a90      	ldr	r2, [pc, #576]	; (800e6d4 <tune+0x2f4>)
 800e492:	6013      	str	r3, [r2, #0]
		if(wheel > 5)
 800e494:	4b8f      	ldr	r3, [pc, #572]	; (800e6d4 <tune+0x2f4>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2b05      	cmp	r3, #5
 800e49a:	dd02      	ble.n	800e4a2 <tune+0xc2>
			wheel = 1;
 800e49c:	4b8d      	ldr	r3, [pc, #564]	; (800e6d4 <tune+0x2f4>)
 800e49e:	2201      	movs	r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]
	}

	if(tune_p)
 800e4a2:	4b89      	ldr	r3, [pc, #548]	; (800e6c8 <tune+0x2e8>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f000 809e 	beq.w	800e5e8 <tune+0x208>
	{
		switch(wheel)
 800e4ac:	4b89      	ldr	r3, [pc, #548]	; (800e6d4 <tune+0x2f4>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	2b03      	cmp	r3, #3
 800e4b4:	f200 8200 	bhi.w	800e8b8 <tune+0x4d8>
 800e4b8:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <tune+0xe0>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e4d1 	.word	0x0800e4d1
 800e4c4:	0800e517 	.word	0x0800e517
 800e4c8:	0800e55d 	.word	0x0800e55d
 800e4cc:	0800e5a3 	.word	0x0800e5a3
		{
		case 1:
			AP += ps4.joyR_y * 0.0001;
 800e4d0:	4b75      	ldr	r3, [pc, #468]	; (800e6a8 <tune+0x2c8>)
 800e4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7f2 f837 	bl	8000548 <__aeabi_f2d>
 800e4da:	a371      	add	r3, pc, #452	; (adr r3, 800e6a0 <tune+0x2c0>)
 800e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e0:	f7f2 f88a 	bl	80005f8 <__aeabi_dmul>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	4614      	mov	r4, r2
 800e4ea:	461d      	mov	r5, r3
 800e4ec:	4b7a      	ldr	r3, [pc, #488]	; (800e6d8 <tune+0x2f8>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7f2 f829 	bl	8000548 <__aeabi_f2d>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	f7f1 fec5 	bl	800028c <__adddf3>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	4610      	mov	r0, r2
 800e508:	4619      	mov	r1, r3
 800e50a:	f7f2 fb6d 	bl	8000be8 <__aeabi_d2f>
 800e50e:	4603      	mov	r3, r0
 800e510:	4a71      	ldr	r2, [pc, #452]	; (800e6d8 <tune+0x2f8>)
 800e512:	6013      	str	r3, [r2, #0]
			break;
 800e514:	e1d0      	b.n	800e8b8 <tune+0x4d8>
		case 2:
			BP += ps4.joyR_y * 0.0001;
 800e516:	4b64      	ldr	r3, [pc, #400]	; (800e6a8 <tune+0x2c8>)
 800e518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f2 f814 	bl	8000548 <__aeabi_f2d>
 800e520:	a35f      	add	r3, pc, #380	; (adr r3, 800e6a0 <tune+0x2c0>)
 800e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e526:	f7f2 f867 	bl	80005f8 <__aeabi_dmul>
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	4614      	mov	r4, r2
 800e530:	461d      	mov	r5, r3
 800e532:	4b6a      	ldr	r3, [pc, #424]	; (800e6dc <tune+0x2fc>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4618      	mov	r0, r3
 800e538:	f7f2 f806 	bl	8000548 <__aeabi_f2d>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4620      	mov	r0, r4
 800e542:	4629      	mov	r1, r5
 800e544:	f7f1 fea2 	bl	800028c <__adddf3>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4610      	mov	r0, r2
 800e54e:	4619      	mov	r1, r3
 800e550:	f7f2 fb4a 	bl	8000be8 <__aeabi_d2f>
 800e554:	4603      	mov	r3, r0
 800e556:	4a61      	ldr	r2, [pc, #388]	; (800e6dc <tune+0x2fc>)
 800e558:	6013      	str	r3, [r2, #0]
			break;
 800e55a:	e1ad      	b.n	800e8b8 <tune+0x4d8>
		case 3:
			CP += ps4.joyR_y * 0.0001;
 800e55c:	4b52      	ldr	r3, [pc, #328]	; (800e6a8 <tune+0x2c8>)
 800e55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e560:	4618      	mov	r0, r3
 800e562:	f7f1 fff1 	bl	8000548 <__aeabi_f2d>
 800e566:	a34e      	add	r3, pc, #312	; (adr r3, 800e6a0 <tune+0x2c0>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	f7f2 f844 	bl	80005f8 <__aeabi_dmul>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4614      	mov	r4, r2
 800e576:	461d      	mov	r5, r3
 800e578:	4b59      	ldr	r3, [pc, #356]	; (800e6e0 <tune+0x300>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f1 ffe3 	bl	8000548 <__aeabi_f2d>
 800e582:	4602      	mov	r2, r0
 800e584:	460b      	mov	r3, r1
 800e586:	4620      	mov	r0, r4
 800e588:	4629      	mov	r1, r5
 800e58a:	f7f1 fe7f 	bl	800028c <__adddf3>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4610      	mov	r0, r2
 800e594:	4619      	mov	r1, r3
 800e596:	f7f2 fb27 	bl	8000be8 <__aeabi_d2f>
 800e59a:	4603      	mov	r3, r0
 800e59c:	4a50      	ldr	r2, [pc, #320]	; (800e6e0 <tune+0x300>)
 800e59e:	6013      	str	r3, [r2, #0]
			break;
 800e5a0:	e18a      	b.n	800e8b8 <tune+0x4d8>
		case 4:
			DP += ps4.joyR_y * 0.0001;
 800e5a2:	4b41      	ldr	r3, [pc, #260]	; (800e6a8 <tune+0x2c8>)
 800e5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f1 ffce 	bl	8000548 <__aeabi_f2d>
 800e5ac:	a33c      	add	r3, pc, #240	; (adr r3, 800e6a0 <tune+0x2c0>)
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	f7f2 f821 	bl	80005f8 <__aeabi_dmul>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4614      	mov	r4, r2
 800e5bc:	461d      	mov	r5, r3
 800e5be:	4b49      	ldr	r3, [pc, #292]	; (800e6e4 <tune+0x304>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7f1 ffc0 	bl	8000548 <__aeabi_f2d>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	f7f1 fe5c 	bl	800028c <__adddf3>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4619      	mov	r1, r3
 800e5dc:	f7f2 fb04 	bl	8000be8 <__aeabi_d2f>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	4a40      	ldr	r2, [pc, #256]	; (800e6e4 <tune+0x304>)
 800e5e4:	6013      	str	r3, [r2, #0]
			break;
 800e5e6:	e167      	b.n	800e8b8 <tune+0x4d8>
		}
	}
	else if(tune_i)
 800e5e8:	4b38      	ldr	r3, [pc, #224]	; (800e6cc <tune+0x2ec>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 80c5 	beq.w	800e77c <tune+0x39c>
	{
		switch(wheel)
 800e5f2:	4b38      	ldr	r3, [pc, #224]	; (800e6d4 <tune+0x2f4>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	f200 815d 	bhi.w	800e8b8 <tune+0x4d8>
 800e5fe:	a201      	add	r2, pc, #4	; (adr r2, 800e604 <tune+0x224>)
 800e600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e604:	0800e615 	.word	0x0800e615
 800e608:	0800e65b 	.word	0x0800e65b
 800e60c:	0800e6f1 	.word	0x0800e6f1
 800e610:	0800e737 	.word	0x0800e737
		{
		case 1:
			AI += ps4.joyR_y * 0.0001;
 800e614:	4b24      	ldr	r3, [pc, #144]	; (800e6a8 <tune+0x2c8>)
 800e616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e618:	4618      	mov	r0, r3
 800e61a:	f7f1 ff95 	bl	8000548 <__aeabi_f2d>
 800e61e:	a320      	add	r3, pc, #128	; (adr r3, 800e6a0 <tune+0x2c0>)
 800e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e624:	f7f1 ffe8 	bl	80005f8 <__aeabi_dmul>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4614      	mov	r4, r2
 800e62e:	461d      	mov	r5, r3
 800e630:	4b2d      	ldr	r3, [pc, #180]	; (800e6e8 <tune+0x308>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4618      	mov	r0, r3
 800e636:	f7f1 ff87 	bl	8000548 <__aeabi_f2d>
 800e63a:	4602      	mov	r2, r0
 800e63c:	460b      	mov	r3, r1
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f1 fe23 	bl	800028c <__adddf3>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4610      	mov	r0, r2
 800e64c:	4619      	mov	r1, r3
 800e64e:	f7f2 facb 	bl	8000be8 <__aeabi_d2f>
 800e652:	4603      	mov	r3, r0
 800e654:	4a24      	ldr	r2, [pc, #144]	; (800e6e8 <tune+0x308>)
 800e656:	6013      	str	r3, [r2, #0]
			break;
 800e658:	e12e      	b.n	800e8b8 <tune+0x4d8>
		case 2:
			BI += ps4.joyR_y * 0.0001;
 800e65a:	4b13      	ldr	r3, [pc, #76]	; (800e6a8 <tune+0x2c8>)
 800e65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e65e:	4618      	mov	r0, r3
 800e660:	f7f1 ff72 	bl	8000548 <__aeabi_f2d>
 800e664:	a30e      	add	r3, pc, #56	; (adr r3, 800e6a0 <tune+0x2c0>)
 800e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66a:	f7f1 ffc5 	bl	80005f8 <__aeabi_dmul>
 800e66e:	4602      	mov	r2, r0
 800e670:	460b      	mov	r3, r1
 800e672:	4614      	mov	r4, r2
 800e674:	461d      	mov	r5, r3
 800e676:	4b1d      	ldr	r3, [pc, #116]	; (800e6ec <tune+0x30c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7f1 ff64 	bl	8000548 <__aeabi_f2d>
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f1 fe00 	bl	800028c <__adddf3>
 800e68c:	4602      	mov	r2, r0
 800e68e:	460b      	mov	r3, r1
 800e690:	4610      	mov	r0, r2
 800e692:	4619      	mov	r1, r3
 800e694:	f7f2 faa8 	bl	8000be8 <__aeabi_d2f>
 800e698:	4603      	mov	r3, r0
 800e69a:	4a14      	ldr	r2, [pc, #80]	; (800e6ec <tune+0x30c>)
 800e69c:	6013      	str	r3, [r2, #0]
			break;
 800e69e:	e10b      	b.n	800e8b8 <tune+0x4d8>
 800e6a0:	eb1c432d 	.word	0xeb1c432d
 800e6a4:	3f1a36e2 	.word	0x3f1a36e2
 800e6a8:	2000a240 	.word	0x2000a240
 800e6ac:	20006a44 	.word	0x20006a44
 800e6b0:	20009e68 	.word	0x20009e68
 800e6b4:	20006c08 	.word	0x20006c08
 800e6b8:	20006654 	.word	0x20006654
 800e6bc:	2000a534 	.word	0x2000a534
 800e6c0:	2000a60c 	.word	0x2000a60c
 800e6c4:	2000a7c8 	.word	0x2000a7c8
 800e6c8:	20007490 	.word	0x20007490
 800e6cc:	20007324 	.word	0x20007324
 800e6d0:	20009a2c 	.word	0x20009a2c
 800e6d4:	200064f4 	.word	0x200064f4
 800e6d8:	2000a564 	.word	0x2000a564
 800e6dc:	200076cc 	.word	0x200076cc
 800e6e0:	2000988c 	.word	0x2000988c
 800e6e4:	20009fdc 	.word	0x20009fdc
 800e6e8:	2000731c 	.word	0x2000731c
 800e6ec:	200095b0 	.word	0x200095b0
		case 3:
			CI += ps4.joyR_y * 0.0001;
 800e6f0:	4b9b      	ldr	r3, [pc, #620]	; (800e960 <tune+0x580>)
 800e6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7f1 ff27 	bl	8000548 <__aeabi_f2d>
 800e6fa:	a395      	add	r3, pc, #596	; (adr r3, 800e950 <tune+0x570>)
 800e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e700:	f7f1 ff7a 	bl	80005f8 <__aeabi_dmul>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4614      	mov	r4, r2
 800e70a:	461d      	mov	r5, r3
 800e70c:	4b95      	ldr	r3, [pc, #596]	; (800e964 <tune+0x584>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4618      	mov	r0, r3
 800e712:	f7f1 ff19 	bl	8000548 <__aeabi_f2d>
 800e716:	4602      	mov	r2, r0
 800e718:	460b      	mov	r3, r1
 800e71a:	4620      	mov	r0, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	f7f1 fdb5 	bl	800028c <__adddf3>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4610      	mov	r0, r2
 800e728:	4619      	mov	r1, r3
 800e72a:	f7f2 fa5d 	bl	8000be8 <__aeabi_d2f>
 800e72e:	4603      	mov	r3, r0
 800e730:	4a8c      	ldr	r2, [pc, #560]	; (800e964 <tune+0x584>)
 800e732:	6013      	str	r3, [r2, #0]
			break;
 800e734:	e0c0      	b.n	800e8b8 <tune+0x4d8>
		case 4:
			DI += ps4.joyR_y * 0.0001;
 800e736:	4b8a      	ldr	r3, [pc, #552]	; (800e960 <tune+0x580>)
 800e738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7f1 ff04 	bl	8000548 <__aeabi_f2d>
 800e740:	a383      	add	r3, pc, #524	; (adr r3, 800e950 <tune+0x570>)
 800e742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e746:	f7f1 ff57 	bl	80005f8 <__aeabi_dmul>
 800e74a:	4602      	mov	r2, r0
 800e74c:	460b      	mov	r3, r1
 800e74e:	4614      	mov	r4, r2
 800e750:	461d      	mov	r5, r3
 800e752:	4b85      	ldr	r3, [pc, #532]	; (800e968 <tune+0x588>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4618      	mov	r0, r3
 800e758:	f7f1 fef6 	bl	8000548 <__aeabi_f2d>
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	4620      	mov	r0, r4
 800e762:	4629      	mov	r1, r5
 800e764:	f7f1 fd92 	bl	800028c <__adddf3>
 800e768:	4602      	mov	r2, r0
 800e76a:	460b      	mov	r3, r1
 800e76c:	4610      	mov	r0, r2
 800e76e:	4619      	mov	r1, r3
 800e770:	f7f2 fa3a 	bl	8000be8 <__aeabi_d2f>
 800e774:	4603      	mov	r3, r0
 800e776:	4a7c      	ldr	r2, [pc, #496]	; (800e968 <tune+0x588>)
 800e778:	6013      	str	r3, [r2, #0]
			break;
 800e77a:	e09d      	b.n	800e8b8 <tune+0x4d8>
		}
	}
	else
	{
		switch(wheel)
 800e77c:	4b7b      	ldr	r3, [pc, #492]	; (800e96c <tune+0x58c>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	3b01      	subs	r3, #1
 800e782:	2b03      	cmp	r3, #3
 800e784:	f200 8098 	bhi.w	800e8b8 <tune+0x4d8>
 800e788:	a201      	add	r2, pc, #4	; (adr r2, 800e790 <tune+0x3b0>)
 800e78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e78e:	bf00      	nop
 800e790:	0800e7a1 	.word	0x0800e7a1
 800e794:	0800e7e7 	.word	0x0800e7e7
 800e798:	0800e82d 	.word	0x0800e82d
 800e79c:	0800e873 	.word	0x0800e873
		{
		case 1:
			AD += ps4.joyR_y * 0.00001;
 800e7a0:	4b6f      	ldr	r3, [pc, #444]	; (800e960 <tune+0x580>)
 800e7a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7f1 fecf 	bl	8000548 <__aeabi_f2d>
 800e7aa:	a36b      	add	r3, pc, #428	; (adr r3, 800e958 <tune+0x578>)
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	f7f1 ff22 	bl	80005f8 <__aeabi_dmul>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	461d      	mov	r5, r3
 800e7bc:	4b6c      	ldr	r3, [pc, #432]	; (800e970 <tune+0x590>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7f1 fec1 	bl	8000548 <__aeabi_f2d>
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	f7f1 fd5d 	bl	800028c <__adddf3>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	4619      	mov	r1, r3
 800e7da:	f7f2 fa05 	bl	8000be8 <__aeabi_d2f>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	4a63      	ldr	r2, [pc, #396]	; (800e970 <tune+0x590>)
 800e7e2:	6013      	str	r3, [r2, #0]
			break;
 800e7e4:	e068      	b.n	800e8b8 <tune+0x4d8>
		case 2:
			BD += ps4.joyR_y * 0.00001;
 800e7e6:	4b5e      	ldr	r3, [pc, #376]	; (800e960 <tune+0x580>)
 800e7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7f1 feac 	bl	8000548 <__aeabi_f2d>
 800e7f0:	a359      	add	r3, pc, #356	; (adr r3, 800e958 <tune+0x578>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	f7f1 feff 	bl	80005f8 <__aeabi_dmul>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	4614      	mov	r4, r2
 800e800:	461d      	mov	r5, r3
 800e802:	4b5c      	ldr	r3, [pc, #368]	; (800e974 <tune+0x594>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4618      	mov	r0, r3
 800e808:	f7f1 fe9e 	bl	8000548 <__aeabi_f2d>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	4620      	mov	r0, r4
 800e812:	4629      	mov	r1, r5
 800e814:	f7f1 fd3a 	bl	800028c <__adddf3>
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4610      	mov	r0, r2
 800e81e:	4619      	mov	r1, r3
 800e820:	f7f2 f9e2 	bl	8000be8 <__aeabi_d2f>
 800e824:	4603      	mov	r3, r0
 800e826:	4a53      	ldr	r2, [pc, #332]	; (800e974 <tune+0x594>)
 800e828:	6013      	str	r3, [r2, #0]
			break;
 800e82a:	e045      	b.n	800e8b8 <tune+0x4d8>
		case 3:
			CD += ps4.joyR_y * 0.00001;
 800e82c:	4b4c      	ldr	r3, [pc, #304]	; (800e960 <tune+0x580>)
 800e82e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e830:	4618      	mov	r0, r3
 800e832:	f7f1 fe89 	bl	8000548 <__aeabi_f2d>
 800e836:	a348      	add	r3, pc, #288	; (adr r3, 800e958 <tune+0x578>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	f7f1 fedc 	bl	80005f8 <__aeabi_dmul>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4614      	mov	r4, r2
 800e846:	461d      	mov	r5, r3
 800e848:	4b4b      	ldr	r3, [pc, #300]	; (800e978 <tune+0x598>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f1 fe7b 	bl	8000548 <__aeabi_f2d>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4620      	mov	r0, r4
 800e858:	4629      	mov	r1, r5
 800e85a:	f7f1 fd17 	bl	800028c <__adddf3>
 800e85e:	4602      	mov	r2, r0
 800e860:	460b      	mov	r3, r1
 800e862:	4610      	mov	r0, r2
 800e864:	4619      	mov	r1, r3
 800e866:	f7f2 f9bf 	bl	8000be8 <__aeabi_d2f>
 800e86a:	4603      	mov	r3, r0
 800e86c:	4a42      	ldr	r2, [pc, #264]	; (800e978 <tune+0x598>)
 800e86e:	6013      	str	r3, [r2, #0]
			break;
 800e870:	e022      	b.n	800e8b8 <tune+0x4d8>
		case 4:
			DD += ps4.joyR_y * 0.00001;
 800e872:	4b3b      	ldr	r3, [pc, #236]	; (800e960 <tune+0x580>)
 800e874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e876:	4618      	mov	r0, r3
 800e878:	f7f1 fe66 	bl	8000548 <__aeabi_f2d>
 800e87c:	a336      	add	r3, pc, #216	; (adr r3, 800e958 <tune+0x578>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	f7f1 feb9 	bl	80005f8 <__aeabi_dmul>
 800e886:	4602      	mov	r2, r0
 800e888:	460b      	mov	r3, r1
 800e88a:	4614      	mov	r4, r2
 800e88c:	461d      	mov	r5, r3
 800e88e:	4b3b      	ldr	r3, [pc, #236]	; (800e97c <tune+0x59c>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4618      	mov	r0, r3
 800e894:	f7f1 fe58 	bl	8000548 <__aeabi_f2d>
 800e898:	4602      	mov	r2, r0
 800e89a:	460b      	mov	r3, r1
 800e89c:	4620      	mov	r0, r4
 800e89e:	4629      	mov	r1, r5
 800e8a0:	f7f1 fcf4 	bl	800028c <__adddf3>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	f7f2 f99c 	bl	8000be8 <__aeabi_d2f>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	4a32      	ldr	r2, [pc, #200]	; (800e97c <tune+0x59c>)
 800e8b4:	6013      	str	r3, [r2, #0]
			break;
 800e8b6:	bf00      	nop
		}
	}

	if(ps4.button == OPTION)
 800e8b8:	4b29      	ldr	r3, [pc, #164]	; (800e960 <tune+0x580>)
 800e8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8c0:	d105      	bne.n	800e8ce <tune+0x4ee>
	{
		while(ps4.button == OPTION);
 800e8c2:	bf00      	nop
 800e8c4:	4b26      	ldr	r3, [pc, #152]	; (800e960 <tune+0x580>)
 800e8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8cc:	d0fa      	beq.n	800e8c4 <tune+0x4e4>
//			BluePickLess = pick_enc_buf - pick_enc;
//		else
//			RedPickLess = pick_enc_buf - pick_enc;
	}

	if(ps4.button == TRIANGLE)
 800e8ce:	4b24      	ldr	r3, [pc, #144]	; (800e960 <tune+0x580>)
 800e8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8d6:	d128      	bne.n	800e92a <tune+0x54a>
	{
		while(ps4.button == TRIANGLE);
 800e8d8:	bf00      	nop
 800e8da:	4b21      	ldr	r3, [pc, #132]	; (800e960 <tune+0x580>)
 800e8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8e2:	d0fa      	beq.n	800e8da <tune+0x4fa>

		LoadRing();
 800e8e4:	f7ff fcda 	bl	800e29c <LoadRing>
		load_adjust = 1;
 800e8e8:	4b25      	ldr	r3, [pc, #148]	; (800e980 <tune+0x5a0>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
		picked_manual = 1;
 800e8ee:	4b25      	ldr	r3, [pc, #148]	; (800e984 <tune+0x5a4>)
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	601a      	str	r2, [r3, #0]
		adjust_servo;
 800e8f4:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e8f8:	4823      	ldr	r0, [pc, #140]	; (800e988 <tune+0x5a8>)
 800e8fa:	f7fc ff29 	bl	800b750 <ServoSetPulse>
 800e8fe:	f640 0166 	movw	r1, #2150	; 0x866
 800e902:	4822      	ldr	r0, [pc, #136]	; (800e98c <tune+0x5ac>)
 800e904:	f7fc ff24 	bl	800b750 <ServoSetPulse>
		cylinder_retract;
 800e908:	4a21      	ldr	r2, [pc, #132]	; (800e990 <tune+0x5b0>)
 800e90a:	7f13      	ldrb	r3, [r2, #28]
 800e90c:	f36f 1386 	bfc	r3, #6, #1
 800e910:	7713      	strb	r3, [r2, #28]
		AdjustRings();
 800e912:	f7ff fd09 	bl	800e328 <AdjustRings>
		adjust_servo;
 800e916:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e91a:	481b      	ldr	r0, [pc, #108]	; (800e988 <tune+0x5a8>)
 800e91c:	f7fc ff18 	bl	800b750 <ServoSetPulse>
 800e920:	f640 0166 	movw	r1, #2150	; 0x866
 800e924:	4819      	ldr	r0, [pc, #100]	; (800e98c <tune+0x5ac>)
 800e926:	f7fc ff13 	bl	800b750 <ServoSetPulse>
	}

	if(ps4.button == CROSS)
 800e92a:	4b0d      	ldr	r3, [pc, #52]	; (800e960 <tune+0x580>)
 800e92c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e932:	d105      	bne.n	800e940 <tune+0x560>
	{
		while(ps4.button == CROSS);
 800e934:	bf00      	nop
 800e936:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <tune+0x580>)
 800e938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e93a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e93e:	d0fa      	beq.n	800e936 <tune+0x556>
	}

	led9 = 1;
 800e940:	4a13      	ldr	r2, [pc, #76]	; (800e990 <tune+0x5b0>)
 800e942:	7e13      	ldrb	r3, [r2, #24]
 800e944:	f043 0310 	orr.w	r3, r3, #16
 800e948:	7613      	strb	r3, [r2, #24]
}
 800e94a:	bf00      	nop
 800e94c:	bdb0      	pop	{r4, r5, r7, pc}
 800e94e:	bf00      	nop
 800e950:	eb1c432d 	.word	0xeb1c432d
 800e954:	3f1a36e2 	.word	0x3f1a36e2
 800e958:	88e368f1 	.word	0x88e368f1
 800e95c:	3ee4f8b5 	.word	0x3ee4f8b5
 800e960:	2000a240 	.word	0x2000a240
 800e964:	20009a24 	.word	0x20009a24
 800e968:	20006a88 	.word	0x20006a88
 800e96c:	200064f4 	.word	0x200064f4
 800e970:	2000a540 	.word	0x2000a540
 800e974:	20007318 	.word	0x20007318
 800e978:	200064f8 	.word	0x200064f8
 800e97c:	20009cf8 	.word	0x20009cf8
 800e980:	200095bc 	.word	0x200095bc
 800e984:	200096c0 	.word	0x200096c0
 800e988:	200079d8 	.word	0x200079d8
 800e98c:	2000a5e8 	.word	0x2000a5e8
 800e990:	200097d4 	.word	0x200097d4

0800e994 <flywheelStop>:
	VESCPDC(leftU / 19999.00, &vesc1);
	VESCPDC(rightU / 19999.00, &vesc2);
}

void flywheelStop()
{
 800e994:	b580      	push	{r7, lr}
 800e996:	af00      	add	r7, sp, #0
	vesc_speed = 0;
 800e998:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <flywheelStop+0x38>)
 800e99a:	f04f 0200 	mov.w	r2, #0
 800e99e:	601a      	str	r2, [r3, #0]

	PIDDelayInit(&left_PID);
 800e9a0:	480b      	ldr	r0, [pc, #44]	; (800e9d0 <flywheelStop+0x3c>)
 800e9a2:	f7f6 fe72 	bl	800568a <PIDDelayInit>
	PIDDelayInit(&right_PID);
 800e9a6:	480b      	ldr	r0, [pc, #44]	; (800e9d4 <flywheelStop+0x40>)
 800e9a8:	f7f6 fe6f 	bl	800568a <PIDDelayInit>

	leftU = 0;
 800e9ac:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <flywheelStop+0x44>)
 800e9ae:	f04f 0200 	mov.w	r2, #0
 800e9b2:	601a      	str	r2, [r3, #0]
	rightU = 0;
 800e9b4:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <flywheelStop+0x48>)
 800e9b6:	f04f 0200 	mov.w	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]

	VESCStop(&vesc1);
 800e9bc:	4808      	ldr	r0, [pc, #32]	; (800e9e0 <flywheelStop+0x4c>)
 800e9be:	f000 fe6b 	bl	800f698 <VESCStop>
	VESCStop(&vesc2);
 800e9c2:	4808      	ldr	r0, [pc, #32]	; (800e9e4 <flywheelStop+0x50>)
 800e9c4:	f000 fe68 	bl	800f698 <VESCStop>
}
 800e9c8:	bf00      	nop
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	200065b8 	.word	0x200065b8
 800e9d0:	20009020 	.word	0x20009020
 800e9d4:	2000a184 	.word	0x2000a184
 800e9d8:	200068a4 	.word	0x200068a4
 800e9dc:	20006b28 	.word	0x20006b28
 800e9e0:	20006b2c 	.word	0x20006b2c
 800e9e4:	20009b9c 	.word	0x20009b9c

0800e9e8 <Shot>:

void Shot()
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
	push_shoot;
 800e9ec:	f644 611f 	movw	r1, #19999	; 0x4e1f
 800e9f0:	4805      	ldr	r0, [pc, #20]	; (800ea08 <Shot+0x20>)
 800e9f2:	f7f2 fbca 	bl	800118a <WriteBDC>
	shoot_start = 1;
 800e9f6:	4b05      	ldr	r3, [pc, #20]	; (800ea0c <Shot+0x24>)
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]
	wait_load = 1;
 800e9fc:	4b04      	ldr	r3, [pc, #16]	; (800ea10 <Shot+0x28>)
 800e9fe:	2201      	movs	r2, #1
 800ea00:	601a      	str	r2, [r3, #0]
}
 800ea02:	bf00      	nop
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	20009894 	.word	0x20009894
 800ea0c:	2000944c 	.word	0x2000944c
 800ea10:	2000759c 	.word	0x2000759c

0800ea14 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800ea18:	4802      	ldr	r0, [pc, #8]	; (800ea24 <DMA1_Stream0_IRQHandler+0x10>)
 800ea1a:	f008 fc81 	bl	8017320 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800ea1e:	bf00      	nop
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	2000a1d8 	.word	0x2000a1d8

0800ea28 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800ea2c:	4802      	ldr	r0, [pc, #8]	; (800ea38 <DMA1_Stream3_IRQHandler+0x10>)
 800ea2e:	f008 fc77 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800ea32:	bf00      	nop
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20006558 	.word	0x20006558

0800ea3c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800ea40:	4802      	ldr	r0, [pc, #8]	; (800ea4c <DMA1_Stream2_IRQHandler+0x10>)
 800ea42:	f008 fc6d 	bl	8017320 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800ea46:	bf00      	nop
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	20005a18 	.word	0x20005a18

0800ea50 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800ea54:	4802      	ldr	r0, [pc, #8]	; (800ea60 <DMA1_Stream1_IRQHandler+0x10>)
 800ea56:	f008 fc63 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800ea5a:	bf00      	nop
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20005b5c 	.word	0x20005b5c

0800ea64 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ea68:	4802      	ldr	r0, [pc, #8]	; (800ea74 <DMA1_Stream4_IRQHandler+0x10>)
 800ea6a:	f008 fc59 	bl	8017320 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800ea6e:	bf00      	nop
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	200061d0 	.word	0x200061d0

0800ea78 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ea7c:	4802      	ldr	r0, [pc, #8]	; (800ea88 <DMA1_Stream5_IRQHandler+0x10>)
 800ea7e:	f008 fc4f 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800ea82:	bf00      	nop
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	20005a78 	.word	0x20005a78

0800ea8c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800ea90:	4802      	ldr	r0, [pc, #8]	; (800ea9c <DMA1_Stream6_IRQHandler+0x10>)
 800ea92:	f008 fc45 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800ea96:	bf00      	nop
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20005d64 	.word	0x20005d64

0800eaa0 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800eaa4:	4802      	ldr	r0, [pc, #8]	; (800eab0 <DMA1_Stream7_IRQHandler+0x10>)
 800eaa6:	f008 fc3b 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800eaaa:	bf00      	nop
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20006230 	.word	0x20006230

0800eab4 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800eab8:	4802      	ldr	r0, [pc, #8]	; (800eac4 <DMA2_Stream0_IRQHandler+0x10>)
 800eaba:	f008 fc31 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800eabe:	bf00      	nop
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	200063e4 	.word	0x200063e4

0800eac8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800eacc:	4802      	ldr	r0, [pc, #8]	; (800ead8 <DMA2_Stream1_IRQHandler+0x10>)
 800eace:	f008 fc27 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800ead2:	bf00      	nop
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	200062d8 	.word	0x200062d8

0800eadc <DMA2_Stream3_IRQHandler>:
//{
//	HAL_DMA_IRQHandler(&hdma_spi1_rx);
//}

void DMA2_Stream3_IRQHandler(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800eae0:	4802      	ldr	r0, [pc, #8]	; (800eaec <DMA2_Stream3_IRQHandler+0x10>)
 800eae2:	f008 fc1d 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800eae6:	bf00      	nop
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	20006444 	.word	0x20006444

0800eaf0 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800eaf4:	4802      	ldr	r0, [pc, #8]	; (800eb00 <DMA2_Stream5_IRQHandler+0x10>)
 800eaf6:	f008 fc13 	bl	8017320 <HAL_DMA_IRQHandler>
}
 800eafa:	bf00      	nop
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	2000a56c 	.word	0x2000a56c

0800eb04 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800eb04:	b480      	push	{r7}
 800eb06:	af00      	add	r7, sp, #0

}
 800eb08:	bf00      	nop
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800eb12:	b480      	push	{r7}
 800eb14:	af00      	add	r7, sp, #0

}
 800eb16:	bf00      	nop
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800eb20:	b480      	push	{r7}
 800eb22:	af00      	add	r7, sp, #0

	while(1){
 800eb24:	e7fe      	b.n	800eb24 <MemManage_Handler+0x4>

0800eb26 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800eb26:	b480      	push	{r7}
 800eb28:	af00      	add	r7, sp, #0

}
 800eb2a:	bf00      	nop
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800eb34:	b480      	push	{r7}
 800eb36:	af00      	add	r7, sp, #0

}
 800eb38:	bf00      	nop
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb40:	4770      	bx	lr

0800eb42 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800eb42:	b480      	push	{r7}
 800eb44:	af00      	add	r7, sp, #0

}
 800eb46:	bf00      	nop
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4e:	4770      	bx	lr

0800eb50 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800eb54:	4b14      	ldr	r3, [pc, #80]	; (800eba8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2b81      	cmp	r3, #129	; 0x81
 800eb5c:	d109      	bne.n	800eb72 <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800eb60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	3301      	adds	r3, #1
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	b21a      	sxth	r2, r3
 800eb6c:	4b0f      	ldr	r3, [pc, #60]	; (800ebac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800eb6e:	805a      	strh	r2, [r3, #2]
 800eb70:	e00d      	b.n	800eb8e <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800eb72:	4b0d      	ldr	r3, [pc, #52]	; (800eba8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	2b91      	cmp	r3, #145	; 0x91
 800eb7a:	d108      	bne.n	800eb8e <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800eb7c:	4b0b      	ldr	r3, [pc, #44]	; (800ebac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800eb7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	3b01      	subs	r3, #1
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	b21a      	sxth	r2, r3
 800eb8a:	4b08      	ldr	r3, [pc, #32]	; (800ebac <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800eb8c:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800eb8e:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2200      	movs	r2, #0
 800eb94:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800eb96:	20c8      	movs	r0, #200	; 0xc8
 800eb98:	f7f3 f87c 	bl	8001c94 <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
	HAL_TIM_IRQHandler(&htim10);
 800eb9c:	4804      	ldr	r0, [pc, #16]	; (800ebb0 <TIM1_UP_TIM10_IRQHandler+0x60>)
 800eb9e:	f00c f8c3 	bl	801ad28 <HAL_TIM_IRQHandler>
	return;
 800eba2:	bf00      	nop
}
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20005f2c 	.word	0x20005f2c
 800ebac:	200064a8 	.word	0x200064a8
 800ebb0:	20005bfc 	.word	0x20005bfc

0800ebb4 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800ebb8:	4b12      	ldr	r3, [pc, #72]	; (800ec04 <TIM4_IRQHandler+0x50>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b81      	cmp	r3, #129	; 0x81
 800ebc0:	d109      	bne.n	800ebd6 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800ebc2:	4b11      	ldr	r3, [pc, #68]	; (800ec08 <TIM4_IRQHandler+0x54>)
 800ebc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	3301      	adds	r3, #1
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	b21a      	sxth	r2, r3
 800ebd0:	4b0d      	ldr	r3, [pc, #52]	; (800ec08 <TIM4_IRQHandler+0x54>)
 800ebd2:	805a      	strh	r2, [r3, #2]
 800ebd4:	e00d      	b.n	800ebf2 <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800ebd6:	4b0b      	ldr	r3, [pc, #44]	; (800ec04 <TIM4_IRQHandler+0x50>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b91      	cmp	r3, #145	; 0x91
 800ebde:	d108      	bne.n	800ebf2 <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <TIM4_IRQHandler+0x54>)
 800ebe2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	b21a      	sxth	r2, r3
 800ebee:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <TIM4_IRQHandler+0x54>)
 800ebf0:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800ebf2:	4b04      	ldr	r3, [pc, #16]	; (800ec04 <TIM4_IRQHandler+0x50>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800ebfa:	2064      	movs	r0, #100	; 0x64
 800ebfc:	f7f3 f84a 	bl	8001c94 <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800ec00:	bf00      	nop
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20005b1c 	.word	0x20005b1c
 800ec08:	200064cc 	.word	0x200064cc

0800ec0c <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800ec10:	4803      	ldr	r0, [pc, #12]	; (800ec20 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800ec12:	f00c f889 	bl	801ad28 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800ec16:	4803      	ldr	r0, [pc, #12]	; (800ec24 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800ec18:	f00c f886 	bl	801ad28 <HAL_TIM_IRQHandler>
	return;
 800ec1c:	bf00      	nop
}
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20005adc 	.word	0x20005adc
 800ec24:	20005dc4 	.word	0x20005dc4

0800ec28 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800ec2c:	4802      	ldr	r0, [pc, #8]	; (800ec38 <TIM2_IRQHandler+0x10>)
 800ec2e:	f00c f87b 	bl	801ad28 <HAL_TIM_IRQHandler>
}
 800ec32:	bf00      	nop
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	20006030 	.word	0x20006030

0800ec3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec4c:	d109      	bne.n	800ec62 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800ec4e:	f007 f9f3 	bl	8016038 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800ec52:	4806      	ldr	r0, [pc, #24]	; (800ec6c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800ec54:	f7f3 f8e9 	bl	8001e2a <SHIFTREGShift>
		counter++;
 800ec58:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	4a04      	ldr	r2, [pc, #16]	; (800ec70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800ec60:	6013      	str	r3, [r2, #0]
	}
}
 800ec62:	bf00      	nop
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	200097d4 	.word	0x200097d4
 800ec70:	20009910 	.word	0x20009910

0800ec74 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800ec7c:	4b05      	ldr	r3, [pc, #20]	; (800ec94 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800ec7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d102      	bne.n	800ec8c <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800ec86:	4803      	ldr	r0, [pc, #12]	; (800ec94 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800ec88:	f7fb fc68 	bl	800a55c <PSxConnectDMA>

//	if(hi2c == PITCH_IMU.hi2cimu)
//	{
//		IMU_I2CHandle(&PITCH_IMU);
//	}
}
 800ec8c:	bf00      	nop
 800ec8e:	3708      	adds	r7, #8
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	2000a240 	.word	0x2000a240

0800ec98 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800ec9c:	4802      	ldr	r0, [pc, #8]	; (800eca8 <I2C1_EV_IRQHandler+0x10>)
 800ec9e:	f009 fb17 	bl	80182d0 <HAL_I2C_EV_IRQHandler>

}
 800eca2:	bf00      	nop
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	20006bb0 	.word	0x20006bb0

0800ecac <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800ecb0:	480a      	ldr	r0, [pc, #40]	; (800ecdc <I2C1_ER_IRQHandler+0x30>)
 800ecb2:	f009 fc7a 	bl	80185aa <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800ecb6:	480a      	ldr	r0, [pc, #40]	; (800ece0 <I2C1_ER_IRQHandler+0x34>)
 800ecb8:	f008 fa5a 	bl	8017170 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800ecbc:	4807      	ldr	r0, [pc, #28]	; (800ecdc <I2C1_ER_IRQHandler+0x30>)
 800ecbe:	f009 f9c1 	bl	8018044 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800ecc2:	4b08      	ldr	r3, [pc, #32]	; (800ece4 <I2C1_ER_IRQHandler+0x38>)
 800ecc4:	2208      	movs	r2, #8
 800ecc6:	4906      	ldr	r1, [pc, #24]	; (800ece0 <I2C1_ER_IRQHandler+0x34>)
 800ecc8:	4804      	ldr	r0, [pc, #16]	; (800ecdc <I2C1_ER_IRQHandler+0x30>)
 800ecca:	f7f4 ffcb 	bl	8003c64 <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800ecce:	4903      	ldr	r1, [pc, #12]	; (800ecdc <I2C1_ER_IRQHandler+0x30>)
 800ecd0:	4805      	ldr	r0, [pc, #20]	; (800ece8 <I2C1_ER_IRQHandler+0x3c>)
 800ecd2:	f7fb fc56 	bl	800a582 <PSxInitDMA>

}
 800ecd6:	bf00      	nop
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20006bb0 	.word	0x20006bb0
 800ece0:	2000a1d8 	.word	0x2000a1d8
 800ece4:	00061a80 	.word	0x00061a80
 800ece8:	2000a240 	.word	0x2000a240

0800ecec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b08c      	sub	sp, #48	; 0x30
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	6879      	ldr	r1, [r7, #4]
 800ed00:	201c      	movs	r0, #28
 800ed02:	f008 f941 	bl	8016f88 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ed06:	201c      	movs	r0, #28
 800ed08:	f008 f95a 	bl	8016fc0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	4b20      	ldr	r3, [pc, #128]	; (800ed94 <HAL_InitTick+0xa8>)
 800ed12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed14:	4a1f      	ldr	r2, [pc, #124]	; (800ed94 <HAL_InitTick+0xa8>)
 800ed16:	f043 0301 	orr.w	r3, r3, #1
 800ed1a:	6413      	str	r3, [r2, #64]	; 0x40
 800ed1c:	4b1d      	ldr	r3, [pc, #116]	; (800ed94 <HAL_InitTick+0xa8>)
 800ed1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ed28:	f107 0210 	add.w	r2, r7, #16
 800ed2c:	f107 0314 	add.w	r3, r7, #20
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f00b fd02 	bl	801a73c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ed38:	f00b fcd8 	bl	801a6ec <HAL_RCC_GetPCLK1Freq>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	005b      	lsls	r3, r3, #1
 800ed40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	4a14      	ldr	r2, [pc, #80]	; (800ed98 <HAL_InitTick+0xac>)
 800ed46:	fba2 2303 	umull	r2, r3, r2, r3
 800ed4a:	0c9b      	lsrs	r3, r3, #18
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800ed50:	4b12      	ldr	r3, [pc, #72]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800ed58:	4b10      	ldr	r3, [pc, #64]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ed5e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ed60:	4a0e      	ldr	r2, [pc, #56]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ed66:	4b0d      	ldr	r3, [pc, #52]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed6c:	4b0b      	ldr	r3, [pc, #44]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ed72:	480a      	ldr	r0, [pc, #40]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed74:	f00b fe32 	bl	801a9dc <HAL_TIM_Base_Init>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d104      	bne.n	800ed88 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ed7e:	4807      	ldr	r0, [pc, #28]	; (800ed9c <HAL_InitTick+0xb0>)
 800ed80:	f00b fe7b 	bl	801aa7a <HAL_TIM_Base_Start_IT>
 800ed84:	4603      	mov	r3, r0
 800ed86:	e000      	b.n	800ed8a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800ed88:	2301      	movs	r3, #1
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3730      	adds	r7, #48	; 0x30
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	40023800 	.word	0x40023800
 800ed98:	431bde83 	.word	0x431bde83
 800ed9c:	20006030 	.word	0x20006030

0800eda0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
	return 1;
 800eda4:	2301      	movs	r3, #1
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <_kill>:

int _kill(int pid, int sig)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800edba:	f010 faff 	bl	801f3bc <__errno>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2216      	movs	r2, #22
 800edc2:	601a      	str	r2, [r3, #0]
	return -1;
 800edc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <_exit>:

void _exit (int status)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800edd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff ffe7 	bl	800edb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ede2:	e7fe      	b.n	800ede2 <_exit+0x12>

0800ede4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	60b9      	str	r1, [r7, #8]
 800edee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edf0:	2300      	movs	r3, #0
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	e00a      	b.n	800ee0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800edf6:	f3af 8000 	nop.w
 800edfa:	4601      	mov	r1, r0
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	1c5a      	adds	r2, r3, #1
 800ee00:	60ba      	str	r2, [r7, #8]
 800ee02:	b2ca      	uxtb	r2, r1
 800ee04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	697a      	ldr	r2, [r7, #20]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	dbf0      	blt.n	800edf6 <_read+0x12>
	}

return len;
 800ee14:	687b      	ldr	r3, [r7, #4]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	60f8      	str	r0, [r7, #12]
 800ee26:	60b9      	str	r1, [r7, #8]
 800ee28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	617b      	str	r3, [r7, #20]
 800ee2e:	e009      	b.n	800ee44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	1c5a      	adds	r2, r3, #1
 800ee34:	60ba      	str	r2, [r7, #8]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	3301      	adds	r3, #1
 800ee42:	617b      	str	r3, [r7, #20]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	dbf1      	blt.n	800ee30 <_write+0x12>
	}
	return len;
 800ee4c:	687b      	ldr	r3, [r7, #4]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <_close>:

int _close(int file)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b083      	sub	sp, #12
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
	return -1;
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	370c      	adds	r7, #12
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr

0800ee6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	b083      	sub	sp, #12
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ee7e:	605a      	str	r2, [r3, #4]
	return 0;
 800ee80:	2300      	movs	r3, #0
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	370c      	adds	r7, #12
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr

0800ee8e <_isatty>:

int _isatty(int file)
{
 800ee8e:	b480      	push	{r7}
 800ee90:	b083      	sub	sp, #12
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
	return 1;
 800ee96:	2301      	movs	r3, #1
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr

0800eea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
	return 0;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
	...

0800eec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800eec8:	4a14      	ldr	r2, [pc, #80]	; (800ef1c <_sbrk+0x5c>)
 800eeca:	4b15      	ldr	r3, [pc, #84]	; (800ef20 <_sbrk+0x60>)
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eed4:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <_sbrk+0x64>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eedc:	4b11      	ldr	r3, [pc, #68]	; (800ef24 <_sbrk+0x64>)
 800eede:	4a12      	ldr	r2, [pc, #72]	; (800ef28 <_sbrk+0x68>)
 800eee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eee2:	4b10      	ldr	r3, [pc, #64]	; (800ef24 <_sbrk+0x64>)
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4413      	add	r3, r2
 800eeea:	693a      	ldr	r2, [r7, #16]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d207      	bcs.n	800ef00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800eef0:	f010 fa64 	bl	801f3bc <__errno>
 800eef4:	4603      	mov	r3, r0
 800eef6:	220c      	movs	r2, #12
 800eef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800eefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eefe:	e009      	b.n	800ef14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ef00:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <_sbrk+0x64>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ef06:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <_sbrk+0x64>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	4a05      	ldr	r2, [pc, #20]	; (800ef24 <_sbrk+0x64>)
 800ef10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ef12:	68fb      	ldr	r3, [r7, #12]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	20020000 	.word	0x20020000
 800ef20:	00000400 	.word	0x00000400
 800ef24:	200002e0 	.word	0x200002e0
 800ef28:	2000a960 	.word	0x2000a960

0800ef2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ef30:	4b08      	ldr	r3, [pc, #32]	; (800ef54 <SystemInit+0x28>)
 800ef32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef36:	4a07      	ldr	r2, [pc, #28]	; (800ef54 <SystemInit+0x28>)
 800ef38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ef40:	4b04      	ldr	r3, [pc, #16]	; (800ef54 <SystemInit+0x28>)
 800ef42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ef46:	609a      	str	r2, [r3, #8]
#endif
}
 800ef48:	bf00      	nop
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	e000ed00 	.word	0xe000ed00

0800ef58 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
	send_func = func;
 800ef60:	4a04      	ldr	r2, [pc, #16]	; (800ef74 <bldc_interface_init+0x1c>)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6013      	str	r3, [r2, #0]
}
 800ef66:	bf00      	nop
 800ef68:	370c      	adds	r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	200002e4 	.word	0x200002e4

0800ef78 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	1618      	asrs	r0, r3, #24
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	1c59      	adds	r1, r3, #1
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	6011      	str	r1, [r2, #0]
 800ef92:	461a      	mov	r2, r3
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	b2c2      	uxtb	r2, r0
 800ef9a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	1418      	asrs	r0, r3, #16
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	1c59      	adds	r1, r3, #1
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	6011      	str	r1, [r2, #0]
 800efaa:	461a      	mov	r2, r3
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	4413      	add	r3, r2
 800efb0:	b2c2      	uxtb	r2, r0
 800efb2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	1218      	asrs	r0, r3, #8
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	1c59      	adds	r1, r3, #1
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	6011      	str	r1, [r2, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	4413      	add	r3, r2
 800efc8:	b2c2      	uxtb	r2, r0
 800efca:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	1c59      	adds	r1, r3, #1
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	6011      	str	r1, [r2, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	b2d2      	uxtb	r2, r2
 800efe0:	701a      	strb	r2, [r3, #0]
}
 800efe2:	bf00      	nop
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr

0800efee <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 800efee:	b480      	push	{r7}
 800eff0:	b085      	sub	sp, #20
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
 800eff6:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4413      	add	r3, r2
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	021b      	lsls	r3, r3, #8
 800f006:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	3301      	adds	r3, #1
 800f00e:	6879      	ldr	r1, [r7, #4]
 800f010:	440b      	add	r3, r1
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800f016:	4313      	orrs	r3, r2
 800f018:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	1c9a      	adds	r2, r3, #2
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	601a      	str	r2, [r3, #0]
	return res;
 800f024:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <buffer_get_int32>:
					((uint16_t) buffer[*index + 1]);
	*index += 2;
	return res;
}

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4413      	add	r3, r2
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	3301      	adds	r3, #1
 800f052:	6879      	ldr	r1, [r7, #4]
 800f054:	440b      	add	r3, r1
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800f05a:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	3302      	adds	r3, #2
 800f062:	6879      	ldr	r1, [r7, #4]
 800f064:	440b      	add	r3, r1
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 800f06a:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800f06c:	683a      	ldr	r2, [r7, #0]
 800f06e:	6812      	ldr	r2, [r2, #0]
 800f070:	3203      	adds	r2, #3
 800f072:	6879      	ldr	r1, [r7, #4]
 800f074:	440a      	add	r2, r1
 800f076:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 800f078:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800f07a:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	1d1a      	adds	r2, r3, #4
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	601a      	str	r2, [r3, #0]
	return res;
 800f086:	68fb      	ldr	r3, [r7, #12]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f0a0:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f7ff ffa2 	bl	800efee <buffer_get_int16>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	ee07 3a90 	vmov	s15, r3
 800f0b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0b4:	edd7 7a02 	vldr	s15, [r7, #8]
 800f0b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0bc:	eef0 7a66 	vmov.f32	s15, s13
}
 800f0c0:	eeb0 0a67 	vmov.f32	s0, s15
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	ed87 0a02 	vstr	s0, [r7, #8]
 800f0d6:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f7ff ffaa 	bl	800f034 <buffer_get_int32>
 800f0e0:	ee07 0a90 	vmov	s15, r0
 800f0e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0e8:	edd7 7a02 	vldr	s15, [r7, #8]
 800f0ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f0f0:	eef0 7a66 	vmov.f32	s15, s13
}
 800f0f4:	eeb0 0a67 	vmov.f32	s0, s15
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800f10e:	2300      	movs	r3, #0
 800f110:	60fb      	str	r3, [r7, #12]
 800f112:	e016      	b.n	800f142 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 800f114:	897b      	ldrh	r3, [r7, #10]
 800f116:	0a1b      	lsrs	r3, r3, #8
 800f118:	b29b      	uxth	r3, r3
 800f11a:	4619      	mov	r1, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	1c5a      	adds	r2, r3, #1
 800f120:	607a      	str	r2, [r7, #4]
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	404b      	eors	r3, r1
 800f126:	b2db      	uxtb	r3, r3
 800f128:	4a0b      	ldr	r2, [pc, #44]	; (800f158 <crc16+0x58>)
 800f12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f12e:	b21a      	sxth	r2, r3
 800f130:	897b      	ldrh	r3, [r7, #10]
 800f132:	021b      	lsls	r3, r3, #8
 800f134:	b21b      	sxth	r3, r3
 800f136:	4053      	eors	r3, r2
 800f138:	b21b      	sxth	r3, r3
 800f13a:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3301      	adds	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d3e4      	bcc.n	800f114 <crc16+0x14>
	}
	return cksum;
 800f14a:	897b      	ldrh	r3, [r7, #10]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	08025b40 	.word	0x08025b40

0800f15c <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b08e      	sub	sp, #56	; 0x38
 800f160:	af00      	add	r7, sp, #0
 800f162:	60b9      	str	r1, [r7, #8]
 800f164:	607a      	str	r2, [r7, #4]
 800f166:	461a      	mov	r2, r3
 800f168:	4603      	mov	r3, r0
 800f16a:	73fb      	strb	r3, [r7, #15]
 800f16c:	4613      	mov	r3, r2
 800f16e:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b06      	cmp	r3, #6
 800f174:	d82b      	bhi.n	800f1ce <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	1c5a      	adds	r2, r3, #1
 800f17e:	61ba      	str	r2, [r7, #24]
 800f180:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f184:	4413      	add	r3, r2
 800f186:	221e      	movs	r2, #30
 800f188:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	1c5a      	adds	r2, r3, #1
 800f190:	61ba      	str	r2, [r7, #24]
 800f192:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f196:	4413      	add	r3, r2
 800f198:	7bba      	ldrb	r2, [r7, #14]
 800f19a:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 800f19e:	f107 0210 	add.w	r2, r7, #16
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	68b9      	ldr	r1, [r7, #8]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f010 f938 	bl	801f420 <memcpy>
		ind += len;
 800f1b0:	69ba      	ldr	r2, [r7, #24]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
					((uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER << 8), send_buffer, ind);
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ba:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	f107 0210 	add.w	r2, r7, #16
 800f1c6:	4872      	ldr	r0, [pc, #456]	; (800f390 <comm_can_send_buffer+0x234>)
 800f1c8:	f7f4 fb2e 	bl	8003828 <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 800f1cc:	e0dc      	b.n	800f388 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	633b      	str	r3, [r7, #48]	; 0x30
 800f1d6:	e03d      	b.n	800f254 <comm_can_send_buffer+0xf8>
			if (i > 255) {
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1da:	2bff      	cmp	r3, #255	; 0xff
 800f1dc:	d83f      	bhi.n	800f25e <comm_can_send_buffer+0x102>
			end_a = i + 7;
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	3307      	adds	r3, #7
 800f1e2:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800f1e4:	2307      	movs	r3, #7
 800f1e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 800f1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f2:	3307      	adds	r3, #7
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d30b      	bcc.n	800f212 <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 800f1fa:	f107 0310 	add.w	r3, r7, #16
 800f1fe:	3301      	adds	r3, #1
 800f200:	68b9      	ldr	r1, [r7, #8]
 800f202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f204:	4411      	add	r1, r2
 800f206:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f20a:	4618      	mov	r0, r3
 800f20c:	f010 f908 	bl	801f420 <memcpy>
 800f210:	e011      	b.n	800f236 <comm_can_send_buffer+0xda>
				send_len = len - i;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	b2da      	uxtb	r2, r3
 800f216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 800f220:	f107 0310 	add.w	r3, r7, #16
 800f224:	3301      	adds	r3, #1
 800f226:	68b9      	ldr	r1, [r7, #8]
 800f228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f22a:	4411      	add	r1, r2
 800f22c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f230:	4618      	mov	r0, r3
 800f232:	f010 f8f5 	bl	801f420 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800f236:	7bfb      	ldrb	r3, [r7, #15]
 800f238:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 800f23c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f240:	3301      	adds	r3, #1
 800f242:	b2db      	uxtb	r3, r3
 800f244:	f107 0210 	add.w	r2, r7, #16
 800f248:	4851      	ldr	r0, [pc, #324]	; (800f390 <comm_can_send_buffer+0x234>)
 800f24a:	f7f4 faed 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 800f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f250:	3307      	adds	r3, #7
 800f252:	633b      	str	r3, [r7, #48]	; 0x30
 800f254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d3bd      	bcc.n	800f1d8 <comm_can_send_buffer+0x7c>
 800f25c:	e000      	b.n	800f260 <comm_can_send_buffer+0x104>
				break;
 800f25e:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 800f260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f262:	62bb      	str	r3, [r7, #40]	; 0x28
 800f264:	e03b      	b.n	800f2de <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800f266:	2306      	movs	r3, #6
 800f268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 800f26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26e:	0a1b      	lsrs	r3, r3, #8
 800f270:	b2db      	uxtb	r3, r3
 800f272:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	b2db      	uxtb	r3, r3
 800f278:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 800f27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27c:	3306      	adds	r3, #6
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	d30b      	bcc.n	800f29c <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800f284:	f107 0310 	add.w	r3, r7, #16
 800f288:	3302      	adds	r3, #2
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f28e:	4411      	add	r1, r2
 800f290:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f294:	4618      	mov	r0, r3
 800f296:	f010 f8c3 	bl	801f420 <memcpy>
 800f29a:	e011      	b.n	800f2c0 <comm_can_send_buffer+0x164>
				send_len = len - i;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	b2da      	uxtb	r2, r3
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 800f2aa:	f107 0310 	add.w	r3, r7, #16
 800f2ae:	3302      	adds	r3, #2
 800f2b0:	68b9      	ldr	r1, [r7, #8]
 800f2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2b4:	4411      	add	r1, r2
 800f2b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f010 f8b0 	bl	801f420 <memcpy>
			CAN_TxMsgEID(&hcan2, controller_id |
 800f2c0:	7bfb      	ldrb	r3, [r7, #15]
 800f2c2:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800f2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2ca:	3302      	adds	r3, #2
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	f107 0210 	add.w	r2, r7, #16
 800f2d2:	482f      	ldr	r0, [pc, #188]	; (800f390 <comm_can_send_buffer+0x234>)
 800f2d4:	f7f4 faa8 	bl	8003828 <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	3306      	adds	r3, #6
 800f2dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d3bf      	bcc.n	800f266 <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 800f2ea:	6a3b      	ldr	r3, [r7, #32]
 800f2ec:	1c5a      	adds	r2, r3, #1
 800f2ee:	623a      	str	r2, [r7, #32]
 800f2f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f2f4:	4413      	add	r3, r2
 800f2f6:	221e      	movs	r2, #30
 800f2f8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	1c5a      	adds	r2, r3, #1
 800f300:	623a      	str	r2, [r7, #32]
 800f302:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f306:	4413      	add	r3, r2
 800f308:	7bba      	ldrb	r2, [r7, #14]
 800f30a:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	0a19      	lsrs	r1, r3, #8
 800f312:	6a3b      	ldr	r3, [r7, #32]
 800f314:	1c5a      	adds	r2, r3, #1
 800f316:	623a      	str	r2, [r7, #32]
 800f318:	b2ca      	uxtb	r2, r1
 800f31a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f31e:	440b      	add	r3, r1
 800f320:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 800f324:	6a3b      	ldr	r3, [r7, #32]
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	623a      	str	r2, [r7, #32]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	b2d2      	uxtb	r2, r2
 800f32e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f332:	440b      	add	r3, r1
 800f334:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 800f338:	6879      	ldr	r1, [r7, #4]
 800f33a:	68b8      	ldr	r0, [r7, #8]
 800f33c:	f7ff fee0 	bl	800f100 <crc16>
 800f340:	4603      	mov	r3, r0
 800f342:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800f344:	8bfb      	ldrh	r3, [r7, #30]
 800f346:	0a1b      	lsrs	r3, r3, #8
 800f348:	b299      	uxth	r1, r3
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	623a      	str	r2, [r7, #32]
 800f350:	b2ca      	uxtb	r2, r1
 800f352:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f356:	440b      	add	r3, r1
 800f358:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	1c5a      	adds	r2, r3, #1
 800f360:	623a      	str	r2, [r7, #32]
 800f362:	8bfa      	ldrh	r2, [r7, #30]
 800f364:	b2d2      	uxtb	r2, r2
 800f366:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f36a:	440b      	add	r3, r1
 800f36c:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan2, controller_id |
 800f370:	7bfb      	ldrb	r3, [r7, #15]
 800f372:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	1c5a      	adds	r2, r3, #1
 800f37a:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan2, controller_id |
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	f107 0210 	add.w	r2, r7, #16
 800f382:	4803      	ldr	r0, [pc, #12]	; (800f390 <comm_can_send_buffer+0x234>)
 800f384:	f7f4 fa50 	bl	8003828 <CAN_TxMsgEID>
}
 800f388:	bf00      	nop
 800f38a:	3738      	adds	r7, #56	; 0x38
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	2000916c 	.word	0x2000916c
 800f394:	00000000 	.word	0x00000000

0800f398 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	ed87 0a00 	vstr	s0, [r7]
 800f3a4:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 800f3aa:	6838      	ldr	r0, [r7, #0]
 800f3ac:	f7f1 f8cc 	bl	8000548 <__aeabi_f2d>
 800f3b0:	a310      	add	r3, pc, #64	; (adr r3, 800f3f4 <comm_can_set_duty+0x5c>)
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	f7f1 f91f 	bl	80005f8 <__aeabi_dmul>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	460b      	mov	r3, r1
 800f3be:	4610      	mov	r0, r2
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	f7f1 fbc9 	bl	8000b58 <__aeabi_d2iz>
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	f107 020c 	add.w	r2, r7, #12
 800f3cc:	f107 0308 	add.w	r3, r7, #8
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7ff fdd1 	bl	800ef78 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800f3d6:	79f9      	ldrb	r1, [r7, #7]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	f107 0208 	add.w	r2, r7, #8
 800f3e0:	4803      	ldr	r0, [pc, #12]	; (800f3f0 <comm_can_set_duty+0x58>)
 800f3e2:	f7f4 fa21 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800f3e6:	bf00      	nop
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	2000916c 	.word	0x2000916c
 800f3f4:	00000000 	.word	0x00000000
 800f3f8:	40f86a00 	.word	0x40f86a00

0800f3fc <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b084      	sub	sp, #16
 800f400:	af00      	add	r7, sp, #0
 800f402:	4603      	mov	r3, r0
 800f404:	ed87 0a00 	vstr	s0, [r7]
 800f408:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 800f40e:	6838      	ldr	r0, [r7, #0]
 800f410:	f7f1 f89a 	bl	8000548 <__aeabi_f2d>
 800f414:	f04f 0200 	mov.w	r2, #0
 800f418:	4b0f      	ldr	r3, [pc, #60]	; (800f458 <comm_can_set_current+0x5c>)
 800f41a:	f7f1 f8ed 	bl	80005f8 <__aeabi_dmul>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	4610      	mov	r0, r2
 800f424:	4619      	mov	r1, r3
 800f426:	f7f1 fb97 	bl	8000b58 <__aeabi_d2iz>
 800f42a:	4601      	mov	r1, r0
 800f42c:	f107 020c 	add.w	r2, r7, #12
 800f430:	f107 0308 	add.w	r3, r7, #8
 800f434:	4618      	mov	r0, r3
 800f436:	f7ff fd9f 	bl	800ef78 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	b2db      	uxtb	r3, r3
 800f444:	f107 0208 	add.w	r2, r7, #8
 800f448:	4804      	ldr	r0, [pc, #16]	; (800f45c <comm_can_set_current+0x60>)
 800f44a:	f7f4 f9ed 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 800f44e:	bf00      	nop
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	408f4000 	.word	0x408f4000
 800f45c:	2000916c 	.word	0x2000916c

0800f460 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	ed87 0a00 	vstr	s0, [r7]
 800f46c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800f472:	edd7 7a00 	vldr	s15, [r7]
 800f476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f47a:	f107 020c 	add.w	r2, r7, #12
 800f47e:	f107 0308 	add.w	r3, r7, #8
 800f482:	ee17 1a90 	vmov	r1, s15
 800f486:	4618      	mov	r0, r3
 800f488:	f7ff fd76 	bl	800ef78 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
 800f48c:	79fb      	ldrb	r3, [r7, #7]
 800f48e:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	b2db      	uxtb	r3, r3
 800f496:	f107 0208 	add.w	r2, r7, #8
 800f49a:	4803      	ldr	r0, [pc, #12]	; (800f4a8 <comm_can_set_rpm+0x48>)
 800f49c:	f7f4 f9c4 	bl	8003828 <CAN_TxMsgEID>
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 800f4a0:	bf00      	nop
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	2000916c 	.word	0x2000916c

0800f4ac <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	603b      	str	r3, [r7, #0]
//
//	Vescmsg *rxmsg_tmp;
//	while ((rxmsg_tmp = get_rx_frame()) != 0) {
//		Vescmsg rxmsg = *rxmsg_tmp;

		if (vescmsg.Rxmsg.IDE == CAN_ID_EXT) {
 800f4b6:	4b30      	ldr	r3, [pc, #192]	; (800f578 <decode_VESC+0xcc>)
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	2b04      	cmp	r3, #4
 800f4bc:	d158      	bne.n	800f570 <decode_VESC+0xc4>
			uint8_t id = vescmsg.Rxmsg.ExtId & 0xFF;
 800f4be:	4b2e      	ldr	r3, [pc, #184]	; (800f578 <decode_VESC+0xcc>)
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	71fb      	strb	r3, [r7, #7]
			CAN_PACKET_ID cmd = vescmsg.Rxmsg.ExtId >> 8;
 800f4c4:	4b2c      	ldr	r3, [pc, #176]	; (800f578 <decode_VESC+0xcc>)
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	0a1b      	lsrs	r3, r3, #8
 800f4ca:	71bb      	strb	r3, [r7, #6]
//
//				default:
//					break;
//				}
//			}
			if(cmd == CAN_PACKET_STATUS)
 800f4cc:	79bb      	ldrb	r3, [r7, #6]
 800f4ce:	2b09      	cmp	r3, #9
 800f4d0:	d14e      	bne.n	800f570 <decode_VESC+0xc4>
			{
				if(id == 111)
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	2b6f      	cmp	r3, #111	; 0x6f
 800f4d6:	d124      	bne.n	800f522 <decode_VESC+0x76>
				{
					vesc1.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800f4d8:	463b      	mov	r3, r7
 800f4da:	4619      	mov	r1, r3
 800f4dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f4e0:	4826      	ldr	r0, [pc, #152]	; (800f57c <decode_VESC+0xd0>)
 800f4e2:	f7ff fdf2 	bl	800f0ca <buffer_get_float32>
 800f4e6:	eef0 7a40 	vmov.f32	s15, s0
 800f4ea:	4b25      	ldr	r3, [pc, #148]	; (800f580 <decode_VESC+0xd4>)
 800f4ec:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc1.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f4f0:	463b      	mov	r3, r7
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f4f8:	4820      	ldr	r0, [pc, #128]	; (800f57c <decode_VESC+0xd0>)
 800f4fa:	f7ff fdcb 	bl	800f094 <buffer_get_float16>
 800f4fe:	eef0 7a40 	vmov.f32	s15, s0
 800f502:	4b1f      	ldr	r3, [pc, #124]	; (800f580 <decode_VESC+0xd4>)
 800f504:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc1.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f508:	463b      	mov	r3, r7
 800f50a:	4619      	mov	r1, r3
 800f50c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f510:	481a      	ldr	r0, [pc, #104]	; (800f57c <decode_VESC+0xd0>)
 800f512:	f7ff fdbf 	bl	800f094 <buffer_get_float16>
 800f516:	eef0 7a40 	vmov.f32	s15, s0
 800f51a:	4b19      	ldr	r3, [pc, #100]	; (800f580 <decode_VESC+0xd4>)
 800f51c:	edc3 7a05 	vstr	s15, [r3, #20]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
				}
			}
		}
	}
 800f520:	e026      	b.n	800f570 <decode_VESC+0xc4>
				else if(id == 112)
 800f522:	79fb      	ldrb	r3, [r7, #7]
 800f524:	2b70      	cmp	r3, #112	; 0x70
 800f526:	d123      	bne.n	800f570 <decode_VESC+0xc4>
					vesc2.Info.rpm = buffer_get_float32((uint8_t*)&vescmsg.Data, 1.0, &ind);
 800f528:	463b      	mov	r3, r7
 800f52a:	4619      	mov	r1, r3
 800f52c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f530:	4812      	ldr	r0, [pc, #72]	; (800f57c <decode_VESC+0xd0>)
 800f532:	f7ff fdca 	bl	800f0ca <buffer_get_float32>
 800f536:	eef0 7a40 	vmov.f32	s15, s0
 800f53a:	4b12      	ldr	r3, [pc, #72]	; (800f584 <decode_VESC+0xd8>)
 800f53c:	edc3 7a04 	vstr	s15, [r3, #16]
					vesc2.Info.current = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f540:	463b      	mov	r3, r7
 800f542:	4619      	mov	r1, r3
 800f544:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f548:	480c      	ldr	r0, [pc, #48]	; (800f57c <decode_VESC+0xd0>)
 800f54a:	f7ff fda3 	bl	800f094 <buffer_get_float16>
 800f54e:	eef0 7a40 	vmov.f32	s15, s0
 800f552:	4b0c      	ldr	r3, [pc, #48]	; (800f584 <decode_VESC+0xd8>)
 800f554:	edc3 7a06 	vstr	s15, [r3, #24]
					vesc2.Info.duty = buffer_get_float16((uint8_t*)&vescmsg.Data, 1e1, &ind);
 800f558:	463b      	mov	r3, r7
 800f55a:	4619      	mov	r1, r3
 800f55c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f560:	4806      	ldr	r0, [pc, #24]	; (800f57c <decode_VESC+0xd0>)
 800f562:	f7ff fd97 	bl	800f094 <buffer_get_float16>
 800f566:	eef0 7a40 	vmov.f32	s15, s0
 800f56a:	4b06      	ldr	r3, [pc, #24]	; (800f584 <decode_VESC+0xd8>)
 800f56c:	edc3 7a05 	vstr	s15, [r3, #20]
	}
 800f570:	bf00      	nop
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	200098e4 	.word	0x200098e4
 800f57c:	20009900 	.word	0x20009900
 800f580:	20006b2c 	.word	0x20006b2c
 800f584:	20009b9c 	.word	0x20009b9c

0800f588 <set_rx_frames>:
		return res;
	} else
		return 0;
}

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 800f588:	b4b0      	push	{r4, r5, r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 800f590:	4b16      	ldr	r3, [pc, #88]	; (800f5ec <set_rx_frames+0x64>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	1c53      	adds	r3, r2, #1
 800f596:	4915      	ldr	r1, [pc, #84]	; (800f5ec <set_rx_frames+0x64>)
 800f598:	600b      	str	r3, [r1, #0]
 800f59a:	4915      	ldr	r1, [pc, #84]	; (800f5f0 <set_rx_frames+0x68>)
 800f59c:	4613      	mov	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	4413      	add	r3, r2
 800f5a2:	009b      	lsls	r3, r3, #2
 800f5a4:	18ca      	adds	r2, r1, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4614      	mov	r4, r2
 800f5aa:	461d      	mov	r5, r3
 800f5ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 800f5b8:	4b0c      	ldr	r3, [pc, #48]	; (800f5ec <set_rx_frames+0x64>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b64      	cmp	r3, #100	; 0x64
 800f5be:	d102      	bne.n	800f5c6 <set_rx_frames+0x3e>
		rx_frame_write = 0;
 800f5c0:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <set_rx_frames+0x64>)
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	0a1b      	lsrs	r3, r3, #8
 800f5cc:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2b07      	cmp	r3, #7
 800f5d2:	d002      	beq.n	800f5da <set_rx_frames+0x52>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2b08      	cmp	r3, #8
 800f5d8:	d101      	bne.n	800f5de <set_rx_frames+0x56>
		return 112;
 800f5da:	2370      	movs	r3, #112	; 0x70
 800f5dc:	e000      	b.n	800f5e0 <set_rx_frames+0x58>
	else
		return 0;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bcb0      	pop	{r4, r5, r7}
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	200010f8 	.word	0x200010f8
 800f5f0:	200002e8 	.word	0x200002e8

0800f5f4 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	ed87 0a05 	vstr	s0, [r7, #20]
 800f5fe:	edc7 0a04 	vstr	s1, [r7, #16]
 800f602:	ed87 1a03 	vstr	s2, [r7, #12]
 800f606:	4603      	mov	r3, r0
 800f608:	6079      	str	r1, [r7, #4]
 800f60a:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 800f60c:	4809      	ldr	r0, [pc, #36]	; (800f634 <VESCInit+0x40>)
 800f60e:	f7ff fca3 	bl	800ef58 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	897a      	ldrh	r2, [r7, #10]
 800f628:	819a      	strh	r2, [r3, #12]
}
 800f62a:	bf00      	nop
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	0800f715 	.word	0x0800f715

0800f638 <VESCRPM>:
 * 						  BRightRPM		speed of back right motor in revolution per minute
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCRPM(2000, 2000, 2000, 2000, &csev);
 */
void VESCRPM(float RPM, VESC_t* vesc) {
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	ed87 0a01 	vstr	s0, [r7, #4]
 800f642:	6038      	str	r0, [r7, #0]

	if(RPM > vesc->max_rpm){
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	edd3 7a00 	vldr	s15, [r3]
 800f64a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f64e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f656:	dd02      	ble.n	800f65e <VESCRPM+0x26>
		RPM = vesc->max_rpm;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	607b      	str	r3, [r7, #4]
	}

	RPM = RPM * vesc->pole_pairs;
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	edd3 7a01 	vldr	s15, [r3, #4]
 800f664:	ed97 7a01 	vldr	s14, [r7, #4]
 800f668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f66c:	edc7 7a01 	vstr	s15, [r7, #4]

	comm_can_set_rpm(vesc->Instance, RPM);
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	899b      	ldrh	r3, [r3, #12]
 800f674:	b2db      	uxtb	r3, r3
 800f676:	ed97 0a01 	vldr	s0, [r7, #4]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7ff fef0 	bl	800f460 <comm_can_set_rpm>

	vesc->rpm_flag = 1;
 800f680:	683a      	ldr	r2, [r7, #0]
 800f682:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f686:	f043 0302 	orr.w	r3, r3, #2
 800f68a:	f882 3020 	strb.w	r3, [r2, #32]
}
 800f68e:	bf00      	nop
 800f690:	3708      	adds	r7, #8
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
	...

0800f698 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6a6:	f003 0304 	and.w	r3, r3, #4
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d007      	beq.n	800f6c0 <VESCStop+0x28>
		comm_can_set_duty(vesc->Instance, 0.0);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	899b      	ldrh	r3, [r3, #12]
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800f710 <VESCStop+0x78>
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff fe6c 	bl	800f398 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6c6:	f003 0302 	and.w	r3, r3, #2
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d007      	beq.n	800f6e0 <VESCStop+0x48>
		comm_can_set_rpm(vesc->Instance, 0.0);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	899b      	ldrh	r3, [r3, #12]
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f710 <VESCStop+0x78>
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7ff fec0 	bl	800f460 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d007      	beq.n	800f700 <VESCStop+0x68>
		comm_can_set_current(vesc->Instance, 0.0);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	899b      	ldrh	r3, [r3, #12]
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800f710 <VESCStop+0x78>
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7ff fe7e 	bl	800f3fc <comm_can_set_current>
	}

	vesc->flags = 0;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	f883 2020 	strb.w	r2, [r3, #32]
}
 800f708:	bf00      	nop
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	00000000 	.word	0x00000000

0800f714 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
 800f720:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 800f722:	7bf8      	ldrb	r0, [r7, #15]
 800f724:	2300      	movs	r3, #0
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	68b9      	ldr	r1, [r7, #8]
 800f72a:	f7ff fd17 	bl	800f15c <comm_can_send_buffer>
}
 800f72e:	bf00      	nop
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
	...

0800f738 <LidarInit>:
float Lidar_Shoot_Angles[10] = {0, -90.0, -135, -45, 0, 0, 0, 0, 0, 0}; // The angles should be absolute, try not to reset the angle every path plan
float Lidar_Center_Offsets[8] = {-0.25, 0.99, 1.19, 0.96, -1.5, 0.99, -0.25, 0.91};  // Offsets for center positions
float Lidar_Adjust_Lim[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void LidarInit(UART_HandleTypeDef* lidarUART, MODE_t mode, Lidar_t* lidar)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	460b      	mov	r3, r1
 800f742:	607a      	str	r2, [r7, #4]
 800f744:	72fb      	strb	r3, [r7, #11]
	lidar->lidar_UART = lidarUART;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	lidar->mode = mode;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	7afa      	ldrb	r2, [r7, #11]
 800f752:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
	lidar->start = 0;
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 800f75c:	f36f 0382 	bfc	r3, #2, #1
 800f760:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0

	if(lidar->mode == CONTINUOUS)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d110      	bne.n	800f790 <LidarInit+0x58>
	{
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	33c9      	adds	r3, #201	; 0xc9
 800f778:	2205      	movs	r2, #5
 800f77a:	4619      	mov	r1, r3
 800f77c:	f00c fa14 	bl	801bba8 <HAL_UART_Receive_IT>
		lidar->new = 0;
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 800f786:	f36f 0300 	bfc	r3, #0, #1
 800f78a:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
		lidar->AdjEnb = 0;
		lidar->laser = 1;
		lidar->autoshot = 1;
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
	}
}
 800f78e:	e0a5      	b.n	800f8dc <LidarInit+0x1a4>
		LidarAnglesInit(Lidar_Shoot_Angles[0], Lidar_Shoot_Angles[1], Lidar_Shoot_Angles[2], Lidar_Shoot_Angles[3],
 800f790:	4b54      	ldr	r3, [pc, #336]	; (800f8e4 <LidarInit+0x1ac>)
 800f792:	edd3 7a00 	vldr	s15, [r3]
 800f796:	4b53      	ldr	r3, [pc, #332]	; (800f8e4 <LidarInit+0x1ac>)
 800f798:	ed93 7a01 	vldr	s14, [r3, #4]
 800f79c:	4b51      	ldr	r3, [pc, #324]	; (800f8e4 <LidarInit+0x1ac>)
 800f79e:	edd3 6a02 	vldr	s13, [r3, #8]
 800f7a2:	4b50      	ldr	r3, [pc, #320]	; (800f8e4 <LidarInit+0x1ac>)
 800f7a4:	ed93 6a03 	vldr	s12, [r3, #12]
 800f7a8:	4b4e      	ldr	r3, [pc, #312]	; (800f8e4 <LidarInit+0x1ac>)
 800f7aa:	edd3 5a04 	vldr	s11, [r3, #16]
 800f7ae:	4b4d      	ldr	r3, [pc, #308]	; (800f8e4 <LidarInit+0x1ac>)
 800f7b0:	ed93 5a05 	vldr	s10, [r3, #20]
 800f7b4:	4b4b      	ldr	r3, [pc, #300]	; (800f8e4 <LidarInit+0x1ac>)
 800f7b6:	ed93 3a06 	vldr	s6, [r3, #24]
 800f7ba:	4b4a      	ldr	r3, [pc, #296]	; (800f8e4 <LidarInit+0x1ac>)
 800f7bc:	edd3 3a07 	vldr	s7, [r3, #28]
 800f7c0:	4b48      	ldr	r3, [pc, #288]	; (800f8e4 <LidarInit+0x1ac>)
 800f7c2:	ed93 4a08 	vldr	s8, [r3, #32]
 800f7c6:	4b47      	ldr	r3, [pc, #284]	; (800f8e4 <LidarInit+0x1ac>)
 800f7c8:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	eef0 2a45 	vmov.f32	s5, s10
 800f7d2:	eeb0 2a65 	vmov.f32	s4, s11
 800f7d6:	eef0 1a46 	vmov.f32	s3, s12
 800f7da:	eeb0 1a66 	vmov.f32	s2, s13
 800f7de:	eef0 0a47 	vmov.f32	s1, s14
 800f7e2:	eeb0 0a67 	vmov.f32	s0, s15
 800f7e6:	f000 f8eb 	bl	800f9c0 <LidarAnglesInit>
		LidarOffsetInit(Lidar_Offsets[0], Lidar_Offsets[1], Lidar_Offsets[2], Lidar_Offsets[3], Lidar_Offsets[4], Lidar_Offsets[5], lidar);
 800f7ea:	4b3f      	ldr	r3, [pc, #252]	; (800f8e8 <LidarInit+0x1b0>)
 800f7ec:	edd3 7a00 	vldr	s15, [r3]
 800f7f0:	4b3d      	ldr	r3, [pc, #244]	; (800f8e8 <LidarInit+0x1b0>)
 800f7f2:	ed93 7a01 	vldr	s14, [r3, #4]
 800f7f6:	4b3c      	ldr	r3, [pc, #240]	; (800f8e8 <LidarInit+0x1b0>)
 800f7f8:	edd3 6a02 	vldr	s13, [r3, #8]
 800f7fc:	4b3a      	ldr	r3, [pc, #232]	; (800f8e8 <LidarInit+0x1b0>)
 800f7fe:	ed93 6a03 	vldr	s12, [r3, #12]
 800f802:	4b39      	ldr	r3, [pc, #228]	; (800f8e8 <LidarInit+0x1b0>)
 800f804:	edd3 5a04 	vldr	s11, [r3, #16]
 800f808:	4b37      	ldr	r3, [pc, #220]	; (800f8e8 <LidarInit+0x1b0>)
 800f80a:	ed93 5a05 	vldr	s10, [r3, #20]
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	eef0 2a45 	vmov.f32	s5, s10
 800f814:	eeb0 2a65 	vmov.f32	s4, s11
 800f818:	eef0 1a46 	vmov.f32	s3, s12
 800f81c:	eeb0 1a66 	vmov.f32	s2, s13
 800f820:	eef0 0a47 	vmov.f32	s1, s14
 800f824:	eeb0 0a67 	vmov.f32	s0, s15
 800f828:	f000 f862 	bl	800f8f0 <LidarOffsetInit>
		LidarCenterOffsetInit(Lidar_Center_Offsets[0], Lidar_Center_Offsets[1], Lidar_Center_Offsets[2], Lidar_Center_Offsets[3], Lidar_Center_Offsets[4],
 800f82c:	4b2f      	ldr	r3, [pc, #188]	; (800f8ec <LidarInit+0x1b4>)
 800f82e:	edd3 7a00 	vldr	s15, [r3]
 800f832:	4b2e      	ldr	r3, [pc, #184]	; (800f8ec <LidarInit+0x1b4>)
 800f834:	ed93 7a01 	vldr	s14, [r3, #4]
 800f838:	4b2c      	ldr	r3, [pc, #176]	; (800f8ec <LidarInit+0x1b4>)
 800f83a:	edd3 6a02 	vldr	s13, [r3, #8]
 800f83e:	4b2b      	ldr	r3, [pc, #172]	; (800f8ec <LidarInit+0x1b4>)
 800f840:	ed93 6a03 	vldr	s12, [r3, #12]
 800f844:	4b29      	ldr	r3, [pc, #164]	; (800f8ec <LidarInit+0x1b4>)
 800f846:	edd3 5a04 	vldr	s11, [r3, #16]
 800f84a:	4b28      	ldr	r3, [pc, #160]	; (800f8ec <LidarInit+0x1b4>)
 800f84c:	ed93 5a05 	vldr	s10, [r3, #20]
 800f850:	4b26      	ldr	r3, [pc, #152]	; (800f8ec <LidarInit+0x1b4>)
 800f852:	edd3 4a06 	vldr	s9, [r3, #24]
 800f856:	4b25      	ldr	r3, [pc, #148]	; (800f8ec <LidarInit+0x1b4>)
 800f858:	ed93 4a07 	vldr	s8, [r3, #28]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	eef0 3a44 	vmov.f32	s7, s8
 800f862:	eeb0 3a64 	vmov.f32	s6, s9
 800f866:	eef0 2a45 	vmov.f32	s5, s10
 800f86a:	eeb0 2a65 	vmov.f32	s4, s11
 800f86e:	eef0 1a46 	vmov.f32	s3, s12
 800f872:	eeb0 1a66 	vmov.f32	s2, s13
 800f876:	eef0 0a47 	vmov.f32	s1, s14
 800f87a:	eeb0 0a67 	vmov.f32	s0, s15
 800f87e:	f000 f865 	bl	800f94c <LidarCenterOffsetInit>
		lidar->response = NO;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2201      	movs	r2, #1
 800f886:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
		lidar->fail = 0;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		lidar->pos = PICK_LEFT;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2201      	movs	r2, #1
 800f896:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
		lidar->pos_counter = 1;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2201      	movs	r2, #1
 800f89e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		lidar->angle = S;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2202      	movs	r2, #2
 800f8a6:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
		lidar->angle_counter = 2;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		lidar->AdjEnb = 0;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		lidar->laser = 1;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		lidar->autoshot = 1;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 2);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	33c9      	adds	r3, #201	; 0xc9
 800f8d4:	2202      	movs	r2, #2
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	f00c f966 	bl	801bba8 <HAL_UART_Receive_IT>
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	20000070 	.word	0x20000070
 800f8e8:	20000058 	.word	0x20000058
 800f8ec:	20000098 	.word	0x20000098

0800f8f0 <LidarOffsetInit>:

void LidarOffsetInit(float left_offset_x, float left_offset_y, float right_offset_x, float right_offset_y, float center_offset_x,
		float center_offset_y, Lidar_t* lidar)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b089      	sub	sp, #36	; 0x24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	ed87 0a07 	vstr	s0, [r7, #28]
 800f8fa:	edc7 0a06 	vstr	s1, [r7, #24]
 800f8fe:	ed87 1a05 	vstr	s2, [r7, #20]
 800f902:	edc7 1a04 	vstr	s3, [r7, #16]
 800f906:	ed87 2a03 	vstr	s4, [r7, #12]
 800f90a:	edc7 2a02 	vstr	s5, [r7, #8]
 800f90e:	6078      	str	r0, [r7, #4]
	lidar->left_offset_x = left_offset_x;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	69fa      	ldr	r2, [r7, #28]
 800f914:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	lidar->left_offset_y = left_offset_y;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	69ba      	ldr	r2, [r7, #24]
 800f91c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	lidar->right_offset_x = right_offset_x;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	697a      	ldr	r2, [r7, #20]
 800f924:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	lidar->right_offset_y = right_offset_y;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	693a      	ldr	r2, [r7, #16]
 800f92c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	lidar->center_offset_x = center_offset_x;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	lidar->center_offset_y = center_offset_y;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 800f940:	bf00      	nop
 800f942:	3724      	adds	r7, #36	; 0x24
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <LidarCenterOffsetInit>:

void LidarCenterOffsetInit(float center_1_offset_x, float center_1_offset_y, float center_2_offset_x, float center_2_offset_y,
		float center_3_offset_x, float center_3_offset_y, float center_4_offset_x, float center_4_offset_y, Lidar_t* lidar)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b08b      	sub	sp, #44	; 0x2c
 800f950:	af00      	add	r7, sp, #0
 800f952:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800f956:	edc7 0a08 	vstr	s1, [r7, #32]
 800f95a:	ed87 1a07 	vstr	s2, [r7, #28]
 800f95e:	edc7 1a06 	vstr	s3, [r7, #24]
 800f962:	ed87 2a05 	vstr	s4, [r7, #20]
 800f966:	edc7 2a04 	vstr	s5, [r7, #16]
 800f96a:	ed87 3a03 	vstr	s6, [r7, #12]
 800f96e:	edc7 3a02 	vstr	s7, [r7, #8]
 800f972:	6078      	str	r0, [r7, #4]
	lidar->center_1_offset_x = center_1_offset_x;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f978:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	lidar->center_1_offset_y = center_1_offset_y;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6a3a      	ldr	r2, [r7, #32]
 800f980:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	lidar->center_2_offset_x = center_2_offset_x;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	69fa      	ldr	r2, [r7, #28]
 800f988:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	lidar->center_2_offset_y = center_2_offset_y;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	69ba      	ldr	r2, [r7, #24]
 800f990:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	lidar->center_3_offset_x = center_3_offset_x;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	697a      	ldr	r2, [r7, #20]
 800f998:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	lidar->center_3_offset_y = center_3_offset_y;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	lidar->center_4_offset_x = center_4_offset_x;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	lidar->center_4_offset_y = center_4_offset_y;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c

}
 800f9b4:	bf00      	nop
 800f9b6:	372c      	adds	r7, #44	; 0x2c
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr

0800f9c0 <LidarAnglesInit>:

// Will be shooting based on sequence A-> B -> C -> D
void LidarAnglesInit(float left_angle_A, float left_angle_B, float left_angle_C, float left_angle_D,
					 float right_angle_A, float right_angle_B, float right_angle_C, float right_angle_D,
					 float center_angle_A, float center_angle_B, Lidar_t* lidar)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b08d      	sub	sp, #52	; 0x34
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 800f9ca:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 800f9ce:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 800f9d2:	edc7 1a08 	vstr	s3, [r7, #32]
 800f9d6:	ed87 2a07 	vstr	s4, [r7, #28]
 800f9da:	edc7 2a06 	vstr	s5, [r7, #24]
 800f9de:	ed87 3a05 	vstr	s6, [r7, #20]
 800f9e2:	edc7 3a04 	vstr	s7, [r7, #16]
 800f9e6:	ed87 4a03 	vstr	s8, [r7, #12]
 800f9ea:	edc7 4a02 	vstr	s9, [r7, #8]
 800f9ee:	6078      	str	r0, [r7, #4]
	lidar->left_angle_A = left_angle_A;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9f4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	lidar->left_angle_B = left_angle_B;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9fc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	lidar->left_angle_C = left_angle_C;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa04:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	lidar->left_angle_D = left_angle_D;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a3a      	ldr	r2, [r7, #32]
 800fa0c:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	lidar->right_angle_A = right_angle_A;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	69fa      	ldr	r2, [r7, #28]
 800fa14:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	lidar->right_angle_B = right_angle_B;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	69ba      	ldr	r2, [r7, #24]
 800fa1c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	lidar->right_angle_C = right_angle_C;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	697a      	ldr	r2, [r7, #20]
 800fa24:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	lidar->right_angle_D = right_angle_D;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	693a      	ldr	r2, [r7, #16]
 800fa2c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec

	lidar->center_angle_A = center_angle_A;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	lidar->center_angle_B = center_angle_B;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
}
 800fa40:	bf00      	nop
 800fa42:	3734      	adds	r7, #52	; 0x34
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr
 800fa4c:	0000      	movs	r0, r0
	...

0800fa50 <LidarSetPos>:

void LidarSetPos(Pos_t pose, Lidar_t* lidar)
{
 800fa50:	b5b0      	push	{r4, r5, r7, lr}
 800fa52:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800fa56:	af02      	add	r7, sp, #8
 800fa58:	4602      	mov	r2, r0
 800fa5a:	463b      	mov	r3, r7
 800fa5c:	6019      	str	r1, [r3, #0]
 800fa5e:	1dfb      	adds	r3, r7, #7
 800fa60:	701a      	strb	r2, [r3, #0]
	uint32_t before, after;

//	*******************************************************************************LASER*************************************************************************************
	float lsr_center_1[1][7] = {{0, 2.56, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800fa62:	f04f 0300 	mov.w	r3, #0
 800fa66:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
 800fa6a:	6013      	str	r3, [r2, #0]
 800fa6c:	4bbe      	ldr	r3, [pc, #760]	; (800fd68 <LidarSetPos+0x318>)
 800fa6e:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	4bbd      	ldr	r3, [pc, #756]	; (800fd6c <LidarSetPos+0x31c>)
 800fa76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7f0 fd65 	bl	8000548 <__aeabi_f2d>
 800fa7e:	a3b8      	add	r3, pc, #736	; (adr r3, 800fd60 <LidarSetPos+0x310>)
 800fa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa84:	f7f0 fc02 	bl	800028c <__adddf3>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	4619      	mov	r1, r3
 800fa90:	f7f1 f8aa 	bl	8000be8 <__aeabi_d2f>
 800fa94:	4603      	mov	r3, r0
 800fa96:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 800fa9a:	6013      	str	r3, [r2, #0]
 800fa9c:	4bb4      	ldr	r3, [pc, #720]	; (800fd70 <LidarSetPos+0x320>)
 800fa9e:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800faa2:	6013      	str	r3, [r2, #0]
 800faa4:	4bb3      	ldr	r3, [pc, #716]	; (800fd74 <LidarSetPos+0x324>)
 800faa6:	f207 5204 	addw	r2, r7, #1284	; 0x504
 800faaa:	6013      	str	r3, [r2, #0]
 800faac:	4bb2      	ldr	r3, [pc, #712]	; (800fd78 <LidarSetPos+0x328>)
 800faae:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 800fab2:	6013      	str	r3, [r2, #0]
 800fab4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fab8:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 800fabc:	6013      	str	r3, [r2, #0]
	float lsr_center_2[1][7] = {{0, 4.37, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800fabe:	f04f 0300 	mov.w	r3, #0
 800fac2:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800fac6:	6013      	str	r3, [r2, #0]
 800fac8:	4bac      	ldr	r3, [pc, #688]	; (800fd7c <LidarSetPos+0x32c>)
 800faca:	f207 42dc 	addw	r2, r7, #1244	; 0x4dc
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	4ba6      	ldr	r3, [pc, #664]	; (800fd6c <LidarSetPos+0x31c>)
 800fad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7f0 fd37 	bl	8000548 <__aeabi_f2d>
 800fada:	a3a1      	add	r3, pc, #644	; (adr r3, 800fd60 <LidarSetPos+0x310>)
 800fadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae0:	f7f0 fbd4 	bl	800028c <__adddf3>
 800fae4:	4602      	mov	r2, r0
 800fae6:	460b      	mov	r3, r1
 800fae8:	4610      	mov	r0, r2
 800faea:	4619      	mov	r1, r3
 800faec:	f7f1 f87c 	bl	8000be8 <__aeabi_d2f>
 800faf0:	4603      	mov	r3, r0
 800faf2:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	4b9d      	ldr	r3, [pc, #628]	; (800fd70 <LidarSetPos+0x320>)
 800fafa:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 800fafe:	6013      	str	r3, [r2, #0]
 800fb00:	4b9c      	ldr	r3, [pc, #624]	; (800fd74 <LidarSetPos+0x324>)
 800fb02:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	4b9b      	ldr	r3, [pc, #620]	; (800fd78 <LidarSetPos+0x328>)
 800fb0a:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb14:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800fb18:	6013      	str	r3, [r2, #0]
	float lsr_center[1][7] = {{0, 5.74, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800fb1a:	f04f 0300 	mov.w	r3, #0
 800fb1e:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 800fb22:	6013      	str	r3, [r2, #0]
 800fb24:	4b96      	ldr	r3, [pc, #600]	; (800fd80 <LidarSetPos+0x330>)
 800fb26:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800fb2a:	6013      	str	r3, [r2, #0]
 800fb2c:	4b8f      	ldr	r3, [pc, #572]	; (800fd6c <LidarSetPos+0x31c>)
 800fb2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7f0 fd09 	bl	8000548 <__aeabi_f2d>
 800fb36:	a38a      	add	r3, pc, #552	; (adr r3, 800fd60 <LidarSetPos+0x310>)
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	f7f0 fba6 	bl	800028c <__adddf3>
 800fb40:	4602      	mov	r2, r0
 800fb42:	460b      	mov	r3, r1
 800fb44:	4610      	mov	r0, r2
 800fb46:	4619      	mov	r1, r3
 800fb48:	f7f1 f84e 	bl	8000be8 <__aeabi_d2f>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	4b86      	ldr	r3, [pc, #536]	; (800fd70 <LidarSetPos+0x320>)
 800fb56:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 800fb5a:	6013      	str	r3, [r2, #0]
 800fb5c:	4b85      	ldr	r3, [pc, #532]	; (800fd74 <LidarSetPos+0x324>)
 800fb5e:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 800fb62:	6013      	str	r3, [r2, #0]
 800fb64:	4b84      	ldr	r3, [pc, #528]	; (800fd78 <LidarSetPos+0x328>)
 800fb66:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb70:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 800fb74:	6013      	str	r3, [r2, #0]
	float lsr_center_right[1][7] = {{0, 5.86, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800fb76:	f04f 0300 	mov.w	r3, #0
 800fb7a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800fb7e:	6013      	str	r3, [r2, #0]
 800fb80:	4b80      	ldr	r3, [pc, #512]	; (800fd84 <LidarSetPos+0x334>)
 800fb82:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	4b78      	ldr	r3, [pc, #480]	; (800fd6c <LidarSetPos+0x31c>)
 800fb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7f0 fcdb 	bl	8000548 <__aeabi_f2d>
 800fb92:	a373      	add	r3, pc, #460	; (adr r3, 800fd60 <LidarSetPos+0x310>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	f7f0 fb78 	bl	800028c <__adddf3>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4610      	mov	r0, r2
 800fba2:	4619      	mov	r1, r3
 800fba4:	f7f1 f820 	bl	8000be8 <__aeabi_d2f>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	4b6f      	ldr	r3, [pc, #444]	; (800fd70 <LidarSetPos+0x320>)
 800fbb2:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 800fbb6:	6013      	str	r3, [r2, #0]
 800fbb8:	4b6e      	ldr	r3, [pc, #440]	; (800fd74 <LidarSetPos+0x324>)
 800fbba:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	4b6d      	ldr	r3, [pc, #436]	; (800fd78 <LidarSetPos+0x328>)
 800fbc2:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 800fbc6:	6013      	str	r3, [r2, #0]
 800fbc8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fbcc:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800fbd0:	6013      	str	r3, [r2, #0]
	float lsr_center_3[1][7] = {{0, 4.60, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800fbd2:	f04f 0300 	mov.w	r3, #0
 800fbd6:	f207 4284 	addw	r2, r7, #1156	; 0x484
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	4b6a      	ldr	r3, [pc, #424]	; (800fd88 <LidarSetPos+0x338>)
 800fbde:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800fbe2:	6013      	str	r3, [r2, #0]
 800fbe4:	4b61      	ldr	r3, [pc, #388]	; (800fd6c <LidarSetPos+0x31c>)
 800fbe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7f0 fcad 	bl	8000548 <__aeabi_f2d>
 800fbee:	a35c      	add	r3, pc, #368	; (adr r3, 800fd60 <LidarSetPos+0x310>)
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	f7f0 fb4a 	bl	800028c <__adddf3>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	460b      	mov	r3, r1
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4619      	mov	r1, r3
 800fc00:	f7f0 fff2 	bl	8000be8 <__aeabi_d2f>
 800fc04:	4603      	mov	r3, r0
 800fc06:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 800fc0a:	6013      	str	r3, [r2, #0]
 800fc0c:	4b58      	ldr	r3, [pc, #352]	; (800fd70 <LidarSetPos+0x320>)
 800fc0e:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	4b57      	ldr	r3, [pc, #348]	; (800fd74 <LidarSetPos+0x324>)
 800fc16:	f207 4294 	addw	r2, r7, #1172	; 0x494
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	4b56      	ldr	r3, [pc, #344]	; (800fd78 <LidarSetPos+0x328>)
 800fc1e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800fc22:	6013      	str	r3, [r2, #0]
 800fc24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fc28:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 800fc2c:	6013      	str	r3, [r2, #0]
	float lsr_center_4[1][7] = {{0, 2.67, pp.real_y + 0.3, -90, PoleSpeed, 0.06, 1}};
 800fc2e:	f04f 0300 	mov.w	r3, #0
 800fc32:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	4b54      	ldr	r3, [pc, #336]	; (800fd8c <LidarSetPos+0x33c>)
 800fc3a:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 800fc3e:	6013      	str	r3, [r2, #0]
 800fc40:	4b4a      	ldr	r3, [pc, #296]	; (800fd6c <LidarSetPos+0x31c>)
 800fc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7f0 fc7f 	bl	8000548 <__aeabi_f2d>
 800fc4a:	a345      	add	r3, pc, #276	; (adr r3, 800fd60 <LidarSetPos+0x310>)
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	f7f0 fb1c 	bl	800028c <__adddf3>
 800fc54:	4602      	mov	r2, r0
 800fc56:	460b      	mov	r3, r1
 800fc58:	4610      	mov	r0, r2
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	f7f0 ffc4 	bl	8000be8 <__aeabi_d2f>
 800fc60:	4603      	mov	r3, r0
 800fc62:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	4b41      	ldr	r3, [pc, #260]	; (800fd70 <LidarSetPos+0x320>)
 800fc6a:	f207 4274 	addw	r2, r7, #1140	; 0x474
 800fc6e:	6013      	str	r3, [r2, #0]
 800fc70:	4b40      	ldr	r3, [pc, #256]	; (800fd74 <LidarSetPos+0x324>)
 800fc72:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800fc76:	6013      	str	r3, [r2, #0]
 800fc78:	4b3f      	ldr	r3, [pc, #252]	; (800fd78 <LidarSetPos+0x328>)
 800fc7a:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fc84:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800fc88:	6013      	str	r3, [r2, #0]
//	*******************************************************************************LASER*************************************************************************************

	// Pick Left
	float pick_left_adjust[1][7] = {{4.5, 1.8, 0.6, -90.0, 0, 0, 0}};
 800fc8a:	4b41      	ldr	r3, [pc, #260]	; (800fd90 <LidarSetPos+0x340>)
 800fc8c:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 800fc90:	461d      	mov	r5, r3
 800fc92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_left_adjust_center_2[1][7] = {{4.5, 3, 0.6, -90.0, 0, 0, 0}};
 800fc9e:	4b3d      	ldr	r3, [pc, #244]	; (800fd94 <LidarSetPos+0x344>)
 800fca0:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 800fca4:	461d      	mov	r5, r3
 800fca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fcae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float laser_adjust_center_4[1][7] = {{3.5, 5, 0.1, -90, 0, 0, 0}};
 800fcb2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800fcb6:	4a38      	ldr	r2, [pc, #224]	; (800fd98 <LidarSetPos+0x348>)
 800fcb8:	461c      	mov	r4, r3
 800fcba:	4615      	mov	r5, r2
 800fcbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fcc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//	float bang_fence[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};

	// Only offset 1 pole
	float pick_left_to_center_1[1][7] = {{0.75, 0, 10, -90, 0, 0, 0}};
 800fcc8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800fccc:	4a33      	ldr	r2, [pc, #204]	; (800fd9c <LidarSetPos+0x34c>)
 800fcce:	461c      	mov	r4, r3
 800fcd0:	4615      	mov	r5, r2
 800fcd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fcda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_center_2[1][7] = {{PoleSpeed, 1.35, 0.2, -90, 0, 0, 0}};
 800fcde:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800fce2:	4a2f      	ldr	r2, [pc, #188]	; (800fda0 <LidarSetPos+0x350>)
 800fce4:	461c      	mov	r4, r3
 800fce6:	4615      	mov	r5, r2
 800fce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fcec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fcf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_1[1][7] = {{PoleSpeed, -1.4, 0.2, -90, 0, 0, 0}};
 800fcf4:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800fcf8:	4a2a      	ldr	r2, [pc, #168]	; (800fda4 <LidarSetPos+0x354>)
 800fcfa:	461c      	mov	r4, r3
 800fcfc:	4615      	mov	r5, r2
 800fcfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center[1][7] = {{PoleSpeed, 0.95, 0.2, -90, 0, 0, 0}};
 800fd0a:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800fd0e:	4a26      	ldr	r2, [pc, #152]	; (800fda8 <LidarSetPos+0x358>)
 800fd10:	461c      	mov	r4, r3
 800fd12:	4615      	mov	r5, r2
 800fd14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_2[1][7] = {{PoleSpeed, -1.0, 0.2, -90, 0, 0, 0}};
 800fd20:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800fd24:	4a21      	ldr	r2, [pc, #132]	; (800fdac <LidarSetPos+0x35c>)
 800fd26:	461c      	mov	r4, r3
 800fd28:	4615      	mov	r5, r2
 800fd2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_3[1][7] = {{PoleSpeed, 0.9, 0.2, -90, 0, 0, 0}};
 800fd36:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800fd3a:	4a1d      	ldr	r2, [pc, #116]	; (800fdb0 <LidarSetPos+0x360>)
 800fd3c:	461c      	mov	r4, r3
 800fd3e:	4615      	mov	r5, r2
 800fd40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center[1][7] = {{PoleSpeed, -0.85, 0.2, -90, 0, 0, 0}};
 800fd4c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800fd50:	4a18      	ldr	r2, [pc, #96]	; (800fdb4 <LidarSetPos+0x364>)
 800fd52:	461c      	mov	r4, r3
 800fd54:	4615      	mov	r5, r2
 800fd56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd5e:	e02b      	b.n	800fdb8 <LidarSetPos+0x368>
 800fd60:	33333333 	.word	0x33333333
 800fd64:	3fd33333 	.word	0x3fd33333
 800fd68:	4023d70a 	.word	0x4023d70a
 800fd6c:	20006d44 	.word	0x20006d44
 800fd70:	c2b40000 	.word	0xc2b40000
 800fd74:	41080000 	.word	0x41080000
 800fd78:	3d75c28f 	.word	0x3d75c28f
 800fd7c:	408bd70a 	.word	0x408bd70a
 800fd80:	40b7ae14 	.word	0x40b7ae14
 800fd84:	40bb851f 	.word	0x40bb851f
 800fd88:	40933333 	.word	0x40933333
 800fd8c:	402ae148 	.word	0x402ae148
 800fd90:	0802565c 	.word	0x0802565c
 800fd94:	08025678 	.word	0x08025678
 800fd98:	08025694 	.word	0x08025694
 800fd9c:	080256b0 	.word	0x080256b0
 800fda0:	080256cc 	.word	0x080256cc
 800fda4:	080256e8 	.word	0x080256e8
 800fda8:	08025704 	.word	0x08025704
 800fdac:	08025720 	.word	0x08025720
 800fdb0:	0802573c 	.word	0x0802573c
 800fdb4:	08025758 	.word	0x08025758
 800fdb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_4[1][7] = {{PoleSpeed, 1.5, 0.2, -90, 0, 0, 0}};
 800fdbc:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800fdc0:	4ac5      	ldr	r2, [pc, #788]	; (80100d8 <LidarSetPos+0x688>)
 800fdc2:	461c      	mov	r4, r3
 800fdc4:	4615      	mov	r5, r2
 800fdc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fdce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center_3[1][7] = {{PoleSpeed, -1.4, 0.1, -90, 0, 0, 0}};
 800fdd2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800fdd6:	4ac1      	ldr	r2, [pc, #772]	; (80100dc <LidarSetPos+0x68c>)
 800fdd8:	461c      	mov	r4, r3
 800fdda:	4615      	mov	r5, r2
 800fddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fde0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fde4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_upper_right[1][7] = {{PoleSpeed, 1.55, 0.0, -90, 0, 0, 0}};
 800fde8:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800fdec:	4abc      	ldr	r2, [pc, #752]	; (80100e0 <LidarSetPos+0x690>)
 800fdee:	461c      	mov	r4, r3
 800fdf0:	4615      	mov	r5, r2
 800fdf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fdfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800fdfe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800fe02:	4ab8      	ldr	r2, [pc, #736]	; (80100e4 <LidarSetPos+0x694>)
 800fe04:	461c      	mov	r4, r3
 800fe06:	4615      	mov	r5, r2
 800fe08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4[1][7] = {{PoleSpeed, 0.5, -4.1, -90, 0, 0, 0}};
 800fe14:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800fe18:	4ab3      	ldr	r2, [pc, #716]	; (80100e8 <LidarSetPos+0x698>)
 800fe1a:	461c      	mov	r4, r3
 800fe1c:	4615      	mov	r5, r2
 800fe1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_4_2[1][7] = {{PoleSpeed, -1.3, 0.0, -90.0, 0, 0, 0}};
 800fe2a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800fe2e:	4aaf      	ldr	r2, [pc, #700]	; (80100ec <LidarSetPos+0x69c>)
 800fe30:	461c      	mov	r4, r3
 800fe32:	4615      	mov	r5, r2
 800fe34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_pick_right[1][7] = {{PoleSpeed, 0.5, -4.35, -180.0, 0, 0, 0}};
 800fe40:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800fe44:	4aaa      	ldr	r2, [pc, #680]	; (80100f0 <LidarSetPos+0x6a0>)
 800fe46:	461c      	mov	r4, r3
 800fe48:	4615      	mov	r5, r2
 800fe4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right[1][7] = {{PoleSpeed, -0.2, 0.5, -90, 0, 0, 0}};
 800fe56:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800fe5a:	4aa6      	ldr	r2, [pc, #664]	; (80100f4 <LidarSetPos+0x6a4>)
 800fe5c:	461c      	mov	r4, r3
 800fe5e:	4615      	mov	r5, r2
 800fe60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_upper_right_2[1][7] = {{PoleSpeed, 0.2, 6, -178.0, 0, 0, 0}};
 800fe6c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800fe70:	4aa1      	ldr	r2, [pc, #644]	; (80100f8 <LidarSetPos+0x6a8>)
 800fe72:	461c      	mov	r4, r3
 800fe74:	4615      	mov	r5, r2
 800fe76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// Offset 2 poles
	float center_1_to_center[1][7] = {{PoleSpeed, 2.6, 0.2, -90, 0, 0, 0}};
 800fe82:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800fe86:	4a9d      	ldr	r2, [pc, #628]	; (80100fc <LidarSetPos+0x6ac>)
 800fe88:	461c      	mov	r4, r3
 800fe8a:	4615      	mov	r5, r2
 800fe8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_1[1][7] = {{PoleSpeed, -2.7, 0.2, -90, 0, 0, 0}};
 800fe98:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800fe9c:	4a98      	ldr	r2, [pc, #608]	; (8010100 <LidarSetPos+0x6b0>)
 800fe9e:	461c      	mov	r4, r3
 800fea0:	4615      	mov	r5, r2
 800fea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800feaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_center_4[1][7] = {{PoleSpeed, 2.55, 0.2, -90, 0, 0, 0}};
 800feae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800feb2:	4a94      	ldr	r2, [pc, #592]	; (8010104 <LidarSetPos+0x6b4>)
 800feb4:	461c      	mov	r4, r3
 800feb6:	4615      	mov	r5, r2
 800feb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800feba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800febc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_center[1][7] = {{PoleSpeed, -2.7, 0.2, -90, 0, 0, 0}};
 800fec4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800fec8:	4a8d      	ldr	r2, [pc, #564]	; (8010100 <LidarSetPos+0x6b0>)
 800feca:	461c      	mov	r4, r3
 800fecc:	4615      	mov	r5, r2
 800fece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fed2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_center_3[1][7] = {{PoleSpeed, 2.0, 0.2, -90, 0, 0, 0}};
 800feda:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800fede:	4a8a      	ldr	r2, [pc, #552]	; (8010108 <LidarSetPos+0x6b8>)
 800fee0:	461c      	mov	r4, r3
 800fee2:	4615      	mov	r5, r2
 800fee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fee8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800feec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_center_2[1][7] = {{PoleSpeed, -1.85, 0.2, -90, 0, 0, 0}};
 800fef0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800fef4:	4a85      	ldr	r2, [pc, #532]	; (801010c <LidarSetPos+0x6bc>)
 800fef6:	461c      	mov	r4, r3
 800fef8:	4615      	mov	r5, r2
 800fefa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fefc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fefe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_upper_right[1][7] = {{PoleSpeed, 3.4, 0.0, -90, 0, 0, 0}};
 800ff06:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800ff0a:	4a81      	ldr	r2, [pc, #516]	; (8010110 <LidarSetPos+0x6c0>)
 800ff0c:	461c      	mov	r4, r3
 800ff0e:	4615      	mov	r5, r2
 800ff10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_3_to_upper_right_2[1][7] = {{PoleSpeed, 0.3, 6.0, -178.0, 0, 0, 0}};
 800ff1c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800ff20:	4a70      	ldr	r2, [pc, #448]	; (80100e4 <LidarSetPos+0x694>)
 800ff22:	461c      	mov	r4, r3
 800ff24:	4615      	mov	r5, r2
 800ff26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3[1][7] = {{PoleSpeed, 0.5, -4.2, -90, 0, 0, 0}};
 800ff32:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ff36:	4a77      	ldr	r2, [pc, #476]	; (8010114 <LidarSetPos+0x6c4>)
 800ff38:	461c      	mov	r4, r3
 800ff3a:	4615      	mov	r5, r2
 800ff3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float upper_right_to_center_3_2[1][7] = {{PoleSpeed, -3.3, 0.0, -90, 0, 0, 0}};
 800ff48:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ff4c:	4a72      	ldr	r2, [pc, #456]	; (8010118 <LidarSetPos+0x6c8>)
 800ff4e:	461c      	mov	r4, r3
 800ff50:	4615      	mov	r5, r2
 800ff52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_4_to_pick_right[1][7] = {{PoleSpeed, 2.5, -0.35, -90, 0, 0, 0}};
 800ff5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800ff62:	4a6e      	ldr	r2, [pc, #440]	; (801011c <LidarSetPos+0x6cc>)
 800ff64:	461c      	mov	r4, r3
 800ff66:	4615      	mov	r5, r2
 800ff68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff70:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float pick_right_to_center_4_servo[1][7] = {{4, 0, 0.4, -90, 0, 0, 0}};
 800ff74:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ff78:	4a69      	ldr	r2, [pc, #420]	; (8010120 <LidarSetPos+0x6d0>)
 800ff7a:	461c      	mov	r4, r3
 800ff7c:	4615      	mov	r5, r2
 800ff7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_4[1][7] = {{5, -2.1, 0.8, -90, 0, 0, 0}};
 800ff8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ff8e:	4a65      	ldr	r2, [pc, #404]	; (8010124 <LidarSetPos+0x6d4>)
 800ff90:	461c      	mov	r4, r3
 800ff92:	4615      	mov	r5, r2
 800ff94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ff9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_3[1][7] = {{5, -3.75, 0.8, -90, 0, 0, 0}};
 800ffa0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ffa4:	4a60      	ldr	r2, [pc, #384]	; (8010128 <LidarSetPos+0x6d8>)
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	4615      	mov	r5, r2
 800ffaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ffb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center[1][7] = {{5, -4.76, 0.8, -90, 0, 0, 0}};
 800ffb6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ffba:	4a5c      	ldr	r2, [pc, #368]	; (801012c <LidarSetPos+0x6dc>)
 800ffbc:	461c      	mov	r4, r3
 800ffbe:	4615      	mov	r5, r2
 800ffc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ffc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float pick_right_to_center_2[1][7] = {{5, -5.76, 0.8, -90, 0, 0, 0}};
 800ffcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ffd0:	4a57      	ldr	r2, [pc, #348]	; (8010130 <LidarSetPos+0x6e0>)
 800ffd2:	461c      	mov	r4, r3
 800ffd4:	4615      	mov	r5, r2
 800ffd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ffda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ffde:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	float center_3_to_pick_right[1][7] = {{PoleSpeed, 6, -0.25, -90, 0, 0, 0}};
 800ffe2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ffe6:	4a53      	ldr	r2, [pc, #332]	; (8010134 <LidarSetPos+0x6e4>)
 800ffe8:	461c      	mov	r4, r3
 800ffea:	4615      	mov	r5, r2
 800ffec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_to_pick_right[1][7] = {{PoleSpeed, 7, -0.25, -90, 0, 0, 0}};
 800fff8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fffc:	4a4e      	ldr	r2, [pc, #312]	; (8010138 <LidarSetPos+0x6e8>)
 800fffe:	461c      	mov	r4, r3
 8010000:	4615      	mov	r5, r2
 8010002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801000a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_2_to_pick_right[1][7] = {{PoleSpeed, 8.5, -0.25, -90, 0, 0, 0}};
 801000e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010012:	4a4a      	ldr	r2, [pc, #296]	; (801013c <LidarSetPos+0x6ec>)
 8010014:	461c      	mov	r4, r3
 8010016:	4615      	mov	r5, r2
 8010018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801001a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801001c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float center_1_to_pick_right[1][7] = {{PoleSpeed, 10, -0.25, -90, 0, 0, 0}};
 8010024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010028:	4a45      	ldr	r2, [pc, #276]	; (8010140 <LidarSetPos+0x6f0>)
 801002a:	461c      	mov	r4, r3
 801002c:	4615      	mov	r5, r2
 801002e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010032:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010036:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	float robot_center[1][7] = {{2.0, pp.real_x, pp.real_y + 0.1, -90, 0, 0, 0}};
 801003a:	f107 0308 	add.w	r3, r7, #8
 801003e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	4b3f      	ldr	r3, [pc, #252]	; (8010144 <LidarSetPos+0x6f4>)
 8010046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010048:	f107 0308 	add.w	r3, r7, #8
 801004c:	605a      	str	r2, [r3, #4]
 801004e:	4b3d      	ldr	r3, [pc, #244]	; (8010144 <LidarSetPos+0x6f4>)
 8010050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010052:	4618      	mov	r0, r3
 8010054:	f7f0 fa78 	bl	8000548 <__aeabi_f2d>
 8010058:	a31d      	add	r3, pc, #116	; (adr r3, 80100d0 <LidarSetPos+0x680>)
 801005a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801005e:	f7f0 f915 	bl	800028c <__adddf3>
 8010062:	4602      	mov	r2, r0
 8010064:	460b      	mov	r3, r1
 8010066:	4610      	mov	r0, r2
 8010068:	4619      	mov	r1, r3
 801006a:	f7f0 fdbd 	bl	8000be8 <__aeabi_d2f>
 801006e:	4602      	mov	r2, r0
 8010070:	f107 0308 	add.w	r3, r7, #8
 8010074:	609a      	str	r2, [r3, #8]
 8010076:	f107 0308 	add.w	r3, r7, #8
 801007a:	4a33      	ldr	r2, [pc, #204]	; (8010148 <LidarSetPos+0x6f8>)
 801007c:	60da      	str	r2, [r3, #12]
 801007e:	f107 0308 	add.w	r3, r7, #8
 8010082:	f04f 0200 	mov.w	r2, #0
 8010086:	611a      	str	r2, [r3, #16]
 8010088:	f107 0308 	add.w	r3, r7, #8
 801008c:	f04f 0200 	mov.w	r2, #0
 8010090:	615a      	str	r2, [r3, #20]
 8010092:	f107 0308 	add.w	r3, r7, #8
 8010096:	f04f 0200 	mov.w	r2, #0
 801009a:	619a      	str	r2, [r3, #24]

	switch(pose) // Target Pose
 801009c:	1dfb      	adds	r3, r7, #7
 801009e:	781b      	ldrb	r3, [r3, #0]
 80100a0:	3b02      	subs	r3, #2
 80100a2:	2b07      	cmp	r3, #7
 80100a4:	f204 814a 	bhi.w	801433c <LidarSetPos+0x48ec>
 80100a8:	a201      	add	r2, pc, #4	; (adr r2, 80100b0 <LidarSetPos+0x660>)
 80100aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ae:	bf00      	nop
 80100b0:	0801014d 	.word	0x0801014d
 80100b4:	080101bb 	.word	0x080101bb
 80100b8:	080109b3 	.word	0x080109b3
 80100bc:	08011757 	.word	0x08011757
 80100c0:	08012441 	.word	0x08012441
 80100c4:	08013271 	.word	0x08013271
 80100c8:	08013c9d 	.word	0x08013c9d
 80100cc:	08013ca1 	.word	0x08013ca1
 80100d0:	9999999a 	.word	0x9999999a
 80100d4:	3fb99999 	.word	0x3fb99999
 80100d8:	08025774 	.word	0x08025774
 80100dc:	08025790 	.word	0x08025790
 80100e0:	080257ac 	.word	0x080257ac
 80100e4:	080257c8 	.word	0x080257c8
 80100e8:	080257e4 	.word	0x080257e4
 80100ec:	08025800 	.word	0x08025800
 80100f0:	0802581c 	.word	0x0802581c
 80100f4:	08025838 	.word	0x08025838
 80100f8:	08025854 	.word	0x08025854
 80100fc:	08025870 	.word	0x08025870
 8010100:	0802588c 	.word	0x0802588c
 8010104:	080258a8 	.word	0x080258a8
 8010108:	080258c4 	.word	0x080258c4
 801010c:	080258e0 	.word	0x080258e0
 8010110:	080258fc 	.word	0x080258fc
 8010114:	08025918 	.word	0x08025918
 8010118:	08025934 	.word	0x08025934
 801011c:	08025950 	.word	0x08025950
 8010120:	0802596c 	.word	0x0802596c
 8010124:	08025988 	.word	0x08025988
 8010128:	080259a4 	.word	0x080259a4
 801012c:	080259c0 	.word	0x080259c0
 8010130:	080259dc 	.word	0x080259dc
 8010134:	080259f8 	.word	0x080259f8
 8010138:	08025a14 	.word	0x08025a14
 801013c:	08025a30 	.word	0x08025a30
 8010140:	08025a4c 	.word	0x08025a4c
 8010144:	20006d44 	.word	0x20006d44
 8010148:	c2b40000 	.word	0xc2b40000
	{
		case UPPER_LEFT:
			switch(lidar->pos) // Self Pose
 801014c:	463b      	mov	r3, r7
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8010154:	3b01      	subs	r3, #1
 8010156:	2b08      	cmp	r3, #8
 8010158:	d82c      	bhi.n	80101b4 <LidarSetPos+0x764>
 801015a:	a201      	add	r2, pc, #4	; (adr r2, 8010160 <LidarSetPos+0x710>)
 801015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010160:	08010185 	.word	0x08010185
 8010164:	080101b5 	.word	0x080101b5
 8010168:	080101b5 	.word	0x080101b5
 801016c:	080101b5 	.word	0x080101b5
 8010170:	0801019d 	.word	0x0801019d
 8010174:	080101b5 	.word	0x080101b5
 8010178:	080101b5 	.word	0x080101b5
 801017c:	080101a9 	.word	0x080101a9
 8010180:	08010191 	.word	0x08010191
			{
				case PICK_LEFT:
					lidar->pos = UPPER_LEFT;
 8010184:	463b      	mov	r3, r7
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2202      	movs	r2, #2
 801018a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801018e:	e012      	b.n	80101b6 <LidarSetPos+0x766>

				case PICK_RIGHT:
					lidar->pos = UPPER_LEFT;
 8010190:	463b      	mov	r3, r7
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2202      	movs	r2, #2
 8010196:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801019a:	e00c      	b.n	80101b6 <LidarSetPos+0x766>

				case CENTER:
					lidar->pos = UPPER_LEFT;
 801019c:	463b      	mov	r3, r7
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2202      	movs	r2, #2
 80101a2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80101a6:	e006      	b.n	80101b6 <LidarSetPos+0x766>

				case UPPER_RIGHT:
					lidar->pos = UPPER_LEFT;
 80101a8:	463b      	mov	r3, r7
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2202      	movs	r2, #2
 80101ae:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80101b2:	e000      	b.n	80101b6 <LidarSetPos+0x766>

				default:
					break;
 80101b4:	bf00      	nop

			}
			break;
 80101b6:	f004 b8c2 	b.w	801433e <LidarSetPos+0x48ee>

		case CENTER_1:

			switch(lidar->pos) // Self Pose
 80101ba:	463b      	mov	r3, r7
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80101c2:	3b01      	subs	r3, #1
 80101c4:	2b08      	cmp	r3, #8
 80101c6:	f200 83e2 	bhi.w	801098e <LidarSetPos+0xf3e>
 80101ca:	a201      	add	r2, pc, #4	; (adr r2, 80101d0 <LidarSetPos+0x780>)
 80101cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d0:	080101f5 	.word	0x080101f5
 80101d4:	08010285 	.word	0x08010285
 80101d8:	0801098f 	.word	0x0801098f
 80101dc:	0801029d 	.word	0x0801029d
 80101e0:	080104d9 	.word	0x080104d9
 80101e4:	080106e9 	.word	0x080106e9
 80101e8:	08010865 	.word	0x08010865
 80101ec:	08010291 	.word	0x08010291
 80101f0:	08010279 	.word	0x08010279
			{
				case PICK_LEFT:
					lidar->fail = 0;
 80101f4:	463b      	mov	r3, r7
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2200      	movs	r2, #0
 80101fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 80101fe:	4bab      	ldr	r3, [pc, #684]	; (80104ac <LidarSetPos+0xa5c>)
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8010204:	4baa      	ldr	r3, [pc, #680]	; (80104b0 <LidarSetPos+0xa60>)
 8010206:	4aab      	ldr	r2, [pc, #684]	; (80104b4 <LidarSetPos+0xa64>)
 8010208:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 801020a:	4bab      	ldr	r3, [pc, #684]	; (80104b8 <LidarSetPos+0xa68>)
 801020c:	4aab      	ldr	r2, [pc, #684]	; (80104bc <LidarSetPos+0xa6c>)
 801020e:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 8010210:	f7fe f89c 	bl	800e34c <ResetCoordinate>
					lidar->pos = CENTER_1;
 8010214:	463b      	mov	r3, r7
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2203      	movs	r2, #3
 801021a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					PP_start(pick_left_adjust, 1, &pp);
 801021e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8010222:	4aa7      	ldr	r2, [pc, #668]	; (80104c0 <LidarSetPos+0xa70>)
 8010224:	2101      	movs	r1, #1
 8010226:	4618      	mov	r0, r3
 8010228:	f7f5 fcd2 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 801022c:	e00d      	b.n	801024a <LidarSetPos+0x7fa>
					{
						if(ps4.button == SQUARE)
 801022e:	4ba5      	ldr	r3, [pc, #660]	; (80104c4 <LidarSetPos+0xa74>)
 8010230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010236:	d108      	bne.n	801024a <LidarSetPos+0x7fa>
						{
							while(ps4.button == SQUARE);
 8010238:	bf00      	nop
 801023a:	4ba2      	ldr	r3, [pc, #648]	; (80104c4 <LidarSetPos+0xa74>)
 801023c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801023e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010242:	d0fa      	beq.n	801023a <LidarSetPos+0x7ea>
							PP_stop(&pp);
 8010244:	489e      	ldr	r0, [pc, #632]	; (80104c0 <LidarSetPos+0xa70>)
 8010246:	f7f5 fffb 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 801024a:	4b9d      	ldr	r3, [pc, #628]	; (80104c0 <LidarSetPos+0xa70>)
 801024c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010250:	f003 0301 	and.w	r3, r3, #1
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d1e9      	bne.n	801022e <LidarSetPos+0x7de>
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

//					Shot();
					stick_fence = 1;
 801025a:	4b94      	ldr	r3, [pc, #592]	; (80104ac <LidarSetPos+0xa5c>)
 801025c:	2201      	movs	r2, #1
 801025e:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 8010260:	463b      	mov	r3, r7
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010268:	2b00      	cmp	r3, #0
 801026a:	f040 8393 	bne.w	8010994 <LidarSetPos+0xf44>
						LidarAdjust(lidar);
 801026e:	463b      	mov	r3, r7
 8010270:	6818      	ldr	r0, [r3, #0]
 8010272:	f004 ffb9 	bl	80151e8 <LidarAdjust>
					break;
 8010276:	e38d      	b.n	8010994 <LidarSetPos+0xf44>

				case PICK_RIGHT:
					lidar->pos = CENTER_1;
 8010278:	463b      	mov	r3, r7
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2203      	movs	r2, #3
 801027e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010282:	e394      	b.n	80109ae <LidarSetPos+0xf5e>

				case UPPER_LEFT:
					lidar->pos = CENTER_1;
 8010284:	463b      	mov	r3, r7
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2203      	movs	r2, #3
 801028a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801028e:	e38e      	b.n	80109ae <LidarSetPos+0xf5e>

				case UPPER_RIGHT:
					lidar->pos = CENTER_1;
 8010290:	463b      	mov	r3, r7
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2203      	movs	r2, #3
 8010296:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801029a:	e388      	b.n	80109ae <LidarSetPos+0xf5e>

				case CENTER_2:
					lidar->fail = 0;
 801029c:	463b      	mov	r3, r7
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2200      	movs	r2, #0
 80102a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 80102a6:	4b81      	ldr	r3, [pc, #516]	; (80104ac <LidarSetPos+0xa5c>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 80102ac:	4b80      	ldr	r3, [pc, #512]	; (80104b0 <LidarSetPos+0xa60>)
 80102ae:	4a81      	ldr	r2, [pc, #516]	; (80104b4 <LidarSetPos+0xa64>)
 80102b0:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80102b2:	4b81      	ldr	r3, [pc, #516]	; (80104b8 <LidarSetPos+0xa68>)
 80102b4:	4a81      	ldr	r2, [pc, #516]	; (80104bc <LidarSetPos+0xa6c>)
 80102b6:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 80102b8:	463b      	mov	r3, r7
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d158      	bne.n	8010376 <LidarSetPos+0x926>
					{
						ResetCoordinate();
 80102c4:	f7fe f842 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_1;
 80102c8:	463b      	mov	r3, r7
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2203      	movs	r2, #3
 80102ce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_2_to_center_1, 1, &pp);
 80102d2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80102d6:	4a7a      	ldr	r2, [pc, #488]	; (80104c0 <LidarSetPos+0xa70>)
 80102d8:	2101      	movs	r1, #1
 80102da:	4618      	mov	r0, r3
 80102dc:	f7f5 fc78 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 80102e0:	e040      	b.n	8010364 <LidarSetPos+0x914>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 80102e2:	2108      	movs	r1, #8
 80102e4:	4878      	ldr	r0, [pc, #480]	; (80104c8 <LidarSetPos+0xa78>)
 80102e6:	f007 fd37 	bl	8017d58 <HAL_GPIO_ReadPin>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <LidarSetPos+0x8ae>
 80102f0:	2110      	movs	r1, #16
 80102f2:	4875      	ldr	r0, [pc, #468]	; (80104c8 <LidarSetPos+0xa78>)
 80102f4:	f007 fd30 	bl	8017d58 <HAL_GPIO_ReadPin>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d109      	bne.n	8010312 <LidarSetPos+0x8c2>
							{
								pp.target_y[0] = pp.real_y;
 80102fe:	4b70      	ldr	r3, [pc, #448]	; (80104c0 <LidarSetPos+0xa70>)
 8010300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010302:	4a6f      	ldr	r2, [pc, #444]	; (80104c0 <LidarSetPos+0xa70>)
 8010304:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010308:	4b6d      	ldr	r3, [pc, #436]	; (80104c0 <LidarSetPos+0xa70>)
 801030a:	f04f 0200 	mov.w	r2, #0
 801030e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_2_to_center_1[0][1])
 8010312:	4b6b      	ldr	r3, [pc, #428]	; (80104c0 <LidarSetPos+0xa70>)
 8010314:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010318:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 801031c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010328:	d809      	bhi.n	801033e <LidarSetPos+0x8ee>
							{
								pp.target_y[0] = pp.real_y;
 801032a:	4b65      	ldr	r3, [pc, #404]	; (80104c0 <LidarSetPos+0xa70>)
 801032c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801032e:	4a64      	ldr	r2, [pc, #400]	; (80104c0 <LidarSetPos+0xa70>)
 8010330:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010334:	4b62      	ldr	r3, [pc, #392]	; (80104c0 <LidarSetPos+0xa70>)
 8010336:	f04f 0200 	mov.w	r2, #0
 801033a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 801033e:	4b61      	ldr	r3, [pc, #388]	; (80104c4 <LidarSetPos+0xa74>)
 8010340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010346:	d10d      	bne.n	8010364 <LidarSetPos+0x914>
							{
								while(ps4.button == SQUARE);
 8010348:	bf00      	nop
 801034a:	4b5e      	ldr	r3, [pc, #376]	; (80104c4 <LidarSetPos+0xa74>)
 801034c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801034e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010352:	d0fa      	beq.n	801034a <LidarSetPos+0x8fa>
								PP_stop(&pp);
 8010354:	485a      	ldr	r0, [pc, #360]	; (80104c0 <LidarSetPos+0xa70>)
 8010356:	f7f5 ff73 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 801035a:	463b      	mov	r3, r7
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2201      	movs	r2, #1
 8010360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 8010364:	4b56      	ldr	r3, [pc, #344]	; (80104c0 <LidarSetPos+0xa70>)
 8010366:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801036a:	f003 0301 	and.w	r3, r3, #1
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d1b6      	bne.n	80102e2 <LidarSetPos+0x892>
 8010374:	e043      	b.n	80103fe <LidarSetPos+0x9ae>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_1;
 8010376:	463b      	mov	r3, r7
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2203      	movs	r2, #3
 801037c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_1, 1, &pp, 0, 0);
 8010380:	f207 40f4 	addw	r0, r7, #1268	; 0x4f4
 8010384:	2300      	movs	r3, #0
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	2300      	movs	r3, #0
 801038a:	4a4d      	ldr	r2, [pc, #308]	; (80104c0 <LidarSetPos+0xa70>)
 801038c:	2101      	movs	r1, #1
 801038e:	f7f5 fde5 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8010392:	e02c      	b.n	80103ee <LidarSetPos+0x99e>
						{
							if(ps4.button == SQUARE)
 8010394:	4b4b      	ldr	r3, [pc, #300]	; (80104c4 <LidarSetPos+0xa74>)
 8010396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801039c:	d108      	bne.n	80103b0 <LidarSetPos+0x960>
							{
								while(ps4.button == SQUARE);
 801039e:	bf00      	nop
 80103a0:	4b48      	ldr	r3, [pc, #288]	; (80104c4 <LidarSetPos+0xa74>)
 80103a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80103a8:	d0fa      	beq.n	80103a0 <LidarSetPos+0x950>
								PP_stop(&pp);
 80103aa:	4845      	ldr	r0, [pc, #276]	; (80104c0 <LidarSetPos+0xa70>)
 80103ac:	f7f5 ff48 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_1[0][1] + Offset)
 80103b0:	4b46      	ldr	r3, [pc, #280]	; (80104cc <LidarSetPos+0xa7c>)
 80103b2:	69db      	ldr	r3, [r3, #28]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7f0 f8c7 	bl	8000548 <__aeabi_f2d>
 80103ba:	4604      	mov	r4, r0
 80103bc:	460d      	mov	r5, r1
 80103be:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7f0 f8bf 	bl	8000548 <__aeabi_f2d>
 80103ca:	f04f 0200 	mov.w	r2, #0
 80103ce:	4b40      	ldr	r3, [pc, #256]	; (80104d0 <LidarSetPos+0xa80>)
 80103d0:	f7ef ff5c 	bl	800028c <__adddf3>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4620      	mov	r0, r4
 80103da:	4629      	mov	r1, r5
 80103dc:	f7f0 fb88 	bl	8000af0 <__aeabi_dcmple>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d100      	bne.n	80103e8 <LidarSetPos+0x998>
 80103e6:	e002      	b.n	80103ee <LidarSetPos+0x99e>
								PP_stop(&pp);
 80103e8:	4835      	ldr	r0, [pc, #212]	; (80104c0 <LidarSetPos+0xa70>)
 80103ea:	f7f5 ff29 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 80103ee:	4b34      	ldr	r3, [pc, #208]	; (80104c0 <LidarSetPos+0xa70>)
 80103f0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80103f4:	f003 0310 	and.w	r3, r3, #16
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1ca      	bne.n	8010394 <LidarSetPos+0x944>
						}
					}

					PP_start(robot_center, 1, &pp);
 80103fe:	f107 0308 	add.w	r3, r7, #8
 8010402:	4a2f      	ldr	r2, [pc, #188]	; (80104c0 <LidarSetPos+0xa70>)
 8010404:	2101      	movs	r1, #1
 8010406:	4618      	mov	r0, r3
 8010408:	f7f5 fbe2 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801040c:	f005 fe28 	bl	8016060 <HAL_GetTick>
 8010410:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8010414:	e026      	b.n	8010464 <LidarSetPos+0xa14>
					{
						after = HAL_GetTick();
 8010416:	f005 fe23 	bl	8016060 <HAL_GetTick>
 801041a:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 801041e:	4b28      	ldr	r3, [pc, #160]	; (80104c0 <LidarSetPos+0xa70>)
 8010420:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010424:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80104d4 <LidarSetPos+0xa84>
 8010428:	eef4 7ac7 	vcmpe.f32	s15, s14
 801042c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010430:	d80a      	bhi.n	8010448 <LidarSetPos+0x9f8>
 8010432:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8010436:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010440:	d302      	bcc.n	8010448 <LidarSetPos+0x9f8>
							PP_stop(&pp);
 8010442:	481f      	ldr	r0, [pc, #124]	; (80104c0 <LidarSetPos+0xa70>)
 8010444:	f7f5 fefc 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8010448:	4b1e      	ldr	r3, [pc, #120]	; (80104c4 <LidarSetPos+0xa74>)
 801044a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801044c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010450:	d108      	bne.n	8010464 <LidarSetPos+0xa14>
						{
							while(ps4.button == SQUARE);
 8010452:	bf00      	nop
 8010454:	4b1b      	ldr	r3, [pc, #108]	; (80104c4 <LidarSetPos+0xa74>)
 8010456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801045c:	d0fa      	beq.n	8010454 <LidarSetPos+0xa04>
							PP_stop(&pp);
 801045e:	4818      	ldr	r0, [pc, #96]	; (80104c0 <LidarSetPos+0xa70>)
 8010460:	f7f5 feee 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8010464:	4b16      	ldr	r3, [pc, #88]	; (80104c0 <LidarSetPos+0xa70>)
 8010466:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801046a:	f003 0301 	and.w	r3, r3, #1
 801046e:	b2db      	uxtb	r3, r3
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1d0      	bne.n	8010416 <LidarSetPos+0x9c6>
						}
					}

					stick_fence = 1;
 8010474:	4b0d      	ldr	r3, [pc, #52]	; (80104ac <LidarSetPos+0xa5c>)
 8010476:	2201      	movs	r2, #1
 8010478:	601a      	str	r2, [r3, #0]

					if(lidar->autoshot)
 801047a:	463b      	mov	r3, r7
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8010482:	2b00      	cmp	r3, #0
 8010484:	d005      	beq.n	8010492 <LidarSetPos+0xa42>
					{
						osDelay(300);
 8010486:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801048a:	f00c fb1f 	bl	801cacc <osDelay>
						Shot();
 801048e:	f7fe faab 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8010492:	463b      	mov	r3, r7
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801049a:	2b00      	cmp	r3, #0
 801049c:	f040 827d 	bne.w	801099a <LidarSetPos+0xf4a>
						LidarAdjust(lidar);
 80104a0:	463b      	mov	r3, r7
 80104a2:	6818      	ldr	r0, [r3, #0]
 80104a4:	f004 fea0 	bl	80151e8 <LidarAdjust>
					break;
 80104a8:	e277      	b.n	801099a <LidarSetPos+0xf4a>
 80104aa:	bf00      	nop
 80104ac:	200073d0 	.word	0x200073d0
 80104b0:	20007494 	.word	0x20007494
 80104b4:	445e8000 	.word	0x445e8000
 80104b8:	200065b8 	.word	0x200065b8
 80104bc:	406ccccd 	.word	0x406ccccd
 80104c0:	20006d44 	.word	0x20006d44
 80104c4:	2000a240 	.word	0x2000a240
 80104c8:	40020c00 	.word	0x40020c00
 80104cc:	20007728 	.word	0x20007728
 80104d0:	3fe00000 	.word	0x3fe00000
 80104d4:	c2b20000 	.word	0xc2b20000

				case CENTER:
					stick_fence = 0;
 80104d8:	4bb7      	ldr	r3, [pc, #732]	; (80107b8 <LidarSetPos+0xd68>)
 80104da:	2200      	movs	r2, #0
 80104dc:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 80104de:	4bb7      	ldr	r3, [pc, #732]	; (80107bc <LidarSetPos+0xd6c>)
 80104e0:	4ab7      	ldr	r2, [pc, #732]	; (80107c0 <LidarSetPos+0xd70>)
 80104e2:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80104e4:	4bb7      	ldr	r3, [pc, #732]	; (80107c4 <LidarSetPos+0xd74>)
 80104e6:	4ab8      	ldr	r2, [pc, #736]	; (80107c8 <LidarSetPos+0xd78>)
 80104e8:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 80104ea:	463b      	mov	r3, r7
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

					if(!lidar->laser)
 80104f4:	463b      	mov	r3, r7
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d159      	bne.n	80105b4 <LidarSetPos+0xb64>
					{
						ResetCoordinate();
 8010500:	f7fd ff24 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_1;
 8010504:	463b      	mov	r3, r7
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2203      	movs	r2, #3
 801050a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_1, 1, &pp);
 801050e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010512:	4aae      	ldr	r2, [pc, #696]	; (80107cc <LidarSetPos+0xd7c>)
 8010514:	2101      	movs	r1, #1
 8010516:	4618      	mov	r0, r3
 8010518:	f7f5 fb5a 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 801051c:	e041      	b.n	80105a2 <LidarSetPos+0xb52>
						{
							if(ps4.button == SQUARE)
 801051e:	4bac      	ldr	r3, [pc, #688]	; (80107d0 <LidarSetPos+0xd80>)
 8010520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010526:	d10d      	bne.n	8010544 <LidarSetPos+0xaf4>
							{
								while(ps4.button == SQUARE);
 8010528:	bf00      	nop
 801052a:	4ba9      	ldr	r3, [pc, #676]	; (80107d0 <LidarSetPos+0xd80>)
 801052c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801052e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010532:	d0fa      	beq.n	801052a <LidarSetPos+0xada>
								PP_stop(&pp);
 8010534:	48a5      	ldr	r0, [pc, #660]	; (80107cc <LidarSetPos+0xd7c>)
 8010536:	f7f5 fe83 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 801053a:	463b      	mov	r3, r7
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2201      	movs	r2, #1
 8010540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER; // PP Failed
	//							lidar->pos_counter = CENTER;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010544:	2108      	movs	r1, #8
 8010546:	48a3      	ldr	r0, [pc, #652]	; (80107d4 <LidarSetPos+0xd84>)
 8010548:	f007 fc06 	bl	8017d58 <HAL_GPIO_ReadPin>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	d006      	beq.n	8010560 <LidarSetPos+0xb10>
 8010552:	2110      	movs	r1, #16
 8010554:	489f      	ldr	r0, [pc, #636]	; (80107d4 <LidarSetPos+0xd84>)
 8010556:	f007 fbff 	bl	8017d58 <HAL_GPIO_ReadPin>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d109      	bne.n	8010574 <LidarSetPos+0xb24>
							{
								pp.target_y[0] = pp.real_y;
 8010560:	4b9a      	ldr	r3, [pc, #616]	; (80107cc <LidarSetPos+0xd7c>)
 8010562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010564:	4a99      	ldr	r2, [pc, #612]	; (80107cc <LidarSetPos+0xd7c>)
 8010566:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801056a:	4b98      	ldr	r3, [pc, #608]	; (80107cc <LidarSetPos+0xd7c>)
 801056c:	f04f 0200 	mov.w	r2, #0
 8010570:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_to_center_1[0][1])
 8010574:	4b95      	ldr	r3, [pc, #596]	; (80107cc <LidarSetPos+0xd7c>)
 8010576:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 801057a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801057e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058a:	d900      	bls.n	801058e <LidarSetPos+0xb3e>
 801058c:	e009      	b.n	80105a2 <LidarSetPos+0xb52>
							{
								pp.target_y[0] = pp.real_y;
 801058e:	4b8f      	ldr	r3, [pc, #572]	; (80107cc <LidarSetPos+0xd7c>)
 8010590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010592:	4a8e      	ldr	r2, [pc, #568]	; (80107cc <LidarSetPos+0xd7c>)
 8010594:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010598:	4b8c      	ldr	r3, [pc, #560]	; (80107cc <LidarSetPos+0xd7c>)
 801059a:	f04f 0200 	mov.w	r2, #0
 801059e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 80105a2:	4b8a      	ldr	r3, [pc, #552]	; (80107cc <LidarSetPos+0xd7c>)
 80105a4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80105a8:	f003 0301 	and.w	r3, r3, #1
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d1b5      	bne.n	801051e <LidarSetPos+0xace>
 80105b2:	e043      	b.n	801063c <LidarSetPos+0xbec>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_1;
 80105b4:	463b      	mov	r3, r7
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2203      	movs	r2, #3
 80105ba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_1, 1, &pp, 0, 0);
 80105be:	f207 40f4 	addw	r0, r7, #1268	; 0x4f4
 80105c2:	2300      	movs	r3, #0
 80105c4:	9300      	str	r3, [sp, #0]
 80105c6:	2300      	movs	r3, #0
 80105c8:	4a80      	ldr	r2, [pc, #512]	; (80107cc <LidarSetPos+0xd7c>)
 80105ca:	2101      	movs	r1, #1
 80105cc:	f7f5 fcc6 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 80105d0:	e02c      	b.n	801062c <LidarSetPos+0xbdc>
						{
							if(ps4.button == SQUARE)
 80105d2:	4b7f      	ldr	r3, [pc, #508]	; (80107d0 <LidarSetPos+0xd80>)
 80105d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105da:	d108      	bne.n	80105ee <LidarSetPos+0xb9e>
							{
								while(ps4.button == SQUARE);
 80105dc:	bf00      	nop
 80105de:	4b7c      	ldr	r3, [pc, #496]	; (80107d0 <LidarSetPos+0xd80>)
 80105e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105e6:	d0fa      	beq.n	80105de <LidarSetPos+0xb8e>
								PP_stop(&pp);
 80105e8:	4878      	ldr	r0, [pc, #480]	; (80107cc <LidarSetPos+0xd7c>)
 80105ea:	f7f5 fe29 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_1[0][1] + Offset_2)
 80105ee:	4b7a      	ldr	r3, [pc, #488]	; (80107d8 <LidarSetPos+0xd88>)
 80105f0:	69db      	ldr	r3, [r3, #28]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7ef ffa8 	bl	8000548 <__aeabi_f2d>
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4618      	mov	r0, r3
 8010604:	f7ef ffa0 	bl	8000548 <__aeabi_f2d>
 8010608:	f04f 0200 	mov.w	r2, #0
 801060c:	4b73      	ldr	r3, [pc, #460]	; (80107dc <LidarSetPos+0xd8c>)
 801060e:	f7ef fe3d 	bl	800028c <__adddf3>
 8010612:	4602      	mov	r2, r0
 8010614:	460b      	mov	r3, r1
 8010616:	4620      	mov	r0, r4
 8010618:	4629      	mov	r1, r5
 801061a:	f7f0 fa69 	bl	8000af0 <__aeabi_dcmple>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d100      	bne.n	8010626 <LidarSetPos+0xbd6>
 8010624:	e002      	b.n	801062c <LidarSetPos+0xbdc>
								PP_stop(&pp);
 8010626:	4869      	ldr	r0, [pc, #420]	; (80107cc <LidarSetPos+0xd7c>)
 8010628:	f7f5 fe0a 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 801062c:	4b67      	ldr	r3, [pc, #412]	; (80107cc <LidarSetPos+0xd7c>)
 801062e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010632:	f003 0310 	and.w	r3, r3, #16
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1ca      	bne.n	80105d2 <LidarSetPos+0xb82>
						}

					}

					PP_start(robot_center, 1, &pp);
 801063c:	f107 0308 	add.w	r3, r7, #8
 8010640:	4a62      	ldr	r2, [pc, #392]	; (80107cc <LidarSetPos+0xd7c>)
 8010642:	2101      	movs	r1, #1
 8010644:	4618      	mov	r0, r3
 8010646:	f7f5 fac3 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801064a:	f005 fd09 	bl	8016060 <HAL_GetTick>
 801064e:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8010652:	e026      	b.n	80106a2 <LidarSetPos+0xc52>
					{
						after = HAL_GetTick();
 8010654:	f005 fd04 	bl	8016060 <HAL_GetTick>
 8010658:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 801065c:	4b5b      	ldr	r3, [pc, #364]	; (80107cc <LidarSetPos+0xd7c>)
 801065e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010662:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80107e0 <LidarSetPos+0xd90>
 8010666:	eef4 7ac7 	vcmpe.f32	s15, s14
 801066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066e:	d80a      	bhi.n	8010686 <LidarSetPos+0xc36>
 8010670:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8010674:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801067e:	d302      	bcc.n	8010686 <LidarSetPos+0xc36>
							PP_stop(&pp);
 8010680:	4852      	ldr	r0, [pc, #328]	; (80107cc <LidarSetPos+0xd7c>)
 8010682:	f7f5 fddd 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8010686:	4b52      	ldr	r3, [pc, #328]	; (80107d0 <LidarSetPos+0xd80>)
 8010688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801068a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801068e:	d108      	bne.n	80106a2 <LidarSetPos+0xc52>
						{
							while(ps4.button == SQUARE);
 8010690:	bf00      	nop
 8010692:	4b4f      	ldr	r3, [pc, #316]	; (80107d0 <LidarSetPos+0xd80>)
 8010694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801069a:	d0fa      	beq.n	8010692 <LidarSetPos+0xc42>
							PP_stop(&pp);
 801069c:	484b      	ldr	r0, [pc, #300]	; (80107cc <LidarSetPos+0xd7c>)
 801069e:	f7f5 fdcf 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80106a2:	4b4a      	ldr	r3, [pc, #296]	; (80107cc <LidarSetPos+0xd7c>)
 80106a4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80106a8:	f003 0301 	and.w	r3, r3, #1
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d1d0      	bne.n	8010654 <LidarSetPos+0xc04>
						}
					}

					stick_fence = 1;
 80106b2:	4b41      	ldr	r3, [pc, #260]	; (80107b8 <LidarSetPos+0xd68>)
 80106b4:	2201      	movs	r2, #1
 80106b6:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80106b8:	463b      	mov	r3, r7
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d005      	beq.n	80106d0 <LidarSetPos+0xc80>
					{
						osDelay(300);
 80106c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80106c8:	f00c fa00 	bl	801cacc <osDelay>
						Shot();
 80106cc:	f7fe f98c 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 80106d0:	463b      	mov	r3, r7
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f040 8161 	bne.w	80109a0 <LidarSetPos+0xf50>
						LidarAdjust(lidar);
 80106de:	463b      	mov	r3, r7
 80106e0:	6818      	ldr	r0, [r3, #0]
 80106e2:	f004 fd81 	bl	80151e8 <LidarAdjust>
					break;
 80106e6:	e15b      	b.n	80109a0 <LidarSetPos+0xf50>

				case CENTER_3:
					vesc_duty = type1Duty;
 80106e8:	4b34      	ldr	r3, [pc, #208]	; (80107bc <LidarSetPos+0xd6c>)
 80106ea:	4a35      	ldr	r2, [pc, #212]	; (80107c0 <LidarSetPos+0xd70>)
 80106ec:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80106ee:	4b35      	ldr	r3, [pc, #212]	; (80107c4 <LidarSetPos+0xd74>)
 80106f0:	4a35      	ldr	r2, [pc, #212]	; (80107c8 <LidarSetPos+0xd78>)
 80106f2:	601a      	str	r2, [r3, #0]
					lidar->pos = CENTER_1;
 80106f4:	463b      	mov	r3, r7
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2203      	movs	r2, #3
 80106fa:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_1, 1, &pp, 0, 0);
 80106fe:	f207 40f4 	addw	r0, r7, #1268	; 0x4f4
 8010702:	2300      	movs	r3, #0
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	2300      	movs	r3, #0
 8010708:	4a30      	ldr	r2, [pc, #192]	; (80107cc <LidarSetPos+0xd7c>)
 801070a:	2101      	movs	r1, #1
 801070c:	f7f5 fc26 	bl	8005f5c <LSR_start>
					while(pp.lsr_start)
 8010710:	e035      	b.n	801077e <LidarSetPos+0xd2e>
					{
						if(ps4.button == SQUARE)
 8010712:	4b2f      	ldr	r3, [pc, #188]	; (80107d0 <LidarSetPos+0xd80>)
 8010714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801071a:	d108      	bne.n	801072e <LidarSetPos+0xcde>
						{
							while(ps4.button == SQUARE);
 801071c:	bf00      	nop
 801071e:	4b2c      	ldr	r3, [pc, #176]	; (80107d0 <LidarSetPos+0xd80>)
 8010720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010726:	d0fa      	beq.n	801071e <LidarSetPos+0xcce>
							PP_stop(&pp);
 8010728:	4828      	ldr	r0, [pc, #160]	; (80107cc <LidarSetPos+0xd7c>)
 801072a:	f7f5 fd89 	bl	8006240 <PP_stop>
						}

						if(lsrL.dist <= lsr_center_1[0][1] + Offset_3 - 0.1)
 801072e:	4b2a      	ldr	r3, [pc, #168]	; (80107d8 <LidarSetPos+0xd88>)
 8010730:	69db      	ldr	r3, [r3, #28]
 8010732:	4618      	mov	r0, r3
 8010734:	f7ef ff08 	bl	8000548 <__aeabi_f2d>
 8010738:	4604      	mov	r4, r0
 801073a:	460d      	mov	r5, r1
 801073c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4618      	mov	r0, r3
 8010744:	f7ef ff00 	bl	8000548 <__aeabi_f2d>
 8010748:	a317      	add	r3, pc, #92	; (adr r3, 80107a8 <LidarSetPos+0xd58>)
 801074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074e:	f7ef fd9d 	bl	800028c <__adddf3>
 8010752:	4602      	mov	r2, r0
 8010754:	460b      	mov	r3, r1
 8010756:	4610      	mov	r0, r2
 8010758:	4619      	mov	r1, r3
 801075a:	a315      	add	r3, pc, #84	; (adr r3, 80107b0 <LidarSetPos+0xd60>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	f7ef fd92 	bl	8000288 <__aeabi_dsub>
 8010764:	4602      	mov	r2, r0
 8010766:	460b      	mov	r3, r1
 8010768:	4620      	mov	r0, r4
 801076a:	4629      	mov	r1, r5
 801076c:	f7f0 f9c0 	bl	8000af0 <__aeabi_dcmple>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d100      	bne.n	8010778 <LidarSetPos+0xd28>
 8010776:	e002      	b.n	801077e <LidarSetPos+0xd2e>
							PP_stop(&pp);
 8010778:	4814      	ldr	r0, [pc, #80]	; (80107cc <LidarSetPos+0xd7c>)
 801077a:	f7f5 fd61 	bl	8006240 <PP_stop>
					while(pp.lsr_start)
 801077e:	4b13      	ldr	r3, [pc, #76]	; (80107cc <LidarSetPos+0xd7c>)
 8010780:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010784:	f003 0310 	and.w	r3, r3, #16
 8010788:	b2db      	uxtb	r3, r3
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1c1      	bne.n	8010712 <LidarSetPos+0xcc2>
					}


					PP_start(robot_center, 1, &pp);
 801078e:	f107 0308 	add.w	r3, r7, #8
 8010792:	4a0e      	ldr	r2, [pc, #56]	; (80107cc <LidarSetPos+0xd7c>)
 8010794:	2101      	movs	r1, #1
 8010796:	4618      	mov	r0, r3
 8010798:	f7f5 fa1a 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801079c:	f005 fc60 	bl	8016060 <HAL_GetTick>
 80107a0:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 80107a4:	e045      	b.n	8010832 <LidarSetPos+0xde2>
 80107a6:	bf00      	nop
 80107a8:	9999999a 	.word	0x9999999a
 80107ac:	3fe99999 	.word	0x3fe99999
 80107b0:	9999999a 	.word	0x9999999a
 80107b4:	3fb99999 	.word	0x3fb99999
 80107b8:	200073d0 	.word	0x200073d0
 80107bc:	20007494 	.word	0x20007494
 80107c0:	445e8000 	.word	0x445e8000
 80107c4:	200065b8 	.word	0x200065b8
 80107c8:	406ccccd 	.word	0x406ccccd
 80107cc:	20006d44 	.word	0x20006d44
 80107d0:	2000a240 	.word	0x2000a240
 80107d4:	40020c00 	.word	0x40020c00
 80107d8:	20007728 	.word	0x20007728
 80107dc:	3fe80000 	.word	0x3fe80000
 80107e0:	c2b20000 	.word	0xc2b20000
					{
						after = HAL_GetTick();
 80107e4:	f005 fc3c 	bl	8016060 <HAL_GetTick>
 80107e8:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 80107ec:	4bba      	ldr	r3, [pc, #744]	; (8010ad8 <LidarSetPos+0x1088>)
 80107ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80107f2:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8010adc <LidarSetPos+0x108c>
 80107f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107fe:	d80a      	bhi.n	8010816 <LidarSetPos+0xdc6>
 8010800:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8010804:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801080e:	d302      	bcc.n	8010816 <LidarSetPos+0xdc6>
							PP_stop(&pp);
 8010810:	48b1      	ldr	r0, [pc, #708]	; (8010ad8 <LidarSetPos+0x1088>)
 8010812:	f7f5 fd15 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8010816:	4bb2      	ldr	r3, [pc, #712]	; (8010ae0 <LidarSetPos+0x1090>)
 8010818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801081a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801081e:	d108      	bne.n	8010832 <LidarSetPos+0xde2>
						{
							while(ps4.button == SQUARE);
 8010820:	bf00      	nop
 8010822:	4baf      	ldr	r3, [pc, #700]	; (8010ae0 <LidarSetPos+0x1090>)
 8010824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801082a:	d0fa      	beq.n	8010822 <LidarSetPos+0xdd2>
							PP_stop(&pp);
 801082c:	48aa      	ldr	r0, [pc, #680]	; (8010ad8 <LidarSetPos+0x1088>)
 801082e:	f7f5 fd07 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8010832:	4ba9      	ldr	r3, [pc, #676]	; (8010ad8 <LidarSetPos+0x1088>)
 8010834:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010838:	f003 0301 	and.w	r3, r3, #1
 801083c:	b2db      	uxtb	r3, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1d0      	bne.n	80107e4 <LidarSetPos+0xd94>
						}
					}

					stick_fence = 1;
 8010842:	4ba8      	ldr	r3, [pc, #672]	; (8010ae4 <LidarSetPos+0x1094>)
 8010844:	2201      	movs	r2, #1
 8010846:	601a      	str	r2, [r3, #0]

					if(lidar->autoshot)
 8010848:	463b      	mov	r3, r7
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8010850:	2b00      	cmp	r3, #0
 8010852:	f000 80a8 	beq.w	80109a6 <LidarSetPos+0xf56>
					{
						osDelay(300);
 8010856:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801085a:	f00c f937 	bl	801cacc <osDelay>
						Shot();
 801085e:	f7fe f8c3 	bl	800e9e8 <Shot>
					}
					break;
 8010862:	e0a0      	b.n	80109a6 <LidarSetPos+0xf56>

				case CENTER_4:
					vesc_duty = type1Duty;
 8010864:	4ba0      	ldr	r3, [pc, #640]	; (8010ae8 <LidarSetPos+0x1098>)
 8010866:	4aa1      	ldr	r2, [pc, #644]	; (8010aec <LidarSetPos+0x109c>)
 8010868:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 801086a:	4ba1      	ldr	r3, [pc, #644]	; (8010af0 <LidarSetPos+0x10a0>)
 801086c:	4aa1      	ldr	r2, [pc, #644]	; (8010af4 <LidarSetPos+0x10a4>)
 801086e:	601a      	str	r2, [r3, #0]
					lidar->pos = CENTER_1;
 8010870:	463b      	mov	r3, r7
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	2203      	movs	r2, #3
 8010876:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_1, 1, &pp, 0, 0);
 801087a:	f207 40f4 	addw	r0, r7, #1268	; 0x4f4
 801087e:	2300      	movs	r3, #0
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	2300      	movs	r3, #0
 8010884:	4a94      	ldr	r2, [pc, #592]	; (8010ad8 <LidarSetPos+0x1088>)
 8010886:	2101      	movs	r1, #1
 8010888:	f7f5 fb68 	bl	8005f5c <LSR_start>
					while(pp.lsr_start)
 801088c:	e02c      	b.n	80108e8 <LidarSetPos+0xe98>
					{
						if(ps4.button == SQUARE)
 801088e:	4b94      	ldr	r3, [pc, #592]	; (8010ae0 <LidarSetPos+0x1090>)
 8010890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010896:	d108      	bne.n	80108aa <LidarSetPos+0xe5a>
						{
							while(ps4.button == SQUARE);
 8010898:	bf00      	nop
 801089a:	4b91      	ldr	r3, [pc, #580]	; (8010ae0 <LidarSetPos+0x1090>)
 801089c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801089e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108a2:	d0fa      	beq.n	801089a <LidarSetPos+0xe4a>
							PP_stop(&pp);
 80108a4:	488c      	ldr	r0, [pc, #560]	; (8010ad8 <LidarSetPos+0x1088>)
 80108a6:	f7f5 fccb 	bl	8006240 <PP_stop>
						}

						if(lsrL.dist <= lsr_center_1[0][1] + Offset_4)
 80108aa:	4b93      	ldr	r3, [pc, #588]	; (8010af8 <LidarSetPos+0x10a8>)
 80108ac:	69db      	ldr	r3, [r3, #28]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7ef fe4a 	bl	8000548 <__aeabi_f2d>
 80108b4:	4604      	mov	r4, r0
 80108b6:	460d      	mov	r5, r1
 80108b8:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ef fe42 	bl	8000548 <__aeabi_f2d>
 80108c4:	a382      	add	r3, pc, #520	; (adr r3, 8010ad0 <LidarSetPos+0x1080>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	f7ef fcdf 	bl	800028c <__adddf3>
 80108ce:	4602      	mov	r2, r0
 80108d0:	460b      	mov	r3, r1
 80108d2:	4620      	mov	r0, r4
 80108d4:	4629      	mov	r1, r5
 80108d6:	f7f0 f90b 	bl	8000af0 <__aeabi_dcmple>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d100      	bne.n	80108e2 <LidarSetPos+0xe92>
 80108e0:	e002      	b.n	80108e8 <LidarSetPos+0xe98>
							PP_stop(&pp);
 80108e2:	487d      	ldr	r0, [pc, #500]	; (8010ad8 <LidarSetPos+0x1088>)
 80108e4:	f7f5 fcac 	bl	8006240 <PP_stop>
					while(pp.lsr_start)
 80108e8:	4b7b      	ldr	r3, [pc, #492]	; (8010ad8 <LidarSetPos+0x1088>)
 80108ea:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80108ee:	f003 0310 	and.w	r3, r3, #16
 80108f2:	b2db      	uxtb	r3, r3
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d1ca      	bne.n	801088e <LidarSetPos+0xe3e>
					}


					PP_start(robot_center, 1, &pp);
 80108f8:	f107 0308 	add.w	r3, r7, #8
 80108fc:	4a76      	ldr	r2, [pc, #472]	; (8010ad8 <LidarSetPos+0x1088>)
 80108fe:	2101      	movs	r1, #1
 8010900:	4618      	mov	r0, r3
 8010902:	f7f5 f965 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8010906:	f005 fbab 	bl	8016060 <HAL_GetTick>
 801090a:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 801090e:	e026      	b.n	801095e <LidarSetPos+0xf0e>
					{
						after = HAL_GetTick();
 8010910:	f005 fba6 	bl	8016060 <HAL_GetTick>
 8010914:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 8010918:	4b6f      	ldr	r3, [pc, #444]	; (8010ad8 <LidarSetPos+0x1088>)
 801091a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801091e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8010adc <LidarSetPos+0x108c>
 8010922:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092a:	d80a      	bhi.n	8010942 <LidarSetPos+0xef2>
 801092c:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8010930:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801093a:	d302      	bcc.n	8010942 <LidarSetPos+0xef2>
							PP_stop(&pp);
 801093c:	4866      	ldr	r0, [pc, #408]	; (8010ad8 <LidarSetPos+0x1088>)
 801093e:	f7f5 fc7f 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8010942:	4b67      	ldr	r3, [pc, #412]	; (8010ae0 <LidarSetPos+0x1090>)
 8010944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801094a:	d108      	bne.n	801095e <LidarSetPos+0xf0e>
						{
							while(ps4.button == SQUARE);
 801094c:	bf00      	nop
 801094e:	4b64      	ldr	r3, [pc, #400]	; (8010ae0 <LidarSetPos+0x1090>)
 8010950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010956:	d0fa      	beq.n	801094e <LidarSetPos+0xefe>
							PP_stop(&pp);
 8010958:	485f      	ldr	r0, [pc, #380]	; (8010ad8 <LidarSetPos+0x1088>)
 801095a:	f7f5 fc71 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 801095e:	4b5e      	ldr	r3, [pc, #376]	; (8010ad8 <LidarSetPos+0x1088>)
 8010960:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	b2db      	uxtb	r3, r3
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1d0      	bne.n	8010910 <LidarSetPos+0xec0>
						}
					}

					stick_fence = 1;
 801096e:	4b5d      	ldr	r3, [pc, #372]	; (8010ae4 <LidarSetPos+0x1094>)
 8010970:	2201      	movs	r2, #1
 8010972:	601a      	str	r2, [r3, #0]

					if(lidar->autoshot)
 8010974:	463b      	mov	r3, r7
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801097c:	2b00      	cmp	r3, #0
 801097e:	d015      	beq.n	80109ac <LidarSetPos+0xf5c>
					{
						osDelay(300);
 8010980:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010984:	f00c f8a2 	bl	801cacc <osDelay>
						Shot();
 8010988:	f7fe f82e 	bl	800e9e8 <Shot>
					}
					break;
 801098c:	e00e      	b.n	80109ac <LidarSetPos+0xf5c>

				default:
					break;
 801098e:	bf00      	nop
 8010990:	f003 bcd5 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8010994:	bf00      	nop
 8010996:	f003 bcd2 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801099a:	bf00      	nop
 801099c:	f003 bccf 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 80109a0:	bf00      	nop
 80109a2:	f003 bccc 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 80109a6:	bf00      	nop
 80109a8:	f003 bcc9 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 80109ac:	bf00      	nop
			}
			break;
 80109ae:	f003 bcc6 	b.w	801433e <LidarSetPos+0x48ee>

		case CENTER_2:
			switch(lidar->pos) // Self Pose
 80109b2:	463b      	mov	r3, r7
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80109ba:	3b01      	subs	r3, #1
 80109bc:	2b08      	cmp	r3, #8
 80109be:	f200 868b 	bhi.w	80116d8 <LidarSetPos+0x1c88>
 80109c2:	a201      	add	r2, pc, #4	; (adr r2, 80109c8 <LidarSetPos+0xf78>)
 80109c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c8:	080109ed 	.word	0x080109ed
 80109cc:	08010cc3 	.word	0x08010cc3
 80109d0:	08010cdf 	.word	0x08010cdf
 80109d4:	080116d9 	.word	0x080116d9
 80109d8:	08010f99 	.word	0x08010f99
 80109dc:	0801127f 	.word	0x0801127f
 80109e0:	08011541 	.word	0x08011541
 80109e4:	08010cd1 	.word	0x08010cd1
 80109e8:	08010a89 	.word	0x08010a89
			{
				case PICK_LEFT:
					lidar->fail = 0;
 80109ec:	463b      	mov	r3, r7
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2200      	movs	r2, #0
 80109f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					stick_fence = 0;
 80109f6:	4b3b      	ldr	r3, [pc, #236]	; (8010ae4 <LidarSetPos+0x1094>)
 80109f8:	2200      	movs	r2, #0
 80109fa:	601a      	str	r2, [r3, #0]
					if(blue)
 80109fc:	4b3f      	ldr	r3, [pc, #252]	; (8010afc <LidarSetPos+0x10ac>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d006      	beq.n	8010a12 <LidarSetPos+0xfc2>
					{
						vesc_speed = BlueOppoType2;
 8010a04:	4b3a      	ldr	r3, [pc, #232]	; (8010af0 <LidarSetPos+0x10a0>)
 8010a06:	4a3e      	ldr	r2, [pc, #248]	; (8010b00 <LidarSetPos+0x10b0>)
 8010a08:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2Duty + 10;
 8010a0a:	4b37      	ldr	r3, [pc, #220]	; (8010ae8 <LidarSetPos+0x1098>)
 8010a0c:	4a3d      	ldr	r2, [pc, #244]	; (8010b04 <LidarSetPos+0x10b4>)
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	e005      	b.n	8010a1e <LidarSetPos+0xfce>
					}
					else
					{
						vesc_speed = RedOppoType2;
 8010a12:	4b37      	ldr	r3, [pc, #220]	; (8010af0 <LidarSetPos+0x10a0>)
 8010a14:	4a3c      	ldr	r2, [pc, #240]	; (8010b08 <LidarSetPos+0x10b8>)
 8010a16:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2Duty + 10;
 8010a18:	4b33      	ldr	r3, [pc, #204]	; (8010ae8 <LidarSetPos+0x1098>)
 8010a1a:	4a3c      	ldr	r2, [pc, #240]	; (8010b0c <LidarSetPos+0x10bc>)
 8010a1c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8010a1e:	f7fd fc95 	bl	800e34c <ResetCoordinate>
					lidar->pos = CENTER_2;
 8010a22:	463b      	mov	r3, r7
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	2204      	movs	r2, #4
 8010a28:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_left_adjust_center_2, 1, &pp);
 8010a2c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8010a30:	4a29      	ldr	r2, [pc, #164]	; (8010ad8 <LidarSetPos+0x1088>)
 8010a32:	2101      	movs	r1, #1
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7f5 f8cb 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8010a3a:	e00d      	b.n	8010a58 <LidarSetPos+0x1008>
					{
						if(ps4.button == SQUARE)
 8010a3c:	4b28      	ldr	r3, [pc, #160]	; (8010ae0 <LidarSetPos+0x1090>)
 8010a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a44:	d108      	bne.n	8010a58 <LidarSetPos+0x1008>
						{
							while(ps4.button == SQUARE);
 8010a46:	bf00      	nop
 8010a48:	4b25      	ldr	r3, [pc, #148]	; (8010ae0 <LidarSetPos+0x1090>)
 8010a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a50:	d0fa      	beq.n	8010a48 <LidarSetPos+0xff8>
							PP_stop(&pp);
 8010a52:	4821      	ldr	r0, [pc, #132]	; (8010ad8 <LidarSetPos+0x1088>)
 8010a54:	f7f5 fbf4 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8010a58:	4b1f      	ldr	r3, [pc, #124]	; (8010ad8 <LidarSetPos+0x1088>)
 8010a5a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010a5e:	f003 0301 	and.w	r3, r3, #1
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1e9      	bne.n	8010a3c <LidarSetPos+0xfec>
						}
					}

					stick_fence = 1;
 8010a68:	4b1e      	ldr	r3, [pc, #120]	; (8010ae4 <LidarSetPos+0x1094>)
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 8010a6e:	463b      	mov	r3, r7
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f040 865e 	bne.w	8011738 <LidarSetPos+0x1ce8>
						LidarAdjust(lidar);
 8010a7c:	463b      	mov	r3, r7
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	f004 fbb2 	bl	80151e8 <LidarAdjust>
					break;
 8010a84:	f000 be58 	b.w	8011738 <LidarSetPos+0x1ce8>


				case PICK_RIGHT:
					stick_fence = 0;
 8010a88:	4b16      	ldr	r3, [pc, #88]	; (8010ae4 <LidarSetPos+0x1094>)
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	601a      	str	r2, [r3, #0]
					if(blue)
 8010a8e:	4b1b      	ldr	r3, [pc, #108]	; (8010afc <LidarSetPos+0x10ac>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d006      	beq.n	8010aa4 <LidarSetPos+0x1054>
					{
						vesc_speed = BlueType2;
 8010a96:	4b16      	ldr	r3, [pc, #88]	; (8010af0 <LidarSetPos+0x10a0>)
 8010a98:	4a1d      	ldr	r2, [pc, #116]	; (8010b10 <LidarSetPos+0x10c0>)
 8010a9a:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8010a9c:	4b12      	ldr	r3, [pc, #72]	; (8010ae8 <LidarSetPos+0x1098>)
 8010a9e:	4a1d      	ldr	r2, [pc, #116]	; (8010b14 <LidarSetPos+0x10c4>)
 8010aa0:	601a      	str	r2, [r3, #0]
 8010aa2:	e005      	b.n	8010ab0 <LidarSetPos+0x1060>
					}
					else
					{
						vesc_speed = RedType2;
 8010aa4:	4b12      	ldr	r3, [pc, #72]	; (8010af0 <LidarSetPos+0x10a0>)
 8010aa6:	4a1c      	ldr	r2, [pc, #112]	; (8010b18 <LidarSetPos+0x10c8>)
 8010aa8:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8010aaa:	4b0f      	ldr	r3, [pc, #60]	; (8010ae8 <LidarSetPos+0x1098>)
 8010aac:	4a1b      	ldr	r2, [pc, #108]	; (8010b1c <LidarSetPos+0x10cc>)
 8010aae:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8010ab0:	f7fd fc4c 	bl	800e34c <ResetCoordinate>
					lidar->pos = CENTER_2;
 8010ab4:	463b      	mov	r3, r7
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2204      	movs	r2, #4
 8010aba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 8010abe:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8010ac2:	4a05      	ldr	r2, [pc, #20]	; (8010ad8 <LidarSetPos+0x1088>)
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7f5 f882 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8010acc:	e036      	b.n	8010b3c <LidarSetPos+0x10ec>
 8010ace:	bf00      	nop
 8010ad0:	f5c28f5c 	.word	0xf5c28f5c
 8010ad4:	3fe75c28 	.word	0x3fe75c28
 8010ad8:	20006d44 	.word	0x20006d44
 8010adc:	c2b20000 	.word	0xc2b20000
 8010ae0:	2000a240 	.word	0x2000a240
 8010ae4:	200073d0 	.word	0x200073d0
 8010ae8:	20007494 	.word	0x20007494
 8010aec:	445e8000 	.word	0x445e8000
 8010af0:	200065b8 	.word	0x200065b8
 8010af4:	406ccccd 	.word	0x406ccccd
 8010af8:	20007728 	.word	0x20007728
 8010afc:	20006a44 	.word	0x20006a44
 8010b00:	414f3333 	.word	0x414f3333
 8010b04:	4502a000 	.word	0x4502a000
 8010b08:	4154cccd 	.word	0x4154cccd
 8010b0c:	45043000 	.word	0x45043000
 8010b10:	41026666 	.word	0x41026666
 8010b14:	44bea000 	.word	0x44bea000
 8010b18:	4104cccd 	.word	0x4104cccd
 8010b1c:	44c1c000 	.word	0x44c1c000
					{
						if(ps4.button == SQUARE)
 8010b20:	4bb3      	ldr	r3, [pc, #716]	; (8010df0 <LidarSetPos+0x13a0>)
 8010b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b28:	d108      	bne.n	8010b3c <LidarSetPos+0x10ec>
						{
							while(ps4.button == SQUARE);
 8010b2a:	bf00      	nop
 8010b2c:	4bb0      	ldr	r3, [pc, #704]	; (8010df0 <LidarSetPos+0x13a0>)
 8010b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b34:	d0fa      	beq.n	8010b2c <LidarSetPos+0x10dc>
							PP_stop(&pp);
 8010b36:	48af      	ldr	r0, [pc, #700]	; (8010df4 <LidarSetPos+0x13a4>)
 8010b38:	f7f5 fb82 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8010b3c:	4bad      	ldr	r3, [pc, #692]	; (8010df4 <LidarSetPos+0x13a4>)
 8010b3e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010b42:	f003 0301 	and.w	r3, r3, #1
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1e9      	bne.n	8010b20 <LidarSetPos+0x10d0>
						}
					}
					LoadRing();
 8010b4c:	f7fd fba6 	bl	800e29c <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_2, 1, &pp);
 8010b50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010b54:	4aa7      	ldr	r2, [pc, #668]	; (8010df4 <LidarSetPos+0x13a4>)
 8010b56:	2101      	movs	r1, #1
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f5 f839 	bl	8005bd0 <PP_start>

					load_adjust = 1;
 8010b5e:	4ba6      	ldr	r3, [pc, #664]	; (8010df8 <LidarSetPos+0x13a8>)
 8010b60:	2201      	movs	r2, #1
 8010b62:	601a      	str	r2, [r3, #0]
					AdjustRings();
 8010b64:	f7fd fbe0 	bl	800e328 <AdjustRings>
					while(pp.pp_start)
 8010b68:	e055      	b.n	8010c16 <LidarSetPos+0x11c6>
					{
						if(ps4.button == SQUARE)
 8010b6a:	4ba1      	ldr	r3, [pc, #644]	; (8010df0 <LidarSetPos+0x13a0>)
 8010b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b72:	d108      	bne.n	8010b86 <LidarSetPos+0x1136>
						{
							while(ps4.button == SQUARE);
 8010b74:	bf00      	nop
 8010b76:	4b9e      	ldr	r3, [pc, #632]	; (8010df0 <LidarSetPos+0x13a0>)
 8010b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b7e:	d0fa      	beq.n	8010b76 <LidarSetPos+0x1126>
							PP_stop(&pp);
 8010b80:	489c      	ldr	r0, [pc, #624]	; (8010df4 <LidarSetPos+0x13a4>)
 8010b82:	f7f5 fb5d 	bl	8006240 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 8010b86:	2108      	movs	r1, #8
 8010b88:	489c      	ldr	r0, [pc, #624]	; (8010dfc <LidarSetPos+0x13ac>)
 8010b8a:	f007 f8e5 	bl	8017d58 <HAL_GPIO_ReadPin>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d006      	beq.n	8010ba2 <LidarSetPos+0x1152>
 8010b94:	2110      	movs	r1, #16
 8010b96:	4899      	ldr	r0, [pc, #612]	; (8010dfc <LidarSetPos+0x13ac>)
 8010b98:	f007 f8de 	bl	8017d58 <HAL_GPIO_ReadPin>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d109      	bne.n	8010bb6 <LidarSetPos+0x1166>
						{
							pp.target_y[0] = pp.real_y;
 8010ba2:	4b94      	ldr	r3, [pc, #592]	; (8010df4 <LidarSetPos+0x13a4>)
 8010ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ba6:	4a93      	ldr	r2, [pc, #588]	; (8010df4 <LidarSetPos+0x13a4>)
 8010ba8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8010bac:	4b91      	ldr	r3, [pc, #580]	; (8010df4 <LidarSetPos+0x13a4>)
 8010bae:	f04f 0200 	mov.w	r2, #0
 8010bb2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(pp.real_x <= pick_right_to_center_2[0][1])
 8010bb6:	4b8f      	ldr	r3, [pc, #572]	; (8010df4 <LidarSetPos+0x13a4>)
 8010bb8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010bbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010bc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8010bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bcc:	d809      	bhi.n	8010be2 <LidarSetPos+0x1192>
						{
							pp.target_y[0] = pp.real_y;
 8010bce:	4b89      	ldr	r3, [pc, #548]	; (8010df4 <LidarSetPos+0x13a4>)
 8010bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bd2:	4a88      	ldr	r2, [pc, #544]	; (8010df4 <LidarSetPos+0x13a4>)
 8010bd4:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8010bd8:	4b86      	ldr	r3, [pc, #536]	; (8010df4 <LidarSetPos+0x13a4>)
 8010bda:	f04f 0200 	mov.w	r2, #0
 8010bde:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(ps4.button == UP)
 8010be2:	4b83      	ldr	r3, [pc, #524]	; (8010df0 <LidarSetPos+0x13a0>)
 8010be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be6:	2b10      	cmp	r3, #16
 8010be8:	d115      	bne.n	8010c16 <LidarSetPos+0x11c6>
						{
							while(ps4.button == UP);
 8010bea:	bf00      	nop
 8010bec:	4b80      	ldr	r3, [pc, #512]	; (8010df0 <LidarSetPos+0x13a0>)
 8010bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf0:	2b10      	cmp	r3, #16
 8010bf2:	d0fb      	beq.n	8010bec <LidarSetPos+0x119c>
							if(blue)
 8010bf4:	4b82      	ldr	r3, [pc, #520]	; (8010e00 <LidarSetPos+0x13b0>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d006      	beq.n	8010c0a <LidarSetPos+0x11ba>
							{
								vesc_speed = BlueOppoType2;
 8010bfc:	4b81      	ldr	r3, [pc, #516]	; (8010e04 <LidarSetPos+0x13b4>)
 8010bfe:	4a82      	ldr	r2, [pc, #520]	; (8010e08 <LidarSetPos+0x13b8>)
 8010c00:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 8010c02:	4b82      	ldr	r3, [pc, #520]	; (8010e0c <LidarSetPos+0x13bc>)
 8010c04:	4a82      	ldr	r2, [pc, #520]	; (8010e10 <LidarSetPos+0x13c0>)
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	e005      	b.n	8010c16 <LidarSetPos+0x11c6>
							}
							else
							{
								vesc_speed = RedOppoType2;
 8010c0a:	4b7e      	ldr	r3, [pc, #504]	; (8010e04 <LidarSetPos+0x13b4>)
 8010c0c:	4a81      	ldr	r2, [pc, #516]	; (8010e14 <LidarSetPos+0x13c4>)
 8010c0e:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 8010c10:	4b7e      	ldr	r3, [pc, #504]	; (8010e0c <LidarSetPos+0x13bc>)
 8010c12:	4a81      	ldr	r2, [pc, #516]	; (8010e18 <LidarSetPos+0x13c8>)
 8010c14:	601a      	str	r2, [r3, #0]
					while(pp.pp_start)
 8010c16:	4b77      	ldr	r3, [pc, #476]	; (8010df4 <LidarSetPos+0x13a4>)
 8010c18:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d1a1      	bne.n	8010b6a <LidarSetPos+0x111a>
							}
						}
					}

					adjust_servo;
 8010c26:	f44f 7148 	mov.w	r1, #800	; 0x320
 8010c2a:	487c      	ldr	r0, [pc, #496]	; (8010e1c <LidarSetPos+0x13cc>)
 8010c2c:	f7fa fd90 	bl	800b750 <ServoSetPulse>
 8010c30:	f640 0166 	movw	r1, #2150	; 0x866
 8010c34:	487a      	ldr	r0, [pc, #488]	; (8010e20 <LidarSetPos+0x13d0>)
 8010c36:	f7fa fd8b 	bl	800b750 <ServoSetPulse>

					PP_start(robot_center, 1, &pp);
 8010c3a:	f107 0308 	add.w	r3, r7, #8
 8010c3e:	4a6d      	ldr	r2, [pc, #436]	; (8010df4 <LidarSetPos+0x13a4>)
 8010c40:	2101      	movs	r1, #1
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7f4 ffc4 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8010c48:	f005 fa0a 	bl	8016060 <HAL_GetTick>
 8010c4c:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8010c50:	e026      	b.n	8010ca0 <LidarSetPos+0x1250>
					{
						after = HAL_GetTick();
 8010c52:	f005 fa05 	bl	8016060 <HAL_GetTick>
 8010c56:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 1000)
 8010c5a:	4b66      	ldr	r3, [pc, #408]	; (8010df4 <LidarSetPos+0x13a4>)
 8010c5c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010c60:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8010e24 <LidarSetPos+0x13d4>
 8010c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c6c:	d80a      	bhi.n	8010c84 <LidarSetPos+0x1234>
 8010c6e:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8010c72:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8010c76:	1ad3      	subs	r3, r2, r3
 8010c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010c7c:	d302      	bcc.n	8010c84 <LidarSetPos+0x1234>
							PP_stop(&pp);
 8010c7e:	485d      	ldr	r0, [pc, #372]	; (8010df4 <LidarSetPos+0x13a4>)
 8010c80:	f7f5 fade 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8010c84:	4b5a      	ldr	r3, [pc, #360]	; (8010df0 <LidarSetPos+0x13a0>)
 8010c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c8c:	d108      	bne.n	8010ca0 <LidarSetPos+0x1250>
						{
							while(ps4.button == SQUARE);
 8010c8e:	bf00      	nop
 8010c90:	4b57      	ldr	r3, [pc, #348]	; (8010df0 <LidarSetPos+0x13a0>)
 8010c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c98:	d0fa      	beq.n	8010c90 <LidarSetPos+0x1240>
							PP_stop(&pp);
 8010c9a:	4856      	ldr	r0, [pc, #344]	; (8010df4 <LidarSetPos+0x13a4>)
 8010c9c:	f7f5 fad0 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8010ca0:	4b54      	ldr	r3, [pc, #336]	; (8010df4 <LidarSetPos+0x13a4>)
 8010ca2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010ca6:	f003 0301 	and.w	r3, r3, #1
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1d0      	bne.n	8010c52 <LidarSetPos+0x1202>
						}
					}

					stick_fence = 1;
 8010cb0:	4b5d      	ldr	r3, [pc, #372]	; (8010e28 <LidarSetPos+0x13d8>)
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 8010cb6:	463b      	mov	r3, r7
 8010cb8:	6818      	ldr	r0, [r3, #0]
 8010cba:	f004 fa95 	bl	80151e8 <LidarAdjust>

					break;
 8010cbe:	f000 bd48 	b.w	8011752 <LidarSetPos+0x1d02>

				case UPPER_LEFT:
					lidar->pos = CENTER_2;
 8010cc2:	463b      	mov	r3, r7
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2204      	movs	r2, #4
 8010cc8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010ccc:	f000 bd41 	b.w	8011752 <LidarSetPos+0x1d02>

				case UPPER_RIGHT:
					lidar->pos = CENTER_2;
 8010cd0:	463b      	mov	r3, r7
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2204      	movs	r2, #4
 8010cd6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8010cda:	f000 bd3a 	b.w	8011752 <LidarSetPos+0x1d02>

				case CENTER_1:
					stick_fence = 0;
 8010cde:	4b52      	ldr	r3, [pc, #328]	; (8010e28 <LidarSetPos+0x13d8>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8010ce4:	463b      	mov	r3, r7
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8010cee:	4b44      	ldr	r3, [pc, #272]	; (8010e00 <LidarSetPos+0x13b0>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d006      	beq.n	8010d04 <LidarSetPos+0x12b4>
					{
						vesc_speed = BlueType2;
 8010cf6:	4b43      	ldr	r3, [pc, #268]	; (8010e04 <LidarSetPos+0x13b4>)
 8010cf8:	4a4c      	ldr	r2, [pc, #304]	; (8010e2c <LidarSetPos+0x13dc>)
 8010cfa:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8010cfc:	4b43      	ldr	r3, [pc, #268]	; (8010e0c <LidarSetPos+0x13bc>)
 8010cfe:	4a4c      	ldr	r2, [pc, #304]	; (8010e30 <LidarSetPos+0x13e0>)
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	e005      	b.n	8010d10 <LidarSetPos+0x12c0>
					}
					else
					{
						vesc_speed = RedType2;
 8010d04:	4b3f      	ldr	r3, [pc, #252]	; (8010e04 <LidarSetPos+0x13b4>)
 8010d06:	4a4b      	ldr	r2, [pc, #300]	; (8010e34 <LidarSetPos+0x13e4>)
 8010d08:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8010d0a:	4b40      	ldr	r3, [pc, #256]	; (8010e0c <LidarSetPos+0x13bc>)
 8010d0c:	4a4a      	ldr	r2, [pc, #296]	; (8010e38 <LidarSetPos+0x13e8>)
 8010d0e:	601a      	str	r2, [r3, #0]
					}
					if(!lidar->laser)
 8010d10:	463b      	mov	r3, r7
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d159      	bne.n	8010dd0 <LidarSetPos+0x1380>
					{
						ResetCoordinate();
 8010d1c:	f7fd fb16 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_2;
 8010d20:	463b      	mov	r3, r7
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2204      	movs	r2, #4
 8010d26:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_1_to_center_2, 1, &pp);
 8010d2a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8010d2e:	4a31      	ldr	r2, [pc, #196]	; (8010df4 <LidarSetPos+0x13a4>)
 8010d30:	2101      	movs	r1, #1
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7f4 ff4c 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8010d38:	e041      	b.n	8010dbe <LidarSetPos+0x136e>
						{
							if(ps4.button == SQUARE)
 8010d3a:	4b2d      	ldr	r3, [pc, #180]	; (8010df0 <LidarSetPos+0x13a0>)
 8010d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d42:	d10d      	bne.n	8010d60 <LidarSetPos+0x1310>
							{
								while(ps4.button == SQUARE);
 8010d44:	bf00      	nop
 8010d46:	4b2a      	ldr	r3, [pc, #168]	; (8010df0 <LidarSetPos+0x13a0>)
 8010d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d4e:	d0fa      	beq.n	8010d46 <LidarSetPos+0x12f6>
								PP_stop(&pp);
 8010d50:	4828      	ldr	r0, [pc, #160]	; (8010df4 <LidarSetPos+0x13a4>)
 8010d52:	f7f5 fa75 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8010d56:	463b      	mov	r3, r7
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_1;
	//							lidar->pos_counter = CENTER_1;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010d60:	2108      	movs	r1, #8
 8010d62:	4826      	ldr	r0, [pc, #152]	; (8010dfc <LidarSetPos+0x13ac>)
 8010d64:	f006 fff8 	bl	8017d58 <HAL_GPIO_ReadPin>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d006      	beq.n	8010d7c <LidarSetPos+0x132c>
 8010d6e:	2110      	movs	r1, #16
 8010d70:	4822      	ldr	r0, [pc, #136]	; (8010dfc <LidarSetPos+0x13ac>)
 8010d72:	f006 fff1 	bl	8017d58 <HAL_GPIO_ReadPin>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d109      	bne.n	8010d90 <LidarSetPos+0x1340>
							{
								pp.target_y[0] = pp.real_y;
 8010d7c:	4b1d      	ldr	r3, [pc, #116]	; (8010df4 <LidarSetPos+0x13a4>)
 8010d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d80:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <LidarSetPos+0x13a4>)
 8010d82:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010d86:	4b1b      	ldr	r3, [pc, #108]	; (8010df4 <LidarSetPos+0x13a4>)
 8010d88:	f04f 0200 	mov.w	r2, #0
 8010d8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_1_to_center_2[0][1])
 8010d90:	4b18      	ldr	r3, [pc, #96]	; (8010df4 <LidarSetPos+0x13a4>)
 8010d92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010d96:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8010d9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8010d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da6:	da00      	bge.n	8010daa <LidarSetPos+0x135a>
 8010da8:	e009      	b.n	8010dbe <LidarSetPos+0x136e>
							{
								pp.target_y[0] = pp.real_y;
 8010daa:	4b12      	ldr	r3, [pc, #72]	; (8010df4 <LidarSetPos+0x13a4>)
 8010dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dae:	4a11      	ldr	r2, [pc, #68]	; (8010df4 <LidarSetPos+0x13a4>)
 8010db0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8010db4:	4b0f      	ldr	r3, [pc, #60]	; (8010df4 <LidarSetPos+0x13a4>)
 8010db6:	f04f 0200 	mov.w	r2, #0
 8010dba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8010dbe:	4b0d      	ldr	r3, [pc, #52]	; (8010df4 <LidarSetPos+0x13a4>)
 8010dc0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	b2db      	uxtb	r3, r3
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d1b5      	bne.n	8010d3a <LidarSetPos+0x12ea>
 8010dce:	e08d      	b.n	8010eec <LidarSetPos+0x149c>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_2;
 8010dd0:	463b      	mov	r3, r7
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2204      	movs	r2, #4
 8010dd6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_2, 1, &pp, 0, 0);
 8010dda:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 8010dde:	2300      	movs	r3, #0
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	2300      	movs	r3, #0
 8010de4:	4a03      	ldr	r2, [pc, #12]	; (8010df4 <LidarSetPos+0x13a4>)
 8010de6:	2101      	movs	r1, #1
 8010de8:	f7f5 f8b8 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8010dec:	e076      	b.n	8010edc <LidarSetPos+0x148c>
 8010dee:	bf00      	nop
 8010df0:	2000a240 	.word	0x2000a240
 8010df4:	20006d44 	.word	0x20006d44
 8010df8:	200095bc 	.word	0x200095bc
 8010dfc:	40020c00 	.word	0x40020c00
 8010e00:	20006a44 	.word	0x20006a44
 8010e04:	200065b8 	.word	0x200065b8
 8010e08:	414f3333 	.word	0x414f3333
 8010e0c:	20007494 	.word	0x20007494
 8010e10:	45020000 	.word	0x45020000
 8010e14:	4154cccd 	.word	0x4154cccd
 8010e18:	45039000 	.word	0x45039000
 8010e1c:	200079d8 	.word	0x200079d8
 8010e20:	2000a5e8 	.word	0x2000a5e8
 8010e24:	c2b20000 	.word	0xc2b20000
 8010e28:	200073d0 	.word	0x200073d0
 8010e2c:	41026666 	.word	0x41026666
 8010e30:	44bea000 	.word	0x44bea000
 8010e34:	4104cccd 	.word	0x4104cccd
 8010e38:	44c1c000 	.word	0x44c1c000
						{
							if(ps4.button == UP)
 8010e3c:	4bb0      	ldr	r3, [pc, #704]	; (8011100 <LidarSetPos+0x16b0>)
 8010e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e40:	2b10      	cmp	r3, #16
 8010e42:	d115      	bne.n	8010e70 <LidarSetPos+0x1420>
							{
								while(ps4.button == UP);
 8010e44:	bf00      	nop
 8010e46:	4bae      	ldr	r3, [pc, #696]	; (8011100 <LidarSetPos+0x16b0>)
 8010e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e4a:	2b10      	cmp	r3, #16
 8010e4c:	d0fb      	beq.n	8010e46 <LidarSetPos+0x13f6>
								if(blue)
 8010e4e:	4bad      	ldr	r3, [pc, #692]	; (8011104 <LidarSetPos+0x16b4>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d006      	beq.n	8010e64 <LidarSetPos+0x1414>
								{
									vesc_speed = BlueOppoType2;
 8010e56:	4bac      	ldr	r3, [pc, #688]	; (8011108 <LidarSetPos+0x16b8>)
 8010e58:	4aac      	ldr	r2, [pc, #688]	; (801110c <LidarSetPos+0x16bc>)
 8010e5a:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8010e5c:	4bac      	ldr	r3, [pc, #688]	; (8011110 <LidarSetPos+0x16c0>)
 8010e5e:	4aad      	ldr	r2, [pc, #692]	; (8011114 <LidarSetPos+0x16c4>)
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	e005      	b.n	8010e70 <LidarSetPos+0x1420>
								}
								else
								{
									vesc_speed = RedOppoType2;
 8010e64:	4ba8      	ldr	r3, [pc, #672]	; (8011108 <LidarSetPos+0x16b8>)
 8010e66:	4aac      	ldr	r2, [pc, #688]	; (8011118 <LidarSetPos+0x16c8>)
 8010e68:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8010e6a:	4ba9      	ldr	r3, [pc, #676]	; (8011110 <LidarSetPos+0x16c0>)
 8010e6c:	4aab      	ldr	r2, [pc, #684]	; (801111c <LidarSetPos+0x16cc>)
 8010e6e:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8010e70:	4ba3      	ldr	r3, [pc, #652]	; (8011100 <LidarSetPos+0x16b0>)
 8010e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e78:	d108      	bne.n	8010e8c <LidarSetPos+0x143c>
							{
								while(ps4.button == SQUARE);
 8010e7a:	bf00      	nop
 8010e7c:	4ba0      	ldr	r3, [pc, #640]	; (8011100 <LidarSetPos+0x16b0>)
 8010e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e84:	d0fa      	beq.n	8010e7c <LidarSetPos+0x142c>
								PP_stop(&pp);
 8010e86:	48a6      	ldr	r0, [pc, #664]	; (8011120 <LidarSetPos+0x16d0>)
 8010e88:	f7f5 f9da 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist >= lsr_center_2[0][1] - Offset + 0.05)
 8010e8c:	4ba5      	ldr	r3, [pc, #660]	; (8011124 <LidarSetPos+0x16d4>)
 8010e8e:	69db      	ldr	r3, [r3, #28]
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7ef fb59 	bl	8000548 <__aeabi_f2d>
 8010e96:	4604      	mov	r4, r0
 8010e98:	460d      	mov	r5, r1
 8010e9a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ef fb51 	bl	8000548 <__aeabi_f2d>
 8010ea6:	f04f 0200 	mov.w	r2, #0
 8010eaa:	4b9f      	ldr	r3, [pc, #636]	; (8011128 <LidarSetPos+0x16d8>)
 8010eac:	f7ef f9ec 	bl	8000288 <__aeabi_dsub>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	a38f      	add	r3, pc, #572	; (adr r3, 80110f8 <LidarSetPos+0x16a8>)
 8010eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ebe:	f7ef f9e5 	bl	800028c <__adddf3>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	4629      	mov	r1, r5
 8010eca:	f7ef fe1b 	bl	8000b04 <__aeabi_dcmpge>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d100      	bne.n	8010ed6 <LidarSetPos+0x1486>
 8010ed4:	e002      	b.n	8010edc <LidarSetPos+0x148c>
								PP_stop(&pp);
 8010ed6:	4892      	ldr	r0, [pc, #584]	; (8011120 <LidarSetPos+0x16d0>)
 8010ed8:	f7f5 f9b2 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8010edc:	4b90      	ldr	r3, [pc, #576]	; (8011120 <LidarSetPos+0x16d0>)
 8010ede:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010ee2:	f003 0310 	and.w	r3, r3, #16
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1a7      	bne.n	8010e3c <LidarSetPos+0x13ec>
						}
					}

					PP_start(robot_center, 1, &pp);
 8010eec:	f107 0308 	add.w	r3, r7, #8
 8010ef0:	4a8b      	ldr	r2, [pc, #556]	; (8011120 <LidarSetPos+0x16d0>)
 8010ef2:	2101      	movs	r1, #1
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f4 fe6b 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8010efa:	f005 f8b1 	bl	8016060 <HAL_GetTick>
 8010efe:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8010f02:	e026      	b.n	8010f52 <LidarSetPos+0x1502>
					{
						after = HAL_GetTick();
 8010f04:	f005 f8ac 	bl	8016060 <HAL_GetTick>
 8010f08:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8010f0c:	4b84      	ldr	r3, [pc, #528]	; (8011120 <LidarSetPos+0x16d0>)
 8010f0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010f12:	ed9f 7a86 	vldr	s14, [pc, #536]	; 801112c <LidarSetPos+0x16dc>
 8010f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1e:	db0a      	blt.n	8010f36 <LidarSetPos+0x14e6>
 8010f20:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8010f24:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8010f2e:	d302      	bcc.n	8010f36 <LidarSetPos+0x14e6>
							PP_stop(&pp);
 8010f30:	487b      	ldr	r0, [pc, #492]	; (8011120 <LidarSetPos+0x16d0>)
 8010f32:	f7f5 f985 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8010f36:	4b72      	ldr	r3, [pc, #456]	; (8011100 <LidarSetPos+0x16b0>)
 8010f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f3e:	d108      	bne.n	8010f52 <LidarSetPos+0x1502>
						{
							while(ps4.button == SQUARE);
 8010f40:	bf00      	nop
 8010f42:	4b6f      	ldr	r3, [pc, #444]	; (8011100 <LidarSetPos+0x16b0>)
 8010f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f4a:	d0fa      	beq.n	8010f42 <LidarSetPos+0x14f2>
							PP_stop(&pp);
 8010f4c:	4874      	ldr	r0, [pc, #464]	; (8011120 <LidarSetPos+0x16d0>)
 8010f4e:	f7f5 f977 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8010f52:	4b73      	ldr	r3, [pc, #460]	; (8011120 <LidarSetPos+0x16d0>)
 8010f54:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8010f58:	f003 0301 	and.w	r3, r3, #1
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1d0      	bne.n	8010f04 <LidarSetPos+0x14b4>
						}
					}

					stick_fence = 1;
 8010f62:	4b73      	ldr	r3, [pc, #460]	; (8011130 <LidarSetPos+0x16e0>)
 8010f64:	2201      	movs	r2, #1
 8010f66:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8010f68:	463b      	mov	r3, r7
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d005      	beq.n	8010f80 <LidarSetPos+0x1530>
					{
						osDelay(300);
 8010f74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010f78:	f00b fda8 	bl	801cacc <osDelay>
						Shot();
 8010f7c:	f7fd fd34 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8010f80:	463b      	mov	r3, r7
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f040 83d8 	bne.w	801173e <LidarSetPos+0x1cee>
						LidarAdjust(lidar);
 8010f8e:	463b      	mov	r3, r7
 8010f90:	6818      	ldr	r0, [r3, #0]
 8010f92:	f004 f929 	bl	80151e8 <LidarAdjust>
					break;
 8010f96:	e3d2      	b.n	801173e <LidarSetPos+0x1cee>

				case CENTER:
					stick_fence = 0;
 8010f98:	4b65      	ldr	r3, [pc, #404]	; (8011130 <LidarSetPos+0x16e0>)
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8010f9e:	463b      	mov	r3, r7
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8010fa8:	4b56      	ldr	r3, [pc, #344]	; (8011104 <LidarSetPos+0x16b4>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d006      	beq.n	8010fbe <LidarSetPos+0x156e>
					{
						vesc_speed = BlueType2;
 8010fb0:	4b55      	ldr	r3, [pc, #340]	; (8011108 <LidarSetPos+0x16b8>)
 8010fb2:	4a60      	ldr	r2, [pc, #384]	; (8011134 <LidarSetPos+0x16e4>)
 8010fb4:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8010fb6:	4b56      	ldr	r3, [pc, #344]	; (8011110 <LidarSetPos+0x16c0>)
 8010fb8:	4a5f      	ldr	r2, [pc, #380]	; (8011138 <LidarSetPos+0x16e8>)
 8010fba:	601a      	str	r2, [r3, #0]
 8010fbc:	e005      	b.n	8010fca <LidarSetPos+0x157a>
					}
					else
					{
						vesc_speed = RedType2;
 8010fbe:	4b52      	ldr	r3, [pc, #328]	; (8011108 <LidarSetPos+0x16b8>)
 8010fc0:	4a5e      	ldr	r2, [pc, #376]	; (801113c <LidarSetPos+0x16ec>)
 8010fc2:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8010fc4:	4b52      	ldr	r3, [pc, #328]	; (8011110 <LidarSetPos+0x16c0>)
 8010fc6:	4a5e      	ldr	r2, [pc, #376]	; (8011140 <LidarSetPos+0x16f0>)
 8010fc8:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 8010fca:	463b      	mov	r3, r7
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d16c      	bne.n	80110b0 <LidarSetPos+0x1660>
					{
						ResetCoordinate();
 8010fd6:	f7fd f9b9 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_2;
 8010fda:	463b      	mov	r3, r7
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2204      	movs	r2, #4
 8010fe0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_2, 1, &pp);
 8010fe4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010fe8:	4a4d      	ldr	r2, [pc, #308]	; (8011120 <LidarSetPos+0x16d0>)
 8010fea:	2101      	movs	r1, #1
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7f4 fdef 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8010ff2:	e054      	b.n	801109e <LidarSetPos+0x164e>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 8010ff4:	2108      	movs	r1, #8
 8010ff6:	4853      	ldr	r0, [pc, #332]	; (8011144 <LidarSetPos+0x16f4>)
 8010ff8:	f006 feae 	bl	8017d58 <HAL_GPIO_ReadPin>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d006      	beq.n	8011010 <LidarSetPos+0x15c0>
 8011002:	2110      	movs	r1, #16
 8011004:	484f      	ldr	r0, [pc, #316]	; (8011144 <LidarSetPos+0x16f4>)
 8011006:	f006 fea7 	bl	8017d58 <HAL_GPIO_ReadPin>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d104      	bne.n	801101a <LidarSetPos+0x15ca>
								pp.error_y = 0;
 8011010:	4b43      	ldr	r3, [pc, #268]	; (8011120 <LidarSetPos+0x16d0>)
 8011012:	f04f 0200 	mov.w	r2, #0
 8011016:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

							if(ps4.button == SQUARE)
 801101a:	4b39      	ldr	r3, [pc, #228]	; (8011100 <LidarSetPos+0x16b0>)
 801101c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801101e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011022:	d10d      	bne.n	8011040 <LidarSetPos+0x15f0>
							{
								while(ps4.button == SQUARE);
 8011024:	bf00      	nop
 8011026:	4b36      	ldr	r3, [pc, #216]	; (8011100 <LidarSetPos+0x16b0>)
 8011028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801102a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801102e:	d0fa      	beq.n	8011026 <LidarSetPos+0x15d6>
								PP_stop(&pp);
 8011030:	483b      	ldr	r0, [pc, #236]	; (8011120 <LidarSetPos+0x16d0>)
 8011032:	f7f5 f905 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8011036:	463b      	mov	r3, r7
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2201      	movs	r2, #1
 801103c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER;
	//							lidar->pos_counter = CENTER;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8011040:	2108      	movs	r1, #8
 8011042:	4840      	ldr	r0, [pc, #256]	; (8011144 <LidarSetPos+0x16f4>)
 8011044:	f006 fe88 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d006      	beq.n	801105c <LidarSetPos+0x160c>
 801104e:	2110      	movs	r1, #16
 8011050:	483c      	ldr	r0, [pc, #240]	; (8011144 <LidarSetPos+0x16f4>)
 8011052:	f006 fe81 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d109      	bne.n	8011070 <LidarSetPos+0x1620>
							{
								pp.target_y[0] = pp.real_y;
 801105c:	4b30      	ldr	r3, [pc, #192]	; (8011120 <LidarSetPos+0x16d0>)
 801105e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011060:	4a2f      	ldr	r2, [pc, #188]	; (8011120 <LidarSetPos+0x16d0>)
 8011062:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011066:	4b2e      	ldr	r3, [pc, #184]	; (8011120 <LidarSetPos+0x16d0>)
 8011068:	f04f 0200 	mov.w	r2, #0
 801106c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_to_center_2[0][1])
 8011070:	4b2b      	ldr	r3, [pc, #172]	; (8011120 <LidarSetPos+0x16d0>)
 8011072:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011076:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801107a:	edd3 7a01 	vldr	s15, [r3, #4]
 801107e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011086:	d900      	bls.n	801108a <LidarSetPos+0x163a>
 8011088:	e009      	b.n	801109e <LidarSetPos+0x164e>
							{
								pp.target_y[0] = pp.real_y;
 801108a:	4b25      	ldr	r3, [pc, #148]	; (8011120 <LidarSetPos+0x16d0>)
 801108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801108e:	4a24      	ldr	r2, [pc, #144]	; (8011120 <LidarSetPos+0x16d0>)
 8011090:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011094:	4b22      	ldr	r3, [pc, #136]	; (8011120 <LidarSetPos+0x16d0>)
 8011096:	f04f 0200 	mov.w	r2, #0
 801109a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 801109e:	4b20      	ldr	r3, [pc, #128]	; (8011120 <LidarSetPos+0x16d0>)
 80110a0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80110a4:	f003 0301 	and.w	r3, r3, #1
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1a2      	bne.n	8010ff4 <LidarSetPos+0x15a4>
 80110ae:	e090      	b.n	80111d2 <LidarSetPos+0x1782>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_2;
 80110b0:	463b      	mov	r3, r7
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2204      	movs	r2, #4
 80110b6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_2, 1, &pp, 0, 0);
 80110ba:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 80110be:	2300      	movs	r3, #0
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	2300      	movs	r3, #0
 80110c4:	4a16      	ldr	r2, [pc, #88]	; (8011120 <LidarSetPos+0x16d0>)
 80110c6:	2101      	movs	r1, #1
 80110c8:	f7f4 ff48 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 80110cc:	e078      	b.n	80111c0 <LidarSetPos+0x1770>
						{
							if(ps4.button == UP)
 80110ce:	4b0c      	ldr	r3, [pc, #48]	; (8011100 <LidarSetPos+0x16b0>)
 80110d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d2:	2b10      	cmp	r3, #16
 80110d4:	d13e      	bne.n	8011154 <LidarSetPos+0x1704>
							{
								while(ps4.button == UP);
 80110d6:	bf00      	nop
 80110d8:	4b09      	ldr	r3, [pc, #36]	; (8011100 <LidarSetPos+0x16b0>)
 80110da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110dc:	2b10      	cmp	r3, #16
 80110de:	d0fb      	beq.n	80110d8 <LidarSetPos+0x1688>
								if(blue)
 80110e0:	4b08      	ldr	r3, [pc, #32]	; (8011104 <LidarSetPos+0x16b4>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d02f      	beq.n	8011148 <LidarSetPos+0x16f8>
								{
									vesc_speed = BlueOppoType2;
 80110e8:	4b07      	ldr	r3, [pc, #28]	; (8011108 <LidarSetPos+0x16b8>)
 80110ea:	4a08      	ldr	r2, [pc, #32]	; (801110c <LidarSetPos+0x16bc>)
 80110ec:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 80110ee:	4b08      	ldr	r3, [pc, #32]	; (8011110 <LidarSetPos+0x16c0>)
 80110f0:	4a08      	ldr	r2, [pc, #32]	; (8011114 <LidarSetPos+0x16c4>)
 80110f2:	601a      	str	r2, [r3, #0]
 80110f4:	e02e      	b.n	8011154 <LidarSetPos+0x1704>
 80110f6:	bf00      	nop
 80110f8:	9999999a 	.word	0x9999999a
 80110fc:	3fa99999 	.word	0x3fa99999
 8011100:	2000a240 	.word	0x2000a240
 8011104:	20006a44 	.word	0x20006a44
 8011108:	200065b8 	.word	0x200065b8
 801110c:	414f3333 	.word	0x414f3333
 8011110:	20007494 	.word	0x20007494
 8011114:	45020000 	.word	0x45020000
 8011118:	4154cccd 	.word	0x4154cccd
 801111c:	45039000 	.word	0x45039000
 8011120:	20006d44 	.word	0x20006d44
 8011124:	20007728 	.word	0x20007728
 8011128:	3fe00000 	.word	0x3fe00000
 801112c:	c2b60000 	.word	0xc2b60000
 8011130:	200073d0 	.word	0x200073d0
 8011134:	41026666 	.word	0x41026666
 8011138:	44bea000 	.word	0x44bea000
 801113c:	4104cccd 	.word	0x4104cccd
 8011140:	44c1c000 	.word	0x44c1c000
 8011144:	40020c00 	.word	0x40020c00
								}
								else
								{
									vesc_speed = RedOppoType2;
 8011148:	4b9d      	ldr	r3, [pc, #628]	; (80113c0 <LidarSetPos+0x1970>)
 801114a:	4a9e      	ldr	r2, [pc, #632]	; (80113c4 <LidarSetPos+0x1974>)
 801114c:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 801114e:	4b9e      	ldr	r3, [pc, #632]	; (80113c8 <LidarSetPos+0x1978>)
 8011150:	4a9e      	ldr	r2, [pc, #632]	; (80113cc <LidarSetPos+0x197c>)
 8011152:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8011154:	4b9e      	ldr	r3, [pc, #632]	; (80113d0 <LidarSetPos+0x1980>)
 8011156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801115c:	d108      	bne.n	8011170 <LidarSetPos+0x1720>
							{
								while(ps4.button == SQUARE);
 801115e:	bf00      	nop
 8011160:	4b9b      	ldr	r3, [pc, #620]	; (80113d0 <LidarSetPos+0x1980>)
 8011162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011168:	d0fa      	beq.n	8011160 <LidarSetPos+0x1710>
								PP_stop(&pp);
 801116a:	489a      	ldr	r0, [pc, #616]	; (80113d4 <LidarSetPos+0x1984>)
 801116c:	f7f5 f868 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_2[0][1] + Offset - 0.05)
 8011170:	4b99      	ldr	r3, [pc, #612]	; (80113d8 <LidarSetPos+0x1988>)
 8011172:	69db      	ldr	r3, [r3, #28]
 8011174:	4618      	mov	r0, r3
 8011176:	f7ef f9e7 	bl	8000548 <__aeabi_f2d>
 801117a:	4604      	mov	r4, r0
 801117c:	460d      	mov	r5, r1
 801117e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f7ef f9df 	bl	8000548 <__aeabi_f2d>
 801118a:	f04f 0200 	mov.w	r2, #0
 801118e:	4b93      	ldr	r3, [pc, #588]	; (80113dc <LidarSetPos+0x198c>)
 8011190:	f7ef f87c 	bl	800028c <__adddf3>
 8011194:	4602      	mov	r2, r0
 8011196:	460b      	mov	r3, r1
 8011198:	4610      	mov	r0, r2
 801119a:	4619      	mov	r1, r3
 801119c:	a386      	add	r3, pc, #536	; (adr r3, 80113b8 <LidarSetPos+0x1968>)
 801119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a2:	f7ef f871 	bl	8000288 <__aeabi_dsub>
 80111a6:	4602      	mov	r2, r0
 80111a8:	460b      	mov	r3, r1
 80111aa:	4620      	mov	r0, r4
 80111ac:	4629      	mov	r1, r5
 80111ae:	f7ef fc9f 	bl	8000af0 <__aeabi_dcmple>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d100      	bne.n	80111ba <LidarSetPos+0x176a>
 80111b8:	e002      	b.n	80111c0 <LidarSetPos+0x1770>
								PP_stop(&pp);
 80111ba:	4886      	ldr	r0, [pc, #536]	; (80113d4 <LidarSetPos+0x1984>)
 80111bc:	f7f5 f840 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 80111c0:	4b84      	ldr	r3, [pc, #528]	; (80113d4 <LidarSetPos+0x1984>)
 80111c2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80111c6:	f003 0310 	and.w	r3, r3, #16
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f47f af7e 	bne.w	80110ce <LidarSetPos+0x167e>
						}

					}

					PP_start(robot_center, 1, &pp);
 80111d2:	f107 0308 	add.w	r3, r7, #8
 80111d6:	4a7f      	ldr	r2, [pc, #508]	; (80113d4 <LidarSetPos+0x1984>)
 80111d8:	2101      	movs	r1, #1
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f4 fcf8 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 80111e0:	f004 ff3e 	bl	8016060 <HAL_GetTick>
 80111e4:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 80111e8:	e026      	b.n	8011238 <LidarSetPos+0x17e8>
					{
						after = HAL_GetTick();
 80111ea:	f004 ff39 	bl	8016060 <HAL_GetTick>
 80111ee:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 80111f2:	4b78      	ldr	r3, [pc, #480]	; (80113d4 <LidarSetPos+0x1984>)
 80111f4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80111f8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80113e0 <LidarSetPos+0x1990>
 80111fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011204:	d80a      	bhi.n	801121c <LidarSetPos+0x17cc>
 8011206:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 801120a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011214:	d302      	bcc.n	801121c <LidarSetPos+0x17cc>
							PP_stop(&pp);
 8011216:	486f      	ldr	r0, [pc, #444]	; (80113d4 <LidarSetPos+0x1984>)
 8011218:	f7f5 f812 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 801121c:	4b6c      	ldr	r3, [pc, #432]	; (80113d0 <LidarSetPos+0x1980>)
 801121e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011224:	d108      	bne.n	8011238 <LidarSetPos+0x17e8>
						{
							while(ps4.button == SQUARE);
 8011226:	bf00      	nop
 8011228:	4b69      	ldr	r3, [pc, #420]	; (80113d0 <LidarSetPos+0x1980>)
 801122a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801122c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011230:	d0fa      	beq.n	8011228 <LidarSetPos+0x17d8>
							PP_stop(&pp);
 8011232:	4868      	ldr	r0, [pc, #416]	; (80113d4 <LidarSetPos+0x1984>)
 8011234:	f7f5 f804 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8011238:	4b66      	ldr	r3, [pc, #408]	; (80113d4 <LidarSetPos+0x1984>)
 801123a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801123e:	f003 0301 	and.w	r3, r3, #1
 8011242:	b2db      	uxtb	r3, r3
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1d0      	bne.n	80111ea <LidarSetPos+0x179a>
						}
					}

					stick_fence = 1;
 8011248:	4b66      	ldr	r3, [pc, #408]	; (80113e4 <LidarSetPos+0x1994>)
 801124a:	2201      	movs	r2, #1
 801124c:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 801124e:	463b      	mov	r3, r7
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011256:	2b00      	cmp	r3, #0
 8011258:	d005      	beq.n	8011266 <LidarSetPos+0x1816>
					{
						osDelay(300);
 801125a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801125e:	f00b fc35 	bl	801cacc <osDelay>
						Shot();
 8011262:	f7fd fbc1 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011266:	463b      	mov	r3, r7
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801126e:	2b00      	cmp	r3, #0
 8011270:	f040 8268 	bne.w	8011744 <LidarSetPos+0x1cf4>
						LidarAdjust(lidar);
 8011274:	463b      	mov	r3, r7
 8011276:	6818      	ldr	r0, [r3, #0]
 8011278:	f003 ffb6 	bl	80151e8 <LidarAdjust>
					break;
 801127c:	e262      	b.n	8011744 <LidarSetPos+0x1cf4>

				case CENTER_3:
					stick_fence = 0;
 801127e:	4b59      	ldr	r3, [pc, #356]	; (80113e4 <LidarSetPos+0x1994>)
 8011280:	2200      	movs	r2, #0
 8011282:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011284:	463b      	mov	r3, r7
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	2200      	movs	r2, #0
 801128a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 801128e:	4b56      	ldr	r3, [pc, #344]	; (80113e8 <LidarSetPos+0x1998>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d006      	beq.n	80112a4 <LidarSetPos+0x1854>
					{
						vesc_speed = BlueType2;
 8011296:	4b4a      	ldr	r3, [pc, #296]	; (80113c0 <LidarSetPos+0x1970>)
 8011298:	4a54      	ldr	r2, [pc, #336]	; (80113ec <LidarSetPos+0x199c>)
 801129a:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801129c:	4b4a      	ldr	r3, [pc, #296]	; (80113c8 <LidarSetPos+0x1978>)
 801129e:	4a54      	ldr	r2, [pc, #336]	; (80113f0 <LidarSetPos+0x19a0>)
 80112a0:	601a      	str	r2, [r3, #0]
 80112a2:	e005      	b.n	80112b0 <LidarSetPos+0x1860>
					}
					else
					{
						vesc_speed = RedType2;
 80112a4:	4b46      	ldr	r3, [pc, #280]	; (80113c0 <LidarSetPos+0x1970>)
 80112a6:	4a53      	ldr	r2, [pc, #332]	; (80113f4 <LidarSetPos+0x19a4>)
 80112a8:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 80112aa:	4b47      	ldr	r3, [pc, #284]	; (80113c8 <LidarSetPos+0x1978>)
 80112ac:	4a52      	ldr	r2, [pc, #328]	; (80113f8 <LidarSetPos+0x19a8>)
 80112ae:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 80112b0:	463b      	mov	r3, r7
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d158      	bne.n	801136e <LidarSetPos+0x191e>
					{
						ResetCoordinate();
 80112bc:	f7fd f846 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_2;
 80112c0:	463b      	mov	r3, r7
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2204      	movs	r2, #4
 80112c6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_3_to_center_2, 1, &pp);
 80112ca:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80112ce:	4a41      	ldr	r2, [pc, #260]	; (80113d4 <LidarSetPos+0x1984>)
 80112d0:	2101      	movs	r1, #1
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f4 fc7c 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 80112d8:	e040      	b.n	801135c <LidarSetPos+0x190c>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 80112da:	2108      	movs	r1, #8
 80112dc:	4847      	ldr	r0, [pc, #284]	; (80113fc <LidarSetPos+0x19ac>)
 80112de:	f006 fd3b 	bl	8017d58 <HAL_GPIO_ReadPin>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d006      	beq.n	80112f6 <LidarSetPos+0x18a6>
 80112e8:	2110      	movs	r1, #16
 80112ea:	4844      	ldr	r0, [pc, #272]	; (80113fc <LidarSetPos+0x19ac>)
 80112ec:	f006 fd34 	bl	8017d58 <HAL_GPIO_ReadPin>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d109      	bne.n	801130a <LidarSetPos+0x18ba>
							{
								pp.target_y[0] = pp.real_y;
 80112f6:	4b37      	ldr	r3, [pc, #220]	; (80113d4 <LidarSetPos+0x1984>)
 80112f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112fa:	4a36      	ldr	r2, [pc, #216]	; (80113d4 <LidarSetPos+0x1984>)
 80112fc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011300:	4b34      	ldr	r3, [pc, #208]	; (80113d4 <LidarSetPos+0x1984>)
 8011302:	f04f 0200 	mov.w	r2, #0
 8011306:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_3_to_center_2[0][1])
 801130a:	4b32      	ldr	r3, [pc, #200]	; (80113d4 <LidarSetPos+0x1984>)
 801130c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011310:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8011314:	edd3 7a01 	vldr	s15, [r3, #4]
 8011318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011320:	d809      	bhi.n	8011336 <LidarSetPos+0x18e6>
							{
								pp.target_y[0] = pp.real_y;
 8011322:	4b2c      	ldr	r3, [pc, #176]	; (80113d4 <LidarSetPos+0x1984>)
 8011324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011326:	4a2b      	ldr	r2, [pc, #172]	; (80113d4 <LidarSetPos+0x1984>)
 8011328:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801132c:	4b29      	ldr	r3, [pc, #164]	; (80113d4 <LidarSetPos+0x1984>)
 801132e:	f04f 0200 	mov.w	r2, #0
 8011332:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 8011336:	4b26      	ldr	r3, [pc, #152]	; (80113d0 <LidarSetPos+0x1980>)
 8011338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801133a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801133e:	d10d      	bne.n	801135c <LidarSetPos+0x190c>
							{
								while(ps4.button == SQUARE);
 8011340:	bf00      	nop
 8011342:	4b23      	ldr	r3, [pc, #140]	; (80113d0 <LidarSetPos+0x1980>)
 8011344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801134a:	d0fa      	beq.n	8011342 <LidarSetPos+0x18f2>
								PP_stop(&pp);
 801134c:	4821      	ldr	r0, [pc, #132]	; (80113d4 <LidarSetPos+0x1984>)
 801134e:	f7f4 ff77 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8011352:	463b      	mov	r3, r7
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2201      	movs	r2, #1
 8011358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 801135c:	4b1d      	ldr	r3, [pc, #116]	; (80113d4 <LidarSetPos+0x1984>)
 801135e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	b2db      	uxtb	r3, r3
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1b6      	bne.n	80112da <LidarSetPos+0x188a>
 801136c:	e091      	b.n	8011492 <LidarSetPos+0x1a42>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_2;
 801136e:	463b      	mov	r3, r7
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	2204      	movs	r2, #4
 8011374:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_2, 1, &pp, 0, 0);
 8011378:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 801137c:	2300      	movs	r3, #0
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	2300      	movs	r3, #0
 8011382:	4a14      	ldr	r2, [pc, #80]	; (80113d4 <LidarSetPos+0x1984>)
 8011384:	2101      	movs	r1, #1
 8011386:	f7f4 fde9 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 801138a:	e079      	b.n	8011480 <LidarSetPos+0x1a30>
						{
							if(ps4.button == UP)
 801138c:	4b10      	ldr	r3, [pc, #64]	; (80113d0 <LidarSetPos+0x1980>)
 801138e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011390:	2b10      	cmp	r3, #16
 8011392:	d13f      	bne.n	8011414 <LidarSetPos+0x19c4>
							{
								while(ps4.button == UP);
 8011394:	bf00      	nop
 8011396:	4b0e      	ldr	r3, [pc, #56]	; (80113d0 <LidarSetPos+0x1980>)
 8011398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801139a:	2b10      	cmp	r3, #16
 801139c:	d0fb      	beq.n	8011396 <LidarSetPos+0x1946>
								if(blue)
 801139e:	4b12      	ldr	r3, [pc, #72]	; (80113e8 <LidarSetPos+0x1998>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d030      	beq.n	8011408 <LidarSetPos+0x19b8>
								{
									vesc_speed = BlueOppoType2;
 80113a6:	4b06      	ldr	r3, [pc, #24]	; (80113c0 <LidarSetPos+0x1970>)
 80113a8:	4a15      	ldr	r2, [pc, #84]	; (8011400 <LidarSetPos+0x19b0>)
 80113aa:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 80113ac:	4b06      	ldr	r3, [pc, #24]	; (80113c8 <LidarSetPos+0x1978>)
 80113ae:	4a15      	ldr	r2, [pc, #84]	; (8011404 <LidarSetPos+0x19b4>)
 80113b0:	601a      	str	r2, [r3, #0]
 80113b2:	e02f      	b.n	8011414 <LidarSetPos+0x19c4>
 80113b4:	f3af 8000 	nop.w
 80113b8:	9999999a 	.word	0x9999999a
 80113bc:	3fa99999 	.word	0x3fa99999
 80113c0:	200065b8 	.word	0x200065b8
 80113c4:	4154cccd 	.word	0x4154cccd
 80113c8:	20007494 	.word	0x20007494
 80113cc:	45039000 	.word	0x45039000
 80113d0:	2000a240 	.word	0x2000a240
 80113d4:	20006d44 	.word	0x20006d44
 80113d8:	20007728 	.word	0x20007728
 80113dc:	3fe00000 	.word	0x3fe00000
 80113e0:	c2b20000 	.word	0xc2b20000
 80113e4:	200073d0 	.word	0x200073d0
 80113e8:	20006a44 	.word	0x20006a44
 80113ec:	41026666 	.word	0x41026666
 80113f0:	44bea000 	.word	0x44bea000
 80113f4:	4104cccd 	.word	0x4104cccd
 80113f8:	44c1c000 	.word	0x44c1c000
 80113fc:	40020c00 	.word	0x40020c00
 8011400:	414f3333 	.word	0x414f3333
 8011404:	45020000 	.word	0x45020000
								}
								else
								{
									vesc_speed = RedOppoType2;
 8011408:	4bb9      	ldr	r3, [pc, #740]	; (80116f0 <LidarSetPos+0x1ca0>)
 801140a:	4aba      	ldr	r2, [pc, #744]	; (80116f4 <LidarSetPos+0x1ca4>)
 801140c:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 801140e:	4bba      	ldr	r3, [pc, #744]	; (80116f8 <LidarSetPos+0x1ca8>)
 8011410:	4aba      	ldr	r2, [pc, #744]	; (80116fc <LidarSetPos+0x1cac>)
 8011412:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8011414:	4bba      	ldr	r3, [pc, #744]	; (8011700 <LidarSetPos+0x1cb0>)
 8011416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801141c:	d108      	bne.n	8011430 <LidarSetPos+0x19e0>
							{
								while(ps4.button == SQUARE);
 801141e:	bf00      	nop
 8011420:	4bb7      	ldr	r3, [pc, #732]	; (8011700 <LidarSetPos+0x1cb0>)
 8011422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011428:	d0fa      	beq.n	8011420 <LidarSetPos+0x19d0>
								PP_stop(&pp);
 801142a:	48b6      	ldr	r0, [pc, #728]	; (8011704 <LidarSetPos+0x1cb4>)
 801142c:	f7f4 ff08 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist <= lsr_center_2[0][1] + Offset_2 - 0.4)
 8011430:	4bb5      	ldr	r3, [pc, #724]	; (8011708 <LidarSetPos+0x1cb8>)
 8011432:	69db      	ldr	r3, [r3, #28]
 8011434:	4618      	mov	r0, r3
 8011436:	f7ef f887 	bl	8000548 <__aeabi_f2d>
 801143a:	4604      	mov	r4, r0
 801143c:	460d      	mov	r5, r1
 801143e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4618      	mov	r0, r3
 8011446:	f7ef f87f 	bl	8000548 <__aeabi_f2d>
 801144a:	f04f 0200 	mov.w	r2, #0
 801144e:	4baf      	ldr	r3, [pc, #700]	; (801170c <LidarSetPos+0x1cbc>)
 8011450:	f7ee ff1c 	bl	800028c <__adddf3>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	4610      	mov	r0, r2
 801145a:	4619      	mov	r1, r3
 801145c:	a3a0      	add	r3, pc, #640	; (adr r3, 80116e0 <LidarSetPos+0x1c90>)
 801145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011462:	f7ee ff11 	bl	8000288 <__aeabi_dsub>
 8011466:	4602      	mov	r2, r0
 8011468:	460b      	mov	r3, r1
 801146a:	4620      	mov	r0, r4
 801146c:	4629      	mov	r1, r5
 801146e:	f7ef fb3f 	bl	8000af0 <__aeabi_dcmple>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d100      	bne.n	801147a <LidarSetPos+0x1a2a>
 8011478:	e002      	b.n	8011480 <LidarSetPos+0x1a30>
								PP_stop(&pp);
 801147a:	48a2      	ldr	r0, [pc, #648]	; (8011704 <LidarSetPos+0x1cb4>)
 801147c:	f7f4 fee0 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8011480:	4ba0      	ldr	r3, [pc, #640]	; (8011704 <LidarSetPos+0x1cb4>)
 8011482:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011486:	f003 0310 	and.w	r3, r3, #16
 801148a:	b2db      	uxtb	r3, r3
 801148c:	2b00      	cmp	r3, #0
 801148e:	f47f af7d 	bne.w	801138c <LidarSetPos+0x193c>
						}
					}
					PP_start(robot_center, 1, &pp);
 8011492:	f107 0308 	add.w	r3, r7, #8
 8011496:	4a9b      	ldr	r2, [pc, #620]	; (8011704 <LidarSetPos+0x1cb4>)
 8011498:	2101      	movs	r1, #1
 801149a:	4618      	mov	r0, r3
 801149c:	f7f4 fb98 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 80114a0:	f004 fdde 	bl	8016060 <HAL_GetTick>
 80114a4:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 80114a8:	e027      	b.n	80114fa <LidarSetPos+0x1aaa>
					{
						after = HAL_GetTick();
 80114aa:	f004 fdd9 	bl	8016060 <HAL_GetTick>
 80114ae:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 750)
 80114b2:	4b94      	ldr	r3, [pc, #592]	; (8011704 <LidarSetPos+0x1cb4>)
 80114b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80114b8:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8011710 <LidarSetPos+0x1cc0>
 80114bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c4:	d80b      	bhi.n	80114de <LidarSetPos+0x1a8e>
 80114c6:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80114ca:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	f240 22ed 	movw	r2, #749	; 0x2ed
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d902      	bls.n	80114de <LidarSetPos+0x1a8e>
							PP_stop(&pp);
 80114d8:	488a      	ldr	r0, [pc, #552]	; (8011704 <LidarSetPos+0x1cb4>)
 80114da:	f7f4 feb1 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 80114de:	4b88      	ldr	r3, [pc, #544]	; (8011700 <LidarSetPos+0x1cb0>)
 80114e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114e6:	d108      	bne.n	80114fa <LidarSetPos+0x1aaa>
						{
							while(ps4.button == SQUARE);
 80114e8:	bf00      	nop
 80114ea:	4b85      	ldr	r3, [pc, #532]	; (8011700 <LidarSetPos+0x1cb0>)
 80114ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80114f2:	d0fa      	beq.n	80114ea <LidarSetPos+0x1a9a>
							PP_stop(&pp);
 80114f4:	4883      	ldr	r0, [pc, #524]	; (8011704 <LidarSetPos+0x1cb4>)
 80114f6:	f7f4 fea3 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80114fa:	4b82      	ldr	r3, [pc, #520]	; (8011704 <LidarSetPos+0x1cb4>)
 80114fc:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011500:	f003 0301 	and.w	r3, r3, #1
 8011504:	b2db      	uxtb	r3, r3
 8011506:	2b00      	cmp	r3, #0
 8011508:	d1cf      	bne.n	80114aa <LidarSetPos+0x1a5a>
						}
					}

					stick_fence = 1;
 801150a:	4b82      	ldr	r3, [pc, #520]	; (8011714 <LidarSetPos+0x1cc4>)
 801150c:	2201      	movs	r2, #1
 801150e:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011510:	463b      	mov	r3, r7
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011518:	2b00      	cmp	r3, #0
 801151a:	d005      	beq.n	8011528 <LidarSetPos+0x1ad8>
					{
						osDelay(300);
 801151c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011520:	f00b fad4 	bl	801cacc <osDelay>
						Shot();
 8011524:	f7fd fa60 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011528:	463b      	mov	r3, r7
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011530:	2b00      	cmp	r3, #0
 8011532:	f040 810a 	bne.w	801174a <LidarSetPos+0x1cfa>
						LidarAdjust(lidar);
 8011536:	463b      	mov	r3, r7
 8011538:	6818      	ldr	r0, [r3, #0]
 801153a:	f003 fe55 	bl	80151e8 <LidarAdjust>

					break;
 801153e:	e104      	b.n	801174a <LidarSetPos+0x1cfa>

				case CENTER_4:
					stick_fence = 0;
 8011540:	4b74      	ldr	r3, [pc, #464]	; (8011714 <LidarSetPos+0x1cc4>)
 8011542:	2200      	movs	r2, #0
 8011544:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011546:	463b      	mov	r3, r7
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2200      	movs	r2, #0
 801154c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8011550:	4b71      	ldr	r3, [pc, #452]	; (8011718 <LidarSetPos+0x1cc8>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d006      	beq.n	8011566 <LidarSetPos+0x1b16>
					{
						vesc_speed = BlueType2;
 8011558:	4b65      	ldr	r3, [pc, #404]	; (80116f0 <LidarSetPos+0x1ca0>)
 801155a:	4a70      	ldr	r2, [pc, #448]	; (801171c <LidarSetPos+0x1ccc>)
 801155c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801155e:	4b66      	ldr	r3, [pc, #408]	; (80116f8 <LidarSetPos+0x1ca8>)
 8011560:	4a6f      	ldr	r2, [pc, #444]	; (8011720 <LidarSetPos+0x1cd0>)
 8011562:	601a      	str	r2, [r3, #0]
 8011564:	e005      	b.n	8011572 <LidarSetPos+0x1b22>
					}
					else
					{
						vesc_speed = RedType2;
 8011566:	4b62      	ldr	r3, [pc, #392]	; (80116f0 <LidarSetPos+0x1ca0>)
 8011568:	4a6e      	ldr	r2, [pc, #440]	; (8011724 <LidarSetPos+0x1cd4>)
 801156a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 801156c:	4b62      	ldr	r3, [pc, #392]	; (80116f8 <LidarSetPos+0x1ca8>)
 801156e:	4a6e      	ldr	r2, [pc, #440]	; (8011728 <LidarSetPos+0x1cd8>)
 8011570:	601a      	str	r2, [r3, #0]
					}

					lidar->pos = CENTER_2;
 8011572:	463b      	mov	r3, r7
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2204      	movs	r2, #4
 8011578:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_2, 1, &pp, 0, 0);
 801157c:	f507 609b 	add.w	r0, r7, #1240	; 0x4d8
 8011580:	2300      	movs	r3, #0
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	2300      	movs	r3, #0
 8011586:	4a5f      	ldr	r2, [pc, #380]	; (8011704 <LidarSetPos+0x1cb4>)
 8011588:	2101      	movs	r1, #1
 801158a:	f7f4 fce7 	bl	8005f5c <LSR_start>
					while(pp.lsr_start)
 801158e:	e04f      	b.n	8011630 <LidarSetPos+0x1be0>
					{
						if(ps4.button == UP)
 8011590:	4b5b      	ldr	r3, [pc, #364]	; (8011700 <LidarSetPos+0x1cb0>)
 8011592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011594:	2b10      	cmp	r3, #16
 8011596:	d115      	bne.n	80115c4 <LidarSetPos+0x1b74>
						{
							while(ps4.button == UP);
 8011598:	bf00      	nop
 801159a:	4b59      	ldr	r3, [pc, #356]	; (8011700 <LidarSetPos+0x1cb0>)
 801159c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801159e:	2b10      	cmp	r3, #16
 80115a0:	d0fb      	beq.n	801159a <LidarSetPos+0x1b4a>
							if(blue)
 80115a2:	4b5d      	ldr	r3, [pc, #372]	; (8011718 <LidarSetPos+0x1cc8>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d006      	beq.n	80115b8 <LidarSetPos+0x1b68>
							{
								vesc_speed = BlueOppoType2;
 80115aa:	4b51      	ldr	r3, [pc, #324]	; (80116f0 <LidarSetPos+0x1ca0>)
 80115ac:	4a5f      	ldr	r2, [pc, #380]	; (801172c <LidarSetPos+0x1cdc>)
 80115ae:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 80115b0:	4b51      	ldr	r3, [pc, #324]	; (80116f8 <LidarSetPos+0x1ca8>)
 80115b2:	4a5f      	ldr	r2, [pc, #380]	; (8011730 <LidarSetPos+0x1ce0>)
 80115b4:	601a      	str	r2, [r3, #0]
 80115b6:	e005      	b.n	80115c4 <LidarSetPos+0x1b74>
							}
							else
							{
								vesc_speed = RedOppoType2;
 80115b8:	4b4d      	ldr	r3, [pc, #308]	; (80116f0 <LidarSetPos+0x1ca0>)
 80115ba:	4a4e      	ldr	r2, [pc, #312]	; (80116f4 <LidarSetPos+0x1ca4>)
 80115bc:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 80115be:	4b4e      	ldr	r3, [pc, #312]	; (80116f8 <LidarSetPos+0x1ca8>)
 80115c0:	4a4e      	ldr	r2, [pc, #312]	; (80116fc <LidarSetPos+0x1cac>)
 80115c2:	601a      	str	r2, [r3, #0]
							}
						}

						if(ps4.button == SQUARE)
 80115c4:	4b4e      	ldr	r3, [pc, #312]	; (8011700 <LidarSetPos+0x1cb0>)
 80115c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115cc:	d108      	bne.n	80115e0 <LidarSetPos+0x1b90>
						{
							while(ps4.button == SQUARE);
 80115ce:	bf00      	nop
 80115d0:	4b4b      	ldr	r3, [pc, #300]	; (8011700 <LidarSetPos+0x1cb0>)
 80115d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115d8:	d0fa      	beq.n	80115d0 <LidarSetPos+0x1b80>
							PP_stop(&pp);
 80115da:	484a      	ldr	r0, [pc, #296]	; (8011704 <LidarSetPos+0x1cb4>)
 80115dc:	f7f4 fe30 	bl	8006240 <PP_stop>
						}

						if(lsrL.dist <= lsr_center_2[0][1] + Offset_3 - 0.5)
 80115e0:	4b49      	ldr	r3, [pc, #292]	; (8011708 <LidarSetPos+0x1cb8>)
 80115e2:	69db      	ldr	r3, [r3, #28]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7ee ffaf 	bl	8000548 <__aeabi_f2d>
 80115ea:	4604      	mov	r4, r0
 80115ec:	460d      	mov	r5, r1
 80115ee:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7ee ffa7 	bl	8000548 <__aeabi_f2d>
 80115fa:	a33b      	add	r3, pc, #236	; (adr r3, 80116e8 <LidarSetPos+0x1c98>)
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	f7ee fe44 	bl	800028c <__adddf3>
 8011604:	4602      	mov	r2, r0
 8011606:	460b      	mov	r3, r1
 8011608:	4610      	mov	r0, r2
 801160a:	4619      	mov	r1, r3
 801160c:	f04f 0200 	mov.w	r2, #0
 8011610:	4b48      	ldr	r3, [pc, #288]	; (8011734 <LidarSetPos+0x1ce4>)
 8011612:	f7ee fe39 	bl	8000288 <__aeabi_dsub>
 8011616:	4602      	mov	r2, r0
 8011618:	460b      	mov	r3, r1
 801161a:	4620      	mov	r0, r4
 801161c:	4629      	mov	r1, r5
 801161e:	f7ef fa67 	bl	8000af0 <__aeabi_dcmple>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d100      	bne.n	801162a <LidarSetPos+0x1bda>
 8011628:	e002      	b.n	8011630 <LidarSetPos+0x1be0>
							PP_stop(&pp);
 801162a:	4836      	ldr	r0, [pc, #216]	; (8011704 <LidarSetPos+0x1cb4>)
 801162c:	f7f4 fe08 	bl	8006240 <PP_stop>
					while(pp.lsr_start)
 8011630:	4b34      	ldr	r3, [pc, #208]	; (8011704 <LidarSetPos+0x1cb4>)
 8011632:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011636:	f003 0310 	and.w	r3, r3, #16
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d1a7      	bne.n	8011590 <LidarSetPos+0x1b40>
					}

					PP_start(robot_center, 1, &pp);
 8011640:	f107 0308 	add.w	r3, r7, #8
 8011644:	4a2f      	ldr	r2, [pc, #188]	; (8011704 <LidarSetPos+0x1cb4>)
 8011646:	2101      	movs	r1, #1
 8011648:	4618      	mov	r0, r3
 801164a:	f7f4 fac1 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801164e:	f004 fd07 	bl	8016060 <HAL_GetTick>
 8011652:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8011656:	e027      	b.n	80116a8 <LidarSetPos+0x1c58>
					{
						after = HAL_GetTick();
 8011658:	f004 fd02 	bl	8016060 <HAL_GetTick>
 801165c:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 750)
 8011660:	4b28      	ldr	r3, [pc, #160]	; (8011704 <LidarSetPos+0x1cb4>)
 8011662:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011666:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8011710 <LidarSetPos+0x1cc0>
 801166a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011672:	d80b      	bhi.n	801168c <LidarSetPos+0x1c3c>
 8011674:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8011678:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011682:	4293      	cmp	r3, r2
 8011684:	d902      	bls.n	801168c <LidarSetPos+0x1c3c>
							PP_stop(&pp);
 8011686:	481f      	ldr	r0, [pc, #124]	; (8011704 <LidarSetPos+0x1cb4>)
 8011688:	f7f4 fdda 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 801168c:	4b1c      	ldr	r3, [pc, #112]	; (8011700 <LidarSetPos+0x1cb0>)
 801168e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011694:	d108      	bne.n	80116a8 <LidarSetPos+0x1c58>
						{
							while(ps4.button == SQUARE);
 8011696:	bf00      	nop
 8011698:	4b19      	ldr	r3, [pc, #100]	; (8011700 <LidarSetPos+0x1cb0>)
 801169a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801169c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80116a0:	d0fa      	beq.n	8011698 <LidarSetPos+0x1c48>
							PP_stop(&pp);
 80116a2:	4818      	ldr	r0, [pc, #96]	; (8011704 <LidarSetPos+0x1cb4>)
 80116a4:	f7f4 fdcc 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80116a8:	4b16      	ldr	r3, [pc, #88]	; (8011704 <LidarSetPos+0x1cb4>)
 80116aa:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80116ae:	f003 0301 	and.w	r3, r3, #1
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1cf      	bne.n	8011658 <LidarSetPos+0x1c08>
						}
					}

					stick_fence = 1;
 80116b8:	4b16      	ldr	r3, [pc, #88]	; (8011714 <LidarSetPos+0x1cc4>)
 80116ba:	2201      	movs	r2, #1
 80116bc:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80116be:	463b      	mov	r3, r7
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d042      	beq.n	8011750 <LidarSetPos+0x1d00>
					{
						osDelay(300);
 80116ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80116ce:	f00b f9fd 	bl	801cacc <osDelay>
						Shot();
 80116d2:	f7fd f989 	bl	800e9e8 <Shot>
					}
					break;
 80116d6:	e03b      	b.n	8011750 <LidarSetPos+0x1d00>

				default:
					break;
 80116d8:	bf00      	nop
 80116da:	f002 be30 	b.w	801433e <LidarSetPos+0x48ee>
 80116de:	bf00      	nop
 80116e0:	9999999a 	.word	0x9999999a
 80116e4:	3fd99999 	.word	0x3fd99999
 80116e8:	9999999a 	.word	0x9999999a
 80116ec:	3fe99999 	.word	0x3fe99999
 80116f0:	200065b8 	.word	0x200065b8
 80116f4:	4154cccd 	.word	0x4154cccd
 80116f8:	20007494 	.word	0x20007494
 80116fc:	45039000 	.word	0x45039000
 8011700:	2000a240 	.word	0x2000a240
 8011704:	20006d44 	.word	0x20006d44
 8011708:	20007728 	.word	0x20007728
 801170c:	3fe80000 	.word	0x3fe80000
 8011710:	c2b20000 	.word	0xc2b20000
 8011714:	200073d0 	.word	0x200073d0
 8011718:	20006a44 	.word	0x20006a44
 801171c:	41026666 	.word	0x41026666
 8011720:	44bea000 	.word	0x44bea000
 8011724:	4104cccd 	.word	0x4104cccd
 8011728:	44c1c000 	.word	0x44c1c000
 801172c:	414f3333 	.word	0x414f3333
 8011730:	45020000 	.word	0x45020000
 8011734:	3fe00000 	.word	0x3fe00000
					break;
 8011738:	bf00      	nop
 801173a:	f002 be00 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801173e:	bf00      	nop
 8011740:	f002 bdfd 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8011744:	bf00      	nop
 8011746:	f002 bdfa 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801174a:	bf00      	nop
 801174c:	f002 bdf7 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8011750:	bf00      	nop
			}
			break;
 8011752:	f002 bdf4 	b.w	801433e <LidarSetPos+0x48ee>

		case CENTER:
			switch(lidar->pos) // Self Pose
 8011756:	463b      	mov	r3, r7
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 801175e:	3b01      	subs	r3, #1
 8011760:	2b08      	cmp	r3, #8
 8011762:	f200 865e 	bhi.w	8012422 <LidarSetPos+0x29d2>
 8011766:	a201      	add	r2, pc, #4	; (adr r2, 801176c <LidarSetPos+0x1d1c>)
 8011768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176c:	08011791 	.word	0x08011791
 8011770:	08011957 	.word	0x08011957
 8011774:	08011973 	.word	0x08011973
 8011778:	08011c1b 	.word	0x08011c1b
 801177c:	08012423 	.word	0x08012423
 8011780:	08011ebb 	.word	0x08011ebb
 8011784:	0801218b 	.word	0x0801218b
 8011788:	08011965 	.word	0x08011965
 801178c:	0801179f 	.word	0x0801179f
			{
				case PICK_LEFT:
					lidar->pos = CENTER;
 8011790:	463b      	mov	r3, r7
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2205      	movs	r2, #5
 8011796:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801179a:	f000 be4f 	b.w	801243c <LidarSetPos+0x29ec>

				case PICK_RIGHT:
					stick_fence = 0;
 801179e:	4bb6      	ldr	r3, [pc, #728]	; (8011a78 <LidarSetPos+0x2028>)
 80117a0:	2200      	movs	r2, #0
 80117a2:	601a      	str	r2, [r3, #0]
					if(blue)
 80117a4:	4bb5      	ldr	r3, [pc, #724]	; (8011a7c <LidarSetPos+0x202c>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d006      	beq.n	80117ba <LidarSetPos+0x1d6a>
					{
						vesc_speed = BlueType3;
 80117ac:	4bb4      	ldr	r3, [pc, #720]	; (8011a80 <LidarSetPos+0x2030>)
 80117ae:	4ab5      	ldr	r2, [pc, #724]	; (8011a84 <LidarSetPos+0x2034>)
 80117b0:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3Duty;
 80117b2:	4bb5      	ldr	r3, [pc, #724]	; (8011a88 <LidarSetPos+0x2038>)
 80117b4:	4ab5      	ldr	r2, [pc, #724]	; (8011a8c <LidarSetPos+0x203c>)
 80117b6:	601a      	str	r2, [r3, #0]
 80117b8:	e005      	b.n	80117c6 <LidarSetPos+0x1d76>
					}
					else
					{
						vesc_speed = RedType3;
 80117ba:	4bb1      	ldr	r3, [pc, #708]	; (8011a80 <LidarSetPos+0x2030>)
 80117bc:	4ab4      	ldr	r2, [pc, #720]	; (8011a90 <LidarSetPos+0x2040>)
 80117be:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3Duty;
 80117c0:	4bb1      	ldr	r3, [pc, #708]	; (8011a88 <LidarSetPos+0x2038>)
 80117c2:	4ab4      	ldr	r2, [pc, #720]	; (8011a94 <LidarSetPos+0x2044>)
 80117c4:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80117c6:	f7fc fdc1 	bl	800e34c <ResetCoordinate>
					lidar->pos = CENTER;
 80117ca:	463b      	mov	r3, r7
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2205      	movs	r2, #5
 80117d0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 80117d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80117d8:	4aaf      	ldr	r2, [pc, #700]	; (8011a98 <LidarSetPos+0x2048>)
 80117da:	2101      	movs	r1, #1
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f4 f9f7 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 80117e2:	e00d      	b.n	8011800 <LidarSetPos+0x1db0>
					{
						if(ps4.button == SQUARE)
 80117e4:	4bad      	ldr	r3, [pc, #692]	; (8011a9c <LidarSetPos+0x204c>)
 80117e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117ec:	d108      	bne.n	8011800 <LidarSetPos+0x1db0>
						{
							while(ps4.button == SQUARE);
 80117ee:	bf00      	nop
 80117f0:	4baa      	ldr	r3, [pc, #680]	; (8011a9c <LidarSetPos+0x204c>)
 80117f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117f8:	d0fa      	beq.n	80117f0 <LidarSetPos+0x1da0>
							PP_stop(&pp);
 80117fa:	48a7      	ldr	r0, [pc, #668]	; (8011a98 <LidarSetPos+0x2048>)
 80117fc:	f7f4 fd20 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8011800:	4ba5      	ldr	r3, [pc, #660]	; (8011a98 <LidarSetPos+0x2048>)
 8011802:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	b2db      	uxtb	r3, r3
 801180c:	2b00      	cmp	r3, #0
 801180e:	d1e9      	bne.n	80117e4 <LidarSetPos+0x1d94>
						}
					}
					LoadRing();
 8011810:	f7fc fd44 	bl	800e29c <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center, 1, &pp);
 8011814:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011818:	4a9f      	ldr	r2, [pc, #636]	; (8011a98 <LidarSetPos+0x2048>)
 801181a:	2101      	movs	r1, #1
 801181c:	4618      	mov	r0, r3
 801181e:	f7f4 f9d7 	bl	8005bd0 <PP_start>

					load_adjust = 1;
 8011822:	4b9f      	ldr	r3, [pc, #636]	; (8011aa0 <LidarSetPos+0x2050>)
 8011824:	2201      	movs	r2, #1
 8011826:	601a      	str	r2, [r3, #0]
					AdjustRings();
 8011828:	f7fc fd7e 	bl	800e328 <AdjustRings>
					while(pp.pp_start)
 801182c:	e03d      	b.n	80118aa <LidarSetPos+0x1e5a>
					{
						if(ps4.button == SQUARE)
 801182e:	4b9b      	ldr	r3, [pc, #620]	; (8011a9c <LidarSetPos+0x204c>)
 8011830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011836:	d108      	bne.n	801184a <LidarSetPos+0x1dfa>
						{
							while(ps4.button == SQUARE);
 8011838:	bf00      	nop
 801183a:	4b98      	ldr	r3, [pc, #608]	; (8011a9c <LidarSetPos+0x204c>)
 801183c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801183e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011842:	d0fa      	beq.n	801183a <LidarSetPos+0x1dea>
							PP_stop(&pp);
 8011844:	4894      	ldr	r0, [pc, #592]	; (8011a98 <LidarSetPos+0x2048>)
 8011846:	f7f4 fcfb 	bl	8006240 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 801184a:	2108      	movs	r1, #8
 801184c:	4895      	ldr	r0, [pc, #596]	; (8011aa4 <LidarSetPos+0x2054>)
 801184e:	f006 fa83 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d006      	beq.n	8011866 <LidarSetPos+0x1e16>
 8011858:	2110      	movs	r1, #16
 801185a:	4892      	ldr	r0, [pc, #584]	; (8011aa4 <LidarSetPos+0x2054>)
 801185c:	f006 fa7c 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d109      	bne.n	801187a <LidarSetPos+0x1e2a>
						{
							pp.target_y[0] = pp.real_y;
 8011866:	4b8c      	ldr	r3, [pc, #560]	; (8011a98 <LidarSetPos+0x2048>)
 8011868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801186a:	4a8b      	ldr	r2, [pc, #556]	; (8011a98 <LidarSetPos+0x2048>)
 801186c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8011870:	4b89      	ldr	r3, [pc, #548]	; (8011a98 <LidarSetPos+0x2048>)
 8011872:	f04f 0200 	mov.w	r2, #0
 8011876:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(pp.real_x <= -4.6)
 801187a:	4b87      	ldr	r3, [pc, #540]	; (8011a98 <LidarSetPos+0x2048>)
 801187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801187e:	4618      	mov	r0, r3
 8011880:	f7ee fe62 	bl	8000548 <__aeabi_f2d>
 8011884:	a37a      	add	r3, pc, #488	; (adr r3, 8011a70 <LidarSetPos+0x2020>)
 8011886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188a:	f7ef f931 	bl	8000af0 <__aeabi_dcmple>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d100      	bne.n	8011896 <LidarSetPos+0x1e46>
 8011894:	e009      	b.n	80118aa <LidarSetPos+0x1e5a>
						{
							pp.target_y[0] = pp.real_y;
 8011896:	4b80      	ldr	r3, [pc, #512]	; (8011a98 <LidarSetPos+0x2048>)
 8011898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801189a:	4a7f      	ldr	r2, [pc, #508]	; (8011a98 <LidarSetPos+0x2048>)
 801189c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 80118a0:	4b7d      	ldr	r3, [pc, #500]	; (8011a98 <LidarSetPos+0x2048>)
 80118a2:	f04f 0200 	mov.w	r2, #0
 80118a6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 80118aa:	4b7b      	ldr	r3, [pc, #492]	; (8011a98 <LidarSetPos+0x2048>)
 80118ac:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80118b0:	f003 0301 	and.w	r3, r3, #1
 80118b4:	b2db      	uxtb	r3, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1b9      	bne.n	801182e <LidarSetPos+0x1dde>
						}
					}

					adjust_servo;
 80118ba:	f44f 7148 	mov.w	r1, #800	; 0x320
 80118be:	487a      	ldr	r0, [pc, #488]	; (8011aa8 <LidarSetPos+0x2058>)
 80118c0:	f7f9 ff46 	bl	800b750 <ServoSetPulse>
 80118c4:	f640 0166 	movw	r1, #2150	; 0x866
 80118c8:	4878      	ldr	r0, [pc, #480]	; (8011aac <LidarSetPos+0x205c>)
 80118ca:	f7f9 ff41 	bl	800b750 <ServoSetPulse>

					PP_start(robot_center, 1, &pp);
 80118ce:	f107 0308 	add.w	r3, r7, #8
 80118d2:	4a71      	ldr	r2, [pc, #452]	; (8011a98 <LidarSetPos+0x2048>)
 80118d4:	2101      	movs	r1, #1
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7f4 f97a 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 80118dc:	f004 fbc0 	bl	8016060 <HAL_GetTick>
 80118e0:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 80118e4:	e026      	b.n	8011934 <LidarSetPos+0x1ee4>
					{
						after = HAL_GetTick();
 80118e6:	f004 fbbb 	bl	8016060 <HAL_GetTick>
 80118ea:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 1000)
 80118ee:	4b6a      	ldr	r3, [pc, #424]	; (8011a98 <LidarSetPos+0x2048>)
 80118f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80118f4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8011ab0 <LidarSetPos+0x2060>
 80118f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011900:	d80a      	bhi.n	8011918 <LidarSetPos+0x1ec8>
 8011902:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8011906:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011910:	d302      	bcc.n	8011918 <LidarSetPos+0x1ec8>
							PP_stop(&pp);
 8011912:	4861      	ldr	r0, [pc, #388]	; (8011a98 <LidarSetPos+0x2048>)
 8011914:	f7f4 fc94 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8011918:	4b60      	ldr	r3, [pc, #384]	; (8011a9c <LidarSetPos+0x204c>)
 801191a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011920:	d108      	bne.n	8011934 <LidarSetPos+0x1ee4>
						{
							while(ps4.button == SQUARE);
 8011922:	bf00      	nop
 8011924:	4b5d      	ldr	r3, [pc, #372]	; (8011a9c <LidarSetPos+0x204c>)
 8011926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801192c:	d0fa      	beq.n	8011924 <LidarSetPos+0x1ed4>
							PP_stop(&pp);
 801192e:	485a      	ldr	r0, [pc, #360]	; (8011a98 <LidarSetPos+0x2048>)
 8011930:	f7f4 fc86 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8011934:	4b58      	ldr	r3, [pc, #352]	; (8011a98 <LidarSetPos+0x2048>)
 8011936:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801193a:	f003 0301 	and.w	r3, r3, #1
 801193e:	b2db      	uxtb	r3, r3
 8011940:	2b00      	cmp	r3, #0
 8011942:	d1d0      	bne.n	80118e6 <LidarSetPos+0x1e96>
						}
					}

					stick_fence = 1;
 8011944:	4b4c      	ldr	r3, [pc, #304]	; (8011a78 <LidarSetPos+0x2028>)
 8011946:	2201      	movs	r2, #1
 8011948:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 801194a:	463b      	mov	r3, r7
 801194c:	6818      	ldr	r0, [r3, #0]
 801194e:	f003 fc4b 	bl	80151e8 <LidarAdjust>

					break;
 8011952:	f000 bd73 	b.w	801243c <LidarSetPos+0x29ec>

				case UPPER_LEFT:
					lidar->pos = CENTER;
 8011956:	463b      	mov	r3, r7
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2205      	movs	r2, #5
 801195c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8011960:	f000 bd6c 	b.w	801243c <LidarSetPos+0x29ec>

				case UPPER_RIGHT:
					lidar->pos = CENTER;
 8011964:	463b      	mov	r3, r7
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2205      	movs	r2, #5
 801196a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801196e:	f000 bd65 	b.w	801243c <LidarSetPos+0x29ec>

				case CENTER_1:
					stick_fence = 0;
 8011972:	4b41      	ldr	r3, [pc, #260]	; (8011a78 <LidarSetPos+0x2028>)
 8011974:	2200      	movs	r2, #0
 8011976:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8011978:	4b43      	ldr	r3, [pc, #268]	; (8011a88 <LidarSetPos+0x2038>)
 801197a:	4a4e      	ldr	r2, [pc, #312]	; (8011ab4 <LidarSetPos+0x2064>)
 801197c:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 801197e:	463b      	mov	r3, r7
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2200      	movs	r2, #0
 8011984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 8011988:	4b3d      	ldr	r3, [pc, #244]	; (8011a80 <LidarSetPos+0x2030>)
 801198a:	4a4b      	ldr	r2, [pc, #300]	; (8011ab8 <LidarSetPos+0x2068>)
 801198c:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 801198e:	463b      	mov	r3, r7
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011996:	2b00      	cmp	r3, #0
 8011998:	d158      	bne.n	8011a4c <LidarSetPos+0x1ffc>
					{
						ResetCoordinate();
 801199a:	f7fc fcd7 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER;
 801199e:	463b      	mov	r3, r7
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2205      	movs	r2, #5
 80119a4:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_1_to_center, 1, &pp);
 80119a8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80119ac:	4a3a      	ldr	r2, [pc, #232]	; (8011a98 <LidarSetPos+0x2048>)
 80119ae:	2101      	movs	r1, #1
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7f4 f90d 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 80119b6:	e040      	b.n	8011a3a <LidarSetPos+0x1fea>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 80119b8:	2108      	movs	r1, #8
 80119ba:	483a      	ldr	r0, [pc, #232]	; (8011aa4 <LidarSetPos+0x2054>)
 80119bc:	f006 f9cc 	bl	8017d58 <HAL_GPIO_ReadPin>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d006      	beq.n	80119d4 <LidarSetPos+0x1f84>
 80119c6:	2110      	movs	r1, #16
 80119c8:	4836      	ldr	r0, [pc, #216]	; (8011aa4 <LidarSetPos+0x2054>)
 80119ca:	f006 f9c5 	bl	8017d58 <HAL_GPIO_ReadPin>
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d109      	bne.n	80119e8 <LidarSetPos+0x1f98>
							{
								pp.target_y[0] = pp.real_y;
 80119d4:	4b30      	ldr	r3, [pc, #192]	; (8011a98 <LidarSetPos+0x2048>)
 80119d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119d8:	4a2f      	ldr	r2, [pc, #188]	; (8011a98 <LidarSetPos+0x2048>)
 80119da:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 80119de:	4b2e      	ldr	r3, [pc, #184]	; (8011a98 <LidarSetPos+0x2048>)
 80119e0:	f04f 0200 	mov.w	r2, #0
 80119e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_1_to_center[0][1])
 80119e8:	4b2b      	ldr	r3, [pc, #172]	; (8011a98 <LidarSetPos+0x2048>)
 80119ea:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80119ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80119f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80119f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119fe:	db09      	blt.n	8011a14 <LidarSetPos+0x1fc4>
							{
								pp.target_y[0] = pp.real_y;
 8011a00:	4b25      	ldr	r3, [pc, #148]	; (8011a98 <LidarSetPos+0x2048>)
 8011a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a04:	4a24      	ldr	r2, [pc, #144]	; (8011a98 <LidarSetPos+0x2048>)
 8011a06:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011a0a:	4b23      	ldr	r3, [pc, #140]	; (8011a98 <LidarSetPos+0x2048>)
 8011a0c:	f04f 0200 	mov.w	r2, #0
 8011a10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 8011a14:	4b21      	ldr	r3, [pc, #132]	; (8011a9c <LidarSetPos+0x204c>)
 8011a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a1c:	d10d      	bne.n	8011a3a <LidarSetPos+0x1fea>
							{
								while(ps4.button == SQUARE);
 8011a1e:	bf00      	nop
 8011a20:	4b1e      	ldr	r3, [pc, #120]	; (8011a9c <LidarSetPos+0x204c>)
 8011a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a28:	d0fa      	beq.n	8011a20 <LidarSetPos+0x1fd0>
								PP_stop(&pp);
 8011a2a:	481b      	ldr	r0, [pc, #108]	; (8011a98 <LidarSetPos+0x2048>)
 8011a2c:	f7f4 fc08 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8011a30:	463b      	mov	r3, r7
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	2201      	movs	r2, #1
 8011a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 8011a3a:	4b17      	ldr	r3, [pc, #92]	; (8011a98 <LidarSetPos+0x2048>)
 8011a3c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011a40:	f003 0301 	and.w	r3, r3, #1
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1b6      	bne.n	80119b8 <LidarSetPos+0x1f68>
 8011a4a:	e08f      	b.n	8011b6c <LidarSetPos+0x211c>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8011a4c:	463b      	mov	r3, r7
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2205      	movs	r2, #5
 8011a52:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center, 1, &pp, 0, 0);
 8011a56:	f207 40bc 	addw	r0, r7, #1212	; 0x4bc
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	2300      	movs	r3, #0
 8011a60:	4a0d      	ldr	r2, [pc, #52]	; (8011a98 <LidarSetPos+0x2048>)
 8011a62:	2101      	movs	r1, #1
 8011a64:	f7f4 fa7a 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8011a68:	e078      	b.n	8011b5c <LidarSetPos+0x210c>
 8011a6a:	bf00      	nop
 8011a6c:	f3af 8000 	nop.w
 8011a70:	66666666 	.word	0x66666666
 8011a74:	c0126666 	.word	0xc0126666
 8011a78:	200073d0 	.word	0x200073d0
 8011a7c:	20006a44 	.word	0x20006a44
 8011a80:	200065b8 	.word	0x200065b8
 8011a84:	4151999a 	.word	0x4151999a
 8011a88:	20007494 	.word	0x20007494
 8011a8c:	44f78000 	.word	0x44f78000
 8011a90:	41540000 	.word	0x41540000
 8011a94:	44fbe000 	.word	0x44fbe000
 8011a98:	20006d44 	.word	0x20006d44
 8011a9c:	2000a240 	.word	0x2000a240
 8011aa0:	200095bc 	.word	0x200095bc
 8011aa4:	40020c00 	.word	0x40020c00
 8011aa8:	200079d8 	.word	0x200079d8
 8011aac:	2000a5e8 	.word	0x2000a5e8
 8011ab0:	c2b20000 	.word	0xc2b20000
 8011ab4:	445e8000 	.word	0x445e8000
 8011ab8:	406ccccd 	.word	0x406ccccd
						{
							if(ps4.button == UP)
 8011abc:	4b98      	ldr	r3, [pc, #608]	; (8011d20 <LidarSetPos+0x22d0>)
 8011abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac0:	2b10      	cmp	r3, #16
 8011ac2:	d115      	bne.n	8011af0 <LidarSetPos+0x20a0>
							{
								while(ps4.button == UP);
 8011ac4:	bf00      	nop
 8011ac6:	4b96      	ldr	r3, [pc, #600]	; (8011d20 <LidarSetPos+0x22d0>)
 8011ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aca:	2b10      	cmp	r3, #16
 8011acc:	d0fb      	beq.n	8011ac6 <LidarSetPos+0x2076>
								if(blue)
 8011ace:	4b95      	ldr	r3, [pc, #596]	; (8011d24 <LidarSetPos+0x22d4>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d006      	beq.n	8011ae4 <LidarSetPos+0x2094>
								{
									vesc_speed = BlueType3;
 8011ad6:	4b94      	ldr	r3, [pc, #592]	; (8011d28 <LidarSetPos+0x22d8>)
 8011ad8:	4a94      	ldr	r2, [pc, #592]	; (8011d2c <LidarSetPos+0x22dc>)
 8011ada:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8011adc:	4b94      	ldr	r3, [pc, #592]	; (8011d30 <LidarSetPos+0x22e0>)
 8011ade:	4a95      	ldr	r2, [pc, #596]	; (8011d34 <LidarSetPos+0x22e4>)
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	e005      	b.n	8011af0 <LidarSetPos+0x20a0>
								}
								else
								{
									vesc_speed = RedType3;
 8011ae4:	4b90      	ldr	r3, [pc, #576]	; (8011d28 <LidarSetPos+0x22d8>)
 8011ae6:	4a94      	ldr	r2, [pc, #592]	; (8011d38 <LidarSetPos+0x22e8>)
 8011ae8:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011aea:	4b91      	ldr	r3, [pc, #580]	; (8011d30 <LidarSetPos+0x22e0>)
 8011aec:	4a93      	ldr	r2, [pc, #588]	; (8011d3c <LidarSetPos+0x22ec>)
 8011aee:	601a      	str	r2, [r3, #0]
								}
							}
							if(ps4.button == SQUARE)
 8011af0:	4b8b      	ldr	r3, [pc, #556]	; (8011d20 <LidarSetPos+0x22d0>)
 8011af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011af8:	d108      	bne.n	8011b0c <LidarSetPos+0x20bc>
							{
								while(ps4.button == SQUARE);
 8011afa:	bf00      	nop
 8011afc:	4b88      	ldr	r3, [pc, #544]	; (8011d20 <LidarSetPos+0x22d0>)
 8011afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b04:	d0fa      	beq.n	8011afc <LidarSetPos+0x20ac>
								PP_stop(&pp);
 8011b06:	488e      	ldr	r0, [pc, #568]	; (8011d40 <LidarSetPos+0x22f0>)
 8011b08:	f7f4 fb9a 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist >= lsr_center[0][1] - Offset_2 - 0.1)
 8011b0c:	4b8d      	ldr	r3, [pc, #564]	; (8011d44 <LidarSetPos+0x22f4>)
 8011b0e:	69db      	ldr	r3, [r3, #28]
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ee fd19 	bl	8000548 <__aeabi_f2d>
 8011b16:	4604      	mov	r4, r0
 8011b18:	460d      	mov	r5, r1
 8011b1a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	4618      	mov	r0, r3
 8011b22:	f7ee fd11 	bl	8000548 <__aeabi_f2d>
 8011b26:	f04f 0200 	mov.w	r2, #0
 8011b2a:	4b87      	ldr	r3, [pc, #540]	; (8011d48 <LidarSetPos+0x22f8>)
 8011b2c:	f7ee fbac 	bl	8000288 <__aeabi_dsub>
 8011b30:	4602      	mov	r2, r0
 8011b32:	460b      	mov	r3, r1
 8011b34:	4610      	mov	r0, r2
 8011b36:	4619      	mov	r1, r3
 8011b38:	a377      	add	r3, pc, #476	; (adr r3, 8011d18 <LidarSetPos+0x22c8>)
 8011b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3e:	f7ee fba3 	bl	8000288 <__aeabi_dsub>
 8011b42:	4602      	mov	r2, r0
 8011b44:	460b      	mov	r3, r1
 8011b46:	4620      	mov	r0, r4
 8011b48:	4629      	mov	r1, r5
 8011b4a:	f7ee ffdb 	bl	8000b04 <__aeabi_dcmpge>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d100      	bne.n	8011b56 <LidarSetPos+0x2106>
 8011b54:	e002      	b.n	8011b5c <LidarSetPos+0x210c>
								PP_stop(&pp);
 8011b56:	487a      	ldr	r0, [pc, #488]	; (8011d40 <LidarSetPos+0x22f0>)
 8011b58:	f7f4 fb72 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8011b5c:	4b78      	ldr	r3, [pc, #480]	; (8011d40 <LidarSetPos+0x22f0>)
 8011b5e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011b62:	f003 0310 	and.w	r3, r3, #16
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d1a7      	bne.n	8011abc <LidarSetPos+0x206c>
						}
					}

					PP_start(robot_center, 1, &pp);
 8011b6c:	f107 0308 	add.w	r3, r7, #8
 8011b70:	4a73      	ldr	r2, [pc, #460]	; (8011d40 <LidarSetPos+0x22f0>)
 8011b72:	2101      	movs	r1, #1
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7f4 f82b 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8011b7a:	f004 fa71 	bl	8016060 <HAL_GetTick>
 8011b7e:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8011b82:	e026      	b.n	8011bd2 <LidarSetPos+0x2182>
					{
						after = HAL_GetTick();
 8011b84:	f004 fa6c 	bl	8016060 <HAL_GetTick>
 8011b88:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8011b8c:	4b6c      	ldr	r3, [pc, #432]	; (8011d40 <LidarSetPos+0x22f0>)
 8011b8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011b92:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8011d4c <LidarSetPos+0x22fc>
 8011b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9e:	db0a      	blt.n	8011bb6 <LidarSetPos+0x2166>
 8011ba0:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8011ba4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011bae:	d302      	bcc.n	8011bb6 <LidarSetPos+0x2166>
							PP_stop(&pp);
 8011bb0:	4863      	ldr	r0, [pc, #396]	; (8011d40 <LidarSetPos+0x22f0>)
 8011bb2:	f7f4 fb45 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8011bb6:	4b5a      	ldr	r3, [pc, #360]	; (8011d20 <LidarSetPos+0x22d0>)
 8011bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bbe:	d108      	bne.n	8011bd2 <LidarSetPos+0x2182>
						{
							while(ps4.button == SQUARE);
 8011bc0:	bf00      	nop
 8011bc2:	4b57      	ldr	r3, [pc, #348]	; (8011d20 <LidarSetPos+0x22d0>)
 8011bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bca:	d0fa      	beq.n	8011bc2 <LidarSetPos+0x2172>
							PP_stop(&pp);
 8011bcc:	485c      	ldr	r0, [pc, #368]	; (8011d40 <LidarSetPos+0x22f0>)
 8011bce:	f7f4 fb37 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8011bd2:	4b5b      	ldr	r3, [pc, #364]	; (8011d40 <LidarSetPos+0x22f0>)
 8011bd4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011bd8:	f003 0301 	and.w	r3, r3, #1
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1d0      	bne.n	8011b84 <LidarSetPos+0x2134>
						}
					}

					stick_fence = 1;
 8011be2:	4b5b      	ldr	r3, [pc, #364]	; (8011d50 <LidarSetPos+0x2300>)
 8011be4:	2201      	movs	r2, #1
 8011be6:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011be8:	463b      	mov	r3, r7
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d005      	beq.n	8011c00 <LidarSetPos+0x21b0>
					{
						osDelay(300);
 8011bf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011bf8:	f00a ff68 	bl	801cacc <osDelay>
						Shot();
 8011bfc:	f7fc fef4 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011c00:	463b      	mov	r3, r7
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f040 840d 	bne.w	8012428 <LidarSetPos+0x29d8>
						LidarAdjust(lidar);
 8011c0e:	463b      	mov	r3, r7
 8011c10:	6818      	ldr	r0, [r3, #0]
 8011c12:	f003 fae9 	bl	80151e8 <LidarAdjust>
					break;
 8011c16:	f000 bc07 	b.w	8012428 <LidarSetPos+0x29d8>


				case CENTER_2:
					stick_fence = 0;
 8011c1a:	4b4d      	ldr	r3, [pc, #308]	; (8011d50 <LidarSetPos+0x2300>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8011c20:	4b43      	ldr	r3, [pc, #268]	; (8011d30 <LidarSetPos+0x22e0>)
 8011c22:	4a4c      	ldr	r2, [pc, #304]	; (8011d54 <LidarSetPos+0x2304>)
 8011c24:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011c26:	463b      	mov	r3, r7
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 8011c30:	4b3d      	ldr	r3, [pc, #244]	; (8011d28 <LidarSetPos+0x22d8>)
 8011c32:	4a49      	ldr	r2, [pc, #292]	; (8011d58 <LidarSetPos+0x2308>)
 8011c34:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8011c36:	463b      	mov	r3, r7
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d159      	bne.n	8011cf6 <LidarSetPos+0x22a6>
					{
						ResetCoordinate();
 8011c42:	f7fc fb83 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER;
 8011c46:	463b      	mov	r3, r7
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2205      	movs	r2, #5
 8011c4c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_2_to_center, 1, &pp);
 8011c50:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8011c54:	4a3a      	ldr	r2, [pc, #232]	; (8011d40 <LidarSetPos+0x22f0>)
 8011c56:	2101      	movs	r1, #1
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7f3 ffb9 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8011c5e:	e041      	b.n	8011ce4 <LidarSetPos+0x2294>
						{
							if(ps4.button == SQUARE)
 8011c60:	4b2f      	ldr	r3, [pc, #188]	; (8011d20 <LidarSetPos+0x22d0>)
 8011c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c68:	d10d      	bne.n	8011c86 <LidarSetPos+0x2236>
							{
								while(ps4.button == SQUARE);
 8011c6a:	bf00      	nop
 8011c6c:	4b2c      	ldr	r3, [pc, #176]	; (8011d20 <LidarSetPos+0x22d0>)
 8011c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c74:	d0fa      	beq.n	8011c6c <LidarSetPos+0x221c>
								PP_stop(&pp);
 8011c76:	4832      	ldr	r0, [pc, #200]	; (8011d40 <LidarSetPos+0x22f0>)
 8011c78:	f7f4 fae2 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8011c7c:	463b      	mov	r3, r7
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2201      	movs	r2, #1
 8011c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_2;
	//							lidar->pos_counter = CENTER_2;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8011c86:	2108      	movs	r1, #8
 8011c88:	4834      	ldr	r0, [pc, #208]	; (8011d5c <LidarSetPos+0x230c>)
 8011c8a:	f006 f865 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d006      	beq.n	8011ca2 <LidarSetPos+0x2252>
 8011c94:	2110      	movs	r1, #16
 8011c96:	4831      	ldr	r0, [pc, #196]	; (8011d5c <LidarSetPos+0x230c>)
 8011c98:	f006 f85e 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d109      	bne.n	8011cb6 <LidarSetPos+0x2266>
							{
								pp.target_y[0] = pp.real_y;
 8011ca2:	4b27      	ldr	r3, [pc, #156]	; (8011d40 <LidarSetPos+0x22f0>)
 8011ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ca6:	4a26      	ldr	r2, [pc, #152]	; (8011d40 <LidarSetPos+0x22f0>)
 8011ca8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011cac:	4b24      	ldr	r3, [pc, #144]	; (8011d40 <LidarSetPos+0x22f0>)
 8011cae:	f04f 0200 	mov.w	r2, #0
 8011cb2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_2_to_center[0][1])
 8011cb6:	4b22      	ldr	r3, [pc, #136]	; (8011d40 <LidarSetPos+0x22f0>)
 8011cb8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011cbc:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8011cc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8011cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ccc:	da00      	bge.n	8011cd0 <LidarSetPos+0x2280>
 8011cce:	e009      	b.n	8011ce4 <LidarSetPos+0x2294>
							{
								pp.target_y[0] = pp.real_y;
 8011cd0:	4b1b      	ldr	r3, [pc, #108]	; (8011d40 <LidarSetPos+0x22f0>)
 8011cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cd4:	4a1a      	ldr	r2, [pc, #104]	; (8011d40 <LidarSetPos+0x22f0>)
 8011cd6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011cda:	4b19      	ldr	r3, [pc, #100]	; (8011d40 <LidarSetPos+0x22f0>)
 8011cdc:	f04f 0200 	mov.w	r2, #0
 8011ce0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8011ce4:	4b16      	ldr	r3, [pc, #88]	; (8011d40 <LidarSetPos+0x22f0>)
 8011ce6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011cea:	f003 0301 	and.w	r3, r3, #1
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d1b5      	bne.n	8011c60 <LidarSetPos+0x2210>
 8011cf4:	e08b      	b.n	8011e0e <LidarSetPos+0x23be>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8011cf6:	463b      	mov	r3, r7
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2205      	movs	r2, #5
 8011cfc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center, 1, &pp, 0, 0);
 8011d00:	f207 40bc 	addw	r0, r7, #1212	; 0x4bc
 8011d04:	2300      	movs	r3, #0
 8011d06:	9300      	str	r3, [sp, #0]
 8011d08:	2300      	movs	r3, #0
 8011d0a:	4a0d      	ldr	r2, [pc, #52]	; (8011d40 <LidarSetPos+0x22f0>)
 8011d0c:	2101      	movs	r1, #1
 8011d0e:	f7f4 f925 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8011d12:	e074      	b.n	8011dfe <LidarSetPos+0x23ae>
 8011d14:	f3af 8000 	nop.w
 8011d18:	9999999a 	.word	0x9999999a
 8011d1c:	3fb99999 	.word	0x3fb99999
 8011d20:	2000a240 	.word	0x2000a240
 8011d24:	20006a44 	.word	0x20006a44
 8011d28:	200065b8 	.word	0x200065b8
 8011d2c:	4151999a 	.word	0x4151999a
 8011d30:	20007494 	.word	0x20007494
 8011d34:	44f78000 	.word	0x44f78000
 8011d38:	41540000 	.word	0x41540000
 8011d3c:	44fbe000 	.word	0x44fbe000
 8011d40:	20006d44 	.word	0x20006d44
 8011d44:	20007728 	.word	0x20007728
 8011d48:	3fe80000 	.word	0x3fe80000
 8011d4c:	c2b60000 	.word	0xc2b60000
 8011d50:	200073d0 	.word	0x200073d0
 8011d54:	445e8000 	.word	0x445e8000
 8011d58:	406ccccd 	.word	0x406ccccd
 8011d5c:	40020c00 	.word	0x40020c00
						{
							if(ps4.button == SQUARE)
 8011d60:	4ba3      	ldr	r3, [pc, #652]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d68:	d108      	bne.n	8011d7c <LidarSetPos+0x232c>
							{
								while(ps4.button == SQUARE);
 8011d6a:	bf00      	nop
 8011d6c:	4ba0      	ldr	r3, [pc, #640]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d74:	d0fa      	beq.n	8011d6c <LidarSetPos+0x231c>
								PP_stop(&pp);
 8011d76:	489f      	ldr	r0, [pc, #636]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011d78:	f7f4 fa62 	bl	8006240 <PP_stop>
							}

							if(lsrL.dist >= lsr_center[0][1] - Offset + 0.15)
 8011d7c:	4b9e      	ldr	r3, [pc, #632]	; (8011ff8 <LidarSetPos+0x25a8>)
 8011d7e:	69db      	ldr	r3, [r3, #28]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7ee fbe1 	bl	8000548 <__aeabi_f2d>
 8011d86:	4604      	mov	r4, r0
 8011d88:	460d      	mov	r5, r1
 8011d8a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7ee fbd9 	bl	8000548 <__aeabi_f2d>
 8011d96:	f04f 0200 	mov.w	r2, #0
 8011d9a:	4b98      	ldr	r3, [pc, #608]	; (8011ffc <LidarSetPos+0x25ac>)
 8011d9c:	f7ee fa74 	bl	8000288 <__aeabi_dsub>
 8011da0:	4602      	mov	r2, r0
 8011da2:	460b      	mov	r3, r1
 8011da4:	4610      	mov	r0, r2
 8011da6:	4619      	mov	r1, r3
 8011da8:	a38f      	add	r3, pc, #572	; (adr r3, 8011fe8 <LidarSetPos+0x2598>)
 8011daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dae:	f7ee fa6d 	bl	800028c <__adddf3>
 8011db2:	4602      	mov	r2, r0
 8011db4:	460b      	mov	r3, r1
 8011db6:	4620      	mov	r0, r4
 8011db8:	4629      	mov	r1, r5
 8011dba:	f7ee fea3 	bl	8000b04 <__aeabi_dcmpge>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d002      	beq.n	8011dca <LidarSetPos+0x237a>
								PP_stop(&pp);
 8011dc4:	488b      	ldr	r0, [pc, #556]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011dc6:	f7f4 fa3b 	bl	8006240 <PP_stop>

							if(ps4.button == UP)
 8011dca:	4b89      	ldr	r3, [pc, #548]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dce:	2b10      	cmp	r3, #16
 8011dd0:	d115      	bne.n	8011dfe <LidarSetPos+0x23ae>
							{
								while(ps4.button == UP);
 8011dd2:	bf00      	nop
 8011dd4:	4b86      	ldr	r3, [pc, #536]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd8:	2b10      	cmp	r3, #16
 8011dda:	d0fb      	beq.n	8011dd4 <LidarSetPos+0x2384>
								if(blue)
 8011ddc:	4b88      	ldr	r3, [pc, #544]	; (8012000 <LidarSetPos+0x25b0>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d006      	beq.n	8011df2 <LidarSetPos+0x23a2>
								{
									vesc_speed = BlueType3;
 8011de4:	4b87      	ldr	r3, [pc, #540]	; (8012004 <LidarSetPos+0x25b4>)
 8011de6:	4a88      	ldr	r2, [pc, #544]	; (8012008 <LidarSetPos+0x25b8>)
 8011de8:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8011dea:	4b88      	ldr	r3, [pc, #544]	; (801200c <LidarSetPos+0x25bc>)
 8011dec:	4a88      	ldr	r2, [pc, #544]	; (8012010 <LidarSetPos+0x25c0>)
 8011dee:	601a      	str	r2, [r3, #0]
 8011df0:	e005      	b.n	8011dfe <LidarSetPos+0x23ae>
								}
								else
								{
									vesc_speed = RedType3;
 8011df2:	4b84      	ldr	r3, [pc, #528]	; (8012004 <LidarSetPos+0x25b4>)
 8011df4:	4a87      	ldr	r2, [pc, #540]	; (8012014 <LidarSetPos+0x25c4>)
 8011df6:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011df8:	4b84      	ldr	r3, [pc, #528]	; (801200c <LidarSetPos+0x25bc>)
 8011dfa:	4a87      	ldr	r2, [pc, #540]	; (8012018 <LidarSetPos+0x25c8>)
 8011dfc:	601a      	str	r2, [r3, #0]
						while(pp.lsr_start)
 8011dfe:	4b7d      	ldr	r3, [pc, #500]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011e00:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011e04:	f003 0310 	and.w	r3, r3, #16
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d1a8      	bne.n	8011d60 <LidarSetPos+0x2310>
								}
							}
						}
					}

					PP_start(robot_center, 1, &pp);
 8011e0e:	f107 0308 	add.w	r3, r7, #8
 8011e12:	4a78      	ldr	r2, [pc, #480]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011e14:	2101      	movs	r1, #1
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7f3 feda 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8011e1c:	f004 f920 	bl	8016060 <HAL_GetTick>
 8011e20:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8011e24:	e026      	b.n	8011e74 <LidarSetPos+0x2424>
					{
						after = HAL_GetTick();
 8011e26:	f004 f91b 	bl	8016060 <HAL_GetTick>
 8011e2a:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8011e2e:	4b71      	ldr	r3, [pc, #452]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011e30:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8011e34:	ed9f 7a79 	vldr	s14, [pc, #484]	; 801201c <LidarSetPos+0x25cc>
 8011e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e40:	db0a      	blt.n	8011e58 <LidarSetPos+0x2408>
 8011e42:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8011e46:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8011e50:	d302      	bcc.n	8011e58 <LidarSetPos+0x2408>
							PP_stop(&pp);
 8011e52:	4868      	ldr	r0, [pc, #416]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011e54:	f7f4 f9f4 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8011e58:	4b65      	ldr	r3, [pc, #404]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e60:	d108      	bne.n	8011e74 <LidarSetPos+0x2424>
						{
							while(ps4.button == SQUARE);
 8011e62:	bf00      	nop
 8011e64:	4b62      	ldr	r3, [pc, #392]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e6c:	d0fa      	beq.n	8011e64 <LidarSetPos+0x2414>
							PP_stop(&pp);
 8011e6e:	4861      	ldr	r0, [pc, #388]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011e70:	f7f4 f9e6 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8011e74:	4b5f      	ldr	r3, [pc, #380]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011e76:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011e7a:	f003 0301 	and.w	r3, r3, #1
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d1d0      	bne.n	8011e26 <LidarSetPos+0x23d6>
						}
					}

					stick_fence = 1;
 8011e84:	4b66      	ldr	r3, [pc, #408]	; (8012020 <LidarSetPos+0x25d0>)
 8011e86:	2201      	movs	r2, #1
 8011e88:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8011e8a:	463b      	mov	r3, r7
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d005      	beq.n	8011ea2 <LidarSetPos+0x2452>
					{
						osDelay(300);
 8011e96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8011e9a:	f00a fe17 	bl	801cacc <osDelay>
						Shot();
 8011e9e:	f7fc fda3 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8011ea2:	463b      	mov	r3, r7
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f040 82bf 	bne.w	801242e <LidarSetPos+0x29de>
						LidarAdjust(lidar);
 8011eb0:	463b      	mov	r3, r7
 8011eb2:	6818      	ldr	r0, [r3, #0]
 8011eb4:	f003 f998 	bl	80151e8 <LidarAdjust>
					break;
 8011eb8:	e2b9      	b.n	801242e <LidarSetPos+0x29de>

				case CENTER_3:
					stick_fence = 0;
 8011eba:	4b59      	ldr	r3, [pc, #356]	; (8012020 <LidarSetPos+0x25d0>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8011ec0:	4b52      	ldr	r3, [pc, #328]	; (801200c <LidarSetPos+0x25bc>)
 8011ec2:	4a58      	ldr	r2, [pc, #352]	; (8012024 <LidarSetPos+0x25d4>)
 8011ec4:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8011ec6:	463b      	mov	r3, r7
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_speed = type1;
 8011ed0:	4b4c      	ldr	r3, [pc, #304]	; (8012004 <LidarSetPos+0x25b4>)
 8011ed2:	4a55      	ldr	r2, [pc, #340]	; (8012028 <LidarSetPos+0x25d8>)
 8011ed4:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8011ed6:	463b      	mov	r3, r7
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d172      	bne.n	8011fc8 <LidarSetPos+0x2578>
					{
						ResetCoordinate();
 8011ee2:	f7fc fa33 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER;
 8011ee6:	463b      	mov	r3, r7
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2205      	movs	r2, #5
 8011eec:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_3_to_center, 1, &pp);
 8011ef0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8011ef4:	4a3f      	ldr	r2, [pc, #252]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011ef6:	2101      	movs	r1, #1
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7f3 fe69 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8011efe:	e05a      	b.n	8011fb6 <LidarSetPos+0x2566>
						{
							if(ps4.button == SQUARE)
 8011f00:	4b3b      	ldr	r3, [pc, #236]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f08:	d10d      	bne.n	8011f26 <LidarSetPos+0x24d6>
							{
								while(ps4.button == SQUARE);
 8011f0a:	bf00      	nop
 8011f0c:	4b38      	ldr	r3, [pc, #224]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f14:	d0fa      	beq.n	8011f0c <LidarSetPos+0x24bc>
								PP_stop(&pp);
 8011f16:	4837      	ldr	r0, [pc, #220]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f18:	f7f4 f992 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8011f1c:	463b      	mov	r3, r7
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2201      	movs	r2, #1
 8011f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_3;
	//							lidar->pos_counter = CENTER_3;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8011f26:	2108      	movs	r1, #8
 8011f28:	4840      	ldr	r0, [pc, #256]	; (801202c <LidarSetPos+0x25dc>)
 8011f2a:	f005 ff15 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d006      	beq.n	8011f42 <LidarSetPos+0x24f2>
 8011f34:	2110      	movs	r1, #16
 8011f36:	483d      	ldr	r0, [pc, #244]	; (801202c <LidarSetPos+0x25dc>)
 8011f38:	f005 ff0e 	bl	8017d58 <HAL_GPIO_ReadPin>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d109      	bne.n	8011f56 <LidarSetPos+0x2506>
							{
								pp.target_y[0] = pp.real_y;
 8011f42:	4b2c      	ldr	r3, [pc, #176]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f46:	4a2b      	ldr	r2, [pc, #172]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f48:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011f4c:	4b29      	ldr	r3, [pc, #164]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f4e:	f04f 0200 	mov.w	r2, #0
 8011f52:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_3_to_center[0][1])
 8011f56:	4b27      	ldr	r3, [pc, #156]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f58:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011f5c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8011f60:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f6c:	d809      	bhi.n	8011f82 <LidarSetPos+0x2532>
							{
								pp.target_y[0] = pp.real_y;
 8011f6e:	4b21      	ldr	r3, [pc, #132]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f72:	4a20      	ldr	r2, [pc, #128]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f74:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8011f78:	4b1e      	ldr	r3, [pc, #120]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011f7a:	f04f 0200 	mov.w	r2, #0
 8011f7e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == UP)
 8011f82:	4b1b      	ldr	r3, [pc, #108]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f86:	2b10      	cmp	r3, #16
 8011f88:	d115      	bne.n	8011fb6 <LidarSetPos+0x2566>
							{
								while(ps4.button == UP);
 8011f8a:	bf00      	nop
 8011f8c:	4b18      	ldr	r3, [pc, #96]	; (8011ff0 <LidarSetPos+0x25a0>)
 8011f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f90:	2b10      	cmp	r3, #16
 8011f92:	d0fb      	beq.n	8011f8c <LidarSetPos+0x253c>
								if(blue)
 8011f94:	4b1a      	ldr	r3, [pc, #104]	; (8012000 <LidarSetPos+0x25b0>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d006      	beq.n	8011faa <LidarSetPos+0x255a>
								{
									vesc_speed = BlueType3;
 8011f9c:	4b19      	ldr	r3, [pc, #100]	; (8012004 <LidarSetPos+0x25b4>)
 8011f9e:	4a1a      	ldr	r2, [pc, #104]	; (8012008 <LidarSetPos+0x25b8>)
 8011fa0:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8011fa2:	4b1a      	ldr	r3, [pc, #104]	; (801200c <LidarSetPos+0x25bc>)
 8011fa4:	4a1a      	ldr	r2, [pc, #104]	; (8012010 <LidarSetPos+0x25c0>)
 8011fa6:	601a      	str	r2, [r3, #0]
 8011fa8:	e005      	b.n	8011fb6 <LidarSetPos+0x2566>
								}
								else
								{
									vesc_speed = RedType3;
 8011faa:	4b16      	ldr	r3, [pc, #88]	; (8012004 <LidarSetPos+0x25b4>)
 8011fac:	4a19      	ldr	r2, [pc, #100]	; (8012014 <LidarSetPos+0x25c4>)
 8011fae:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8011fb0:	4b16      	ldr	r3, [pc, #88]	; (801200c <LidarSetPos+0x25bc>)
 8011fb2:	4a19      	ldr	r2, [pc, #100]	; (8012018 <LidarSetPos+0x25c8>)
 8011fb4:	601a      	str	r2, [r3, #0]
						while(pp.pp_start)
 8011fb6:	4b0f      	ldr	r3, [pc, #60]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011fb8:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8011fbc:	f003 0301 	and.w	r3, r3, #1
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d19c      	bne.n	8011f00 <LidarSetPos+0x24b0>
 8011fc6:	e08a      	b.n	80120de <LidarSetPos+0x268e>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8011fc8:	463b      	mov	r3, r7
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2205      	movs	r2, #5
 8011fce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_right, 1, &pp, 0, 1);
 8011fd2:	f507 6094 	add.w	r0, r7, #1184	; 0x4a0
 8011fd6:	2301      	movs	r3, #1
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	2300      	movs	r3, #0
 8011fdc:	4a05      	ldr	r2, [pc, #20]	; (8011ff4 <LidarSetPos+0x25a4>)
 8011fde:	2101      	movs	r1, #1
 8011fe0:	f7f3 ffbc 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8011fe4:	e073      	b.n	80120ce <LidarSetPos+0x267e>
 8011fe6:	bf00      	nop
 8011fe8:	33333333 	.word	0x33333333
 8011fec:	3fc33333 	.word	0x3fc33333
 8011ff0:	2000a240 	.word	0x2000a240
 8011ff4:	20006d44 	.word	0x20006d44
 8011ff8:	20007728 	.word	0x20007728
 8011ffc:	3fe00000 	.word	0x3fe00000
 8012000:	20006a44 	.word	0x20006a44
 8012004:	200065b8 	.word	0x200065b8
 8012008:	4151999a 	.word	0x4151999a
 801200c:	20007494 	.word	0x20007494
 8012010:	44f78000 	.word	0x44f78000
 8012014:	41540000 	.word	0x41540000
 8012018:	44fbe000 	.word	0x44fbe000
 801201c:	c2b60000 	.word	0xc2b60000
 8012020:	200073d0 	.word	0x200073d0
 8012024:	445e8000 	.word	0x445e8000
 8012028:	406ccccd 	.word	0x406ccccd
 801202c:	40020c00 	.word	0x40020c00
						{
							if(ps4.button == SQUARE)
 8012030:	4b94      	ldr	r3, [pc, #592]	; (8012284 <LidarSetPos+0x2834>)
 8012032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012038:	d108      	bne.n	801204c <LidarSetPos+0x25fc>
							{
								while(ps4.button == SQUARE);
 801203a:	bf00      	nop
 801203c:	4b91      	ldr	r3, [pc, #580]	; (8012284 <LidarSetPos+0x2834>)
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012044:	d0fa      	beq.n	801203c <LidarSetPos+0x25ec>
								PP_stop(&pp);
 8012046:	4890      	ldr	r0, [pc, #576]	; (8012288 <LidarSetPos+0x2838>)
 8012048:	f7f4 f8fa 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist >= lsr_center_right[0][1] - Offset + 0.25)
 801204c:	4b8f      	ldr	r3, [pc, #572]	; (801228c <LidarSetPos+0x283c>)
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	4618      	mov	r0, r3
 8012052:	f7ee fa79 	bl	8000548 <__aeabi_f2d>
 8012056:	4604      	mov	r4, r0
 8012058:	460d      	mov	r5, r1
 801205a:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4618      	mov	r0, r3
 8012062:	f7ee fa71 	bl	8000548 <__aeabi_f2d>
 8012066:	f04f 0200 	mov.w	r2, #0
 801206a:	4b89      	ldr	r3, [pc, #548]	; (8012290 <LidarSetPos+0x2840>)
 801206c:	f7ee f90c 	bl	8000288 <__aeabi_dsub>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4610      	mov	r0, r2
 8012076:	4619      	mov	r1, r3
 8012078:	f04f 0200 	mov.w	r2, #0
 801207c:	4b85      	ldr	r3, [pc, #532]	; (8012294 <LidarSetPos+0x2844>)
 801207e:	f7ee f905 	bl	800028c <__adddf3>
 8012082:	4602      	mov	r2, r0
 8012084:	460b      	mov	r3, r1
 8012086:	4620      	mov	r0, r4
 8012088:	4629      	mov	r1, r5
 801208a:	f7ee fd3b 	bl	8000b04 <__aeabi_dcmpge>
 801208e:	4603      	mov	r3, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	d002      	beq.n	801209a <LidarSetPos+0x264a>
								PP_stop(&pp);
 8012094:	487c      	ldr	r0, [pc, #496]	; (8012288 <LidarSetPos+0x2838>)
 8012096:	f7f4 f8d3 	bl	8006240 <PP_stop>

							if(ps4.button == UP)
 801209a:	4b7a      	ldr	r3, [pc, #488]	; (8012284 <LidarSetPos+0x2834>)
 801209c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801209e:	2b10      	cmp	r3, #16
 80120a0:	d115      	bne.n	80120ce <LidarSetPos+0x267e>
							{
								while(ps4.button == UP);
 80120a2:	bf00      	nop
 80120a4:	4b77      	ldr	r3, [pc, #476]	; (8012284 <LidarSetPos+0x2834>)
 80120a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120a8:	2b10      	cmp	r3, #16
 80120aa:	d0fb      	beq.n	80120a4 <LidarSetPos+0x2654>
								if(blue)
 80120ac:	4b7a      	ldr	r3, [pc, #488]	; (8012298 <LidarSetPos+0x2848>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d006      	beq.n	80120c2 <LidarSetPos+0x2672>
								{
									vesc_speed = BlueType3;
 80120b4:	4b79      	ldr	r3, [pc, #484]	; (801229c <LidarSetPos+0x284c>)
 80120b6:	4a7a      	ldr	r2, [pc, #488]	; (80122a0 <LidarSetPos+0x2850>)
 80120b8:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 80120ba:	4b7a      	ldr	r3, [pc, #488]	; (80122a4 <LidarSetPos+0x2854>)
 80120bc:	4a7a      	ldr	r2, [pc, #488]	; (80122a8 <LidarSetPos+0x2858>)
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	e005      	b.n	80120ce <LidarSetPos+0x267e>
								}
								else
								{
									vesc_speed = RedType3;
 80120c2:	4b76      	ldr	r3, [pc, #472]	; (801229c <LidarSetPos+0x284c>)
 80120c4:	4a79      	ldr	r2, [pc, #484]	; (80122ac <LidarSetPos+0x285c>)
 80120c6:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 80120c8:	4b76      	ldr	r3, [pc, #472]	; (80122a4 <LidarSetPos+0x2854>)
 80120ca:	4a79      	ldr	r2, [pc, #484]	; (80122b0 <LidarSetPos+0x2860>)
 80120cc:	601a      	str	r2, [r3, #0]
						while(pp.lsr_start)
 80120ce:	4b6e      	ldr	r3, [pc, #440]	; (8012288 <LidarSetPos+0x2838>)
 80120d0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80120d4:	f003 0310 	and.w	r3, r3, #16
 80120d8:	b2db      	uxtb	r3, r3
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d1a8      	bne.n	8012030 <LidarSetPos+0x25e0>
								}
							}
						}
					}

					PP_start(robot_center, 1, &pp);
 80120de:	f107 0308 	add.w	r3, r7, #8
 80120e2:	4a69      	ldr	r2, [pc, #420]	; (8012288 <LidarSetPos+0x2838>)
 80120e4:	2101      	movs	r1, #1
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7f3 fd72 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 80120ec:	f003 ffb8 	bl	8016060 <HAL_GetTick>
 80120f0:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 80120f4:	e026      	b.n	8012144 <LidarSetPos+0x26f4>
					{
						after = HAL_GetTick();
 80120f6:	f003 ffb3 	bl	8016060 <HAL_GetTick>
 80120fa:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 80120fe:	4b62      	ldr	r3, [pc, #392]	; (8012288 <LidarSetPos+0x2838>)
 8012100:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012104:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80122b4 <LidarSetPos+0x2864>
 8012108:	eef4 7ac7 	vcmpe.f32	s15, s14
 801210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012110:	d80a      	bhi.n	8012128 <LidarSetPos+0x26d8>
 8012112:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8012116:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012120:	d302      	bcc.n	8012128 <LidarSetPos+0x26d8>
							PP_stop(&pp);
 8012122:	4859      	ldr	r0, [pc, #356]	; (8012288 <LidarSetPos+0x2838>)
 8012124:	f7f4 f88c 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8012128:	4b56      	ldr	r3, [pc, #344]	; (8012284 <LidarSetPos+0x2834>)
 801212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801212c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012130:	d108      	bne.n	8012144 <LidarSetPos+0x26f4>
						{
							while(ps4.button == SQUARE);
 8012132:	bf00      	nop
 8012134:	4b53      	ldr	r3, [pc, #332]	; (8012284 <LidarSetPos+0x2834>)
 8012136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801213c:	d0fa      	beq.n	8012134 <LidarSetPos+0x26e4>
							PP_stop(&pp);
 801213e:	4852      	ldr	r0, [pc, #328]	; (8012288 <LidarSetPos+0x2838>)
 8012140:	f7f4 f87e 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8012144:	4b50      	ldr	r3, [pc, #320]	; (8012288 <LidarSetPos+0x2838>)
 8012146:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801214a:	f003 0301 	and.w	r3, r3, #1
 801214e:	b2db      	uxtb	r3, r3
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1d0      	bne.n	80120f6 <LidarSetPos+0x26a6>
						}
					}

					stick_fence = 1;
 8012154:	4b58      	ldr	r3, [pc, #352]	; (80122b8 <LidarSetPos+0x2868>)
 8012156:	2201      	movs	r2, #1
 8012158:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 801215a:	463b      	mov	r3, r7
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012162:	2b00      	cmp	r3, #0
 8012164:	d005      	beq.n	8012172 <LidarSetPos+0x2722>
					{
						osDelay(300);
 8012166:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801216a:	f00a fcaf 	bl	801cacc <osDelay>
						Shot();
 801216e:	f7fc fc3b 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8012172:	463b      	mov	r3, r7
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801217a:	2b00      	cmp	r3, #0
 801217c:	f040 815a 	bne.w	8012434 <LidarSetPos+0x29e4>
						LidarAdjust(lidar);
 8012180:	463b      	mov	r3, r7
 8012182:	6818      	ldr	r0, [r3, #0]
 8012184:	f003 f830 	bl	80151e8 <LidarAdjust>
					break;
 8012188:	e154      	b.n	8012434 <LidarSetPos+0x29e4>

				case CENTER_4:
					stick_fence = 0;
 801218a:	4b4b      	ldr	r3, [pc, #300]	; (80122b8 <LidarSetPos+0x2868>)
 801218c:	2200      	movs	r2, #0
 801218e:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 8012190:	4b44      	ldr	r3, [pc, #272]	; (80122a4 <LidarSetPos+0x2854>)
 8012192:	4a4a      	ldr	r2, [pc, #296]	; (80122bc <LidarSetPos+0x286c>)
 8012194:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8012196:	4b41      	ldr	r3, [pc, #260]	; (801229c <LidarSetPos+0x284c>)
 8012198:	4a49      	ldr	r2, [pc, #292]	; (80122c0 <LidarSetPos+0x2870>)
 801219a:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 801219c:	463b      	mov	r3, r7
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

					if(!lidar->laser)
 80121a6:	463b      	mov	r3, r7
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d158      	bne.n	8012264 <LidarSetPos+0x2814>
					{
						ResetCoordinate();
 80121b2:	f7fc f8cb 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER;
 80121b6:	463b      	mov	r3, r7
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	2205      	movs	r2, #5
 80121bc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_4_to_center, 1, &pp);
 80121c0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80121c4:	4a30      	ldr	r2, [pc, #192]	; (8012288 <LidarSetPos+0x2838>)
 80121c6:	2101      	movs	r1, #1
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f3 fd01 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 80121ce:	e040      	b.n	8012252 <LidarSetPos+0x2802>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 80121d0:	2108      	movs	r1, #8
 80121d2:	483c      	ldr	r0, [pc, #240]	; (80122c4 <LidarSetPos+0x2874>)
 80121d4:	f005 fdc0 	bl	8017d58 <HAL_GPIO_ReadPin>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d006      	beq.n	80121ec <LidarSetPos+0x279c>
 80121de:	2110      	movs	r1, #16
 80121e0:	4838      	ldr	r0, [pc, #224]	; (80122c4 <LidarSetPos+0x2874>)
 80121e2:	f005 fdb9 	bl	8017d58 <HAL_GPIO_ReadPin>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d109      	bne.n	8012200 <LidarSetPos+0x27b0>
							{
								pp.target_y[0] = pp.real_y;
 80121ec:	4b26      	ldr	r3, [pc, #152]	; (8012288 <LidarSetPos+0x2838>)
 80121ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121f0:	4a25      	ldr	r2, [pc, #148]	; (8012288 <LidarSetPos+0x2838>)
 80121f2:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 80121f6:	4b24      	ldr	r3, [pc, #144]	; (8012288 <LidarSetPos+0x2838>)
 80121f8:	f04f 0200 	mov.w	r2, #0
 80121fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_4_to_center[0][1])
 8012200:	4b21      	ldr	r3, [pc, #132]	; (8012288 <LidarSetPos+0x2838>)
 8012202:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012206:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801220a:	edd3 7a01 	vldr	s15, [r3, #4]
 801220e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012216:	d809      	bhi.n	801222c <LidarSetPos+0x27dc>
							{
								pp.target_y[0] = pp.real_y;
 8012218:	4b1b      	ldr	r3, [pc, #108]	; (8012288 <LidarSetPos+0x2838>)
 801221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801221c:	4a1a      	ldr	r2, [pc, #104]	; (8012288 <LidarSetPos+0x2838>)
 801221e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012222:	4b19      	ldr	r3, [pc, #100]	; (8012288 <LidarSetPos+0x2838>)
 8012224:	f04f 0200 	mov.w	r2, #0
 8012228:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 801222c:	4b15      	ldr	r3, [pc, #84]	; (8012284 <LidarSetPos+0x2834>)
 801222e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012234:	d10d      	bne.n	8012252 <LidarSetPos+0x2802>
							{
								while(ps4.button == SQUARE);
 8012236:	bf00      	nop
 8012238:	4b12      	ldr	r3, [pc, #72]	; (8012284 <LidarSetPos+0x2834>)
 801223a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801223c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012240:	d0fa      	beq.n	8012238 <LidarSetPos+0x27e8>
								PP_stop(&pp);
 8012242:	4811      	ldr	r0, [pc, #68]	; (8012288 <LidarSetPos+0x2838>)
 8012244:	f7f3 fffc 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8012248:	463b      	mov	r3, r7
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2201      	movs	r2, #1
 801224e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 8012252:	4b0d      	ldr	r3, [pc, #52]	; (8012288 <LidarSetPos+0x2838>)
 8012254:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012258:	f003 0301 	and.w	r3, r3, #1
 801225c:	b2db      	uxtb	r3, r3
 801225e:	2b00      	cmp	r3, #0
 8012260:	d1b6      	bne.n	80121d0 <LidarSetPos+0x2780>
 8012262:	e089      	b.n	8012378 <LidarSetPos+0x2928>
							}
						}
					}
					else
					{
						lidar->pos = CENTER;
 8012264:	463b      	mov	r3, r7
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2205      	movs	r2, #5
 801226a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_right, 1, &pp, 0, 1);
 801226e:	f507 6094 	add.w	r0, r7, #1184	; 0x4a0
 8012272:	2301      	movs	r3, #1
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	2300      	movs	r3, #0
 8012278:	4a03      	ldr	r2, [pc, #12]	; (8012288 <LidarSetPos+0x2838>)
 801227a:	2101      	movs	r1, #1
 801227c:	f7f3 fe6e 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8012280:	e072      	b.n	8012368 <LidarSetPos+0x2918>
 8012282:	bf00      	nop
 8012284:	2000a240 	.word	0x2000a240
 8012288:	20006d44 	.word	0x20006d44
 801228c:	200095f8 	.word	0x200095f8
 8012290:	3fe00000 	.word	0x3fe00000
 8012294:	3fd00000 	.word	0x3fd00000
 8012298:	20006a44 	.word	0x20006a44
 801229c:	200065b8 	.word	0x200065b8
 80122a0:	4151999a 	.word	0x4151999a
 80122a4:	20007494 	.word	0x20007494
 80122a8:	44f78000 	.word	0x44f78000
 80122ac:	41540000 	.word	0x41540000
 80122b0:	44fbe000 	.word	0x44fbe000
 80122b4:	c2b20000 	.word	0xc2b20000
 80122b8:	200073d0 	.word	0x200073d0
 80122bc:	445e8000 	.word	0x445e8000
 80122c0:	406ccccd 	.word	0x406ccccd
 80122c4:	40020c00 	.word	0x40020c00
						{
							if(ps4.button == SQUARE)
 80122c8:	4b9e      	ldr	r3, [pc, #632]	; (8012544 <LidarSetPos+0x2af4>)
 80122ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122d0:	d108      	bne.n	80122e4 <LidarSetPos+0x2894>
							{
								while(ps4.button == SQUARE);
 80122d2:	bf00      	nop
 80122d4:	4b9b      	ldr	r3, [pc, #620]	; (8012544 <LidarSetPos+0x2af4>)
 80122d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122dc:	d0fa      	beq.n	80122d4 <LidarSetPos+0x2884>
								PP_stop(&pp);
 80122de:	489a      	ldr	r0, [pc, #616]	; (8012548 <LidarSetPos+0x2af8>)
 80122e0:	f7f3 ffae 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist >= lsr_center_right[0][1] - Offset_2)
 80122e4:	4b99      	ldr	r3, [pc, #612]	; (801254c <LidarSetPos+0x2afc>)
 80122e6:	69db      	ldr	r3, [r3, #28]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7ee f92d 	bl	8000548 <__aeabi_f2d>
 80122ee:	4604      	mov	r4, r0
 80122f0:	460d      	mov	r5, r1
 80122f2:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7ee f925 	bl	8000548 <__aeabi_f2d>
 80122fe:	f04f 0200 	mov.w	r2, #0
 8012302:	4b93      	ldr	r3, [pc, #588]	; (8012550 <LidarSetPos+0x2b00>)
 8012304:	f7ed ffc0 	bl	8000288 <__aeabi_dsub>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	4620      	mov	r0, r4
 801230e:	4629      	mov	r1, r5
 8012310:	f7ee fbf8 	bl	8000b04 <__aeabi_dcmpge>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00c      	beq.n	8012334 <LidarSetPos+0x28e4>
							{
								pp.target_y[0] = pp.real_y;
 801231a:	4b8b      	ldr	r3, [pc, #556]	; (8012548 <LidarSetPos+0x2af8>)
 801231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801231e:	4a8a      	ldr	r2, [pc, #552]	; (8012548 <LidarSetPos+0x2af8>)
 8012320:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012324:	4b88      	ldr	r3, [pc, #544]	; (8012548 <LidarSetPos+0x2af8>)
 8012326:	f04f 0200 	mov.w	r2, #0
 801232a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
								PP_stop(&pp);
 801232e:	4886      	ldr	r0, [pc, #536]	; (8012548 <LidarSetPos+0x2af8>)
 8012330:	f7f3 ff86 	bl	8006240 <PP_stop>
							}

							if(ps4.button == UP)
 8012334:	4b83      	ldr	r3, [pc, #524]	; (8012544 <LidarSetPos+0x2af4>)
 8012336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012338:	2b10      	cmp	r3, #16
 801233a:	d115      	bne.n	8012368 <LidarSetPos+0x2918>
							{
								while(ps4.button == UP);
 801233c:	bf00      	nop
 801233e:	4b81      	ldr	r3, [pc, #516]	; (8012544 <LidarSetPos+0x2af4>)
 8012340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012342:	2b10      	cmp	r3, #16
 8012344:	d0fb      	beq.n	801233e <LidarSetPos+0x28ee>
								if(blue)
 8012346:	4b83      	ldr	r3, [pc, #524]	; (8012554 <LidarSetPos+0x2b04>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d006      	beq.n	801235c <LidarSetPos+0x290c>
								{
									vesc_speed = BlueType3;
 801234e:	4b82      	ldr	r3, [pc, #520]	; (8012558 <LidarSetPos+0x2b08>)
 8012350:	4a82      	ldr	r2, [pc, #520]	; (801255c <LidarSetPos+0x2b0c>)
 8012352:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueType3Duty;
 8012354:	4b82      	ldr	r3, [pc, #520]	; (8012560 <LidarSetPos+0x2b10>)
 8012356:	4a83      	ldr	r2, [pc, #524]	; (8012564 <LidarSetPos+0x2b14>)
 8012358:	601a      	str	r2, [r3, #0]
 801235a:	e005      	b.n	8012368 <LidarSetPos+0x2918>
								}
								else
								{
									vesc_speed = RedType3;
 801235c:	4b7e      	ldr	r3, [pc, #504]	; (8012558 <LidarSetPos+0x2b08>)
 801235e:	4a82      	ldr	r2, [pc, #520]	; (8012568 <LidarSetPos+0x2b18>)
 8012360:	601a      	str	r2, [r3, #0]
									vesc_duty = RedType3Duty;
 8012362:	4b7f      	ldr	r3, [pc, #508]	; (8012560 <LidarSetPos+0x2b10>)
 8012364:	4a81      	ldr	r2, [pc, #516]	; (801256c <LidarSetPos+0x2b1c>)
 8012366:	601a      	str	r2, [r3, #0]
						while(pp.lsr_start)
 8012368:	4b77      	ldr	r3, [pc, #476]	; (8012548 <LidarSetPos+0x2af8>)
 801236a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801236e:	f003 0310 	and.w	r3, r3, #16
 8012372:	b2db      	uxtb	r3, r3
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1a7      	bne.n	80122c8 <LidarSetPos+0x2878>
								}
							}
						}
					}

					PP_start(robot_center, 1, &pp);
 8012378:	f107 0308 	add.w	r3, r7, #8
 801237c:	4a72      	ldr	r2, [pc, #456]	; (8012548 <LidarSetPos+0x2af8>)
 801237e:	2101      	movs	r1, #1
 8012380:	4618      	mov	r0, r3
 8012382:	f7f3 fc25 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8012386:	f003 fe6b 	bl	8016060 <HAL_GetTick>
 801238a:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 801238e:	e026      	b.n	80123de <LidarSetPos+0x298e>
					{
						after = HAL_GetTick();
 8012390:	f003 fe66 	bl	8016060 <HAL_GetTick>
 8012394:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 8012398:	4b6b      	ldr	r3, [pc, #428]	; (8012548 <LidarSetPos+0x2af8>)
 801239a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801239e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8012570 <LidarSetPos+0x2b20>
 80123a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80123a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123aa:	d80a      	bhi.n	80123c2 <LidarSetPos+0x2972>
 80123ac:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80123b0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80123b4:	1ad3      	subs	r3, r2, r3
 80123b6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80123ba:	d302      	bcc.n	80123c2 <LidarSetPos+0x2972>
							PP_stop(&pp);
 80123bc:	4862      	ldr	r0, [pc, #392]	; (8012548 <LidarSetPos+0x2af8>)
 80123be:	f7f3 ff3f 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 80123c2:	4b60      	ldr	r3, [pc, #384]	; (8012544 <LidarSetPos+0x2af4>)
 80123c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123ca:	d108      	bne.n	80123de <LidarSetPos+0x298e>
						{
							while(ps4.button == SQUARE);
 80123cc:	bf00      	nop
 80123ce:	4b5d      	ldr	r3, [pc, #372]	; (8012544 <LidarSetPos+0x2af4>)
 80123d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123d6:	d0fa      	beq.n	80123ce <LidarSetPos+0x297e>
							PP_stop(&pp);
 80123d8:	485b      	ldr	r0, [pc, #364]	; (8012548 <LidarSetPos+0x2af8>)
 80123da:	f7f3 ff31 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80123de:	4b5a      	ldr	r3, [pc, #360]	; (8012548 <LidarSetPos+0x2af8>)
 80123e0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1d0      	bne.n	8012390 <LidarSetPos+0x2940>
						}
					}

					stick_fence = 1;
 80123ee:	4b61      	ldr	r3, [pc, #388]	; (8012574 <LidarSetPos+0x2b24>)
 80123f0:	2201      	movs	r2, #1
 80123f2:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80123f4:	463b      	mov	r3, r7
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d005      	beq.n	801240c <LidarSetPos+0x29bc>
					{
						osDelay(300);
 8012400:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012404:	f00a fb62 	bl	801cacc <osDelay>
						Shot();
 8012408:	f7fc faee 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 801240c:	463b      	mov	r3, r7
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012414:	2b00      	cmp	r3, #0
 8012416:	d110      	bne.n	801243a <LidarSetPos+0x29ea>
						LidarAdjust(lidar);
 8012418:	463b      	mov	r3, r7
 801241a:	6818      	ldr	r0, [r3, #0]
 801241c:	f002 fee4 	bl	80151e8 <LidarAdjust>
					break;
 8012420:	e00b      	b.n	801243a <LidarSetPos+0x29ea>

				default:
					break;
 8012422:	bf00      	nop
 8012424:	f001 bf8b 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8012428:	bf00      	nop
 801242a:	f001 bf88 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801242e:	bf00      	nop
 8012430:	f001 bf85 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8012434:	bf00      	nop
 8012436:	f001 bf82 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801243a:	bf00      	nop
			}
			break;
 801243c:	f001 bf7f 	b.w	801433e <LidarSetPos+0x48ee>

		case CENTER_3:
			switch(lidar->pos) // Self Pose
 8012440:	463b      	mov	r3, r7
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8012448:	3b01      	subs	r3, #1
 801244a:	2b08      	cmp	r3, #8
 801244c:	f200 8701 	bhi.w	8013252 <LidarSetPos+0x3802>
 8012450:	a201      	add	r2, pc, #4	; (adr r2, 8012458 <LidarSetPos+0x2a08>)
 8012452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012456:	bf00      	nop
 8012458:	0801247d 	.word	0x0801247d
 801245c:	080126c9 	.word	0x080126c9
 8012460:	080127ff 	.word	0x080127ff
 8012464:	08012cab 	.word	0x08012cab
 8012468:	080129e7 	.word	0x080129e7
 801246c:	08013253 	.word	0x08013253
 8012470:	08012f8b 	.word	0x08012f8b
 8012474:	080126d7 	.word	0x080126d7
 8012478:	0801248b 	.word	0x0801248b
			{
				case PICK_LEFT:
					lidar->pos = CENTER_3;
 801247c:	463b      	mov	r3, r7
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2206      	movs	r2, #6
 8012482:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 8012486:	f000 bef1 	b.w	801326c <LidarSetPos+0x381c>

				case PICK_RIGHT:
					stick_fence = 0;
 801248a:	4b3a      	ldr	r3, [pc, #232]	; (8012574 <LidarSetPos+0x2b24>)
 801248c:	2200      	movs	r2, #0
 801248e:	601a      	str	r2, [r3, #0]
					if(blue)
 8012490:	4b30      	ldr	r3, [pc, #192]	; (8012554 <LidarSetPos+0x2b04>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d006      	beq.n	80124a6 <LidarSetPos+0x2a56>
					{
						vesc_speed = BlueType2;
 8012498:	4b2f      	ldr	r3, [pc, #188]	; (8012558 <LidarSetPos+0x2b08>)
 801249a:	4a37      	ldr	r2, [pc, #220]	; (8012578 <LidarSetPos+0x2b28>)
 801249c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801249e:	4b30      	ldr	r3, [pc, #192]	; (8012560 <LidarSetPos+0x2b10>)
 80124a0:	4a36      	ldr	r2, [pc, #216]	; (801257c <LidarSetPos+0x2b2c>)
 80124a2:	601a      	str	r2, [r3, #0]
 80124a4:	e005      	b.n	80124b2 <LidarSetPos+0x2a62>
					}
					else
					{
						vesc_speed = RedType2;
 80124a6:	4b2c      	ldr	r3, [pc, #176]	; (8012558 <LidarSetPos+0x2b08>)
 80124a8:	4a35      	ldr	r2, [pc, #212]	; (8012580 <LidarSetPos+0x2b30>)
 80124aa:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 80124ac:	4b2c      	ldr	r3, [pc, #176]	; (8012560 <LidarSetPos+0x2b10>)
 80124ae:	4a35      	ldr	r2, [pc, #212]	; (8012584 <LidarSetPos+0x2b34>)
 80124b0:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80124b2:	f7fb ff4b 	bl	800e34c <ResetCoordinate>
					lidar->pos = CENTER_3;
 80124b6:	463b      	mov	r3, r7
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2206      	movs	r2, #6
 80124bc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 80124c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80124c4:	4a20      	ldr	r2, [pc, #128]	; (8012548 <LidarSetPos+0x2af8>)
 80124c6:	2101      	movs	r1, #1
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7f3 fb81 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 80124ce:	e00d      	b.n	80124ec <LidarSetPos+0x2a9c>
					{
						if(ps4.button == SQUARE)
 80124d0:	4b1c      	ldr	r3, [pc, #112]	; (8012544 <LidarSetPos+0x2af4>)
 80124d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124d8:	d108      	bne.n	80124ec <LidarSetPos+0x2a9c>
						{
							while(ps4.button == SQUARE);
 80124da:	bf00      	nop
 80124dc:	4b19      	ldr	r3, [pc, #100]	; (8012544 <LidarSetPos+0x2af4>)
 80124de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80124e4:	d0fa      	beq.n	80124dc <LidarSetPos+0x2a8c>
							PP_stop(&pp);
 80124e6:	4818      	ldr	r0, [pc, #96]	; (8012548 <LidarSetPos+0x2af8>)
 80124e8:	f7f3 feaa 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80124ec:	4b16      	ldr	r3, [pc, #88]	; (8012548 <LidarSetPos+0x2af8>)
 80124ee:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80124f2:	f003 0301 	and.w	r3, r3, #1
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d1e9      	bne.n	80124d0 <LidarSetPos+0x2a80>
						}
					}
					LoadRing();
 80124fc:	f7fb fece 	bl	800e29c <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_3, 1, &pp);
 8012500:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012504:	4a10      	ldr	r2, [pc, #64]	; (8012548 <LidarSetPos+0x2af8>)
 8012506:	2101      	movs	r1, #1
 8012508:	4618      	mov	r0, r3
 801250a:	f7f3 fb61 	bl	8005bd0 <PP_start>

					load_adjust = 1;
 801250e:	4b1e      	ldr	r3, [pc, #120]	; (8012588 <LidarSetPos+0x2b38>)
 8012510:	2201      	movs	r2, #1
 8012512:	601a      	str	r2, [r3, #0]
					AdjustRings();
 8012514:	f7fb ff08 	bl	800e328 <AdjustRings>
					while(pp.pp_start)
 8012518:	e07f      	b.n	801261a <LidarSetPos+0x2bca>
					{
						if(ps4.button == UP)
 801251a:	4b0a      	ldr	r3, [pc, #40]	; (8012544 <LidarSetPos+0x2af4>)
 801251c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801251e:	2b10      	cmp	r3, #16
 8012520:	d13e      	bne.n	80125a0 <LidarSetPos+0x2b50>
						{
							while(ps4.button == UP);
 8012522:	bf00      	nop
 8012524:	4b07      	ldr	r3, [pc, #28]	; (8012544 <LidarSetPos+0x2af4>)
 8012526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012528:	2b10      	cmp	r3, #16
 801252a:	d0fb      	beq.n	8012524 <LidarSetPos+0x2ad4>
							if(blue)
 801252c:	4b09      	ldr	r3, [pc, #36]	; (8012554 <LidarSetPos+0x2b04>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d02f      	beq.n	8012594 <LidarSetPos+0x2b44>
							{
								vesc_speed = BlueOppoType2;
 8012534:	4b08      	ldr	r3, [pc, #32]	; (8012558 <LidarSetPos+0x2b08>)
 8012536:	4a15      	ldr	r2, [pc, #84]	; (801258c <LidarSetPos+0x2b3c>)
 8012538:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 801253a:	4b09      	ldr	r3, [pc, #36]	; (8012560 <LidarSetPos+0x2b10>)
 801253c:	4a14      	ldr	r2, [pc, #80]	; (8012590 <LidarSetPos+0x2b40>)
 801253e:	601a      	str	r2, [r3, #0]
 8012540:	e02e      	b.n	80125a0 <LidarSetPos+0x2b50>
 8012542:	bf00      	nop
 8012544:	2000a240 	.word	0x2000a240
 8012548:	20006d44 	.word	0x20006d44
 801254c:	200095f8 	.word	0x200095f8
 8012550:	3fe80000 	.word	0x3fe80000
 8012554:	20006a44 	.word	0x20006a44
 8012558:	200065b8 	.word	0x200065b8
 801255c:	4151999a 	.word	0x4151999a
 8012560:	20007494 	.word	0x20007494
 8012564:	44f78000 	.word	0x44f78000
 8012568:	41540000 	.word	0x41540000
 801256c:	44fbe000 	.word	0x44fbe000
 8012570:	c2b20000 	.word	0xc2b20000
 8012574:	200073d0 	.word	0x200073d0
 8012578:	41026666 	.word	0x41026666
 801257c:	44bea000 	.word	0x44bea000
 8012580:	4104cccd 	.word	0x4104cccd
 8012584:	44c1c000 	.word	0x44c1c000
 8012588:	200095bc 	.word	0x200095bc
 801258c:	414f3333 	.word	0x414f3333
 8012590:	45020000 	.word	0x45020000
							}
							else
							{
								vesc_speed = RedOppoType2;
 8012594:	4bb0      	ldr	r3, [pc, #704]	; (8012858 <LidarSetPos+0x2e08>)
 8012596:	4ab1      	ldr	r2, [pc, #708]	; (801285c <LidarSetPos+0x2e0c>)
 8012598:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 801259a:	4bb1      	ldr	r3, [pc, #708]	; (8012860 <LidarSetPos+0x2e10>)
 801259c:	4ab1      	ldr	r2, [pc, #708]	; (8012864 <LidarSetPos+0x2e14>)
 801259e:	601a      	str	r2, [r3, #0]
							}
						}

						if(ps4.button == SQUARE)
 80125a0:	4bb1      	ldr	r3, [pc, #708]	; (8012868 <LidarSetPos+0x2e18>)
 80125a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80125a8:	d108      	bne.n	80125bc <LidarSetPos+0x2b6c>
						{
							while(ps4.button == SQUARE);
 80125aa:	bf00      	nop
 80125ac:	4bae      	ldr	r3, [pc, #696]	; (8012868 <LidarSetPos+0x2e18>)
 80125ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80125b4:	d0fa      	beq.n	80125ac <LidarSetPos+0x2b5c>
							PP_stop(&pp);
 80125b6:	48ad      	ldr	r0, [pc, #692]	; (801286c <LidarSetPos+0x2e1c>)
 80125b8:	f7f3 fe42 	bl	8006240 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 80125bc:	2108      	movs	r1, #8
 80125be:	48ac      	ldr	r0, [pc, #688]	; (8012870 <LidarSetPos+0x2e20>)
 80125c0:	f005 fbca 	bl	8017d58 <HAL_GPIO_ReadPin>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d006      	beq.n	80125d8 <LidarSetPos+0x2b88>
 80125ca:	2110      	movs	r1, #16
 80125cc:	48a8      	ldr	r0, [pc, #672]	; (8012870 <LidarSetPos+0x2e20>)
 80125ce:	f005 fbc3 	bl	8017d58 <HAL_GPIO_ReadPin>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d109      	bne.n	80125ec <LidarSetPos+0x2b9c>
						{
							pp.target_y[0] = pp.real_y;
 80125d8:	4ba4      	ldr	r3, [pc, #656]	; (801286c <LidarSetPos+0x2e1c>)
 80125da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125dc:	4aa3      	ldr	r2, [pc, #652]	; (801286c <LidarSetPos+0x2e1c>)
 80125de:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 80125e2:	4ba2      	ldr	r3, [pc, #648]	; (801286c <LidarSetPos+0x2e1c>)
 80125e4:	f04f 0200 	mov.w	r2, #0
 80125e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						}

						if(pp.real_x <= pick_right_to_center_3[0][1])
 80125ec:	4b9f      	ldr	r3, [pc, #636]	; (801286c <LidarSetPos+0x2e1c>)
 80125ee:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80125f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80125f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80125fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80125fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012602:	d900      	bls.n	8012606 <LidarSetPos+0x2bb6>
 8012604:	e009      	b.n	801261a <LidarSetPos+0x2bca>
						{
							pp.target_y[0] = pp.real_y;
 8012606:	4b99      	ldr	r3, [pc, #612]	; (801286c <LidarSetPos+0x2e1c>)
 8012608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801260a:	4a98      	ldr	r2, [pc, #608]	; (801286c <LidarSetPos+0x2e1c>)
 801260c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 8012610:	4b96      	ldr	r3, [pc, #600]	; (801286c <LidarSetPos+0x2e1c>)
 8012612:	f04f 0200 	mov.w	r2, #0
 8012616:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 801261a:	4b94      	ldr	r3, [pc, #592]	; (801286c <LidarSetPos+0x2e1c>)
 801261c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012620:	f003 0301 	and.w	r3, r3, #1
 8012624:	b2db      	uxtb	r3, r3
 8012626:	2b00      	cmp	r3, #0
 8012628:	f47f af77 	bne.w	801251a <LidarSetPos+0x2aca>
						}
					}

					adjust_servo;
 801262c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8012630:	4890      	ldr	r0, [pc, #576]	; (8012874 <LidarSetPos+0x2e24>)
 8012632:	f7f9 f88d 	bl	800b750 <ServoSetPulse>
 8012636:	f640 0166 	movw	r1, #2150	; 0x866
 801263a:	488f      	ldr	r0, [pc, #572]	; (8012878 <LidarSetPos+0x2e28>)
 801263c:	f7f9 f888 	bl	800b750 <ServoSetPulse>

					PP_start(robot_center, 1, &pp);
 8012640:	f107 0308 	add.w	r3, r7, #8
 8012644:	4a89      	ldr	r2, [pc, #548]	; (801286c <LidarSetPos+0x2e1c>)
 8012646:	2101      	movs	r1, #1
 8012648:	4618      	mov	r0, r3
 801264a:	f7f3 fac1 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801264e:	f003 fd07 	bl	8016060 <HAL_GetTick>
 8012652:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8012656:	e026      	b.n	80126a6 <LidarSetPos+0x2c56>
					{
						after = HAL_GetTick();
 8012658:	f003 fd02 	bl	8016060 <HAL_GetTick>
 801265c:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 1000)
 8012660:	4b82      	ldr	r3, [pc, #520]	; (801286c <LidarSetPos+0x2e1c>)
 8012662:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012666:	ed9f 7a85 	vldr	s14, [pc, #532]	; 801287c <LidarSetPos+0x2e2c>
 801266a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012672:	d80a      	bhi.n	801268a <LidarSetPos+0x2c3a>
 8012674:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8012678:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012682:	d302      	bcc.n	801268a <LidarSetPos+0x2c3a>
							PP_stop(&pp);
 8012684:	4879      	ldr	r0, [pc, #484]	; (801286c <LidarSetPos+0x2e1c>)
 8012686:	f7f3 fddb 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 801268a:	4b77      	ldr	r3, [pc, #476]	; (8012868 <LidarSetPos+0x2e18>)
 801268c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801268e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012692:	d108      	bne.n	80126a6 <LidarSetPos+0x2c56>
						{
							while(ps4.button == SQUARE);
 8012694:	bf00      	nop
 8012696:	4b74      	ldr	r3, [pc, #464]	; (8012868 <LidarSetPos+0x2e18>)
 8012698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801269e:	d0fa      	beq.n	8012696 <LidarSetPos+0x2c46>
							PP_stop(&pp);
 80126a0:	4872      	ldr	r0, [pc, #456]	; (801286c <LidarSetPos+0x2e1c>)
 80126a2:	f7f3 fdcd 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80126a6:	4b71      	ldr	r3, [pc, #452]	; (801286c <LidarSetPos+0x2e1c>)
 80126a8:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80126ac:	f003 0301 	and.w	r3, r3, #1
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d1d0      	bne.n	8012658 <LidarSetPos+0x2c08>
						}
					}

					stick_fence = 1;
 80126b6:	4b72      	ldr	r3, [pc, #456]	; (8012880 <LidarSetPos+0x2e30>)
 80126b8:	2201      	movs	r2, #1
 80126ba:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 80126bc:	463b      	mov	r3, r7
 80126be:	6818      	ldr	r0, [r3, #0]
 80126c0:	f002 fd92 	bl	80151e8 <LidarAdjust>

					break;
 80126c4:	f000 bdd2 	b.w	801326c <LidarSetPos+0x381c>

				case UPPER_LEFT:
					lidar->pos = CENTER_3;
 80126c8:	463b      	mov	r3, r7
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2206      	movs	r2, #6
 80126ce:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80126d2:	f000 bdcb 	b.w	801326c <LidarSetPos+0x381c>

				case UPPER_RIGHT:
					lidar->pos = CENTER_3;
 80126d6:	463b      	mov	r3, r7
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2206      	movs	r2, #6
 80126dc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->fail = 0;
 80126e0:	463b      	mov	r3, r7
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 80126ea:	4b66      	ldr	r3, [pc, #408]	; (8012884 <LidarSetPos+0x2e34>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d006      	beq.n	8012700 <LidarSetPos+0x2cb0>
					{
						vesc_speed = BlueType2;
 80126f2:	4b59      	ldr	r3, [pc, #356]	; (8012858 <LidarSetPos+0x2e08>)
 80126f4:	4a64      	ldr	r2, [pc, #400]	; (8012888 <LidarSetPos+0x2e38>)
 80126f6:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2Duty;
 80126f8:	4b59      	ldr	r3, [pc, #356]	; (8012860 <LidarSetPos+0x2e10>)
 80126fa:	4a64      	ldr	r2, [pc, #400]	; (801288c <LidarSetPos+0x2e3c>)
 80126fc:	601a      	str	r2, [r3, #0]
 80126fe:	e005      	b.n	801270c <LidarSetPos+0x2cbc>
					}
					else
					{
						vesc_speed = RedType2;
 8012700:	4b55      	ldr	r3, [pc, #340]	; (8012858 <LidarSetPos+0x2e08>)
 8012702:	4a63      	ldr	r2, [pc, #396]	; (8012890 <LidarSetPos+0x2e40>)
 8012704:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2Duty;
 8012706:	4b56      	ldr	r3, [pc, #344]	; (8012860 <LidarSetPos+0x2e10>)
 8012708:	4a56      	ldr	r2, [pc, #344]	; (8012864 <LidarSetPos+0x2e14>)
 801270a:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801270c:	f7fb fe1e 	bl	800e34c <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 8012710:	2000      	movs	r0, #0
 8012712:	f7f2 fb55 	bl	8004dc0 <setOrientationMODN>
					PP_start(upper_right_to_center_3, 1, &pp);
 8012716:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801271a:	4a54      	ldr	r2, [pc, #336]	; (801286c <LidarSetPos+0x2e1c>)
 801271c:	2101      	movs	r1, #1
 801271e:	4618      	mov	r0, r3
 8012720:	f7f3 fa56 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8012724:	e020      	b.n	8012768 <LidarSetPos+0x2d18>
					{
						if(ps4.button == SQUARE)
 8012726:	4b50      	ldr	r3, [pc, #320]	; (8012868 <LidarSetPos+0x2e18>)
 8012728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801272a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801272e:	d108      	bne.n	8012742 <LidarSetPos+0x2cf2>
						{
							while(ps4.button == SQUARE);
 8012730:	bf00      	nop
 8012732:	4b4d      	ldr	r3, [pc, #308]	; (8012868 <LidarSetPos+0x2e18>)
 8012734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801273a:	d0fa      	beq.n	8012732 <LidarSetPos+0x2ce2>
							PP_stop(&pp);
 801273c:	484b      	ldr	r0, [pc, #300]	; (801286c <LidarSetPos+0x2e1c>)
 801273e:	f7f3 fd7f 	bl	8006240 <PP_stop>
						}

						if(pp.real_y <= -2.7)
 8012742:	4b4a      	ldr	r3, [pc, #296]	; (801286c <LidarSetPos+0x2e1c>)
 8012744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012746:	4618      	mov	r0, r3
 8012748:	f7ed fefe 	bl	8000548 <__aeabi_f2d>
 801274c:	a340      	add	r3, pc, #256	; (adr r3, 8012850 <LidarSetPos+0x2e00>)
 801274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012752:	f7ee f9cd 	bl	8000af0 <__aeabi_dcmple>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d100      	bne.n	801275e <LidarSetPos+0x2d0e>
 801275c:	e004      	b.n	8012768 <LidarSetPos+0x2d18>
							pp.target_vel[0] = 2.0;
 801275e:	4b43      	ldr	r3, [pc, #268]	; (801286c <LidarSetPos+0x2e1c>)
 8012760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012764:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					while(pp.pp_start)
 8012768:	4b40      	ldr	r3, [pc, #256]	; (801286c <LidarSetPos+0x2e1c>)
 801276a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801276e:	f003 0301 	and.w	r3, r3, #1
 8012772:	b2db      	uxtb	r3, r3
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1d6      	bne.n	8012726 <LidarSetPos+0x2cd6>
					}

					PP_start(upper_right_to_center_3_2, 1, &pp);
 8012778:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801277c:	4a3b      	ldr	r2, [pc, #236]	; (801286c <LidarSetPos+0x2e1c>)
 801277e:	2101      	movs	r1, #1
 8012780:	4618      	mov	r0, r3
 8012782:	f7f3 fa25 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8012786:	e020      	b.n	80127ca <LidarSetPos+0x2d7a>
					{
						if(ps4.button == SQUARE)
 8012788:	4b37      	ldr	r3, [pc, #220]	; (8012868 <LidarSetPos+0x2e18>)
 801278a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801278c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012790:	d108      	bne.n	80127a4 <LidarSetPos+0x2d54>
						{
							while(ps4.button == SQUARE);
 8012792:	bf00      	nop
 8012794:	4b34      	ldr	r3, [pc, #208]	; (8012868 <LidarSetPos+0x2e18>)
 8012796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801279c:	d0fa      	beq.n	8012794 <LidarSetPos+0x2d44>
							PP_stop(&pp);
 801279e:	4833      	ldr	r0, [pc, #204]	; (801286c <LidarSetPos+0x2e1c>)
 80127a0:	f7f3 fd4e 	bl	8006240 <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 80127a4:	2108      	movs	r1, #8
 80127a6:	4832      	ldr	r0, [pc, #200]	; (8012870 <LidarSetPos+0x2e20>)
 80127a8:	f005 fad6 	bl	8017d58 <HAL_GPIO_ReadPin>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d006      	beq.n	80127c0 <LidarSetPos+0x2d70>
 80127b2:	2110      	movs	r1, #16
 80127b4:	482e      	ldr	r0, [pc, #184]	; (8012870 <LidarSetPos+0x2e20>)
 80127b6:	f005 facf 	bl	8017d58 <HAL_GPIO_ReadPin>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d104      	bne.n	80127ca <LidarSetPos+0x2d7a>
							pp.error_y = 0;
 80127c0:	4b2a      	ldr	r3, [pc, #168]	; (801286c <LidarSetPos+0x2e1c>)
 80127c2:	f04f 0200 	mov.w	r2, #0
 80127c6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 80127ca:	4b28      	ldr	r3, [pc, #160]	; (801286c <LidarSetPos+0x2e1c>)
 80127cc:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80127d0:	f003 0301 	and.w	r3, r3, #1
 80127d4:	b2db      	uxtb	r3, r3
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d1d6      	bne.n	8012788 <LidarSetPos+0x2d38>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					AdjustRings();
 80127da:	f7fb fda5 	bl	800e328 <AdjustRings>
					adjust_servo;
 80127de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80127e2:	4824      	ldr	r0, [pc, #144]	; (8012874 <LidarSetPos+0x2e24>)
 80127e4:	f7f8 ffb4 	bl	800b750 <ServoSetPulse>
 80127e8:	f640 0166 	movw	r1, #2150	; 0x866
 80127ec:	4822      	ldr	r0, [pc, #136]	; (8012878 <LidarSetPos+0x2e28>)
 80127ee:	f7f8 ffaf 	bl	800b750 <ServoSetPulse>

					LidarAdjust(lidar);
 80127f2:	463b      	mov	r3, r7
 80127f4:	6818      	ldr	r0, [r3, #0]
 80127f6:	f002 fcf7 	bl	80151e8 <LidarAdjust>

					break;
 80127fa:	f000 bd37 	b.w	801326c <LidarSetPos+0x381c>

				case CENTER_1:
					stick_fence = 0;
 80127fe:	4b20      	ldr	r3, [pc, #128]	; (8012880 <LidarSetPos+0x2e30>)
 8012800:	2200      	movs	r2, #0
 8012802:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012804:	463b      	mov	r3, r7
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2200      	movs	r2, #0
 801280a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 801280e:	4b1d      	ldr	r3, [pc, #116]	; (8012884 <LidarSetPos+0x2e34>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d006      	beq.n	8012824 <LidarSetPos+0x2dd4>
					{
						vesc_speed = BlueType2;
 8012816:	4b10      	ldr	r3, [pc, #64]	; (8012858 <LidarSetPos+0x2e08>)
 8012818:	4a1b      	ldr	r2, [pc, #108]	; (8012888 <LidarSetPos+0x2e38>)
 801281a:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 801281c:	4b10      	ldr	r3, [pc, #64]	; (8012860 <LidarSetPos+0x2e10>)
 801281e:	4a1d      	ldr	r2, [pc, #116]	; (8012894 <LidarSetPos+0x2e44>)
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	e005      	b.n	8012830 <LidarSetPos+0x2de0>
					}
					else
					{
						vesc_speed = RedType2;
 8012824:	4b0c      	ldr	r3, [pc, #48]	; (8012858 <LidarSetPos+0x2e08>)
 8012826:	4a1a      	ldr	r2, [pc, #104]	; (8012890 <LidarSetPos+0x2e40>)
 8012828:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 801282a:	4b0d      	ldr	r3, [pc, #52]	; (8012860 <LidarSetPos+0x2e10>)
 801282c:	4a1a      	ldr	r2, [pc, #104]	; (8012898 <LidarSetPos+0x2e48>)
 801282e:	601a      	str	r2, [r3, #0]
					}

					lidar->pos = CENTER_3;
 8012830:	463b      	mov	r3, r7
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2206      	movs	r2, #6
 8012836:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_3, 1, &pp, 0, 1);
 801283a:	f207 4084 	addw	r0, r7, #1156	; 0x484
 801283e:	2301      	movs	r3, #1
 8012840:	9300      	str	r3, [sp, #0]
 8012842:	2300      	movs	r3, #0
 8012844:	4a09      	ldr	r2, [pc, #36]	; (801286c <LidarSetPos+0x2e1c>)
 8012846:	2101      	movs	r1, #1
 8012848:	f7f3 fb88 	bl	8005f5c <LSR_start>
					while(pp.lsr_start)
 801284c:	e076      	b.n	801293c <LidarSetPos+0x2eec>
 801284e:	bf00      	nop
 8012850:	9999999a 	.word	0x9999999a
 8012854:	c0059999 	.word	0xc0059999
 8012858:	200065b8 	.word	0x200065b8
 801285c:	4154cccd 	.word	0x4154cccd
 8012860:	20007494 	.word	0x20007494
 8012864:	45039000 	.word	0x45039000
 8012868:	2000a240 	.word	0x2000a240
 801286c:	20006d44 	.word	0x20006d44
 8012870:	40020c00 	.word	0x40020c00
 8012874:	200079d8 	.word	0x200079d8
 8012878:	2000a5e8 	.word	0x2000a5e8
 801287c:	c2b20000 	.word	0xc2b20000
 8012880:	200073d0 	.word	0x200073d0
 8012884:	20006a44 	.word	0x20006a44
 8012888:	41026666 	.word	0x41026666
 801288c:	45020000 	.word	0x45020000
 8012890:	4104cccd 	.word	0x4104cccd
 8012894:	44bea000 	.word	0x44bea000
 8012898:	44c1c000 	.word	0x44c1c000
					{
						if(ps4.button == UP)
 801289c:	4ba4      	ldr	r3, [pc, #656]	; (8012b30 <LidarSetPos+0x30e0>)
 801289e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128a0:	2b10      	cmp	r3, #16
 80128a2:	d115      	bne.n	80128d0 <LidarSetPos+0x2e80>
						{
							while(ps4.button == UP);
 80128a4:	bf00      	nop
 80128a6:	4ba2      	ldr	r3, [pc, #648]	; (8012b30 <LidarSetPos+0x30e0>)
 80128a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128aa:	2b10      	cmp	r3, #16
 80128ac:	d0fb      	beq.n	80128a6 <LidarSetPos+0x2e56>
							if(blue)
 80128ae:	4ba1      	ldr	r3, [pc, #644]	; (8012b34 <LidarSetPos+0x30e4>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d006      	beq.n	80128c4 <LidarSetPos+0x2e74>
							{
								vesc_speed = BlueOppoType2;
 80128b6:	4ba0      	ldr	r3, [pc, #640]	; (8012b38 <LidarSetPos+0x30e8>)
 80128b8:	4aa0      	ldr	r2, [pc, #640]	; (8012b3c <LidarSetPos+0x30ec>)
 80128ba:	601a      	str	r2, [r3, #0]
								vesc_duty = BlueOppoType2Duty;
 80128bc:	4ba0      	ldr	r3, [pc, #640]	; (8012b40 <LidarSetPos+0x30f0>)
 80128be:	4aa1      	ldr	r2, [pc, #644]	; (8012b44 <LidarSetPos+0x30f4>)
 80128c0:	601a      	str	r2, [r3, #0]
 80128c2:	e005      	b.n	80128d0 <LidarSetPos+0x2e80>
							}
							else
							{
								vesc_speed = RedOppoType2;
 80128c4:	4b9c      	ldr	r3, [pc, #624]	; (8012b38 <LidarSetPos+0x30e8>)
 80128c6:	4aa0      	ldr	r2, [pc, #640]	; (8012b48 <LidarSetPos+0x30f8>)
 80128c8:	601a      	str	r2, [r3, #0]
								vesc_duty = RedOppoType2Duty;
 80128ca:	4b9d      	ldr	r3, [pc, #628]	; (8012b40 <LidarSetPos+0x30f0>)
 80128cc:	4a9f      	ldr	r2, [pc, #636]	; (8012b4c <LidarSetPos+0x30fc>)
 80128ce:	601a      	str	r2, [r3, #0]
							}
						}

						if(ps4.button == SQUARE)
 80128d0:	4b97      	ldr	r3, [pc, #604]	; (8012b30 <LidarSetPos+0x30e0>)
 80128d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128d8:	d108      	bne.n	80128ec <LidarSetPos+0x2e9c>
						{
							while(ps4.button == SQUARE);
 80128da:	bf00      	nop
 80128dc:	4b94      	ldr	r3, [pc, #592]	; (8012b30 <LidarSetPos+0x30e0>)
 80128de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80128e4:	d0fa      	beq.n	80128dc <LidarSetPos+0x2e8c>
							PP_stop(&pp);
 80128e6:	489a      	ldr	r0, [pc, #616]	; (8012b50 <LidarSetPos+0x3100>)
 80128e8:	f7f3 fcaa 	bl	8006240 <PP_stop>
						}

						if(lsrR.dist <= lsr_center_3[0][1] + Offset_3 - 0.45)
 80128ec:	4b99      	ldr	r3, [pc, #612]	; (8012b54 <LidarSetPos+0x3104>)
 80128ee:	69db      	ldr	r3, [r3, #28]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7ed fe29 	bl	8000548 <__aeabi_f2d>
 80128f6:	4604      	mov	r4, r0
 80128f8:	460d      	mov	r5, r1
 80128fa:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4618      	mov	r0, r3
 8012902:	f7ed fe21 	bl	8000548 <__aeabi_f2d>
 8012906:	a386      	add	r3, pc, #536	; (adr r3, 8012b20 <LidarSetPos+0x30d0>)
 8012908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290c:	f7ed fcbe 	bl	800028c <__adddf3>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4610      	mov	r0, r2
 8012916:	4619      	mov	r1, r3
 8012918:	a383      	add	r3, pc, #524	; (adr r3, 8012b28 <LidarSetPos+0x30d8>)
 801291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291e:	f7ed fcb3 	bl	8000288 <__aeabi_dsub>
 8012922:	4602      	mov	r2, r0
 8012924:	460b      	mov	r3, r1
 8012926:	4620      	mov	r0, r4
 8012928:	4629      	mov	r1, r5
 801292a:	f7ee f8e1 	bl	8000af0 <__aeabi_dcmple>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	d100      	bne.n	8012936 <LidarSetPos+0x2ee6>
 8012934:	e002      	b.n	801293c <LidarSetPos+0x2eec>
							PP_stop(&pp);
 8012936:	4886      	ldr	r0, [pc, #536]	; (8012b50 <LidarSetPos+0x3100>)
 8012938:	f7f3 fc82 	bl	8006240 <PP_stop>
					while(pp.lsr_start)
 801293c:	4b84      	ldr	r3, [pc, #528]	; (8012b50 <LidarSetPos+0x3100>)
 801293e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012942:	f003 0310 	and.w	r3, r3, #16
 8012946:	b2db      	uxtb	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	d1a7      	bne.n	801289c <LidarSetPos+0x2e4c>
					}


					PP_start(robot_center, 1, &pp);
 801294c:	f107 0308 	add.w	r3, r7, #8
 8012950:	4a7f      	ldr	r2, [pc, #508]	; (8012b50 <LidarSetPos+0x3100>)
 8012952:	2101      	movs	r1, #1
 8012954:	4618      	mov	r0, r3
 8012956:	f7f3 f93b 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801295a:	f003 fb81 	bl	8016060 <HAL_GetTick>
 801295e:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8012962:	e026      	b.n	80129b2 <LidarSetPos+0x2f62>
					{
						after = HAL_GetTick();
 8012964:	f003 fb7c 	bl	8016060 <HAL_GetTick>
 8012968:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 801296c:	4b78      	ldr	r3, [pc, #480]	; (8012b50 <LidarSetPos+0x3100>)
 801296e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012972:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8012b58 <LidarSetPos+0x3108>
 8012976:	eef4 7ac7 	vcmpe.f32	s15, s14
 801297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297e:	db0a      	blt.n	8012996 <LidarSetPos+0x2f46>
 8012980:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8012984:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8012988:	1ad3      	subs	r3, r2, r3
 801298a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801298e:	d302      	bcc.n	8012996 <LidarSetPos+0x2f46>
							PP_stop(&pp);
 8012990:	486f      	ldr	r0, [pc, #444]	; (8012b50 <LidarSetPos+0x3100>)
 8012992:	f7f3 fc55 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8012996:	4b66      	ldr	r3, [pc, #408]	; (8012b30 <LidarSetPos+0x30e0>)
 8012998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801299a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801299e:	d108      	bne.n	80129b2 <LidarSetPos+0x2f62>
						{
							while(ps4.button == SQUARE);
 80129a0:	bf00      	nop
 80129a2:	4b63      	ldr	r3, [pc, #396]	; (8012b30 <LidarSetPos+0x30e0>)
 80129a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80129aa:	d0fa      	beq.n	80129a2 <LidarSetPos+0x2f52>
							PP_stop(&pp);
 80129ac:	4868      	ldr	r0, [pc, #416]	; (8012b50 <LidarSetPos+0x3100>)
 80129ae:	f7f3 fc47 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80129b2:	4b67      	ldr	r3, [pc, #412]	; (8012b50 <LidarSetPos+0x3100>)
 80129b4:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80129b8:	f003 0301 	and.w	r3, r3, #1
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d1d0      	bne.n	8012964 <LidarSetPos+0x2f14>
						}
					}

					stick_fence = 1;
 80129c2:	4b66      	ldr	r3, [pc, #408]	; (8012b5c <LidarSetPos+0x310c>)
 80129c4:	2201      	movs	r2, #1
 80129c6:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80129c8:	463b      	mov	r3, r7
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	f000 8441 	beq.w	8013258 <LidarSetPos+0x3808>
					{
						osDelay(300);
 80129d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80129da:	f00a f877 	bl	801cacc <osDelay>
						Shot();
 80129de:	f7fc f803 	bl	800e9e8 <Shot>
					}

					break;
 80129e2:	f000 bc39 	b.w	8013258 <LidarSetPos+0x3808>

				case CENTER:
					stick_fence = 0;
 80129e6:	4b5d      	ldr	r3, [pc, #372]	; (8012b5c <LidarSetPos+0x310c>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 80129ec:	463b      	mov	r3, r7
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2200      	movs	r2, #0
 80129f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 80129f6:	4b4f      	ldr	r3, [pc, #316]	; (8012b34 <LidarSetPos+0x30e4>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d006      	beq.n	8012a0c <LidarSetPos+0x2fbc>
					{
						vesc_speed = BlueType2;
 80129fe:	4b4e      	ldr	r3, [pc, #312]	; (8012b38 <LidarSetPos+0x30e8>)
 8012a00:	4a57      	ldr	r2, [pc, #348]	; (8012b60 <LidarSetPos+0x3110>)
 8012a02:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8012a04:	4b4e      	ldr	r3, [pc, #312]	; (8012b40 <LidarSetPos+0x30f0>)
 8012a06:	4a57      	ldr	r2, [pc, #348]	; (8012b64 <LidarSetPos+0x3114>)
 8012a08:	601a      	str	r2, [r3, #0]
 8012a0a:	e005      	b.n	8012a18 <LidarSetPos+0x2fc8>
					}
					else
					{
						vesc_speed = RedType2;
 8012a0c:	4b4a      	ldr	r3, [pc, #296]	; (8012b38 <LidarSetPos+0x30e8>)
 8012a0e:	4a56      	ldr	r2, [pc, #344]	; (8012b68 <LidarSetPos+0x3118>)
 8012a10:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8012a12:	4b4b      	ldr	r3, [pc, #300]	; (8012b40 <LidarSetPos+0x30f0>)
 8012a14:	4a55      	ldr	r2, [pc, #340]	; (8012b6c <LidarSetPos+0x311c>)
 8012a16:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 8012a18:	463b      	mov	r3, r7
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d158      	bne.n	8012ad6 <LidarSetPos+0x3086>
					{
						ResetCoordinate();
 8012a24:	f7fb fc92 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_3;
 8012a28:	463b      	mov	r3, r7
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2206      	movs	r2, #6
 8012a2e:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_3, 1, &pp);
 8012a32:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8012a36:	4a46      	ldr	r2, [pc, #280]	; (8012b50 <LidarSetPos+0x3100>)
 8012a38:	2101      	movs	r1, #1
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f3 f8c8 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8012a40:	e040      	b.n	8012ac4 <LidarSetPos+0x3074>
						{
							if(ps4.button == SQUARE)
 8012a42:	4b3b      	ldr	r3, [pc, #236]	; (8012b30 <LidarSetPos+0x30e0>)
 8012a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a4a:	d10c      	bne.n	8012a66 <LidarSetPos+0x3016>
							{
								while(ps4.button == SQUARE);
 8012a4c:	bf00      	nop
 8012a4e:	4b38      	ldr	r3, [pc, #224]	; (8012b30 <LidarSetPos+0x30e0>)
 8012a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a56:	d0fa      	beq.n	8012a4e <LidarSetPos+0x2ffe>
								StopAutoPP();
 8012a58:	f7fb fc36 	bl	800e2c8 <StopAutoPP>
								lidar->fail = 1;
 8012a5c:	463b      	mov	r3, r7
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2201      	movs	r2, #1
 8012a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER;
	//							lidar->pos_counter = CENTER;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8012a66:	2108      	movs	r1, #8
 8012a68:	4841      	ldr	r0, [pc, #260]	; (8012b70 <LidarSetPos+0x3120>)
 8012a6a:	f005 f975 	bl	8017d58 <HAL_GPIO_ReadPin>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d006      	beq.n	8012a82 <LidarSetPos+0x3032>
 8012a74:	2110      	movs	r1, #16
 8012a76:	483e      	ldr	r0, [pc, #248]	; (8012b70 <LidarSetPos+0x3120>)
 8012a78:	f005 f96e 	bl	8017d58 <HAL_GPIO_ReadPin>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d109      	bne.n	8012a96 <LidarSetPos+0x3046>
							{
								pp.target_y[0] = pp.real_y;
 8012a82:	4b33      	ldr	r3, [pc, #204]	; (8012b50 <LidarSetPos+0x3100>)
 8012a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a86:	4a32      	ldr	r2, [pc, #200]	; (8012b50 <LidarSetPos+0x3100>)
 8012a88:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012a8c:	4b30      	ldr	r3, [pc, #192]	; (8012b50 <LidarSetPos+0x3100>)
 8012a8e:	f04f 0200 	mov.w	r2, #0
 8012a92:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_to_center_3[0][1])
 8012a96:	4b2e      	ldr	r3, [pc, #184]	; (8012b50 <LidarSetPos+0x3100>)
 8012a98:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012a9c:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8012aa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8012aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aac:	da00      	bge.n	8012ab0 <LidarSetPos+0x3060>
 8012aae:	e009      	b.n	8012ac4 <LidarSetPos+0x3074>
							{
								pp.target_y[0] = pp.real_y;
 8012ab0:	4b27      	ldr	r3, [pc, #156]	; (8012b50 <LidarSetPos+0x3100>)
 8012ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ab4:	4a26      	ldr	r2, [pc, #152]	; (8012b50 <LidarSetPos+0x3100>)
 8012ab6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012aba:	4b25      	ldr	r3, [pc, #148]	; (8012b50 <LidarSetPos+0x3100>)
 8012abc:	f04f 0200 	mov.w	r2, #0
 8012ac0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8012ac4:	4b22      	ldr	r3, [pc, #136]	; (8012b50 <LidarSetPos+0x3100>)
 8012ac6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012aca:	f003 0301 	and.w	r3, r3, #1
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d1b6      	bne.n	8012a42 <LidarSetPos+0x2ff2>
 8012ad4:	e093      	b.n	8012bfe <LidarSetPos+0x31ae>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_3;
 8012ad6:	463b      	mov	r3, r7
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2206      	movs	r2, #6
 8012adc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_3, 1, &pp, 0, 1);
 8012ae0:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	2300      	movs	r3, #0
 8012aea:	4a19      	ldr	r2, [pc, #100]	; (8012b50 <LidarSetPos+0x3100>)
 8012aec:	2101      	movs	r1, #1
 8012aee:	f7f3 fa35 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8012af2:	e07b      	b.n	8012bec <LidarSetPos+0x319c>
						{
							if(ps4.button == UP)
 8012af4:	4b0e      	ldr	r3, [pc, #56]	; (8012b30 <LidarSetPos+0x30e0>)
 8012af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af8:	2b10      	cmp	r3, #16
 8012afa:	d141      	bne.n	8012b80 <LidarSetPos+0x3130>
							{
								while(ps4.button == UP);
 8012afc:	bf00      	nop
 8012afe:	4b0c      	ldr	r3, [pc, #48]	; (8012b30 <LidarSetPos+0x30e0>)
 8012b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b02:	2b10      	cmp	r3, #16
 8012b04:	d0fb      	beq.n	8012afe <LidarSetPos+0x30ae>
								if(blue)
 8012b06:	4b0b      	ldr	r3, [pc, #44]	; (8012b34 <LidarSetPos+0x30e4>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d032      	beq.n	8012b74 <LidarSetPos+0x3124>
								{
									vesc_speed = BlueOppoType2;
 8012b0e:	4b0a      	ldr	r3, [pc, #40]	; (8012b38 <LidarSetPos+0x30e8>)
 8012b10:	4a0a      	ldr	r2, [pc, #40]	; (8012b3c <LidarSetPos+0x30ec>)
 8012b12:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8012b14:	4b0a      	ldr	r3, [pc, #40]	; (8012b40 <LidarSetPos+0x30f0>)
 8012b16:	4a0b      	ldr	r2, [pc, #44]	; (8012b44 <LidarSetPos+0x30f4>)
 8012b18:	601a      	str	r2, [r3, #0]
 8012b1a:	e031      	b.n	8012b80 <LidarSetPos+0x3130>
 8012b1c:	f3af 8000 	nop.w
 8012b20:	9999999a 	.word	0x9999999a
 8012b24:	3fe99999 	.word	0x3fe99999
 8012b28:	cccccccd 	.word	0xcccccccd
 8012b2c:	3fdccccc 	.word	0x3fdccccc
 8012b30:	2000a240 	.word	0x2000a240
 8012b34:	20006a44 	.word	0x20006a44
 8012b38:	200065b8 	.word	0x200065b8
 8012b3c:	414f3333 	.word	0x414f3333
 8012b40:	20007494 	.word	0x20007494
 8012b44:	45020000 	.word	0x45020000
 8012b48:	4154cccd 	.word	0x4154cccd
 8012b4c:	45039000 	.word	0x45039000
 8012b50:	20006d44 	.word	0x20006d44
 8012b54:	200095f8 	.word	0x200095f8
 8012b58:	c2b60000 	.word	0xc2b60000
 8012b5c:	200073d0 	.word	0x200073d0
 8012b60:	41026666 	.word	0x41026666
 8012b64:	44bea000 	.word	0x44bea000
 8012b68:	4104cccd 	.word	0x4104cccd
 8012b6c:	44c1c000 	.word	0x44c1c000
 8012b70:	40020c00 	.word	0x40020c00
								}
								else
								{
									vesc_speed = RedOppoType2;
 8012b74:	4baa      	ldr	r3, [pc, #680]	; (8012e20 <LidarSetPos+0x33d0>)
 8012b76:	4aab      	ldr	r2, [pc, #684]	; (8012e24 <LidarSetPos+0x33d4>)
 8012b78:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8012b7a:	4bab      	ldr	r3, [pc, #684]	; (8012e28 <LidarSetPos+0x33d8>)
 8012b7c:	4aab      	ldr	r2, [pc, #684]	; (8012e2c <LidarSetPos+0x33dc>)
 8012b7e:	601a      	str	r2, [r3, #0]
								}
							}
							if(ps4.button == SQUARE)
 8012b80:	4bab      	ldr	r3, [pc, #684]	; (8012e30 <LidarSetPos+0x33e0>)
 8012b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b88:	d108      	bne.n	8012b9c <LidarSetPos+0x314c>
							{
								while(ps4.button == SQUARE);
 8012b8a:	bf00      	nop
 8012b8c:	4ba8      	ldr	r3, [pc, #672]	; (8012e30 <LidarSetPos+0x33e0>)
 8012b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b94:	d0fa      	beq.n	8012b8c <LidarSetPos+0x313c>
								PP_stop(&pp);
 8012b96:	48a7      	ldr	r0, [pc, #668]	; (8012e34 <LidarSetPos+0x33e4>)
 8012b98:	f7f3 fb52 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_3[0][1] + Offset - 0.2)
 8012b9c:	4ba6      	ldr	r3, [pc, #664]	; (8012e38 <LidarSetPos+0x33e8>)
 8012b9e:	69db      	ldr	r3, [r3, #28]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7ed fcd1 	bl	8000548 <__aeabi_f2d>
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	460d      	mov	r5, r1
 8012baa:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7ed fcc9 	bl	8000548 <__aeabi_f2d>
 8012bb6:	f04f 0200 	mov.w	r2, #0
 8012bba:	4ba0      	ldr	r3, [pc, #640]	; (8012e3c <LidarSetPos+0x33ec>)
 8012bbc:	f7ed fb66 	bl	800028c <__adddf3>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	a393      	add	r3, pc, #588	; (adr r3, 8012e18 <LidarSetPos+0x33c8>)
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	f7ed fb5b 	bl	8000288 <__aeabi_dsub>
 8012bd2:	4602      	mov	r2, r0
 8012bd4:	460b      	mov	r3, r1
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7ed ff89 	bl	8000af0 <__aeabi_dcmple>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d100      	bne.n	8012be6 <LidarSetPos+0x3196>
 8012be4:	e002      	b.n	8012bec <LidarSetPos+0x319c>
								PP_stop(&pp);
 8012be6:	4893      	ldr	r0, [pc, #588]	; (8012e34 <LidarSetPos+0x33e4>)
 8012be8:	f7f3 fb2a 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8012bec:	4b91      	ldr	r3, [pc, #580]	; (8012e34 <LidarSetPos+0x33e4>)
 8012bee:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012bf2:	f003 0310 	and.w	r3, r3, #16
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f47f af7b 	bne.w	8012af4 <LidarSetPos+0x30a4>
						}
					}

					PP_start(robot_center, 1, &pp);
 8012bfe:	f107 0308 	add.w	r3, r7, #8
 8012c02:	4a8c      	ldr	r2, [pc, #560]	; (8012e34 <LidarSetPos+0x33e4>)
 8012c04:	2101      	movs	r1, #1
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7f2 ffe2 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8012c0c:	f003 fa28 	bl	8016060 <HAL_GetTick>
 8012c10:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8012c14:	e026      	b.n	8012c64 <LidarSetPos+0x3214>
					{
						after = HAL_GetTick();
 8012c16:	f003 fa23 	bl	8016060 <HAL_GetTick>
 8012c1a:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8012c1e:	4b85      	ldr	r3, [pc, #532]	; (8012e34 <LidarSetPos+0x33e4>)
 8012c20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8012c24:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8012e40 <LidarSetPos+0x33f0>
 8012c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c30:	db0a      	blt.n	8012c48 <LidarSetPos+0x31f8>
 8012c32:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8012c36:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8012c3a:	1ad3      	subs	r3, r2, r3
 8012c3c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8012c40:	d302      	bcc.n	8012c48 <LidarSetPos+0x31f8>
							PP_stop(&pp);
 8012c42:	487c      	ldr	r0, [pc, #496]	; (8012e34 <LidarSetPos+0x33e4>)
 8012c44:	f7f3 fafc 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8012c48:	4b79      	ldr	r3, [pc, #484]	; (8012e30 <LidarSetPos+0x33e0>)
 8012c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c50:	d108      	bne.n	8012c64 <LidarSetPos+0x3214>
						{
							while(ps4.button == SQUARE);
 8012c52:	bf00      	nop
 8012c54:	4b76      	ldr	r3, [pc, #472]	; (8012e30 <LidarSetPos+0x33e0>)
 8012c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012c5c:	d0fa      	beq.n	8012c54 <LidarSetPos+0x3204>
							PP_stop(&pp);
 8012c5e:	4875      	ldr	r0, [pc, #468]	; (8012e34 <LidarSetPos+0x33e4>)
 8012c60:	f7f3 faee 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8012c64:	4b73      	ldr	r3, [pc, #460]	; (8012e34 <LidarSetPos+0x33e4>)
 8012c66:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012c6a:	f003 0301 	and.w	r3, r3, #1
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d1d0      	bne.n	8012c16 <LidarSetPos+0x31c6>
						}
					}

					stick_fence = 1;
 8012c74:	4b73      	ldr	r3, [pc, #460]	; (8012e44 <LidarSetPos+0x33f4>)
 8012c76:	2201      	movs	r2, #1
 8012c78:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8012c7a:	463b      	mov	r3, r7
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d005      	beq.n	8012c92 <LidarSetPos+0x3242>
					{
						osDelay(300);
 8012c86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012c8a:	f009 ff1f 	bl	801cacc <osDelay>
						Shot();
 8012c8e:	f7fb feab 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8012c92:	463b      	mov	r3, r7
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	f040 82df 	bne.w	801325e <LidarSetPos+0x380e>
						LidarAdjust(lidar);
 8012ca0:	463b      	mov	r3, r7
 8012ca2:	6818      	ldr	r0, [r3, #0]
 8012ca4:	f002 faa0 	bl	80151e8 <LidarAdjust>
					break;
 8012ca8:	e2d9      	b.n	801325e <LidarSetPos+0x380e>

				case CENTER_2:
					stick_fence = 0;
 8012caa:	4b66      	ldr	r3, [pc, #408]	; (8012e44 <LidarSetPos+0x33f4>)
 8012cac:	2200      	movs	r2, #0
 8012cae:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012cb0:	463b      	mov	r3, r7
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8012cba:	4b63      	ldr	r3, [pc, #396]	; (8012e48 <LidarSetPos+0x33f8>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d006      	beq.n	8012cd0 <LidarSetPos+0x3280>
					{
						vesc_speed = BlueType2;
 8012cc2:	4b57      	ldr	r3, [pc, #348]	; (8012e20 <LidarSetPos+0x33d0>)
 8012cc4:	4a61      	ldr	r2, [pc, #388]	; (8012e4c <LidarSetPos+0x33fc>)
 8012cc6:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8012cc8:	4b57      	ldr	r3, [pc, #348]	; (8012e28 <LidarSetPos+0x33d8>)
 8012cca:	4a61      	ldr	r2, [pc, #388]	; (8012e50 <LidarSetPos+0x3400>)
 8012ccc:	601a      	str	r2, [r3, #0]
 8012cce:	e005      	b.n	8012cdc <LidarSetPos+0x328c>
					}
					else
					{
						vesc_speed = RedType2;
 8012cd0:	4b53      	ldr	r3, [pc, #332]	; (8012e20 <LidarSetPos+0x33d0>)
 8012cd2:	4a60      	ldr	r2, [pc, #384]	; (8012e54 <LidarSetPos+0x3404>)
 8012cd4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8012cd6:	4b54      	ldr	r3, [pc, #336]	; (8012e28 <LidarSetPos+0x33d8>)
 8012cd8:	4a5f      	ldr	r2, [pc, #380]	; (8012e58 <LidarSetPos+0x3408>)
 8012cda:	601a      	str	r2, [r3, #0]
					}

					if(!lidar->laser)
 8012cdc:	463b      	mov	r3, r7
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d173      	bne.n	8012dd0 <LidarSetPos+0x3380>
					{
						ResetCoordinate();
 8012ce8:	f7fb fb30 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_3;
 8012cec:	463b      	mov	r3, r7
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2206      	movs	r2, #6
 8012cf2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_2_to_center_3, 1, &pp);
 8012cf6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8012cfa:	4a4e      	ldr	r2, [pc, #312]	; (8012e34 <LidarSetPos+0x33e4>)
 8012cfc:	2101      	movs	r1, #1
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7f2 ff66 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8012d04:	e05b      	b.n	8012dbe <LidarSetPos+0x336e>
						{
							if(ps4.button == UP)
 8012d06:	4b4a      	ldr	r3, [pc, #296]	; (8012e30 <LidarSetPos+0x33e0>)
 8012d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d0a:	2b10      	cmp	r3, #16
 8012d0c:	d115      	bne.n	8012d3a <LidarSetPos+0x32ea>
							{
								while(ps4.button == UP);
 8012d0e:	bf00      	nop
 8012d10:	4b47      	ldr	r3, [pc, #284]	; (8012e30 <LidarSetPos+0x33e0>)
 8012d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d14:	2b10      	cmp	r3, #16
 8012d16:	d0fb      	beq.n	8012d10 <LidarSetPos+0x32c0>
								if(blue)
 8012d18:	4b4b      	ldr	r3, [pc, #300]	; (8012e48 <LidarSetPos+0x33f8>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d006      	beq.n	8012d2e <LidarSetPos+0x32de>
								{
									vesc_speed = BlueOppoType2;
 8012d20:	4b3f      	ldr	r3, [pc, #252]	; (8012e20 <LidarSetPos+0x33d0>)
 8012d22:	4a4e      	ldr	r2, [pc, #312]	; (8012e5c <LidarSetPos+0x340c>)
 8012d24:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8012d26:	4b40      	ldr	r3, [pc, #256]	; (8012e28 <LidarSetPos+0x33d8>)
 8012d28:	4a4d      	ldr	r2, [pc, #308]	; (8012e60 <LidarSetPos+0x3410>)
 8012d2a:	601a      	str	r2, [r3, #0]
 8012d2c:	e005      	b.n	8012d3a <LidarSetPos+0x32ea>
								}
								else
								{
									vesc_speed = RedOppoType2;
 8012d2e:	4b3c      	ldr	r3, [pc, #240]	; (8012e20 <LidarSetPos+0x33d0>)
 8012d30:	4a3c      	ldr	r2, [pc, #240]	; (8012e24 <LidarSetPos+0x33d4>)
 8012d32:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8012d34:	4b3c      	ldr	r3, [pc, #240]	; (8012e28 <LidarSetPos+0x33d8>)
 8012d36:	4a3d      	ldr	r2, [pc, #244]	; (8012e2c <LidarSetPos+0x33dc>)
 8012d38:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8012d3a:	4b3d      	ldr	r3, [pc, #244]	; (8012e30 <LidarSetPos+0x33e0>)
 8012d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d42:	d10d      	bne.n	8012d60 <LidarSetPos+0x3310>
							{
								while(ps4.button == SQUARE);
 8012d44:	bf00      	nop
 8012d46:	4b3a      	ldr	r3, [pc, #232]	; (8012e30 <LidarSetPos+0x33e0>)
 8012d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d4e:	d0fa      	beq.n	8012d46 <LidarSetPos+0x32f6>
								PP_stop(&pp);
 8012d50:	4838      	ldr	r0, [pc, #224]	; (8012e34 <LidarSetPos+0x33e4>)
 8012d52:	f7f3 fa75 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8012d56:	463b      	mov	r3, r7
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_2; // PP Failed
	//							lidar->pos_counter = CENTER_2;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8012d60:	2108      	movs	r1, #8
 8012d62:	4840      	ldr	r0, [pc, #256]	; (8012e64 <LidarSetPos+0x3414>)
 8012d64:	f004 fff8 	bl	8017d58 <HAL_GPIO_ReadPin>
 8012d68:	4603      	mov	r3, r0
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d006      	beq.n	8012d7c <LidarSetPos+0x332c>
 8012d6e:	2110      	movs	r1, #16
 8012d70:	483c      	ldr	r0, [pc, #240]	; (8012e64 <LidarSetPos+0x3414>)
 8012d72:	f004 fff1 	bl	8017d58 <HAL_GPIO_ReadPin>
 8012d76:	4603      	mov	r3, r0
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d109      	bne.n	8012d90 <LidarSetPos+0x3340>
							{
								pp.target_y[0] = pp.real_y;
 8012d7c:	4b2d      	ldr	r3, [pc, #180]	; (8012e34 <LidarSetPos+0x33e4>)
 8012d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d80:	4a2c      	ldr	r2, [pc, #176]	; (8012e34 <LidarSetPos+0x33e4>)
 8012d82:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012d86:	4b2b      	ldr	r3, [pc, #172]	; (8012e34 <LidarSetPos+0x33e4>)
 8012d88:	f04f 0200 	mov.w	r2, #0
 8012d8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_2_to_center_3[0][1])
 8012d90:	4b28      	ldr	r3, [pc, #160]	; (8012e34 <LidarSetPos+0x33e4>)
 8012d92:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012d96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8012d9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da6:	da00      	bge.n	8012daa <LidarSetPos+0x335a>
 8012da8:	e009      	b.n	8012dbe <LidarSetPos+0x336e>
							{
								pp.target_y[0] = pp.real_y;
 8012daa:	4b22      	ldr	r3, [pc, #136]	; (8012e34 <LidarSetPos+0x33e4>)
 8012dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dae:	4a21      	ldr	r2, [pc, #132]	; (8012e34 <LidarSetPos+0x33e4>)
 8012db0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8012db4:	4b1f      	ldr	r3, [pc, #124]	; (8012e34 <LidarSetPos+0x33e4>)
 8012db6:	f04f 0200 	mov.w	r2, #0
 8012dba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8012dbe:	4b1d      	ldr	r3, [pc, #116]	; (8012e34 <LidarSetPos+0x33e4>)
 8012dc0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012dc4:	f003 0301 	and.w	r3, r3, #1
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d19b      	bne.n	8012d06 <LidarSetPos+0x32b6>
 8012dce:	e090      	b.n	8012ef2 <LidarSetPos+0x34a2>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_3;
 8012dd0:	463b      	mov	r3, r7
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2206      	movs	r2, #6
 8012dd6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_3, 1, &pp, 0, 1);
 8012dda:	f207 4084 	addw	r0, r7, #1156	; 0x484
 8012dde:	2301      	movs	r3, #1
 8012de0:	9300      	str	r3, [sp, #0]
 8012de2:	2300      	movs	r3, #0
 8012de4:	4a13      	ldr	r2, [pc, #76]	; (8012e34 <LidarSetPos+0x33e4>)
 8012de6:	2101      	movs	r1, #1
 8012de8:	f7f3 f8b8 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8012dec:	e078      	b.n	8012ee0 <LidarSetPos+0x3490>
						{
							if(ps4.button == UP)
 8012dee:	4b10      	ldr	r3, [pc, #64]	; (8012e30 <LidarSetPos+0x33e0>)
 8012df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df2:	2b10      	cmp	r3, #16
 8012df4:	d13e      	bne.n	8012e74 <LidarSetPos+0x3424>
							{
								while(ps4.button == UP);
 8012df6:	bf00      	nop
 8012df8:	4b0d      	ldr	r3, [pc, #52]	; (8012e30 <LidarSetPos+0x33e0>)
 8012dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dfc:	2b10      	cmp	r3, #16
 8012dfe:	d0fb      	beq.n	8012df8 <LidarSetPos+0x33a8>
								if(blue)
 8012e00:	4b11      	ldr	r3, [pc, #68]	; (8012e48 <LidarSetPos+0x33f8>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d02f      	beq.n	8012e68 <LidarSetPos+0x3418>
								{
									vesc_speed = BlueOppoType2;
 8012e08:	4b05      	ldr	r3, [pc, #20]	; (8012e20 <LidarSetPos+0x33d0>)
 8012e0a:	4a14      	ldr	r2, [pc, #80]	; (8012e5c <LidarSetPos+0x340c>)
 8012e0c:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 8012e0e:	4b06      	ldr	r3, [pc, #24]	; (8012e28 <LidarSetPos+0x33d8>)
 8012e10:	4a13      	ldr	r2, [pc, #76]	; (8012e60 <LidarSetPos+0x3410>)
 8012e12:	601a      	str	r2, [r3, #0]
 8012e14:	e02e      	b.n	8012e74 <LidarSetPos+0x3424>
 8012e16:	bf00      	nop
 8012e18:	9999999a 	.word	0x9999999a
 8012e1c:	3fc99999 	.word	0x3fc99999
 8012e20:	200065b8 	.word	0x200065b8
 8012e24:	4154cccd 	.word	0x4154cccd
 8012e28:	20007494 	.word	0x20007494
 8012e2c:	45039000 	.word	0x45039000
 8012e30:	2000a240 	.word	0x2000a240
 8012e34:	20006d44 	.word	0x20006d44
 8012e38:	200095f8 	.word	0x200095f8
 8012e3c:	3fe00000 	.word	0x3fe00000
 8012e40:	c2b60000 	.word	0xc2b60000
 8012e44:	200073d0 	.word	0x200073d0
 8012e48:	20006a44 	.word	0x20006a44
 8012e4c:	41026666 	.word	0x41026666
 8012e50:	44bea000 	.word	0x44bea000
 8012e54:	4104cccd 	.word	0x4104cccd
 8012e58:	44c1c000 	.word	0x44c1c000
 8012e5c:	414f3333 	.word	0x414f3333
 8012e60:	45020000 	.word	0x45020000
 8012e64:	40020c00 	.word	0x40020c00
								}
								else
								{
									vesc_speed = RedOppoType2;
 8012e68:	4bb7      	ldr	r3, [pc, #732]	; (8013148 <LidarSetPos+0x36f8>)
 8012e6a:	4ab8      	ldr	r2, [pc, #736]	; (801314c <LidarSetPos+0x36fc>)
 8012e6c:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 8012e6e:	4bb8      	ldr	r3, [pc, #736]	; (8013150 <LidarSetPos+0x3700>)
 8012e70:	4ab8      	ldr	r2, [pc, #736]	; (8013154 <LidarSetPos+0x3704>)
 8012e72:	601a      	str	r2, [r3, #0]
								}
							}

							if(ps4.button == SQUARE)
 8012e74:	4bb8      	ldr	r3, [pc, #736]	; (8013158 <LidarSetPos+0x3708>)
 8012e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e7c:	d108      	bne.n	8012e90 <LidarSetPos+0x3440>
							{
								while(ps4.button == SQUARE);
 8012e7e:	bf00      	nop
 8012e80:	4bb5      	ldr	r3, [pc, #724]	; (8013158 <LidarSetPos+0x3708>)
 8012e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e88:	d0fa      	beq.n	8012e80 <LidarSetPos+0x3430>
								PP_stop(&pp);
 8012e8a:	48b4      	ldr	r0, [pc, #720]	; (801315c <LidarSetPos+0x370c>)
 8012e8c:	f7f3 f9d8 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_3[0][1] + Offset_2 - 0.4)
 8012e90:	4bb3      	ldr	r3, [pc, #716]	; (8013160 <LidarSetPos+0x3710>)
 8012e92:	69db      	ldr	r3, [r3, #28]
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7ed fb57 	bl	8000548 <__aeabi_f2d>
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	460d      	mov	r5, r1
 8012e9e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7ed fb4f 	bl	8000548 <__aeabi_f2d>
 8012eaa:	f04f 0200 	mov.w	r2, #0
 8012eae:	4bad      	ldr	r3, [pc, #692]	; (8013164 <LidarSetPos+0x3714>)
 8012eb0:	f7ed f9ec 	bl	800028c <__adddf3>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	4610      	mov	r0, r2
 8012eba:	4619      	mov	r1, r3
 8012ebc:	a39e      	add	r3, pc, #632	; (adr r3, 8013138 <LidarSetPos+0x36e8>)
 8012ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec2:	f7ed f9e1 	bl	8000288 <__aeabi_dsub>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4620      	mov	r0, r4
 8012ecc:	4629      	mov	r1, r5
 8012ece:	f7ed fe0f 	bl	8000af0 <__aeabi_dcmple>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d100      	bne.n	8012eda <LidarSetPos+0x348a>
 8012ed8:	e002      	b.n	8012ee0 <LidarSetPos+0x3490>
								PP_stop(&pp);
 8012eda:	48a0      	ldr	r0, [pc, #640]	; (801315c <LidarSetPos+0x370c>)
 8012edc:	f7f3 f9b0 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8012ee0:	4b9e      	ldr	r3, [pc, #632]	; (801315c <LidarSetPos+0x370c>)
 8012ee2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012ee6:	f003 0310 	and.w	r3, r3, #16
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f47f af7e 	bne.w	8012dee <LidarSetPos+0x339e>
						}
					}

					PP_start(robot_center, 1, &pp);
 8012ef2:	f107 0308 	add.w	r3, r7, #8
 8012ef6:	4a99      	ldr	r2, [pc, #612]	; (801315c <LidarSetPos+0x370c>)
 8012ef8:	2101      	movs	r1, #1
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7f2 fe68 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8012f00:	f003 f8ae 	bl	8016060 <HAL_GetTick>
 8012f04:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8012f08:	e01c      	b.n	8012f44 <LidarSetPos+0x34f4>
					{
						after = HAL_GetTick();
 8012f0a:	f003 f8a9 	bl	8016060 <HAL_GetTick>
 8012f0e:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(after - before >= 1000)
 8012f12:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8012f16:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8012f1a:	1ad3      	subs	r3, r2, r3
 8012f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012f20:	d302      	bcc.n	8012f28 <LidarSetPos+0x34d8>
							PP_stop(&pp);
 8012f22:	488e      	ldr	r0, [pc, #568]	; (801315c <LidarSetPos+0x370c>)
 8012f24:	f7f3 f98c 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8012f28:	4b8b      	ldr	r3, [pc, #556]	; (8013158 <LidarSetPos+0x3708>)
 8012f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f30:	d108      	bne.n	8012f44 <LidarSetPos+0x34f4>
						{
							while(ps4.button == SQUARE);
 8012f32:	bf00      	nop
 8012f34:	4b88      	ldr	r3, [pc, #544]	; (8013158 <LidarSetPos+0x3708>)
 8012f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f3c:	d0fa      	beq.n	8012f34 <LidarSetPos+0x34e4>
							PP_stop(&pp);
 8012f3e:	4887      	ldr	r0, [pc, #540]	; (801315c <LidarSetPos+0x370c>)
 8012f40:	f7f3 f97e 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8012f44:	4b85      	ldr	r3, [pc, #532]	; (801315c <LidarSetPos+0x370c>)
 8012f46:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8012f4a:	f003 0301 	and.w	r3, r3, #1
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d1da      	bne.n	8012f0a <LidarSetPos+0x34ba>
						}
					}
					if(lidar->autoshot)
 8012f54:	463b      	mov	r3, r7
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d005      	beq.n	8012f6c <LidarSetPos+0x351c>
					{
						osDelay(300);
 8012f60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012f64:	f009 fdb2 	bl	801cacc <osDelay>
						Shot();
 8012f68:	f7fb fd3e 	bl	800e9e8 <Shot>
					}
					stick_fence = 1;
 8012f6c:	4b7e      	ldr	r3, [pc, #504]	; (8013168 <LidarSetPos+0x3718>)
 8012f6e:	2201      	movs	r2, #1
 8012f70:	601a      	str	r2, [r3, #0]

					// Only adjust after reached destination
					if(!lidar->fail)
 8012f72:	463b      	mov	r3, r7
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	f040 8172 	bne.w	8013264 <LidarSetPos+0x3814>
						LidarAdjust(lidar);
 8012f80:	463b      	mov	r3, r7
 8012f82:	6818      	ldr	r0, [r3, #0]
 8012f84:	f002 f930 	bl	80151e8 <LidarAdjust>
					break;
 8012f88:	e16c      	b.n	8013264 <LidarSetPos+0x3814>


				case CENTER_4:
					stick_fence = 0;
 8012f8a:	4b77      	ldr	r3, [pc, #476]	; (8013168 <LidarSetPos+0x3718>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8012f90:	463b      	mov	r3, r7
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2200      	movs	r2, #0
 8012f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					if(blue)
 8012f9a:	4b74      	ldr	r3, [pc, #464]	; (801316c <LidarSetPos+0x371c>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d006      	beq.n	8012fb0 <LidarSetPos+0x3560>
					{
						vesc_speed = BlueType2;
 8012fa2:	4b69      	ldr	r3, [pc, #420]	; (8013148 <LidarSetPos+0x36f8>)
 8012fa4:	4a72      	ldr	r2, [pc, #456]	; (8013170 <LidarSetPos+0x3720>)
 8012fa6:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2Duty;
 8012fa8:	4b69      	ldr	r3, [pc, #420]	; (8013150 <LidarSetPos+0x3700>)
 8012faa:	4a72      	ldr	r2, [pc, #456]	; (8013174 <LidarSetPos+0x3724>)
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	e005      	b.n	8012fbc <LidarSetPos+0x356c>
					}
					else
					{
						vesc_speed = RedType2;
 8012fb0:	4b65      	ldr	r3, [pc, #404]	; (8013148 <LidarSetPos+0x36f8>)
 8012fb2:	4a71      	ldr	r2, [pc, #452]	; (8013178 <LidarSetPos+0x3728>)
 8012fb4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2Duty;
 8012fb6:	4b66      	ldr	r3, [pc, #408]	; (8013150 <LidarSetPos+0x3700>)
 8012fb8:	4a70      	ldr	r2, [pc, #448]	; (801317c <LidarSetPos+0x372c>)
 8012fba:	601a      	str	r2, [r3, #0]
					}
					if(!lidar->laser)
 8012fbc:	463b      	mov	r3, r7
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d159      	bne.n	801307c <LidarSetPos+0x362c>
					{
						ResetCoordinate();
 8012fc8:	f7fb f9c0 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_3;
 8012fcc:	463b      	mov	r3, r7
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2206      	movs	r2, #6
 8012fd2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_4_to_center_3, 1, &pp);
 8012fd6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8012fda:	4a60      	ldr	r2, [pc, #384]	; (801315c <LidarSetPos+0x370c>)
 8012fdc:	2101      	movs	r1, #1
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7f2 fdf6 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8012fe4:	e041      	b.n	801306a <LidarSetPos+0x361a>
						{
							if(ps4.button == SQUARE)
 8012fe6:	4b5c      	ldr	r3, [pc, #368]	; (8013158 <LidarSetPos+0x3708>)
 8012fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fee:	d10d      	bne.n	801300c <LidarSetPos+0x35bc>
							{
								while(ps4.button == SQUARE);
 8012ff0:	bf00      	nop
 8012ff2:	4b59      	ldr	r3, [pc, #356]	; (8013158 <LidarSetPos+0x3708>)
 8012ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ffa:	d0fa      	beq.n	8012ff2 <LidarSetPos+0x35a2>
								PP_stop(&pp);
 8012ffc:	4857      	ldr	r0, [pc, #348]	; (801315c <LidarSetPos+0x370c>)
 8012ffe:	f7f3 f91f 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8013002:	463b      	mov	r3, r7
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2201      	movs	r2, #1
 8013008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_4;
	//							lidar->pos_counter = CENTER_4;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 801300c:	2108      	movs	r1, #8
 801300e:	485c      	ldr	r0, [pc, #368]	; (8013180 <LidarSetPos+0x3730>)
 8013010:	f004 fea2 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	d006      	beq.n	8013028 <LidarSetPos+0x35d8>
 801301a:	2110      	movs	r1, #16
 801301c:	4858      	ldr	r0, [pc, #352]	; (8013180 <LidarSetPos+0x3730>)
 801301e:	f004 fe9b 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d109      	bne.n	801303c <LidarSetPos+0x35ec>
							{
								pp.target_y[0] = pp.real_y;
 8013028:	4b4c      	ldr	r3, [pc, #304]	; (801315c <LidarSetPos+0x370c>)
 801302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801302c:	4a4b      	ldr	r2, [pc, #300]	; (801315c <LidarSetPos+0x370c>)
 801302e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8013032:	4b4a      	ldr	r3, [pc, #296]	; (801315c <LidarSetPos+0x370c>)
 8013034:	f04f 0200 	mov.w	r2, #0
 8013038:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x <= center_4_to_center_3[0][1])
 801303c:	4b47      	ldr	r3, [pc, #284]	; (801315c <LidarSetPos+0x370c>)
 801303e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8013042:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8013046:	edd3 7a01 	vldr	s15, [r3, #4]
 801304a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013052:	d900      	bls.n	8013056 <LidarSetPos+0x3606>
 8013054:	e009      	b.n	801306a <LidarSetPos+0x361a>
							{
								pp.target_y[0] = pp.real_y;
 8013056:	4b41      	ldr	r3, [pc, #260]	; (801315c <LidarSetPos+0x370c>)
 8013058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801305a:	4a40      	ldr	r2, [pc, #256]	; (801315c <LidarSetPos+0x370c>)
 801305c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8013060:	4b3e      	ldr	r3, [pc, #248]	; (801315c <LidarSetPos+0x370c>)
 8013062:	f04f 0200 	mov.w	r2, #0
 8013066:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 801306a:	4b3c      	ldr	r3, [pc, #240]	; (801315c <LidarSetPos+0x370c>)
 801306c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	b2db      	uxtb	r3, r3
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1b5      	bne.n	8012fe6 <LidarSetPos+0x3596>
 801307a:	e095      	b.n	80131a8 <LidarSetPos+0x3758>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_3;
 801307c:	463b      	mov	r3, r7
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2206      	movs	r2, #6
 8013082:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_3, 1, &pp, 0, 1);
 8013086:	f207 4084 	addw	r0, r7, #1156	; 0x484
 801308a:	2301      	movs	r3, #1
 801308c:	9300      	str	r3, [sp, #0]
 801308e:	2300      	movs	r3, #0
 8013090:	4a32      	ldr	r2, [pc, #200]	; (801315c <LidarSetPos+0x370c>)
 8013092:	2101      	movs	r1, #1
 8013094:	f7f2 ff62 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8013098:	e07d      	b.n	8013196 <LidarSetPos+0x3746>
						{
							if(ps4.button == UP)
 801309a:	4b2f      	ldr	r3, [pc, #188]	; (8013158 <LidarSetPos+0x3708>)
 801309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801309e:	2b10      	cmp	r3, #16
 80130a0:	d115      	bne.n	80130ce <LidarSetPos+0x367e>
							{
								while(ps4.button == UP);
 80130a2:	bf00      	nop
 80130a4:	4b2c      	ldr	r3, [pc, #176]	; (8013158 <LidarSetPos+0x3708>)
 80130a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a8:	2b10      	cmp	r3, #16
 80130aa:	d0fb      	beq.n	80130a4 <LidarSetPos+0x3654>
								if(blue)
 80130ac:	4b2f      	ldr	r3, [pc, #188]	; (801316c <LidarSetPos+0x371c>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d006      	beq.n	80130c2 <LidarSetPos+0x3672>
								{
									vesc_speed = BlueOppoType2;
 80130b4:	4b24      	ldr	r3, [pc, #144]	; (8013148 <LidarSetPos+0x36f8>)
 80130b6:	4a33      	ldr	r2, [pc, #204]	; (8013184 <LidarSetPos+0x3734>)
 80130b8:	601a      	str	r2, [r3, #0]
									vesc_duty = BlueOppoType2Duty;
 80130ba:	4b25      	ldr	r3, [pc, #148]	; (8013150 <LidarSetPos+0x3700>)
 80130bc:	4a32      	ldr	r2, [pc, #200]	; (8013188 <LidarSetPos+0x3738>)
 80130be:	601a      	str	r2, [r3, #0]
 80130c0:	e005      	b.n	80130ce <LidarSetPos+0x367e>
								}
								else
								{
									vesc_speed = RedOppoType2;
 80130c2:	4b21      	ldr	r3, [pc, #132]	; (8013148 <LidarSetPos+0x36f8>)
 80130c4:	4a21      	ldr	r2, [pc, #132]	; (801314c <LidarSetPos+0x36fc>)
 80130c6:	601a      	str	r2, [r3, #0]
									vesc_duty = RedOppoType2Duty;
 80130c8:	4b21      	ldr	r3, [pc, #132]	; (8013150 <LidarSetPos+0x3700>)
 80130ca:	4a22      	ldr	r2, [pc, #136]	; (8013154 <LidarSetPos+0x3704>)
 80130cc:	601a      	str	r2, [r3, #0]
								}
							}
							if(ps4.button == SQUARE)
 80130ce:	4b22      	ldr	r3, [pc, #136]	; (8013158 <LidarSetPos+0x3708>)
 80130d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130d6:	d108      	bne.n	80130ea <LidarSetPos+0x369a>
							{
								while(ps4.button == SQUARE);
 80130d8:	bf00      	nop
 80130da:	4b1f      	ldr	r3, [pc, #124]	; (8013158 <LidarSetPos+0x3708>)
 80130dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130e2:	d0fa      	beq.n	80130da <LidarSetPos+0x368a>
								PP_stop(&pp);
 80130e4:	481d      	ldr	r0, [pc, #116]	; (801315c <LidarSetPos+0x370c>)
 80130e6:	f7f3 f8ab 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist >= lsr_center_3[0][1] - Offset - 0.05)
 80130ea:	4b1d      	ldr	r3, [pc, #116]	; (8013160 <LidarSetPos+0x3710>)
 80130ec:	69db      	ldr	r3, [r3, #28]
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7ed fa2a 	bl	8000548 <__aeabi_f2d>
 80130f4:	4604      	mov	r4, r0
 80130f6:	460d      	mov	r5, r1
 80130f8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	4618      	mov	r0, r3
 8013100:	f7ed fa22 	bl	8000548 <__aeabi_f2d>
 8013104:	f04f 0200 	mov.w	r2, #0
 8013108:	4b20      	ldr	r3, [pc, #128]	; (801318c <LidarSetPos+0x373c>)
 801310a:	f7ed f8bd 	bl	8000288 <__aeabi_dsub>
 801310e:	4602      	mov	r2, r0
 8013110:	460b      	mov	r3, r1
 8013112:	4610      	mov	r0, r2
 8013114:	4619      	mov	r1, r3
 8013116:	a30a      	add	r3, pc, #40	; (adr r3, 8013140 <LidarSetPos+0x36f0>)
 8013118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801311c:	f7ed f8b4 	bl	8000288 <__aeabi_dsub>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4620      	mov	r0, r4
 8013126:	4629      	mov	r1, r5
 8013128:	f7ed fcec 	bl	8000b04 <__aeabi_dcmpge>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d12e      	bne.n	8013190 <LidarSetPos+0x3740>
 8013132:	e030      	b.n	8013196 <LidarSetPos+0x3746>
 8013134:	f3af 8000 	nop.w
 8013138:	9999999a 	.word	0x9999999a
 801313c:	3fd99999 	.word	0x3fd99999
 8013140:	9999999a 	.word	0x9999999a
 8013144:	3fa99999 	.word	0x3fa99999
 8013148:	200065b8 	.word	0x200065b8
 801314c:	4154cccd 	.word	0x4154cccd
 8013150:	20007494 	.word	0x20007494
 8013154:	45039000 	.word	0x45039000
 8013158:	2000a240 	.word	0x2000a240
 801315c:	20006d44 	.word	0x20006d44
 8013160:	200095f8 	.word	0x200095f8
 8013164:	3fe80000 	.word	0x3fe80000
 8013168:	200073d0 	.word	0x200073d0
 801316c:	20006a44 	.word	0x20006a44
 8013170:	41026666 	.word	0x41026666
 8013174:	44bea000 	.word	0x44bea000
 8013178:	4104cccd 	.word	0x4104cccd
 801317c:	44c1c000 	.word	0x44c1c000
 8013180:	40020c00 	.word	0x40020c00
 8013184:	414f3333 	.word	0x414f3333
 8013188:	45020000 	.word	0x45020000
 801318c:	3fe00000 	.word	0x3fe00000
								PP_stop(&pp);
 8013190:	48b1      	ldr	r0, [pc, #708]	; (8013458 <LidarSetPos+0x3a08>)
 8013192:	f7f3 f855 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8013196:	4bb0      	ldr	r3, [pc, #704]	; (8013458 <LidarSetPos+0x3a08>)
 8013198:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801319c:	f003 0310 	and.w	r3, r3, #16
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f47f af79 	bne.w	801309a <LidarSetPos+0x364a>
						}
					}

					// Robot will slanted to right after path plan, need to fix the slanted right problem
					PP_start(robot_center, 1, &pp);
 80131a8:	f107 0308 	add.w	r3, r7, #8
 80131ac:	4aaa      	ldr	r2, [pc, #680]	; (8013458 <LidarSetPos+0x3a08>)
 80131ae:	2101      	movs	r1, #1
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f2 fd0d 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 80131b6:	f002 ff53 	bl	8016060 <HAL_GetTick>
 80131ba:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 80131be:	e026      	b.n	801320e <LidarSetPos+0x37be>
					{
						after = HAL_GetTick();
 80131c0:	f002 ff4e 	bl	8016060 <HAL_GetTick>
 80131c4:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z <= -89 && (after - before) >= 700)
 80131c8:	4ba3      	ldr	r3, [pc, #652]	; (8013458 <LidarSetPos+0x3a08>)
 80131ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80131ce:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 801345c <LidarSetPos+0x3a0c>
 80131d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131da:	d80a      	bhi.n	80131f2 <LidarSetPos+0x37a2>
 80131dc:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80131e0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80131e4:	1ad3      	subs	r3, r2, r3
 80131e6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80131ea:	d302      	bcc.n	80131f2 <LidarSetPos+0x37a2>
							PP_stop(&pp);
 80131ec:	489a      	ldr	r0, [pc, #616]	; (8013458 <LidarSetPos+0x3a08>)
 80131ee:	f7f3 f827 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 80131f2:	4b9b      	ldr	r3, [pc, #620]	; (8013460 <LidarSetPos+0x3a10>)
 80131f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131fa:	d108      	bne.n	801320e <LidarSetPos+0x37be>
						{
							while(ps4.button == SQUARE);
 80131fc:	bf00      	nop
 80131fe:	4b98      	ldr	r3, [pc, #608]	; (8013460 <LidarSetPos+0x3a10>)
 8013200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013206:	d0fa      	beq.n	80131fe <LidarSetPos+0x37ae>
							PP_stop(&pp);
 8013208:	4893      	ldr	r0, [pc, #588]	; (8013458 <LidarSetPos+0x3a08>)
 801320a:	f7f3 f819 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 801320e:	4b92      	ldr	r3, [pc, #584]	; (8013458 <LidarSetPos+0x3a08>)
 8013210:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013214:	f003 0301 	and.w	r3, r3, #1
 8013218:	b2db      	uxtb	r3, r3
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1d0      	bne.n	80131c0 <LidarSetPos+0x3770>
						}
					}
					stick_fence = 1;
 801321e:	4b91      	ldr	r3, [pc, #580]	; (8013464 <LidarSetPos+0x3a14>)
 8013220:	2201      	movs	r2, #1
 8013222:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8013224:	463b      	mov	r3, r7
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801322c:	2b00      	cmp	r3, #0
 801322e:	d005      	beq.n	801323c <LidarSetPos+0x37ec>
					{
						osDelay(300);
 8013230:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013234:	f009 fc4a 	bl	801cacc <osDelay>
						Shot();
 8013238:	f7fb fbd6 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 801323c:	463b      	mov	r3, r7
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013244:	2b00      	cmp	r3, #0
 8013246:	d110      	bne.n	801326a <LidarSetPos+0x381a>
						LidarAdjust(lidar);
 8013248:	463b      	mov	r3, r7
 801324a:	6818      	ldr	r0, [r3, #0]
 801324c:	f001 ffcc 	bl	80151e8 <LidarAdjust>
					break;
 8013250:	e00b      	b.n	801326a <LidarSetPos+0x381a>
				default:
					break;
 8013252:	bf00      	nop
 8013254:	f001 b873 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8013258:	bf00      	nop
 801325a:	f001 b870 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801325e:	bf00      	nop
 8013260:	f001 b86d 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 8013264:	bf00      	nop
 8013266:	f001 b86a 	b.w	801433e <LidarSetPos+0x48ee>
					break;
 801326a:	bf00      	nop
			}
			break;
 801326c:	f001 b867 	b.w	801433e <LidarSetPos+0x48ee>

		case CENTER_4:
			switch(lidar->pos) // Self Pose
 8013270:	463b      	mov	r3, r7
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8013278:	3b01      	subs	r3, #1
 801327a:	2b08      	cmp	r3, #8
 801327c:	f200 8504 	bhi.w	8013c88 <LidarSetPos+0x4238>
 8013280:	a201      	add	r2, pc, #4	; (adr r2, 8013288 <LidarSetPos+0x3838>)
 8013282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013286:	bf00      	nop
 8013288:	080132ad 	.word	0x080132ad
 801328c:	08013911 	.word	0x08013911
 8013290:	080132bb 	.word	0x080132bb
 8013294:	0801340b 	.word	0x0801340b
 8013298:	08013595 	.word	0x08013595
 801329c:	08013a69 	.word	0x08013a69
 80132a0:	08013c89 	.word	0x08013c89
 80132a4:	0801391d 	.word	0x0801391d
 80132a8:	080137f1 	.word	0x080137f1
			{
				case PICK_LEFT:
					lidar->pos = CENTER_4;
 80132ac:	463b      	mov	r3, r7
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2207      	movs	r2, #7
 80132b2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 80132b6:	f000 bcf0 	b.w	8013c9a <LidarSetPos+0x424a>

				case CENTER_1:
					stick_fence = 0;
 80132ba:	4b6a      	ldr	r3, [pc, #424]	; (8013464 <LidarSetPos+0x3a14>)
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 80132c0:	463b      	mov	r3, r7
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2200      	movs	r2, #0
 80132c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 80132ca:	4b67      	ldr	r3, [pc, #412]	; (8013468 <LidarSetPos+0x3a18>)
 80132cc:	4a67      	ldr	r2, [pc, #412]	; (801346c <LidarSetPos+0x3a1c>)
 80132ce:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80132d0:	4b67      	ldr	r3, [pc, #412]	; (8013470 <LidarSetPos+0x3a20>)
 80132d2:	4a68      	ldr	r2, [pc, #416]	; (8013474 <LidarSetPos+0x3a24>)
 80132d4:	601a      	str	r2, [r3, #0]

					lidar->pos = CENTER_4;
 80132d6:	463b      	mov	r3, r7
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	2207      	movs	r2, #7
 80132dc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_4, 1, &pp, 0, 1);
 80132e0:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 80132e4:	2301      	movs	r3, #1
 80132e6:	9300      	str	r3, [sp, #0]
 80132e8:	2300      	movs	r3, #0
 80132ea:	4a5b      	ldr	r2, [pc, #364]	; (8013458 <LidarSetPos+0x3a08>)
 80132ec:	2101      	movs	r1, #1
 80132ee:	f7f2 fe35 	bl	8005f5c <LSR_start>
					while(pp.lsr_start)
 80132f2:	e035      	b.n	8013360 <LidarSetPos+0x3910>
					{
						if(ps4.button == SQUARE)
 80132f4:	4b5a      	ldr	r3, [pc, #360]	; (8013460 <LidarSetPos+0x3a10>)
 80132f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80132fc:	d108      	bne.n	8013310 <LidarSetPos+0x38c0>
						{
							while(ps4.button == SQUARE);
 80132fe:	bf00      	nop
 8013300:	4b57      	ldr	r3, [pc, #348]	; (8013460 <LidarSetPos+0x3a10>)
 8013302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013308:	d0fa      	beq.n	8013300 <LidarSetPos+0x38b0>
							PP_stop(&pp);
 801330a:	4853      	ldr	r0, [pc, #332]	; (8013458 <LidarSetPos+0x3a08>)
 801330c:	f7f2 ff98 	bl	8006240 <PP_stop>
						}

						if(lsrR.dist <= lsr_center_4[0][1] + Offset_4 + 0.08)
 8013310:	4b59      	ldr	r3, [pc, #356]	; (8013478 <LidarSetPos+0x3a28>)
 8013312:	69db      	ldr	r3, [r3, #28]
 8013314:	4618      	mov	r0, r3
 8013316:	f7ed f917 	bl	8000548 <__aeabi_f2d>
 801331a:	4604      	mov	r4, r0
 801331c:	460d      	mov	r5, r1
 801331e:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4618      	mov	r0, r3
 8013326:	f7ed f90f 	bl	8000548 <__aeabi_f2d>
 801332a:	a347      	add	r3, pc, #284	; (adr r3, 8013448 <LidarSetPos+0x39f8>)
 801332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013330:	f7ec ffac 	bl	800028c <__adddf3>
 8013334:	4602      	mov	r2, r0
 8013336:	460b      	mov	r3, r1
 8013338:	4610      	mov	r0, r2
 801333a:	4619      	mov	r1, r3
 801333c:	a344      	add	r3, pc, #272	; (adr r3, 8013450 <LidarSetPos+0x3a00>)
 801333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013342:	f7ec ffa3 	bl	800028c <__adddf3>
 8013346:	4602      	mov	r2, r0
 8013348:	460b      	mov	r3, r1
 801334a:	4620      	mov	r0, r4
 801334c:	4629      	mov	r1, r5
 801334e:	f7ed fbcf 	bl	8000af0 <__aeabi_dcmple>
 8013352:	4603      	mov	r3, r0
 8013354:	2b00      	cmp	r3, #0
 8013356:	d100      	bne.n	801335a <LidarSetPos+0x390a>
 8013358:	e002      	b.n	8013360 <LidarSetPos+0x3910>
							PP_stop(&pp);
 801335a:	483f      	ldr	r0, [pc, #252]	; (8013458 <LidarSetPos+0x3a08>)
 801335c:	f7f2 ff70 	bl	8006240 <PP_stop>
					while(pp.lsr_start)
 8013360:	4b3d      	ldr	r3, [pc, #244]	; (8013458 <LidarSetPos+0x3a08>)
 8013362:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013366:	f003 0310 	and.w	r3, r3, #16
 801336a:	b2db      	uxtb	r3, r3
 801336c:	2b00      	cmp	r3, #0
 801336e:	d1c1      	bne.n	80132f4 <LidarSetPos+0x38a4>
					}


					PP_start(robot_center, 1, &pp);
 8013370:	f107 0308 	add.w	r3, r7, #8
 8013374:	4a38      	ldr	r2, [pc, #224]	; (8013458 <LidarSetPos+0x3a08>)
 8013376:	2101      	movs	r1, #1
 8013378:	4618      	mov	r0, r3
 801337a:	f7f2 fc29 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801337e:	f002 fe6f 	bl	8016060 <HAL_GetTick>
 8013382:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8013386:	e026      	b.n	80133d6 <LidarSetPos+0x3986>
					{
						after = HAL_GetTick();
 8013388:	f002 fe6a 	bl	8016060 <HAL_GetTick>
 801338c:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8013390:	4b31      	ldr	r3, [pc, #196]	; (8013458 <LidarSetPos+0x3a08>)
 8013392:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013396:	ed9f 7a39 	vldr	s14, [pc, #228]	; 801347c <LidarSetPos+0x3a2c>
 801339a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a2:	db0a      	blt.n	80133ba <LidarSetPos+0x396a>
 80133a4:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80133a8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80133ac:	1ad3      	subs	r3, r2, r3
 80133ae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80133b2:	d302      	bcc.n	80133ba <LidarSetPos+0x396a>
							PP_stop(&pp);
 80133b4:	4828      	ldr	r0, [pc, #160]	; (8013458 <LidarSetPos+0x3a08>)
 80133b6:	f7f2 ff43 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 80133ba:	4b29      	ldr	r3, [pc, #164]	; (8013460 <LidarSetPos+0x3a10>)
 80133bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133c2:	d108      	bne.n	80133d6 <LidarSetPos+0x3986>
						{
							while(ps4.button == SQUARE);
 80133c4:	bf00      	nop
 80133c6:	4b26      	ldr	r3, [pc, #152]	; (8013460 <LidarSetPos+0x3a10>)
 80133c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133ce:	d0fa      	beq.n	80133c6 <LidarSetPos+0x3976>
							PP_stop(&pp);
 80133d0:	4821      	ldr	r0, [pc, #132]	; (8013458 <LidarSetPos+0x3a08>)
 80133d2:	f7f2 ff35 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80133d6:	4b20      	ldr	r3, [pc, #128]	; (8013458 <LidarSetPos+0x3a08>)
 80133d8:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80133dc:	f003 0301 	and.w	r3, r3, #1
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1d0      	bne.n	8013388 <LidarSetPos+0x3938>
						}
					}

					stick_fence = 1;
 80133e6:	4b1f      	ldr	r3, [pc, #124]	; (8013464 <LidarSetPos+0x3a14>)
 80133e8:	2201      	movs	r2, #1
 80133ea:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80133ec:	463b      	mov	r3, r7
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f000 8449 	beq.w	8013c8c <LidarSetPos+0x423c>
					{
						osDelay(300);
 80133fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80133fe:	f009 fb65 	bl	801cacc <osDelay>
						Shot();
 8013402:	f7fb faf1 	bl	800e9e8 <Shot>
					}
					break;
 8013406:	f000 bc41 	b.w	8013c8c <LidarSetPos+0x423c>

				case CENTER_2:
					stick_fence = 0;
 801340a:	4b16      	ldr	r3, [pc, #88]	; (8013464 <LidarSetPos+0x3a14>)
 801340c:	2200      	movs	r2, #0
 801340e:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8013410:	463b      	mov	r3, r7
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	2200      	movs	r2, #0
 8013416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 801341a:	4b13      	ldr	r3, [pc, #76]	; (8013468 <LidarSetPos+0x3a18>)
 801341c:	4a13      	ldr	r2, [pc, #76]	; (801346c <LidarSetPos+0x3a1c>)
 801341e:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8013420:	4b13      	ldr	r3, [pc, #76]	; (8013470 <LidarSetPos+0x3a20>)
 8013422:	4a14      	ldr	r2, [pc, #80]	; (8013474 <LidarSetPos+0x3a24>)
 8013424:	601a      	str	r2, [r3, #0]

					lidar->pos = CENTER_4;
 8013426:	463b      	mov	r3, r7
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2207      	movs	r2, #7
 801342c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					LSR_start(lsr_center_4, 1, &pp, 0, 1);
 8013430:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 8013434:	2301      	movs	r3, #1
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	2300      	movs	r3, #0
 801343a:	4a07      	ldr	r2, [pc, #28]	; (8013458 <LidarSetPos+0x3a08>)
 801343c:	2101      	movs	r1, #1
 801343e:	f7f2 fd8d 	bl	8005f5c <LSR_start>
					while(pp.lsr_start)
 8013442:	e053      	b.n	80134ec <LidarSetPos+0x3a9c>
 8013444:	f3af 8000 	nop.w
 8013448:	f5c28f5c 	.word	0xf5c28f5c
 801344c:	3fe75c28 	.word	0x3fe75c28
 8013450:	47ae147b 	.word	0x47ae147b
 8013454:	3fb47ae1 	.word	0x3fb47ae1
 8013458:	20006d44 	.word	0x20006d44
 801345c:	c2b20000 	.word	0xc2b20000
 8013460:	2000a240 	.word	0x2000a240
 8013464:	200073d0 	.word	0x200073d0
 8013468:	20007494 	.word	0x20007494
 801346c:	445e8000 	.word	0x445e8000
 8013470:	200065b8 	.word	0x200065b8
 8013474:	406ccccd 	.word	0x406ccccd
 8013478:	200095f8 	.word	0x200095f8
 801347c:	c2b60000 	.word	0xc2b60000
					{
						if(ps4.button == SQUARE)
 8013480:	4bab      	ldr	r3, [pc, #684]	; (8013730 <LidarSetPos+0x3ce0>)
 8013482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013488:	d108      	bne.n	801349c <LidarSetPos+0x3a4c>
						{
							while(ps4.button == SQUARE);
 801348a:	bf00      	nop
 801348c:	4ba8      	ldr	r3, [pc, #672]	; (8013730 <LidarSetPos+0x3ce0>)
 801348e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013494:	d0fa      	beq.n	801348c <LidarSetPos+0x3a3c>
							PP_stop(&pp);
 8013496:	48a7      	ldr	r0, [pc, #668]	; (8013734 <LidarSetPos+0x3ce4>)
 8013498:	f7f2 fed2 	bl	8006240 <PP_stop>
						}

						if(lsrR.dist <= lsr_center_4[0][1] + Offset_3 + 0.1)
 801349c:	4ba6      	ldr	r3, [pc, #664]	; (8013738 <LidarSetPos+0x3ce8>)
 801349e:	69db      	ldr	r3, [r3, #28]
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7ed f851 	bl	8000548 <__aeabi_f2d>
 80134a6:	4604      	mov	r4, r0
 80134a8:	460d      	mov	r5, r1
 80134aa:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7ed f849 	bl	8000548 <__aeabi_f2d>
 80134b6:	a39a      	add	r3, pc, #616	; (adr r3, 8013720 <LidarSetPos+0x3cd0>)
 80134b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134bc:	f7ec fee6 	bl	800028c <__adddf3>
 80134c0:	4602      	mov	r2, r0
 80134c2:	460b      	mov	r3, r1
 80134c4:	4610      	mov	r0, r2
 80134c6:	4619      	mov	r1, r3
 80134c8:	a397      	add	r3, pc, #604	; (adr r3, 8013728 <LidarSetPos+0x3cd8>)
 80134ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ce:	f7ec fedd 	bl	800028c <__adddf3>
 80134d2:	4602      	mov	r2, r0
 80134d4:	460b      	mov	r3, r1
 80134d6:	4620      	mov	r0, r4
 80134d8:	4629      	mov	r1, r5
 80134da:	f7ed fb09 	bl	8000af0 <__aeabi_dcmple>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d100      	bne.n	80134e6 <LidarSetPos+0x3a96>
 80134e4:	e002      	b.n	80134ec <LidarSetPos+0x3a9c>
							PP_stop(&pp);
 80134e6:	4893      	ldr	r0, [pc, #588]	; (8013734 <LidarSetPos+0x3ce4>)
 80134e8:	f7f2 feaa 	bl	8006240 <PP_stop>
					while(pp.lsr_start)
 80134ec:	4b91      	ldr	r3, [pc, #580]	; (8013734 <LidarSetPos+0x3ce4>)
 80134ee:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80134f2:	f003 0310 	and.w	r3, r3, #16
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d1c1      	bne.n	8013480 <LidarSetPos+0x3a30>
					}


					PP_start(robot_center, 1, &pp);
 80134fc:	f107 0308 	add.w	r3, r7, #8
 8013500:	4a8c      	ldr	r2, [pc, #560]	; (8013734 <LidarSetPos+0x3ce4>)
 8013502:	2101      	movs	r1, #1
 8013504:	4618      	mov	r0, r3
 8013506:	f7f2 fb63 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 801350a:	f002 fda9 	bl	8016060 <HAL_GetTick>
 801350e:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8013512:	e026      	b.n	8013562 <LidarSetPos+0x3b12>
					{
						after = HAL_GetTick();
 8013514:	f002 fda4 	bl	8016060 <HAL_GetTick>
 8013518:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 801351c:	4b85      	ldr	r3, [pc, #532]	; (8013734 <LidarSetPos+0x3ce4>)
 801351e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013522:	ed9f 7a86 	vldr	s14, [pc, #536]	; 801373c <LidarSetPos+0x3cec>
 8013526:	eef4 7ac7 	vcmpe.f32	s15, s14
 801352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352e:	db0a      	blt.n	8013546 <LidarSetPos+0x3af6>
 8013530:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8013534:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 801353e:	d302      	bcc.n	8013546 <LidarSetPos+0x3af6>
							PP_stop(&pp);
 8013540:	487c      	ldr	r0, [pc, #496]	; (8013734 <LidarSetPos+0x3ce4>)
 8013542:	f7f2 fe7d 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8013546:	4b7a      	ldr	r3, [pc, #488]	; (8013730 <LidarSetPos+0x3ce0>)
 8013548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801354a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801354e:	d108      	bne.n	8013562 <LidarSetPos+0x3b12>
						{
							while(ps4.button == SQUARE);
 8013550:	bf00      	nop
 8013552:	4b77      	ldr	r3, [pc, #476]	; (8013730 <LidarSetPos+0x3ce0>)
 8013554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801355a:	d0fa      	beq.n	8013552 <LidarSetPos+0x3b02>
							PP_stop(&pp);
 801355c:	4875      	ldr	r0, [pc, #468]	; (8013734 <LidarSetPos+0x3ce4>)
 801355e:	f7f2 fe6f 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8013562:	4b74      	ldr	r3, [pc, #464]	; (8013734 <LidarSetPos+0x3ce4>)
 8013564:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d1d0      	bne.n	8013514 <LidarSetPos+0x3ac4>
						}
					}

					stick_fence = 1;
 8013572:	4b73      	ldr	r3, [pc, #460]	; (8013740 <LidarSetPos+0x3cf0>)
 8013574:	2201      	movs	r2, #1
 8013576:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8013578:	463b      	mov	r3, r7
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8013580:	2b00      	cmp	r3, #0
 8013582:	f000 8385 	beq.w	8013c90 <LidarSetPos+0x4240>
					{
						osDelay(300);
 8013586:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801358a:	f009 fa9f 	bl	801cacc <osDelay>
						Shot();
 801358e:	f7fb fa2b 	bl	800e9e8 <Shot>
					}

					break;
 8013592:	e37d      	b.n	8013c90 <LidarSetPos+0x4240>

				case CENTER:
					stick_fence = 0;
 8013594:	4b6a      	ldr	r3, [pc, #424]	; (8013740 <LidarSetPos+0x3cf0>)
 8013596:	2200      	movs	r2, #0
 8013598:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 801359a:	463b      	mov	r3, r7
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2200      	movs	r2, #0
 80135a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 80135a4:	4b67      	ldr	r3, [pc, #412]	; (8013744 <LidarSetPos+0x3cf4>)
 80135a6:	4a68      	ldr	r2, [pc, #416]	; (8013748 <LidarSetPos+0x3cf8>)
 80135a8:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80135aa:	4b68      	ldr	r3, [pc, #416]	; (801374c <LidarSetPos+0x3cfc>)
 80135ac:	4a68      	ldr	r2, [pc, #416]	; (8013750 <LidarSetPos+0x3d00>)
 80135ae:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 80135b0:	463b      	mov	r3, r7
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d158      	bne.n	801366e <LidarSetPos+0x3c1e>
					{
						ResetCoordinate();
 80135bc:	f7fa fec6 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_4;
 80135c0:	463b      	mov	r3, r7
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2207      	movs	r2, #7
 80135c6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_to_center_4, 1, &pp);
 80135ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135ce:	4a59      	ldr	r2, [pc, #356]	; (8013734 <LidarSetPos+0x3ce4>)
 80135d0:	2101      	movs	r1, #1
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7f2 fafc 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 80135d8:	e040      	b.n	801365c <LidarSetPos+0x3c0c>
						{
							if(In_LS_Shot_1 || In_LS_Shot_2)
 80135da:	2108      	movs	r1, #8
 80135dc:	485d      	ldr	r0, [pc, #372]	; (8013754 <LidarSetPos+0x3d04>)
 80135de:	f004 fbbb 	bl	8017d58 <HAL_GPIO_ReadPin>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d006      	beq.n	80135f6 <LidarSetPos+0x3ba6>
 80135e8:	2110      	movs	r1, #16
 80135ea:	485a      	ldr	r0, [pc, #360]	; (8013754 <LidarSetPos+0x3d04>)
 80135ec:	f004 fbb4 	bl	8017d58 <HAL_GPIO_ReadPin>
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d109      	bne.n	801360a <LidarSetPos+0x3bba>
							{
								pp.target_y[0] = pp.real_y;
 80135f6:	4b4f      	ldr	r3, [pc, #316]	; (8013734 <LidarSetPos+0x3ce4>)
 80135f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135fa:	4a4e      	ldr	r2, [pc, #312]	; (8013734 <LidarSetPos+0x3ce4>)
 80135fc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8013600:	4b4c      	ldr	r3, [pc, #304]	; (8013734 <LidarSetPos+0x3ce4>)
 8013602:	f04f 0200 	mov.w	r2, #0
 8013606:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_to_center_4[0][1])
 801360a:	4b4a      	ldr	r3, [pc, #296]	; (8013734 <LidarSetPos+0x3ce4>)
 801360c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8013610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013614:	edd3 7a01 	vldr	s15, [r3, #4]
 8013618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	db09      	blt.n	8013636 <LidarSetPos+0x3be6>
							{
								pp.target_y[0] = pp.real_y;
 8013622:	4b44      	ldr	r3, [pc, #272]	; (8013734 <LidarSetPos+0x3ce4>)
 8013624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013626:	4a43      	ldr	r2, [pc, #268]	; (8013734 <LidarSetPos+0x3ce4>)
 8013628:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 801362c:	4b41      	ldr	r3, [pc, #260]	; (8013734 <LidarSetPos+0x3ce4>)
 801362e:	f04f 0200 	mov.w	r2, #0
 8013632:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(ps4.button == SQUARE)
 8013636:	4b3e      	ldr	r3, [pc, #248]	; (8013730 <LidarSetPos+0x3ce0>)
 8013638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801363e:	d10d      	bne.n	801365c <LidarSetPos+0x3c0c>
							{
								while(ps4.button == SQUARE);
 8013640:	bf00      	nop
 8013642:	4b3b      	ldr	r3, [pc, #236]	; (8013730 <LidarSetPos+0x3ce0>)
 8013644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801364a:	d0fa      	beq.n	8013642 <LidarSetPos+0x3bf2>
								PP_stop(&pp);
 801364c:	4839      	ldr	r0, [pc, #228]	; (8013734 <LidarSetPos+0x3ce4>)
 801364e:	f7f2 fdf7 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8013652:	463b      	mov	r3, r7
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	2201      	movs	r2, #1
 8013658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
						while(pp.pp_start)
 801365c:	4b35      	ldr	r3, [pc, #212]	; (8013734 <LidarSetPos+0x3ce4>)
 801365e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013662:	f003 0301 	and.w	r3, r3, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	2b00      	cmp	r3, #0
 801366a:	d1b6      	bne.n	80135da <LidarSetPos+0x3b8a>
 801366c:	e04c      	b.n	8013708 <LidarSetPos+0x3cb8>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_4;
 801366e:	463b      	mov	r3, r7
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2207      	movs	r2, #7
 8013674:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_4, 1, &pp, 0, 1);
 8013678:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 801367c:	2301      	movs	r3, #1
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	2300      	movs	r3, #0
 8013682:	4a2c      	ldr	r2, [pc, #176]	; (8013734 <LidarSetPos+0x3ce4>)
 8013684:	2101      	movs	r1, #1
 8013686:	f7f2 fc69 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 801368a:	e035      	b.n	80136f8 <LidarSetPos+0x3ca8>
						{
							if(ps4.button == SQUARE)
 801368c:	4b28      	ldr	r3, [pc, #160]	; (8013730 <LidarSetPos+0x3ce0>)
 801368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013694:	d108      	bne.n	80136a8 <LidarSetPos+0x3c58>
							{
								while(ps4.button == SQUARE);
 8013696:	bf00      	nop
 8013698:	4b25      	ldr	r3, [pc, #148]	; (8013730 <LidarSetPos+0x3ce0>)
 801369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136a0:	d0fa      	beq.n	8013698 <LidarSetPos+0x3c48>
								PP_stop(&pp);
 80136a2:	4824      	ldr	r0, [pc, #144]	; (8013734 <LidarSetPos+0x3ce4>)
 80136a4:	f7f2 fdcc 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_4[0][1] + Offset_2 + 0.1)
 80136a8:	4b23      	ldr	r3, [pc, #140]	; (8013738 <LidarSetPos+0x3ce8>)
 80136aa:	69db      	ldr	r3, [r3, #28]
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7ec ff4b 	bl	8000548 <__aeabi_f2d>
 80136b2:	4604      	mov	r4, r0
 80136b4:	460d      	mov	r5, r1
 80136b6:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4618      	mov	r0, r3
 80136be:	f7ec ff43 	bl	8000548 <__aeabi_f2d>
 80136c2:	f04f 0200 	mov.w	r2, #0
 80136c6:	4b24      	ldr	r3, [pc, #144]	; (8013758 <LidarSetPos+0x3d08>)
 80136c8:	f7ec fde0 	bl	800028c <__adddf3>
 80136cc:	4602      	mov	r2, r0
 80136ce:	460b      	mov	r3, r1
 80136d0:	4610      	mov	r0, r2
 80136d2:	4619      	mov	r1, r3
 80136d4:	a314      	add	r3, pc, #80	; (adr r3, 8013728 <LidarSetPos+0x3cd8>)
 80136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136da:	f7ec fdd7 	bl	800028c <__adddf3>
 80136de:	4602      	mov	r2, r0
 80136e0:	460b      	mov	r3, r1
 80136e2:	4620      	mov	r0, r4
 80136e4:	4629      	mov	r1, r5
 80136e6:	f7ed fa03 	bl	8000af0 <__aeabi_dcmple>
 80136ea:	4603      	mov	r3, r0
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d100      	bne.n	80136f2 <LidarSetPos+0x3ca2>
 80136f0:	e002      	b.n	80136f8 <LidarSetPos+0x3ca8>
								PP_stop(&pp);
 80136f2:	4810      	ldr	r0, [pc, #64]	; (8013734 <LidarSetPos+0x3ce4>)
 80136f4:	f7f2 fda4 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 80136f8:	4b0e      	ldr	r3, [pc, #56]	; (8013734 <LidarSetPos+0x3ce4>)
 80136fa:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80136fe:	f003 0310 	and.w	r3, r3, #16
 8013702:	b2db      	uxtb	r3, r3
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1c1      	bne.n	801368c <LidarSetPos+0x3c3c>
						}
					}

					PP_start(robot_center, 1, &pp);
 8013708:	f107 0308 	add.w	r3, r7, #8
 801370c:	4a09      	ldr	r2, [pc, #36]	; (8013734 <LidarSetPos+0x3ce4>)
 801370e:	2101      	movs	r1, #1
 8013710:	4618      	mov	r0, r3
 8013712:	f7f2 fa5d 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8013716:	f002 fca3 	bl	8016060 <HAL_GetTick>
 801371a:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 801371e:	e044      	b.n	80137aa <LidarSetPos+0x3d5a>
 8013720:	9999999a 	.word	0x9999999a
 8013724:	3fe99999 	.word	0x3fe99999
 8013728:	9999999a 	.word	0x9999999a
 801372c:	3fb99999 	.word	0x3fb99999
 8013730:	2000a240 	.word	0x2000a240
 8013734:	20006d44 	.word	0x20006d44
 8013738:	200095f8 	.word	0x200095f8
 801373c:	c2b60000 	.word	0xc2b60000
 8013740:	200073d0 	.word	0x200073d0
 8013744:	20007494 	.word	0x20007494
 8013748:	445e8000 	.word	0x445e8000
 801374c:	200065b8 	.word	0x200065b8
 8013750:	406ccccd 	.word	0x406ccccd
 8013754:	40020c00 	.word	0x40020c00
 8013758:	3fe80000 	.word	0x3fe80000
					{
						after = HAL_GetTick();
 801375c:	f002 fc80 	bl	8016060 <HAL_GetTick>
 8013760:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8013764:	4bb4      	ldr	r3, [pc, #720]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013766:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801376a:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8013a3c <LidarSetPos+0x3fec>
 801376e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013776:	db0a      	blt.n	801378e <LidarSetPos+0x3d3e>
 8013778:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 801377c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8013786:	d302      	bcc.n	801378e <LidarSetPos+0x3d3e>
							PP_stop(&pp);
 8013788:	48ab      	ldr	r0, [pc, #684]	; (8013a38 <LidarSetPos+0x3fe8>)
 801378a:	f7f2 fd59 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 801378e:	4bac      	ldr	r3, [pc, #688]	; (8013a40 <LidarSetPos+0x3ff0>)
 8013790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013796:	d108      	bne.n	80137aa <LidarSetPos+0x3d5a>
						{
							while(ps4.button == SQUARE);
 8013798:	bf00      	nop
 801379a:	4ba9      	ldr	r3, [pc, #676]	; (8013a40 <LidarSetPos+0x3ff0>)
 801379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801379e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137a2:	d0fa      	beq.n	801379a <LidarSetPos+0x3d4a>
							PP_stop(&pp);
 80137a4:	48a4      	ldr	r0, [pc, #656]	; (8013a38 <LidarSetPos+0x3fe8>)
 80137a6:	f7f2 fd4b 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80137aa:	4ba3      	ldr	r3, [pc, #652]	; (8013a38 <LidarSetPos+0x3fe8>)
 80137ac:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80137b0:	f003 0301 	and.w	r3, r3, #1
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d1d0      	bne.n	801375c <LidarSetPos+0x3d0c>
						}
					}

					stick_fence = 1;
 80137ba:	4ba2      	ldr	r3, [pc, #648]	; (8013a44 <LidarSetPos+0x3ff4>)
 80137bc:	2201      	movs	r2, #1
 80137be:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 80137c0:	463b      	mov	r3, r7
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d005      	beq.n	80137d8 <LidarSetPos+0x3d88>
					{
						osDelay(300);
 80137cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80137d0:	f009 f97c 	bl	801cacc <osDelay>
						Shot();
 80137d4:	f7fb f908 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 80137d8:	463b      	mov	r3, r7
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	f040 8257 	bne.w	8013c94 <LidarSetPos+0x4244>
						LidarAdjust(lidar);
 80137e6:	463b      	mov	r3, r7
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f001 fcfd 	bl	80151e8 <LidarAdjust>
					break;
 80137ee:	e251      	b.n	8013c94 <LidarSetPos+0x4244>

				case PICK_RIGHT:
					stick_fence = 0;
 80137f0:	4b94      	ldr	r3, [pc, #592]	; (8013a44 <LidarSetPos+0x3ff4>)
 80137f2:	2200      	movs	r2, #0
 80137f4:	601a      	str	r2, [r3, #0]
					vesc_duty = type1Duty;
 80137f6:	4b94      	ldr	r3, [pc, #592]	; (8013a48 <LidarSetPos+0x3ff8>)
 80137f8:	4a94      	ldr	r2, [pc, #592]	; (8013a4c <LidarSetPos+0x3ffc>)
 80137fa:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 80137fc:	4b94      	ldr	r3, [pc, #592]	; (8013a50 <LidarSetPos+0x4000>)
 80137fe:	4a95      	ldr	r2, [pc, #596]	; (8013a54 <LidarSetPos+0x4004>)
 8013800:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 8013802:	f7fa fda3 	bl	800e34c <ResetCoordinate>
					lidar->pos = CENTER_4;
 8013806:	463b      	mov	r3, r7
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2207      	movs	r2, #7
 801380c:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd

					PP_start(pick_right_to_center_4_servo, 1, &pp);
 8013810:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013814:	4a88      	ldr	r2, [pc, #544]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013816:	2101      	movs	r1, #1
 8013818:	4618      	mov	r0, r3
 801381a:	f7f2 f9d9 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 801381e:	e00d      	b.n	801383c <LidarSetPos+0x3dec>
					{
						if(ps4.button == SQUARE)
 8013820:	4b87      	ldr	r3, [pc, #540]	; (8013a40 <LidarSetPos+0x3ff0>)
 8013822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013828:	d108      	bne.n	801383c <LidarSetPos+0x3dec>
						{
							while(ps4.button == SQUARE);
 801382a:	bf00      	nop
 801382c:	4b84      	ldr	r3, [pc, #528]	; (8013a40 <LidarSetPos+0x3ff0>)
 801382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013834:	d0fa      	beq.n	801382c <LidarSetPos+0x3ddc>
							PP_stop(&pp);
 8013836:	4880      	ldr	r0, [pc, #512]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013838:	f7f2 fd02 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 801383c:	4b7e      	ldr	r3, [pc, #504]	; (8013a38 <LidarSetPos+0x3fe8>)
 801383e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013842:	f003 0301 	and.w	r3, r3, #1
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d1e9      	bne.n	8013820 <LidarSetPos+0x3dd0>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}
					}
					LoadRing();
 801384c:	f7fa fd26 	bl	800e29c <LoadRing>
//					close_servo;

					PP_start(pick_right_to_center_4, 1, &pp);
 8013850:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8013854:	4a78      	ldr	r2, [pc, #480]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013856:	2101      	movs	r1, #1
 8013858:	4618      	mov	r0, r3
 801385a:	f7f2 f9b9 	bl	8005bd0 <PP_start>
//
					load_adjust = 1;
 801385e:	4b7e      	ldr	r3, [pc, #504]	; (8013a58 <LidarSetPos+0x4008>)
 8013860:	2201      	movs	r2, #1
 8013862:	601a      	str	r2, [r3, #0]
					AdjustRings();
 8013864:	f7fa fd60 	bl	800e328 <AdjustRings>
					while(pp.pp_start)
 8013868:	e038      	b.n	80138dc <LidarSetPos+0x3e8c>
					{
						if(ps4.button == SQUARE)
 801386a:	4b75      	ldr	r3, [pc, #468]	; (8013a40 <LidarSetPos+0x3ff0>)
 801386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801386e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013872:	d108      	bne.n	8013886 <LidarSetPos+0x3e36>
						{
							while(ps4.button == SQUARE);
 8013874:	bf00      	nop
 8013876:	4b72      	ldr	r3, [pc, #456]	; (8013a40 <LidarSetPos+0x3ff0>)
 8013878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801387e:	d0fa      	beq.n	8013876 <LidarSetPos+0x3e26>
							PP_stop(&pp);
 8013880:	486d      	ldr	r0, [pc, #436]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013882:	f7f2 fcdd 	bl	8006240 <PP_stop>
//							lidar->pos = PICK_RIGHT;
//							lidar->pos_counter = PICK_RIGHT;
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 8013886:	2108      	movs	r1, #8
 8013888:	4874      	ldr	r0, [pc, #464]	; (8013a5c <LidarSetPos+0x400c>)
 801388a:	f004 fa65 	bl	8017d58 <HAL_GPIO_ReadPin>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d006      	beq.n	80138a2 <LidarSetPos+0x3e52>
 8013894:	2110      	movs	r1, #16
 8013896:	4871      	ldr	r0, [pc, #452]	; (8013a5c <LidarSetPos+0x400c>)
 8013898:	f004 fa5e 	bl	8017d58 <HAL_GPIO_ReadPin>
 801389c:	4603      	mov	r3, r0
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d104      	bne.n	80138ac <LidarSetPos+0x3e5c>
							pp.error_y = 0;
 80138a2:	4b65      	ldr	r3, [pc, #404]	; (8013a38 <LidarSetPos+0x3fe8>)
 80138a4:	f04f 0200 	mov.w	r2, #0
 80138a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

						if(pp.real_x <= -1.9)
 80138ac:	4b62      	ldr	r3, [pc, #392]	; (8013a38 <LidarSetPos+0x3fe8>)
 80138ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7ec fe49 	bl	8000548 <__aeabi_f2d>
 80138b6:	a35c      	add	r3, pc, #368	; (adr r3, 8013a28 <LidarSetPos+0x3fd8>)
 80138b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138bc:	f7ed f918 	bl	8000af0 <__aeabi_dcmple>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d100      	bne.n	80138c8 <LidarSetPos+0x3e78>
 80138c6:	e009      	b.n	80138dc <LidarSetPos+0x3e8c>
						{
							pp.target_y[0] = pp.real_y;
 80138c8:	4b5b      	ldr	r3, [pc, #364]	; (8013a38 <LidarSetPos+0x3fe8>)
 80138ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138cc:	4a5a      	ldr	r2, [pc, #360]	; (8013a38 <LidarSetPos+0x3fe8>)
 80138ce:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
							pp.error_y = 0;
 80138d2:	4b59      	ldr	r3, [pc, #356]	; (8013a38 <LidarSetPos+0x3fe8>)
 80138d4:	f04f 0200 	mov.w	r2, #0
 80138d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 80138dc:	4b56      	ldr	r3, [pc, #344]	; (8013a38 <LidarSetPos+0x3fe8>)
 80138de:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80138e2:	f003 0301 	and.w	r3, r3, #1
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d1be      	bne.n	801386a <LidarSetPos+0x3e1a>
//						load_adjust_servo;
//						osDelay(100);
//						close_servo;
//						osDelay(100);
//					}
					adjust_servo;
 80138ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80138f0:	485b      	ldr	r0, [pc, #364]	; (8013a60 <LidarSetPos+0x4010>)
 80138f2:	f7f7 ff2d 	bl	800b750 <ServoSetPulse>
 80138f6:	f640 0166 	movw	r1, #2150	; 0x866
 80138fa:	485a      	ldr	r0, [pc, #360]	; (8013a64 <LidarSetPos+0x4014>)
 80138fc:	f7f7 ff28 	bl	800b750 <ServoSetPulse>
//						{
//							while(ps4.button == SQUARE);
//							PP_stop(&pp);
//						}
//					}
					stick_fence = 1;
 8013900:	4b50      	ldr	r3, [pc, #320]	; (8013a44 <LidarSetPos+0x3ff4>)
 8013902:	2201      	movs	r2, #1
 8013904:	601a      	str	r2, [r3, #0]
					// Only adjust after reached destination
//					if(lidar->pos == pose)
					LidarAdjust(lidar);
 8013906:	463b      	mov	r3, r7
 8013908:	6818      	ldr	r0, [r3, #0]
 801390a:	f001 fc6d 	bl	80151e8 <LidarAdjust>
					break;
 801390e:	e1c4      	b.n	8013c9a <LidarSetPos+0x424a>

				case UPPER_LEFT:
					lidar->pos = CENTER_4;
 8013910:	463b      	mov	r3, r7
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2207      	movs	r2, #7
 8013916:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					break;
 801391a:	e1be      	b.n	8013c9a <LidarSetPos+0x424a>

				case UPPER_RIGHT:
					lidar->pos = CENTER_4;
 801391c:	463b      	mov	r3, r7
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2207      	movs	r2, #7
 8013922:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 8013926:	2000      	movs	r0, #0
 8013928:	f7f1 fa4a 	bl	8004dc0 <setOrientationMODN>
					vesc_duty = type1Duty;
 801392c:	4b46      	ldr	r3, [pc, #280]	; (8013a48 <LidarSetPos+0x3ff8>)
 801392e:	4a47      	ldr	r2, [pc, #284]	; (8013a4c <LidarSetPos+0x3ffc>)
 8013930:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8013932:	4b47      	ldr	r3, [pc, #284]	; (8013a50 <LidarSetPos+0x4000>)
 8013934:	4a47      	ldr	r2, [pc, #284]	; (8013a54 <LidarSetPos+0x4004>)
 8013936:	601a      	str	r2, [r3, #0]
					ResetCoordinate();
 8013938:	f7fa fd08 	bl	800e34c <ResetCoordinate>
					PP_start(upper_right_to_center_4, 1, &pp);
 801393c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8013940:	4a3d      	ldr	r2, [pc, #244]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013942:	2101      	movs	r1, #1
 8013944:	4618      	mov	r0, r3
 8013946:	f7f2 f943 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 801394a:	e020      	b.n	801398e <LidarSetPos+0x3f3e>
					{
						if(ps4.button == SQUARE)
 801394c:	4b3c      	ldr	r3, [pc, #240]	; (8013a40 <LidarSetPos+0x3ff0>)
 801394e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013954:	d108      	bne.n	8013968 <LidarSetPos+0x3f18>
						{
							while(ps4.button == SQUARE);
 8013956:	bf00      	nop
 8013958:	4b39      	ldr	r3, [pc, #228]	; (8013a40 <LidarSetPos+0x3ff0>)
 801395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801395c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013960:	d0fa      	beq.n	8013958 <LidarSetPos+0x3f08>
							PP_stop(&pp);
 8013962:	4835      	ldr	r0, [pc, #212]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013964:	f7f2 fc6c 	bl	8006240 <PP_stop>
						}

						if(pp.real_y <= -3.1)
 8013968:	4b33      	ldr	r3, [pc, #204]	; (8013a38 <LidarSetPos+0x3fe8>)
 801396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801396c:	4618      	mov	r0, r3
 801396e:	f7ec fdeb 	bl	8000548 <__aeabi_f2d>
 8013972:	a32f      	add	r3, pc, #188	; (adr r3, 8013a30 <LidarSetPos+0x3fe0>)
 8013974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013978:	f7ed f8ba 	bl	8000af0 <__aeabi_dcmple>
 801397c:	4603      	mov	r3, r0
 801397e:	2b00      	cmp	r3, #0
 8013980:	d100      	bne.n	8013984 <LidarSetPos+0x3f34>
 8013982:	e004      	b.n	801398e <LidarSetPos+0x3f3e>
						{
							pp.target_vel[0] = 2.0;
 8013984:	4b2c      	ldr	r3, [pc, #176]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801398a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					while(pp.pp_start)
 801398e:	4b2a      	ldr	r3, [pc, #168]	; (8013a38 <LidarSetPos+0x3fe8>)
 8013990:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013994:	f003 0301 	and.w	r3, r3, #1
 8013998:	b2db      	uxtb	r3, r3
 801399a:	2b00      	cmp	r3, #0
 801399c:	d1d6      	bne.n	801394c <LidarSetPos+0x3efc>
						}
					}

					PP_start(upper_right_to_center_4_2, 1, &pp);
 801399e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80139a2:	4a25      	ldr	r2, [pc, #148]	; (8013a38 <LidarSetPos+0x3fe8>)
 80139a4:	2101      	movs	r1, #1
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7f2 f912 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 80139ac:	e020      	b.n	80139f0 <LidarSetPos+0x3fa0>
					{
						if(ps4.button == SQUARE)
 80139ae:	4b24      	ldr	r3, [pc, #144]	; (8013a40 <LidarSetPos+0x3ff0>)
 80139b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139b6:	d108      	bne.n	80139ca <LidarSetPos+0x3f7a>
						{
							while(ps4.button == SQUARE);
 80139b8:	bf00      	nop
 80139ba:	4b21      	ldr	r3, [pc, #132]	; (8013a40 <LidarSetPos+0x3ff0>)
 80139bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139c2:	d0fa      	beq.n	80139ba <LidarSetPos+0x3f6a>
							PP_stop(&pp);
 80139c4:	481c      	ldr	r0, [pc, #112]	; (8013a38 <LidarSetPos+0x3fe8>)
 80139c6:	f7f2 fc3b 	bl	8006240 <PP_stop>
						}

						if(In_LS_Shot_1 || In_LS_Shot_2)
 80139ca:	2108      	movs	r1, #8
 80139cc:	4823      	ldr	r0, [pc, #140]	; (8013a5c <LidarSetPos+0x400c>)
 80139ce:	f004 f9c3 	bl	8017d58 <HAL_GPIO_ReadPin>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d006      	beq.n	80139e6 <LidarSetPos+0x3f96>
 80139d8:	2110      	movs	r1, #16
 80139da:	4820      	ldr	r0, [pc, #128]	; (8013a5c <LidarSetPos+0x400c>)
 80139dc:	f004 f9bc 	bl	8017d58 <HAL_GPIO_ReadPin>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d104      	bne.n	80139f0 <LidarSetPos+0x3fa0>
							pp.error_y = 0;
 80139e6:	4b14      	ldr	r3, [pc, #80]	; (8013a38 <LidarSetPos+0x3fe8>)
 80139e8:	f04f 0200 	mov.w	r2, #0
 80139ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
					while(pp.pp_start)
 80139f0:	4b11      	ldr	r3, [pc, #68]	; (8013a38 <LidarSetPos+0x3fe8>)
 80139f2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80139f6:	f003 0301 	and.w	r3, r3, #1
 80139fa:	b2db      	uxtb	r3, r3
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d1d6      	bne.n	80139ae <LidarSetPos+0x3f5e>
//
//						if(In_LS_Shot_1 || In_LS_Shot_2)
//							PP_stop(&pp);
//					}

					LidarAdjust(lidar);
 8013a00:	463b      	mov	r3, r7
 8013a02:	6818      	ldr	r0, [r3, #0]
 8013a04:	f001 fbf0 	bl	80151e8 <LidarAdjust>

					AdjustRings();
 8013a08:	f7fa fc8e 	bl	800e328 <AdjustRings>
					adjust_servo;
 8013a0c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013a10:	4813      	ldr	r0, [pc, #76]	; (8013a60 <LidarSetPos+0x4010>)
 8013a12:	f7f7 fe9d 	bl	800b750 <ServoSetPulse>
 8013a16:	f640 0166 	movw	r1, #2150	; 0x866
 8013a1a:	4812      	ldr	r0, [pc, #72]	; (8013a64 <LidarSetPos+0x4014>)
 8013a1c:	f7f7 fe98 	bl	800b750 <ServoSetPulse>

					break;
 8013a20:	e13b      	b.n	8013c9a <LidarSetPos+0x424a>
 8013a22:	bf00      	nop
 8013a24:	f3af 8000 	nop.w
 8013a28:	66666666 	.word	0x66666666
 8013a2c:	bffe6666 	.word	0xbffe6666
 8013a30:	cccccccd 	.word	0xcccccccd
 8013a34:	c008cccc 	.word	0xc008cccc
 8013a38:	20006d44 	.word	0x20006d44
 8013a3c:	c2b60000 	.word	0xc2b60000
 8013a40:	2000a240 	.word	0x2000a240
 8013a44:	200073d0 	.word	0x200073d0
 8013a48:	20007494 	.word	0x20007494
 8013a4c:	445e8000 	.word	0x445e8000
 8013a50:	200065b8 	.word	0x200065b8
 8013a54:	406ccccd 	.word	0x406ccccd
 8013a58:	200095bc 	.word	0x200095bc
 8013a5c:	40020c00 	.word	0x40020c00
 8013a60:	200079d8 	.word	0x200079d8
 8013a64:	2000a5e8 	.word	0x2000a5e8

				case CENTER_3:
					stick_fence = 0;
 8013a68:	4bc1      	ldr	r3, [pc, #772]	; (8013d70 <LidarSetPos+0x4320>)
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	601a      	str	r2, [r3, #0]
					lidar->fail = 0;
 8013a6e:	463b      	mov	r3, r7
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2200      	movs	r2, #0
 8013a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
					vesc_duty = type1Duty;
 8013a78:	4bbe      	ldr	r3, [pc, #760]	; (8013d74 <LidarSetPos+0x4324>)
 8013a7a:	4abf      	ldr	r2, [pc, #764]	; (8013d78 <LidarSetPos+0x4328>)
 8013a7c:	601a      	str	r2, [r3, #0]
					vesc_speed = type1;
 8013a7e:	4bbf      	ldr	r3, [pc, #764]	; (8013d7c <LidarSetPos+0x432c>)
 8013a80:	4abf      	ldr	r2, [pc, #764]	; (8013d80 <LidarSetPos+0x4330>)
 8013a82:	601a      	str	r2, [r3, #0]

					if(!lidar->laser)
 8013a84:	463b      	mov	r3, r7
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d159      	bne.n	8013b44 <LidarSetPos+0x40f4>
					{
						ResetCoordinate();
 8013a90:	f7fa fc5c 	bl	800e34c <ResetCoordinate>
						lidar->pos = CENTER_4;
 8013a94:	463b      	mov	r3, r7
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2207      	movs	r2, #7
 8013a9a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						PP_start(center_3_to_center_4, 1, &pp);
 8013a9e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8013aa2:	4ab8      	ldr	r2, [pc, #736]	; (8013d84 <LidarSetPos+0x4334>)
 8013aa4:	2101      	movs	r1, #1
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7f2 f892 	bl	8005bd0 <PP_start>
						while(pp.pp_start)
 8013aac:	e041      	b.n	8013b32 <LidarSetPos+0x40e2>
						{
							if(ps4.button == SQUARE)
 8013aae:	4bb6      	ldr	r3, [pc, #728]	; (8013d88 <LidarSetPos+0x4338>)
 8013ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ab6:	d10d      	bne.n	8013ad4 <LidarSetPos+0x4084>
							{
								while(ps4.button == SQUARE);
 8013ab8:	bf00      	nop
 8013aba:	4bb3      	ldr	r3, [pc, #716]	; (8013d88 <LidarSetPos+0x4338>)
 8013abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ac2:	d0fa      	beq.n	8013aba <LidarSetPos+0x406a>
								PP_stop(&pp);
 8013ac4:	48af      	ldr	r0, [pc, #700]	; (8013d84 <LidarSetPos+0x4334>)
 8013ac6:	f7f2 fbbb 	bl	8006240 <PP_stop>
								lidar->fail = 1;
 8013aca:	463b      	mov	r3, r7
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	2201      	movs	r2, #1
 8013ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	//							lidar->pos = CENTER_3;
	//							lidar->pos_counter = CENTER_3;
							}

							if(In_LS_Shot_1 || In_LS_Shot_2)
 8013ad4:	2108      	movs	r1, #8
 8013ad6:	48ad      	ldr	r0, [pc, #692]	; (8013d8c <LidarSetPos+0x433c>)
 8013ad8:	f004 f93e 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013adc:	4603      	mov	r3, r0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d006      	beq.n	8013af0 <LidarSetPos+0x40a0>
 8013ae2:	2110      	movs	r1, #16
 8013ae4:	48a9      	ldr	r0, [pc, #676]	; (8013d8c <LidarSetPos+0x433c>)
 8013ae6:	f004 f937 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d109      	bne.n	8013b04 <LidarSetPos+0x40b4>
							{
								pp.target_y[0] = pp.real_y;
 8013af0:	4ba4      	ldr	r3, [pc, #656]	; (8013d84 <LidarSetPos+0x4334>)
 8013af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013af4:	4aa3      	ldr	r2, [pc, #652]	; (8013d84 <LidarSetPos+0x4334>)
 8013af6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8013afa:	4ba2      	ldr	r3, [pc, #648]	; (8013d84 <LidarSetPos+0x4334>)
 8013afc:	f04f 0200 	mov.w	r2, #0
 8013b00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
							}

							if(pp.real_x >= center_3_to_center_4[0][1])
 8013b04:	4b9f      	ldr	r3, [pc, #636]	; (8013d84 <LidarSetPos+0x4334>)
 8013b06:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8013b0a:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8013b0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1a:	da00      	bge.n	8013b1e <LidarSetPos+0x40ce>
 8013b1c:	e009      	b.n	8013b32 <LidarSetPos+0x40e2>
							{
								pp.target_y[0] = pp.real_y;
 8013b1e:	4b99      	ldr	r3, [pc, #612]	; (8013d84 <LidarSetPos+0x4334>)
 8013b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b22:	4a98      	ldr	r2, [pc, #608]	; (8013d84 <LidarSetPos+0x4334>)
 8013b24:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
								pp.error_y = 0;
 8013b28:	4b96      	ldr	r3, [pc, #600]	; (8013d84 <LidarSetPos+0x4334>)
 8013b2a:	f04f 0200 	mov.w	r2, #0
 8013b2e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
						while(pp.pp_start)
 8013b32:	4b94      	ldr	r3, [pc, #592]	; (8013d84 <LidarSetPos+0x4334>)
 8013b34:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013b38:	f003 0301 	and.w	r3, r3, #1
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1b5      	bne.n	8013aae <LidarSetPos+0x405e>
 8013b42:	e04c      	b.n	8013bde <LidarSetPos+0x418e>
							}
						}
					}
					else
					{
						lidar->pos = CENTER_4;
 8013b44:	463b      	mov	r3, r7
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2207      	movs	r2, #7
 8013b4a:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
						LSR_start(lsr_center_4, 1, &pp, 0, 1);
 8013b4e:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 8013b52:	2301      	movs	r3, #1
 8013b54:	9300      	str	r3, [sp, #0]
 8013b56:	2300      	movs	r3, #0
 8013b58:	4a8a      	ldr	r2, [pc, #552]	; (8013d84 <LidarSetPos+0x4334>)
 8013b5a:	2101      	movs	r1, #1
 8013b5c:	f7f2 f9fe 	bl	8005f5c <LSR_start>
						while(pp.lsr_start)
 8013b60:	e035      	b.n	8013bce <LidarSetPos+0x417e>
						{
							if(ps4.button == SQUARE)
 8013b62:	4b89      	ldr	r3, [pc, #548]	; (8013d88 <LidarSetPos+0x4338>)
 8013b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b6a:	d108      	bne.n	8013b7e <LidarSetPos+0x412e>
							{
								while(ps4.button == SQUARE);
 8013b6c:	bf00      	nop
 8013b6e:	4b86      	ldr	r3, [pc, #536]	; (8013d88 <LidarSetPos+0x4338>)
 8013b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b76:	d0fa      	beq.n	8013b6e <LidarSetPos+0x411e>
								PP_stop(&pp);
 8013b78:	4882      	ldr	r0, [pc, #520]	; (8013d84 <LidarSetPos+0x4334>)
 8013b7a:	f7f2 fb61 	bl	8006240 <PP_stop>
							}

							if(lsrR.dist <= lsr_center_4[0][1] + Offset + 0.05)
 8013b7e:	4b84      	ldr	r3, [pc, #528]	; (8013d90 <LidarSetPos+0x4340>)
 8013b80:	69db      	ldr	r3, [r3, #28]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ec fce0 	bl	8000548 <__aeabi_f2d>
 8013b88:	4604      	mov	r4, r0
 8013b8a:	460d      	mov	r5, r1
 8013b8c:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ec fcd8 	bl	8000548 <__aeabi_f2d>
 8013b98:	f04f 0200 	mov.w	r2, #0
 8013b9c:	4b7d      	ldr	r3, [pc, #500]	; (8013d94 <LidarSetPos+0x4344>)
 8013b9e:	f7ec fb75 	bl	800028c <__adddf3>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	4610      	mov	r0, r2
 8013ba8:	4619      	mov	r1, r3
 8013baa:	a36f      	add	r3, pc, #444	; (adr r3, 8013d68 <LidarSetPos+0x4318>)
 8013bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb0:	f7ec fb6c 	bl	800028c <__adddf3>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	4620      	mov	r0, r4
 8013bba:	4629      	mov	r1, r5
 8013bbc:	f7ec ff98 	bl	8000af0 <__aeabi_dcmple>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d100      	bne.n	8013bc8 <LidarSetPos+0x4178>
 8013bc6:	e002      	b.n	8013bce <LidarSetPos+0x417e>
								PP_stop(&pp);
 8013bc8:	486e      	ldr	r0, [pc, #440]	; (8013d84 <LidarSetPos+0x4334>)
 8013bca:	f7f2 fb39 	bl	8006240 <PP_stop>
						while(pp.lsr_start)
 8013bce:	4b6d      	ldr	r3, [pc, #436]	; (8013d84 <LidarSetPos+0x4334>)
 8013bd0:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013bd4:	f003 0310 	and.w	r3, r3, #16
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d1c1      	bne.n	8013b62 <LidarSetPos+0x4112>
						}
					}

					PP_start(robot_center, 1, &pp);
 8013bde:	f107 0308 	add.w	r3, r7, #8
 8013be2:	4a68      	ldr	r2, [pc, #416]	; (8013d84 <LidarSetPos+0x4334>)
 8013be4:	2101      	movs	r1, #1
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7f1 fff2 	bl	8005bd0 <PP_start>
					before = HAL_GetTick();
 8013bec:	f002 fa38 	bl	8016060 <HAL_GetTick>
 8013bf0:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
					while(pp.pp_start)
 8013bf4:	e026      	b.n	8013c44 <LidarSetPos+0x41f4>
					{
						after = HAL_GetTick();
 8013bf6:	f002 fa33 	bl	8016060 <HAL_GetTick>
 8013bfa:	f8c7 0510 	str.w	r0, [r7, #1296]	; 0x510

						if(pp.real_z >= -91 && (after - before) >= 700)
 8013bfe:	4b61      	ldr	r3, [pc, #388]	; (8013d84 <LidarSetPos+0x4334>)
 8013c00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013c04:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8013d98 <LidarSetPos+0x4348>
 8013c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c10:	db0a      	blt.n	8013c28 <LidarSetPos+0x41d8>
 8013c12:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 8013c16:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8013c1a:	1ad3      	subs	r3, r2, r3
 8013c1c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8013c20:	d302      	bcc.n	8013c28 <LidarSetPos+0x41d8>
							PP_stop(&pp);
 8013c22:	4858      	ldr	r0, [pc, #352]	; (8013d84 <LidarSetPos+0x4334>)
 8013c24:	f7f2 fb0c 	bl	8006240 <PP_stop>

						if(ps4.button == SQUARE)
 8013c28:	4b57      	ldr	r3, [pc, #348]	; (8013d88 <LidarSetPos+0x4338>)
 8013c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c30:	d108      	bne.n	8013c44 <LidarSetPos+0x41f4>
						{
							while(ps4.button == SQUARE);
 8013c32:	bf00      	nop
 8013c34:	4b54      	ldr	r3, [pc, #336]	; (8013d88 <LidarSetPos+0x4338>)
 8013c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c3c:	d0fa      	beq.n	8013c34 <LidarSetPos+0x41e4>
							PP_stop(&pp);
 8013c3e:	4851      	ldr	r0, [pc, #324]	; (8013d84 <LidarSetPos+0x4334>)
 8013c40:	f7f2 fafe 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8013c44:	4b4f      	ldr	r3, [pc, #316]	; (8013d84 <LidarSetPos+0x4334>)
 8013c46:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013c4a:	f003 0301 	and.w	r3, r3, #1
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d1d0      	bne.n	8013bf6 <LidarSetPos+0x41a6>
						}
					}

					stick_fence = 1;
 8013c54:	4b46      	ldr	r3, [pc, #280]	; (8013d70 <LidarSetPos+0x4320>)
 8013c56:	2201      	movs	r2, #1
 8013c58:	601a      	str	r2, [r3, #0]
					if(lidar->autoshot)
 8013c5a:	463b      	mov	r3, r7
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d005      	beq.n	8013c72 <LidarSetPos+0x4222>
					{
						osDelay(300);
 8013c66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013c6a:	f008 ff2f 	bl	801cacc <osDelay>
						Shot();
 8013c6e:	f7fa febb 	bl	800e9e8 <Shot>
					}

					// Only adjust after reached destination
					if(!lidar->fail)
 8013c72:	463b      	mov	r3, r7
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d10c      	bne.n	8013c98 <LidarSetPos+0x4248>
						LidarAdjust(lidar);
 8013c7e:	463b      	mov	r3, r7
 8013c80:	6818      	ldr	r0, [r3, #0]
 8013c82:	f001 fab1 	bl	80151e8 <LidarAdjust>
					break;
 8013c86:	e007      	b.n	8013c98 <LidarSetPos+0x4248>

				default:
					break;
 8013c88:	bf00      	nop
 8013c8a:	e358      	b.n	801433e <LidarSetPos+0x48ee>
					break;
 8013c8c:	bf00      	nop
 8013c8e:	e356      	b.n	801433e <LidarSetPos+0x48ee>
					break;
 8013c90:	bf00      	nop
 8013c92:	e354      	b.n	801433e <LidarSetPos+0x48ee>
					break;
 8013c94:	bf00      	nop
 8013c96:	e352      	b.n	801433e <LidarSetPos+0x48ee>
					break;
 8013c98:	bf00      	nop
			}
			break;
 8013c9a:	e350      	b.n	801433e <LidarSetPos+0x48ee>

		case UPPER_RIGHT:
			switch(lidar->pos) // Self Pose
			{
				default:
					break;
 8013c9c:	bf00      	nop
			}
			break;
 8013c9e:	e34e      	b.n	801433e <LidarSetPos+0x48ee>

		case PICK_RIGHT:
			switch(lidar->pos)
 8013ca0:	463b      	mov	r3, r7
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8013ca8:	3b03      	subs	r3, #3
 8013caa:	2b05      	cmp	r3, #5
 8013cac:	f200 8345 	bhi.w	801433a <LidarSetPos+0x48ea>
 8013cb0:	a201      	add	r2, pc, #4	; (adr r2, 8013cb8 <LidarSetPos+0x4268>)
 8013cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cb6:	bf00      	nop
 8013cb8:	08013dcd 	.word	0x08013dcd
 8013cbc:	08013ed5 	.word	0x08013ed5
 8013cc0:	08013fdd 	.word	0x08013fdd
 8013cc4:	0801412b 	.word	0x0801412b
 8013cc8:	08014233 	.word	0x08014233
 8013ccc:	08013cd1 	.word	0x08013cd1
			{
				case UPPER_RIGHT:
					lidar->pos = PICK_RIGHT;
 8013cd0:	463b      	mov	r3, r7
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2209      	movs	r2, #9
 8013cd6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013cda:	f7fa fb37 	bl	800e34c <ResetCoordinate>
					setOrientationMODN(OPERATOR_TURNED_0_DEGREE);
 8013cde:	2000      	movs	r0, #0
 8013ce0:	f7f1 f86e 	bl	8004dc0 <setOrientationMODN>
					loaded = 0;
 8013ce4:	4b2d      	ldr	r3, [pc, #180]	; (8013d9c <LidarSetPos+0x434c>)
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013cea:	4b22      	ldr	r3, [pc, #136]	; (8013d74 <LidarSetPos+0x4324>)
 8013cec:	f04f 0200 	mov.w	r2, #0
 8013cf0:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013cf2:	4b22      	ldr	r3, [pc, #136]	; (8013d7c <LidarSetPos+0x432c>)
 8013cf4:	f04f 0200 	mov.w	r2, #0
 8013cf8:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013cfe:	f7f9 fe25 	bl	800d94c <setPick>
					open_servo;
 8013d02:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013d06:	4826      	ldr	r0, [pc, #152]	; (8013da0 <LidarSetPos+0x4350>)
 8013d08:	f7f7 fd22 	bl	800b750 <ServoSetPulse>
 8013d0c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013d10:	4824      	ldr	r0, [pc, #144]	; (8013da4 <LidarSetPos+0x4354>)
 8013d12:	f7f7 fd1d 	bl	800b750 <ServoSetPulse>
					cylinder_retract;
 8013d16:	4a24      	ldr	r2, [pc, #144]	; (8013da8 <LidarSetPos+0x4358>)
 8013d18:	7f13      	ldrb	r3, [r2, #28]
 8013d1a:	f36f 1386 	bfc	r3, #6, #1
 8013d1e:	7713      	strb	r3, [r2, #28]
					PP_start(upper_right_to_pick_right, 1, &pp);
 8013d20:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8013d24:	4a17      	ldr	r2, [pc, #92]	; (8013d84 <LidarSetPos+0x4334>)
 8013d26:	2101      	movs	r1, #1
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f7f1 ff51 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8013d2e:	e041      	b.n	8013db4 <LidarSetPos+0x4364>
					{
						if(ps4.button == SQUARE)
 8013d30:	4b15      	ldr	r3, [pc, #84]	; (8013d88 <LidarSetPos+0x4338>)
 8013d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d38:	d108      	bne.n	8013d4c <LidarSetPos+0x42fc>
						{
							while(ps4.button == SQUARE);
 8013d3a:	bf00      	nop
 8013d3c:	4b12      	ldr	r3, [pc, #72]	; (8013d88 <LidarSetPos+0x4338>)
 8013d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d44:	d0fa      	beq.n	8013d3c <LidarSetPos+0x42ec>
							PP_stop(&pp);
 8013d46:	480f      	ldr	r0, [pc, #60]	; (8013d84 <LidarSetPos+0x4334>)
 8013d48:	f7f2 fa7a 	bl	8006240 <PP_stop>
						}

						if(pp.real_y <= -2.5)
 8013d4c:	4b0d      	ldr	r3, [pc, #52]	; (8013d84 <LidarSetPos+0x4334>)
 8013d4e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8013d52:	eeb8 7a04 	vmov.f32	s14, #132	; 0xc0200000 -2.5
 8013d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d5e:	d925      	bls.n	8013dac <LidarSetPos+0x435c>
 8013d60:	e028      	b.n	8013db4 <LidarSetPos+0x4364>
 8013d62:	bf00      	nop
 8013d64:	f3af 8000 	nop.w
 8013d68:	9999999a 	.word	0x9999999a
 8013d6c:	3fa99999 	.word	0x3fa99999
 8013d70:	200073d0 	.word	0x200073d0
 8013d74:	20007494 	.word	0x20007494
 8013d78:	445e8000 	.word	0x445e8000
 8013d7c:	200065b8 	.word	0x200065b8
 8013d80:	406ccccd 	.word	0x406ccccd
 8013d84:	20006d44 	.word	0x20006d44
 8013d88:	2000a240 	.word	0x2000a240
 8013d8c:	40020c00 	.word	0x40020c00
 8013d90:	200095f8 	.word	0x200095f8
 8013d94:	3fe00000 	.word	0x3fe00000
 8013d98:	c2b60000 	.word	0xc2b60000
 8013d9c:	200095a8 	.word	0x200095a8
 8013da0:	200079d8 	.word	0x200079d8
 8013da4:	2000a5e8 	.word	0x2000a5e8
 8013da8:	200097d4 	.word	0x200097d4
							pp.target_vel[0] = 1.2;
 8013dac:	4ba6      	ldr	r3, [pc, #664]	; (8014048 <LidarSetPos+0x45f8>)
 8013dae:	4aa7      	ldr	r2, [pc, #668]	; (801404c <LidarSetPos+0x45fc>)
 8013db0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					while(pp.pp_start)
 8013db4:	4ba4      	ldr	r3, [pc, #656]	; (8014048 <LidarSetPos+0x45f8>)
 8013db6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013dba:	f003 0301 	and.w	r3, r3, #1
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d1b5      	bne.n	8013d30 <LidarSetPos+0x42e0>
					}
					pick_right = 1;
 8013dc4:	4ba2      	ldr	r3, [pc, #648]	; (8014050 <LidarSetPos+0x4600>)
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	601a      	str	r2, [r3, #0]
					break;
 8013dca:	e2b7      	b.n	801433c <LidarSetPos+0x48ec>

				case CENTER_1:
					lidar->pos = PICK_RIGHT;
 8013dcc:	463b      	mov	r3, r7
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2209      	movs	r2, #9
 8013dd2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013dd6:	f7fa fab9 	bl	800e34c <ResetCoordinate>
					loaded = 0;
 8013dda:	4b9e      	ldr	r3, [pc, #632]	; (8014054 <LidarSetPos+0x4604>)
 8013ddc:	2200      	movs	r2, #0
 8013dde:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013de0:	4b9d      	ldr	r3, [pc, #628]	; (8014058 <LidarSetPos+0x4608>)
 8013de2:	f04f 0200 	mov.w	r2, #0
 8013de6:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013de8:	4b9c      	ldr	r3, [pc, #624]	; (801405c <LidarSetPos+0x460c>)
 8013dea:	f04f 0200 	mov.w	r2, #0
 8013dee:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013df4:	f7f9 fdaa 	bl	800d94c <setPick>
					open_servo;
 8013df8:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013dfc:	4898      	ldr	r0, [pc, #608]	; (8014060 <LidarSetPos+0x4610>)
 8013dfe:	f7f7 fca7 	bl	800b750 <ServoSetPulse>
 8013e02:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013e06:	4897      	ldr	r0, [pc, #604]	; (8014064 <LidarSetPos+0x4614>)
 8013e08:	f7f7 fca2 	bl	800b750 <ServoSetPulse>
					cylinder_retract;
 8013e0c:	4a96      	ldr	r2, [pc, #600]	; (8014068 <LidarSetPos+0x4618>)
 8013e0e:	7f13      	ldrb	r3, [r2, #28]
 8013e10:	f36f 1386 	bfc	r3, #6, #1
 8013e14:	7713      	strb	r3, [r2, #28]
					PP_start(center_1_to_pick_right, 1, &pp);
 8013e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e1a:	4a8b      	ldr	r2, [pc, #556]	; (8014048 <LidarSetPos+0x45f8>)
 8013e1c:	2101      	movs	r1, #1
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7f1 fed6 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8013e24:	e04a      	b.n	8013ebc <LidarSetPos+0x446c>
					{
						if(ps4.button == SQUARE)
 8013e26:	4b91      	ldr	r3, [pc, #580]	; (801406c <LidarSetPos+0x461c>)
 8013e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e2e:	d108      	bne.n	8013e42 <LidarSetPos+0x43f2>
						{
							while(ps4.button == SQUARE);
 8013e30:	bf00      	nop
 8013e32:	4b8e      	ldr	r3, [pc, #568]	; (801406c <LidarSetPos+0x461c>)
 8013e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013e3a:	d0fa      	beq.n	8013e32 <LidarSetPos+0x43e2>
							PP_stop(&pp);
 8013e3c:	4882      	ldr	r0, [pc, #520]	; (8014048 <LidarSetPos+0x45f8>)
 8013e3e:	f7f2 f9ff 	bl	8006240 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 8013e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013e46:	488a      	ldr	r0, [pc, #552]	; (8014070 <LidarSetPos+0x4620>)
 8013e48:	f003 ff86 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d007      	beq.n	8013e62 <LidarSetPos+0x4412>
 8013e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013e56:	4886      	ldr	r0, [pc, #536]	; (8014070 <LidarSetPos+0x4620>)
 8013e58:	f003 ff7e 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d10c      	bne.n	8013e7c <LidarSetPos+0x442c>
 8013e62:	4b84      	ldr	r3, [pc, #528]	; (8014074 <LidarSetPos+0x4624>)
 8013e64:	edd3 7a07 	vldr	s15, [r3, #28]
 8013e68:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e74:	d802      	bhi.n	8013e7c <LidarSetPos+0x442c>
							PP_stop(&pp);
 8013e76:	4874      	ldr	r0, [pc, #464]	; (8014048 <LidarSetPos+0x45f8>)
 8013e78:	f7f2 f9e2 	bl	8006240 <PP_stop>

						if(lsrR.dist <= 2.7)
 8013e7c:	4b7d      	ldr	r3, [pc, #500]	; (8014074 <LidarSetPos+0x4624>)
 8013e7e:	69db      	ldr	r3, [r3, #28]
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7ec fb61 	bl	8000548 <__aeabi_f2d>
 8013e86:	a36c      	add	r3, pc, #432	; (adr r3, 8014038 <LidarSetPos+0x45e8>)
 8013e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8c:	f7ec fe30 	bl	8000af0 <__aeabi_dcmple>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d004      	beq.n	8013ea0 <LidarSetPos+0x4450>
							pp.target_vel[0] = 0.5;
 8013e96:	4b6c      	ldr	r3, [pc, #432]	; (8014048 <LidarSetPos+0x45f8>)
 8013e98:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013e9c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013ea0:	4b72      	ldr	r3, [pc, #456]	; (801406c <LidarSetPos+0x461c>)
 8013ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ea4:	2b10      	cmp	r3, #16
 8013ea6:	d109      	bne.n	8013ebc <LidarSetPos+0x446c>
						{
							while(ps4.button == UP);
 8013ea8:	bf00      	nop
 8013eaa:	4b70      	ldr	r3, [pc, #448]	; (801406c <LidarSetPos+0x461c>)
 8013eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eae:	2b10      	cmp	r3, #16
 8013eb0:	d0fb      	beq.n	8013eaa <LidarSetPos+0x445a>
							go_type_3++;
 8013eb2:	4b71      	ldr	r3, [pc, #452]	; (8014078 <LidarSetPos+0x4628>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	4a6f      	ldr	r2, [pc, #444]	; (8014078 <LidarSetPos+0x4628>)
 8013eba:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013ebc:	4b62      	ldr	r3, [pc, #392]	; (8014048 <LidarSetPos+0x45f8>)
 8013ebe:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013ec2:	f003 0301 	and.w	r3, r3, #1
 8013ec6:	b2db      	uxtb	r3, r3
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1ac      	bne.n	8013e26 <LidarSetPos+0x43d6>
						}
					}
					pick_right = 1;
 8013ecc:	4b60      	ldr	r3, [pc, #384]	; (8014050 <LidarSetPos+0x4600>)
 8013ece:	2201      	movs	r2, #1
 8013ed0:	601a      	str	r2, [r3, #0]
					break;
 8013ed2:	e233      	b.n	801433c <LidarSetPos+0x48ec>

				case CENTER_2:
					lidar->pos = PICK_RIGHT;
 8013ed4:	463b      	mov	r3, r7
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	2209      	movs	r2, #9
 8013eda:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013ede:	f7fa fa35 	bl	800e34c <ResetCoordinate>
					loaded = 0;
 8013ee2:	4b5c      	ldr	r3, [pc, #368]	; (8014054 <LidarSetPos+0x4604>)
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013ee8:	4b5b      	ldr	r3, [pc, #364]	; (8014058 <LidarSetPos+0x4608>)
 8013eea:	f04f 0200 	mov.w	r2, #0
 8013eee:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013ef0:	4b5a      	ldr	r3, [pc, #360]	; (801405c <LidarSetPos+0x460c>)
 8013ef2:	f04f 0200 	mov.w	r2, #0
 8013ef6:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8013ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013efc:	f7f9 fd26 	bl	800d94c <setPick>
					open_servo;
 8013f00:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8013f04:	4856      	ldr	r0, [pc, #344]	; (8014060 <LidarSetPos+0x4610>)
 8013f06:	f7f7 fc23 	bl	800b750 <ServoSetPulse>
 8013f0a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8013f0e:	4855      	ldr	r0, [pc, #340]	; (8014064 <LidarSetPos+0x4614>)
 8013f10:	f7f7 fc1e 	bl	800b750 <ServoSetPulse>
					cylinder_retract;
 8013f14:	4a54      	ldr	r2, [pc, #336]	; (8014068 <LidarSetPos+0x4618>)
 8013f16:	7f13      	ldrb	r3, [r2, #28]
 8013f18:	f36f 1386 	bfc	r3, #6, #1
 8013f1c:	7713      	strb	r3, [r2, #28]
					PP_start(center_2_to_pick_right, 1, &pp);
 8013f1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f22:	4a49      	ldr	r2, [pc, #292]	; (8014048 <LidarSetPos+0x45f8>)
 8013f24:	2101      	movs	r1, #1
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7f1 fe52 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8013f2c:	e04a      	b.n	8013fc4 <LidarSetPos+0x4574>
					{
						if(ps4.button == SQUARE)
 8013f2e:	4b4f      	ldr	r3, [pc, #316]	; (801406c <LidarSetPos+0x461c>)
 8013f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f36:	d108      	bne.n	8013f4a <LidarSetPos+0x44fa>
						{
							while(ps4.button == SQUARE);
 8013f38:	bf00      	nop
 8013f3a:	4b4c      	ldr	r3, [pc, #304]	; (801406c <LidarSetPos+0x461c>)
 8013f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f42:	d0fa      	beq.n	8013f3a <LidarSetPos+0x44ea>
							PP_stop(&pp);
 8013f44:	4840      	ldr	r0, [pc, #256]	; (8014048 <LidarSetPos+0x45f8>)
 8013f46:	f7f2 f97b 	bl	8006240 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 8013f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013f4e:	4848      	ldr	r0, [pc, #288]	; (8014070 <LidarSetPos+0x4620>)
 8013f50:	f003 ff02 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d007      	beq.n	8013f6a <LidarSetPos+0x451a>
 8013f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013f5e:	4844      	ldr	r0, [pc, #272]	; (8014070 <LidarSetPos+0x4620>)
 8013f60:	f003 fefa 	bl	8017d58 <HAL_GPIO_ReadPin>
 8013f64:	4603      	mov	r3, r0
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d10c      	bne.n	8013f84 <LidarSetPos+0x4534>
 8013f6a:	4b42      	ldr	r3, [pc, #264]	; (8014074 <LidarSetPos+0x4624>)
 8013f6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8013f70:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f7c:	d802      	bhi.n	8013f84 <LidarSetPos+0x4534>
							PP_stop(&pp);
 8013f7e:	4832      	ldr	r0, [pc, #200]	; (8014048 <LidarSetPos+0x45f8>)
 8013f80:	f7f2 f95e 	bl	8006240 <PP_stop>

						if(lsrR.dist <= 2.6)
 8013f84:	4b3b      	ldr	r3, [pc, #236]	; (8014074 <LidarSetPos+0x4624>)
 8013f86:	69db      	ldr	r3, [r3, #28]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7ec fadd 	bl	8000548 <__aeabi_f2d>
 8013f8e:	a32c      	add	r3, pc, #176	; (adr r3, 8014040 <LidarSetPos+0x45f0>)
 8013f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f94:	f7ec fdac 	bl	8000af0 <__aeabi_dcmple>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d004      	beq.n	8013fa8 <LidarSetPos+0x4558>
							pp.target_vel[0] = 0.5;
 8013f9e:	4b2a      	ldr	r3, [pc, #168]	; (8014048 <LidarSetPos+0x45f8>)
 8013fa0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8013fa4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8013fa8:	4b30      	ldr	r3, [pc, #192]	; (801406c <LidarSetPos+0x461c>)
 8013faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fac:	2b10      	cmp	r3, #16
 8013fae:	d109      	bne.n	8013fc4 <LidarSetPos+0x4574>
						{
							while(ps4.button == UP);
 8013fb0:	bf00      	nop
 8013fb2:	4b2e      	ldr	r3, [pc, #184]	; (801406c <LidarSetPos+0x461c>)
 8013fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb6:	2b10      	cmp	r3, #16
 8013fb8:	d0fb      	beq.n	8013fb2 <LidarSetPos+0x4562>
							go_type_3++;
 8013fba:	4b2f      	ldr	r3, [pc, #188]	; (8014078 <LidarSetPos+0x4628>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	4a2d      	ldr	r2, [pc, #180]	; (8014078 <LidarSetPos+0x4628>)
 8013fc2:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8013fc4:	4b20      	ldr	r3, [pc, #128]	; (8014048 <LidarSetPos+0x45f8>)
 8013fc6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8013fca:	f003 0301 	and.w	r3, r3, #1
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d1ac      	bne.n	8013f2e <LidarSetPos+0x44de>
						}
					}
					pick_right = 1;
 8013fd4:	4b1e      	ldr	r3, [pc, #120]	; (8014050 <LidarSetPos+0x4600>)
 8013fd6:	2201      	movs	r2, #1
 8013fd8:	601a      	str	r2, [r3, #0]
					break;
 8013fda:	e1af      	b.n	801433c <LidarSetPos+0x48ec>

				case CENTER:
					lidar->pos = PICK_RIGHT;
 8013fdc:	463b      	mov	r3, r7
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	2209      	movs	r2, #9
 8013fe2:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8013fe6:	f7fa f9b1 	bl	800e34c <ResetCoordinate>
					loaded = 0;
 8013fea:	4b1a      	ldr	r3, [pc, #104]	; (8014054 <LidarSetPos+0x4604>)
 8013fec:	2200      	movs	r2, #0
 8013fee:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8013ff0:	4b19      	ldr	r3, [pc, #100]	; (8014058 <LidarSetPos+0x4608>)
 8013ff2:	f04f 0200 	mov.w	r2, #0
 8013ff6:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8013ff8:	4b18      	ldr	r3, [pc, #96]	; (801405c <LidarSetPos+0x460c>)
 8013ffa:	f04f 0200 	mov.w	r2, #0
 8013ffe:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8014000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014004:	f7f9 fca2 	bl	800d94c <setPick>
					open_servo;
 8014008:	f640 01ac 	movw	r1, #2220	; 0x8ac
 801400c:	4814      	ldr	r0, [pc, #80]	; (8014060 <LidarSetPos+0x4610>)
 801400e:	f7f7 fb9f 	bl	800b750 <ServoSetPulse>
 8014012:	f44f 7148 	mov.w	r1, #800	; 0x320
 8014016:	4813      	ldr	r0, [pc, #76]	; (8014064 <LidarSetPos+0x4614>)
 8014018:	f7f7 fb9a 	bl	800b750 <ServoSetPulse>
					cylinder_retract;
 801401c:	4a12      	ldr	r2, [pc, #72]	; (8014068 <LidarSetPos+0x4618>)
 801401e:	7f13      	ldrb	r3, [r2, #28]
 8014020:	f36f 1386 	bfc	r3, #6, #1
 8014024:	7713      	strb	r3, [r2, #28]
					PP_start(center_to_pick_right, 1, &pp);
 8014026:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801402a:	4a07      	ldr	r2, [pc, #28]	; (8014048 <LidarSetPos+0x45f8>)
 801402c:	2101      	movs	r1, #1
 801402e:	4618      	mov	r0, r3
 8014030:	f7f1 fdce 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014034:	e06d      	b.n	8014112 <LidarSetPos+0x46c2>
 8014036:	bf00      	nop
 8014038:	9999999a 	.word	0x9999999a
 801403c:	40059999 	.word	0x40059999
 8014040:	cccccccd 	.word	0xcccccccd
 8014044:	4004cccc 	.word	0x4004cccc
 8014048:	20006d44 	.word	0x20006d44
 801404c:	3f99999a 	.word	0x3f99999a
 8014050:	2000a89c 	.word	0x2000a89c
 8014054:	200095a8 	.word	0x200095a8
 8014058:	20007494 	.word	0x20007494
 801405c:	200065b8 	.word	0x200065b8
 8014060:	200079d8 	.word	0x200079d8
 8014064:	2000a5e8 	.word	0x2000a5e8
 8014068:	200097d4 	.word	0x200097d4
 801406c:	2000a240 	.word	0x2000a240
 8014070:	40020c00 	.word	0x40020c00
 8014074:	200095f8 	.word	0x200095f8
 8014078:	20006d40 	.word	0x20006d40
					{
						if(ps4.button == SQUARE)
 801407c:	4bb8      	ldr	r3, [pc, #736]	; (8014360 <LidarSetPos+0x4910>)
 801407e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014084:	d108      	bne.n	8014098 <LidarSetPos+0x4648>
						{
							while(ps4.button == SQUARE);
 8014086:	bf00      	nop
 8014088:	4bb5      	ldr	r3, [pc, #724]	; (8014360 <LidarSetPos+0x4910>)
 801408a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801408c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014090:	d0fa      	beq.n	8014088 <LidarSetPos+0x4638>
							PP_stop(&pp);
 8014092:	48b4      	ldr	r0, [pc, #720]	; (8014364 <LidarSetPos+0x4914>)
 8014094:	f7f2 f8d4 	bl	8006240 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 8014098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801409c:	48b2      	ldr	r0, [pc, #712]	; (8014368 <LidarSetPos+0x4918>)
 801409e:	f003 fe5b 	bl	8017d58 <HAL_GPIO_ReadPin>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d007      	beq.n	80140b8 <LidarSetPos+0x4668>
 80140a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80140ac:	48ae      	ldr	r0, [pc, #696]	; (8014368 <LidarSetPos+0x4918>)
 80140ae:	f003 fe53 	bl	8017d58 <HAL_GPIO_ReadPin>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d10c      	bne.n	80140d2 <LidarSetPos+0x4682>
 80140b8:	4bac      	ldr	r3, [pc, #688]	; (801436c <LidarSetPos+0x491c>)
 80140ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80140be:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80140c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80140c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ca:	d802      	bhi.n	80140d2 <LidarSetPos+0x4682>
							PP_stop(&pp);
 80140cc:	48a5      	ldr	r0, [pc, #660]	; (8014364 <LidarSetPos+0x4914>)
 80140ce:	f7f2 f8b7 	bl	8006240 <PP_stop>

						if(lsrR.dist <= 2.4)
 80140d2:	4ba6      	ldr	r3, [pc, #664]	; (801436c <LidarSetPos+0x491c>)
 80140d4:	69db      	ldr	r3, [r3, #28]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ec fa36 	bl	8000548 <__aeabi_f2d>
 80140dc:	a39a      	add	r3, pc, #616	; (adr r3, 8014348 <LidarSetPos+0x48f8>)
 80140de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e2:	f7ec fd05 	bl	8000af0 <__aeabi_dcmple>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d004      	beq.n	80140f6 <LidarSetPos+0x46a6>
							pp.target_vel[0] = 0.5;
 80140ec:	4b9d      	ldr	r3, [pc, #628]	; (8014364 <LidarSetPos+0x4914>)
 80140ee:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80140f2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 80140f6:	4b9a      	ldr	r3, [pc, #616]	; (8014360 <LidarSetPos+0x4910>)
 80140f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140fa:	2b10      	cmp	r3, #16
 80140fc:	d109      	bne.n	8014112 <LidarSetPos+0x46c2>
						{
							while(ps4.button == UP);
 80140fe:	bf00      	nop
 8014100:	4b97      	ldr	r3, [pc, #604]	; (8014360 <LidarSetPos+0x4910>)
 8014102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014104:	2b10      	cmp	r3, #16
 8014106:	d0fb      	beq.n	8014100 <LidarSetPos+0x46b0>
							go_type_3++;
 8014108:	4b99      	ldr	r3, [pc, #612]	; (8014370 <LidarSetPos+0x4920>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	3301      	adds	r3, #1
 801410e:	4a98      	ldr	r2, [pc, #608]	; (8014370 <LidarSetPos+0x4920>)
 8014110:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8014112:	4b94      	ldr	r3, [pc, #592]	; (8014364 <LidarSetPos+0x4914>)
 8014114:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014118:	f003 0301 	and.w	r3, r3, #1
 801411c:	b2db      	uxtb	r3, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	d1ac      	bne.n	801407c <LidarSetPos+0x462c>
						}
					}
					pick_right = 1;
 8014122:	4b94      	ldr	r3, [pc, #592]	; (8014374 <LidarSetPos+0x4924>)
 8014124:	2201      	movs	r2, #1
 8014126:	601a      	str	r2, [r3, #0]
					break;
 8014128:	e108      	b.n	801433c <LidarSetPos+0x48ec>

				case CENTER_3:
					lidar->pos =  PICK_RIGHT;
 801412a:	463b      	mov	r3, r7
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2209      	movs	r2, #9
 8014130:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 8014134:	f7fa f90a 	bl	800e34c <ResetCoordinate>
					loaded = 0;
 8014138:	4b8f      	ldr	r3, [pc, #572]	; (8014378 <LidarSetPos+0x4928>)
 801413a:	2200      	movs	r2, #0
 801413c:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 801413e:	4b8f      	ldr	r3, [pc, #572]	; (801437c <LidarSetPos+0x492c>)
 8014140:	f04f 0200 	mov.w	r2, #0
 8014144:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 8014146:	4b8e      	ldr	r3, [pc, #568]	; (8014380 <LidarSetPos+0x4930>)
 8014148:	f04f 0200 	mov.w	r2, #0
 801414c:	601a      	str	r2, [r3, #0]
					setPick(1000);
 801414e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014152:	f7f9 fbfb 	bl	800d94c <setPick>
					open_servo;
 8014156:	f640 01ac 	movw	r1, #2220	; 0x8ac
 801415a:	488a      	ldr	r0, [pc, #552]	; (8014384 <LidarSetPos+0x4934>)
 801415c:	f7f7 faf8 	bl	800b750 <ServoSetPulse>
 8014160:	f44f 7148 	mov.w	r1, #800	; 0x320
 8014164:	4888      	ldr	r0, [pc, #544]	; (8014388 <LidarSetPos+0x4938>)
 8014166:	f7f7 faf3 	bl	800b750 <ServoSetPulse>
					cylinder_retract;
 801416a:	4a88      	ldr	r2, [pc, #544]	; (801438c <LidarSetPos+0x493c>)
 801416c:	7f13      	ldrb	r3, [r2, #28]
 801416e:	f36f 1386 	bfc	r3, #6, #1
 8014172:	7713      	strb	r3, [r2, #28]
					PP_start(center_3_to_pick_right, 1, &pp);
 8014174:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014178:	4a7a      	ldr	r2, [pc, #488]	; (8014364 <LidarSetPos+0x4914>)
 801417a:	2101      	movs	r1, #1
 801417c:	4618      	mov	r0, r3
 801417e:	f7f1 fd27 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014182:	e04a      	b.n	801421a <LidarSetPos+0x47ca>
					{
						if(ps4.button == SQUARE)
 8014184:	4b76      	ldr	r3, [pc, #472]	; (8014360 <LidarSetPos+0x4910>)
 8014186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801418c:	d108      	bne.n	80141a0 <LidarSetPos+0x4750>
						{
							while(ps4.button == SQUARE);
 801418e:	bf00      	nop
 8014190:	4b73      	ldr	r3, [pc, #460]	; (8014360 <LidarSetPos+0x4910>)
 8014192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014198:	d0fa      	beq.n	8014190 <LidarSetPos+0x4740>
							PP_stop(&pp);
 801419a:	4872      	ldr	r0, [pc, #456]	; (8014364 <LidarSetPos+0x4914>)
 801419c:	f7f2 f850 	bl	8006240 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.5)
 80141a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80141a4:	4870      	ldr	r0, [pc, #448]	; (8014368 <LidarSetPos+0x4918>)
 80141a6:	f003 fdd7 	bl	8017d58 <HAL_GPIO_ReadPin>
 80141aa:	4603      	mov	r3, r0
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d007      	beq.n	80141c0 <LidarSetPos+0x4770>
 80141b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80141b4:	486c      	ldr	r0, [pc, #432]	; (8014368 <LidarSetPos+0x4918>)
 80141b6:	f003 fdcf 	bl	8017d58 <HAL_GPIO_ReadPin>
 80141ba:	4603      	mov	r3, r0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d10c      	bne.n	80141da <LidarSetPos+0x478a>
 80141c0:	4b6a      	ldr	r3, [pc, #424]	; (801436c <LidarSetPos+0x491c>)
 80141c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80141c6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80141ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80141ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d2:	d802      	bhi.n	80141da <LidarSetPos+0x478a>
							PP_stop(&pp);
 80141d4:	4863      	ldr	r0, [pc, #396]	; (8014364 <LidarSetPos+0x4914>)
 80141d6:	f7f2 f833 	bl	8006240 <PP_stop>

						if(lsrR.dist <= 2.15)
 80141da:	4b64      	ldr	r3, [pc, #400]	; (801436c <LidarSetPos+0x491c>)
 80141dc:	69db      	ldr	r3, [r3, #28]
 80141de:	4618      	mov	r0, r3
 80141e0:	f7ec f9b2 	bl	8000548 <__aeabi_f2d>
 80141e4:	a35a      	add	r3, pc, #360	; (adr r3, 8014350 <LidarSetPos+0x4900>)
 80141e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ea:	f7ec fc81 	bl	8000af0 <__aeabi_dcmple>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d004      	beq.n	80141fe <LidarSetPos+0x47ae>
							pp.target_vel[0] = 0.5;
 80141f4:	4b5b      	ldr	r3, [pc, #364]	; (8014364 <LidarSetPos+0x4914>)
 80141f6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80141fa:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 80141fe:	4b58      	ldr	r3, [pc, #352]	; (8014360 <LidarSetPos+0x4910>)
 8014200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014202:	2b10      	cmp	r3, #16
 8014204:	d109      	bne.n	801421a <LidarSetPos+0x47ca>
						{
							while(ps4.button == UP);
 8014206:	bf00      	nop
 8014208:	4b55      	ldr	r3, [pc, #340]	; (8014360 <LidarSetPos+0x4910>)
 801420a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801420c:	2b10      	cmp	r3, #16
 801420e:	d0fb      	beq.n	8014208 <LidarSetPos+0x47b8>
							go_type_3++;
 8014210:	4b57      	ldr	r3, [pc, #348]	; (8014370 <LidarSetPos+0x4920>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	3301      	adds	r3, #1
 8014216:	4a56      	ldr	r2, [pc, #344]	; (8014370 <LidarSetPos+0x4920>)
 8014218:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 801421a:	4b52      	ldr	r3, [pc, #328]	; (8014364 <LidarSetPos+0x4914>)
 801421c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014220:	f003 0301 	and.w	r3, r3, #1
 8014224:	b2db      	uxtb	r3, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	d1ac      	bne.n	8014184 <LidarSetPos+0x4734>
						}
					}
					pick_right = 1;
 801422a:	4b52      	ldr	r3, [pc, #328]	; (8014374 <LidarSetPos+0x4924>)
 801422c:	2201      	movs	r2, #1
 801422e:	601a      	str	r2, [r3, #0]

					break;
 8014230:	e084      	b.n	801433c <LidarSetPos+0x48ec>

				case CENTER_4:
					lidar->pos = PICK_RIGHT;
 8014232:	463b      	mov	r3, r7
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	2209      	movs	r2, #9
 8014238:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					ResetCoordinate();
 801423c:	f7fa f886 	bl	800e34c <ResetCoordinate>
					loaded = 0;
 8014240:	4b4d      	ldr	r3, [pc, #308]	; (8014378 <LidarSetPos+0x4928>)
 8014242:	2200      	movs	r2, #0
 8014244:	601a      	str	r2, [r3, #0]
					vesc_duty = 0.0;
 8014246:	4b4d      	ldr	r3, [pc, #308]	; (801437c <LidarSetPos+0x492c>)
 8014248:	f04f 0200 	mov.w	r2, #0
 801424c:	601a      	str	r2, [r3, #0]
					vesc_speed = 0;
 801424e:	4b4c      	ldr	r3, [pc, #304]	; (8014380 <LidarSetPos+0x4930>)
 8014250:	f04f 0200 	mov.w	r2, #0
 8014254:	601a      	str	r2, [r3, #0]
					setPick(1000);
 8014256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801425a:	f7f9 fb77 	bl	800d94c <setPick>
					open_servo;
 801425e:	f640 01ac 	movw	r1, #2220	; 0x8ac
 8014262:	4848      	ldr	r0, [pc, #288]	; (8014384 <LidarSetPos+0x4934>)
 8014264:	f7f7 fa74 	bl	800b750 <ServoSetPulse>
 8014268:	f44f 7148 	mov.w	r1, #800	; 0x320
 801426c:	4846      	ldr	r0, [pc, #280]	; (8014388 <LidarSetPos+0x4938>)
 801426e:	f7f7 fa6f 	bl	800b750 <ServoSetPulse>
					cylinder_retract;
 8014272:	4a46      	ldr	r2, [pc, #280]	; (801438c <LidarSetPos+0x493c>)
 8014274:	7f13      	ldrb	r3, [r2, #28]
 8014276:	f36f 1386 	bfc	r3, #6, #1
 801427a:	7713      	strb	r3, [r2, #28]
					PP_start(center_4_to_pick_right, 1, &pp);
 801427c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014280:	4a38      	ldr	r2, [pc, #224]	; (8014364 <LidarSetPos+0x4914>)
 8014282:	2101      	movs	r1, #1
 8014284:	4618      	mov	r0, r3
 8014286:	f7f1 fca3 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 801428a:	e04a      	b.n	8014322 <LidarSetPos+0x48d2>
					{
						if(ps4.button == SQUARE)
 801428c:	4b34      	ldr	r3, [pc, #208]	; (8014360 <LidarSetPos+0x4910>)
 801428e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014294:	d108      	bne.n	80142a8 <LidarSetPos+0x4858>
						{
							while(ps4.button == SQUARE);
 8014296:	bf00      	nop
 8014298:	4b31      	ldr	r3, [pc, #196]	; (8014360 <LidarSetPos+0x4910>)
 801429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142a0:	d0fa      	beq.n	8014298 <LidarSetPos+0x4848>
							PP_stop(&pp);
 80142a2:	4830      	ldr	r0, [pc, #192]	; (8014364 <LidarSetPos+0x4914>)
 80142a4:	f7f1 ffcc 	bl	8006240 <PP_stop>
						}

						if((In_LS_Left_1 || In_LS_Left_2) && lsrR.dist <= 1.0)
 80142a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80142ac:	482e      	ldr	r0, [pc, #184]	; (8014368 <LidarSetPos+0x4918>)
 80142ae:	f003 fd53 	bl	8017d58 <HAL_GPIO_ReadPin>
 80142b2:	4603      	mov	r3, r0
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d007      	beq.n	80142c8 <LidarSetPos+0x4878>
 80142b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80142bc:	482a      	ldr	r0, [pc, #168]	; (8014368 <LidarSetPos+0x4918>)
 80142be:	f003 fd4b 	bl	8017d58 <HAL_GPIO_ReadPin>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d10c      	bne.n	80142e2 <LidarSetPos+0x4892>
 80142c8:	4b28      	ldr	r3, [pc, #160]	; (801436c <LidarSetPos+0x491c>)
 80142ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80142ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80142d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142da:	d802      	bhi.n	80142e2 <LidarSetPos+0x4892>
							PP_stop(&pp);
 80142dc:	4821      	ldr	r0, [pc, #132]	; (8014364 <LidarSetPos+0x4914>)
 80142de:	f7f1 ffaf 	bl	8006240 <PP_stop>

						if(lsrR.dist <= 1.7)
 80142e2:	4b22      	ldr	r3, [pc, #136]	; (801436c <LidarSetPos+0x491c>)
 80142e4:	69db      	ldr	r3, [r3, #28]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7ec f92e 	bl	8000548 <__aeabi_f2d>
 80142ec:	a31a      	add	r3, pc, #104	; (adr r3, 8014358 <LidarSetPos+0x4908>)
 80142ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f2:	f7ec fbfd 	bl	8000af0 <__aeabi_dcmple>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d004      	beq.n	8014306 <LidarSetPos+0x48b6>
							pp.target_vel[0] = 0.5;
 80142fc:	4b19      	ldr	r3, [pc, #100]	; (8014364 <LidarSetPos+0x4914>)
 80142fe:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8014302:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

						if(ps4.button == UP)
 8014306:	4b16      	ldr	r3, [pc, #88]	; (8014360 <LidarSetPos+0x4910>)
 8014308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801430a:	2b10      	cmp	r3, #16
 801430c:	d109      	bne.n	8014322 <LidarSetPos+0x48d2>
						{
							while(ps4.button == UP);
 801430e:	bf00      	nop
 8014310:	4b13      	ldr	r3, [pc, #76]	; (8014360 <LidarSetPos+0x4910>)
 8014312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014314:	2b10      	cmp	r3, #16
 8014316:	d0fb      	beq.n	8014310 <LidarSetPos+0x48c0>
							go_type_3++;
 8014318:	4b15      	ldr	r3, [pc, #84]	; (8014370 <LidarSetPos+0x4920>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	3301      	adds	r3, #1
 801431e:	4a14      	ldr	r2, [pc, #80]	; (8014370 <LidarSetPos+0x4920>)
 8014320:	6013      	str	r3, [r2, #0]
					while(pp.pp_start)
 8014322:	4b10      	ldr	r3, [pc, #64]	; (8014364 <LidarSetPos+0x4914>)
 8014324:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014328:	f003 0301 	and.w	r3, r3, #1
 801432c:	b2db      	uxtb	r3, r3
 801432e:	2b00      	cmp	r3, #0
 8014330:	d1ac      	bne.n	801428c <LidarSetPos+0x483c>
						}
					}

					pick_right = 1;
 8014332:	4b10      	ldr	r3, [pc, #64]	; (8014374 <LidarSetPos+0x4924>)
 8014334:	2201      	movs	r2, #1
 8014336:	601a      	str	r2, [r3, #0]
					break;
 8014338:	e000      	b.n	801433c <LidarSetPos+0x48ec>

				default:
					break;
 801433a:	bf00      	nop
			}

		default:
			break;
 801433c:	bf00      	nop
		}
}
 801433e:	bf00      	nop
 8014340:	f507 67a3 	add.w	r7, r7, #1304	; 0x518
 8014344:	46bd      	mov	sp, r7
 8014346:	bdb0      	pop	{r4, r5, r7, pc}
 8014348:	33333333 	.word	0x33333333
 801434c:	40033333 	.word	0x40033333
 8014350:	33333333 	.word	0x33333333
 8014354:	40013333 	.word	0x40013333
 8014358:	33333333 	.word	0x33333333
 801435c:	3ffb3333 	.word	0x3ffb3333
 8014360:	2000a240 	.word	0x2000a240
 8014364:	20006d44 	.word	0x20006d44
 8014368:	40020c00 	.word	0x40020c00
 801436c:	200095f8 	.word	0x200095f8
 8014370:	20006d40 	.word	0x20006d40
 8014374:	2000a89c 	.word	0x2000a89c
 8014378:	200095a8 	.word	0x200095a8
 801437c:	20007494 	.word	0x20007494
 8014380:	200065b8 	.word	0x200065b8
 8014384:	200079d8 	.word	0x200079d8
 8014388:	2000a5e8 	.word	0x2000a5e8
 801438c:	200097d4 	.word	0x200097d4

08014390 <LidarSetAngle>:
 * Initial angle will be B (-90 degree)
 * After pick rings from left, directly go to aim self Type-2(B), Type-1-Left(A), Type-1-Right(C)
 * Then go to right self Type-2 repeat again
 */
void LidarSetAngle(Angle_t angle, Lidar_t* lidar)
{
 8014390:	b5b0      	push	{r4, r5, r7, lr}
 8014392:	b0a6      	sub	sp, #152	; 0x98
 8014394:	af00      	add	r7, sp, #0
 8014396:	4603      	mov	r3, r0
 8014398:	6039      	str	r1, [r7, #0]
 801439a:	71fb      	strb	r3, [r7, #7]
	float angle_BL[1][7] = {{1.0, 0, 0, -113.41, 0, 0, 0}};
 801439c:	4bb1      	ldr	r3, [pc, #708]	; (8014664 <LidarSetAngle+0x2d4>)
 801439e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80143a2:	461d      	mov	r5, r3
 80143a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80143ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_FL[1][7] = {{1.0, 0, 0, -103.26, 0, 0, 0}};
 80143b0:	4bad      	ldr	r3, [pc, #692]	; (8014668 <LidarSetAngle+0x2d8>)
 80143b2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80143b6:	461d      	mov	r5, r3
 80143b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80143c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_S[1][7] = {{1.0, 0, 0, -91, 0, 0, 0}};
 80143c4:	4ba9      	ldr	r3, [pc, #676]	; (801466c <LidarSetAngle+0x2dc>)
 80143c6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80143ca:	461d      	mov	r5, r3
 80143cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80143d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_FR[1][7] = {{1.0, 0, 0, -80.28, 0, 0, 0}};
 80143d8:	4ba5      	ldr	r3, [pc, #660]	; (8014670 <LidarSetAngle+0x2e0>)
 80143da:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80143de:	461d      	mov	r5, r3
 80143e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80143e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	float angle_BR[1][7] = {{1.0, 0, 0, -70.85, 0, 0, 0}};
 80143ec:	4ba1      	ldr	r3, [pc, #644]	; (8014674 <LidarSetAngle+0x2e4>)
 80143ee:	f107 040c 	add.w	r4, r7, #12
 80143f2:	461d      	mov	r5, r3
 80143f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80143fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	switch(angle) // Target Angle
 8014400:	79fb      	ldrb	r3, [r7, #7]
 8014402:	2b04      	cmp	r3, #4
 8014404:	f200 86d4 	bhi.w	80151b0 <LidarSetAngle+0xe20>
 8014408:	a201      	add	r2, pc, #4	; (adr r2, 8014410 <LidarSetAngle+0x80>)
 801440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801440e:	bf00      	nop
 8014410:	08014425 	.word	0x08014425
 8014414:	080146ef 	.word	0x080146ef
 8014418:	080149a9 	.word	0x080149a9
 801441c:	08014c35 	.word	0x08014c35
 8014420:	08014ef7 	.word	0x08014ef7
	{
		case BL:
			switch(lidar->angle) // Current Angle
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 801442a:	3b01      	subs	r3, #1
 801442c:	2b03      	cmp	r3, #3
 801442e:	f200 815b 	bhi.w	80146e8 <LidarSetAngle+0x358>
 8014432:	a201      	add	r2, pc, #4	; (adr r2, 8014438 <LidarSetAngle+0xa8>)
 8014434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014438:	08014449 	.word	0x08014449
 801443c:	080144e1 	.word	0x080144e1
 8014440:	08014579 	.word	0x08014579
 8014444:	08014611 	.word	0x08014611
			{
				case FL:
					lidar->angle = BL;
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	2200      	movs	r2, #0
 801444c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014450:	4b89      	ldr	r3, [pc, #548]	; (8014678 <LidarSetAngle+0x2e8>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d006      	beq.n	8014466 <LidarSetAngle+0xd6>
					{
						vesc_speed = BlueType2;
 8014458:	4b88      	ldr	r3, [pc, #544]	; (801467c <LidarSetAngle+0x2ec>)
 801445a:	4a89      	ldr	r2, [pc, #548]	; (8014680 <LidarSetAngle+0x2f0>)
 801445c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 801445e:	4b89      	ldr	r3, [pc, #548]	; (8014684 <LidarSetAngle+0x2f4>)
 8014460:	4a89      	ldr	r2, [pc, #548]	; (8014688 <LidarSetAngle+0x2f8>)
 8014462:	601a      	str	r2, [r3, #0]
 8014464:	e005      	b.n	8014472 <LidarSetAngle+0xe2>
					}
					else
					{
						vesc_speed = RedType2;
 8014466:	4b85      	ldr	r3, [pc, #532]	; (801467c <LidarSetAngle+0x2ec>)
 8014468:	4a88      	ldr	r2, [pc, #544]	; (801468c <LidarSetAngle+0x2fc>)
 801446a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 801446c:	4b85      	ldr	r3, [pc, #532]	; (8014684 <LidarSetAngle+0x2f4>)
 801446e:	4a88      	ldr	r2, [pc, #544]	; (8014690 <LidarSetAngle+0x300>)
 8014470:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014472:	f7f9 ff6b 	bl	800e34c <ResetCoordinate>

					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014476:	4887      	ldr	r0, [pc, #540]	; (8014694 <LidarSetAngle+0x304>)
 8014478:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 801447c:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8014698 <LidarSetAngle+0x308>
 8014480:	eddf 0a86 	vldr	s1, [pc, #536]	; 801469c <LidarSetAngle+0x30c>
 8014484:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014488:	f7f1 fb18 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 801448c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014490:	4a80      	ldr	r2, [pc, #512]	; (8014694 <LidarSetAngle+0x304>)
 8014492:	2101      	movs	r1, #1
 8014494:	4618      	mov	r0, r3
 8014496:	f7f1 fb9b 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 801449a:	e00d      	b.n	80144b8 <LidarSetAngle+0x128>
					{
						if(ps4.button == SQUARE)
 801449c:	4b80      	ldr	r3, [pc, #512]	; (80146a0 <LidarSetAngle+0x310>)
 801449e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144a4:	d108      	bne.n	80144b8 <LidarSetAngle+0x128>
						{
							while(ps4.button == SQUARE);
 80144a6:	bf00      	nop
 80144a8:	4b7d      	ldr	r3, [pc, #500]	; (80146a0 <LidarSetAngle+0x310>)
 80144aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80144b0:	d0fa      	beq.n	80144a8 <LidarSetAngle+0x118>
							PP_stop(&pp);
 80144b2:	4878      	ldr	r0, [pc, #480]	; (8014694 <LidarSetAngle+0x304>)
 80144b4:	f7f1 fec4 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80144b8:	4b76      	ldr	r3, [pc, #472]	; (8014694 <LidarSetAngle+0x304>)
 80144ba:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80144be:	f003 0301 	and.w	r3, r3, #1
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1e9      	bne.n	801449c <LidarSetAngle+0x10c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80144c8:	4872      	ldr	r0, [pc, #456]	; (8014694 <LidarSetAngle+0x304>)
 80144ca:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80144ce:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8014698 <LidarSetAngle+0x308>
 80144d2:	eddf 0a72 	vldr	s1, [pc, #456]	; 801469c <LidarSetAngle+0x30c>
 80144d6:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80144da:	f7f1 faef 	bl	8005abc <PP_PIDZSet>
					break;
 80144de:	e104      	b.n	80146ea <LidarSetAngle+0x35a>

				case S:
					lidar->angle = BL;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80144e8:	4b63      	ldr	r3, [pc, #396]	; (8014678 <LidarSetAngle+0x2e8>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d006      	beq.n	80144fe <LidarSetAngle+0x16e>
					{
						vesc_speed = BlueType2;
 80144f0:	4b62      	ldr	r3, [pc, #392]	; (801467c <LidarSetAngle+0x2ec>)
 80144f2:	4a63      	ldr	r2, [pc, #396]	; (8014680 <LidarSetAngle+0x2f0>)
 80144f4:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 80144f6:	4b63      	ldr	r3, [pc, #396]	; (8014684 <LidarSetAngle+0x2f4>)
 80144f8:	4a63      	ldr	r2, [pc, #396]	; (8014688 <LidarSetAngle+0x2f8>)
 80144fa:	601a      	str	r2, [r3, #0]
 80144fc:	e005      	b.n	801450a <LidarSetAngle+0x17a>
					}
					else
					{
						vesc_speed = RedType2;
 80144fe:	4b5f      	ldr	r3, [pc, #380]	; (801467c <LidarSetAngle+0x2ec>)
 8014500:	4a62      	ldr	r2, [pc, #392]	; (801468c <LidarSetAngle+0x2fc>)
 8014502:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014504:	4b5f      	ldr	r3, [pc, #380]	; (8014684 <LidarSetAngle+0x2f4>)
 8014506:	4a62      	ldr	r2, [pc, #392]	; (8014690 <LidarSetAngle+0x300>)
 8014508:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801450a:	f7f9 ff1f 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801450e:	4861      	ldr	r0, [pc, #388]	; (8014694 <LidarSetAngle+0x304>)
 8014510:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014514:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8014698 <LidarSetAngle+0x308>
 8014518:	eddf 0a60 	vldr	s1, [pc, #384]	; 801469c <LidarSetAngle+0x30c>
 801451c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014520:	f7f1 facc 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 8014524:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014528:	4a5a      	ldr	r2, [pc, #360]	; (8014694 <LidarSetAngle+0x304>)
 801452a:	2101      	movs	r1, #1
 801452c:	4618      	mov	r0, r3
 801452e:	f7f1 fb4f 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014532:	e00d      	b.n	8014550 <LidarSetAngle+0x1c0>
					{
						if(ps4.button == SQUARE)
 8014534:	4b5a      	ldr	r3, [pc, #360]	; (80146a0 <LidarSetAngle+0x310>)
 8014536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801453c:	d108      	bne.n	8014550 <LidarSetAngle+0x1c0>
						{
							while(ps4.button == SQUARE);
 801453e:	bf00      	nop
 8014540:	4b57      	ldr	r3, [pc, #348]	; (80146a0 <LidarSetAngle+0x310>)
 8014542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014548:	d0fa      	beq.n	8014540 <LidarSetAngle+0x1b0>
							PP_stop(&pp);
 801454a:	4852      	ldr	r0, [pc, #328]	; (8014694 <LidarSetAngle+0x304>)
 801454c:	f7f1 fe78 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014550:	4b50      	ldr	r3, [pc, #320]	; (8014694 <LidarSetAngle+0x304>)
 8014552:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014556:	f003 0301 	and.w	r3, r3, #1
 801455a:	b2db      	uxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d1e9      	bne.n	8014534 <LidarSetAngle+0x1a4>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014560:	484c      	ldr	r0, [pc, #304]	; (8014694 <LidarSetAngle+0x304>)
 8014562:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014566:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8014698 <LidarSetAngle+0x308>
 801456a:	eddf 0a4c 	vldr	s1, [pc, #304]	; 801469c <LidarSetAngle+0x30c>
 801456e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014572:	f7f1 faa3 	bl	8005abc <PP_PIDZSet>
					break;
 8014576:	e0b8      	b.n	80146ea <LidarSetAngle+0x35a>

				case FR:
					lidar->angle = BL;
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	2200      	movs	r2, #0
 801457c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014580:	4b3d      	ldr	r3, [pc, #244]	; (8014678 <LidarSetAngle+0x2e8>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d006      	beq.n	8014596 <LidarSetAngle+0x206>
					{
						vesc_speed = BlueType2;
 8014588:	4b3c      	ldr	r3, [pc, #240]	; (801467c <LidarSetAngle+0x2ec>)
 801458a:	4a3d      	ldr	r2, [pc, #244]	; (8014680 <LidarSetAngle+0x2f0>)
 801458c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 801458e:	4b3d      	ldr	r3, [pc, #244]	; (8014684 <LidarSetAngle+0x2f4>)
 8014590:	4a3d      	ldr	r2, [pc, #244]	; (8014688 <LidarSetAngle+0x2f8>)
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	e005      	b.n	80145a2 <LidarSetAngle+0x212>
					}
					else
					{
						vesc_speed = RedType2;
 8014596:	4b39      	ldr	r3, [pc, #228]	; (801467c <LidarSetAngle+0x2ec>)
 8014598:	4a3c      	ldr	r2, [pc, #240]	; (801468c <LidarSetAngle+0x2fc>)
 801459a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 801459c:	4b39      	ldr	r3, [pc, #228]	; (8014684 <LidarSetAngle+0x2f4>)
 801459e:	4a3c      	ldr	r2, [pc, #240]	; (8014690 <LidarSetAngle+0x300>)
 80145a0:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80145a2:	f7f9 fed3 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80145a6:	483b      	ldr	r0, [pc, #236]	; (8014694 <LidarSetAngle+0x304>)
 80145a8:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80145ac:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8014698 <LidarSetAngle+0x308>
 80145b0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 801469c <LidarSetAngle+0x30c>
 80145b4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80145b8:	f7f1 fa80 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 80145bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80145c0:	4a34      	ldr	r2, [pc, #208]	; (8014694 <LidarSetAngle+0x304>)
 80145c2:	2101      	movs	r1, #1
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7f1 fb03 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 80145ca:	e00d      	b.n	80145e8 <LidarSetAngle+0x258>
					{
						if(ps4.button == SQUARE)
 80145cc:	4b34      	ldr	r3, [pc, #208]	; (80146a0 <LidarSetAngle+0x310>)
 80145ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145d4:	d108      	bne.n	80145e8 <LidarSetAngle+0x258>
						{
							while(ps4.button == SQUARE);
 80145d6:	bf00      	nop
 80145d8:	4b31      	ldr	r3, [pc, #196]	; (80146a0 <LidarSetAngle+0x310>)
 80145da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145e0:	d0fa      	beq.n	80145d8 <LidarSetAngle+0x248>
							PP_stop(&pp);
 80145e2:	482c      	ldr	r0, [pc, #176]	; (8014694 <LidarSetAngle+0x304>)
 80145e4:	f7f1 fe2c 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80145e8:	4b2a      	ldr	r3, [pc, #168]	; (8014694 <LidarSetAngle+0x304>)
 80145ea:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80145ee:	f003 0301 	and.w	r3, r3, #1
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d1e9      	bne.n	80145cc <LidarSetAngle+0x23c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80145f8:	4826      	ldr	r0, [pc, #152]	; (8014694 <LidarSetAngle+0x304>)
 80145fa:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80145fe:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8014698 <LidarSetAngle+0x308>
 8014602:	eddf 0a26 	vldr	s1, [pc, #152]	; 801469c <LidarSetAngle+0x30c>
 8014606:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801460a:	f7f1 fa57 	bl	8005abc <PP_PIDZSet>
					break;
 801460e:	e06c      	b.n	80146ea <LidarSetAngle+0x35a>

				case BR:
					lidar->angle = BL;
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	2200      	movs	r2, #0
 8014614:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014618:	4b17      	ldr	r3, [pc, #92]	; (8014678 <LidarSetAngle+0x2e8>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d006      	beq.n	801462e <LidarSetAngle+0x29e>
					{
						vesc_speed = BlueType2;
 8014620:	4b16      	ldr	r3, [pc, #88]	; (801467c <LidarSetAngle+0x2ec>)
 8014622:	4a17      	ldr	r2, [pc, #92]	; (8014680 <LidarSetAngle+0x2f0>)
 8014624:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014626:	4b17      	ldr	r3, [pc, #92]	; (8014684 <LidarSetAngle+0x2f4>)
 8014628:	4a17      	ldr	r2, [pc, #92]	; (8014688 <LidarSetAngle+0x2f8>)
 801462a:	601a      	str	r2, [r3, #0]
 801462c:	e005      	b.n	801463a <LidarSetAngle+0x2aa>
					}
					else
					{
						vesc_speed = RedType2;
 801462e:	4b13      	ldr	r3, [pc, #76]	; (801467c <LidarSetAngle+0x2ec>)
 8014630:	4a16      	ldr	r2, [pc, #88]	; (801468c <LidarSetAngle+0x2fc>)
 8014632:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014634:	4b13      	ldr	r3, [pc, #76]	; (8014684 <LidarSetAngle+0x2f4>)
 8014636:	4a16      	ldr	r2, [pc, #88]	; (8014690 <LidarSetAngle+0x300>)
 8014638:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801463a:	f7f9 fe87 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801463e:	4815      	ldr	r0, [pc, #84]	; (8014694 <LidarSetAngle+0x304>)
 8014640:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014644:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8014698 <LidarSetAngle+0x308>
 8014648:	eddf 0a14 	vldr	s1, [pc, #80]	; 801469c <LidarSetAngle+0x30c>
 801464c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014650:	f7f1 fa34 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BL, 1, &pp);
 8014654:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8014658:	4a0e      	ldr	r2, [pc, #56]	; (8014694 <LidarSetAngle+0x304>)
 801465a:	2101      	movs	r1, #1
 801465c:	4618      	mov	r0, r3
 801465e:	f7f1 fab7 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014662:	e02d      	b.n	80146c0 <LidarSetAngle+0x330>
 8014664:	08025a68 	.word	0x08025a68
 8014668:	08025a84 	.word	0x08025a84
 801466c:	08025aa0 	.word	0x08025aa0
 8014670:	08025abc 	.word	0x08025abc
 8014674:	08025ad8 	.word	0x08025ad8
 8014678:	20006a44 	.word	0x20006a44
 801467c:	200065b8 	.word	0x200065b8
 8014680:	41026666 	.word	0x41026666
 8014684:	20007494 	.word	0x20007494
 8014688:	44da2000 	.word	0x44da2000
 801468c:	4104cccd 	.word	0x4104cccd
 8014690:	44dc0000 	.word	0x44dc0000
 8014694:	20006d44 	.word	0x20006d44
 8014698:	3e4ccccd 	.word	0x3e4ccccd
 801469c:	3d4ccccd 	.word	0x3d4ccccd
 80146a0:	2000a240 	.word	0x2000a240
					{
						if(ps4.button == SQUARE)
 80146a4:	4bb5      	ldr	r3, [pc, #724]	; (801497c <LidarSetAngle+0x5ec>)
 80146a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80146ac:	d108      	bne.n	80146c0 <LidarSetAngle+0x330>
						{
							while(ps4.button == SQUARE);
 80146ae:	bf00      	nop
 80146b0:	4bb2      	ldr	r3, [pc, #712]	; (801497c <LidarSetAngle+0x5ec>)
 80146b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80146b8:	d0fa      	beq.n	80146b0 <LidarSetAngle+0x320>
							PP_stop(&pp);
 80146ba:	48b1      	ldr	r0, [pc, #708]	; (8014980 <LidarSetAngle+0x5f0>)
 80146bc:	f7f1 fdc0 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80146c0:	4baf      	ldr	r3, [pc, #700]	; (8014980 <LidarSetAngle+0x5f0>)
 80146c2:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80146c6:	f003 0301 	and.w	r3, r3, #1
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1e9      	bne.n	80146a4 <LidarSetAngle+0x314>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80146d0:	48ab      	ldr	r0, [pc, #684]	; (8014980 <LidarSetAngle+0x5f0>)
 80146d2:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80146d6:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8014984 <LidarSetAngle+0x5f4>
 80146da:	eddf 0aab 	vldr	s1, [pc, #684]	; 8014988 <LidarSetAngle+0x5f8>
 80146de:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80146e2:	f7f1 f9eb 	bl	8005abc <PP_PIDZSet>
					break;
 80146e6:	e000      	b.n	80146ea <LidarSetAngle+0x35a>

				default:
					break;
 80146e8:	bf00      	nop
			}
			break;
 80146ea:	f000 bd62 	b.w	80151b2 <LidarSetAngle+0xe22>

		case FL:
			switch(lidar->angle) // Current Angle
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80146f4:	2b04      	cmp	r3, #4
 80146f6:	f200 813d 	bhi.w	8014974 <LidarSetAngle+0x5e4>
 80146fa:	a201      	add	r2, pc, #4	; (adr r2, 8014700 <LidarSetAngle+0x370>)
 80146fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014700:	08014715 	.word	0x08014715
 8014704:	08014975 	.word	0x08014975
 8014708:	080147ad 	.word	0x080147ad
 801470c:	08014845 	.word	0x08014845
 8014710:	080148dd 	.word	0x080148dd
			{
				case BL:
					lidar->angle = FL;
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	2201      	movs	r2, #1
 8014718:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 801471c:	4b9b      	ldr	r3, [pc, #620]	; (801498c <LidarSetAngle+0x5fc>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d006      	beq.n	8014732 <LidarSetAngle+0x3a2>
					{
						vesc_speed = BlueType2;
 8014724:	4b9a      	ldr	r3, [pc, #616]	; (8014990 <LidarSetAngle+0x600>)
 8014726:	4a9b      	ldr	r2, [pc, #620]	; (8014994 <LidarSetAngle+0x604>)
 8014728:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 801472a:	4b9b      	ldr	r3, [pc, #620]	; (8014998 <LidarSetAngle+0x608>)
 801472c:	4a9b      	ldr	r2, [pc, #620]	; (801499c <LidarSetAngle+0x60c>)
 801472e:	601a      	str	r2, [r3, #0]
 8014730:	e005      	b.n	801473e <LidarSetAngle+0x3ae>
					}
					else
					{
						vesc_speed = RedType2;
 8014732:	4b97      	ldr	r3, [pc, #604]	; (8014990 <LidarSetAngle+0x600>)
 8014734:	4a9a      	ldr	r2, [pc, #616]	; (80149a0 <LidarSetAngle+0x610>)
 8014736:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014738:	4b97      	ldr	r3, [pc, #604]	; (8014998 <LidarSetAngle+0x608>)
 801473a:	4a9a      	ldr	r2, [pc, #616]	; (80149a4 <LidarSetAngle+0x614>)
 801473c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801473e:	f7f9 fe05 	bl	800e34c <ResetCoordinate>

					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014742:	488f      	ldr	r0, [pc, #572]	; (8014980 <LidarSetAngle+0x5f0>)
 8014744:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014748:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 8014984 <LidarSetAngle+0x5f4>
 801474c:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8014988 <LidarSetAngle+0x5f8>
 8014750:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014754:	f7f1 f9b2 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 8014758:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801475c:	4a88      	ldr	r2, [pc, #544]	; (8014980 <LidarSetAngle+0x5f0>)
 801475e:	2101      	movs	r1, #1
 8014760:	4618      	mov	r0, r3
 8014762:	f7f1 fa35 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014766:	e00d      	b.n	8014784 <LidarSetAngle+0x3f4>
					{
						if(ps4.button == SQUARE)
 8014768:	4b84      	ldr	r3, [pc, #528]	; (801497c <LidarSetAngle+0x5ec>)
 801476a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801476c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014770:	d108      	bne.n	8014784 <LidarSetAngle+0x3f4>
						{
							while(ps4.button == SQUARE);
 8014772:	bf00      	nop
 8014774:	4b81      	ldr	r3, [pc, #516]	; (801497c <LidarSetAngle+0x5ec>)
 8014776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801477c:	d0fa      	beq.n	8014774 <LidarSetAngle+0x3e4>
							PP_stop(&pp);
 801477e:	4880      	ldr	r0, [pc, #512]	; (8014980 <LidarSetAngle+0x5f0>)
 8014780:	f7f1 fd5e 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014784:	4b7e      	ldr	r3, [pc, #504]	; (8014980 <LidarSetAngle+0x5f0>)
 8014786:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801478a:	f003 0301 	and.w	r3, r3, #1
 801478e:	b2db      	uxtb	r3, r3
 8014790:	2b00      	cmp	r3, #0
 8014792:	d1e9      	bne.n	8014768 <LidarSetAngle+0x3d8>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014794:	487a      	ldr	r0, [pc, #488]	; (8014980 <LidarSetAngle+0x5f0>)
 8014796:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801479a:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8014984 <LidarSetAngle+0x5f4>
 801479e:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8014988 <LidarSetAngle+0x5f8>
 80147a2:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80147a6:	f7f1 f989 	bl	8005abc <PP_PIDZSet>
					break;
 80147aa:	e0e4      	b.n	8014976 <LidarSetAngle+0x5e6>

				case S:
					lidar->angle = FL;
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	2201      	movs	r2, #1
 80147b0:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80147b4:	4b75      	ldr	r3, [pc, #468]	; (801498c <LidarSetAngle+0x5fc>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d006      	beq.n	80147ca <LidarSetAngle+0x43a>
					{
						vesc_speed = BlueType2;
 80147bc:	4b74      	ldr	r3, [pc, #464]	; (8014990 <LidarSetAngle+0x600>)
 80147be:	4a75      	ldr	r2, [pc, #468]	; (8014994 <LidarSetAngle+0x604>)
 80147c0:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80147c2:	4b75      	ldr	r3, [pc, #468]	; (8014998 <LidarSetAngle+0x608>)
 80147c4:	4a75      	ldr	r2, [pc, #468]	; (801499c <LidarSetAngle+0x60c>)
 80147c6:	601a      	str	r2, [r3, #0]
 80147c8:	e005      	b.n	80147d6 <LidarSetAngle+0x446>
					}
					else
					{
						vesc_speed = RedType2;
 80147ca:	4b71      	ldr	r3, [pc, #452]	; (8014990 <LidarSetAngle+0x600>)
 80147cc:	4a74      	ldr	r2, [pc, #464]	; (80149a0 <LidarSetAngle+0x610>)
 80147ce:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 80147d0:	4b71      	ldr	r3, [pc, #452]	; (8014998 <LidarSetAngle+0x608>)
 80147d2:	4a74      	ldr	r2, [pc, #464]	; (80149a4 <LidarSetAngle+0x614>)
 80147d4:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80147d6:	f7f9 fdb9 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80147da:	4869      	ldr	r0, [pc, #420]	; (8014980 <LidarSetAngle+0x5f0>)
 80147dc:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80147e0:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8014984 <LidarSetAngle+0x5f4>
 80147e4:	eddf 0a68 	vldr	s1, [pc, #416]	; 8014988 <LidarSetAngle+0x5f8>
 80147e8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80147ec:	f7f1 f966 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 80147f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80147f4:	4a62      	ldr	r2, [pc, #392]	; (8014980 <LidarSetAngle+0x5f0>)
 80147f6:	2101      	movs	r1, #1
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7f1 f9e9 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 80147fe:	e00d      	b.n	801481c <LidarSetAngle+0x48c>
					{
						if(ps4.button == SQUARE)
 8014800:	4b5e      	ldr	r3, [pc, #376]	; (801497c <LidarSetAngle+0x5ec>)
 8014802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014808:	d108      	bne.n	801481c <LidarSetAngle+0x48c>
						{
							while(ps4.button == SQUARE);
 801480a:	bf00      	nop
 801480c:	4b5b      	ldr	r3, [pc, #364]	; (801497c <LidarSetAngle+0x5ec>)
 801480e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014814:	d0fa      	beq.n	801480c <LidarSetAngle+0x47c>
							PP_stop(&pp);
 8014816:	485a      	ldr	r0, [pc, #360]	; (8014980 <LidarSetAngle+0x5f0>)
 8014818:	f7f1 fd12 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 801481c:	4b58      	ldr	r3, [pc, #352]	; (8014980 <LidarSetAngle+0x5f0>)
 801481e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014822:	f003 0301 	and.w	r3, r3, #1
 8014826:	b2db      	uxtb	r3, r3
 8014828:	2b00      	cmp	r3, #0
 801482a:	d1e9      	bne.n	8014800 <LidarSetAngle+0x470>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 801482c:	4854      	ldr	r0, [pc, #336]	; (8014980 <LidarSetAngle+0x5f0>)
 801482e:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014832:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8014984 <LidarSetAngle+0x5f4>
 8014836:	eddf 0a54 	vldr	s1, [pc, #336]	; 8014988 <LidarSetAngle+0x5f8>
 801483a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801483e:	f7f1 f93d 	bl	8005abc <PP_PIDZSet>
					break;
 8014842:	e098      	b.n	8014976 <LidarSetAngle+0x5e6>

				case FR:
					lidar->angle = FL;
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	2201      	movs	r2, #1
 8014848:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 801484c:	4b4f      	ldr	r3, [pc, #316]	; (801498c <LidarSetAngle+0x5fc>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d006      	beq.n	8014862 <LidarSetAngle+0x4d2>
					{
						vesc_speed = BlueType2;
 8014854:	4b4e      	ldr	r3, [pc, #312]	; (8014990 <LidarSetAngle+0x600>)
 8014856:	4a4f      	ldr	r2, [pc, #316]	; (8014994 <LidarSetAngle+0x604>)
 8014858:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 801485a:	4b4f      	ldr	r3, [pc, #316]	; (8014998 <LidarSetAngle+0x608>)
 801485c:	4a4f      	ldr	r2, [pc, #316]	; (801499c <LidarSetAngle+0x60c>)
 801485e:	601a      	str	r2, [r3, #0]
 8014860:	e005      	b.n	801486e <LidarSetAngle+0x4de>
					}
					else
					{
						vesc_speed = RedType2;
 8014862:	4b4b      	ldr	r3, [pc, #300]	; (8014990 <LidarSetAngle+0x600>)
 8014864:	4a4e      	ldr	r2, [pc, #312]	; (80149a0 <LidarSetAngle+0x610>)
 8014866:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014868:	4b4b      	ldr	r3, [pc, #300]	; (8014998 <LidarSetAngle+0x608>)
 801486a:	4a4e      	ldr	r2, [pc, #312]	; (80149a4 <LidarSetAngle+0x614>)
 801486c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801486e:	f7f9 fd6d 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014872:	4843      	ldr	r0, [pc, #268]	; (8014980 <LidarSetAngle+0x5f0>)
 8014874:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014878:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8014984 <LidarSetAngle+0x5f4>
 801487c:	eddf 0a42 	vldr	s1, [pc, #264]	; 8014988 <LidarSetAngle+0x5f8>
 8014880:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014884:	f7f1 f91a 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 8014888:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801488c:	4a3c      	ldr	r2, [pc, #240]	; (8014980 <LidarSetAngle+0x5f0>)
 801488e:	2101      	movs	r1, #1
 8014890:	4618      	mov	r0, r3
 8014892:	f7f1 f99d 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014896:	e00d      	b.n	80148b4 <LidarSetAngle+0x524>
					{
						if(ps4.button == SQUARE)
 8014898:	4b38      	ldr	r3, [pc, #224]	; (801497c <LidarSetAngle+0x5ec>)
 801489a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801489c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148a0:	d108      	bne.n	80148b4 <LidarSetAngle+0x524>
						{
							while(ps4.button == SQUARE);
 80148a2:	bf00      	nop
 80148a4:	4b35      	ldr	r3, [pc, #212]	; (801497c <LidarSetAngle+0x5ec>)
 80148a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148ac:	d0fa      	beq.n	80148a4 <LidarSetAngle+0x514>
							PP_stop(&pp);
 80148ae:	4834      	ldr	r0, [pc, #208]	; (8014980 <LidarSetAngle+0x5f0>)
 80148b0:	f7f1 fcc6 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80148b4:	4b32      	ldr	r3, [pc, #200]	; (8014980 <LidarSetAngle+0x5f0>)
 80148b6:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80148ba:	f003 0301 	and.w	r3, r3, #1
 80148be:	b2db      	uxtb	r3, r3
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d1e9      	bne.n	8014898 <LidarSetAngle+0x508>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80148c4:	482e      	ldr	r0, [pc, #184]	; (8014980 <LidarSetAngle+0x5f0>)
 80148c6:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 80148ca:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8014984 <LidarSetAngle+0x5f4>
 80148ce:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8014988 <LidarSetAngle+0x5f8>
 80148d2:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80148d6:	f7f1 f8f1 	bl	8005abc <PP_PIDZSet>
					break;
 80148da:	e04c      	b.n	8014976 <LidarSetAngle+0x5e6>

				case BR:
					lidar->angle = FL;
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	2201      	movs	r2, #1
 80148e0:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80148e4:	4b29      	ldr	r3, [pc, #164]	; (801498c <LidarSetAngle+0x5fc>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d006      	beq.n	80148fa <LidarSetAngle+0x56a>
					{
						vesc_speed = BlueType2;
 80148ec:	4b28      	ldr	r3, [pc, #160]	; (8014990 <LidarSetAngle+0x600>)
 80148ee:	4a29      	ldr	r2, [pc, #164]	; (8014994 <LidarSetAngle+0x604>)
 80148f0:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 80148f2:	4b29      	ldr	r3, [pc, #164]	; (8014998 <LidarSetAngle+0x608>)
 80148f4:	4a29      	ldr	r2, [pc, #164]	; (801499c <LidarSetAngle+0x60c>)
 80148f6:	601a      	str	r2, [r3, #0]
 80148f8:	e005      	b.n	8014906 <LidarSetAngle+0x576>
					}
					else
					{
						vesc_speed = RedType2;
 80148fa:	4b25      	ldr	r3, [pc, #148]	; (8014990 <LidarSetAngle+0x600>)
 80148fc:	4a28      	ldr	r2, [pc, #160]	; (80149a0 <LidarSetAngle+0x610>)
 80148fe:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014900:	4b25      	ldr	r3, [pc, #148]	; (8014998 <LidarSetAngle+0x608>)
 8014902:	4a28      	ldr	r2, [pc, #160]	; (80149a4 <LidarSetAngle+0x614>)
 8014904:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014906:	f7f9 fd21 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 801490a:	481d      	ldr	r0, [pc, #116]	; (8014980 <LidarSetAngle+0x5f0>)
 801490c:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014910:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8014984 <LidarSetAngle+0x5f4>
 8014914:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8014988 <LidarSetAngle+0x5f8>
 8014918:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801491c:	f7f1 f8ce 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FL, 1, &pp);
 8014920:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014924:	4a16      	ldr	r2, [pc, #88]	; (8014980 <LidarSetAngle+0x5f0>)
 8014926:	2101      	movs	r1, #1
 8014928:	4618      	mov	r0, r3
 801492a:	f7f1 f951 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 801492e:	e00d      	b.n	801494c <LidarSetAngle+0x5bc>
					{
						if(ps4.button == SQUARE)
 8014930:	4b12      	ldr	r3, [pc, #72]	; (801497c <LidarSetAngle+0x5ec>)
 8014932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014938:	d108      	bne.n	801494c <LidarSetAngle+0x5bc>
						{
							while(ps4.button == SQUARE);
 801493a:	bf00      	nop
 801493c:	4b0f      	ldr	r3, [pc, #60]	; (801497c <LidarSetAngle+0x5ec>)
 801493e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014944:	d0fa      	beq.n	801493c <LidarSetAngle+0x5ac>
							PP_stop(&pp);
 8014946:	480e      	ldr	r0, [pc, #56]	; (8014980 <LidarSetAngle+0x5f0>)
 8014948:	f7f1 fc7a 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 801494c:	4b0c      	ldr	r3, [pc, #48]	; (8014980 <LidarSetAngle+0x5f0>)
 801494e:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014952:	f003 0301 	and.w	r3, r3, #1
 8014956:	b2db      	uxtb	r3, r3
 8014958:	2b00      	cmp	r3, #0
 801495a:	d1e9      	bne.n	8014930 <LidarSetAngle+0x5a0>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 801495c:	4808      	ldr	r0, [pc, #32]	; (8014980 <LidarSetAngle+0x5f0>)
 801495e:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014962:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8014984 <LidarSetAngle+0x5f4>
 8014966:	eddf 0a08 	vldr	s1, [pc, #32]	; 8014988 <LidarSetAngle+0x5f8>
 801496a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801496e:	f7f1 f8a5 	bl	8005abc <PP_PIDZSet>
					break;
 8014972:	e000      	b.n	8014976 <LidarSetAngle+0x5e6>

				default:
					break;
 8014974:	bf00      	nop
			}
			break;
 8014976:	f000 bc1c 	b.w	80151b2 <LidarSetAngle+0xe22>
 801497a:	bf00      	nop
 801497c:	2000a240 	.word	0x2000a240
 8014980:	20006d44 	.word	0x20006d44
 8014984:	3e4ccccd 	.word	0x3e4ccccd
 8014988:	3d4ccccd 	.word	0x3d4ccccd
 801498c:	20006a44 	.word	0x20006a44
 8014990:	200065b8 	.word	0x200065b8
 8014994:	41026666 	.word	0x41026666
 8014998:	20007494 	.word	0x20007494
 801499c:	45101000 	.word	0x45101000
 80149a0:	4104cccd 	.word	0x4104cccd
 80149a4:	4511a000 	.word	0x4511a000

		case S:
			switch(lidar->angle)
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 80149ae:	2b04      	cmp	r3, #4
 80149b0:	f200 813e 	bhi.w	8014c30 <LidarSetAngle+0x8a0>
 80149b4:	a201      	add	r2, pc, #4	; (adr r2, 80149bc <LidarSetAngle+0x62c>)
 80149b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149ba:	bf00      	nop
 80149bc:	08014a69 	.word	0x08014a69
 80149c0:	080149d1 	.word	0x080149d1
 80149c4:	08014c31 	.word	0x08014c31
 80149c8:	08014b01 	.word	0x08014b01
 80149cc:	08014b99 	.word	0x08014b99
			{
				case FL:
					lidar->angle = S;
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	2202      	movs	r2, #2
 80149d4:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 80149d8:	4ba8      	ldr	r3, [pc, #672]	; (8014c7c <LidarSetAngle+0x8ec>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d006      	beq.n	80149ee <LidarSetAngle+0x65e>
					{
						vesc_speed = BlueType3;
 80149e0:	4ba7      	ldr	r3, [pc, #668]	; (8014c80 <LidarSetAngle+0x8f0>)
 80149e2:	4aa8      	ldr	r2, [pc, #672]	; (8014c84 <LidarSetAngle+0x8f4>)
 80149e4:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 80149e6:	4ba8      	ldr	r3, [pc, #672]	; (8014c88 <LidarSetAngle+0x8f8>)
 80149e8:	4aa8      	ldr	r2, [pc, #672]	; (8014c8c <LidarSetAngle+0x8fc>)
 80149ea:	601a      	str	r2, [r3, #0]
 80149ec:	e005      	b.n	80149fa <LidarSetAngle+0x66a>
					}
					else
					{
						vesc_speed = RedType3;
 80149ee:	4ba4      	ldr	r3, [pc, #656]	; (8014c80 <LidarSetAngle+0x8f0>)
 80149f0:	4aa7      	ldr	r2, [pc, #668]	; (8014c90 <LidarSetAngle+0x900>)
 80149f2:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 80149f4:	4ba4      	ldr	r3, [pc, #656]	; (8014c88 <LidarSetAngle+0x8f8>)
 80149f6:	4aa7      	ldr	r2, [pc, #668]	; (8014c94 <LidarSetAngle+0x904>)
 80149f8:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80149fa:	f7f9 fca7 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80149fe:	48a6      	ldr	r0, [pc, #664]	; (8014c98 <LidarSetAngle+0x908>)
 8014a00:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014a04:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8014c9c <LidarSetAngle+0x90c>
 8014a08:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8014ca0 <LidarSetAngle+0x910>
 8014a0c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014a10:	f7f1 f854 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 8014a14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a18:	4a9f      	ldr	r2, [pc, #636]	; (8014c98 <LidarSetAngle+0x908>)
 8014a1a:	2101      	movs	r1, #1
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f7f1 f8d7 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014a22:	e00d      	b.n	8014a40 <LidarSetAngle+0x6b0>
					{
						if(ps4.button == SQUARE)
 8014a24:	4b9f      	ldr	r3, [pc, #636]	; (8014ca4 <LidarSetAngle+0x914>)
 8014a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a2c:	d108      	bne.n	8014a40 <LidarSetAngle+0x6b0>
						{
							while(ps4.button == SQUARE);
 8014a2e:	bf00      	nop
 8014a30:	4b9c      	ldr	r3, [pc, #624]	; (8014ca4 <LidarSetAngle+0x914>)
 8014a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a38:	d0fa      	beq.n	8014a30 <LidarSetAngle+0x6a0>
							PP_stop(&pp);
 8014a3a:	4897      	ldr	r0, [pc, #604]	; (8014c98 <LidarSetAngle+0x908>)
 8014a3c:	f7f1 fc00 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014a40:	4b95      	ldr	r3, [pc, #596]	; (8014c98 <LidarSetAngle+0x908>)
 8014a42:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014a46:	f003 0301 	and.w	r3, r3, #1
 8014a4a:	b2db      	uxtb	r3, r3
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d1e9      	bne.n	8014a24 <LidarSetAngle+0x694>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014a50:	4891      	ldr	r0, [pc, #580]	; (8014c98 <LidarSetAngle+0x908>)
 8014a52:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014a56:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8014c9c <LidarSetAngle+0x90c>
 8014a5a:	eddf 0a91 	vldr	s1, [pc, #580]	; 8014ca0 <LidarSetAngle+0x910>
 8014a5e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014a62:	f7f1 f82b 	bl	8005abc <PP_PIDZSet>
					break;
 8014a66:	e0e4      	b.n	8014c32 <LidarSetAngle+0x8a2>

				case BL:
					lidar->angle = S;
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	2202      	movs	r2, #2
 8014a6c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014a70:	4b82      	ldr	r3, [pc, #520]	; (8014c7c <LidarSetAngle+0x8ec>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d006      	beq.n	8014a86 <LidarSetAngle+0x6f6>
					{
						vesc_speed = BlueType3;
 8014a78:	4b81      	ldr	r3, [pc, #516]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014a7a:	4a82      	ldr	r2, [pc, #520]	; (8014c84 <LidarSetAngle+0x8f4>)
 8014a7c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 8014a7e:	4b82      	ldr	r3, [pc, #520]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014a80:	4a82      	ldr	r2, [pc, #520]	; (8014c8c <LidarSetAngle+0x8fc>)
 8014a82:	601a      	str	r2, [r3, #0]
 8014a84:	e005      	b.n	8014a92 <LidarSetAngle+0x702>
					}
					else
					{
						vesc_speed = RedType3;
 8014a86:	4b7e      	ldr	r3, [pc, #504]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014a88:	4a81      	ldr	r2, [pc, #516]	; (8014c90 <LidarSetAngle+0x900>)
 8014a8a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 8014a8c:	4b7e      	ldr	r3, [pc, #504]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014a8e:	4a81      	ldr	r2, [pc, #516]	; (8014c94 <LidarSetAngle+0x904>)
 8014a90:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014a92:	f7f9 fc5b 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014a96:	4880      	ldr	r0, [pc, #512]	; (8014c98 <LidarSetAngle+0x908>)
 8014a98:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014a9c:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 8014c9c <LidarSetAngle+0x90c>
 8014aa0:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8014ca0 <LidarSetAngle+0x910>
 8014aa4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014aa8:	f7f1 f808 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 8014aac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ab0:	4a79      	ldr	r2, [pc, #484]	; (8014c98 <LidarSetAngle+0x908>)
 8014ab2:	2101      	movs	r1, #1
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7f1 f88b 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014aba:	e00d      	b.n	8014ad8 <LidarSetAngle+0x748>
					{
						if(ps4.button == SQUARE)
 8014abc:	4b79      	ldr	r3, [pc, #484]	; (8014ca4 <LidarSetAngle+0x914>)
 8014abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ac4:	d108      	bne.n	8014ad8 <LidarSetAngle+0x748>
						{
							while(ps4.button == SQUARE);
 8014ac6:	bf00      	nop
 8014ac8:	4b76      	ldr	r3, [pc, #472]	; (8014ca4 <LidarSetAngle+0x914>)
 8014aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ad0:	d0fa      	beq.n	8014ac8 <LidarSetAngle+0x738>
							PP_stop(&pp);
 8014ad2:	4871      	ldr	r0, [pc, #452]	; (8014c98 <LidarSetAngle+0x908>)
 8014ad4:	f7f1 fbb4 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014ad8:	4b6f      	ldr	r3, [pc, #444]	; (8014c98 <LidarSetAngle+0x908>)
 8014ada:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014ade:	f003 0301 	and.w	r3, r3, #1
 8014ae2:	b2db      	uxtb	r3, r3
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1e9      	bne.n	8014abc <LidarSetAngle+0x72c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014ae8:	486b      	ldr	r0, [pc, #428]	; (8014c98 <LidarSetAngle+0x908>)
 8014aea:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014aee:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8014c9c <LidarSetAngle+0x90c>
 8014af2:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8014ca0 <LidarSetAngle+0x910>
 8014af6:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014afa:	f7f0 ffdf 	bl	8005abc <PP_PIDZSet>
					break;
 8014afe:	e098      	b.n	8014c32 <LidarSetAngle+0x8a2>

				case FR:
					lidar->angle = S;
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	2202      	movs	r2, #2
 8014b04:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014b08:	4b5c      	ldr	r3, [pc, #368]	; (8014c7c <LidarSetAngle+0x8ec>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d006      	beq.n	8014b1e <LidarSetAngle+0x78e>
					{
						vesc_speed = BlueType3;
 8014b10:	4b5b      	ldr	r3, [pc, #364]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014b12:	4a5c      	ldr	r2, [pc, #368]	; (8014c84 <LidarSetAngle+0x8f4>)
 8014b14:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 8014b16:	4b5c      	ldr	r3, [pc, #368]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014b18:	4a5c      	ldr	r2, [pc, #368]	; (8014c8c <LidarSetAngle+0x8fc>)
 8014b1a:	601a      	str	r2, [r3, #0]
 8014b1c:	e005      	b.n	8014b2a <LidarSetAngle+0x79a>
					}
					else
					{
						vesc_speed = RedType3;
 8014b1e:	4b58      	ldr	r3, [pc, #352]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014b20:	4a5b      	ldr	r2, [pc, #364]	; (8014c90 <LidarSetAngle+0x900>)
 8014b22:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 8014b24:	4b58      	ldr	r3, [pc, #352]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014b26:	4a5b      	ldr	r2, [pc, #364]	; (8014c94 <LidarSetAngle+0x904>)
 8014b28:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014b2a:	f7f9 fc0f 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014b2e:	485a      	ldr	r0, [pc, #360]	; (8014c98 <LidarSetAngle+0x908>)
 8014b30:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014b34:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8014c9c <LidarSetAngle+0x90c>
 8014b38:	eddf 0a59 	vldr	s1, [pc, #356]	; 8014ca0 <LidarSetAngle+0x910>
 8014b3c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014b40:	f7f0 ffbc 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 8014b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014b48:	4a53      	ldr	r2, [pc, #332]	; (8014c98 <LidarSetAngle+0x908>)
 8014b4a:	2101      	movs	r1, #1
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7f1 f83f 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014b52:	e00d      	b.n	8014b70 <LidarSetAngle+0x7e0>
					{
						if(ps4.button == SQUARE)
 8014b54:	4b53      	ldr	r3, [pc, #332]	; (8014ca4 <LidarSetAngle+0x914>)
 8014b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b5c:	d108      	bne.n	8014b70 <LidarSetAngle+0x7e0>
						{
							while(ps4.button == SQUARE);
 8014b5e:	bf00      	nop
 8014b60:	4b50      	ldr	r3, [pc, #320]	; (8014ca4 <LidarSetAngle+0x914>)
 8014b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014b68:	d0fa      	beq.n	8014b60 <LidarSetAngle+0x7d0>
							PP_stop(&pp);
 8014b6a:	484b      	ldr	r0, [pc, #300]	; (8014c98 <LidarSetAngle+0x908>)
 8014b6c:	f7f1 fb68 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014b70:	4b49      	ldr	r3, [pc, #292]	; (8014c98 <LidarSetAngle+0x908>)
 8014b72:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014b76:	f003 0301 	and.w	r3, r3, #1
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d1e9      	bne.n	8014b54 <LidarSetAngle+0x7c4>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014b80:	4845      	ldr	r0, [pc, #276]	; (8014c98 <LidarSetAngle+0x908>)
 8014b82:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014b86:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8014c9c <LidarSetAngle+0x90c>
 8014b8a:	eddf 0a45 	vldr	s1, [pc, #276]	; 8014ca0 <LidarSetAngle+0x910>
 8014b8e:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014b92:	f7f0 ff93 	bl	8005abc <PP_PIDZSet>
					break;
 8014b96:	e04c      	b.n	8014c32 <LidarSetAngle+0x8a2>

				case BR:
					lidar->angle = S;
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	2202      	movs	r2, #2
 8014b9c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014ba0:	4b36      	ldr	r3, [pc, #216]	; (8014c7c <LidarSetAngle+0x8ec>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d006      	beq.n	8014bb6 <LidarSetAngle+0x826>
					{
						vesc_speed = BlueType3;
 8014ba8:	4b35      	ldr	r3, [pc, #212]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014baa:	4a36      	ldr	r2, [pc, #216]	; (8014c84 <LidarSetAngle+0x8f4>)
 8014bac:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType3RotateDuty;
 8014bae:	4b36      	ldr	r3, [pc, #216]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014bb0:	4a36      	ldr	r2, [pc, #216]	; (8014c8c <LidarSetAngle+0x8fc>)
 8014bb2:	601a      	str	r2, [r3, #0]
 8014bb4:	e005      	b.n	8014bc2 <LidarSetAngle+0x832>
					}
					else
					{
						vesc_speed = RedType3;
 8014bb6:	4b32      	ldr	r3, [pc, #200]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014bb8:	4a35      	ldr	r2, [pc, #212]	; (8014c90 <LidarSetAngle+0x900>)
 8014bba:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType3RotateDuty;
 8014bbc:	4b32      	ldr	r3, [pc, #200]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014bbe:	4a35      	ldr	r2, [pc, #212]	; (8014c94 <LidarSetAngle+0x904>)
 8014bc0:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014bc2:	f7f9 fbc3 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014bc6:	4834      	ldr	r0, [pc, #208]	; (8014c98 <LidarSetAngle+0x908>)
 8014bc8:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014bcc:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8014c9c <LidarSetAngle+0x90c>
 8014bd0:	eddf 0a33 	vldr	s1, [pc, #204]	; 8014ca0 <LidarSetAngle+0x910>
 8014bd4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014bd8:	f7f0 ff70 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_S, 1, &pp);
 8014bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014be0:	4a2d      	ldr	r2, [pc, #180]	; (8014c98 <LidarSetAngle+0x908>)
 8014be2:	2101      	movs	r1, #1
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7f0 fff3 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014bea:	e00d      	b.n	8014c08 <LidarSetAngle+0x878>
					{
						if(ps4.button == SQUARE)
 8014bec:	4b2d      	ldr	r3, [pc, #180]	; (8014ca4 <LidarSetAngle+0x914>)
 8014bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014bf4:	d108      	bne.n	8014c08 <LidarSetAngle+0x878>
						{
							while(ps4.button == SQUARE);
 8014bf6:	bf00      	nop
 8014bf8:	4b2a      	ldr	r3, [pc, #168]	; (8014ca4 <LidarSetAngle+0x914>)
 8014bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c00:	d0fa      	beq.n	8014bf8 <LidarSetAngle+0x868>
							PP_stop(&pp);
 8014c02:	4825      	ldr	r0, [pc, #148]	; (8014c98 <LidarSetAngle+0x908>)
 8014c04:	f7f1 fb1c 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014c08:	4b23      	ldr	r3, [pc, #140]	; (8014c98 <LidarSetAngle+0x908>)
 8014c0a:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014c0e:	f003 0301 	and.w	r3, r3, #1
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d1e9      	bne.n	8014bec <LidarSetAngle+0x85c>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014c18:	481f      	ldr	r0, [pc, #124]	; (8014c98 <LidarSetAngle+0x908>)
 8014c1a:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014c1e:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8014c9c <LidarSetAngle+0x90c>
 8014c22:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8014ca0 <LidarSetAngle+0x910>
 8014c26:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014c2a:	f7f0 ff47 	bl	8005abc <PP_PIDZSet>
					break;
 8014c2e:	e000      	b.n	8014c32 <LidarSetAngle+0x8a2>

				default:
					break;
 8014c30:	bf00      	nop
			}
			break;
 8014c32:	e2be      	b.n	80151b2 <LidarSetAngle+0xe22>

		case FR:
			switch(lidar->angle)
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8014c3a:	2b04      	cmp	r3, #4
 8014c3c:	f200 8159 	bhi.w	8014ef2 <LidarSetAngle+0xb62>
 8014c40:	a201      	add	r2, pc, #4	; (adr r2, 8014c48 <LidarSetAngle+0x8b8>)
 8014c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c46:	bf00      	nop
 8014c48:	08014c5d 	.word	0x08014c5d
 8014c4c:	08014d2b 	.word	0x08014d2b
 8014c50:	08014dc3 	.word	0x08014dc3
 8014c54:	08014ef3 	.word	0x08014ef3
 8014c58:	08014e5b 	.word	0x08014e5b
			{
				case BL:
					lidar->angle = FR;
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	2203      	movs	r2, #3
 8014c60:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014c64:	4b05      	ldr	r3, [pc, #20]	; (8014c7c <LidarSetAngle+0x8ec>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d021      	beq.n	8014cb0 <LidarSetAngle+0x920>
					{
						vesc_speed = BlueType2;
 8014c6c:	4b04      	ldr	r3, [pc, #16]	; (8014c80 <LidarSetAngle+0x8f0>)
 8014c6e:	4a0e      	ldr	r2, [pc, #56]	; (8014ca8 <LidarSetAngle+0x918>)
 8014c70:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014c72:	4b05      	ldr	r3, [pc, #20]	; (8014c88 <LidarSetAngle+0x8f8>)
 8014c74:	4a0d      	ldr	r2, [pc, #52]	; (8014cac <LidarSetAngle+0x91c>)
 8014c76:	601a      	str	r2, [r3, #0]
 8014c78:	e020      	b.n	8014cbc <LidarSetAngle+0x92c>
 8014c7a:	bf00      	nop
 8014c7c:	20006a44 	.word	0x20006a44
 8014c80:	200065b8 	.word	0x200065b8
 8014c84:	4151999a 	.word	0x4151999a
 8014c88:	20007494 	.word	0x20007494
 8014c8c:	4507a000 	.word	0x4507a000
 8014c90:	41540000 	.word	0x41540000
 8014c94:	4508e000 	.word	0x4508e000
 8014c98:	20006d44 	.word	0x20006d44
 8014c9c:	3e4ccccd 	.word	0x3e4ccccd
 8014ca0:	3d4ccccd 	.word	0x3d4ccccd
 8014ca4:	2000a240 	.word	0x2000a240
 8014ca8:	41026666 	.word	0x41026666
 8014cac:	45101000 	.word	0x45101000
					}
					else
					{
						vesc_speed = RedType2;
 8014cb0:	4bae      	ldr	r3, [pc, #696]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014cb2:	4aaf      	ldr	r2, [pc, #700]	; (8014f70 <LidarSetAngle+0xbe0>)
 8014cb4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014cb6:	4baf      	ldr	r3, [pc, #700]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014cb8:	4aaf      	ldr	r2, [pc, #700]	; (8014f78 <LidarSetAngle+0xbe8>)
 8014cba:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014cbc:	f7f9 fb46 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014cc0:	48ae      	ldr	r0, [pc, #696]	; (8014f7c <LidarSetAngle+0xbec>)
 8014cc2:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014cc6:	ed9f 1aae 	vldr	s2, [pc, #696]	; 8014f80 <LidarSetAngle+0xbf0>
 8014cca:	eddf 0aae 	vldr	s1, [pc, #696]	; 8014f84 <LidarSetAngle+0xbf4>
 8014cce:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014cd2:	f7f0 fef3 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014cda:	4aa8      	ldr	r2, [pc, #672]	; (8014f7c <LidarSetAngle+0xbec>)
 8014cdc:	2101      	movs	r1, #1
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7f0 ff76 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014ce4:	e00d      	b.n	8014d02 <LidarSetAngle+0x972>
					{
						if(ps4.button == SQUARE)
 8014ce6:	4ba8      	ldr	r3, [pc, #672]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cee:	d108      	bne.n	8014d02 <LidarSetAngle+0x972>
						{
							while(ps4.button == SQUARE);
 8014cf0:	bf00      	nop
 8014cf2:	4ba5      	ldr	r3, [pc, #660]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cfa:	d0fa      	beq.n	8014cf2 <LidarSetAngle+0x962>
							PP_stop(&pp);
 8014cfc:	489f      	ldr	r0, [pc, #636]	; (8014f7c <LidarSetAngle+0xbec>)
 8014cfe:	f7f1 fa9f 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014d02:	4b9e      	ldr	r3, [pc, #632]	; (8014f7c <LidarSetAngle+0xbec>)
 8014d04:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014d08:	f003 0301 	and.w	r3, r3, #1
 8014d0c:	b2db      	uxtb	r3, r3
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d1e9      	bne.n	8014ce6 <LidarSetAngle+0x956>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014d12:	489a      	ldr	r0, [pc, #616]	; (8014f7c <LidarSetAngle+0xbec>)
 8014d14:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014d18:	ed9f 1a99 	vldr	s2, [pc, #612]	; 8014f80 <LidarSetAngle+0xbf0>
 8014d1c:	eddf 0a99 	vldr	s1, [pc, #612]	; 8014f84 <LidarSetAngle+0xbf4>
 8014d20:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014d24:	f7f0 feca 	bl	8005abc <PP_PIDZSet>
					break;
 8014d28:	e0e4      	b.n	8014ef4 <LidarSetAngle+0xb64>

				case FL:
					lidar->angle = FR;
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	2203      	movs	r2, #3
 8014d2e:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014d32:	4b96      	ldr	r3, [pc, #600]	; (8014f8c <LidarSetAngle+0xbfc>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d006      	beq.n	8014d48 <LidarSetAngle+0x9b8>
					{
						vesc_speed = BlueType2;
 8014d3a:	4b8c      	ldr	r3, [pc, #560]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014d3c:	4a94      	ldr	r2, [pc, #592]	; (8014f90 <LidarSetAngle+0xc00>)
 8014d3e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014d40:	4b8c      	ldr	r3, [pc, #560]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014d42:	4a94      	ldr	r2, [pc, #592]	; (8014f94 <LidarSetAngle+0xc04>)
 8014d44:	601a      	str	r2, [r3, #0]
 8014d46:	e005      	b.n	8014d54 <LidarSetAngle+0x9c4>
					}
					else
					{
						vesc_speed = RedType2;
 8014d48:	4b88      	ldr	r3, [pc, #544]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014d4a:	4a89      	ldr	r2, [pc, #548]	; (8014f70 <LidarSetAngle+0xbe0>)
 8014d4c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014d4e:	4b89      	ldr	r3, [pc, #548]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014d50:	4a89      	ldr	r2, [pc, #548]	; (8014f78 <LidarSetAngle+0xbe8>)
 8014d52:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014d54:	f7f9 fafa 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014d58:	4888      	ldr	r0, [pc, #544]	; (8014f7c <LidarSetAngle+0xbec>)
 8014d5a:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014d5e:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8014f80 <LidarSetAngle+0xbf0>
 8014d62:	eddf 0a88 	vldr	s1, [pc, #544]	; 8014f84 <LidarSetAngle+0xbf4>
 8014d66:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014d6a:	f7f0 fea7 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d72:	4a82      	ldr	r2, [pc, #520]	; (8014f7c <LidarSetAngle+0xbec>)
 8014d74:	2101      	movs	r1, #1
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7f0 ff2a 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014d7c:	e00d      	b.n	8014d9a <LidarSetAngle+0xa0a>
					{
						if(ps4.button == SQUARE)
 8014d7e:	4b82      	ldr	r3, [pc, #520]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014d86:	d108      	bne.n	8014d9a <LidarSetAngle+0xa0a>
						{
							while(ps4.button == SQUARE);
 8014d88:	bf00      	nop
 8014d8a:	4b7f      	ldr	r3, [pc, #508]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014d92:	d0fa      	beq.n	8014d8a <LidarSetAngle+0x9fa>
							PP_stop(&pp);
 8014d94:	4879      	ldr	r0, [pc, #484]	; (8014f7c <LidarSetAngle+0xbec>)
 8014d96:	f7f1 fa53 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014d9a:	4b78      	ldr	r3, [pc, #480]	; (8014f7c <LidarSetAngle+0xbec>)
 8014d9c:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014da0:	f003 0301 	and.w	r3, r3, #1
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d1e9      	bne.n	8014d7e <LidarSetAngle+0x9ee>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014daa:	4874      	ldr	r0, [pc, #464]	; (8014f7c <LidarSetAngle+0xbec>)
 8014dac:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014db0:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8014f80 <LidarSetAngle+0xbf0>
 8014db4:	eddf 0a73 	vldr	s1, [pc, #460]	; 8014f84 <LidarSetAngle+0xbf4>
 8014db8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014dbc:	f7f0 fe7e 	bl	8005abc <PP_PIDZSet>
					break;
 8014dc0:	e098      	b.n	8014ef4 <LidarSetAngle+0xb64>

				case S:
					lidar->angle = FR;
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	2203      	movs	r2, #3
 8014dc6:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014dca:	4b70      	ldr	r3, [pc, #448]	; (8014f8c <LidarSetAngle+0xbfc>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d006      	beq.n	8014de0 <LidarSetAngle+0xa50>
					{
						vesc_speed = BlueType2;
 8014dd2:	4b66      	ldr	r3, [pc, #408]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014dd4:	4a6e      	ldr	r2, [pc, #440]	; (8014f90 <LidarSetAngle+0xc00>)
 8014dd6:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014dd8:	4b66      	ldr	r3, [pc, #408]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014dda:	4a6e      	ldr	r2, [pc, #440]	; (8014f94 <LidarSetAngle+0xc04>)
 8014ddc:	601a      	str	r2, [r3, #0]
 8014dde:	e005      	b.n	8014dec <LidarSetAngle+0xa5c>
					}
					else
					{
						vesc_speed = RedType2;
 8014de0:	4b62      	ldr	r3, [pc, #392]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014de2:	4a63      	ldr	r2, [pc, #396]	; (8014f70 <LidarSetAngle+0xbe0>)
 8014de4:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014de6:	4b63      	ldr	r3, [pc, #396]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014de8:	4a63      	ldr	r2, [pc, #396]	; (8014f78 <LidarSetAngle+0xbe8>)
 8014dea:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014dec:	f7f9 faae 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014df0:	4862      	ldr	r0, [pc, #392]	; (8014f7c <LidarSetAngle+0xbec>)
 8014df2:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014df6:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8014f80 <LidarSetAngle+0xbf0>
 8014dfa:	eddf 0a62 	vldr	s1, [pc, #392]	; 8014f84 <LidarSetAngle+0xbf4>
 8014dfe:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014e02:	f7f0 fe5b 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014e0a:	4a5c      	ldr	r2, [pc, #368]	; (8014f7c <LidarSetAngle+0xbec>)
 8014e0c:	2101      	movs	r1, #1
 8014e0e:	4618      	mov	r0, r3
 8014e10:	f7f0 fede 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014e14:	e00d      	b.n	8014e32 <LidarSetAngle+0xaa2>
					{
						if(ps4.button == SQUARE)
 8014e16:	4b5c      	ldr	r3, [pc, #368]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014e1e:	d108      	bne.n	8014e32 <LidarSetAngle+0xaa2>
						{
							while(ps4.button == SQUARE);
 8014e20:	bf00      	nop
 8014e22:	4b59      	ldr	r3, [pc, #356]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014e2a:	d0fa      	beq.n	8014e22 <LidarSetAngle+0xa92>
							PP_stop(&pp);
 8014e2c:	4853      	ldr	r0, [pc, #332]	; (8014f7c <LidarSetAngle+0xbec>)
 8014e2e:	f7f1 fa07 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014e32:	4b52      	ldr	r3, [pc, #328]	; (8014f7c <LidarSetAngle+0xbec>)
 8014e34:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014e38:	f003 0301 	and.w	r3, r3, #1
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d1e9      	bne.n	8014e16 <LidarSetAngle+0xa86>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014e42:	484e      	ldr	r0, [pc, #312]	; (8014f7c <LidarSetAngle+0xbec>)
 8014e44:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014e48:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8014f80 <LidarSetAngle+0xbf0>
 8014e4c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8014f84 <LidarSetAngle+0xbf4>
 8014e50:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014e54:	f7f0 fe32 	bl	8005abc <PP_PIDZSet>
					break;
 8014e58:	e04c      	b.n	8014ef4 <LidarSetAngle+0xb64>

				case BR:
					lidar->angle = FR;
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	2203      	movs	r2, #3
 8014e5e:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014e62:	4b4a      	ldr	r3, [pc, #296]	; (8014f8c <LidarSetAngle+0xbfc>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d006      	beq.n	8014e78 <LidarSetAngle+0xae8>
					{
						vesc_speed = BlueType2;
 8014e6a:	4b40      	ldr	r3, [pc, #256]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014e6c:	4a48      	ldr	r2, [pc, #288]	; (8014f90 <LidarSetAngle+0xc00>)
 8014e6e:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueOppoType2RotateDuty;
 8014e70:	4b40      	ldr	r3, [pc, #256]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014e72:	4a48      	ldr	r2, [pc, #288]	; (8014f94 <LidarSetAngle+0xc04>)
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	e005      	b.n	8014e84 <LidarSetAngle+0xaf4>
					}
					else
					{
						vesc_speed = RedType2;
 8014e78:	4b3c      	ldr	r3, [pc, #240]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014e7a:	4a3d      	ldr	r2, [pc, #244]	; (8014f70 <LidarSetAngle+0xbe0>)
 8014e7c:	601a      	str	r2, [r3, #0]
						vesc_duty = RedOppoType2RotateDuty;
 8014e7e:	4b3d      	ldr	r3, [pc, #244]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014e80:	4a3d      	ldr	r2, [pc, #244]	; (8014f78 <LidarSetAngle+0xbe8>)
 8014e82:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014e84:	f7f9 fa62 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014e88:	483c      	ldr	r0, [pc, #240]	; (8014f7c <LidarSetAngle+0xbec>)
 8014e8a:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014e8e:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8014f80 <LidarSetAngle+0xbf0>
 8014e92:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8014f84 <LidarSetAngle+0xbf4>
 8014e96:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014e9a:	f7f0 fe0f 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_FR, 1, &pp);
 8014e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014ea2:	4a36      	ldr	r2, [pc, #216]	; (8014f7c <LidarSetAngle+0xbec>)
 8014ea4:	2101      	movs	r1, #1
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7f0 fe92 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014eac:	e00d      	b.n	8014eca <LidarSetAngle+0xb3a>
					{
						if(ps4.button == SQUARE)
 8014eae:	4b36      	ldr	r3, [pc, #216]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014eb6:	d108      	bne.n	8014eca <LidarSetAngle+0xb3a>
						{
							while(ps4.button == SQUARE);
 8014eb8:	bf00      	nop
 8014eba:	4b33      	ldr	r3, [pc, #204]	; (8014f88 <LidarSetAngle+0xbf8>)
 8014ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ec2:	d0fa      	beq.n	8014eba <LidarSetAngle+0xb2a>
							PP_stop(&pp);
 8014ec4:	482d      	ldr	r0, [pc, #180]	; (8014f7c <LidarSetAngle+0xbec>)
 8014ec6:	f7f1 f9bb 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014eca:	4b2c      	ldr	r3, [pc, #176]	; (8014f7c <LidarSetAngle+0xbec>)
 8014ecc:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014ed0:	f003 0301 	and.w	r3, r3, #1
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d1e9      	bne.n	8014eae <LidarSetAngle+0xb1e>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014eda:	4828      	ldr	r0, [pc, #160]	; (8014f7c <LidarSetAngle+0xbec>)
 8014edc:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014ee0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8014f80 <LidarSetAngle+0xbf0>
 8014ee4:	eddf 0a27 	vldr	s1, [pc, #156]	; 8014f84 <LidarSetAngle+0xbf4>
 8014ee8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014eec:	f7f0 fde6 	bl	8005abc <PP_PIDZSet>
					break;
 8014ef0:	e000      	b.n	8014ef4 <LidarSetAngle+0xb64>

				default:
					break;
 8014ef2:	bf00      	nop
			}
			break;
 8014ef4:	e15d      	b.n	80151b2 <LidarSetAngle+0xe22>

		case BR:
			switch(lidar->angle)
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	f893 31ce 	ldrb.w	r3, [r3, #462]	; 0x1ce
 8014efc:	2b03      	cmp	r3, #3
 8014efe:	f200 8155 	bhi.w	80151ac <LidarSetAngle+0xe1c>
 8014f02:	a201      	add	r2, pc, #4	; (adr r2, 8014f08 <LidarSetAngle+0xb78>)
 8014f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f08:	08014fe5 	.word	0x08014fe5
 8014f0c:	08014f19 	.word	0x08014f19
 8014f10:	0801507d 	.word	0x0801507d
 8014f14:	08015115 	.word	0x08015115
			{
				case FL:
					lidar->angle = BR;
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	2204      	movs	r2, #4
 8014f1c:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014f20:	4b1a      	ldr	r3, [pc, #104]	; (8014f8c <LidarSetAngle+0xbfc>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d006      	beq.n	8014f36 <LidarSetAngle+0xba6>
					{
						vesc_speed = BlueType2;
 8014f28:	4b10      	ldr	r3, [pc, #64]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014f2a:	4a19      	ldr	r2, [pc, #100]	; (8014f90 <LidarSetAngle+0xc00>)
 8014f2c:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014f2e:	4b11      	ldr	r3, [pc, #68]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014f30:	4a19      	ldr	r2, [pc, #100]	; (8014f98 <LidarSetAngle+0xc08>)
 8014f32:	601a      	str	r2, [r3, #0]
 8014f34:	e005      	b.n	8014f42 <LidarSetAngle+0xbb2>
					}
					else
					{
						vesc_speed = RedType2;
 8014f36:	4b0d      	ldr	r3, [pc, #52]	; (8014f6c <LidarSetAngle+0xbdc>)
 8014f38:	4a0d      	ldr	r2, [pc, #52]	; (8014f70 <LidarSetAngle+0xbe0>)
 8014f3a:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8014f3c:	4b0d      	ldr	r3, [pc, #52]	; (8014f74 <LidarSetAngle+0xbe4>)
 8014f3e:	4a17      	ldr	r2, [pc, #92]	; (8014f9c <LidarSetAngle+0xc0c>)
 8014f40:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 8014f42:	f7f9 fa03 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8014f46:	480d      	ldr	r0, [pc, #52]	; (8014f7c <LidarSetAngle+0xbec>)
 8014f48:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8014f4c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8014f80 <LidarSetAngle+0xbf0>
 8014f50:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8014f84 <LidarSetAngle+0xbf4>
 8014f54:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014f58:	f7f0 fdb0 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8014f5c:	f107 030c 	add.w	r3, r7, #12
 8014f60:	4a06      	ldr	r2, [pc, #24]	; (8014f7c <LidarSetAngle+0xbec>)
 8014f62:	2101      	movs	r1, #1
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7f0 fe33 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8014f6a:	e027      	b.n	8014fbc <LidarSetAngle+0xc2c>
 8014f6c:	200065b8 	.word	0x200065b8
 8014f70:	4104cccd 	.word	0x4104cccd
 8014f74:	20007494 	.word	0x20007494
 8014f78:	4511a000 	.word	0x4511a000
 8014f7c:	20006d44 	.word	0x20006d44
 8014f80:	3e4ccccd 	.word	0x3e4ccccd
 8014f84:	3d4ccccd 	.word	0x3d4ccccd
 8014f88:	2000a240 	.word	0x2000a240
 8014f8c:	20006a44 	.word	0x20006a44
 8014f90:	41026666 	.word	0x41026666
 8014f94:	45101000 	.word	0x45101000
 8014f98:	44da2000 	.word	0x44da2000
 8014f9c:	44dc0000 	.word	0x44dc0000
					{
						if(ps4.button == SQUARE)
 8014fa0:	4b86      	ldr	r3, [pc, #536]	; (80151bc <LidarSetAngle+0xe2c>)
 8014fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fa8:	d108      	bne.n	8014fbc <LidarSetAngle+0xc2c>
						{
							while(ps4.button == SQUARE);
 8014faa:	bf00      	nop
 8014fac:	4b83      	ldr	r3, [pc, #524]	; (80151bc <LidarSetAngle+0xe2c>)
 8014fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fb4:	d0fa      	beq.n	8014fac <LidarSetAngle+0xc1c>
							PP_stop(&pp);
 8014fb6:	4882      	ldr	r0, [pc, #520]	; (80151c0 <LidarSetAngle+0xe30>)
 8014fb8:	f7f1 f942 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8014fbc:	4b80      	ldr	r3, [pc, #512]	; (80151c0 <LidarSetAngle+0xe30>)
 8014fbe:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8014fc2:	f003 0301 	and.w	r3, r3, #1
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d1e9      	bne.n	8014fa0 <LidarSetAngle+0xc10>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8014fcc:	487c      	ldr	r0, [pc, #496]	; (80151c0 <LidarSetAngle+0xe30>)
 8014fce:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8014fd2:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80151c4 <LidarSetAngle+0xe34>
 8014fd6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80151c8 <LidarSetAngle+0xe38>
 8014fda:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8014fde:	f7f0 fd6d 	bl	8005abc <PP_PIDZSet>
					break;
 8014fe2:	e0e4      	b.n	80151ae <LidarSetAngle+0xe1e>

				case BL:
					lidar->angle = BR;
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	2204      	movs	r2, #4
 8014fe8:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8014fec:	4b77      	ldr	r3, [pc, #476]	; (80151cc <LidarSetAngle+0xe3c>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d006      	beq.n	8015002 <LidarSetAngle+0xc72>
					{
						vesc_speed = BlueType2;
 8014ff4:	4b76      	ldr	r3, [pc, #472]	; (80151d0 <LidarSetAngle+0xe40>)
 8014ff6:	4a77      	ldr	r2, [pc, #476]	; (80151d4 <LidarSetAngle+0xe44>)
 8014ff8:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8014ffa:	4b77      	ldr	r3, [pc, #476]	; (80151d8 <LidarSetAngle+0xe48>)
 8014ffc:	4a77      	ldr	r2, [pc, #476]	; (80151dc <LidarSetAngle+0xe4c>)
 8014ffe:	601a      	str	r2, [r3, #0]
 8015000:	e005      	b.n	801500e <LidarSetAngle+0xc7e>
					}
					else
					{
						vesc_speed = RedType2;
 8015002:	4b73      	ldr	r3, [pc, #460]	; (80151d0 <LidarSetAngle+0xe40>)
 8015004:	4a76      	ldr	r2, [pc, #472]	; (80151e0 <LidarSetAngle+0xe50>)
 8015006:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8015008:	4b73      	ldr	r3, [pc, #460]	; (80151d8 <LidarSetAngle+0xe48>)
 801500a:	4a76      	ldr	r2, [pc, #472]	; (80151e4 <LidarSetAngle+0xe54>)
 801500c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801500e:	f7f9 f99d 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8015012:	486b      	ldr	r0, [pc, #428]	; (80151c0 <LidarSetAngle+0xe30>)
 8015014:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8015018:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 80151c4 <LidarSetAngle+0xe34>
 801501c:	eddf 0a6a 	vldr	s1, [pc, #424]	; 80151c8 <LidarSetAngle+0xe38>
 8015020:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8015024:	f7f0 fd4a 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8015028:	f107 030c 	add.w	r3, r7, #12
 801502c:	4a64      	ldr	r2, [pc, #400]	; (80151c0 <LidarSetAngle+0xe30>)
 801502e:	2101      	movs	r1, #1
 8015030:	4618      	mov	r0, r3
 8015032:	f7f0 fdcd 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8015036:	e00d      	b.n	8015054 <LidarSetAngle+0xcc4>
					{
						if(ps4.button == SQUARE)
 8015038:	4b60      	ldr	r3, [pc, #384]	; (80151bc <LidarSetAngle+0xe2c>)
 801503a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801503c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015040:	d108      	bne.n	8015054 <LidarSetAngle+0xcc4>
						{
							while(ps4.button == SQUARE);
 8015042:	bf00      	nop
 8015044:	4b5d      	ldr	r3, [pc, #372]	; (80151bc <LidarSetAngle+0xe2c>)
 8015046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801504c:	d0fa      	beq.n	8015044 <LidarSetAngle+0xcb4>
							PP_stop(&pp);
 801504e:	485c      	ldr	r0, [pc, #368]	; (80151c0 <LidarSetAngle+0xe30>)
 8015050:	f7f1 f8f6 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8015054:	4b5a      	ldr	r3, [pc, #360]	; (80151c0 <LidarSetAngle+0xe30>)
 8015056:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801505a:	f003 0301 	and.w	r3, r3, #1
 801505e:	b2db      	uxtb	r3, r3
 8015060:	2b00      	cmp	r3, #0
 8015062:	d1e9      	bne.n	8015038 <LidarSetAngle+0xca8>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8015064:	4856      	ldr	r0, [pc, #344]	; (80151c0 <LidarSetAngle+0xe30>)
 8015066:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801506a:	ed9f 1a56 	vldr	s2, [pc, #344]	; 80151c4 <LidarSetAngle+0xe34>
 801506e:	eddf 0a56 	vldr	s1, [pc, #344]	; 80151c8 <LidarSetAngle+0xe38>
 8015072:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8015076:	f7f0 fd21 	bl	8005abc <PP_PIDZSet>
					break;
 801507a:	e098      	b.n	80151ae <LidarSetAngle+0xe1e>

				case S:
					lidar->angle = BR;
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	2204      	movs	r2, #4
 8015080:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 8015084:	4b51      	ldr	r3, [pc, #324]	; (80151cc <LidarSetAngle+0xe3c>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d006      	beq.n	801509a <LidarSetAngle+0xd0a>
					{
						vesc_speed = BlueType2;
 801508c:	4b50      	ldr	r3, [pc, #320]	; (80151d0 <LidarSetAngle+0xe40>)
 801508e:	4a51      	ldr	r2, [pc, #324]	; (80151d4 <LidarSetAngle+0xe44>)
 8015090:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 8015092:	4b51      	ldr	r3, [pc, #324]	; (80151d8 <LidarSetAngle+0xe48>)
 8015094:	4a51      	ldr	r2, [pc, #324]	; (80151dc <LidarSetAngle+0xe4c>)
 8015096:	601a      	str	r2, [r3, #0]
 8015098:	e005      	b.n	80150a6 <LidarSetAngle+0xd16>
					}
					else
					{
						vesc_speed = RedType2;
 801509a:	4b4d      	ldr	r3, [pc, #308]	; (80151d0 <LidarSetAngle+0xe40>)
 801509c:	4a50      	ldr	r2, [pc, #320]	; (80151e0 <LidarSetAngle+0xe50>)
 801509e:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 80150a0:	4b4d      	ldr	r3, [pc, #308]	; (80151d8 <LidarSetAngle+0xe48>)
 80150a2:	4a50      	ldr	r2, [pc, #320]	; (80151e4 <LidarSetAngle+0xe54>)
 80150a4:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 80150a6:	f7f9 f951 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 80150aa:	4845      	ldr	r0, [pc, #276]	; (80151c0 <LidarSetAngle+0xe30>)
 80150ac:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 80150b0:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80151c4 <LidarSetAngle+0xe34>
 80150b4:	eddf 0a44 	vldr	s1, [pc, #272]	; 80151c8 <LidarSetAngle+0xe38>
 80150b8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80150bc:	f7f0 fcfe 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 80150c0:	f107 030c 	add.w	r3, r7, #12
 80150c4:	4a3e      	ldr	r2, [pc, #248]	; (80151c0 <LidarSetAngle+0xe30>)
 80150c6:	2101      	movs	r1, #1
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7f0 fd81 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 80150ce:	e00d      	b.n	80150ec <LidarSetAngle+0xd5c>
					{
						if(ps4.button == SQUARE)
 80150d0:	4b3a      	ldr	r3, [pc, #232]	; (80151bc <LidarSetAngle+0xe2c>)
 80150d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150d8:	d108      	bne.n	80150ec <LidarSetAngle+0xd5c>
						{
							while(ps4.button == SQUARE);
 80150da:	bf00      	nop
 80150dc:	4b37      	ldr	r3, [pc, #220]	; (80151bc <LidarSetAngle+0xe2c>)
 80150de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150e4:	d0fa      	beq.n	80150dc <LidarSetAngle+0xd4c>
							PP_stop(&pp);
 80150e6:	4836      	ldr	r0, [pc, #216]	; (80151c0 <LidarSetAngle+0xe30>)
 80150e8:	f7f1 f8aa 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 80150ec:	4b34      	ldr	r3, [pc, #208]	; (80151c0 <LidarSetAngle+0xe30>)
 80150ee:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 80150f2:	f003 0301 	and.w	r3, r3, #1
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d1e9      	bne.n	80150d0 <LidarSetAngle+0xd40>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 80150fc:	4830      	ldr	r0, [pc, #192]	; (80151c0 <LidarSetAngle+0xe30>)
 80150fe:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 8015102:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80151c4 <LidarSetAngle+0xe34>
 8015106:	eddf 0a30 	vldr	s1, [pc, #192]	; 80151c8 <LidarSetAngle+0xe38>
 801510a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 801510e:	f7f0 fcd5 	bl	8005abc <PP_PIDZSet>
					break;
 8015112:	e04c      	b.n	80151ae <LidarSetAngle+0xe1e>

				case FR:
					lidar->angle = BR;
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	2204      	movs	r2, #4
 8015118:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
					if(blue)
 801511c:	4b2b      	ldr	r3, [pc, #172]	; (80151cc <LidarSetAngle+0xe3c>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d006      	beq.n	8015132 <LidarSetAngle+0xda2>
					{
						vesc_speed = BlueType2;
 8015124:	4b2a      	ldr	r3, [pc, #168]	; (80151d0 <LidarSetAngle+0xe40>)
 8015126:	4a2b      	ldr	r2, [pc, #172]	; (80151d4 <LidarSetAngle+0xe44>)
 8015128:	601a      	str	r2, [r3, #0]
						vesc_duty = BlueType2RotateDuty;
 801512a:	4b2b      	ldr	r3, [pc, #172]	; (80151d8 <LidarSetAngle+0xe48>)
 801512c:	4a2b      	ldr	r2, [pc, #172]	; (80151dc <LidarSetAngle+0xe4c>)
 801512e:	601a      	str	r2, [r3, #0]
 8015130:	e005      	b.n	801513e <LidarSetAngle+0xdae>
					}
					else
					{
						vesc_speed = RedType2;
 8015132:	4b27      	ldr	r3, [pc, #156]	; (80151d0 <LidarSetAngle+0xe40>)
 8015134:	4a2a      	ldr	r2, [pc, #168]	; (80151e0 <LidarSetAngle+0xe50>)
 8015136:	601a      	str	r2, [r3, #0]
						vesc_duty = RedType2RotateDuty;
 8015138:	4b27      	ldr	r3, [pc, #156]	; (80151d8 <LidarSetAngle+0xe48>)
 801513a:	4a2a      	ldr	r2, [pc, #168]	; (80151e4 <LidarSetAngle+0xe54>)
 801513c:	601a      	str	r2, [r3, #0]
					}
					ResetCoordinate();
 801513e:	f7f9 f905 	bl	800e34c <ResetCoordinate>
					PP_PIDZSet(0.75, 0.05, 0.2, 6.5, &pp);
 8015142:	481f      	ldr	r0, [pc, #124]	; (80151c0 <LidarSetAngle+0xe30>)
 8015144:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8015148:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 80151c4 <LidarSetAngle+0xe34>
 801514c:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80151c8 <LidarSetAngle+0xe38>
 8015150:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8015154:	f7f0 fcb2 	bl	8005abc <PP_PIDZSet>
					PP_start(angle_BR, 1, &pp);
 8015158:	f107 030c 	add.w	r3, r7, #12
 801515c:	4a18      	ldr	r2, [pc, #96]	; (80151c0 <LidarSetAngle+0xe30>)
 801515e:	2101      	movs	r1, #1
 8015160:	4618      	mov	r0, r3
 8015162:	f7f0 fd35 	bl	8005bd0 <PP_start>
					while(pp.pp_start)
 8015166:	e00d      	b.n	8015184 <LidarSetAngle+0xdf4>
					{
						if(ps4.button == SQUARE)
 8015168:	4b14      	ldr	r3, [pc, #80]	; (80151bc <LidarSetAngle+0xe2c>)
 801516a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801516c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015170:	d108      	bne.n	8015184 <LidarSetAngle+0xdf4>
						{
							while(ps4.button == SQUARE);
 8015172:	bf00      	nop
 8015174:	4b11      	ldr	r3, [pc, #68]	; (80151bc <LidarSetAngle+0xe2c>)
 8015176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801517c:	d0fa      	beq.n	8015174 <LidarSetAngle+0xde4>
							PP_stop(&pp);
 801517e:	4810      	ldr	r0, [pc, #64]	; (80151c0 <LidarSetAngle+0xe30>)
 8015180:	f7f1 f85e 	bl	8006240 <PP_stop>
					while(pp.pp_start)
 8015184:	4b0e      	ldr	r3, [pc, #56]	; (80151c0 <LidarSetAngle+0xe30>)
 8015186:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801518a:	f003 0301 	and.w	r3, r3, #1
 801518e:	b2db      	uxtb	r3, r3
 8015190:	2b00      	cmp	r3, #0
 8015192:	d1e9      	bne.n	8015168 <LidarSetAngle+0xdd8>
						}
					}
					PP_PIDZSet(0.75, 0.05, 0.2, 5.5, &pp);
 8015194:	480a      	ldr	r0, [pc, #40]	; (80151c0 <LidarSetAngle+0xe30>)
 8015196:	eef1 1a06 	vmov.f32	s3, #22	; 0x40b00000  5.5
 801519a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80151c4 <LidarSetAngle+0xe34>
 801519e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80151c8 <LidarSetAngle+0xe38>
 80151a2:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80151a6:	f7f0 fc89 	bl	8005abc <PP_PIDZSet>
					break;
 80151aa:	e000      	b.n	80151ae <LidarSetAngle+0xe1e>

				default:
					break;
 80151ac:	bf00      	nop
			}
			break;
 80151ae:	e000      	b.n	80151b2 <LidarSetAngle+0xe22>

		default:
			break;
 80151b0:	bf00      	nop
	}
}
 80151b2:	bf00      	nop
 80151b4:	3798      	adds	r7, #152	; 0x98
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bdb0      	pop	{r4, r5, r7, pc}
 80151ba:	bf00      	nop
 80151bc:	2000a240 	.word	0x2000a240
 80151c0:	20006d44 	.word	0x20006d44
 80151c4:	3e4ccccd 	.word	0x3e4ccccd
 80151c8:	3d4ccccd 	.word	0x3d4ccccd
 80151cc:	20006a44 	.word	0x20006a44
 80151d0:	200065b8 	.word	0x200065b8
 80151d4:	41026666 	.word	0x41026666
 80151d8:	20007494 	.word	0x20007494
 80151dc:	44da2000 	.word	0x44da2000
 80151e0:	4104cccd 	.word	0x4104cccd
 80151e4:	44dc0000 	.word	0x44dc0000

080151e8 <LidarAdjust>:

void LidarAdjust(Lidar_t* lidar)
{
 80151e8:	b5b0      	push	{r4, r5, r7, lr}
 80151ea:	b08a      	sub	sp, #40	; 0x28
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
	if(lidar->AdjEnb)
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f000 81b6 	beq.w	8015568 <LidarAdjust+0x380>
//				PP_stop(&pp);
//			}
//		}

		// Ensure robot sticking fence
		float stick_fence_point[1][7] = {{2.0, 0, 5, -90, 0, 0, 0}};
 80151fc:	4bb2      	ldr	r3, [pc, #712]	; (80154c8 <LidarAdjust+0x2e0>)
 80151fe:	f107 040c 	add.w	r4, r7, #12
 8015202:	461d      	mov	r5, r3
 8015204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015208:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801520c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		PP_start(stick_fence_point, 1, &pp);
 8015210:	f107 030c 	add.w	r3, r7, #12
 8015214:	4aad      	ldr	r2, [pc, #692]	; (80154cc <LidarAdjust+0x2e4>)
 8015216:	2101      	movs	r1, #1
 8015218:	4618      	mov	r0, r3
 801521a:	f7f0 fcd9 	bl	8005bd0 <PP_start>
		while(pp.pp_start)
 801521e:	e01e      	b.n	801525e <LidarAdjust+0x76>
		{
			if(ps4.button == SQUARE)
 8015220:	4bab      	ldr	r3, [pc, #684]	; (80154d0 <LidarAdjust+0x2e8>)
 8015222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015228:	d108      	bne.n	801523c <LidarAdjust+0x54>
			{
				while(ps4.button == SQUARE);
 801522a:	bf00      	nop
 801522c:	4ba8      	ldr	r3, [pc, #672]	; (80154d0 <LidarAdjust+0x2e8>)
 801522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015234:	d0fa      	beq.n	801522c <LidarAdjust+0x44>
				PP_stop(&pp);
 8015236:	48a5      	ldr	r0, [pc, #660]	; (80154cc <LidarAdjust+0x2e4>)
 8015238:	f7f1 f802 	bl	8006240 <PP_stop>
			}

			if(In_LS_Shot_1 || In_LS_Shot_2)
 801523c:	2108      	movs	r1, #8
 801523e:	48a5      	ldr	r0, [pc, #660]	; (80154d4 <LidarAdjust+0x2ec>)
 8015240:	f002 fd8a 	bl	8017d58 <HAL_GPIO_ReadPin>
 8015244:	4603      	mov	r3, r0
 8015246:	2b00      	cmp	r3, #0
 8015248:	d006      	beq.n	8015258 <LidarAdjust+0x70>
 801524a:	2110      	movs	r1, #16
 801524c:	48a1      	ldr	r0, [pc, #644]	; (80154d4 <LidarAdjust+0x2ec>)
 801524e:	f002 fd83 	bl	8017d58 <HAL_GPIO_ReadPin>
 8015252:	4603      	mov	r3, r0
 8015254:	2b00      	cmp	r3, #0
 8015256:	d102      	bne.n	801525e <LidarAdjust+0x76>
				PP_stop(&pp);
 8015258:	489c      	ldr	r0, [pc, #624]	; (80154cc <LidarAdjust+0x2e4>)
 801525a:	f7f0 fff1 	bl	8006240 <PP_stop>
		while(pp.pp_start)
 801525e:	4b9b      	ldr	r3, [pc, #620]	; (80154cc <LidarAdjust+0x2e4>)
 8015260:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8015264:	f003 0301 	and.w	r3, r3, #1
 8015268:	b2db      	uxtb	r3, r3
 801526a:	2b00      	cmp	r3, #0
 801526c:	d1d8      	bne.n	8015220 <LidarAdjust+0x38>
		}

		// Only adjust after reached destination
		switch(lidar->pos)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8015274:	3b02      	subs	r3, #2
 8015276:	2b06      	cmp	r3, #6
 8015278:	f200 8175 	bhi.w	8015566 <LidarAdjust+0x37e>
 801527c:	a201      	add	r2, pc, #4	; (adr r2, 8015284 <LidarAdjust+0x9c>)
 801527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015282:	bf00      	nop
 8015284:	08015567 	.word	0x08015567
 8015288:	080152a1 	.word	0x080152a1
 801528c:	0801532b 	.word	0x0801532b
 8015290:	080153b5 	.word	0x080153b5
 8015294:	0801543f 	.word	0x0801543f
 8015298:	080154dd 	.word	0x080154dd
 801529c:	08015567 	.word	0x08015567
				 * Path plan to desired position
				 */
				break;

			case CENTER_1:
				LidarSendIns(NEAR, lidar);
 80152a0:	6879      	ldr	r1, [r7, #4]
 80152a2:	2001      	movs	r0, #1
 80152a4:	f000 fc36 	bl	8015b14 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_1_offset_x;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7eb f947 	bl	8000548 <__aeabi_f2d>
 80152ba:	4602      	mov	r2, r0
 80152bc:	460b      	mov	r3, r1
 80152be:	4620      	mov	r0, r4
 80152c0:	4629      	mov	r1, r5
 80152c2:	f7ea ffe1 	bl	8000288 <__aeabi_dsub>
 80152c6:	4602      	mov	r2, r0
 80152c8:	460b      	mov	r3, r1
 80152ca:	4610      	mov	r0, r2
 80152cc:	4619      	mov	r1, r3
 80152ce:	f7eb fc8b 	bl	8000be8 <__aeabi_d2f>
 80152d2:	4602      	mov	r2, r0
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_1_offset_y;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80152e6:	4618      	mov	r0, r3
 80152e8:	f7eb f92e 	bl	8000548 <__aeabi_f2d>
 80152ec:	4602      	mov	r2, r0
 80152ee:	460b      	mov	r3, r1
 80152f0:	4620      	mov	r0, r4
 80152f2:	4629      	mov	r1, r5
 80152f4:	f7ea ffc8 	bl	8000288 <__aeabi_dsub>
 80152f8:	4602      	mov	r2, r0
 80152fa:	460b      	mov	r3, r1
 80152fc:	4610      	mov	r0, r2
 80152fe:	4619      	mov	r1, r3
 8015300:	f7eb fc72 	bl	8000be8 <__aeabi_d2f>
 8015304:	4602      	mov	r2, r0
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8015318:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 80154d8 <LidarAdjust+0x2f0>
 801531c:	eef0 0a47 	vmov.f32	s1, s14
 8015320:	eeb0 0a67 	vmov.f32	s0, s15
 8015324:	f000 f924 	bl	8015570 <LidarAdjustPP>
				break;
 8015328:	e11e      	b.n	8015568 <LidarAdjust+0x380>

			case CENTER_2:
				LidarSendIns(NEAR, lidar);
 801532a:	6879      	ldr	r1, [r7, #4]
 801532c:	2001      	movs	r0, #1
 801532e:	f000 fbf1 	bl	8015b14 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_2_offset_x;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801533e:	4618      	mov	r0, r3
 8015340:	f7eb f902 	bl	8000548 <__aeabi_f2d>
 8015344:	4602      	mov	r2, r0
 8015346:	460b      	mov	r3, r1
 8015348:	4620      	mov	r0, r4
 801534a:	4629      	mov	r1, r5
 801534c:	f7ea ff9c 	bl	8000288 <__aeabi_dsub>
 8015350:	4602      	mov	r2, r0
 8015352:	460b      	mov	r3, r1
 8015354:	4610      	mov	r0, r2
 8015356:	4619      	mov	r1, r3
 8015358:	f7eb fc46 	bl	8000be8 <__aeabi_d2f>
 801535c:	4602      	mov	r2, r0
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_2_offset_y;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8015370:	4618      	mov	r0, r3
 8015372:	f7eb f8e9 	bl	8000548 <__aeabi_f2d>
 8015376:	4602      	mov	r2, r0
 8015378:	460b      	mov	r3, r1
 801537a:	4620      	mov	r0, r4
 801537c:	4629      	mov	r1, r5
 801537e:	f7ea ff83 	bl	8000288 <__aeabi_dsub>
 8015382:	4602      	mov	r2, r0
 8015384:	460b      	mov	r3, r1
 8015386:	4610      	mov	r0, r2
 8015388:	4619      	mov	r1, r3
 801538a:	f7eb fc2d 	bl	8000be8 <__aeabi_d2f>
 801538e:	4602      	mov	r2, r0
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80153a2:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80154d8 <LidarAdjust+0x2f0>
 80153a6:	eef0 0a47 	vmov.f32	s1, s14
 80153aa:	eeb0 0a67 	vmov.f32	s0, s15
 80153ae:	f000 f8df 	bl	8015570 <LidarAdjustPP>
				break;
 80153b2:	e0d9      	b.n	8015568 <LidarAdjust+0x380>

			case CENTER:
				LidarSendIns(NEAR, lidar);
 80153b4:	6879      	ldr	r1, [r7, #4]
 80153b6:	2001      	movs	r0, #1
 80153b8:	f000 fbac 	bl	8015b14 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_offset_x;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7eb f8bd 	bl	8000548 <__aeabi_f2d>
 80153ce:	4602      	mov	r2, r0
 80153d0:	460b      	mov	r3, r1
 80153d2:	4620      	mov	r0, r4
 80153d4:	4629      	mov	r1, r5
 80153d6:	f7ea ff57 	bl	8000288 <__aeabi_dsub>
 80153da:	4602      	mov	r2, r0
 80153dc:	460b      	mov	r3, r1
 80153de:	4610      	mov	r0, r2
 80153e0:	4619      	mov	r1, r3
 80153e2:	f7eb fc01 	bl	8000be8 <__aeabi_d2f>
 80153e6:	4602      	mov	r2, r0
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_offset_y;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7eb f8a4 	bl	8000548 <__aeabi_f2d>
 8015400:	4602      	mov	r2, r0
 8015402:	460b      	mov	r3, r1
 8015404:	4620      	mov	r0, r4
 8015406:	4629      	mov	r1, r5
 8015408:	f7ea ff3e 	bl	8000288 <__aeabi_dsub>
 801540c:	4602      	mov	r2, r0
 801540e:	460b      	mov	r3, r1
 8015410:	4610      	mov	r0, r2
 8015412:	4619      	mov	r1, r3
 8015414:	f7eb fbe8 	bl	8000be8 <__aeabi_d2f>
 8015418:	4602      	mov	r2, r0
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 801542c:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 80154d8 <LidarAdjust+0x2f0>
 8015430:	eef0 0a47 	vmov.f32	s1, s14
 8015434:	eeb0 0a67 	vmov.f32	s0, s15
 8015438:	f000 f89a 	bl	8015570 <LidarAdjustPP>
				break;
 801543c:	e094      	b.n	8015568 <LidarAdjust+0x380>

			case CENTER_3:
				LidarSendIns(NEAR, lidar);
 801543e:	6879      	ldr	r1, [r7, #4]
 8015440:	2001      	movs	r0, #1
 8015442:	f000 fb67 	bl	8015b14 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_3_offset_x;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015452:	4618      	mov	r0, r3
 8015454:	f7eb f878 	bl	8000548 <__aeabi_f2d>
 8015458:	4602      	mov	r2, r0
 801545a:	460b      	mov	r3, r1
 801545c:	4620      	mov	r0, r4
 801545e:	4629      	mov	r1, r5
 8015460:	f7ea ff12 	bl	8000288 <__aeabi_dsub>
 8015464:	4602      	mov	r2, r0
 8015466:	460b      	mov	r3, r1
 8015468:	4610      	mov	r0, r2
 801546a:	4619      	mov	r1, r3
 801546c:	f7eb fbbc 	bl	8000be8 <__aeabi_d2f>
 8015470:	4602      	mov	r2, r0
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_3_offset_y;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8015484:	4618      	mov	r0, r3
 8015486:	f7eb f85f 	bl	8000548 <__aeabi_f2d>
 801548a:	4602      	mov	r2, r0
 801548c:	460b      	mov	r3, r1
 801548e:	4620      	mov	r0, r4
 8015490:	4629      	mov	r1, r5
 8015492:	f7ea fef9 	bl	8000288 <__aeabi_dsub>
 8015496:	4602      	mov	r2, r0
 8015498:	460b      	mov	r3, r1
 801549a:	4610      	mov	r0, r2
 801549c:	4619      	mov	r1, r3
 801549e:	f7eb fba3 	bl	8000be8 <__aeabi_d2f>
 80154a2:	4602      	mov	r2, r0
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 80154b6:	ed9f 1a08 	vldr	s2, [pc, #32]	; 80154d8 <LidarAdjust+0x2f0>
 80154ba:	eef0 0a47 	vmov.f32	s1, s14
 80154be:	eeb0 0a67 	vmov.f32	s0, s15
 80154c2:	f000 f855 	bl	8015570 <LidarAdjustPP>
				break;
 80154c6:	e04f      	b.n	8015568 <LidarAdjust+0x380>
 80154c8:	08025af4 	.word	0x08025af4
 80154cc:	20006d44 	.word	0x20006d44
 80154d0:	2000a240 	.word	0x2000a240
 80154d4:	40020c00 	.word	0x40020c00
 80154d8:	c2b40000 	.word	0xc2b40000

			case CENTER_4:
				LidarSendIns(NEAR, lidar);
 80154dc:	6879      	ldr	r1, [r7, #4]
 80154de:	2001      	movs	r0, #1
 80154e0:	f000 fb18 	bl	8015b14 <LidarSendIns>
				lidar->adj_x = lidar->pole.x - lidar->center_4_offset_x;
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	e9d3 456a 	ldrd	r4, r5, [r3, #424]	; 0x1a8
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7eb f829 	bl	8000548 <__aeabi_f2d>
 80154f6:	4602      	mov	r2, r0
 80154f8:	460b      	mov	r3, r1
 80154fa:	4620      	mov	r0, r4
 80154fc:	4629      	mov	r1, r5
 80154fe:	f7ea fec3 	bl	8000288 <__aeabi_dsub>
 8015502:	4602      	mov	r2, r0
 8015504:	460b      	mov	r3, r1
 8015506:	4610      	mov	r0, r2
 8015508:	4619      	mov	r1, r3
 801550a:	f7eb fb6d 	bl	8000be8 <__aeabi_d2f>
 801550e:	4602      	mov	r2, r0
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
				lidar->adj_y = lidar->pole.y - lidar->center_4_offset_y;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	e9d3 456c 	ldrd	r4, r5, [r3, #432]	; 0x1b0
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8015522:	4618      	mov	r0, r3
 8015524:	f7eb f810 	bl	8000548 <__aeabi_f2d>
 8015528:	4602      	mov	r2, r0
 801552a:	460b      	mov	r3, r1
 801552c:	4620      	mov	r0, r4
 801552e:	4629      	mov	r1, r5
 8015530:	f7ea feaa 	bl	8000288 <__aeabi_dsub>
 8015534:	4602      	mov	r2, r0
 8015536:	460b      	mov	r3, r1
 8015538:	4610      	mov	r0, r2
 801553a:	4619      	mov	r1, r3
 801553c:	f7eb fb54 	bl	8000be8 <__aeabi_d2f>
 8015540:	4602      	mov	r2, r0
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
				LidarAdjustPP(lidar->adj_x, lidar->adj_y, -90.0);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	edd3 7a8c 	vldr	s15, [r3, #560]	; 0x230
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	ed93 7a8d 	vldr	s14, [r3, #564]	; 0x234
 8015554:	ed1f 1a20 	vldr	s2, [pc, #-128]	; 80154d8 <LidarAdjust+0x2f0>
 8015558:	eef0 0a47 	vmov.f32	s1, s14
 801555c:	eeb0 0a67 	vmov.f32	s0, s15
 8015560:	f000 f806 	bl	8015570 <LidarAdjustPP>
				break;
 8015564:	e000      	b.n	8015568 <LidarAdjust+0x380>

			case UPPER_RIGHT:
				break;

			default:
				break;
 8015566:	bf00      	nop
		}
	}
}
 8015568:	bf00      	nop
 801556a:	3728      	adds	r7, #40	; 0x28
 801556c:	46bd      	mov	sp, r7
 801556e:	bdb0      	pop	{r4, r5, r7, pc}

08015570 <LidarAdjustPP>:

void LidarAdjustPP(float adj_x, float adj_y, float z)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b08c      	sub	sp, #48	; 0x30
 8015574:	af00      	add	r7, sp, #0
 8015576:	ed87 0a03 	vstr	s0, [r7, #12]
 801557a:	edc7 0a02 	vstr	s1, [r7, #8]
 801557e:	ed87 1a01 	vstr	s2, [r7, #4]
	ResetCoordinate();
 8015582:	f7f8 fee3 	bl	800e34c <ResetCoordinate>

	float adj_point[1][7] = {{1.5, adj_x, adj_y, z, 0, 1, 0}};
 8015586:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801558a:	617b      	str	r3, [r7, #20]
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	61bb      	str	r3, [r7, #24]
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	61fb      	str	r3, [r7, #28]
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	623b      	str	r3, [r7, #32]
 8015598:	f04f 0300 	mov.w	r3, #0
 801559c:	627b      	str	r3, [r7, #36]	; 0x24
 801559e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80155a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80155a4:	f04f 0300 	mov.w	r3, #0
 80155a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	PP_start(adj_point, 1, &pp);
 80155aa:	f107 0314 	add.w	r3, r7, #20
 80155ae:	4a1c      	ldr	r2, [pc, #112]	; (8015620 <LidarAdjustPP+0xb0>)
 80155b0:	2101      	movs	r1, #1
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7f0 fb0c 	bl	8005bd0 <PP_start>

	while(pp.pp_start)
 80155b8:	e025      	b.n	8015606 <LidarAdjustPP+0x96>
	{
		if(ps4.button == SQUARE)
 80155ba:	4b1a      	ldr	r3, [pc, #104]	; (8015624 <LidarAdjustPP+0xb4>)
 80155bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80155c2:	d108      	bne.n	80155d6 <LidarAdjustPP+0x66>
		{
			while(ps4.button == SQUARE);
 80155c4:	bf00      	nop
 80155c6:	4b17      	ldr	r3, [pc, #92]	; (8015624 <LidarAdjustPP+0xb4>)
 80155c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80155ce:	d0fa      	beq.n	80155c6 <LidarAdjustPP+0x56>
			PP_stop(&pp);
 80155d0:	4813      	ldr	r0, [pc, #76]	; (8015620 <LidarAdjustPP+0xb0>)
 80155d2:	f7f0 fe35 	bl	8006240 <PP_stop>
		}

		if(In_LS_Shot_1 || In_LS_Shot_2)
 80155d6:	2108      	movs	r1, #8
 80155d8:	4813      	ldr	r0, [pc, #76]	; (8015628 <LidarAdjustPP+0xb8>)
 80155da:	f002 fbbd 	bl	8017d58 <HAL_GPIO_ReadPin>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d006      	beq.n	80155f2 <LidarAdjustPP+0x82>
 80155e4:	2110      	movs	r1, #16
 80155e6:	4810      	ldr	r0, [pc, #64]	; (8015628 <LidarAdjustPP+0xb8>)
 80155e8:	f002 fbb6 	bl	8017d58 <HAL_GPIO_ReadPin>
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d109      	bne.n	8015606 <LidarAdjustPP+0x96>
		{
			pp.error_y = 0;
 80155f2:	4b0b      	ldr	r3, [pc, #44]	; (8015620 <LidarAdjustPP+0xb0>)
 80155f4:	f04f 0200 	mov.w	r2, #0
 80155f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
			pp.target_y[0] = pp.real_y;
 80155fc:	4b08      	ldr	r3, [pc, #32]	; (8015620 <LidarAdjustPP+0xb0>)
 80155fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015600:	4a07      	ldr	r2, [pc, #28]	; (8015620 <LidarAdjustPP+0xb0>)
 8015602:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	while(pp.pp_start)
 8015606:	4b06      	ldr	r3, [pc, #24]	; (8015620 <LidarAdjustPP+0xb0>)
 8015608:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 801560c:	f003 0301 	and.w	r3, r3, #1
 8015610:	b2db      	uxtb	r3, r3
 8015612:	2b00      	cmp	r3, #0
 8015614:	d1d1      	bne.n	80155ba <LidarAdjustPP+0x4a>
		}
	}
}
 8015616:	bf00      	nop
 8015618:	bf00      	nop
 801561a:	3730      	adds	r7, #48	; 0x30
 801561c:	46bd      	mov	sp, r7
 801561e:	bd80      	pop	{r7, pc}
 8015620:	20006d44 	.word	0x20006d44
 8015624:	2000a240 	.word	0x2000a240
 8015628:	40020c00 	.word	0x40020c00

0801562c <LidarControl>:
/* Call this inside a task
 *   <- -> Will be used to change position
 *   UP DOWN will be used to change angle
 */
void LidarControl(Lidar_t* lidar)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b084      	sub	sp, #16
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
	uint32_t before, after;

	if(angle_shoot)
 8015634:	4bae      	ldr	r3, [pc, #696]	; (80158f0 <LidarControl+0x2c4>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	2b00      	cmp	r3, #0
 801563a:	f000 8092 	beq.w	8015762 <LidarControl+0x136>
	{
		if(ps4.button == LEFT)
 801563e:	4bad      	ldr	r3, [pc, #692]	; (80158f4 <LidarControl+0x2c8>)
 8015640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015642:	2b80      	cmp	r3, #128	; 0x80
 8015644:	d11f      	bne.n	8015686 <LidarControl+0x5a>
		{
			before = HAL_GetTick();
 8015646:	f000 fd0b 	bl	8016060 <HAL_GetTick>
 801564a:	60b8      	str	r0, [r7, #8]
			while(ps4.button == LEFT)
 801564c:	e002      	b.n	8015654 <LidarControl+0x28>
			{
				after = HAL_GetTick();
 801564e:	f000 fd07 	bl	8016060 <HAL_GetTick>
 8015652:	60f8      	str	r0, [r7, #12]
			while(ps4.button == LEFT)
 8015654:	4ba7      	ldr	r3, [pc, #668]	; (80158f4 <LidarControl+0x2c8>)
 8015656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015658:	2b80      	cmp	r3, #128	; 0x80
 801565a:	d0f8      	beq.n	801564e <LidarControl+0x22>
			}
			if(after - before > 500)
 801565c:	68fa      	ldr	r2, [r7, #12]
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	1ad3      	subs	r3, r2, r3
 8015662:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015666:	d907      	bls.n	8015678 <LidarControl+0x4c>
				lidar->angle_counter -= 3;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801566e:	1eda      	subs	r2, r3, #3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8015676:	e006      	b.n	8015686 <LidarControl+0x5a>
			else
				lidar->angle_counter--;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801567e:	1e5a      	subs	r2, r3, #1
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		}

		if(ps4.button == RIGHT)
 8015686:	4b9b      	ldr	r3, [pc, #620]	; (80158f4 <LidarControl+0x2c8>)
 8015688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801568a:	2b20      	cmp	r3, #32
 801568c:	d11f      	bne.n	80156ce <LidarControl+0xa2>
		{
			before = HAL_GetTick();
 801568e:	f000 fce7 	bl	8016060 <HAL_GetTick>
 8015692:	60b8      	str	r0, [r7, #8]
			while(ps4.button == RIGHT)
 8015694:	e002      	b.n	801569c <LidarControl+0x70>
			{
				after = HAL_GetTick();
 8015696:	f000 fce3 	bl	8016060 <HAL_GetTick>
 801569a:	60f8      	str	r0, [r7, #12]
			while(ps4.button == RIGHT)
 801569c:	4b95      	ldr	r3, [pc, #596]	; (80158f4 <LidarControl+0x2c8>)
 801569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156a0:	2b20      	cmp	r3, #32
 80156a2:	d0f8      	beq.n	8015696 <LidarControl+0x6a>
			}
			if(after - before > 500)
 80156a4:	68fa      	ldr	r2, [r7, #12]
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80156ae:	d907      	bls.n	80156c0 <LidarControl+0x94>
				lidar->angle_counter += 3;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80156b6:	1cda      	adds	r2, r3, #3
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 80156be:	e006      	b.n	80156ce <LidarControl+0xa2>
			else
				lidar->angle_counter++;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80156c6:	1c5a      	adds	r2, r3, #1
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		}

		if(ps4.button == UP)
 80156ce:	4b89      	ldr	r3, [pc, #548]	; (80158f4 <LidarControl+0x2c8>)
 80156d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156d2:	2b10      	cmp	r3, #16
 80156d4:	d11f      	bne.n	8015716 <LidarControl+0xea>
		{
			before = HAL_GetTick();
 80156d6:	f000 fcc3 	bl	8016060 <HAL_GetTick>
 80156da:	60b8      	str	r0, [r7, #8]
			while(ps4.button == UP)
 80156dc:	e002      	b.n	80156e4 <LidarControl+0xb8>
			{
				after = HAL_GetTick();
 80156de:	f000 fcbf 	bl	8016060 <HAL_GetTick>
 80156e2:	60f8      	str	r0, [r7, #12]
			while(ps4.button == UP)
 80156e4:	4b83      	ldr	r3, [pc, #524]	; (80158f4 <LidarControl+0x2c8>)
 80156e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156e8:	2b10      	cmp	r3, #16
 80156ea:	d0f8      	beq.n	80156de <LidarControl+0xb2>
			}
			if(after - before > 500)
 80156ec:	68fa      	ldr	r2, [r7, #12]
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	1ad3      	subs	r3, r2, r3
 80156f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80156f6:	d907      	bls.n	8015708 <LidarControl+0xdc>
				lidar->angle_counter += 4;
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80156fe:	1d1a      	adds	r2, r3, #4
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8015706:	e006      	b.n	8015716 <LidarControl+0xea>
			else
				lidar->angle_counter += 2;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801570e:	1c9a      	adds	r2, r3, #2
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		}

		if(ps4.button == DOWN)
 8015716:	4b77      	ldr	r3, [pc, #476]	; (80158f4 <LidarControl+0x2c8>)
 8015718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801571a:	2b40      	cmp	r3, #64	; 0x40
 801571c:	f040 816c 	bne.w	80159f8 <LidarControl+0x3cc>
		{
			before = HAL_GetTick();
 8015720:	f000 fc9e 	bl	8016060 <HAL_GetTick>
 8015724:	60b8      	str	r0, [r7, #8]
			while(ps4.button == DOWN)
 8015726:	e002      	b.n	801572e <LidarControl+0x102>
			{
				after = HAL_GetTick();
 8015728:	f000 fc9a 	bl	8016060 <HAL_GetTick>
 801572c:	60f8      	str	r0, [r7, #12]
			while(ps4.button == DOWN)
 801572e:	4b71      	ldr	r3, [pc, #452]	; (80158f4 <LidarControl+0x2c8>)
 8015730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015732:	2b40      	cmp	r3, #64	; 0x40
 8015734:	d0f8      	beq.n	8015728 <LidarControl+0xfc>
			}
			if(after - before > 500)
 8015736:	68fa      	ldr	r2, [r7, #12]
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	1ad3      	subs	r3, r2, r3
 801573c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015740:	d907      	bls.n	8015752 <LidarControl+0x126>
				lidar->angle_counter -= 4;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8015748:	1f1a      	subs	r2, r3, #4
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8015750:	e152      	b.n	80159f8 <LidarControl+0x3cc>
			else
				lidar->angle_counter -= 2;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8015758:	1e9a      	subs	r2, r3, #2
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8015760:	e14a      	b.n	80159f8 <LidarControl+0x3cc>
		}
	}
	else
	{
		if(ps4.button == LEFT)
 8015762:	4b64      	ldr	r3, [pc, #400]	; (80158f4 <LidarControl+0x2c8>)
 8015764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015766:	2b80      	cmp	r3, #128	; 0x80
 8015768:	d15a      	bne.n	8015820 <LidarControl+0x1f4>
		{
			before = HAL_GetTick();
 801576a:	f000 fc79 	bl	8016060 <HAL_GetTick>
 801576e:	60b8      	str	r0, [r7, #8]
			while(ps4.button == LEFT)
 8015770:	e002      	b.n	8015778 <LidarControl+0x14c>
			{
				after = HAL_GetTick();
 8015772:	f000 fc75 	bl	8016060 <HAL_GetTick>
 8015776:	60f8      	str	r0, [r7, #12]
			while(ps4.button == LEFT)
 8015778:	4b5e      	ldr	r3, [pc, #376]	; (80158f4 <LidarControl+0x2c8>)
 801577a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801577c:	2b80      	cmp	r3, #128	; 0x80
 801577e:	d0f8      	beq.n	8015772 <LidarControl+0x146>
			}
			shot_count = 0;
 8015780:	4b5d      	ldr	r3, [pc, #372]	; (80158f8 <LidarControl+0x2cc>)
 8015782:	2200      	movs	r2, #0
 8015784:	601a      	str	r2, [r3, #0]

			if(after - before > 500)
 8015786:	68fa      	ldr	r2, [r7, #12]
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	1ad3      	subs	r3, r2, r3
 801578c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015790:	d915      	bls.n	80157be <LidarControl+0x192>
			{
				if(lidar->pos == B)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8015798:	2b0b      	cmp	r3, #11
 801579a:	d108      	bne.n	80157ae <LidarControl+0x182>
				{
					lidar->pos = CENTER_3;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2206      	movs	r2, #6
 80157a0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_1;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2203      	movs	r2, #3
 80157a8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80157ac:	e038      	b.n	8015820 <LidarControl+0x1f4>
				}
				else
					lidar->pos_counter -= 3;
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80157b4:	1eda      	subs	r2, r3, #3
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80157bc:	e030      	b.n	8015820 <LidarControl+0x1f4>
			}
			else
			{
				if(lidar->pos == A)
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80157c4:	2b0a      	cmp	r3, #10
 80157c6:	d108      	bne.n	80157da <LidarControl+0x1ae>
				{
					lidar->pos = CENTER_2;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2204      	movs	r2, #4
 80157cc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_1;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2203      	movs	r2, #3
 80157d4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80157d8:	e022      	b.n	8015820 <LidarControl+0x1f4>
				}
				else if(lidar->pos == B)
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80157e0:	2b0b      	cmp	r3, #11
 80157e2:	d108      	bne.n	80157f6 <LidarControl+0x1ca>
				{
					lidar->pos = CENTER_3;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2206      	movs	r2, #6
 80157e8:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2205      	movs	r2, #5
 80157f0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80157f4:	e014      	b.n	8015820 <LidarControl+0x1f4>
				}
				else if(lidar->pos == TYPE_THREE)
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80157fc:	2b0c      	cmp	r3, #12
 80157fe:	d108      	bne.n	8015812 <LidarControl+0x1e6>
				{
					lidar->pos = CENTER;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2205      	movs	r2, #5
 8015804:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_2;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	2204      	movs	r2, #4
 801580c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015810:	e006      	b.n	8015820 <LidarControl+0x1f4>
				}
				else
					lidar->pos_counter--;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015818:	1e5a      	subs	r2, r3, #1
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			}
		}

		if(ps4.button == RIGHT)
 8015820:	4b34      	ldr	r3, [pc, #208]	; (80158f4 <LidarControl+0x2c8>)
 8015822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015824:	2b20      	cmp	r3, #32
 8015826:	d15a      	bne.n	80158de <LidarControl+0x2b2>
		{
			before = HAL_GetTick();
 8015828:	f000 fc1a 	bl	8016060 <HAL_GetTick>
 801582c:	60b8      	str	r0, [r7, #8]
			while(ps4.button == RIGHT)
 801582e:	e002      	b.n	8015836 <LidarControl+0x20a>
			{
				after = HAL_GetTick();
 8015830:	f000 fc16 	bl	8016060 <HAL_GetTick>
 8015834:	60f8      	str	r0, [r7, #12]
			while(ps4.button == RIGHT)
 8015836:	4b2f      	ldr	r3, [pc, #188]	; (80158f4 <LidarControl+0x2c8>)
 8015838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801583a:	2b20      	cmp	r3, #32
 801583c:	d0f8      	beq.n	8015830 <LidarControl+0x204>
			}

			if(after - before > 500)
 801583e:	68fa      	ldr	r2, [r7, #12]
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	1ad3      	subs	r3, r2, r3
 8015844:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015848:	d915      	bls.n	8015876 <LidarControl+0x24a>
			{
				if(lidar->pos == A)
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8015850:	2b0a      	cmp	r3, #10
 8015852:	d108      	bne.n	8015866 <LidarControl+0x23a>
				{
					lidar->pos = CENTER_2;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2204      	movs	r2, #4
 8015858:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_4;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2207      	movs	r2, #7
 8015860:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015864:	e038      	b.n	80158d8 <LidarControl+0x2ac>
				}
				else
					lidar->pos_counter += 3;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801586c:	1cda      	adds	r2, r3, #3
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015874:	e030      	b.n	80158d8 <LidarControl+0x2ac>
			}
			else
			{
				if(lidar->pos == A)
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 801587c:	2b0a      	cmp	r3, #10
 801587e:	d108      	bne.n	8015892 <LidarControl+0x266>
				{
					lidar->pos = CENTER_2;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2204      	movs	r2, #4
 8015884:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER;
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	2205      	movs	r2, #5
 801588c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015890:	e022      	b.n	80158d8 <LidarControl+0x2ac>
				}
				else if(lidar->pos == B)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8015898:	2b0b      	cmp	r3, #11
 801589a:	d108      	bne.n	80158ae <LidarControl+0x282>
				{
					lidar->pos = CENTER_3;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2206      	movs	r2, #6
 80158a0:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_4;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2207      	movs	r2, #7
 80158a8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80158ac:	e014      	b.n	80158d8 <LidarControl+0x2ac>
				}
				else if(lidar->pos == TYPE_THREE)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80158b4:	2b0c      	cmp	r3, #12
 80158b6:	d108      	bne.n	80158ca <LidarControl+0x29e>
				{
					lidar->pos = CENTER;
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2205      	movs	r2, #5
 80158bc:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_3;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2206      	movs	r2, #6
 80158c4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80158c8:	e006      	b.n	80158d8 <LidarControl+0x2ac>
				}
				else
					lidar->pos_counter++;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80158d0:	1c5a      	adds	r2, r3, #1
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			}
			shot_count = 0;
 80158d8:	4b07      	ldr	r3, [pc, #28]	; (80158f8 <LidarControl+0x2cc>)
 80158da:	2200      	movs	r2, #0
 80158dc:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == UP)
 80158de:	4b05      	ldr	r3, [pc, #20]	; (80158f4 <LidarControl+0x2c8>)
 80158e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158e2:	2b10      	cmp	r3, #16
 80158e4:	d145      	bne.n	8015972 <LidarControl+0x346>
		{
			before = HAL_GetTick();
 80158e6:	f000 fbbb 	bl	8016060 <HAL_GetTick>
 80158ea:	60b8      	str	r0, [r7, #8]
			while(ps4.button == UP)
 80158ec:	e009      	b.n	8015902 <LidarControl+0x2d6>
 80158ee:	bf00      	nop
 80158f0:	200076dc 	.word	0x200076dc
 80158f4:	2000a240 	.word	0x2000a240
 80158f8:	200068d8 	.word	0x200068d8
			{
				after = HAL_GetTick();
 80158fc:	f000 fbb0 	bl	8016060 <HAL_GetTick>
 8015900:	60f8      	str	r0, [r7, #12]
			while(ps4.button == UP)
 8015902:	4b42      	ldr	r3, [pc, #264]	; (8015a0c <LidarControl+0x3e0>)
 8015904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015906:	2b10      	cmp	r3, #16
 8015908:	d0f8      	beq.n	80158fc <LidarControl+0x2d0>
			}

			if(after - before > 500)
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	1ad3      	subs	r3, r2, r3
 8015910:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015914:	d907      	bls.n	8015926 <LidarControl+0x2fa>
			{
				lidar->pos_counter += 4;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801591c:	1d1a      	adds	r2, r3, #4
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015924:	e022      	b.n	801596c <LidarControl+0x340>
			}
			else
			{
				if(lidar->pos == A)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 801592c:	2b0a      	cmp	r3, #10
 801592e:	d108      	bne.n	8015942 <LidarControl+0x316>
				{
					lidar->pos = CENTER_2;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2204      	movs	r2, #4
 8015934:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_3;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2206      	movs	r2, #6
 801593c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8015940:	e014      	b.n	801596c <LidarControl+0x340>
				}
				else if(lidar->pos == TYPE_THREE)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 8015948:	2b0c      	cmp	r3, #12
 801594a:	d108      	bne.n	801595e <LidarControl+0x332>
				{
					lidar->pos = CENTER;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2205      	movs	r2, #5
 8015950:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_4;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2207      	movs	r2, #7
 8015958:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 801595c:	e006      	b.n	801596c <LidarControl+0x340>
				}
				else
					lidar->pos_counter += 2;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015964:	1c9a      	adds	r2, r3, #2
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			}
			shot_count = 0;
 801596c:	4b28      	ldr	r3, [pc, #160]	; (8015a10 <LidarControl+0x3e4>)
 801596e:	2200      	movs	r2, #0
 8015970:	601a      	str	r2, [r3, #0]
		}

		if(ps4.button == DOWN)
 8015972:	4b26      	ldr	r3, [pc, #152]	; (8015a0c <LidarControl+0x3e0>)
 8015974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015976:	2b40      	cmp	r3, #64	; 0x40
 8015978:	d13e      	bne.n	80159f8 <LidarControl+0x3cc>
		{
			before = HAL_GetTick();
 801597a:	f000 fb71 	bl	8016060 <HAL_GetTick>
 801597e:	60b8      	str	r0, [r7, #8]
			while(ps4.button == DOWN)
 8015980:	e002      	b.n	8015988 <LidarControl+0x35c>
			{
				after = HAL_GetTick();
 8015982:	f000 fb6d 	bl	8016060 <HAL_GetTick>
 8015986:	60f8      	str	r0, [r7, #12]
			while(ps4.button == DOWN)
 8015988:	4b20      	ldr	r3, [pc, #128]	; (8015a0c <LidarControl+0x3e0>)
 801598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801598c:	2b40      	cmp	r3, #64	; 0x40
 801598e:	d0f8      	beq.n	8015982 <LidarControl+0x356>
			}

			if(after - before > 500)
 8015990:	68fa      	ldr	r2, [r7, #12]
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	1ad3      	subs	r3, r2, r3
 8015996:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801599a:	d907      	bls.n	80159ac <LidarControl+0x380>
			{
				lidar->pos_counter -= 4;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80159a2:	1f1a      	subs	r2, r3, #4
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80159aa:	e022      	b.n	80159f2 <LidarControl+0x3c6>
			}
			else
			{
				if(lidar->pos == B)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80159b2:	2b0b      	cmp	r3, #11
 80159b4:	d108      	bne.n	80159c8 <LidarControl+0x39c>
				{
					lidar->pos = CENTER_3;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	2206      	movs	r2, #6
 80159ba:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_2;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	2204      	movs	r2, #4
 80159c2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80159c6:	e014      	b.n	80159f2 <LidarControl+0x3c6>
				}
				else if(lidar->pos == TYPE_THREE)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f893 31cd 	ldrb.w	r3, [r3, #461]	; 0x1cd
 80159ce:	2b0c      	cmp	r3, #12
 80159d0:	d108      	bne.n	80159e4 <LidarControl+0x3b8>
				{
					lidar->pos = CENTER;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	2205      	movs	r2, #5
 80159d6:	f883 21cd 	strb.w	r2, [r3, #461]	; 0x1cd
					lidar->pos_counter = CENTER_1;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2203      	movs	r2, #3
 80159de:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 80159e2:	e006      	b.n	80159f2 <LidarControl+0x3c6>
				}
				else
					lidar->pos_counter -= 2;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80159ea:	1e9a      	subs	r2, r3, #2
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			}
			shot_count = 0;
 80159f2:	4b07      	ldr	r3, [pc, #28]	; (8015a10 <LidarControl+0x3e4>)
 80159f4:	2200      	movs	r2, #0
 80159f6:	601a      	str	r2, [r3, #0]
		}
	}
	LidarCheckPos(lidar);
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f000 f83f 	bl	8015a7c <LidarCheckPos>
	LidarCheckAngle(lidar);
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f000 f808 	bl	8015a14 <LidarCheckAngle>
}
 8015a04:	bf00      	nop
 8015a06:	3710      	adds	r7, #16
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	2000a240 	.word	0x2000a240
 8015a10:	200068d8 	.word	0x200068d8

08015a14 <LidarCheckAngle>:


void LidarCheckAngle(Lidar_t* lidar)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	6078      	str	r0, [r7, #4]
	switch(lidar->angle_counter)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8015a22:	2b04      	cmp	r3, #4
 8015a24:	d825      	bhi.n	8015a72 <LidarCheckAngle+0x5e>
 8015a26:	a201      	add	r2, pc, #4	; (adr r2, 8015a2c <LidarCheckAngle+0x18>)
 8015a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a2c:	08015a41 	.word	0x08015a41
 8015a30:	08015a4b 	.word	0x08015a4b
 8015a34:	08015a55 	.word	0x08015a55
 8015a38:	08015a5f 	.word	0x08015a5f
 8015a3c:	08015a69 	.word	0x08015a69
	{
		case BL:
			LidarSetAngle(BL, lidar);
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	2000      	movs	r0, #0
 8015a44:	f7fe fca4 	bl	8014390 <LidarSetAngle>
			break;
 8015a48:	e014      	b.n	8015a74 <LidarCheckAngle+0x60>

		case FL:
			LidarSetAngle(FL, lidar);
 8015a4a:	6879      	ldr	r1, [r7, #4]
 8015a4c:	2001      	movs	r0, #1
 8015a4e:	f7fe fc9f 	bl	8014390 <LidarSetAngle>
			break;
 8015a52:	e00f      	b.n	8015a74 <LidarCheckAngle+0x60>

		case S:
			LidarSetAngle(S, lidar);
 8015a54:	6879      	ldr	r1, [r7, #4]
 8015a56:	2002      	movs	r0, #2
 8015a58:	f7fe fc9a 	bl	8014390 <LidarSetAngle>
			break;
 8015a5c:	e00a      	b.n	8015a74 <LidarCheckAngle+0x60>

		case FR:
			LidarSetAngle(FR, lidar);
 8015a5e:	6879      	ldr	r1, [r7, #4]
 8015a60:	2003      	movs	r0, #3
 8015a62:	f7fe fc95 	bl	8014390 <LidarSetAngle>
			break;
 8015a66:	e005      	b.n	8015a74 <LidarCheckAngle+0x60>

		case BR:
			LidarSetAngle(BR, lidar);
 8015a68:	6879      	ldr	r1, [r7, #4]
 8015a6a:	2004      	movs	r0, #4
 8015a6c:	f7fe fc90 	bl	8014390 <LidarSetAngle>
			break;
 8015a70:	e000      	b.n	8015a74 <LidarCheckAngle+0x60>

		default:
			break;
 8015a72:	bf00      	nop
	}
}
 8015a74:	bf00      	nop
 8015a76:	3708      	adds	r7, #8
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}

08015a7c <LidarCheckPos>:

void LidarCheckPos(Lidar_t* lidar)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
	switch(lidar->pos_counter)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8015a8a:	3b02      	subs	r3, #2
 8015a8c:	2b07      	cmp	r3, #7
 8015a8e:	d83b      	bhi.n	8015b08 <LidarCheckPos+0x8c>
 8015a90:	a201      	add	r2, pc, #4	; (adr r2, 8015a98 <LidarCheckPos+0x1c>)
 8015a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a96:	bf00      	nop
 8015a98:	08015ac3 	.word	0x08015ac3
 8015a9c:	08015acd 	.word	0x08015acd
 8015aa0:	08015ad7 	.word	0x08015ad7
 8015aa4:	08015ae1 	.word	0x08015ae1
 8015aa8:	08015aeb 	.word	0x08015aeb
 8015aac:	08015af5 	.word	0x08015af5
 8015ab0:	08015aff 	.word	0x08015aff
 8015ab4:	08015ab9 	.word	0x08015ab9
	{
		case PICK_RIGHT:
			LidarSetPos(PICK_RIGHT, lidar);
 8015ab8:	6879      	ldr	r1, [r7, #4]
 8015aba:	2009      	movs	r0, #9
 8015abc:	f7f9 ffc8 	bl	800fa50 <LidarSetPos>
			break;
 8015ac0:	e023      	b.n	8015b0a <LidarCheckPos+0x8e>

		case UPPER_LEFT:
			LidarSetPos(UPPER_LEFT, lidar);
 8015ac2:	6879      	ldr	r1, [r7, #4]
 8015ac4:	2002      	movs	r0, #2
 8015ac6:	f7f9 ffc3 	bl	800fa50 <LidarSetPos>
			break;
 8015aca:	e01e      	b.n	8015b0a <LidarCheckPos+0x8e>

		case CENTER_1:
			LidarSetPos(CENTER_1, lidar);
 8015acc:	6879      	ldr	r1, [r7, #4]
 8015ace:	2003      	movs	r0, #3
 8015ad0:	f7f9 ffbe 	bl	800fa50 <LidarSetPos>
			break;
 8015ad4:	e019      	b.n	8015b0a <LidarCheckPos+0x8e>

		case CENTER_2:
			LidarSetPos(CENTER_2, lidar);
 8015ad6:	6879      	ldr	r1, [r7, #4]
 8015ad8:	2004      	movs	r0, #4
 8015ada:	f7f9 ffb9 	bl	800fa50 <LidarSetPos>
			break;
 8015ade:	e014      	b.n	8015b0a <LidarCheckPos+0x8e>

		case CENTER:
			LidarSetPos(CENTER, lidar);
 8015ae0:	6879      	ldr	r1, [r7, #4]
 8015ae2:	2005      	movs	r0, #5
 8015ae4:	f7f9 ffb4 	bl	800fa50 <LidarSetPos>
			break;
 8015ae8:	e00f      	b.n	8015b0a <LidarCheckPos+0x8e>

		case CENTER_3:
			LidarSetPos(CENTER_3, lidar);
 8015aea:	6879      	ldr	r1, [r7, #4]
 8015aec:	2006      	movs	r0, #6
 8015aee:	f7f9 ffaf 	bl	800fa50 <LidarSetPos>
			break;
 8015af2:	e00a      	b.n	8015b0a <LidarCheckPos+0x8e>

		case CENTER_4:
			LidarSetPos(CENTER_4, lidar);
 8015af4:	6879      	ldr	r1, [r7, #4]
 8015af6:	2007      	movs	r0, #7
 8015af8:	f7f9 ffaa 	bl	800fa50 <LidarSetPos>
			break;
 8015afc:	e005      	b.n	8015b0a <LidarCheckPos+0x8e>

		case UPPER_RIGHT:
			LidarSetPos(UPPER_RIGHT, lidar);
 8015afe:	6879      	ldr	r1, [r7, #4]
 8015b00:	2008      	movs	r0, #8
 8015b02:	f7f9 ffa5 	bl	800fa50 <LidarSetPos>
			break;
 8015b06:	e000      	b.n	8015b0a <LidarCheckPos+0x8e>

		default:
			break;
 8015b08:	bf00      	nop
	}
}
 8015b0a:	bf00      	nop
 8015b0c:	3708      	adds	r7, #8
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
 8015b12:	bf00      	nop

08015b14 <LidarSendIns>:

// Send Instruction to pi/pc
void LidarSendIns(Instruction_t ins, Lidar_t* lidar)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	6039      	str	r1, [r7, #0]
 8015b1e:	71fb      	strb	r3, [r7, #7]
	lidar->response = NO; // After user got the data, response will be OK
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	2201      	movs	r2, #1
 8015b24:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
	lidar->inst = ins;
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	79fa      	ldrb	r2, [r7, #7]
 8015b2c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	lidar->obstacle_send[0] = 0x01;
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	2201      	movs	r2, #1
 8015b34:	705a      	strb	r2, [r3, #1]
	memcpy(&lidar->obstacle_send[1], &lidar->inst, 1);
 8015b36:	683b      	ldr	r3, [r7, #0]
 8015b38:	3302      	adds	r3, #2
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8015b40:	7812      	ldrb	r2, [r2, #0]
 8015b42:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(lidar->lidar_UART, lidar->obstacle_send, 2, HAL_MAX_DELAY);
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	1c59      	adds	r1, r3, #1
 8015b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b52:	2202      	movs	r2, #2
 8015b54:	f005 ff8f 	bl	801ba76 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	33c9      	adds	r3, #201	; 0xc9
 8015b62:	2219      	movs	r2, #25
 8015b64:	4619      	mov	r1, r3
 8015b66:	f006 f81f 	bl	801bba8 <HAL_UART_Receive_IT>

	while(lidar->response == NO) // Poll the user after got new data
 8015b6a:	e004      	b.n	8015b76 <LidarSendIns+0x62>
	{
		if(ps4.button == SQUARE)
 8015b6c:	4b07      	ldr	r3, [pc, #28]	; (8015b8c <LidarSendIns+0x78>)
 8015b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015b74:	d005      	beq.n	8015b82 <LidarSendIns+0x6e>
	while(lidar->response == NO) // Poll the user after got new data
 8015b76:	683b      	ldr	r3, [r7, #0]
 8015b78:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8015b7c:	2b01      	cmp	r3, #1
 8015b7e:	d0f5      	beq.n	8015b6c <LidarSendIns+0x58>
			break;
	}
}
 8015b80:	e000      	b.n	8015b84 <LidarSendIns+0x70>
			break;
 8015b82:	bf00      	nop
}
 8015b84:	bf00      	nop
 8015b86:	3708      	adds	r7, #8
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}
 8015b8c:	2000a240 	.word	0x2000a240

08015b90 <ObstacleHandler>:

// Call this in UART Callback
void ObstacleHandler(Lidar_t* lidar)
{
 8015b90:	b5b0      	push	{r4, r5, r7, lr}
 8015b92:	b086      	sub	sp, #24
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
	if(lidar->mode == CONTINUOUS)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	f040 8115 	bne.w	8015dce <ObstacleHandler+0x23e>
	{
		static int mode = 0;
		switch(mode)
 8015ba4:	4baa      	ldr	r3, [pc, #680]	; (8015e50 <ObstacleHandler+0x2c0>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d002      	beq.n	8015bb2 <ObstacleHandler+0x22>
 8015bac:	2b01      	cmp	r3, #1
 8015bae:	d061      	beq.n	8015c74 <ObstacleHandler+0xe4>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
		}
	}
}
 8015bb0:	e1f1      	b.n	8015f96 <ObstacleHandler+0x406>
				if(lidar->obstacle_receive[0] == 0x01)
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8015bb8:	2b01      	cmp	r3, #1
 8015bba:	f040 81eb 	bne.w	8015f94 <ObstacleHandler+0x404>
					memcpy(&lidar->obstacle_count, &lidar->obstacle_receive[1], 4);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8015bc4:	687a      	ldr	r2, [r7, #4]
 8015bc6:	32ca      	adds	r2, #202	; 0xca
 8015bc8:	6812      	ldr	r2, [r2, #0]
 8015bca:	601a      	str	r2, [r3, #0]
					if(lidar->new == 0)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015bd2:	f003 0301 	and.w	r3, r3, #1
 8015bd6:	b2db      	uxtb	r3, r3
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d110      	bne.n	8015bfe <ObstacleHandler+0x6e>
							lidar->Polelist = (Pole*)malloc(lidar->obstacle_count * 3 * sizeof(float));
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015be2:	461a      	mov	r2, r3
 8015be4:	4613      	mov	r3, r2
 8015be6:	005b      	lsls	r3, r3, #1
 8015be8:	4413      	add	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	4618      	mov	r0, r3
 8015bee:	f009 fc0f 	bl	801f410 <malloc>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	461a      	mov	r2, r3
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8015bfc:	e012      	b.n	8015c24 <ObstacleHandler+0x94>
							lidar->Polelist = (Pole*)realloc(lidar->Polelist, lidar->obstacle_count * 3 * sizeof(float));
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	005b      	lsls	r3, r3, #1
 8015c10:	440b      	add	r3, r1
 8015c12:	009b      	lsls	r3, r3, #2
 8015c14:	4619      	mov	r1, r3
 8015c16:	4610      	mov	r0, r2
 8015c18:	f00a fb3c 	bl	8020294 <realloc>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->obstacle_count, 4, HAL_MAX_DELAY);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f503 71ca 	add.w	r1, r3, #404	; 0x194
 8015c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c34:	2204      	movs	r2, #4
 8015c36:	f005 ff1e 	bl	801ba76 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, lidar->obstacle_count * 3 * 4);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f103 01c9 	add.w	r1, r3, #201	; 0xc9
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	461a      	mov	r2, r3
 8015c50:	0052      	lsls	r2, r2, #1
 8015c52:	4413      	add	r3, r2
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	461a      	mov	r2, r3
 8015c5a:	f005 ffa5 	bl	801bba8 <HAL_UART_Receive_IT>
					mode = 1;
 8015c5e:	4b7c      	ldr	r3, [pc, #496]	; (8015e50 <ObstacleHandler+0x2c0>)
 8015c60:	2201      	movs	r2, #1
 8015c62:	601a      	str	r2, [r3, #0]
					lidar->new = 1;
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 8015c6a:	f043 0301 	orr.w	r3, r3, #1
 8015c6e:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
				break;
 8015c72:	e18f      	b.n	8015f94 <ObstacleHandler+0x404>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8015c74:	2300      	movs	r3, #0
 8015c76:	617b      	str	r3, [r7, #20]
 8015c78:	e05b      	b.n	8015d32 <ObstacleHandler+0x1a2>
					memcpy(&lidar->pole.x, &lidar->obstacle_receive[i * 12], 4);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8015c80:	697a      	ldr	r2, [r7, #20]
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	009b      	lsls	r3, r3, #2
 8015c8a:	33c8      	adds	r3, #200	; 0xc8
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	4413      	add	r3, r2
 8015c90:	3301      	adds	r3, #1
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.y, &lidar->obstacle_receive[i * 12 + 4], 4);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	4613      	mov	r3, r2
 8015ca0:	005b      	lsls	r3, r3, #1
 8015ca2:	4413      	add	r3, r2
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	3304      	adds	r3, #4
 8015ca8:	33c8      	adds	r3, #200	; 0xc8
 8015caa:	687a      	ldr	r2, [r7, #4]
 8015cac:	4413      	add	r3, r2
 8015cae:	3301      	adds	r3, #1
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	600b      	str	r3, [r1, #0]
					memcpy(&lidar->pole.distance, &lidar->obstacle_receive[i * 12 + 8], 4);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8015cba:	697a      	ldr	r2, [r7, #20]
 8015cbc:	4613      	mov	r3, r2
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	4413      	add	r3, r2
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	3308      	adds	r3, #8
 8015cc6:	33c8      	adds	r3, #200	; 0xc8
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	4413      	add	r3, r2
 8015ccc:	3301      	adds	r3, #1
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	600b      	str	r3, [r1, #0]
					lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8015cde:	f7ea fdb5 	bl	800084c <__aeabi_ddiv>
 8015ce2:	4602      	mov	r2, r0
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	4610      	mov	r0, r2
 8015ce8:	4619      	mov	r1, r3
 8015cea:	f7ea ff7d 	bl	8000be8 <__aeabi_d2f>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	ee00 3a10 	vmov	s0, r3
 8015cf4:	f00e f84c 	bl	8023d90 <atanf>
 8015cf8:	ee10 3a10 	vmov	r3, s0
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7ea fc23 	bl	8000548 <__aeabi_f2d>
 8015d02:	4602      	mov	r2, r0
 8015d04:	460b      	mov	r3, r1
 8015d06:	6879      	ldr	r1, [r7, #4]
 8015d08:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
					lidar->Polelist[i] = lidar->pole;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	015b      	lsls	r3, r3, #5
 8015d16:	441a      	add	r2, r3
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	4615      	mov	r5, r2
 8015d1c:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8015d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d28:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
				for(int i = 0; i < lidar->obstacle_count; i++)
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	3301      	adds	r3, #1
 8015d30:	617b      	str	r3, [r7, #20]
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015d38:	697a      	ldr	r2, [r7, #20]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	db9d      	blt.n	8015c7a <ObstacleHandler+0xea>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8015d3e:	2300      	movs	r3, #0
 8015d40:	613b      	str	r3, [r7, #16]
 8015d42:	e031      	b.n	8015da8 <ObstacleHandler+0x218>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].x, 4, HAL_MAX_DELAY);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	015b      	lsls	r3, r3, #5
 8015d54:	4413      	add	r3, r2
 8015d56:	4619      	mov	r1, r3
 8015d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d5c:	2204      	movs	r2, #4
 8015d5e:	f005 fe8a 	bl	801ba76 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].y, 4, HAL_MAX_DELAY);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	015b      	lsls	r3, r3, #5
 8015d72:	4413      	add	r3, r2
 8015d74:	f103 0108 	add.w	r1, r3, #8
 8015d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d7c:	2204      	movs	r2, #4
 8015d7e:	f005 fe7a 	bl	801ba76 <HAL_UART_Transmit>
					HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->Polelist[i].distance, 4, HAL_MAX_DELAY);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	015b      	lsls	r3, r3, #5
 8015d92:	4413      	add	r3, r2
 8015d94:	f103 0110 	add.w	r1, r3, #16
 8015d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d9c:	2204      	movs	r2, #4
 8015d9e:	f005 fe6a 	bl	801ba76 <HAL_UART_Transmit>
				for(int i = 0; i < lidar->obstacle_count; i++)
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	3301      	adds	r3, #1
 8015da6:	613b      	str	r3, [r7, #16]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8015dae:	693a      	ldr	r2, [r7, #16]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	dbc7      	blt.n	8015d44 <ObstacleHandler+0x1b4>
				mode = 0;
 8015db4:	4b26      	ldr	r3, [pc, #152]	; (8015e50 <ObstacleHandler+0x2c0>)
 8015db6:	2200      	movs	r2, #0
 8015db8:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 5);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	33c9      	adds	r3, #201	; 0xc9
 8015dc4:	2205      	movs	r2, #5
 8015dc6:	4619      	mov	r1, r3
 8015dc8:	f005 feee 	bl	801bba8 <HAL_UART_Receive_IT>
				break;
 8015dcc:	e0e3      	b.n	8015f96 <ObstacleHandler+0x406>
		if(lidar->start == 0) // Start booting
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015dd4:	f003 0304 	and.w	r3, r3, #4
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d13a      	bne.n	8015e54 <ObstacleHandler+0x2c4>
			if(lidar->obstacle_receive[0] == 0x01)
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8015de4:	2b01      	cmp	r3, #1
 8015de6:	f040 80d6 	bne.w	8015f96 <ObstacleHandler+0x406>
				memcpy(&lidar->res, &lidar->obstacle_receive[1], 1);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f203 1399 	addw	r3, r3, #409	; 0x199
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	32ca      	adds	r2, #202	; 0xca
 8015df4:	7812      	ldrb	r2, [r2, #0]
 8015df6:	701a      	strb	r2, [r3, #0]
				lidar->response = lidar->res;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
				if(lidar->response == OK)
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	f040 80c3 	bne.w	8015f96 <ObstacleHandler+0x406>
					HAL_UART_Transmit(lidar->lidar_UART, &lidar->res, 1, HAL_MAX_DELAY);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f203 1199 	addw	r1, r3, #409	; 0x199
 8015e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e20:	2201      	movs	r2, #1
 8015e22:	f005 fe28 	bl	801ba76 <HAL_UART_Transmit>
					lidar->start = 1;
 8015e26:	687a      	ldr	r2, [r7, #4]
 8015e28:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 8015e2c:	f043 0304 	orr.w	r3, r3, #4
 8015e30:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
					lidar->response = NO;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2201      	movs	r2, #1
 8015e38:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
					HAL_UART_Receive_IT(lidar->lidar_UART, lidar->obstacle_receive, 25);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	33c9      	adds	r3, #201	; 0xc9
 8015e46:	2219      	movs	r2, #25
 8015e48:	4619      	mov	r1, r3
 8015e4a:	f005 fead 	bl	801bba8 <HAL_UART_Receive_IT>
}
 8015e4e:	e0a2      	b.n	8015f96 <ObstacleHandler+0x406>
 8015e50:	200010fc 	.word	0x200010fc
			memcpy(&lidar->res, &lidar->obstacle_receive[0], 1);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f203 1399 	addw	r3, r3, #409	; 0x199
 8015e5a:	687a      	ldr	r2, [r7, #4]
 8015e5c:	32c9      	adds	r2, #201	; 0xc9
 8015e5e:	7812      	ldrb	r2, [r2, #0]
 8015e60:	701a      	strb	r2, [r3, #0]
			lidar->response = lidar->res;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			if(lidar->response == OK)
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d152      	bne.n	8015f1e <ObstacleHandler+0x38e>
				memcpy(&lidar->pole.x, &lidar->obstacle_receive[1], 8);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	33ca      	adds	r3, #202	; 0xca
 8015e82:	2208      	movs	r2, #8
 8015e84:	4619      	mov	r1, r3
 8015e86:	f009 facb 	bl	801f420 <memcpy>
				memcpy(&lidar->pole.y, &lidar->obstacle_receive[9], 8);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	33d2      	adds	r3, #210	; 0xd2
 8015e94:	2208      	movs	r2, #8
 8015e96:	4619      	mov	r1, r3
 8015e98:	f009 fac2 	bl	801f420 <memcpy>
				memcpy(&lidar->pole.distance, &lidar->obstacle_receive[17], 8);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	33da      	adds	r3, #218	; 0xda
 8015ea6:	2208      	movs	r2, #8
 8015ea8:	4619      	mov	r1, r3
 8015eaa:	f009 fab9 	bl	801f420 <memcpy>
				float temp = lidar->pole.x;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8015eb4:	4610      	mov	r0, r2
 8015eb6:	4619      	mov	r1, r3
 8015eb8:	f7ea fe96 	bl	8000be8 <__aeabi_d2f>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	60fb      	str	r3, [r7, #12]
				lidar->pole.x = -lidar->pole.y;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	e9d3 236c 	ldrd	r2, r3, [r3, #432]	; 0x1b0
 8015ec6:	4614      	mov	r4, r2
 8015ec8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	e9c3 456a 	strd	r4, r5, [r3, #424]	; 0x1a8
				lidar->pole.y = temp;
 8015ed2:	68f8      	ldr	r0, [r7, #12]
 8015ed4:	f7ea fb38 	bl	8000548 <__aeabi_f2d>
 8015ed8:	4602      	mov	r2, r0
 8015eda:	460b      	mov	r3, r1
 8015edc:	6879      	ldr	r1, [r7, #4]
 8015ede:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
				lidar->pole.angle = atanf(lidar->pole.y / lidar->pole.x);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	e9d3 016c 	ldrd	r0, r1, [r3, #432]	; 0x1b0
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	e9d3 236a 	ldrd	r2, r3, [r3, #424]	; 0x1a8
 8015eee:	f7ea fcad 	bl	800084c <__aeabi_ddiv>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	4610      	mov	r0, r2
 8015ef8:	4619      	mov	r1, r3
 8015efa:	f7ea fe75 	bl	8000be8 <__aeabi_d2f>
 8015efe:	4603      	mov	r3, r0
 8015f00:	ee00 3a10 	vmov	s0, r3
 8015f04:	f00d ff44 	bl	8023d90 <atanf>
 8015f08:	ee10 3a10 	vmov	r3, s0
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7ea fb1b 	bl	8000548 <__aeabi_f2d>
 8015f12:	4602      	mov	r2, r0
 8015f14:	460b      	mov	r3, r1
 8015f16:	6879      	ldr	r1, [r7, #4]
 8015f18:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
 8015f1c:	e00d      	b.n	8015f3a <ObstacleHandler+0x3aa>
				lidar->reject = 1;
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	f892 32a0 	ldrb.w	r3, [r2, #672]	; 0x2a0
 8015f24:	f043 0302 	orr.w	r3, r3, #2
 8015f28:	f882 32a0 	strb.w	r3, [r2, #672]	; 0x2a0
				LidarSendIns(lidar->inst, lidar);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8015f32:	6879      	ldr	r1, [r7, #4]
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7ff fded 	bl	8015b14 <LidarSendIns>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->res, 1, HAL_MAX_DELAY);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f203 1199 	addw	r1, r3, #409	; 0x199
 8015f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f4a:	2201      	movs	r2, #1
 8015f4c:	f005 fd93 	bl	801ba76 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.x, 8, HAL_MAX_DELAY);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	f503 71d4 	add.w	r1, r3, #424	; 0x1a8
 8015f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f60:	2208      	movs	r2, #8
 8015f62:	f005 fd88 	bl	801ba76 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.y, 8, HAL_MAX_DELAY);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f503 71d8 	add.w	r1, r3, #432	; 0x1b0
 8015f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f76:	2208      	movs	r2, #8
 8015f78:	f005 fd7d 	bl	801ba76 <HAL_UART_Transmit>
			HAL_UART_Transmit(lidar->lidar_UART, (uint8_t*)&lidar->pole.distance, 8, HAL_MAX_DELAY);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8d3 019c 	ldr.w	r0, [r3, #412]	; 0x19c
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f503 71dc 	add.w	r1, r3, #440	; 0x1b8
 8015f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f8c:	2208      	movs	r2, #8
 8015f8e:	f005 fd72 	bl	801ba76 <HAL_UART_Transmit>
}
 8015f92:	e000      	b.n	8015f96 <ObstacleHandler+0x406>
				break;
 8015f94:	bf00      	nop
}
 8015f96:	bf00      	nop
 8015f98:	3718      	adds	r7, #24
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8015f9e:	bf00      	nop

08015fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8015fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015fa4:	480d      	ldr	r0, [pc, #52]	; (8015fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015fa6:	490e      	ldr	r1, [pc, #56]	; (8015fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015fa8:	4a0e      	ldr	r2, [pc, #56]	; (8015fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8015faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015fac:	e002      	b.n	8015fb4 <LoopCopyDataInit>

08015fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015fb2:	3304      	adds	r3, #4

08015fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015fb8:	d3f9      	bcc.n	8015fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015fba:	4a0b      	ldr	r2, [pc, #44]	; (8015fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015fbc:	4c0b      	ldr	r4, [pc, #44]	; (8015fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8015fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015fc0:	e001      	b.n	8015fc6 <LoopFillZerobss>

08015fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015fc4:	3204      	adds	r2, #4

08015fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015fc8:	d3fb      	bcc.n	8015fc2 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8015fca:	f7f8 ffaf 	bl	800ef2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015fce:	f009 f9fb 	bl	801f3c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015fd2:	f7ed fff9 	bl	8003fc8 <main>
  bx  lr    
 8015fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8015fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8015fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015fe0:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 8015fe4:	08026634 	.word	0x08026634
  ldr r2, =_sbss
 8015fe8:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8015fec:	2000a95c 	.word	0x2000a95c

08015ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015ff0:	e7fe      	b.n	8015ff0 <ADC_IRQHandler>
	...

08015ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015ff8:	4b0e      	ldr	r3, [pc, #56]	; (8016034 <HAL_Init+0x40>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4a0d      	ldr	r2, [pc, #52]	; (8016034 <HAL_Init+0x40>)
 8015ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8016004:	4b0b      	ldr	r3, [pc, #44]	; (8016034 <HAL_Init+0x40>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	4a0a      	ldr	r2, [pc, #40]	; (8016034 <HAL_Init+0x40>)
 801600a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801600e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016010:	4b08      	ldr	r3, [pc, #32]	; (8016034 <HAL_Init+0x40>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	4a07      	ldr	r2, [pc, #28]	; (8016034 <HAL_Init+0x40>)
 8016016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801601a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801601c:	2003      	movs	r0, #3
 801601e:	f000 ffa8 	bl	8016f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8016022:	2000      	movs	r0, #0
 8016024:	f7f8 fe62 	bl	800ecec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016028:	f7eb ff66 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801602c:	2300      	movs	r3, #0
}
 801602e:	4618      	mov	r0, r3
 8016030:	bd80      	pop	{r7, pc}
 8016032:	bf00      	nop
 8016034:	40023c00 	.word	0x40023c00

08016038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016038:	b480      	push	{r7}
 801603a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801603c:	4b06      	ldr	r3, [pc, #24]	; (8016058 <HAL_IncTick+0x20>)
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	461a      	mov	r2, r3
 8016042:	4b06      	ldr	r3, [pc, #24]	; (801605c <HAL_IncTick+0x24>)
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	4413      	add	r3, r2
 8016048:	4a04      	ldr	r2, [pc, #16]	; (801605c <HAL_IncTick+0x24>)
 801604a:	6013      	str	r3, [r2, #0]
}
 801604c:	bf00      	nop
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr
 8016056:	bf00      	nop
 8016058:	200000bc 	.word	0x200000bc
 801605c:	2000a908 	.word	0x2000a908

08016060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016060:	b480      	push	{r7}
 8016062:	af00      	add	r7, sp, #0
  return uwTick;
 8016064:	4b03      	ldr	r3, [pc, #12]	; (8016074 <HAL_GetTick+0x14>)
 8016066:	681b      	ldr	r3, [r3, #0]
}
 8016068:	4618      	mov	r0, r3
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr
 8016072:	bf00      	nop
 8016074:	2000a908 	.word	0x2000a908

08016078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d101      	bne.n	801608a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8016086:	2301      	movs	r3, #1
 8016088:	e0ed      	b.n	8016266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016090:	b2db      	uxtb	r3, r3
 8016092:	2b00      	cmp	r3, #0
 8016094:	d102      	bne.n	801609c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f7eb ff5a 	bl	8001f50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	681a      	ldr	r2, [r3, #0]
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	f022 0202 	bic.w	r2, r2, #2
 80160aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80160ac:	f7ff ffd8 	bl	8016060 <HAL_GetTick>
 80160b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80160b2:	e012      	b.n	80160da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80160b4:	f7ff ffd4 	bl	8016060 <HAL_GetTick>
 80160b8:	4602      	mov	r2, r0
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	1ad3      	subs	r3, r2, r3
 80160be:	2b0a      	cmp	r3, #10
 80160c0:	d90b      	bls.n	80160da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2205      	movs	r2, #5
 80160d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80160d6:	2301      	movs	r3, #1
 80160d8:	e0c5      	b.n	8016266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	f003 0302 	and.w	r3, r3, #2
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d1e5      	bne.n	80160b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	f042 0201 	orr.w	r2, r2, #1
 80160f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80160f8:	f7ff ffb2 	bl	8016060 <HAL_GetTick>
 80160fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80160fe:	e012      	b.n	8016126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8016100:	f7ff ffae 	bl	8016060 <HAL_GetTick>
 8016104:	4602      	mov	r2, r0
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	1ad3      	subs	r3, r2, r3
 801610a:	2b0a      	cmp	r3, #10
 801610c:	d90b      	bls.n	8016126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2205      	movs	r2, #5
 801611e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8016122:	2301      	movs	r3, #1
 8016124:	e09f      	b.n	8016266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	f003 0301 	and.w	r3, r3, #1
 8016130:	2b00      	cmp	r3, #0
 8016132:	d0e5      	beq.n	8016100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	7e1b      	ldrb	r3, [r3, #24]
 8016138:	2b01      	cmp	r3, #1
 801613a:	d108      	bne.n	801614e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	681a      	ldr	r2, [r3, #0]
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801614a:	601a      	str	r2, [r3, #0]
 801614c:	e007      	b.n	801615e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	681a      	ldr	r2, [r3, #0]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801615c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	7e5b      	ldrb	r3, [r3, #25]
 8016162:	2b01      	cmp	r3, #1
 8016164:	d108      	bne.n	8016178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	681a      	ldr	r2, [r3, #0]
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016174:	601a      	str	r2, [r3, #0]
 8016176:	e007      	b.n	8016188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	681a      	ldr	r2, [r3, #0]
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	7e9b      	ldrb	r3, [r3, #26]
 801618c:	2b01      	cmp	r3, #1
 801618e:	d108      	bne.n	80161a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	681a      	ldr	r2, [r3, #0]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	f042 0220 	orr.w	r2, r2, #32
 801619e:	601a      	str	r2, [r3, #0]
 80161a0:	e007      	b.n	80161b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	681a      	ldr	r2, [r3, #0]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	f022 0220 	bic.w	r2, r2, #32
 80161b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	7edb      	ldrb	r3, [r3, #27]
 80161b6:	2b01      	cmp	r3, #1
 80161b8:	d108      	bne.n	80161cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f022 0210 	bic.w	r2, r2, #16
 80161c8:	601a      	str	r2, [r3, #0]
 80161ca:	e007      	b.n	80161dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	f042 0210 	orr.w	r2, r2, #16
 80161da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	7f1b      	ldrb	r3, [r3, #28]
 80161e0:	2b01      	cmp	r3, #1
 80161e2:	d108      	bne.n	80161f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	f042 0208 	orr.w	r2, r2, #8
 80161f2:	601a      	str	r2, [r3, #0]
 80161f4:	e007      	b.n	8016206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	f022 0208 	bic.w	r2, r2, #8
 8016204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	7f5b      	ldrb	r3, [r3, #29]
 801620a:	2b01      	cmp	r3, #1
 801620c:	d108      	bne.n	8016220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	681a      	ldr	r2, [r3, #0]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f042 0204 	orr.w	r2, r2, #4
 801621c:	601a      	str	r2, [r3, #0]
 801621e:	e007      	b.n	8016230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	681a      	ldr	r2, [r3, #0]
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f022 0204 	bic.w	r2, r2, #4
 801622e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	689a      	ldr	r2, [r3, #8]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	68db      	ldr	r3, [r3, #12]
 8016238:	431a      	orrs	r2, r3
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	691b      	ldr	r3, [r3, #16]
 801623e:	431a      	orrs	r2, r3
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	695b      	ldr	r3, [r3, #20]
 8016244:	ea42 0103 	orr.w	r1, r2, r3
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	1e5a      	subs	r2, r3, #1
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	430a      	orrs	r2, r1
 8016254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2200      	movs	r2, #0
 801625a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2201      	movs	r2, #1
 8016260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8016264:	2300      	movs	r3, #0
}
 8016266:	4618      	mov	r0, r3
 8016268:	3710      	adds	r7, #16
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}
	...

08016270 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8016270:	b480      	push	{r7}
 8016272:	b087      	sub	sp, #28
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
 8016278:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016286:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8016288:	7cfb      	ldrb	r3, [r7, #19]
 801628a:	2b01      	cmp	r3, #1
 801628c:	d003      	beq.n	8016296 <HAL_CAN_ConfigFilter+0x26>
 801628e:	7cfb      	ldrb	r3, [r7, #19]
 8016290:	2b02      	cmp	r3, #2
 8016292:	f040 80be 	bne.w	8016412 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8016296:	4b65      	ldr	r3, [pc, #404]	; (801642c <HAL_CAN_ConfigFilter+0x1bc>)
 8016298:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80162a0:	f043 0201 	orr.w	r2, r3, #1
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80162b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80162b4:	697b      	ldr	r3, [r7, #20]
 80162b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162c4:	021b      	lsls	r3, r3, #8
 80162c6:	431a      	orrs	r2, r3
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	695b      	ldr	r3, [r3, #20]
 80162d2:	f003 031f 	and.w	r3, r3, #31
 80162d6:	2201      	movs	r2, #1
 80162d8:	fa02 f303 	lsl.w	r3, r2, r3
 80162dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	43db      	mvns	r3, r3
 80162e8:	401a      	ands	r2, r3
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	69db      	ldr	r3, [r3, #28]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d123      	bne.n	8016340 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	43db      	mvns	r3, r3
 8016302:	401a      	ands	r2, r3
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	68db      	ldr	r3, [r3, #12]
 801630e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	685b      	ldr	r3, [r3, #4]
 8016314:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8016316:	683a      	ldr	r2, [r7, #0]
 8016318:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801631a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	3248      	adds	r2, #72	; 0x48
 8016320:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	689b      	ldr	r3, [r3, #8]
 8016328:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8016334:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8016336:	6979      	ldr	r1, [r7, #20]
 8016338:	3348      	adds	r3, #72	; 0x48
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	440b      	add	r3, r1
 801633e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	69db      	ldr	r3, [r3, #28]
 8016344:	2b01      	cmp	r3, #1
 8016346:	d122      	bne.n	801638e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	431a      	orrs	r2, r3
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8016364:	683a      	ldr	r2, [r7, #0]
 8016366:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8016368:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	3248      	adds	r2, #72	; 0x48
 801636e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	689b      	ldr	r3, [r3, #8]
 8016376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	68db      	ldr	r3, [r3, #12]
 801637c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8016382:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8016384:	6979      	ldr	r1, [r7, #20]
 8016386:	3348      	adds	r3, #72	; 0x48
 8016388:	00db      	lsls	r3, r3, #3
 801638a:	440b      	add	r3, r1
 801638c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	699b      	ldr	r3, [r3, #24]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d109      	bne.n	80163aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	43db      	mvns	r3, r3
 80163a0:	401a      	ands	r2, r3
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80163a8:	e007      	b.n	80163ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	431a      	orrs	r2, r3
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d109      	bne.n	80163d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	43db      	mvns	r3, r3
 80163cc:	401a      	ands	r2, r3
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80163d4:	e007      	b.n	80163e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	431a      	orrs	r2, r3
 80163e0:	697b      	ldr	r3, [r7, #20]
 80163e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	6a1b      	ldr	r3, [r3, #32]
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d107      	bne.n	80163fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	431a      	orrs	r2, r3
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8016404:	f023 0201 	bic.w	r2, r3, #1
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 801640e:	2300      	movs	r3, #0
 8016410:	e006      	b.n	8016420 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801641e:	2301      	movs	r3, #1
  }
}
 8016420:	4618      	mov	r0, r3
 8016422:	371c      	adds	r7, #28
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr
 801642c:	40006400 	.word	0x40006400

08016430 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801643e:	b2db      	uxtb	r3, r3
 8016440:	2b01      	cmp	r3, #1
 8016442:	d12e      	bne.n	80164a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2202      	movs	r2, #2
 8016448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	681a      	ldr	r2, [r3, #0]
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	f022 0201 	bic.w	r2, r2, #1
 801645a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801645c:	f7ff fe00 	bl	8016060 <HAL_GetTick>
 8016460:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8016462:	e012      	b.n	801648a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8016464:	f7ff fdfc 	bl	8016060 <HAL_GetTick>
 8016468:	4602      	mov	r2, r0
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	1ad3      	subs	r3, r2, r3
 801646e:	2b0a      	cmp	r3, #10
 8016470:	d90b      	bls.n	801648a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016476:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2205      	movs	r2, #5
 8016482:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8016486:	2301      	movs	r3, #1
 8016488:	e012      	b.n	80164b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	f003 0301 	and.w	r3, r3, #1
 8016494:	2b00      	cmp	r3, #0
 8016496:	d1e5      	bne.n	8016464 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2200      	movs	r2, #0
 801649c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801649e:	2300      	movs	r3, #0
 80164a0:	e006      	b.n	80164b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80164ae:	2301      	movs	r3, #1
  }
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3710      	adds	r7, #16
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80164b8:	b480      	push	{r7}
 80164ba:	b089      	sub	sp, #36	; 0x24
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	607a      	str	r2, [r7, #4]
 80164c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80164cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	689b      	ldr	r3, [r3, #8]
 80164d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80164d6:	7ffb      	ldrb	r3, [r7, #31]
 80164d8:	2b01      	cmp	r3, #1
 80164da:	d003      	beq.n	80164e4 <HAL_CAN_AddTxMessage+0x2c>
 80164dc:	7ffb      	ldrb	r3, [r7, #31]
 80164de:	2b02      	cmp	r3, #2
 80164e0:	f040 80b8 	bne.w	8016654 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d10a      	bne.n	8016504 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80164ee:	69bb      	ldr	r3, [r7, #24]
 80164f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d105      	bne.n	8016504 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80164f8:	69bb      	ldr	r3, [r7, #24]
 80164fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80164fe:	2b00      	cmp	r3, #0
 8016500:	f000 80a0 	beq.w	8016644 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	0e1b      	lsrs	r3, r3, #24
 8016508:	f003 0303 	and.w	r3, r3, #3
 801650c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 801650e:	697b      	ldr	r3, [r7, #20]
 8016510:	2b02      	cmp	r3, #2
 8016512:	d907      	bls.n	8016524 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016518:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8016520:	2301      	movs	r3, #1
 8016522:	e09e      	b.n	8016662 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8016524:	2201      	movs	r2, #1
 8016526:	697b      	ldr	r3, [r7, #20]
 8016528:	409a      	lsls	r2, r3
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	689b      	ldr	r3, [r3, #8]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d10d      	bne.n	8016552 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8016540:	68f9      	ldr	r1, [r7, #12]
 8016542:	6809      	ldr	r1, [r1, #0]
 8016544:	431a      	orrs	r2, r3
 8016546:	697b      	ldr	r3, [r7, #20]
 8016548:	3318      	adds	r3, #24
 801654a:	011b      	lsls	r3, r3, #4
 801654c:	440b      	add	r3, r1
 801654e:	601a      	str	r2, [r3, #0]
 8016550:	e00f      	b.n	8016572 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8016552:	68bb      	ldr	r3, [r7, #8]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801655c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8016562:	68f9      	ldr	r1, [r7, #12]
 8016564:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8016566:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	3318      	adds	r3, #24
 801656c:	011b      	lsls	r3, r3, #4
 801656e:	440b      	add	r3, r1
 8016570:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	6819      	ldr	r1, [r3, #0]
 8016576:	68bb      	ldr	r3, [r7, #8]
 8016578:	691a      	ldr	r2, [r3, #16]
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	3318      	adds	r3, #24
 801657e:	011b      	lsls	r3, r3, #4
 8016580:	440b      	add	r3, r1
 8016582:	3304      	adds	r3, #4
 8016584:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	7d1b      	ldrb	r3, [r3, #20]
 801658a:	2b01      	cmp	r3, #1
 801658c:	d111      	bne.n	80165b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	3318      	adds	r3, #24
 8016596:	011b      	lsls	r3, r3, #4
 8016598:	4413      	add	r3, r2
 801659a:	3304      	adds	r3, #4
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	68fa      	ldr	r2, [r7, #12]
 80165a0:	6811      	ldr	r1, [r2, #0]
 80165a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80165a6:	697b      	ldr	r3, [r7, #20]
 80165a8:	3318      	adds	r3, #24
 80165aa:	011b      	lsls	r3, r3, #4
 80165ac:	440b      	add	r3, r1
 80165ae:	3304      	adds	r3, #4
 80165b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	3307      	adds	r3, #7
 80165b6:	781b      	ldrb	r3, [r3, #0]
 80165b8:	061a      	lsls	r2, r3, #24
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	3306      	adds	r3, #6
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	041b      	lsls	r3, r3, #16
 80165c2:	431a      	orrs	r2, r3
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	3305      	adds	r3, #5
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	021b      	lsls	r3, r3, #8
 80165cc:	4313      	orrs	r3, r2
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	3204      	adds	r2, #4
 80165d2:	7812      	ldrb	r2, [r2, #0]
 80165d4:	4610      	mov	r0, r2
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	6811      	ldr	r1, [r2, #0]
 80165da:	ea43 0200 	orr.w	r2, r3, r0
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	011b      	lsls	r3, r3, #4
 80165e2:	440b      	add	r3, r1
 80165e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80165e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	3303      	adds	r3, #3
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	061a      	lsls	r2, r3, #24
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	3302      	adds	r3, #2
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	041b      	lsls	r3, r3, #16
 80165fa:	431a      	orrs	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	3301      	adds	r3, #1
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	021b      	lsls	r3, r3, #8
 8016604:	4313      	orrs	r3, r2
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	7812      	ldrb	r2, [r2, #0]
 801660a:	4610      	mov	r0, r2
 801660c:	68fa      	ldr	r2, [r7, #12]
 801660e:	6811      	ldr	r1, [r2, #0]
 8016610:	ea43 0200 	orr.w	r2, r3, r0
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	011b      	lsls	r3, r3, #4
 8016618:	440b      	add	r3, r1
 801661a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801661e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	3318      	adds	r3, #24
 8016628:	011b      	lsls	r3, r3, #4
 801662a:	4413      	add	r3, r2
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	68fa      	ldr	r2, [r7, #12]
 8016630:	6811      	ldr	r1, [r2, #0]
 8016632:	f043 0201 	orr.w	r2, r3, #1
 8016636:	697b      	ldr	r3, [r7, #20]
 8016638:	3318      	adds	r3, #24
 801663a:	011b      	lsls	r3, r3, #4
 801663c:	440b      	add	r3, r1
 801663e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8016640:	2300      	movs	r3, #0
 8016642:	e00e      	b.n	8016662 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016648:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8016650:	2301      	movs	r3, #1
 8016652:	e006      	b.n	8016662 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016660:	2301      	movs	r3, #1
  }
}
 8016662:	4618      	mov	r0, r3
 8016664:	3724      	adds	r7, #36	; 0x24
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr

0801666e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 801666e:	b480      	push	{r7}
 8016670:	b085      	sub	sp, #20
 8016672:	af00      	add	r7, sp, #0
 8016674:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8016676:	2300      	movs	r3, #0
 8016678:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016680:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8016682:	7afb      	ldrb	r3, [r7, #11]
 8016684:	2b01      	cmp	r3, #1
 8016686:	d002      	beq.n	801668e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8016688:	7afb      	ldrb	r3, [r7, #11]
 801668a:	2b02      	cmp	r3, #2
 801668c:	d11d      	bne.n	80166ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	689b      	ldr	r3, [r3, #8]
 8016694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016698:	2b00      	cmp	r3, #0
 801669a:	d002      	beq.n	80166a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	3301      	adds	r3, #1
 80166a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	689b      	ldr	r3, [r3, #8]
 80166a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d002      	beq.n	80166b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	3301      	adds	r3, #1
 80166b4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	689b      	ldr	r3, [r3, #8]
 80166bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d002      	beq.n	80166ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	3301      	adds	r3, #1
 80166c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80166ca:	68fb      	ldr	r3, [r7, #12]
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3714      	adds	r7, #20
 80166d0:	46bd      	mov	sp, r7
 80166d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d6:	4770      	bx	lr

080166d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80166d8:	b480      	push	{r7}
 80166da:	b087      	sub	sp, #28
 80166dc:	af00      	add	r7, sp, #0
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	607a      	str	r2, [r7, #4]
 80166e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80166ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80166ee:	7dfb      	ldrb	r3, [r7, #23]
 80166f0:	2b01      	cmp	r3, #1
 80166f2:	d003      	beq.n	80166fc <HAL_CAN_GetRxMessage+0x24>
 80166f4:	7dfb      	ldrb	r3, [r7, #23]
 80166f6:	2b02      	cmp	r3, #2
 80166f8:	f040 80f3 	bne.w	80168e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10e      	bne.n	8016720 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	f003 0303 	and.w	r3, r3, #3
 801670c:	2b00      	cmp	r3, #0
 801670e:	d116      	bne.n	801673e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801671c:	2301      	movs	r3, #1
 801671e:	e0e7      	b.n	80168f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	691b      	ldr	r3, [r3, #16]
 8016726:	f003 0303 	and.w	r3, r3, #3
 801672a:	2b00      	cmp	r3, #0
 801672c:	d107      	bne.n	801673e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016732:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801673a:	2301      	movs	r3, #1
 801673c:	e0d8      	b.n	80168f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	331b      	adds	r3, #27
 8016746:	011b      	lsls	r3, r3, #4
 8016748:	4413      	add	r3, r2
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f003 0204 	and.w	r2, r3, #4
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	689b      	ldr	r3, [r3, #8]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d10c      	bne.n	8016776 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	681a      	ldr	r2, [r3, #0]
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	331b      	adds	r3, #27
 8016764:	011b      	lsls	r3, r3, #4
 8016766:	4413      	add	r3, r2
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	0d5b      	lsrs	r3, r3, #21
 801676c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	601a      	str	r2, [r3, #0]
 8016774:	e00b      	b.n	801678e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681a      	ldr	r2, [r3, #0]
 801677a:	68bb      	ldr	r3, [r7, #8]
 801677c:	331b      	adds	r3, #27
 801677e:	011b      	lsls	r3, r3, #4
 8016780:	4413      	add	r3, r2
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	08db      	lsrs	r3, r3, #3
 8016786:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	681a      	ldr	r2, [r3, #0]
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	331b      	adds	r3, #27
 8016796:	011b      	lsls	r3, r3, #4
 8016798:	4413      	add	r3, r2
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	f003 0202 	and.w	r2, r3, #2
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	331b      	adds	r3, #27
 80167ac:	011b      	lsls	r3, r3, #4
 80167ae:	4413      	add	r3, r2
 80167b0:	3304      	adds	r3, #4
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	f003 020f 	and.w	r2, r3, #15
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681a      	ldr	r2, [r3, #0]
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	331b      	adds	r3, #27
 80167c4:	011b      	lsls	r3, r3, #4
 80167c6:	4413      	add	r3, r2
 80167c8:	3304      	adds	r3, #4
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	0a1b      	lsrs	r3, r3, #8
 80167ce:	b2da      	uxtb	r2, r3
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681a      	ldr	r2, [r3, #0]
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	331b      	adds	r3, #27
 80167dc:	011b      	lsls	r3, r3, #4
 80167de:	4413      	add	r3, r2
 80167e0:	3304      	adds	r3, #4
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	0c1b      	lsrs	r3, r3, #16
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681a      	ldr	r2, [r3, #0]
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	011b      	lsls	r3, r3, #4
 80167f4:	4413      	add	r3, r2
 80167f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	b2da      	uxtb	r2, r3
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	011b      	lsls	r3, r3, #4
 801680a:	4413      	add	r3, r2
 801680c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	0a1a      	lsrs	r2, r3, #8
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	3301      	adds	r3, #1
 8016818:	b2d2      	uxtb	r2, r2
 801681a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681a      	ldr	r2, [r3, #0]
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	011b      	lsls	r3, r3, #4
 8016824:	4413      	add	r3, r2
 8016826:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	0c1a      	lsrs	r2, r3, #16
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	3302      	adds	r3, #2
 8016832:	b2d2      	uxtb	r2, r2
 8016834:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	68bb      	ldr	r3, [r7, #8]
 801683c:	011b      	lsls	r3, r3, #4
 801683e:	4413      	add	r3, r2
 8016840:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	0e1a      	lsrs	r2, r3, #24
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	3303      	adds	r3, #3
 801684c:	b2d2      	uxtb	r2, r2
 801684e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	011b      	lsls	r3, r3, #4
 8016858:	4413      	add	r3, r2
 801685a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	3304      	adds	r3, #4
 8016864:	b2d2      	uxtb	r2, r2
 8016866:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	68bb      	ldr	r3, [r7, #8]
 801686e:	011b      	lsls	r3, r3, #4
 8016870:	4413      	add	r3, r2
 8016872:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	0a1a      	lsrs	r2, r3, #8
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	3305      	adds	r3, #5
 801687e:	b2d2      	uxtb	r2, r2
 8016880:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	68bb      	ldr	r3, [r7, #8]
 8016888:	011b      	lsls	r3, r3, #4
 801688a:	4413      	add	r3, r2
 801688c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	0c1a      	lsrs	r2, r3, #16
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	3306      	adds	r3, #6
 8016898:	b2d2      	uxtb	r2, r2
 801689a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	681a      	ldr	r2, [r3, #0]
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	011b      	lsls	r3, r3, #4
 80168a4:	4413      	add	r3, r2
 80168a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	0e1a      	lsrs	r2, r3, #24
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	3307      	adds	r3, #7
 80168b2:	b2d2      	uxtb	r2, r2
 80168b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d108      	bne.n	80168ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	68da      	ldr	r2, [r3, #12]
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f042 0220 	orr.w	r2, r2, #32
 80168ca:	60da      	str	r2, [r3, #12]
 80168cc:	e007      	b.n	80168de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	691a      	ldr	r2, [r3, #16]
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	f042 0220 	orr.w	r2, r2, #32
 80168dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80168de:	2300      	movs	r3, #0
 80168e0:	e006      	b.n	80168f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80168ee:	2301      	movs	r3, #1
  }
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	371c      	adds	r7, #28
 80168f4:	46bd      	mov	sp, r7
 80168f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fa:	4770      	bx	lr

080168fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80168fc:	b480      	push	{r7}
 80168fe:	b085      	sub	sp, #20
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f893 3020 	ldrb.w	r3, [r3, #32]
 801690c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801690e:	7bfb      	ldrb	r3, [r7, #15]
 8016910:	2b01      	cmp	r3, #1
 8016912:	d002      	beq.n	801691a <HAL_CAN_ActivateNotification+0x1e>
 8016914:	7bfb      	ldrb	r3, [r7, #15]
 8016916:	2b02      	cmp	r3, #2
 8016918:	d109      	bne.n	801692e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	6959      	ldr	r1, [r3, #20]
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	683a      	ldr	r2, [r7, #0]
 8016926:	430a      	orrs	r2, r1
 8016928:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 801692a:	2300      	movs	r3, #0
 801692c:	e006      	b.n	801693c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016932:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801693a:	2301      	movs	r3, #1
  }
}
 801693c:	4618      	mov	r0, r3
 801693e:	3714      	adds	r7, #20
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr

08016948 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08a      	sub	sp, #40	; 0x28
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8016950:	2300      	movs	r3, #0
 8016952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	695b      	ldr	r3, [r3, #20]
 801695a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	689b      	ldr	r3, [r3, #8]
 801696a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	68db      	ldr	r3, [r3, #12]
 8016972:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	691b      	ldr	r3, [r3, #16]
 801697a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	699b      	ldr	r3, [r3, #24]
 8016982:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8016984:	6a3b      	ldr	r3, [r7, #32]
 8016986:	f003 0301 	and.w	r3, r3, #1
 801698a:	2b00      	cmp	r3, #0
 801698c:	d07c      	beq.n	8016a88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 801698e:	69bb      	ldr	r3, [r7, #24]
 8016990:	f003 0301 	and.w	r3, r3, #1
 8016994:	2b00      	cmp	r3, #0
 8016996:	d023      	beq.n	80169e0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2201      	movs	r2, #1
 801699e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80169a0:	69bb      	ldr	r3, [r7, #24]
 80169a2:	f003 0302 	and.w	r3, r3, #2
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d003      	beq.n	80169b2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f000 f983 	bl	8016cb6 <HAL_CAN_TxMailbox0CompleteCallback>
 80169b0:	e016      	b.n	80169e0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80169b2:	69bb      	ldr	r3, [r7, #24]
 80169b4:	f003 0304 	and.w	r3, r3, #4
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d004      	beq.n	80169c6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80169bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80169c2:	627b      	str	r3, [r7, #36]	; 0x24
 80169c4:	e00c      	b.n	80169e0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80169c6:	69bb      	ldr	r3, [r7, #24]
 80169c8:	f003 0308 	and.w	r3, r3, #8
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d004      	beq.n	80169da <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80169d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80169d6:	627b      	str	r3, [r7, #36]	; 0x24
 80169d8:	e002      	b.n	80169e0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f000 f989 	bl	8016cf2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80169e0:	69bb      	ldr	r3, [r7, #24]
 80169e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d024      	beq.n	8016a34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80169f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80169f4:	69bb      	ldr	r3, [r7, #24]
 80169f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d003      	beq.n	8016a06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f000 f963 	bl	8016cca <HAL_CAN_TxMailbox1CompleteCallback>
 8016a04:	e016      	b.n	8016a34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d004      	beq.n	8016a1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8016a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016a16:	627b      	str	r3, [r7, #36]	; 0x24
 8016a18:	e00c      	b.n	8016a34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8016a1a:	69bb      	ldr	r3, [r7, #24]
 8016a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d004      	beq.n	8016a2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8016a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8016a2c:	e002      	b.n	8016a34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 f969 	bl	8016d06 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8016a34:	69bb      	ldr	r3, [r7, #24]
 8016a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d024      	beq.n	8016a88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016a46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8016a48:	69bb      	ldr	r3, [r7, #24]
 8016a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d003      	beq.n	8016a5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f000 f943 	bl	8016cde <HAL_CAN_TxMailbox2CompleteCallback>
 8016a58:	e016      	b.n	8016a88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d004      	beq.n	8016a6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8016a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8016a6c:	e00c      	b.n	8016a88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8016a6e:	69bb      	ldr	r3, [r7, #24]
 8016a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d004      	beq.n	8016a82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8016a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8016a80:	e002      	b.n	8016a88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f000 f949 	bl	8016d1a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8016a88:	6a3b      	ldr	r3, [r7, #32]
 8016a8a:	f003 0308 	and.w	r3, r3, #8
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00c      	beq.n	8016aac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	f003 0310 	and.w	r3, r3, #16
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d007      	beq.n	8016aac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8016a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016aa2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	2210      	movs	r2, #16
 8016aaa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8016aac:	6a3b      	ldr	r3, [r7, #32]
 8016aae:	f003 0304 	and.w	r3, r3, #4
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00b      	beq.n	8016ace <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	f003 0308 	and.w	r3, r3, #8
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d006      	beq.n	8016ace <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	2208      	movs	r2, #8
 8016ac6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f000 f930 	bl	8016d2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8016ace:	6a3b      	ldr	r3, [r7, #32]
 8016ad0:	f003 0302 	and.w	r3, r3, #2
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d009      	beq.n	8016aec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	68db      	ldr	r3, [r3, #12]
 8016ade:	f003 0303 	and.w	r3, r3, #3
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d002      	beq.n	8016aec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7f5 f93c 	bl	800bd64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00c      	beq.n	8016b10 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	f003 0310 	and.w	r3, r3, #16
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d007      	beq.n	8016b10 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8016b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	2210      	movs	r2, #16
 8016b0e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8016b10:	6a3b      	ldr	r3, [r7, #32]
 8016b12:	f003 0320 	and.w	r3, r3, #32
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d00b      	beq.n	8016b32 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	f003 0308 	and.w	r3, r3, #8
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d006      	beq.n	8016b32 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	2208      	movs	r2, #8
 8016b2a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f000 f908 	bl	8016d42 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8016b32:	6a3b      	ldr	r3, [r7, #32]
 8016b34:	f003 0310 	and.w	r3, r3, #16
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d009      	beq.n	8016b50 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	691b      	ldr	r3, [r3, #16]
 8016b42:	f003 0303 	and.w	r3, r3, #3
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d002      	beq.n	8016b50 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f7f5 fa9a 	bl	800c084 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8016b50:	6a3b      	ldr	r3, [r7, #32]
 8016b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d00b      	beq.n	8016b72 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8016b5a:	69fb      	ldr	r3, [r7, #28]
 8016b5c:	f003 0310 	and.w	r3, r3, #16
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d006      	beq.n	8016b72 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	2210      	movs	r2, #16
 8016b6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f000 f8f2 	bl	8016d56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8016b72:	6a3b      	ldr	r3, [r7, #32]
 8016b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d00b      	beq.n	8016b94 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8016b7c:	69fb      	ldr	r3, [r7, #28]
 8016b7e:	f003 0308 	and.w	r3, r3, #8
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d006      	beq.n	8016b94 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2208      	movs	r2, #8
 8016b8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8016b8e:	6878      	ldr	r0, [r7, #4]
 8016b90:	f000 f8eb 	bl	8016d6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8016b94:	6a3b      	ldr	r3, [r7, #32]
 8016b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d07b      	beq.n	8016c96 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	f003 0304 	and.w	r3, r3, #4
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d072      	beq.n	8016c8e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016ba8:	6a3b      	ldr	r3, [r7, #32]
 8016baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d008      	beq.n	8016bc4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d003      	beq.n	8016bc4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8016bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bbe:	f043 0301 	orr.w	r3, r3, #1
 8016bc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8016bc4:	6a3b      	ldr	r3, [r7, #32]
 8016bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d008      	beq.n	8016be0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d003      	beq.n	8016be0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8016bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bda:	f043 0302 	orr.w	r3, r3, #2
 8016bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8016be0:	6a3b      	ldr	r3, [r7, #32]
 8016be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d008      	beq.n	8016bfc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d003      	beq.n	8016bfc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8016bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf6:	f043 0304 	orr.w	r3, r3, #4
 8016bfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016bfc:	6a3b      	ldr	r3, [r7, #32]
 8016bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d043      	beq.n	8016c8e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d03e      	beq.n	8016c8e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016c16:	2b60      	cmp	r3, #96	; 0x60
 8016c18:	d02b      	beq.n	8016c72 <HAL_CAN_IRQHandler+0x32a>
 8016c1a:	2b60      	cmp	r3, #96	; 0x60
 8016c1c:	d82e      	bhi.n	8016c7c <HAL_CAN_IRQHandler+0x334>
 8016c1e:	2b50      	cmp	r3, #80	; 0x50
 8016c20:	d022      	beq.n	8016c68 <HAL_CAN_IRQHandler+0x320>
 8016c22:	2b50      	cmp	r3, #80	; 0x50
 8016c24:	d82a      	bhi.n	8016c7c <HAL_CAN_IRQHandler+0x334>
 8016c26:	2b40      	cmp	r3, #64	; 0x40
 8016c28:	d019      	beq.n	8016c5e <HAL_CAN_IRQHandler+0x316>
 8016c2a:	2b40      	cmp	r3, #64	; 0x40
 8016c2c:	d826      	bhi.n	8016c7c <HAL_CAN_IRQHandler+0x334>
 8016c2e:	2b30      	cmp	r3, #48	; 0x30
 8016c30:	d010      	beq.n	8016c54 <HAL_CAN_IRQHandler+0x30c>
 8016c32:	2b30      	cmp	r3, #48	; 0x30
 8016c34:	d822      	bhi.n	8016c7c <HAL_CAN_IRQHandler+0x334>
 8016c36:	2b10      	cmp	r3, #16
 8016c38:	d002      	beq.n	8016c40 <HAL_CAN_IRQHandler+0x2f8>
 8016c3a:	2b20      	cmp	r3, #32
 8016c3c:	d005      	beq.n	8016c4a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8016c3e:	e01d      	b.n	8016c7c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8016c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c42:	f043 0308 	orr.w	r3, r3, #8
 8016c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016c48:	e019      	b.n	8016c7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8016c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4c:	f043 0310 	orr.w	r3, r3, #16
 8016c50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016c52:	e014      	b.n	8016c7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8016c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c56:	f043 0320 	orr.w	r3, r3, #32
 8016c5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016c5c:	e00f      	b.n	8016c7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8016c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016c66:	e00a      	b.n	8016c7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8016c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016c70:	e005      	b.n	8016c7e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8016c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016c78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016c7a:	e000      	b.n	8016c7e <HAL_CAN_IRQHandler+0x336>
            break;
 8016c7c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	699a      	ldr	r2, [r3, #24]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8016c8c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2204      	movs	r2, #4
 8016c94:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8016c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d008      	beq.n	8016cae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca2:	431a      	orrs	r2, r3
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8016ca8:	6878      	ldr	r0, [r7, #4]
 8016caa:	f000 f868 	bl	8016d7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8016cae:	bf00      	nop
 8016cb0:	3728      	adds	r7, #40	; 0x28
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}

08016cb6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016cb6:	b480      	push	{r7}
 8016cb8:	b083      	sub	sp, #12
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8016cbe:	bf00      	nop
 8016cc0:	370c      	adds	r7, #12
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc8:	4770      	bx	lr

08016cca <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016cca:	b480      	push	{r7}
 8016ccc:	b083      	sub	sp, #12
 8016cce:	af00      	add	r7, sp, #0
 8016cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8016cd2:	bf00      	nop
 8016cd4:	370c      	adds	r7, #12
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cdc:	4770      	bx	lr

08016cde <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016cde:	b480      	push	{r7}
 8016ce0:	b083      	sub	sp, #12
 8016ce2:	af00      	add	r7, sp, #0
 8016ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8016ce6:	bf00      	nop
 8016ce8:	370c      	adds	r7, #12
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr

08016cf2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016cf2:	b480      	push	{r7}
 8016cf4:	b083      	sub	sp, #12
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8016cfa:	bf00      	nop
 8016cfc:	370c      	adds	r7, #12
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d04:	4770      	bx	lr

08016d06 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016d06:	b480      	push	{r7}
 8016d08:	b083      	sub	sp, #12
 8016d0a:	af00      	add	r7, sp, #0
 8016d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8016d0e:	bf00      	nop
 8016d10:	370c      	adds	r7, #12
 8016d12:	46bd      	mov	sp, r7
 8016d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d18:	4770      	bx	lr

08016d1a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016d1a:	b480      	push	{r7}
 8016d1c:	b083      	sub	sp, #12
 8016d1e:	af00      	add	r7, sp, #0
 8016d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8016d22:	bf00      	nop
 8016d24:	370c      	adds	r7, #12
 8016d26:	46bd      	mov	sp, r7
 8016d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2c:	4770      	bx	lr

08016d2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8016d2e:	b480      	push	{r7}
 8016d30:	b083      	sub	sp, #12
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8016d36:	bf00      	nop
 8016d38:	370c      	adds	r7, #12
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d40:	4770      	bx	lr

08016d42 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8016d42:	b480      	push	{r7}
 8016d44:	b083      	sub	sp, #12
 8016d46:	af00      	add	r7, sp, #0
 8016d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8016d4a:	bf00      	nop
 8016d4c:	370c      	adds	r7, #12
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d54:	4770      	bx	lr

08016d56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8016d56:	b480      	push	{r7}
 8016d58:	b083      	sub	sp, #12
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8016d5e:	bf00      	nop
 8016d60:	370c      	adds	r7, #12
 8016d62:	46bd      	mov	sp, r7
 8016d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d68:	4770      	bx	lr

08016d6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8016d6a:	b480      	push	{r7}
 8016d6c:	b083      	sub	sp, #12
 8016d6e:	af00      	add	r7, sp, #0
 8016d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8016d72:	bf00      	nop
 8016d74:	370c      	adds	r7, #12
 8016d76:	46bd      	mov	sp, r7
 8016d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7c:	4770      	bx	lr

08016d7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8016d7e:	b480      	push	{r7}
 8016d80:	b083      	sub	sp, #12
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8016d86:	bf00      	nop
 8016d88:	370c      	adds	r7, #12
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d90:	4770      	bx	lr
	...

08016d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016d94:	b480      	push	{r7}
 8016d96:	b085      	sub	sp, #20
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f003 0307 	and.w	r3, r3, #7
 8016da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016da4:	4b0c      	ldr	r3, [pc, #48]	; (8016dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8016da6:	68db      	ldr	r3, [r3, #12]
 8016da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016daa:	68ba      	ldr	r2, [r7, #8]
 8016dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016db0:	4013      	ands	r3, r2
 8016db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016db8:	68bb      	ldr	r3, [r7, #8]
 8016dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8016dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8016dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016dc6:	4a04      	ldr	r2, [pc, #16]	; (8016dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	60d3      	str	r3, [r2, #12]
}
 8016dcc:	bf00      	nop
 8016dce:	3714      	adds	r7, #20
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd6:	4770      	bx	lr
 8016dd8:	e000ed00 	.word	0xe000ed00

08016ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8016ddc:	b480      	push	{r7}
 8016dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016de0:	4b04      	ldr	r3, [pc, #16]	; (8016df4 <__NVIC_GetPriorityGrouping+0x18>)
 8016de2:	68db      	ldr	r3, [r3, #12]
 8016de4:	0a1b      	lsrs	r3, r3, #8
 8016de6:	f003 0307 	and.w	r3, r3, #7
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	46bd      	mov	sp, r7
 8016dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df2:	4770      	bx	lr
 8016df4:	e000ed00 	.word	0xe000ed00

08016df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016df8:	b480      	push	{r7}
 8016dfa:	b083      	sub	sp, #12
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	4603      	mov	r3, r0
 8016e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	db0b      	blt.n	8016e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016e0a:	79fb      	ldrb	r3, [r7, #7]
 8016e0c:	f003 021f 	and.w	r2, r3, #31
 8016e10:	4907      	ldr	r1, [pc, #28]	; (8016e30 <__NVIC_EnableIRQ+0x38>)
 8016e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e16:	095b      	lsrs	r3, r3, #5
 8016e18:	2001      	movs	r0, #1
 8016e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8016e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016e22:	bf00      	nop
 8016e24:	370c      	adds	r7, #12
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr
 8016e2e:	bf00      	nop
 8016e30:	e000e100 	.word	0xe000e100

08016e34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8016e34:	b480      	push	{r7}
 8016e36:	b083      	sub	sp, #12
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	db12      	blt.n	8016e6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016e46:	79fb      	ldrb	r3, [r7, #7]
 8016e48:	f003 021f 	and.w	r2, r3, #31
 8016e4c:	490a      	ldr	r1, [pc, #40]	; (8016e78 <__NVIC_DisableIRQ+0x44>)
 8016e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e52:	095b      	lsrs	r3, r3, #5
 8016e54:	2001      	movs	r0, #1
 8016e56:	fa00 f202 	lsl.w	r2, r0, r2
 8016e5a:	3320      	adds	r3, #32
 8016e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8016e60:	f3bf 8f4f 	dsb	sy
}
 8016e64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016e66:	f3bf 8f6f 	isb	sy
}
 8016e6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8016e6c:	bf00      	nop
 8016e6e:	370c      	adds	r7, #12
 8016e70:	46bd      	mov	sp, r7
 8016e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e76:	4770      	bx	lr
 8016e78:	e000e100 	.word	0xe000e100

08016e7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8016e7c:	b480      	push	{r7}
 8016e7e:	b083      	sub	sp, #12
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	4603      	mov	r3, r0
 8016e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	db0c      	blt.n	8016ea8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016e8e:	79fb      	ldrb	r3, [r7, #7]
 8016e90:	f003 021f 	and.w	r2, r3, #31
 8016e94:	4907      	ldr	r1, [pc, #28]	; (8016eb4 <__NVIC_ClearPendingIRQ+0x38>)
 8016e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e9a:	095b      	lsrs	r3, r3, #5
 8016e9c:	2001      	movs	r0, #1
 8016e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8016ea2:	3360      	adds	r3, #96	; 0x60
 8016ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016ea8:	bf00      	nop
 8016eaa:	370c      	adds	r7, #12
 8016eac:	46bd      	mov	sp, r7
 8016eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb2:	4770      	bx	lr
 8016eb4:	e000e100 	.word	0xe000e100

08016eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016eb8:	b480      	push	{r7}
 8016eba:	b083      	sub	sp, #12
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	6039      	str	r1, [r7, #0]
 8016ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	db0a      	blt.n	8016ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	b2da      	uxtb	r2, r3
 8016ed0:	490c      	ldr	r1, [pc, #48]	; (8016f04 <__NVIC_SetPriority+0x4c>)
 8016ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ed6:	0112      	lsls	r2, r2, #4
 8016ed8:	b2d2      	uxtb	r2, r2
 8016eda:	440b      	add	r3, r1
 8016edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016ee0:	e00a      	b.n	8016ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ee2:	683b      	ldr	r3, [r7, #0]
 8016ee4:	b2da      	uxtb	r2, r3
 8016ee6:	4908      	ldr	r1, [pc, #32]	; (8016f08 <__NVIC_SetPriority+0x50>)
 8016ee8:	79fb      	ldrb	r3, [r7, #7]
 8016eea:	f003 030f 	and.w	r3, r3, #15
 8016eee:	3b04      	subs	r3, #4
 8016ef0:	0112      	lsls	r2, r2, #4
 8016ef2:	b2d2      	uxtb	r2, r2
 8016ef4:	440b      	add	r3, r1
 8016ef6:	761a      	strb	r2, [r3, #24]
}
 8016ef8:	bf00      	nop
 8016efa:	370c      	adds	r7, #12
 8016efc:	46bd      	mov	sp, r7
 8016efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f02:	4770      	bx	lr
 8016f04:	e000e100 	.word	0xe000e100
 8016f08:	e000ed00 	.word	0xe000ed00

08016f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016f0c:	b480      	push	{r7}
 8016f0e:	b089      	sub	sp, #36	; 0x24
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	f003 0307 	and.w	r3, r3, #7
 8016f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	f1c3 0307 	rsb	r3, r3, #7
 8016f26:	2b04      	cmp	r3, #4
 8016f28:	bf28      	it	cs
 8016f2a:	2304      	movcs	r3, #4
 8016f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016f2e:	69fb      	ldr	r3, [r7, #28]
 8016f30:	3304      	adds	r3, #4
 8016f32:	2b06      	cmp	r3, #6
 8016f34:	d902      	bls.n	8016f3c <NVIC_EncodePriority+0x30>
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	3b03      	subs	r3, #3
 8016f3a:	e000      	b.n	8016f3e <NVIC_EncodePriority+0x32>
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f44:	69bb      	ldr	r3, [r7, #24]
 8016f46:	fa02 f303 	lsl.w	r3, r2, r3
 8016f4a:	43da      	mvns	r2, r3
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	401a      	ands	r2, r3
 8016f50:	697b      	ldr	r3, [r7, #20]
 8016f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f5e:	43d9      	mvns	r1, r3
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016f64:	4313      	orrs	r3, r2
         );
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3724      	adds	r7, #36	; 0x24
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f70:	4770      	bx	lr

08016f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016f72:	b580      	push	{r7, lr}
 8016f74:	b082      	sub	sp, #8
 8016f76:	af00      	add	r7, sp, #0
 8016f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f7ff ff0a 	bl	8016d94 <__NVIC_SetPriorityGrouping>
}
 8016f80:	bf00      	nop
 8016f82:	3708      	adds	r7, #8
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b086      	sub	sp, #24
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	4603      	mov	r3, r0
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	607a      	str	r2, [r7, #4]
 8016f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8016f96:	2300      	movs	r3, #0
 8016f98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016f9a:	f7ff ff1f 	bl	8016ddc <__NVIC_GetPriorityGrouping>
 8016f9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	68b9      	ldr	r1, [r7, #8]
 8016fa4:	6978      	ldr	r0, [r7, #20]
 8016fa6:	f7ff ffb1 	bl	8016f0c <NVIC_EncodePriority>
 8016faa:	4602      	mov	r2, r0
 8016fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fb0:	4611      	mov	r1, r2
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7ff ff80 	bl	8016eb8 <__NVIC_SetPriority>
}
 8016fb8:	bf00      	nop
 8016fba:	3718      	adds	r7, #24
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}

08016fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f7ff ff12 	bl	8016df8 <__NVIC_EnableIRQ>
}
 8016fd4:	bf00      	nop
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b082      	sub	sp, #8
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	4603      	mov	r3, r0
 8016fe4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8016fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7ff ff22 	bl	8016e34 <__NVIC_DisableIRQ>
}
 8016ff0:	bf00      	nop
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}

08016ff8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b082      	sub	sp, #8
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	4603      	mov	r3, r0
 8017000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8017002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017006:	4618      	mov	r0, r3
 8017008:	f7ff ff38 	bl	8016e7c <__NVIC_ClearPendingIRQ>
}
 801700c:	bf00      	nop
 801700e:	3708      	adds	r7, #8
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b086      	sub	sp, #24
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801701c:	2300      	movs	r3, #0
 801701e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8017020:	f7ff f81e 	bl	8016060 <HAL_GetTick>
 8017024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d101      	bne.n	8017030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801702c:	2301      	movs	r3, #1
 801702e:	e099      	b.n	8017164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2200      	movs	r2, #0
 8017034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	2202      	movs	r2, #2
 801703c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	681a      	ldr	r2, [r3, #0]
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	f022 0201 	bic.w	r2, r2, #1
 801704e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017050:	e00f      	b.n	8017072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017052:	f7ff f805 	bl	8016060 <HAL_GetTick>
 8017056:	4602      	mov	r2, r0
 8017058:	693b      	ldr	r3, [r7, #16]
 801705a:	1ad3      	subs	r3, r2, r3
 801705c:	2b05      	cmp	r3, #5
 801705e:	d908      	bls.n	8017072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2220      	movs	r2, #32
 8017064:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	2203      	movs	r2, #3
 801706a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801706e:	2303      	movs	r3, #3
 8017070:	e078      	b.n	8017164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	f003 0301 	and.w	r3, r3, #1
 801707c:	2b00      	cmp	r3, #0
 801707e:	d1e8      	bne.n	8017052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8017088:	697a      	ldr	r2, [r7, #20]
 801708a:	4b38      	ldr	r3, [pc, #224]	; (801716c <HAL_DMA_Init+0x158>)
 801708c:	4013      	ands	r3, r2
 801708e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	685a      	ldr	r2, [r3, #4]
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	689b      	ldr	r3, [r3, #8]
 8017098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801709e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	691b      	ldr	r3, [r3, #16]
 80170a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80170aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	699b      	ldr	r3, [r3, #24]
 80170b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80170b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6a1b      	ldr	r3, [r3, #32]
 80170bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80170be:	697a      	ldr	r2, [r7, #20]
 80170c0:	4313      	orrs	r3, r2
 80170c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c8:	2b04      	cmp	r3, #4
 80170ca:	d107      	bne.n	80170dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170d4:	4313      	orrs	r3, r2
 80170d6:	697a      	ldr	r2, [r7, #20]
 80170d8:	4313      	orrs	r3, r2
 80170da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	697a      	ldr	r2, [r7, #20]
 80170e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	695b      	ldr	r3, [r3, #20]
 80170ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	f023 0307 	bic.w	r3, r3, #7
 80170f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170f8:	697a      	ldr	r2, [r7, #20]
 80170fa:	4313      	orrs	r3, r2
 80170fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017102:	2b04      	cmp	r3, #4
 8017104:	d117      	bne.n	8017136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801710a:	697a      	ldr	r2, [r7, #20]
 801710c:	4313      	orrs	r3, r2
 801710e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017114:	2b00      	cmp	r3, #0
 8017116:	d00e      	beq.n	8017136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017118:	6878      	ldr	r0, [r7, #4]
 801711a:	f000 fb09 	bl	8017730 <DMA_CheckFifoParam>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d008      	beq.n	8017136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2240      	movs	r2, #64	; 0x40
 8017128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2201      	movs	r2, #1
 801712e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8017132:	2301      	movs	r3, #1
 8017134:	e016      	b.n	8017164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	697a      	ldr	r2, [r7, #20]
 801713c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 fac0 	bl	80176c4 <DMA_CalcBaseAndBitshift>
 8017144:	4603      	mov	r3, r0
 8017146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801714c:	223f      	movs	r2, #63	; 0x3f
 801714e:	409a      	lsls	r2, r3
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2200      	movs	r2, #0
 8017158:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2201      	movs	r2, #1
 801715e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017162:	2300      	movs	r3, #0
}
 8017164:	4618      	mov	r0, r3
 8017166:	3718      	adds	r7, #24
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}
 801716c:	f010803f 	.word	0xf010803f

08017170 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b084      	sub	sp, #16
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d101      	bne.n	8017182 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801717e:	2301      	movs	r3, #1
 8017180:	e050      	b.n	8017224 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017188:	b2db      	uxtb	r3, r3
 801718a:	2b02      	cmp	r3, #2
 801718c:	d101      	bne.n	8017192 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 801718e:	2302      	movs	r3, #2
 8017190:	e048      	b.n	8017224 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	681a      	ldr	r2, [r3, #0]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	f022 0201 	bic.w	r2, r2, #1
 80171a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	2200      	movs	r2, #0
 80171a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2200      	movs	r2, #0
 80171b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	2200      	movs	r2, #0
 80171b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	2200      	movs	r2, #0
 80171c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	2200      	movs	r2, #0
 80171c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	2221      	movs	r2, #33	; 0x21
 80171d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 fa76 	bl	80176c4 <DMA_CalcBaseAndBitshift>
 80171d8:	4603      	mov	r3, r0
 80171da:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2200      	movs	r2, #0
 80171e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2200      	movs	r2, #0
 80171e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2200      	movs	r2, #0
 80171ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	2200      	movs	r2, #0
 80171f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2200      	movs	r2, #0
 80171f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	2200      	movs	r2, #0
 80171fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017204:	223f      	movs	r2, #63	; 0x3f
 8017206:	409a      	lsls	r2, r3
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2200      	movs	r2, #0
 8017210:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	2200      	movs	r2, #0
 8017216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2200      	movs	r2, #0
 801721e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8017222:	2300      	movs	r3, #0
}
 8017224:	4618      	mov	r0, r3
 8017226:	3710      	adds	r7, #16
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}

0801722c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b086      	sub	sp, #24
 8017230:	af00      	add	r7, sp, #0
 8017232:	60f8      	str	r0, [r7, #12]
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801723a:	2300      	movs	r3, #0
 801723c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017242:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801724a:	2b01      	cmp	r3, #1
 801724c:	d101      	bne.n	8017252 <HAL_DMA_Start_IT+0x26>
 801724e:	2302      	movs	r3, #2
 8017250:	e040      	b.n	80172d4 <HAL_DMA_Start_IT+0xa8>
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2201      	movs	r2, #1
 8017256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017260:	b2db      	uxtb	r3, r3
 8017262:	2b01      	cmp	r3, #1
 8017264:	d12f      	bne.n	80172c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	2202      	movs	r2, #2
 801726a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	2200      	movs	r2, #0
 8017272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017274:	683b      	ldr	r3, [r7, #0]
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	68b9      	ldr	r1, [r7, #8]
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	f000 f9f4 	bl	8017668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017284:	223f      	movs	r2, #63	; 0x3f
 8017286:	409a      	lsls	r2, r3
 8017288:	693b      	ldr	r3, [r7, #16]
 801728a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	681a      	ldr	r2, [r3, #0]
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f042 0216 	orr.w	r2, r2, #22
 801729a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d007      	beq.n	80172b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f042 0208 	orr.w	r2, r2, #8
 80172b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	f042 0201 	orr.w	r2, r2, #1
 80172c2:	601a      	str	r2, [r3, #0]
 80172c4:	e005      	b.n	80172d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	2200      	movs	r2, #0
 80172ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 80172ce:	2302      	movs	r3, #2
 80172d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80172d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	3718      	adds	r7, #24
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80172dc:	b480      	push	{r7}
 80172de:	b083      	sub	sp, #12
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80172ea:	b2db      	uxtb	r3, r3
 80172ec:	2b02      	cmp	r3, #2
 80172ee:	d004      	beq.n	80172fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	2280      	movs	r2, #128	; 0x80
 80172f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80172f6:	2301      	movs	r3, #1
 80172f8:	e00c      	b.n	8017314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	2205      	movs	r2, #5
 80172fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	681a      	ldr	r2, [r3, #0]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	f022 0201 	bic.w	r2, r2, #1
 8017310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8017312:	2300      	movs	r3, #0
}
 8017314:	4618      	mov	r0, r3
 8017316:	370c      	adds	r7, #12
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr

08017320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b086      	sub	sp, #24
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8017328:	2300      	movs	r3, #0
 801732a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801732c:	4b92      	ldr	r3, [pc, #584]	; (8017578 <HAL_DMA_IRQHandler+0x258>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4a92      	ldr	r2, [pc, #584]	; (801757c <HAL_DMA_IRQHandler+0x25c>)
 8017332:	fba2 2303 	umull	r2, r3, r2, r3
 8017336:	0a9b      	lsrs	r3, r3, #10
 8017338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801733e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801734a:	2208      	movs	r2, #8
 801734c:	409a      	lsls	r2, r3
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	4013      	ands	r3, r2
 8017352:	2b00      	cmp	r3, #0
 8017354:	d01a      	beq.n	801738c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	f003 0304 	and.w	r3, r3, #4
 8017360:	2b00      	cmp	r3, #0
 8017362:	d013      	beq.n	801738c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	f022 0204 	bic.w	r2, r2, #4
 8017372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017378:	2208      	movs	r2, #8
 801737a:	409a      	lsls	r2, r3
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017384:	f043 0201 	orr.w	r2, r3, #1
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017390:	2201      	movs	r2, #1
 8017392:	409a      	lsls	r2, r3
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	4013      	ands	r3, r2
 8017398:	2b00      	cmp	r3, #0
 801739a:	d012      	beq.n	80173c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	695b      	ldr	r3, [r3, #20]
 80173a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d00b      	beq.n	80173c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173ae:	2201      	movs	r2, #1
 80173b0:	409a      	lsls	r2, r3
 80173b2:	693b      	ldr	r3, [r7, #16]
 80173b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173ba:	f043 0202 	orr.w	r2, r3, #2
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173c6:	2204      	movs	r2, #4
 80173c8:	409a      	lsls	r2, r3
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	4013      	ands	r3, r2
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d012      	beq.n	80173f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	f003 0302 	and.w	r3, r3, #2
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d00b      	beq.n	80173f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173e4:	2204      	movs	r2, #4
 80173e6:	409a      	lsls	r2, r3
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173f0:	f043 0204 	orr.w	r2, r3, #4
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80173fc:	2210      	movs	r2, #16
 80173fe:	409a      	lsls	r2, r3
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	4013      	ands	r3, r2
 8017404:	2b00      	cmp	r3, #0
 8017406:	d043      	beq.n	8017490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	f003 0308 	and.w	r3, r3, #8
 8017412:	2b00      	cmp	r3, #0
 8017414:	d03c      	beq.n	8017490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801741a:	2210      	movs	r2, #16
 801741c:	409a      	lsls	r2, r3
 801741e:	693b      	ldr	r3, [r7, #16]
 8017420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801742c:	2b00      	cmp	r3, #0
 801742e:	d018      	beq.n	8017462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801743a:	2b00      	cmp	r3, #0
 801743c:	d108      	bne.n	8017450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017442:	2b00      	cmp	r3, #0
 8017444:	d024      	beq.n	8017490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	4798      	blx	r3
 801744e:	e01f      	b.n	8017490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017454:	2b00      	cmp	r3, #0
 8017456:	d01b      	beq.n	8017490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	4798      	blx	r3
 8017460:	e016      	b.n	8017490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801746c:	2b00      	cmp	r3, #0
 801746e:	d107      	bne.n	8017480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	681a      	ldr	r2, [r3, #0]
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	f022 0208 	bic.w	r2, r2, #8
 801747e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017484:	2b00      	cmp	r3, #0
 8017486:	d003      	beq.n	8017490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017494:	2220      	movs	r2, #32
 8017496:	409a      	lsls	r2, r3
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	4013      	ands	r3, r2
 801749c:	2b00      	cmp	r3, #0
 801749e:	f000 808e 	beq.w	80175be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	f003 0310 	and.w	r3, r3, #16
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	f000 8086 	beq.w	80175be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174b6:	2220      	movs	r2, #32
 80174b8:	409a      	lsls	r2, r3
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80174c4:	b2db      	uxtb	r3, r3
 80174c6:	2b05      	cmp	r3, #5
 80174c8:	d136      	bne.n	8017538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	681a      	ldr	r2, [r3, #0]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	f022 0216 	bic.w	r2, r2, #22
 80174d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	695a      	ldr	r2, [r3, #20]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80174e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d103      	bne.n	80174fa <HAL_DMA_IRQHandler+0x1da>
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d007      	beq.n	801750a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	f022 0208 	bic.w	r2, r2, #8
 8017508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801750e:	223f      	movs	r2, #63	; 0x3f
 8017510:	409a      	lsls	r2, r3
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	2200      	movs	r2, #0
 801751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2201      	movs	r2, #1
 8017522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801752a:	2b00      	cmp	r3, #0
 801752c:	d07d      	beq.n	801762a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	4798      	blx	r3
        }
        return;
 8017536:	e078      	b.n	801762a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017542:	2b00      	cmp	r3, #0
 8017544:	d01c      	beq.n	8017580 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017550:	2b00      	cmp	r3, #0
 8017552:	d108      	bne.n	8017566 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017558:	2b00      	cmp	r3, #0
 801755a:	d030      	beq.n	80175be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	4798      	blx	r3
 8017564:	e02b      	b.n	80175be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801756a:	2b00      	cmp	r3, #0
 801756c:	d027      	beq.n	80175be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	4798      	blx	r3
 8017576:	e022      	b.n	80175be <HAL_DMA_IRQHandler+0x29e>
 8017578:	20000054 	.word	0x20000054
 801757c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801758a:	2b00      	cmp	r3, #0
 801758c:	d10f      	bne.n	80175ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	681a      	ldr	r2, [r3, #0]
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	f022 0210 	bic.w	r2, r2, #16
 801759c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	2200      	movs	r2, #0
 80175a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	2201      	movs	r2, #1
 80175aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d003      	beq.n	80175be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175ba:	6878      	ldr	r0, [r7, #4]
 80175bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d032      	beq.n	801762c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80175ca:	f003 0301 	and.w	r3, r3, #1
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d022      	beq.n	8017618 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	2205      	movs	r2, #5
 80175d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	681a      	ldr	r2, [r3, #0]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f022 0201 	bic.w	r2, r2, #1
 80175e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80175ea:	68bb      	ldr	r3, [r7, #8]
 80175ec:	3301      	adds	r3, #1
 80175ee:	60bb      	str	r3, [r7, #8]
 80175f0:	697a      	ldr	r2, [r7, #20]
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d307      	bcc.n	8017606 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	f003 0301 	and.w	r3, r3, #1
 8017600:	2b00      	cmp	r3, #0
 8017602:	d1f2      	bne.n	80175ea <HAL_DMA_IRQHandler+0x2ca>
 8017604:	e000      	b.n	8017608 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8017606:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2200      	movs	r2, #0
 801760c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	2201      	movs	r2, #1
 8017614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801761c:	2b00      	cmp	r3, #0
 801761e:	d005      	beq.n	801762c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017624:	6878      	ldr	r0, [r7, #4]
 8017626:	4798      	blx	r3
 8017628:	e000      	b.n	801762c <HAL_DMA_IRQHandler+0x30c>
        return;
 801762a:	bf00      	nop
    }
  }
}
 801762c:	3718      	adds	r7, #24
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop

08017634 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8017634:	b480      	push	{r7}
 8017636:	b083      	sub	sp, #12
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017642:	b2db      	uxtb	r3, r3
}
 8017644:	4618      	mov	r0, r3
 8017646:	370c      	adds	r7, #12
 8017648:	46bd      	mov	sp, r7
 801764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764e:	4770      	bx	lr

08017650 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8017650:	b480      	push	{r7}
 8017652:	b083      	sub	sp, #12
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801765c:	4618      	mov	r0, r3
 801765e:	370c      	adds	r7, #12
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017668:	b480      	push	{r7}
 801766a:	b085      	sub	sp, #20
 801766c:	af00      	add	r7, sp, #0
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
 8017674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	681a      	ldr	r2, [r3, #0]
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	683a      	ldr	r2, [r7, #0]
 801768c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	689b      	ldr	r3, [r3, #8]
 8017692:	2b40      	cmp	r3, #64	; 0x40
 8017694:	d108      	bne.n	80176a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	687a      	ldr	r2, [r7, #4]
 801769c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	68ba      	ldr	r2, [r7, #8]
 80176a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80176a6:	e007      	b.n	80176b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	68ba      	ldr	r2, [r7, #8]
 80176ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	60da      	str	r2, [r3, #12]
}
 80176b8:	bf00      	nop
 80176ba:	3714      	adds	r7, #20
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80176c4:	b480      	push	{r7}
 80176c6:	b085      	sub	sp, #20
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	b2db      	uxtb	r3, r3
 80176d2:	3b10      	subs	r3, #16
 80176d4:	4a14      	ldr	r2, [pc, #80]	; (8017728 <DMA_CalcBaseAndBitshift+0x64>)
 80176d6:	fba2 2303 	umull	r2, r3, r2, r3
 80176da:	091b      	lsrs	r3, r3, #4
 80176dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80176de:	4a13      	ldr	r2, [pc, #76]	; (801772c <DMA_CalcBaseAndBitshift+0x68>)
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	4413      	add	r3, r2
 80176e4:	781b      	ldrb	r3, [r3, #0]
 80176e6:	461a      	mov	r2, r3
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2b03      	cmp	r3, #3
 80176f0:	d909      	bls.n	8017706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80176fa:	f023 0303 	bic.w	r3, r3, #3
 80176fe:	1d1a      	adds	r2, r3, #4
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	659a      	str	r2, [r3, #88]	; 0x58
 8017704:	e007      	b.n	8017716 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801770e:	f023 0303 	bic.w	r3, r3, #3
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801771a:	4618      	mov	r0, r3
 801771c:	3714      	adds	r7, #20
 801771e:	46bd      	mov	sp, r7
 8017720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017724:	4770      	bx	lr
 8017726:	bf00      	nop
 8017728:	aaaaaaab 	.word	0xaaaaaaab
 801772c:	08025d40 	.word	0x08025d40

08017730 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8017730:	b480      	push	{r7}
 8017732:	b085      	sub	sp, #20
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017738:	2300      	movs	r3, #0
 801773a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	699b      	ldr	r3, [r3, #24]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d11f      	bne.n	801778a <DMA_CheckFifoParam+0x5a>
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	2b03      	cmp	r3, #3
 801774e:	d856      	bhi.n	80177fe <DMA_CheckFifoParam+0xce>
 8017750:	a201      	add	r2, pc, #4	; (adr r2, 8017758 <DMA_CheckFifoParam+0x28>)
 8017752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017756:	bf00      	nop
 8017758:	08017769 	.word	0x08017769
 801775c:	0801777b 	.word	0x0801777b
 8017760:	08017769 	.word	0x08017769
 8017764:	080177ff 	.word	0x080177ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801776c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017770:	2b00      	cmp	r3, #0
 8017772:	d046      	beq.n	8017802 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8017774:	2301      	movs	r3, #1
 8017776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017778:	e043      	b.n	8017802 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801777e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017782:	d140      	bne.n	8017806 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8017784:	2301      	movs	r3, #1
 8017786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017788:	e03d      	b.n	8017806 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	699b      	ldr	r3, [r3, #24]
 801778e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017792:	d121      	bne.n	80177d8 <DMA_CheckFifoParam+0xa8>
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	2b03      	cmp	r3, #3
 8017798:	d837      	bhi.n	801780a <DMA_CheckFifoParam+0xda>
 801779a:	a201      	add	r2, pc, #4	; (adr r2, 80177a0 <DMA_CheckFifoParam+0x70>)
 801779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177a0:	080177b1 	.word	0x080177b1
 80177a4:	080177b7 	.word	0x080177b7
 80177a8:	080177b1 	.word	0x080177b1
 80177ac:	080177c9 	.word	0x080177c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80177b0:	2301      	movs	r3, #1
 80177b2:	73fb      	strb	r3, [r7, #15]
      break;
 80177b4:	e030      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d025      	beq.n	801780e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80177c2:	2301      	movs	r3, #1
 80177c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80177c6:	e022      	b.n	801780e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80177d0:	d11f      	bne.n	8017812 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80177d2:	2301      	movs	r3, #1
 80177d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80177d6:	e01c      	b.n	8017812 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	2b02      	cmp	r3, #2
 80177dc:	d903      	bls.n	80177e6 <DMA_CheckFifoParam+0xb6>
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	2b03      	cmp	r3, #3
 80177e2:	d003      	beq.n	80177ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80177e4:	e018      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80177e6:	2301      	movs	r3, #1
 80177e8:	73fb      	strb	r3, [r7, #15]
      break;
 80177ea:	e015      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d00e      	beq.n	8017816 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80177f8:	2301      	movs	r3, #1
 80177fa:	73fb      	strb	r3, [r7, #15]
      break;
 80177fc:	e00b      	b.n	8017816 <DMA_CheckFifoParam+0xe6>
      break;
 80177fe:	bf00      	nop
 8017800:	e00a      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      break;
 8017802:	bf00      	nop
 8017804:	e008      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      break;
 8017806:	bf00      	nop
 8017808:	e006      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      break;
 801780a:	bf00      	nop
 801780c:	e004      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      break;
 801780e:	bf00      	nop
 8017810:	e002      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      break;   
 8017812:	bf00      	nop
 8017814:	e000      	b.n	8017818 <DMA_CheckFifoParam+0xe8>
      break;
 8017816:	bf00      	nop
    }
  } 
  
  return status; 
 8017818:	7bfb      	ldrb	r3, [r7, #15]
}
 801781a:	4618      	mov	r0, r3
 801781c:	3714      	adds	r7, #20
 801781e:	46bd      	mov	sp, r7
 8017820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017824:	4770      	bx	lr
 8017826:	bf00      	nop

08017828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017828:	b480      	push	{r7}
 801782a:	b089      	sub	sp, #36	; 0x24
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
 8017830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8017832:	2300      	movs	r3, #0
 8017834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8017836:	2300      	movs	r3, #0
 8017838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801783a:	2300      	movs	r3, #0
 801783c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801783e:	2300      	movs	r3, #0
 8017840:	61fb      	str	r3, [r7, #28]
 8017842:	e16b      	b.n	8017b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017844:	2201      	movs	r2, #1
 8017846:	69fb      	ldr	r3, [r7, #28]
 8017848:	fa02 f303 	lsl.w	r3, r2, r3
 801784c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	697a      	ldr	r2, [r7, #20]
 8017854:	4013      	ands	r3, r2
 8017856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017858:	693a      	ldr	r2, [r7, #16]
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	429a      	cmp	r2, r3
 801785e:	f040 815a 	bne.w	8017b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	2b01      	cmp	r3, #1
 8017868:	d00b      	beq.n	8017882 <HAL_GPIO_Init+0x5a>
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	685b      	ldr	r3, [r3, #4]
 801786e:	2b02      	cmp	r3, #2
 8017870:	d007      	beq.n	8017882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8017876:	2b11      	cmp	r3, #17
 8017878:	d003      	beq.n	8017882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	685b      	ldr	r3, [r3, #4]
 801787e:	2b12      	cmp	r3, #18
 8017880:	d130      	bne.n	80178e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	689b      	ldr	r3, [r3, #8]
 8017886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017888:	69fb      	ldr	r3, [r7, #28]
 801788a:	005b      	lsls	r3, r3, #1
 801788c:	2203      	movs	r2, #3
 801788e:	fa02 f303 	lsl.w	r3, r2, r3
 8017892:	43db      	mvns	r3, r3
 8017894:	69ba      	ldr	r2, [r7, #24]
 8017896:	4013      	ands	r3, r2
 8017898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	68da      	ldr	r2, [r3, #12]
 801789e:	69fb      	ldr	r3, [r7, #28]
 80178a0:	005b      	lsls	r3, r3, #1
 80178a2:	fa02 f303 	lsl.w	r3, r2, r3
 80178a6:	69ba      	ldr	r2, [r7, #24]
 80178a8:	4313      	orrs	r3, r2
 80178aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	69ba      	ldr	r2, [r7, #24]
 80178b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	685b      	ldr	r3, [r3, #4]
 80178b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80178b8:	2201      	movs	r2, #1
 80178ba:	69fb      	ldr	r3, [r7, #28]
 80178bc:	fa02 f303 	lsl.w	r3, r2, r3
 80178c0:	43db      	mvns	r3, r3
 80178c2:	69ba      	ldr	r2, [r7, #24]
 80178c4:	4013      	ands	r3, r2
 80178c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80178c8:	683b      	ldr	r3, [r7, #0]
 80178ca:	685b      	ldr	r3, [r3, #4]
 80178cc:	091b      	lsrs	r3, r3, #4
 80178ce:	f003 0201 	and.w	r2, r3, #1
 80178d2:	69fb      	ldr	r3, [r7, #28]
 80178d4:	fa02 f303 	lsl.w	r3, r2, r3
 80178d8:	69ba      	ldr	r2, [r7, #24]
 80178da:	4313      	orrs	r3, r2
 80178dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	69ba      	ldr	r2, [r7, #24]
 80178e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	68db      	ldr	r3, [r3, #12]
 80178e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80178ea:	69fb      	ldr	r3, [r7, #28]
 80178ec:	005b      	lsls	r3, r3, #1
 80178ee:	2203      	movs	r2, #3
 80178f0:	fa02 f303 	lsl.w	r3, r2, r3
 80178f4:	43db      	mvns	r3, r3
 80178f6:	69ba      	ldr	r2, [r7, #24]
 80178f8:	4013      	ands	r3, r2
 80178fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	689a      	ldr	r2, [r3, #8]
 8017900:	69fb      	ldr	r3, [r7, #28]
 8017902:	005b      	lsls	r3, r3, #1
 8017904:	fa02 f303 	lsl.w	r3, r2, r3
 8017908:	69ba      	ldr	r2, [r7, #24]
 801790a:	4313      	orrs	r3, r2
 801790c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	69ba      	ldr	r2, [r7, #24]
 8017912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	685b      	ldr	r3, [r3, #4]
 8017918:	2b02      	cmp	r3, #2
 801791a:	d003      	beq.n	8017924 <HAL_GPIO_Init+0xfc>
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	2b12      	cmp	r3, #18
 8017922:	d123      	bne.n	801796c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8017924:	69fb      	ldr	r3, [r7, #28]
 8017926:	08da      	lsrs	r2, r3, #3
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	3208      	adds	r2, #8
 801792c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017932:	69fb      	ldr	r3, [r7, #28]
 8017934:	f003 0307 	and.w	r3, r3, #7
 8017938:	009b      	lsls	r3, r3, #2
 801793a:	220f      	movs	r2, #15
 801793c:	fa02 f303 	lsl.w	r3, r2, r3
 8017940:	43db      	mvns	r3, r3
 8017942:	69ba      	ldr	r2, [r7, #24]
 8017944:	4013      	ands	r3, r2
 8017946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8017948:	683b      	ldr	r3, [r7, #0]
 801794a:	691a      	ldr	r2, [r3, #16]
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	f003 0307 	and.w	r3, r3, #7
 8017952:	009b      	lsls	r3, r3, #2
 8017954:	fa02 f303 	lsl.w	r3, r2, r3
 8017958:	69ba      	ldr	r2, [r7, #24]
 801795a:	4313      	orrs	r3, r2
 801795c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801795e:	69fb      	ldr	r3, [r7, #28]
 8017960:	08da      	lsrs	r2, r3, #3
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	3208      	adds	r2, #8
 8017966:	69b9      	ldr	r1, [r7, #24]
 8017968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017972:	69fb      	ldr	r3, [r7, #28]
 8017974:	005b      	lsls	r3, r3, #1
 8017976:	2203      	movs	r2, #3
 8017978:	fa02 f303 	lsl.w	r3, r2, r3
 801797c:	43db      	mvns	r3, r3
 801797e:	69ba      	ldr	r2, [r7, #24]
 8017980:	4013      	ands	r3, r2
 8017982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017984:	683b      	ldr	r3, [r7, #0]
 8017986:	685b      	ldr	r3, [r3, #4]
 8017988:	f003 0203 	and.w	r2, r3, #3
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	005b      	lsls	r3, r3, #1
 8017990:	fa02 f303 	lsl.w	r3, r2, r3
 8017994:	69ba      	ldr	r2, [r7, #24]
 8017996:	4313      	orrs	r3, r2
 8017998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	69ba      	ldr	r2, [r7, #24]
 801799e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	685b      	ldr	r3, [r3, #4]
 80179a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	f000 80b4 	beq.w	8017b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80179ae:	2300      	movs	r3, #0
 80179b0:	60fb      	str	r3, [r7, #12]
 80179b2:	4b60      	ldr	r3, [pc, #384]	; (8017b34 <HAL_GPIO_Init+0x30c>)
 80179b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179b6:	4a5f      	ldr	r2, [pc, #380]	; (8017b34 <HAL_GPIO_Init+0x30c>)
 80179b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80179bc:	6453      	str	r3, [r2, #68]	; 0x44
 80179be:	4b5d      	ldr	r3, [pc, #372]	; (8017b34 <HAL_GPIO_Init+0x30c>)
 80179c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80179c6:	60fb      	str	r3, [r7, #12]
 80179c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80179ca:	4a5b      	ldr	r2, [pc, #364]	; (8017b38 <HAL_GPIO_Init+0x310>)
 80179cc:	69fb      	ldr	r3, [r7, #28]
 80179ce:	089b      	lsrs	r3, r3, #2
 80179d0:	3302      	adds	r3, #2
 80179d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80179d8:	69fb      	ldr	r3, [r7, #28]
 80179da:	f003 0303 	and.w	r3, r3, #3
 80179de:	009b      	lsls	r3, r3, #2
 80179e0:	220f      	movs	r2, #15
 80179e2:	fa02 f303 	lsl.w	r3, r2, r3
 80179e6:	43db      	mvns	r3, r3
 80179e8:	69ba      	ldr	r2, [r7, #24]
 80179ea:	4013      	ands	r3, r2
 80179ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	4a52      	ldr	r2, [pc, #328]	; (8017b3c <HAL_GPIO_Init+0x314>)
 80179f2:	4293      	cmp	r3, r2
 80179f4:	d02b      	beq.n	8017a4e <HAL_GPIO_Init+0x226>
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	4a51      	ldr	r2, [pc, #324]	; (8017b40 <HAL_GPIO_Init+0x318>)
 80179fa:	4293      	cmp	r3, r2
 80179fc:	d025      	beq.n	8017a4a <HAL_GPIO_Init+0x222>
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	4a50      	ldr	r2, [pc, #320]	; (8017b44 <HAL_GPIO_Init+0x31c>)
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d01f      	beq.n	8017a46 <HAL_GPIO_Init+0x21e>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	4a4f      	ldr	r2, [pc, #316]	; (8017b48 <HAL_GPIO_Init+0x320>)
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d019      	beq.n	8017a42 <HAL_GPIO_Init+0x21a>
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	4a4e      	ldr	r2, [pc, #312]	; (8017b4c <HAL_GPIO_Init+0x324>)
 8017a12:	4293      	cmp	r3, r2
 8017a14:	d013      	beq.n	8017a3e <HAL_GPIO_Init+0x216>
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	4a4d      	ldr	r2, [pc, #308]	; (8017b50 <HAL_GPIO_Init+0x328>)
 8017a1a:	4293      	cmp	r3, r2
 8017a1c:	d00d      	beq.n	8017a3a <HAL_GPIO_Init+0x212>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	4a4c      	ldr	r2, [pc, #304]	; (8017b54 <HAL_GPIO_Init+0x32c>)
 8017a22:	4293      	cmp	r3, r2
 8017a24:	d007      	beq.n	8017a36 <HAL_GPIO_Init+0x20e>
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	4a4b      	ldr	r2, [pc, #300]	; (8017b58 <HAL_GPIO_Init+0x330>)
 8017a2a:	4293      	cmp	r3, r2
 8017a2c:	d101      	bne.n	8017a32 <HAL_GPIO_Init+0x20a>
 8017a2e:	2307      	movs	r3, #7
 8017a30:	e00e      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a32:	2308      	movs	r3, #8
 8017a34:	e00c      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a36:	2306      	movs	r3, #6
 8017a38:	e00a      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a3a:	2305      	movs	r3, #5
 8017a3c:	e008      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a3e:	2304      	movs	r3, #4
 8017a40:	e006      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a42:	2303      	movs	r3, #3
 8017a44:	e004      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a46:	2302      	movs	r3, #2
 8017a48:	e002      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	e000      	b.n	8017a50 <HAL_GPIO_Init+0x228>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	69fa      	ldr	r2, [r7, #28]
 8017a52:	f002 0203 	and.w	r2, r2, #3
 8017a56:	0092      	lsls	r2, r2, #2
 8017a58:	4093      	lsls	r3, r2
 8017a5a:	69ba      	ldr	r2, [r7, #24]
 8017a5c:	4313      	orrs	r3, r2
 8017a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017a60:	4935      	ldr	r1, [pc, #212]	; (8017b38 <HAL_GPIO_Init+0x310>)
 8017a62:	69fb      	ldr	r3, [r7, #28]
 8017a64:	089b      	lsrs	r3, r3, #2
 8017a66:	3302      	adds	r3, #2
 8017a68:	69ba      	ldr	r2, [r7, #24]
 8017a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017a6e:	4b3b      	ldr	r3, [pc, #236]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017a74:	693b      	ldr	r3, [r7, #16]
 8017a76:	43db      	mvns	r3, r3
 8017a78:	69ba      	ldr	r2, [r7, #24]
 8017a7a:	4013      	ands	r3, r2
 8017a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	685b      	ldr	r3, [r3, #4]
 8017a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d003      	beq.n	8017a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8017a8a:	69ba      	ldr	r2, [r7, #24]
 8017a8c:	693b      	ldr	r3, [r7, #16]
 8017a8e:	4313      	orrs	r3, r2
 8017a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017a92:	4a32      	ldr	r2, [pc, #200]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017a94:	69bb      	ldr	r3, [r7, #24]
 8017a96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8017a98:	4b30      	ldr	r3, [pc, #192]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017a9a:	685b      	ldr	r3, [r3, #4]
 8017a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017a9e:	693b      	ldr	r3, [r7, #16]
 8017aa0:	43db      	mvns	r3, r3
 8017aa2:	69ba      	ldr	r2, [r7, #24]
 8017aa4:	4013      	ands	r3, r2
 8017aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	685b      	ldr	r3, [r3, #4]
 8017aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d003      	beq.n	8017abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8017ab4:	69ba      	ldr	r2, [r7, #24]
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	4313      	orrs	r3, r2
 8017aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017abc:	4a27      	ldr	r2, [pc, #156]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017abe:	69bb      	ldr	r3, [r7, #24]
 8017ac0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017ac2:	4b26      	ldr	r3, [pc, #152]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017ac4:	689b      	ldr	r3, [r3, #8]
 8017ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017ac8:	693b      	ldr	r3, [r7, #16]
 8017aca:	43db      	mvns	r3, r3
 8017acc:	69ba      	ldr	r2, [r7, #24]
 8017ace:	4013      	ands	r3, r2
 8017ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	685b      	ldr	r3, [r3, #4]
 8017ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d003      	beq.n	8017ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8017ade:	69ba      	ldr	r2, [r7, #24]
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	4313      	orrs	r3, r2
 8017ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017ae6:	4a1d      	ldr	r2, [pc, #116]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017ae8:	69bb      	ldr	r3, [r7, #24]
 8017aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017aec:	4b1b      	ldr	r3, [pc, #108]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017aee:	68db      	ldr	r3, [r3, #12]
 8017af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017af2:	693b      	ldr	r3, [r7, #16]
 8017af4:	43db      	mvns	r3, r3
 8017af6:	69ba      	ldr	r2, [r7, #24]
 8017af8:	4013      	ands	r3, r2
 8017afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	685b      	ldr	r3, [r3, #4]
 8017b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d003      	beq.n	8017b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8017b08:	69ba      	ldr	r2, [r7, #24]
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	4313      	orrs	r3, r2
 8017b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017b10:	4a12      	ldr	r2, [pc, #72]	; (8017b5c <HAL_GPIO_Init+0x334>)
 8017b12:	69bb      	ldr	r3, [r7, #24]
 8017b14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017b16:	69fb      	ldr	r3, [r7, #28]
 8017b18:	3301      	adds	r3, #1
 8017b1a:	61fb      	str	r3, [r7, #28]
 8017b1c:	69fb      	ldr	r3, [r7, #28]
 8017b1e:	2b0f      	cmp	r3, #15
 8017b20:	f67f ae90 	bls.w	8017844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8017b24:	bf00      	nop
 8017b26:	bf00      	nop
 8017b28:	3724      	adds	r7, #36	; 0x24
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr
 8017b32:	bf00      	nop
 8017b34:	40023800 	.word	0x40023800
 8017b38:	40013800 	.word	0x40013800
 8017b3c:	40020000 	.word	0x40020000
 8017b40:	40020400 	.word	0x40020400
 8017b44:	40020800 	.word	0x40020800
 8017b48:	40020c00 	.word	0x40020c00
 8017b4c:	40021000 	.word	0x40021000
 8017b50:	40021400 	.word	0x40021400
 8017b54:	40021800 	.word	0x40021800
 8017b58:	40021c00 	.word	0x40021c00
 8017b5c:	40013c00 	.word	0x40013c00

08017b60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b087      	sub	sp, #28
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8017b6e:	2300      	movs	r3, #0
 8017b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8017b72:	2300      	movs	r3, #0
 8017b74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017b76:	2300      	movs	r3, #0
 8017b78:	617b      	str	r3, [r7, #20]
 8017b7a:	e0cd      	b.n	8017d18 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8017b7c:	2201      	movs	r2, #1
 8017b7e:	697b      	ldr	r3, [r7, #20]
 8017b80:	fa02 f303 	lsl.w	r3, r2, r3
 8017b84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8017b86:	683a      	ldr	r2, [r7, #0]
 8017b88:	693b      	ldr	r3, [r7, #16]
 8017b8a:	4013      	ands	r3, r2
 8017b8c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8017b8e:	68fa      	ldr	r2, [r7, #12]
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	429a      	cmp	r2, r3
 8017b94:	f040 80bd 	bne.w	8017d12 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8017b98:	4a65      	ldr	r2, [pc, #404]	; (8017d30 <HAL_GPIO_DeInit+0x1d0>)
 8017b9a:	697b      	ldr	r3, [r7, #20]
 8017b9c:	089b      	lsrs	r3, r3, #2
 8017b9e:	3302      	adds	r3, #2
 8017ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ba4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8017ba6:	697b      	ldr	r3, [r7, #20]
 8017ba8:	f003 0303 	and.w	r3, r3, #3
 8017bac:	009b      	lsls	r3, r3, #2
 8017bae:	220f      	movs	r2, #15
 8017bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8017bb4:	68ba      	ldr	r2, [r7, #8]
 8017bb6:	4013      	ands	r3, r2
 8017bb8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	4a5d      	ldr	r2, [pc, #372]	; (8017d34 <HAL_GPIO_DeInit+0x1d4>)
 8017bbe:	4293      	cmp	r3, r2
 8017bc0:	d02b      	beq.n	8017c1a <HAL_GPIO_DeInit+0xba>
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	4a5c      	ldr	r2, [pc, #368]	; (8017d38 <HAL_GPIO_DeInit+0x1d8>)
 8017bc6:	4293      	cmp	r3, r2
 8017bc8:	d025      	beq.n	8017c16 <HAL_GPIO_DeInit+0xb6>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	4a5b      	ldr	r2, [pc, #364]	; (8017d3c <HAL_GPIO_DeInit+0x1dc>)
 8017bce:	4293      	cmp	r3, r2
 8017bd0:	d01f      	beq.n	8017c12 <HAL_GPIO_DeInit+0xb2>
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	4a5a      	ldr	r2, [pc, #360]	; (8017d40 <HAL_GPIO_DeInit+0x1e0>)
 8017bd6:	4293      	cmp	r3, r2
 8017bd8:	d019      	beq.n	8017c0e <HAL_GPIO_DeInit+0xae>
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	4a59      	ldr	r2, [pc, #356]	; (8017d44 <HAL_GPIO_DeInit+0x1e4>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d013      	beq.n	8017c0a <HAL_GPIO_DeInit+0xaa>
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	4a58      	ldr	r2, [pc, #352]	; (8017d48 <HAL_GPIO_DeInit+0x1e8>)
 8017be6:	4293      	cmp	r3, r2
 8017be8:	d00d      	beq.n	8017c06 <HAL_GPIO_DeInit+0xa6>
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	4a57      	ldr	r2, [pc, #348]	; (8017d4c <HAL_GPIO_DeInit+0x1ec>)
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	d007      	beq.n	8017c02 <HAL_GPIO_DeInit+0xa2>
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	4a56      	ldr	r2, [pc, #344]	; (8017d50 <HAL_GPIO_DeInit+0x1f0>)
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	d101      	bne.n	8017bfe <HAL_GPIO_DeInit+0x9e>
 8017bfa:	2307      	movs	r3, #7
 8017bfc:	e00e      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017bfe:	2308      	movs	r3, #8
 8017c00:	e00c      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c02:	2306      	movs	r3, #6
 8017c04:	e00a      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c06:	2305      	movs	r3, #5
 8017c08:	e008      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c0a:	2304      	movs	r3, #4
 8017c0c:	e006      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c0e:	2303      	movs	r3, #3
 8017c10:	e004      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c12:	2302      	movs	r3, #2
 8017c14:	e002      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c16:	2301      	movs	r3, #1
 8017c18:	e000      	b.n	8017c1c <HAL_GPIO_DeInit+0xbc>
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	697a      	ldr	r2, [r7, #20]
 8017c1e:	f002 0203 	and.w	r2, r2, #3
 8017c22:	0092      	lsls	r2, r2, #2
 8017c24:	4093      	lsls	r3, r2
 8017c26:	68ba      	ldr	r2, [r7, #8]
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	d132      	bne.n	8017c92 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8017c2c:	4b49      	ldr	r3, [pc, #292]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c2e:	681a      	ldr	r2, [r3, #0]
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	43db      	mvns	r3, r3
 8017c34:	4947      	ldr	r1, [pc, #284]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c36:	4013      	ands	r3, r2
 8017c38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8017c3a:	4b46      	ldr	r3, [pc, #280]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c3c:	685a      	ldr	r2, [r3, #4]
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	43db      	mvns	r3, r3
 8017c42:	4944      	ldr	r1, [pc, #272]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c44:	4013      	ands	r3, r2
 8017c46:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8017c48:	4b42      	ldr	r3, [pc, #264]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c4a:	689a      	ldr	r2, [r3, #8]
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	43db      	mvns	r3, r3
 8017c50:	4940      	ldr	r1, [pc, #256]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c52:	4013      	ands	r3, r2
 8017c54:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8017c56:	4b3f      	ldr	r3, [pc, #252]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c58:	68da      	ldr	r2, [r3, #12]
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	43db      	mvns	r3, r3
 8017c5e:	493d      	ldr	r1, [pc, #244]	; (8017d54 <HAL_GPIO_DeInit+0x1f4>)
 8017c60:	4013      	ands	r3, r2
 8017c62:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	f003 0303 	and.w	r3, r3, #3
 8017c6a:	009b      	lsls	r3, r3, #2
 8017c6c:	220f      	movs	r2, #15
 8017c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8017c72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8017c74:	4a2e      	ldr	r2, [pc, #184]	; (8017d30 <HAL_GPIO_DeInit+0x1d0>)
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	089b      	lsrs	r3, r3, #2
 8017c7a:	3302      	adds	r3, #2
 8017c7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	43da      	mvns	r2, r3
 8017c84:	482a      	ldr	r0, [pc, #168]	; (8017d30 <HAL_GPIO_DeInit+0x1d0>)
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	089b      	lsrs	r3, r3, #2
 8017c8a:	400a      	ands	r2, r1
 8017c8c:	3302      	adds	r3, #2
 8017c8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681a      	ldr	r2, [r3, #0]
 8017c96:	697b      	ldr	r3, [r7, #20]
 8017c98:	005b      	lsls	r3, r3, #1
 8017c9a:	2103      	movs	r1, #3
 8017c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8017ca0:	43db      	mvns	r3, r3
 8017ca2:	401a      	ands	r2, r3
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	08da      	lsrs	r2, r3, #3
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	3208      	adds	r2, #8
 8017cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	f003 0307 	and.w	r3, r3, #7
 8017cba:	009b      	lsls	r3, r3, #2
 8017cbc:	220f      	movs	r2, #15
 8017cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8017cc2:	43db      	mvns	r3, r3
 8017cc4:	697a      	ldr	r2, [r7, #20]
 8017cc6:	08d2      	lsrs	r2, r2, #3
 8017cc8:	4019      	ands	r1, r3
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	3208      	adds	r2, #8
 8017cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	68da      	ldr	r2, [r3, #12]
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	005b      	lsls	r3, r3, #1
 8017cda:	2103      	movs	r1, #3
 8017cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8017ce0:	43db      	mvns	r3, r3
 8017ce2:	401a      	ands	r2, r3
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	685a      	ldr	r2, [r3, #4]
 8017cec:	2101      	movs	r1, #1
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8017cf4:	43db      	mvns	r3, r3
 8017cf6:	401a      	ands	r2, r3
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	689a      	ldr	r2, [r3, #8]
 8017d00:	697b      	ldr	r3, [r7, #20]
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	2103      	movs	r1, #3
 8017d06:	fa01 f303 	lsl.w	r3, r1, r3
 8017d0a:	43db      	mvns	r3, r3
 8017d0c:	401a      	ands	r2, r3
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	3301      	adds	r3, #1
 8017d16:	617b      	str	r3, [r7, #20]
 8017d18:	697b      	ldr	r3, [r7, #20]
 8017d1a:	2b0f      	cmp	r3, #15
 8017d1c:	f67f af2e 	bls.w	8017b7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8017d20:	bf00      	nop
 8017d22:	bf00      	nop
 8017d24:	371c      	adds	r7, #28
 8017d26:	46bd      	mov	sp, r7
 8017d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	40013800 	.word	0x40013800
 8017d34:	40020000 	.word	0x40020000
 8017d38:	40020400 	.word	0x40020400
 8017d3c:	40020800 	.word	0x40020800
 8017d40:	40020c00 	.word	0x40020c00
 8017d44:	40021000 	.word	0x40021000
 8017d48:	40021400 	.word	0x40021400
 8017d4c:	40021800 	.word	0x40021800
 8017d50:	40021c00 	.word	0x40021c00
 8017d54:	40013c00 	.word	0x40013c00

08017d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	460b      	mov	r3, r1
 8017d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	691a      	ldr	r2, [r3, #16]
 8017d68:	887b      	ldrh	r3, [r7, #2]
 8017d6a:	4013      	ands	r3, r2
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d002      	beq.n	8017d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017d70:	2301      	movs	r3, #1
 8017d72:	73fb      	strb	r3, [r7, #15]
 8017d74:	e001      	b.n	8017d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017d76:	2300      	movs	r3, #0
 8017d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	3714      	adds	r7, #20
 8017d80:	46bd      	mov	sp, r7
 8017d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d86:	4770      	bx	lr

08017d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017d88:	b480      	push	{r7}
 8017d8a:	b083      	sub	sp, #12
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
 8017d90:	460b      	mov	r3, r1
 8017d92:	807b      	strh	r3, [r7, #2]
 8017d94:	4613      	mov	r3, r2
 8017d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017d98:	787b      	ldrb	r3, [r7, #1]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d003      	beq.n	8017da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017d9e:	887a      	ldrh	r2, [r7, #2]
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8017da4:	e003      	b.n	8017dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8017da6:	887b      	ldrh	r3, [r7, #2]
 8017da8:	041a      	lsls	r2, r3, #16
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	619a      	str	r2, [r3, #24]
}
 8017dae:	bf00      	nop
 8017db0:	370c      	adds	r7, #12
 8017db2:	46bd      	mov	sp, r7
 8017db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db8:	4770      	bx	lr
	...

08017dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b084      	sub	sp, #16
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d101      	bne.n	8017dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017dca:	2301      	movs	r3, #1
 8017dcc:	e12b      	b.n	8018026 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017dd4:	b2db      	uxtb	r3, r3
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d106      	bne.n	8017de8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8017de2:	6878      	ldr	r0, [r7, #4]
 8017de4:	f7ea f954 	bl	8002090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	2224      	movs	r2, #36	; 0x24
 8017dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	f022 0201 	bic.w	r2, r2, #1
 8017dfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	681a      	ldr	r2, [r3, #0]
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017e0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	681a      	ldr	r2, [r3, #0]
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017e1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8017e20:	f002 fc64 	bl	801a6ec <HAL_RCC_GetPCLK1Freq>
 8017e24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	685b      	ldr	r3, [r3, #4]
 8017e2a:	4a81      	ldr	r2, [pc, #516]	; (8018030 <HAL_I2C_Init+0x274>)
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d807      	bhi.n	8017e40 <HAL_I2C_Init+0x84>
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	4a80      	ldr	r2, [pc, #512]	; (8018034 <HAL_I2C_Init+0x278>)
 8017e34:	4293      	cmp	r3, r2
 8017e36:	bf94      	ite	ls
 8017e38:	2301      	movls	r3, #1
 8017e3a:	2300      	movhi	r3, #0
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	e006      	b.n	8017e4e <HAL_I2C_Init+0x92>
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	4a7d      	ldr	r2, [pc, #500]	; (8018038 <HAL_I2C_Init+0x27c>)
 8017e44:	4293      	cmp	r3, r2
 8017e46:	bf94      	ite	ls
 8017e48:	2301      	movls	r3, #1
 8017e4a:	2300      	movhi	r3, #0
 8017e4c:	b2db      	uxtb	r3, r3
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d001      	beq.n	8017e56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8017e52:	2301      	movs	r3, #1
 8017e54:	e0e7      	b.n	8018026 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	4a78      	ldr	r2, [pc, #480]	; (801803c <HAL_I2C_Init+0x280>)
 8017e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8017e5e:	0c9b      	lsrs	r3, r3, #18
 8017e60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	685b      	ldr	r3, [r3, #4]
 8017e68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	68ba      	ldr	r2, [r7, #8]
 8017e72:	430a      	orrs	r2, r1
 8017e74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	6a1b      	ldr	r3, [r3, #32]
 8017e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	685b      	ldr	r3, [r3, #4]
 8017e84:	4a6a      	ldr	r2, [pc, #424]	; (8018030 <HAL_I2C_Init+0x274>)
 8017e86:	4293      	cmp	r3, r2
 8017e88:	d802      	bhi.n	8017e90 <HAL_I2C_Init+0xd4>
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	3301      	adds	r3, #1
 8017e8e:	e009      	b.n	8017ea4 <HAL_I2C_Init+0xe8>
 8017e90:	68bb      	ldr	r3, [r7, #8]
 8017e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017e96:	fb02 f303 	mul.w	r3, r2, r3
 8017e9a:	4a69      	ldr	r2, [pc, #420]	; (8018040 <HAL_I2C_Init+0x284>)
 8017e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8017ea0:	099b      	lsrs	r3, r3, #6
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	687a      	ldr	r2, [r7, #4]
 8017ea6:	6812      	ldr	r2, [r2, #0]
 8017ea8:	430b      	orrs	r3, r1
 8017eaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	69db      	ldr	r3, [r3, #28]
 8017eb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8017eb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	495c      	ldr	r1, [pc, #368]	; (8018030 <HAL_I2C_Init+0x274>)
 8017ec0:	428b      	cmp	r3, r1
 8017ec2:	d819      	bhi.n	8017ef8 <HAL_I2C_Init+0x13c>
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	1e59      	subs	r1, r3, #1
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	685b      	ldr	r3, [r3, #4]
 8017ecc:	005b      	lsls	r3, r3, #1
 8017ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ed2:	1c59      	adds	r1, r3, #1
 8017ed4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8017ed8:	400b      	ands	r3, r1
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d00a      	beq.n	8017ef4 <HAL_I2C_Init+0x138>
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	1e59      	subs	r1, r3, #1
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	005b      	lsls	r3, r3, #1
 8017ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8017eec:	3301      	adds	r3, #1
 8017eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017ef2:	e051      	b.n	8017f98 <HAL_I2C_Init+0x1dc>
 8017ef4:	2304      	movs	r3, #4
 8017ef6:	e04f      	b.n	8017f98 <HAL_I2C_Init+0x1dc>
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	689b      	ldr	r3, [r3, #8]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d111      	bne.n	8017f24 <HAL_I2C_Init+0x168>
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	1e58      	subs	r0, r3, #1
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	6859      	ldr	r1, [r3, #4]
 8017f08:	460b      	mov	r3, r1
 8017f0a:	005b      	lsls	r3, r3, #1
 8017f0c:	440b      	add	r3, r1
 8017f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8017f12:	3301      	adds	r3, #1
 8017f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	bf0c      	ite	eq
 8017f1c:	2301      	moveq	r3, #1
 8017f1e:	2300      	movne	r3, #0
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	e012      	b.n	8017f4a <HAL_I2C_Init+0x18e>
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	1e58      	subs	r0, r3, #1
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	6859      	ldr	r1, [r3, #4]
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	440b      	add	r3, r1
 8017f32:	0099      	lsls	r1, r3, #2
 8017f34:	440b      	add	r3, r1
 8017f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8017f3a:	3301      	adds	r3, #1
 8017f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	bf0c      	ite	eq
 8017f44:	2301      	moveq	r3, #1
 8017f46:	2300      	movne	r3, #0
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d001      	beq.n	8017f52 <HAL_I2C_Init+0x196>
 8017f4e:	2301      	movs	r3, #1
 8017f50:	e022      	b.n	8017f98 <HAL_I2C_Init+0x1dc>
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	689b      	ldr	r3, [r3, #8]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d10e      	bne.n	8017f78 <HAL_I2C_Init+0x1bc>
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	1e58      	subs	r0, r3, #1
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6859      	ldr	r1, [r3, #4]
 8017f62:	460b      	mov	r3, r1
 8017f64:	005b      	lsls	r3, r3, #1
 8017f66:	440b      	add	r3, r1
 8017f68:	fbb0 f3f3 	udiv	r3, r0, r3
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017f76:	e00f      	b.n	8017f98 <HAL_I2C_Init+0x1dc>
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	1e58      	subs	r0, r3, #1
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	6859      	ldr	r1, [r3, #4]
 8017f80:	460b      	mov	r3, r1
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	440b      	add	r3, r1
 8017f86:	0099      	lsls	r1, r3, #2
 8017f88:	440b      	add	r3, r1
 8017f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8017f8e:	3301      	adds	r3, #1
 8017f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017f98:	6879      	ldr	r1, [r7, #4]
 8017f9a:	6809      	ldr	r1, [r1, #0]
 8017f9c:	4313      	orrs	r3, r2
 8017f9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	69da      	ldr	r2, [r3, #28]
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	6a1b      	ldr	r3, [r3, #32]
 8017fb2:	431a      	orrs	r2, r3
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	430a      	orrs	r2, r1
 8017fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	689b      	ldr	r3, [r3, #8]
 8017fc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8017fc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017fca:	687a      	ldr	r2, [r7, #4]
 8017fcc:	6911      	ldr	r1, [r2, #16]
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	68d2      	ldr	r2, [r2, #12]
 8017fd2:	4311      	orrs	r1, r2
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	6812      	ldr	r2, [r2, #0]
 8017fd8:	430b      	orrs	r3, r1
 8017fda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	68db      	ldr	r3, [r3, #12]
 8017fe2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	695a      	ldr	r2, [r3, #20]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	699b      	ldr	r3, [r3, #24]
 8017fee:	431a      	orrs	r2, r3
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	430a      	orrs	r2, r1
 8017ff6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	681a      	ldr	r2, [r3, #0]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	f042 0201 	orr.w	r2, r2, #1
 8018006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2200      	movs	r2, #0
 801800c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2220      	movs	r2, #32
 8018012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2200      	movs	r2, #0
 801801a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2200      	movs	r2, #0
 8018020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8018024:	2300      	movs	r3, #0
}
 8018026:	4618      	mov	r0, r3
 8018028:	3710      	adds	r7, #16
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	000186a0 	.word	0x000186a0
 8018034:	001e847f 	.word	0x001e847f
 8018038:	003d08ff 	.word	0x003d08ff
 801803c:	431bde83 	.word	0x431bde83
 8018040:	10624dd3 	.word	0x10624dd3

08018044 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d101      	bne.n	8018056 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8018052:	2301      	movs	r3, #1
 8018054:	e021      	b.n	801809a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	2224      	movs	r2, #36	; 0x24
 801805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	681a      	ldr	r2, [r3, #0]
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	f022 0201 	bic.w	r2, r2, #1
 801806c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f7ea f8e4 	bl	800223c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2200      	movs	r2, #0
 8018078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2200      	movs	r2, #0
 801807e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2200      	movs	r2, #0
 8018086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	2200      	movs	r2, #0
 801808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2200      	movs	r2, #0
 8018094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018098:	2300      	movs	r3, #0
}
 801809a:	4618      	mov	r0, r3
 801809c:	3708      	adds	r7, #8
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}
	...

080180a4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b086      	sub	sp, #24
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	60f8      	str	r0, [r7, #12]
 80180ac:	607a      	str	r2, [r7, #4]
 80180ae:	461a      	mov	r2, r3
 80180b0:	460b      	mov	r3, r1
 80180b2:	817b      	strh	r3, [r7, #10]
 80180b4:	4613      	mov	r3, r2
 80180b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80180b8:	2300      	movs	r3, #0
 80180ba:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80180c2:	b2db      	uxtb	r3, r3
 80180c4:	2b20      	cmp	r3, #32
 80180c6:	f040 80f4 	bne.w	80182b2 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80180ca:	4b7c      	ldr	r3, [pc, #496]	; (80182bc <HAL_I2C_Master_Receive_DMA+0x218>)
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	08db      	lsrs	r3, r3, #3
 80180d0:	4a7b      	ldr	r2, [pc, #492]	; (80182c0 <HAL_I2C_Master_Receive_DMA+0x21c>)
 80180d2:	fba2 2303 	umull	r2, r3, r2, r3
 80180d6:	0a1a      	lsrs	r2, r3, #8
 80180d8:	4613      	mov	r3, r2
 80180da:	009b      	lsls	r3, r3, #2
 80180dc:	4413      	add	r3, r2
 80180de:	009a      	lsls	r2, r3, #2
 80180e0:	4413      	add	r3, r2
 80180e2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80180e4:	693b      	ldr	r3, [r7, #16]
 80180e6:	3b01      	subs	r3, #1
 80180e8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d116      	bne.n	801811e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	2200      	movs	r2, #0
 80180f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	2220      	movs	r2, #32
 80180fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	2200      	movs	r2, #0
 8018102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801810a:	f043 0220 	orr.w	r2, r3, #32
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	2200      	movs	r2, #0
 8018116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801811a:	2301      	movs	r3, #1
 801811c:	e0ca      	b.n	80182b4 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	699b      	ldr	r3, [r3, #24]
 8018124:	f003 0302 	and.w	r3, r3, #2
 8018128:	2b02      	cmp	r3, #2
 801812a:	d0db      	beq.n	80180e4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018132:	2b01      	cmp	r3, #1
 8018134:	d101      	bne.n	801813a <HAL_I2C_Master_Receive_DMA+0x96>
 8018136:	2302      	movs	r3, #2
 8018138:	e0bc      	b.n	80182b4 <HAL_I2C_Master_Receive_DMA+0x210>
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	2201      	movs	r2, #1
 801813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	f003 0301 	and.w	r3, r3, #1
 801814c:	2b01      	cmp	r3, #1
 801814e:	d007      	beq.n	8018160 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	f042 0201 	orr.w	r2, r2, #1
 801815e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	681a      	ldr	r2, [r3, #0]
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801816e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	2222      	movs	r2, #34	; 0x22
 8018174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	2210      	movs	r2, #16
 801817c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	2200      	movs	r2, #0
 8018184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	687a      	ldr	r2, [r7, #4]
 801818a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	893a      	ldrh	r2, [r7, #8]
 8018190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018196:	b29a      	uxth	r2, r3
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	4a49      	ldr	r2, [pc, #292]	; (80182c4 <HAL_I2C_Master_Receive_DMA+0x220>)
 80181a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80181a2:	897a      	ldrh	r2, [r7, #10]
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d062      	beq.n	8018276 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181b4:	4a44      	ldr	r2, [pc, #272]	; (80182c8 <HAL_I2C_Master_Receive_DMA+0x224>)
 80181b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181bc:	4a43      	ldr	r2, [pc, #268]	; (80182cc <HAL_I2C_Master_Receive_DMA+0x228>)
 80181be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181c4:	2200      	movs	r2, #0
 80181c6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181cc:	2200      	movs	r2, #0
 80181ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181d4:	2200      	movs	r2, #0
 80181d6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181dc:	2200      	movs	r2, #0
 80181de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	3310      	adds	r3, #16
 80181ea:	4619      	mov	r1, r3
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181f0:	461a      	mov	r2, r3
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181f6:	f7ff f819 	bl	801722c <HAL_DMA_Start_IT>
 80181fa:	4603      	mov	r3, r0
 80181fc:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80181fe:	7dfb      	ldrb	r3, [r7, #23]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d124      	bne.n	801824e <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	681a      	ldr	r2, [r3, #0]
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018212:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	681a      	ldr	r2, [r3, #0]
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018222:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	2200      	movs	r2, #0
 8018228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	685a      	ldr	r2, [r3, #4]
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801823a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	685a      	ldr	r2, [r3, #4]
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801824a:	605a      	str	r2, [r3, #4]
 801824c:	e02f      	b.n	80182ae <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	2220      	movs	r2, #32
 8018252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	2200      	movs	r2, #0
 801825a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018262:	f043 0210 	orr.w	r2, r3, #16
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	2200      	movs	r2, #0
 801826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8018272:	2301      	movs	r3, #1
 8018274:	e01e      	b.n	80182b4 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	681a      	ldr	r2, [r3, #0]
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018284:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	681a      	ldr	r2, [r3, #0]
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018294:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	2200      	movs	r2, #0
 801829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	685a      	ldr	r2, [r3, #4]
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80182ac:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80182ae:	2300      	movs	r3, #0
 80182b0:	e000      	b.n	80182b4 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80182b2:	2302      	movs	r3, #2
  }
}
 80182b4:	4618      	mov	r0, r3
 80182b6:	3718      	adds	r7, #24
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}
 80182bc:	20000054 	.word	0x20000054
 80182c0:	14f8b589 	.word	0x14f8b589
 80182c4:	ffff0000 	.word	0xffff0000
 80182c8:	08019a3d 	.word	0x08019a3d
 80182cc:	08019be7 	.word	0x08019be7

080182d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b088      	sub	sp, #32
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80182d8:	2300      	movs	r3, #0
 80182da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	685b      	ldr	r3, [r3, #4]
 80182e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80182f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80182f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80182fa:	7bfb      	ldrb	r3, [r7, #15]
 80182fc:	2b10      	cmp	r3, #16
 80182fe:	d003      	beq.n	8018308 <HAL_I2C_EV_IRQHandler+0x38>
 8018300:	7bfb      	ldrb	r3, [r7, #15]
 8018302:	2b40      	cmp	r3, #64	; 0x40
 8018304:	f040 80bd 	bne.w	8018482 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	699b      	ldr	r3, [r3, #24]
 801830e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	695b      	ldr	r3, [r3, #20]
 8018316:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8018318:	69fb      	ldr	r3, [r7, #28]
 801831a:	f003 0301 	and.w	r3, r3, #1
 801831e:	2b00      	cmp	r3, #0
 8018320:	d10d      	bne.n	801833e <HAL_I2C_EV_IRQHandler+0x6e>
 8018322:	693b      	ldr	r3, [r7, #16]
 8018324:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018328:	d003      	beq.n	8018332 <HAL_I2C_EV_IRQHandler+0x62>
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018330:	d101      	bne.n	8018336 <HAL_I2C_EV_IRQHandler+0x66>
 8018332:	2301      	movs	r3, #1
 8018334:	e000      	b.n	8018338 <HAL_I2C_EV_IRQHandler+0x68>
 8018336:	2300      	movs	r3, #0
 8018338:	2b01      	cmp	r3, #1
 801833a:	f000 812e 	beq.w	801859a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801833e:	69fb      	ldr	r3, [r7, #28]
 8018340:	f003 0301 	and.w	r3, r3, #1
 8018344:	2b00      	cmp	r3, #0
 8018346:	d00c      	beq.n	8018362 <HAL_I2C_EV_IRQHandler+0x92>
 8018348:	697b      	ldr	r3, [r7, #20]
 801834a:	0a5b      	lsrs	r3, r3, #9
 801834c:	f003 0301 	and.w	r3, r3, #1
 8018350:	2b00      	cmp	r3, #0
 8018352:	d006      	beq.n	8018362 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f001 fd5d 	bl	8019e14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801835a:	6878      	ldr	r0, [r7, #4]
 801835c:	f000 fd58 	bl	8018e10 <I2C_Master_SB>
 8018360:	e08e      	b.n	8018480 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018362:	69fb      	ldr	r3, [r7, #28]
 8018364:	08db      	lsrs	r3, r3, #3
 8018366:	f003 0301 	and.w	r3, r3, #1
 801836a:	2b00      	cmp	r3, #0
 801836c:	d009      	beq.n	8018382 <HAL_I2C_EV_IRQHandler+0xb2>
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	0a5b      	lsrs	r3, r3, #9
 8018372:	f003 0301 	and.w	r3, r3, #1
 8018376:	2b00      	cmp	r3, #0
 8018378:	d003      	beq.n	8018382 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801837a:	6878      	ldr	r0, [r7, #4]
 801837c:	f000 fdce 	bl	8018f1c <I2C_Master_ADD10>
 8018380:	e07e      	b.n	8018480 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018382:	69fb      	ldr	r3, [r7, #28]
 8018384:	085b      	lsrs	r3, r3, #1
 8018386:	f003 0301 	and.w	r3, r3, #1
 801838a:	2b00      	cmp	r3, #0
 801838c:	d009      	beq.n	80183a2 <HAL_I2C_EV_IRQHandler+0xd2>
 801838e:	697b      	ldr	r3, [r7, #20]
 8018390:	0a5b      	lsrs	r3, r3, #9
 8018392:	f003 0301 	and.w	r3, r3, #1
 8018396:	2b00      	cmp	r3, #0
 8018398:	d003      	beq.n	80183a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f000 fde8 	bl	8018f70 <I2C_Master_ADDR>
 80183a0:	e06e      	b.n	8018480 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80183a2:	69bb      	ldr	r3, [r7, #24]
 80183a4:	089b      	lsrs	r3, r3, #2
 80183a6:	f003 0301 	and.w	r3, r3, #1
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d037      	beq.n	801841e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	685b      	ldr	r3, [r3, #4]
 80183b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80183b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80183bc:	f000 80ef 	beq.w	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	09db      	lsrs	r3, r3, #7
 80183c4:	f003 0301 	and.w	r3, r3, #1
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d00f      	beq.n	80183ec <HAL_I2C_EV_IRQHandler+0x11c>
 80183cc:	697b      	ldr	r3, [r7, #20]
 80183ce:	0a9b      	lsrs	r3, r3, #10
 80183d0:	f003 0301 	and.w	r3, r3, #1
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d009      	beq.n	80183ec <HAL_I2C_EV_IRQHandler+0x11c>
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	089b      	lsrs	r3, r3, #2
 80183dc:	f003 0301 	and.w	r3, r3, #1
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d103      	bne.n	80183ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f000 f9e5 	bl	80187b4 <I2C_MasterTransmit_TXE>
 80183ea:	e049      	b.n	8018480 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80183ec:	69fb      	ldr	r3, [r7, #28]
 80183ee:	089b      	lsrs	r3, r3, #2
 80183f0:	f003 0301 	and.w	r3, r3, #1
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	f000 80d2 	beq.w	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	0a5b      	lsrs	r3, r3, #9
 80183fe:	f003 0301 	and.w	r3, r3, #1
 8018402:	2b00      	cmp	r3, #0
 8018404:	f000 80cb 	beq.w	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8018408:	7bfb      	ldrb	r3, [r7, #15]
 801840a:	2b10      	cmp	r3, #16
 801840c:	d103      	bne.n	8018416 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801840e:	6878      	ldr	r0, [r7, #4]
 8018410:	f000 fa6c 	bl	80188ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018414:	e0c3      	b.n	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018416:	6878      	ldr	r0, [r7, #4]
 8018418:	f000 fad0 	bl	80189bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801841c:	e0bf      	b.n	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	685b      	ldr	r3, [r3, #4]
 8018424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801842c:	f000 80b7 	beq.w	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	099b      	lsrs	r3, r3, #6
 8018434:	f003 0301 	and.w	r3, r3, #1
 8018438:	2b00      	cmp	r3, #0
 801843a:	d00f      	beq.n	801845c <HAL_I2C_EV_IRQHandler+0x18c>
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	0a9b      	lsrs	r3, r3, #10
 8018440:	f003 0301 	and.w	r3, r3, #1
 8018444:	2b00      	cmp	r3, #0
 8018446:	d009      	beq.n	801845c <HAL_I2C_EV_IRQHandler+0x18c>
 8018448:	69fb      	ldr	r3, [r7, #28]
 801844a:	089b      	lsrs	r3, r3, #2
 801844c:	f003 0301 	and.w	r3, r3, #1
 8018450:	2b00      	cmp	r3, #0
 8018452:	d103      	bne.n	801845c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f000 fb40 	bl	8018ada <I2C_MasterReceive_RXNE>
 801845a:	e011      	b.n	8018480 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	089b      	lsrs	r3, r3, #2
 8018460:	f003 0301 	and.w	r3, r3, #1
 8018464:	2b00      	cmp	r3, #0
 8018466:	f000 809a 	beq.w	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	0a5b      	lsrs	r3, r3, #9
 801846e:	f003 0301 	and.w	r3, r3, #1
 8018472:	2b00      	cmp	r3, #0
 8018474:	f000 8093 	beq.w	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8018478:	6878      	ldr	r0, [r7, #4]
 801847a:	f000 fbdf 	bl	8018c3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801847e:	e08e      	b.n	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
 8018480:	e08d      	b.n	801859e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018486:	2b00      	cmp	r3, #0
 8018488:	d004      	beq.n	8018494 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	695b      	ldr	r3, [r3, #20]
 8018490:	61fb      	str	r3, [r7, #28]
 8018492:	e007      	b.n	80184a4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	699b      	ldr	r3, [r3, #24]
 801849a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	695b      	ldr	r3, [r3, #20]
 80184a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184a4:	69fb      	ldr	r3, [r7, #28]
 80184a6:	085b      	lsrs	r3, r3, #1
 80184a8:	f003 0301 	and.w	r3, r3, #1
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d012      	beq.n	80184d6 <HAL_I2C_EV_IRQHandler+0x206>
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	0a5b      	lsrs	r3, r3, #9
 80184b4:	f003 0301 	and.w	r3, r3, #1
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d00c      	beq.n	80184d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d003      	beq.n	80184cc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	699b      	ldr	r3, [r3, #24]
 80184ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80184cc:	69b9      	ldr	r1, [r7, #24]
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f000 ff9d 	bl	801940e <I2C_Slave_ADDR>
 80184d4:	e066      	b.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184d6:	69fb      	ldr	r3, [r7, #28]
 80184d8:	091b      	lsrs	r3, r3, #4
 80184da:	f003 0301 	and.w	r3, r3, #1
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d009      	beq.n	80184f6 <HAL_I2C_EV_IRQHandler+0x226>
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	0a5b      	lsrs	r3, r3, #9
 80184e6:	f003 0301 	and.w	r3, r3, #1
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d003      	beq.n	80184f6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f000 ffd2 	bl	8019498 <I2C_Slave_STOPF>
 80184f4:	e056      	b.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80184f6:	7bbb      	ldrb	r3, [r7, #14]
 80184f8:	2b21      	cmp	r3, #33	; 0x21
 80184fa:	d002      	beq.n	8018502 <HAL_I2C_EV_IRQHandler+0x232>
 80184fc:	7bbb      	ldrb	r3, [r7, #14]
 80184fe:	2b29      	cmp	r3, #41	; 0x29
 8018500:	d125      	bne.n	801854e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	09db      	lsrs	r3, r3, #7
 8018506:	f003 0301 	and.w	r3, r3, #1
 801850a:	2b00      	cmp	r3, #0
 801850c:	d00f      	beq.n	801852e <HAL_I2C_EV_IRQHandler+0x25e>
 801850e:	697b      	ldr	r3, [r7, #20]
 8018510:	0a9b      	lsrs	r3, r3, #10
 8018512:	f003 0301 	and.w	r3, r3, #1
 8018516:	2b00      	cmp	r3, #0
 8018518:	d009      	beq.n	801852e <HAL_I2C_EV_IRQHandler+0x25e>
 801851a:	69fb      	ldr	r3, [r7, #28]
 801851c:	089b      	lsrs	r3, r3, #2
 801851e:	f003 0301 	and.w	r3, r3, #1
 8018522:	2b00      	cmp	r3, #0
 8018524:	d103      	bne.n	801852e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f000 feb3 	bl	8019292 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801852c:	e039      	b.n	80185a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801852e:	69fb      	ldr	r3, [r7, #28]
 8018530:	089b      	lsrs	r3, r3, #2
 8018532:	f003 0301 	and.w	r3, r3, #1
 8018536:	2b00      	cmp	r3, #0
 8018538:	d033      	beq.n	80185a2 <HAL_I2C_EV_IRQHandler+0x2d2>
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	0a5b      	lsrs	r3, r3, #9
 801853e:	f003 0301 	and.w	r3, r3, #1
 8018542:	2b00      	cmp	r3, #0
 8018544:	d02d      	beq.n	80185a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8018546:	6878      	ldr	r0, [r7, #4]
 8018548:	f000 fee0 	bl	801930c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801854c:	e029      	b.n	80185a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	099b      	lsrs	r3, r3, #6
 8018552:	f003 0301 	and.w	r3, r3, #1
 8018556:	2b00      	cmp	r3, #0
 8018558:	d00f      	beq.n	801857a <HAL_I2C_EV_IRQHandler+0x2aa>
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	0a9b      	lsrs	r3, r3, #10
 801855e:	f003 0301 	and.w	r3, r3, #1
 8018562:	2b00      	cmp	r3, #0
 8018564:	d009      	beq.n	801857a <HAL_I2C_EV_IRQHandler+0x2aa>
 8018566:	69fb      	ldr	r3, [r7, #28]
 8018568:	089b      	lsrs	r3, r3, #2
 801856a:	f003 0301 	and.w	r3, r3, #1
 801856e:	2b00      	cmp	r3, #0
 8018570:	d103      	bne.n	801857a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f000 feeb 	bl	801934e <I2C_SlaveReceive_RXNE>
 8018578:	e014      	b.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801857a:	69fb      	ldr	r3, [r7, #28]
 801857c:	089b      	lsrs	r3, r3, #2
 801857e:	f003 0301 	and.w	r3, r3, #1
 8018582:	2b00      	cmp	r3, #0
 8018584:	d00e      	beq.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	0a5b      	lsrs	r3, r3, #9
 801858a:	f003 0301 	and.w	r3, r3, #1
 801858e:	2b00      	cmp	r3, #0
 8018590:	d008      	beq.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8018592:	6878      	ldr	r0, [r7, #4]
 8018594:	f000 ff19 	bl	80193ca <I2C_SlaveReceive_BTF>
 8018598:	e004      	b.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 801859a:	bf00      	nop
 801859c:	e002      	b.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801859e:	bf00      	nop
 80185a0:	e000      	b.n	80185a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80185a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80185a4:	3720      	adds	r7, #32
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd80      	pop	{r7, pc}

080185aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80185aa:	b580      	push	{r7, lr}
 80185ac:	b08a      	sub	sp, #40	; 0x28
 80185ae:	af00      	add	r7, sp, #0
 80185b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	695b      	ldr	r3, [r3, #20]
 80185b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	685b      	ldr	r3, [r3, #4]
 80185c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80185c2:	2300      	movs	r3, #0
 80185c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80185cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80185ce:	6a3b      	ldr	r3, [r7, #32]
 80185d0:	0a1b      	lsrs	r3, r3, #8
 80185d2:	f003 0301 	and.w	r3, r3, #1
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00e      	beq.n	80185f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80185da:	69fb      	ldr	r3, [r7, #28]
 80185dc:	0a1b      	lsrs	r3, r3, #8
 80185de:	f003 0301 	and.w	r3, r3, #1
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d008      	beq.n	80185f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80185e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e8:	f043 0301 	orr.w	r3, r3, #1
 80185ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80185f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80185f8:	6a3b      	ldr	r3, [r7, #32]
 80185fa:	0a5b      	lsrs	r3, r3, #9
 80185fc:	f003 0301 	and.w	r3, r3, #1
 8018600:	2b00      	cmp	r3, #0
 8018602:	d00e      	beq.n	8018622 <HAL_I2C_ER_IRQHandler+0x78>
 8018604:	69fb      	ldr	r3, [r7, #28]
 8018606:	0a1b      	lsrs	r3, r3, #8
 8018608:	f003 0301 	and.w	r3, r3, #1
 801860c:	2b00      	cmp	r3, #0
 801860e:	d008      	beq.n	8018622 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018612:	f043 0302 	orr.w	r3, r3, #2
 8018616:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8018620:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018622:	6a3b      	ldr	r3, [r7, #32]
 8018624:	0a9b      	lsrs	r3, r3, #10
 8018626:	f003 0301 	and.w	r3, r3, #1
 801862a:	2b00      	cmp	r3, #0
 801862c:	d03f      	beq.n	80186ae <HAL_I2C_ER_IRQHandler+0x104>
 801862e:	69fb      	ldr	r3, [r7, #28]
 8018630:	0a1b      	lsrs	r3, r3, #8
 8018632:	f003 0301 	and.w	r3, r3, #1
 8018636:	2b00      	cmp	r3, #0
 8018638:	d039      	beq.n	80186ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801863a:	7efb      	ldrb	r3, [r7, #27]
 801863c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018642:	b29b      	uxth	r3, r3
 8018644:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801864c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018652:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8018654:	7ebb      	ldrb	r3, [r7, #26]
 8018656:	2b20      	cmp	r3, #32
 8018658:	d112      	bne.n	8018680 <HAL_I2C_ER_IRQHandler+0xd6>
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d10f      	bne.n	8018680 <HAL_I2C_ER_IRQHandler+0xd6>
 8018660:	7cfb      	ldrb	r3, [r7, #19]
 8018662:	2b21      	cmp	r3, #33	; 0x21
 8018664:	d008      	beq.n	8018678 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8018666:	7cfb      	ldrb	r3, [r7, #19]
 8018668:	2b29      	cmp	r3, #41	; 0x29
 801866a:	d005      	beq.n	8018678 <HAL_I2C_ER_IRQHandler+0xce>
 801866c:	7cfb      	ldrb	r3, [r7, #19]
 801866e:	2b28      	cmp	r3, #40	; 0x28
 8018670:	d106      	bne.n	8018680 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	2b21      	cmp	r3, #33	; 0x21
 8018676:	d103      	bne.n	8018680 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	f001 f83d 	bl	80196f8 <I2C_Slave_AF>
 801867e:	e016      	b.n	80186ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018688:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801868c:	f043 0304 	orr.w	r3, r3, #4
 8018690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8018692:	7efb      	ldrb	r3, [r7, #27]
 8018694:	2b10      	cmp	r3, #16
 8018696:	d002      	beq.n	801869e <HAL_I2C_ER_IRQHandler+0xf4>
 8018698:	7efb      	ldrb	r3, [r7, #27]
 801869a:	2b40      	cmp	r3, #64	; 0x40
 801869c:	d107      	bne.n	80186ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	681a      	ldr	r2, [r3, #0]
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80186ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80186ae:	6a3b      	ldr	r3, [r7, #32]
 80186b0:	0adb      	lsrs	r3, r3, #11
 80186b2:	f003 0301 	and.w	r3, r3, #1
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d00e      	beq.n	80186d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80186ba:	69fb      	ldr	r3, [r7, #28]
 80186bc:	0a1b      	lsrs	r3, r3, #8
 80186be:	f003 0301 	and.w	r3, r3, #1
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d008      	beq.n	80186d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80186c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c8:	f043 0308 	orr.w	r3, r3, #8
 80186cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80186d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80186d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d008      	beq.n	80186f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80186e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186e4:	431a      	orrs	r2, r3
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f001 f874 	bl	80197d8 <I2C_ITError>
  }
}
 80186f0:	bf00      	nop
 80186f2:	3728      	adds	r7, #40	; 0x28
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}

080186f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80186f8:	b480      	push	{r7}
 80186fa:	b083      	sub	sp, #12
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8018700:	bf00      	nop
 8018702:	370c      	adds	r7, #12
 8018704:	46bd      	mov	sp, r7
 8018706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801870a:	4770      	bx	lr

0801870c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801870c:	b480      	push	{r7}
 801870e:	b083      	sub	sp, #12
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018714:	bf00      	nop
 8018716:	370c      	adds	r7, #12
 8018718:	46bd      	mov	sp, r7
 801871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871e:	4770      	bx	lr

08018720 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018720:	b480      	push	{r7}
 8018722:	b083      	sub	sp, #12
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8018728:	bf00      	nop
 801872a:	370c      	adds	r7, #12
 801872c:	46bd      	mov	sp, r7
 801872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018732:	4770      	bx	lr

08018734 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018734:	b480      	push	{r7}
 8018736:	b083      	sub	sp, #12
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	460b      	mov	r3, r1
 801873e:	70fb      	strb	r3, [r7, #3]
 8018740:	4613      	mov	r3, r2
 8018742:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8018744:	bf00      	nop
 8018746:	370c      	adds	r7, #12
 8018748:	46bd      	mov	sp, r7
 801874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874e:	4770      	bx	lr

08018750 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018750:	b480      	push	{r7}
 8018752:	b083      	sub	sp, #12
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8018758:	bf00      	nop
 801875a:	370c      	adds	r7, #12
 801875c:	46bd      	mov	sp, r7
 801875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018762:	4770      	bx	lr

08018764 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018764:	b480      	push	{r7}
 8018766:	b083      	sub	sp, #12
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801876c:	bf00      	nop
 801876e:	370c      	adds	r7, #12
 8018770:	46bd      	mov	sp, r7
 8018772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018776:	4770      	bx	lr

08018778 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018778:	b480      	push	{r7}
 801877a:	b083      	sub	sp, #12
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8018780:	bf00      	nop
 8018782:	370c      	adds	r7, #12
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr

0801878c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801878c:	b480      	push	{r7}
 801878e:	b083      	sub	sp, #12
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8018794:	bf00      	nop
 8018796:	370c      	adds	r7, #12
 8018798:	46bd      	mov	sp, r7
 801879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879e:	4770      	bx	lr

080187a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80187a0:	b480      	push	{r7}
 80187a2:	b083      	sub	sp, #12
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80187a8:	bf00      	nop
 80187aa:	370c      	adds	r7, #12
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr

080187b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b084      	sub	sp, #16
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80187c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80187ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d150      	bne.n	801887c <I2C_MasterTransmit_TXE+0xc8>
 80187da:	7bfb      	ldrb	r3, [r7, #15]
 80187dc:	2b21      	cmp	r3, #33	; 0x21
 80187de:	d14d      	bne.n	801887c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	2b08      	cmp	r3, #8
 80187e4:	d01d      	beq.n	8018822 <I2C_MasterTransmit_TXE+0x6e>
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	2b20      	cmp	r3, #32
 80187ea:	d01a      	beq.n	8018822 <I2C_MasterTransmit_TXE+0x6e>
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80187f2:	d016      	beq.n	8018822 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	685a      	ldr	r2, [r3, #4]
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018802:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2211      	movs	r2, #17
 8018808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2200      	movs	r2, #0
 801880e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	2220      	movs	r2, #32
 8018816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801881a:	6878      	ldr	r0, [r7, #4]
 801881c:	f7ff ff6c 	bl	80186f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018820:	e060      	b.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	685a      	ldr	r2, [r3, #4]
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018830:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018840:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	2200      	movs	r2, #0
 8018846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2220      	movs	r2, #32
 801884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018856:	b2db      	uxtb	r3, r3
 8018858:	2b40      	cmp	r3, #64	; 0x40
 801885a:	d107      	bne.n	801886c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	2200      	movs	r2, #0
 8018860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018864:	6878      	ldr	r0, [r7, #4]
 8018866:	f7ff ff7d 	bl	8018764 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801886a:	e03b      	b.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	2200      	movs	r2, #0
 8018870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018874:	6878      	ldr	r0, [r7, #4]
 8018876:	f7ff ff3f 	bl	80186f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801887a:	e033      	b.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801887c:	7bfb      	ldrb	r3, [r7, #15]
 801887e:	2b21      	cmp	r3, #33	; 0x21
 8018880:	d005      	beq.n	801888e <I2C_MasterTransmit_TXE+0xda>
 8018882:	7bbb      	ldrb	r3, [r7, #14]
 8018884:	2b40      	cmp	r3, #64	; 0x40
 8018886:	d12d      	bne.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8018888:	7bfb      	ldrb	r3, [r7, #15]
 801888a:	2b22      	cmp	r3, #34	; 0x22
 801888c:	d12a      	bne.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018892:	b29b      	uxth	r3, r3
 8018894:	2b00      	cmp	r3, #0
 8018896:	d108      	bne.n	80188aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	685a      	ldr	r2, [r3, #4]
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80188a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80188a8:	e01c      	b.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80188b0:	b2db      	uxtb	r3, r3
 80188b2:	2b40      	cmp	r3, #64	; 0x40
 80188b4:	d103      	bne.n	80188be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80188b6:	6878      	ldr	r0, [r7, #4]
 80188b8:	f000 f880 	bl	80189bc <I2C_MemoryTransmit_TXE_BTF>
}
 80188bc:	e012      	b.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188c2:	781a      	ldrb	r2, [r3, #0]
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188ce:	1c5a      	adds	r2, r3, #1
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80188d8:	b29b      	uxth	r3, r3
 80188da:	3b01      	subs	r3, #1
 80188dc:	b29a      	uxth	r2, r3
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80188e2:	e7ff      	b.n	80188e4 <I2C_MasterTransmit_TXE+0x130>
 80188e4:	bf00      	nop
 80188e6:	3710      	adds	r7, #16
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}

080188ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b084      	sub	sp, #16
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018900:	b2db      	uxtb	r3, r3
 8018902:	2b21      	cmp	r3, #33	; 0x21
 8018904:	d156      	bne.n	80189b4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801890a:	b29b      	uxth	r3, r3
 801890c:	2b00      	cmp	r3, #0
 801890e:	d012      	beq.n	8018936 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018914:	781a      	ldrb	r2, [r3, #0]
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018920:	1c5a      	adds	r2, r3, #1
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801892a:	b29b      	uxth	r3, r3
 801892c:	3b01      	subs	r3, #1
 801892e:	b29a      	uxth	r2, r3
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018934:	e03e      	b.n	80189b4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	2b08      	cmp	r3, #8
 801893a:	d01d      	beq.n	8018978 <I2C_MasterTransmit_BTF+0x8c>
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	2b20      	cmp	r3, #32
 8018940:	d01a      	beq.n	8018978 <I2C_MasterTransmit_BTF+0x8c>
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018948:	d016      	beq.n	8018978 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	685a      	ldr	r2, [r3, #4]
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018958:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2211      	movs	r2, #17
 801895e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	2200      	movs	r2, #0
 8018964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2220      	movs	r2, #32
 801896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018970:	6878      	ldr	r0, [r7, #4]
 8018972:	f7ff fec1 	bl	80186f8 <HAL_I2C_MasterTxCpltCallback>
}
 8018976:	e01d      	b.n	80189b4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	685a      	ldr	r2, [r3, #4]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018986:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	681a      	ldr	r2, [r3, #0]
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018996:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	2200      	movs	r2, #0
 801899c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	2220      	movs	r2, #32
 80189a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	2200      	movs	r2, #0
 80189aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80189ae:	6878      	ldr	r0, [r7, #4]
 80189b0:	f7ff fea2 	bl	80186f8 <HAL_I2C_MasterTxCpltCallback>
}
 80189b4:	bf00      	nop
 80189b6:	3710      	adds	r7, #16
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b084      	sub	sp, #16
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80189ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d11d      	bne.n	8018a10 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189d8:	2b01      	cmp	r3, #1
 80189da:	d10b      	bne.n	80189f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189e0:	b2da      	uxtb	r2, r3
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189ec:	1c9a      	adds	r2, r3, #2
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80189f2:	e06e      	b.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	121b      	asrs	r3, r3, #8
 80189fc:	b2da      	uxtb	r2, r3
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a08:	1c5a      	adds	r2, r3, #1
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018a0e:	e060      	b.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a14:	2b01      	cmp	r3, #1
 8018a16:	d10b      	bne.n	8018a30 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a1c:	b2da      	uxtb	r2, r3
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a28:	1c5a      	adds	r2, r3, #1
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018a2e:	e050      	b.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a34:	2b02      	cmp	r3, #2
 8018a36:	d14c      	bne.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018a38:	7bfb      	ldrb	r3, [r7, #15]
 8018a3a:	2b22      	cmp	r3, #34	; 0x22
 8018a3c:	d108      	bne.n	8018a50 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	681a      	ldr	r2, [r3, #0]
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018a4c:	601a      	str	r2, [r3, #0]
}
 8018a4e:	e040      	b.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d015      	beq.n	8018a86 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8018a5a:	7bfb      	ldrb	r3, [r7, #15]
 8018a5c:	2b21      	cmp	r3, #33	; 0x21
 8018a5e:	d112      	bne.n	8018a86 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a64:	781a      	ldrb	r2, [r3, #0]
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a70:	1c5a      	adds	r2, r3, #1
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a7a:	b29b      	uxth	r3, r3
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	b29a      	uxth	r2, r3
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018a84:	e025      	b.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d120      	bne.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8018a90:	7bfb      	ldrb	r3, [r7, #15]
 8018a92:	2b21      	cmp	r3, #33	; 0x21
 8018a94:	d11d      	bne.n	8018ad2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	685a      	ldr	r2, [r3, #4]
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018aa4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	681a      	ldr	r2, [r3, #0]
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018ab4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	2200      	movs	r2, #0
 8018aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	2220      	movs	r2, #32
 8018ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2200      	movs	r2, #0
 8018ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f7ff fe49 	bl	8018764 <HAL_I2C_MemTxCpltCallback>
}
 8018ad2:	bf00      	nop
 8018ad4:	3710      	adds	r7, #16
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}

08018ada <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018ada:	b580      	push	{r7, lr}
 8018adc:	b084      	sub	sp, #16
 8018ade:	af00      	add	r7, sp, #0
 8018ae0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ae8:	b2db      	uxtb	r3, r3
 8018aea:	2b22      	cmp	r3, #34	; 0x22
 8018aec:	f040 80a2 	bne.w	8018c34 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	2b03      	cmp	r3, #3
 8018afc:	d921      	bls.n	8018b42 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	691a      	ldr	r2, [r3, #16]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b08:	b2d2      	uxtb	r2, r2
 8018b0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b10:	1c5a      	adds	r2, r3, #1
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b1a:	b29b      	uxth	r3, r3
 8018b1c:	3b01      	subs	r3, #1
 8018b1e:	b29a      	uxth	r2, r3
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b28:	b29b      	uxth	r3, r3
 8018b2a:	2b03      	cmp	r3, #3
 8018b2c:	f040 8082 	bne.w	8018c34 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	685a      	ldr	r2, [r3, #4]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b3e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8018b40:	e078      	b.n	8018c34 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b46:	2b02      	cmp	r3, #2
 8018b48:	d074      	beq.n	8018c34 <I2C_MasterReceive_RXNE+0x15a>
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	2b01      	cmp	r3, #1
 8018b4e:	d002      	beq.n	8018b56 <I2C_MasterReceive_RXNE+0x7c>
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d16e      	bne.n	8018c34 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018b56:	6878      	ldr	r0, [r7, #4]
 8018b58:	f001 f92a 	bl	8019db0 <I2C_WaitOnSTOPRequestThroughIT>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d142      	bne.n	8018be8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	681a      	ldr	r2, [r3, #0]
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b70:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	685a      	ldr	r2, [r3, #4]
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018b80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	691a      	ldr	r2, [r3, #16]
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b8c:	b2d2      	uxtb	r2, r2
 8018b8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b94:	1c5a      	adds	r2, r3, #1
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	3b01      	subs	r3, #1
 8018ba2:	b29a      	uxth	r2, r3
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2220      	movs	r2, #32
 8018bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018bb6:	b2db      	uxtb	r3, r3
 8018bb8:	2b40      	cmp	r3, #64	; 0x40
 8018bba:	d10a      	bne.n	8018bd2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f7ff fdd4 	bl	8018778 <HAL_I2C_MemRxCpltCallback>
}
 8018bd0:	e030      	b.n	8018c34 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2212      	movs	r2, #18
 8018bde:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018be0:	6878      	ldr	r0, [r7, #4]
 8018be2:	f7f6 f847 	bl	800ec74 <HAL_I2C_MasterRxCpltCallback>
}
 8018be6:	e025      	b.n	8018c34 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	685a      	ldr	r2, [r3, #4]
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018bf6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	691a      	ldr	r2, [r3, #16]
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c02:	b2d2      	uxtb	r2, r2
 8018c04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c0a:	1c5a      	adds	r2, r3, #1
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c14:	b29b      	uxth	r3, r3
 8018c16:	3b01      	subs	r3, #1
 8018c18:	b29a      	uxth	r2, r3
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	2220      	movs	r2, #32
 8018c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	2200      	movs	r2, #0
 8018c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	f7ff fdac 	bl	801878c <HAL_I2C_ErrorCallback>
}
 8018c34:	bf00      	nop
 8018c36:	3710      	adds	r7, #16
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c4e:	b29b      	uxth	r3, r3
 8018c50:	2b04      	cmp	r3, #4
 8018c52:	d11b      	bne.n	8018c8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	685a      	ldr	r2, [r3, #4]
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	691a      	ldr	r2, [r3, #16]
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6e:	b2d2      	uxtb	r2, r2
 8018c70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c76:	1c5a      	adds	r2, r3, #1
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	3b01      	subs	r3, #1
 8018c84:	b29a      	uxth	r2, r3
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018c8a:	e0bd      	b.n	8018e08 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c90:	b29b      	uxth	r3, r3
 8018c92:	2b03      	cmp	r3, #3
 8018c94:	d129      	bne.n	8018cea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	685a      	ldr	r2, [r3, #4]
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ca4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	2b04      	cmp	r3, #4
 8018caa:	d00a      	beq.n	8018cc2 <I2C_MasterReceive_BTF+0x86>
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	2b02      	cmp	r3, #2
 8018cb0:	d007      	beq.n	8018cc2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018cc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	691a      	ldr	r2, [r3, #16]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ccc:	b2d2      	uxtb	r2, r2
 8018cce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd4:	1c5a      	adds	r2, r3, #1
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	3b01      	subs	r3, #1
 8018ce2:	b29a      	uxth	r2, r3
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018ce8:	e08e      	b.n	8018e08 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	2b02      	cmp	r3, #2
 8018cf2:	d176      	bne.n	8018de2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	2b01      	cmp	r3, #1
 8018cf8:	d002      	beq.n	8018d00 <I2C_MasterReceive_BTF+0xc4>
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	2b10      	cmp	r3, #16
 8018cfe:	d108      	bne.n	8018d12 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d0e:	601a      	str	r2, [r3, #0]
 8018d10:	e019      	b.n	8018d46 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	2b04      	cmp	r3, #4
 8018d16:	d002      	beq.n	8018d1e <I2C_MasterReceive_BTF+0xe2>
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	2b02      	cmp	r3, #2
 8018d1c:	d108      	bne.n	8018d30 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	681a      	ldr	r2, [r3, #0]
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018d2c:	601a      	str	r2, [r3, #0]
 8018d2e:	e00a      	b.n	8018d46 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2b10      	cmp	r3, #16
 8018d34:	d007      	beq.n	8018d46 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	681a      	ldr	r2, [r3, #0]
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d44:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	691a      	ldr	r2, [r3, #16]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d50:	b2d2      	uxtb	r2, r2
 8018d52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d58:	1c5a      	adds	r2, r3, #1
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d62:	b29b      	uxth	r3, r3
 8018d64:	3b01      	subs	r3, #1
 8018d66:	b29a      	uxth	r2, r3
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	691a      	ldr	r2, [r3, #16]
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d76:	b2d2      	uxtb	r2, r2
 8018d78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d7e:	1c5a      	adds	r2, r3, #1
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d88:	b29b      	uxth	r3, r3
 8018d8a:	3b01      	subs	r3, #1
 8018d8c:	b29a      	uxth	r2, r3
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	685a      	ldr	r2, [r3, #4]
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018da0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2220      	movs	r2, #32
 8018da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	2b40      	cmp	r3, #64	; 0x40
 8018db4:	d10a      	bne.n	8018dcc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	2200      	movs	r2, #0
 8018dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018dc4:	6878      	ldr	r0, [r7, #4]
 8018dc6:	f7ff fcd7 	bl	8018778 <HAL_I2C_MemRxCpltCallback>
}
 8018dca:	e01d      	b.n	8018e08 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	2200      	movs	r2, #0
 8018dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2212      	movs	r2, #18
 8018dd8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	f7f5 ff4a 	bl	800ec74 <HAL_I2C_MasterRxCpltCallback>
}
 8018de0:	e012      	b.n	8018e08 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	691a      	ldr	r2, [r3, #16]
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dec:	b2d2      	uxtb	r2, r2
 8018dee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df4:	1c5a      	adds	r2, r3, #1
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dfe:	b29b      	uxth	r3, r3
 8018e00:	3b01      	subs	r3, #1
 8018e02:	b29a      	uxth	r2, r3
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018e08:	bf00      	nop
 8018e0a:	3710      	adds	r7, #16
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}

08018e10 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018e10:	b480      	push	{r7}
 8018e12:	b083      	sub	sp, #12
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	2b40      	cmp	r3, #64	; 0x40
 8018e22:	d117      	bne.n	8018e54 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d109      	bne.n	8018e40 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e30:	b2db      	uxtb	r3, r3
 8018e32:	461a      	mov	r2, r3
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018e3c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018e3e:	e067      	b.n	8018f10 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e44:	b2db      	uxtb	r3, r3
 8018e46:	f043 0301 	orr.w	r3, r3, #1
 8018e4a:	b2da      	uxtb	r2, r3
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	611a      	str	r2, [r3, #16]
}
 8018e52:	e05d      	b.n	8018f10 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	691b      	ldr	r3, [r3, #16]
 8018e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018e5c:	d133      	bne.n	8018ec6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e64:	b2db      	uxtb	r3, r3
 8018e66:	2b21      	cmp	r3, #33	; 0x21
 8018e68:	d109      	bne.n	8018e7e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e6e:	b2db      	uxtb	r3, r3
 8018e70:	461a      	mov	r2, r3
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018e7a:	611a      	str	r2, [r3, #16]
 8018e7c:	e008      	b.n	8018e90 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018e82:	b2db      	uxtb	r3, r3
 8018e84:	f043 0301 	orr.w	r3, r3, #1
 8018e88:	b2da      	uxtb	r2, r3
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d004      	beq.n	8018ea2 <I2C_Master_SB+0x92>
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d108      	bne.n	8018eb4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d032      	beq.n	8018f10 <I2C_Master_SB+0x100>
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d02d      	beq.n	8018f10 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	685a      	ldr	r2, [r3, #4]
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018ec2:	605a      	str	r2, [r3, #4]
}
 8018ec4:	e024      	b.n	8018f10 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d10e      	bne.n	8018eec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	11db      	asrs	r3, r3, #7
 8018ed6:	b2db      	uxtb	r3, r3
 8018ed8:	f003 0306 	and.w	r3, r3, #6
 8018edc:	b2db      	uxtb	r3, r3
 8018ede:	f063 030f 	orn	r3, r3, #15
 8018ee2:	b2da      	uxtb	r2, r3
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	611a      	str	r2, [r3, #16]
}
 8018eea:	e011      	b.n	8018f10 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ef0:	2b01      	cmp	r3, #1
 8018ef2:	d10d      	bne.n	8018f10 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	11db      	asrs	r3, r3, #7
 8018efc:	b2db      	uxtb	r3, r3
 8018efe:	f003 0306 	and.w	r3, r3, #6
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	f063 030e 	orn	r3, r3, #14
 8018f08:	b2da      	uxtb	r2, r3
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	611a      	str	r2, [r3, #16]
}
 8018f10:	bf00      	nop
 8018f12:	370c      	adds	r7, #12
 8018f14:	46bd      	mov	sp, r7
 8018f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1a:	4770      	bx	lr

08018f1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8018f1c:	b480      	push	{r7}
 8018f1e:	b083      	sub	sp, #12
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f28:	b2da      	uxtb	r2, r3
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d103      	bne.n	8018f40 <I2C_Master_ADD10+0x24>
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d011      	beq.n	8018f64 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d104      	bne.n	8018f54 <I2C_Master_ADD10+0x38>
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d007      	beq.n	8018f64 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	685a      	ldr	r2, [r3, #4]
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018f62:	605a      	str	r2, [r3, #4]
    }
  }
}
 8018f64:	bf00      	nop
 8018f66:	370c      	adds	r7, #12
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr

08018f70 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018f70:	b480      	push	{r7}
 8018f72:	b091      	sub	sp, #68	; 0x44
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018f7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f8c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018f94:	b2db      	uxtb	r3, r3
 8018f96:	2b22      	cmp	r3, #34	; 0x22
 8018f98:	f040 8169 	bne.w	801926e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d10f      	bne.n	8018fc4 <I2C_Master_ADDR+0x54>
 8018fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018fa8:	2b40      	cmp	r3, #64	; 0x40
 8018faa:	d10b      	bne.n	8018fc4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018fac:	2300      	movs	r3, #0
 8018fae:	633b      	str	r3, [r7, #48]	; 0x30
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	695b      	ldr	r3, [r3, #20]
 8018fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	699b      	ldr	r3, [r3, #24]
 8018fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8018fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc2:	e160      	b.n	8019286 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d11d      	bne.n	8019008 <I2C_Master_ADDR+0x98>
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	691b      	ldr	r3, [r3, #16]
 8018fd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8018fd4:	d118      	bne.n	8019008 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	695b      	ldr	r3, [r3, #20]
 8018fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	699b      	ldr	r3, [r3, #24]
 8018fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018ffa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019000:	1c5a      	adds	r2, r3, #1
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	651a      	str	r2, [r3, #80]	; 0x50
 8019006:	e13e      	b.n	8019286 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801900c:	b29b      	uxth	r3, r3
 801900e:	2b00      	cmp	r3, #0
 8019010:	d113      	bne.n	801903a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019012:	2300      	movs	r3, #0
 8019014:	62bb      	str	r3, [r7, #40]	; 0x28
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	695b      	ldr	r3, [r3, #20]
 801901c:	62bb      	str	r3, [r7, #40]	; 0x28
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	699b      	ldr	r3, [r3, #24]
 8019024:	62bb      	str	r3, [r7, #40]	; 0x28
 8019026:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	681a      	ldr	r2, [r3, #0]
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019036:	601a      	str	r2, [r3, #0]
 8019038:	e115      	b.n	8019266 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801903e:	b29b      	uxth	r3, r3
 8019040:	2b01      	cmp	r3, #1
 8019042:	f040 808a 	bne.w	801915a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8019046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801904c:	d137      	bne.n	80190be <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	681a      	ldr	r2, [r3, #0]
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801905c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	685b      	ldr	r3, [r3, #4]
 8019064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801906c:	d113      	bne.n	8019096 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	681a      	ldr	r2, [r3, #0]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801907c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801907e:	2300      	movs	r3, #0
 8019080:	627b      	str	r3, [r7, #36]	; 0x24
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	695b      	ldr	r3, [r3, #20]
 8019088:	627b      	str	r3, [r7, #36]	; 0x24
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	699b      	ldr	r3, [r3, #24]
 8019090:	627b      	str	r3, [r7, #36]	; 0x24
 8019092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019094:	e0e7      	b.n	8019266 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019096:	2300      	movs	r3, #0
 8019098:	623b      	str	r3, [r7, #32]
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	695b      	ldr	r3, [r3, #20]
 80190a0:	623b      	str	r3, [r7, #32]
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	699b      	ldr	r3, [r3, #24]
 80190a8:	623b      	str	r3, [r7, #32]
 80190aa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	681a      	ldr	r2, [r3, #0]
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80190ba:	601a      	str	r2, [r3, #0]
 80190bc:	e0d3      	b.n	8019266 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80190be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c0:	2b08      	cmp	r3, #8
 80190c2:	d02e      	beq.n	8019122 <I2C_Master_ADDR+0x1b2>
 80190c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190c6:	2b20      	cmp	r3, #32
 80190c8:	d02b      	beq.n	8019122 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80190ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190cc:	2b12      	cmp	r3, #18
 80190ce:	d102      	bne.n	80190d6 <I2C_Master_ADDR+0x166>
 80190d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d2:	2b01      	cmp	r3, #1
 80190d4:	d125      	bne.n	8019122 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80190d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d8:	2b04      	cmp	r3, #4
 80190da:	d00e      	beq.n	80190fa <I2C_Master_ADDR+0x18a>
 80190dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190de:	2b02      	cmp	r3, #2
 80190e0:	d00b      	beq.n	80190fa <I2C_Master_ADDR+0x18a>
 80190e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190e4:	2b10      	cmp	r3, #16
 80190e6:	d008      	beq.n	80190fa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	681a      	ldr	r2, [r3, #0]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80190f6:	601a      	str	r2, [r3, #0]
 80190f8:	e007      	b.n	801910a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019108:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801910a:	2300      	movs	r3, #0
 801910c:	61fb      	str	r3, [r7, #28]
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	695b      	ldr	r3, [r3, #20]
 8019114:	61fb      	str	r3, [r7, #28]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	699b      	ldr	r3, [r3, #24]
 801911c:	61fb      	str	r3, [r7, #28]
 801911e:	69fb      	ldr	r3, [r7, #28]
 8019120:	e0a1      	b.n	8019266 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	681a      	ldr	r2, [r3, #0]
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019130:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019132:	2300      	movs	r3, #0
 8019134:	61bb      	str	r3, [r7, #24]
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	695b      	ldr	r3, [r3, #20]
 801913c:	61bb      	str	r3, [r7, #24]
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	699b      	ldr	r3, [r3, #24]
 8019144:	61bb      	str	r3, [r7, #24]
 8019146:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	681a      	ldr	r2, [r3, #0]
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019156:	601a      	str	r2, [r3, #0]
 8019158:	e085      	b.n	8019266 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801915e:	b29b      	uxth	r3, r3
 8019160:	2b02      	cmp	r3, #2
 8019162:	d14d      	bne.n	8019200 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8019164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019166:	2b04      	cmp	r3, #4
 8019168:	d016      	beq.n	8019198 <I2C_Master_ADDR+0x228>
 801916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801916c:	2b02      	cmp	r3, #2
 801916e:	d013      	beq.n	8019198 <I2C_Master_ADDR+0x228>
 8019170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019172:	2b10      	cmp	r3, #16
 8019174:	d010      	beq.n	8019198 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	681a      	ldr	r2, [r3, #0]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019184:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	681a      	ldr	r2, [r3, #0]
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019194:	601a      	str	r2, [r3, #0]
 8019196:	e007      	b.n	80191a8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	681a      	ldr	r2, [r3, #0]
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80191a6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	685b      	ldr	r3, [r3, #4]
 80191ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80191b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80191b6:	d117      	bne.n	80191e8 <I2C_Master_ADDR+0x278>
 80191b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80191be:	d00b      	beq.n	80191d8 <I2C_Master_ADDR+0x268>
 80191c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d008      	beq.n	80191d8 <I2C_Master_ADDR+0x268>
 80191c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191c8:	2b08      	cmp	r3, #8
 80191ca:	d005      	beq.n	80191d8 <I2C_Master_ADDR+0x268>
 80191cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ce:	2b10      	cmp	r3, #16
 80191d0:	d002      	beq.n	80191d8 <I2C_Master_ADDR+0x268>
 80191d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d4:	2b20      	cmp	r3, #32
 80191d6:	d107      	bne.n	80191e8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	685a      	ldr	r2, [r3, #4]
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80191e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191e8:	2300      	movs	r3, #0
 80191ea:	617b      	str	r3, [r7, #20]
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	695b      	ldr	r3, [r3, #20]
 80191f2:	617b      	str	r3, [r7, #20]
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	699b      	ldr	r3, [r3, #24]
 80191fa:	617b      	str	r3, [r7, #20]
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	e032      	b.n	8019266 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	681a      	ldr	r2, [r3, #0]
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801920e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	685b      	ldr	r3, [r3, #4]
 8019216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801921a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801921e:	d117      	bne.n	8019250 <I2C_Master_ADDR+0x2e0>
 8019220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019222:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019226:	d00b      	beq.n	8019240 <I2C_Master_ADDR+0x2d0>
 8019228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801922a:	2b01      	cmp	r3, #1
 801922c:	d008      	beq.n	8019240 <I2C_Master_ADDR+0x2d0>
 801922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019230:	2b08      	cmp	r3, #8
 8019232:	d005      	beq.n	8019240 <I2C_Master_ADDR+0x2d0>
 8019234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019236:	2b10      	cmp	r3, #16
 8019238:	d002      	beq.n	8019240 <I2C_Master_ADDR+0x2d0>
 801923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801923c:	2b20      	cmp	r3, #32
 801923e:	d107      	bne.n	8019250 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	685a      	ldr	r2, [r3, #4]
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801924e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019250:	2300      	movs	r3, #0
 8019252:	613b      	str	r3, [r7, #16]
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	695b      	ldr	r3, [r3, #20]
 801925a:	613b      	str	r3, [r7, #16]
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	699b      	ldr	r3, [r3, #24]
 8019262:	613b      	str	r3, [r7, #16]
 8019264:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2200      	movs	r2, #0
 801926a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801926c:	e00b      	b.n	8019286 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801926e:	2300      	movs	r3, #0
 8019270:	60fb      	str	r3, [r7, #12]
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	695b      	ldr	r3, [r3, #20]
 8019278:	60fb      	str	r3, [r7, #12]
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	699b      	ldr	r3, [r3, #24]
 8019280:	60fb      	str	r3, [r7, #12]
 8019282:	68fb      	ldr	r3, [r7, #12]
}
 8019284:	e7ff      	b.n	8019286 <I2C_Master_ADDR+0x316>
 8019286:	bf00      	nop
 8019288:	3744      	adds	r7, #68	; 0x44
 801928a:	46bd      	mov	sp, r7
 801928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019290:	4770      	bx	lr

08019292 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8019292:	b580      	push	{r7, lr}
 8019294:	b084      	sub	sp, #16
 8019296:	af00      	add	r7, sp, #0
 8019298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80192a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192a6:	b29b      	uxth	r3, r3
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d02b      	beq.n	8019304 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192b0:	781a      	ldrb	r2, [r3, #0]
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192bc:	1c5a      	adds	r2, r3, #1
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192c6:	b29b      	uxth	r3, r3
 80192c8:	3b01      	subs	r3, #1
 80192ca:	b29a      	uxth	r2, r3
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80192d4:	b29b      	uxth	r3, r3
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d114      	bne.n	8019304 <I2C_SlaveTransmit_TXE+0x72>
 80192da:	7bfb      	ldrb	r3, [r7, #15]
 80192dc:	2b29      	cmp	r3, #41	; 0x29
 80192de:	d111      	bne.n	8019304 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	685a      	ldr	r2, [r3, #4]
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80192ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	2221      	movs	r2, #33	; 0x21
 80192f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	2228      	movs	r2, #40	; 0x28
 80192fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80192fe:	6878      	ldr	r0, [r7, #4]
 8019300:	f7ff fa04 	bl	801870c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019304:	bf00      	nop
 8019306:	3710      	adds	r7, #16
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}

0801930c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801930c:	b480      	push	{r7}
 801930e:	b083      	sub	sp, #12
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019318:	b29b      	uxth	r3, r3
 801931a:	2b00      	cmp	r3, #0
 801931c:	d011      	beq.n	8019342 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019322:	781a      	ldrb	r2, [r3, #0]
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801932e:	1c5a      	adds	r2, r3, #1
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019338:	b29b      	uxth	r3, r3
 801933a:	3b01      	subs	r3, #1
 801933c:	b29a      	uxth	r2, r3
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019342:	bf00      	nop
 8019344:	370c      	adds	r7, #12
 8019346:	46bd      	mov	sp, r7
 8019348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934c:	4770      	bx	lr

0801934e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801934e:	b580      	push	{r7, lr}
 8019350:	b084      	sub	sp, #16
 8019352:	af00      	add	r7, sp, #0
 8019354:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801935c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019362:	b29b      	uxth	r3, r3
 8019364:	2b00      	cmp	r3, #0
 8019366:	d02c      	beq.n	80193c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	691a      	ldr	r2, [r3, #16]
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019372:	b2d2      	uxtb	r2, r2
 8019374:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801937a:	1c5a      	adds	r2, r3, #1
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019384:	b29b      	uxth	r3, r3
 8019386:	3b01      	subs	r3, #1
 8019388:	b29a      	uxth	r2, r3
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019392:	b29b      	uxth	r3, r3
 8019394:	2b00      	cmp	r3, #0
 8019396:	d114      	bne.n	80193c2 <I2C_SlaveReceive_RXNE+0x74>
 8019398:	7bfb      	ldrb	r3, [r7, #15]
 801939a:	2b2a      	cmp	r3, #42	; 0x2a
 801939c:	d111      	bne.n	80193c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	685a      	ldr	r2, [r3, #4]
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80193ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	2222      	movs	r2, #34	; 0x22
 80193b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2228      	movs	r2, #40	; 0x28
 80193b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80193bc:	6878      	ldr	r0, [r7, #4]
 80193be:	f7ff f9af 	bl	8018720 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80193c2:	bf00      	nop
 80193c4:	3710      	adds	r7, #16
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}

080193ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80193ca:	b480      	push	{r7}
 80193cc:	b083      	sub	sp, #12
 80193ce:	af00      	add	r7, sp, #0
 80193d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193d6:	b29b      	uxth	r3, r3
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d012      	beq.n	8019402 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	691a      	ldr	r2, [r3, #16]
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193e6:	b2d2      	uxtb	r2, r2
 80193e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193ee:	1c5a      	adds	r2, r3, #1
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	3b01      	subs	r3, #1
 80193fc:	b29a      	uxth	r2, r3
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019402:	bf00      	nop
 8019404:	370c      	adds	r7, #12
 8019406:	46bd      	mov	sp, r7
 8019408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940c:	4770      	bx	lr

0801940e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801940e:	b580      	push	{r7, lr}
 8019410:	b084      	sub	sp, #16
 8019412:	af00      	add	r7, sp, #0
 8019414:	6078      	str	r0, [r7, #4]
 8019416:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8019418:	2300      	movs	r3, #0
 801941a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019422:	b2db      	uxtb	r3, r3
 8019424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019428:	2b28      	cmp	r3, #40	; 0x28
 801942a:	d127      	bne.n	801947c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	685a      	ldr	r2, [r3, #4]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801943a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801943c:	683b      	ldr	r3, [r7, #0]
 801943e:	089b      	lsrs	r3, r3, #2
 8019440:	f003 0301 	and.w	r3, r3, #1
 8019444:	2b00      	cmp	r3, #0
 8019446:	d101      	bne.n	801944c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8019448:	2301      	movs	r3, #1
 801944a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	09db      	lsrs	r3, r3, #7
 8019450:	f003 0301 	and.w	r3, r3, #1
 8019454:	2b00      	cmp	r3, #0
 8019456:	d103      	bne.n	8019460 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	68db      	ldr	r3, [r3, #12]
 801945c:	81bb      	strh	r3, [r7, #12]
 801945e:	e002      	b.n	8019466 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	699b      	ldr	r3, [r3, #24]
 8019464:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	2200      	movs	r2, #0
 801946a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801946e:	89ba      	ldrh	r2, [r7, #12]
 8019470:	7bfb      	ldrb	r3, [r7, #15]
 8019472:	4619      	mov	r1, r3
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	f7ff f95d 	bl	8018734 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801947a:	e008      	b.n	801948e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	f06f 0202 	mvn.w	r2, #2
 8019484:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	2200      	movs	r2, #0
 801948a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801948e:	bf00      	nop
 8019490:	3710      	adds	r7, #16
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
	...

08019498 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b084      	sub	sp, #16
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80194a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	685a      	ldr	r2, [r3, #4]
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80194b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80194b8:	2300      	movs	r3, #0
 80194ba:	60bb      	str	r3, [r7, #8]
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	695b      	ldr	r3, [r3, #20]
 80194c2:	60bb      	str	r3, [r7, #8]
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	681a      	ldr	r2, [r3, #0]
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	f042 0201 	orr.w	r2, r2, #1
 80194d2:	601a      	str	r2, [r3, #0]
 80194d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80194e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80194f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80194f4:	d172      	bne.n	80195dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80194f6:	7bfb      	ldrb	r3, [r7, #15]
 80194f8:	2b22      	cmp	r3, #34	; 0x22
 80194fa:	d002      	beq.n	8019502 <I2C_Slave_STOPF+0x6a>
 80194fc:	7bfb      	ldrb	r3, [r7, #15]
 80194fe:	2b2a      	cmp	r3, #42	; 0x2a
 8019500:	d135      	bne.n	801956e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	b29a      	uxth	r2, r3
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019514:	b29b      	uxth	r3, r3
 8019516:	2b00      	cmp	r3, #0
 8019518:	d005      	beq.n	8019526 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801951e:	f043 0204 	orr.w	r2, r3, #4
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	685a      	ldr	r2, [r3, #4]
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019534:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801953a:	4618      	mov	r0, r3
 801953c:	f7fe f87a 	bl	8017634 <HAL_DMA_GetState>
 8019540:	4603      	mov	r3, r0
 8019542:	2b01      	cmp	r3, #1
 8019544:	d049      	beq.n	80195da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801954a:	4a69      	ldr	r2, [pc, #420]	; (80196f0 <I2C_Slave_STOPF+0x258>)
 801954c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019552:	4618      	mov	r0, r3
 8019554:	f7fd fec2 	bl	80172dc <HAL_DMA_Abort_IT>
 8019558:	4603      	mov	r3, r0
 801955a:	2b00      	cmp	r3, #0
 801955c:	d03d      	beq.n	80195da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019564:	687a      	ldr	r2, [r7, #4]
 8019566:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019568:	4610      	mov	r0, r2
 801956a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801956c:	e035      	b.n	80195da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	685b      	ldr	r3, [r3, #4]
 8019576:	b29a      	uxth	r2, r3
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019580:	b29b      	uxth	r3, r3
 8019582:	2b00      	cmp	r3, #0
 8019584:	d005      	beq.n	8019592 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801958a:	f043 0204 	orr.w	r2, r3, #4
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	685a      	ldr	r2, [r3, #4]
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80195a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7fe f844 	bl	8017634 <HAL_DMA_GetState>
 80195ac:	4603      	mov	r3, r0
 80195ae:	2b01      	cmp	r3, #1
 80195b0:	d014      	beq.n	80195dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195b6:	4a4e      	ldr	r2, [pc, #312]	; (80196f0 <I2C_Slave_STOPF+0x258>)
 80195b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195be:	4618      	mov	r0, r3
 80195c0:	f7fd fe8c 	bl	80172dc <HAL_DMA_Abort_IT>
 80195c4:	4603      	mov	r3, r0
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d008      	beq.n	80195dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80195d4:	4610      	mov	r0, r2
 80195d6:	4798      	blx	r3
 80195d8:	e000      	b.n	80195dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80195da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d03e      	beq.n	8019664 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	695b      	ldr	r3, [r3, #20]
 80195ec:	f003 0304 	and.w	r3, r3, #4
 80195f0:	2b04      	cmp	r3, #4
 80195f2:	d112      	bne.n	801961a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	691a      	ldr	r2, [r3, #16]
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195fe:	b2d2      	uxtb	r2, r2
 8019600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019606:	1c5a      	adds	r2, r3, #1
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019610:	b29b      	uxth	r3, r3
 8019612:	3b01      	subs	r3, #1
 8019614:	b29a      	uxth	r2, r3
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	695b      	ldr	r3, [r3, #20]
 8019620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019624:	2b40      	cmp	r3, #64	; 0x40
 8019626:	d112      	bne.n	801964e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	691a      	ldr	r2, [r3, #16]
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019632:	b2d2      	uxtb	r2, r2
 8019634:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801963a:	1c5a      	adds	r2, r3, #1
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019644:	b29b      	uxth	r3, r3
 8019646:	3b01      	subs	r3, #1
 8019648:	b29a      	uxth	r2, r3
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019652:	b29b      	uxth	r3, r3
 8019654:	2b00      	cmp	r3, #0
 8019656:	d005      	beq.n	8019664 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801965c:	f043 0204 	orr.w	r2, r3, #4
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019668:	2b00      	cmp	r3, #0
 801966a:	d003      	beq.n	8019674 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f000 f8b3 	bl	80197d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8019672:	e039      	b.n	80196e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019674:	7bfb      	ldrb	r3, [r7, #15]
 8019676:	2b2a      	cmp	r3, #42	; 0x2a
 8019678:	d109      	bne.n	801968e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2200      	movs	r2, #0
 801967e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2228      	movs	r2, #40	; 0x28
 8019684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019688:	6878      	ldr	r0, [r7, #4]
 801968a:	f7ff f849 	bl	8018720 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019694:	b2db      	uxtb	r3, r3
 8019696:	2b28      	cmp	r3, #40	; 0x28
 8019698:	d111      	bne.n	80196be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	4a15      	ldr	r2, [pc, #84]	; (80196f4 <I2C_Slave_STOPF+0x25c>)
 801969e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2200      	movs	r2, #0
 80196a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	2220      	movs	r2, #32
 80196aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	2200      	movs	r2, #0
 80196b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80196b6:	6878      	ldr	r0, [r7, #4]
 80196b8:	f7ff f84a 	bl	8018750 <HAL_I2C_ListenCpltCallback>
}
 80196bc:	e014      	b.n	80196e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196c2:	2b22      	cmp	r3, #34	; 0x22
 80196c4:	d002      	beq.n	80196cc <I2C_Slave_STOPF+0x234>
 80196c6:	7bfb      	ldrb	r3, [r7, #15]
 80196c8:	2b22      	cmp	r3, #34	; 0x22
 80196ca:	d10d      	bne.n	80196e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2200      	movs	r2, #0
 80196d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	2220      	movs	r2, #32
 80196d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	2200      	movs	r2, #0
 80196de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80196e2:	6878      	ldr	r0, [r7, #4]
 80196e4:	f7ff f81c 	bl	8018720 <HAL_I2C_SlaveRxCpltCallback>
}
 80196e8:	bf00      	nop
 80196ea:	3710      	adds	r7, #16
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	08019c61 	.word	0x08019c61
 80196f4:	ffff0000 	.word	0xffff0000

080196f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b084      	sub	sp, #16
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019706:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801970c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	2b08      	cmp	r3, #8
 8019712:	d002      	beq.n	801971a <I2C_Slave_AF+0x22>
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	2b20      	cmp	r3, #32
 8019718:	d129      	bne.n	801976e <I2C_Slave_AF+0x76>
 801971a:	7bfb      	ldrb	r3, [r7, #15]
 801971c:	2b28      	cmp	r3, #40	; 0x28
 801971e:	d126      	bne.n	801976e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	4a2c      	ldr	r2, [pc, #176]	; (80197d4 <I2C_Slave_AF+0xdc>)
 8019724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	685a      	ldr	r2, [r3, #4]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019734:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801973e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	681a      	ldr	r2, [r3, #0]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801974e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	2200      	movs	r2, #0
 8019754:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	2220      	movs	r2, #32
 801975a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	2200      	movs	r2, #0
 8019762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019766:	6878      	ldr	r0, [r7, #4]
 8019768:	f7fe fff2 	bl	8018750 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801976c:	e02e      	b.n	80197cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801976e:	7bfb      	ldrb	r3, [r7, #15]
 8019770:	2b21      	cmp	r3, #33	; 0x21
 8019772:	d126      	bne.n	80197c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	4a17      	ldr	r2, [pc, #92]	; (80197d4 <I2C_Slave_AF+0xdc>)
 8019778:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	2221      	movs	r2, #33	; 0x21
 801977e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2220      	movs	r2, #32
 8019784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	2200      	movs	r2, #0
 801978c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	685a      	ldr	r2, [r3, #4]
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801979e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80197a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80197b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	f7fe ffa6 	bl	801870c <HAL_I2C_SlaveTxCpltCallback>
}
 80197c0:	e004      	b.n	80197cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80197ca:	615a      	str	r2, [r3, #20]
}
 80197cc:	bf00      	nop
 80197ce:	3710      	adds	r7, #16
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	ffff0000 	.word	0xffff0000

080197d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80197e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80197ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80197f0:	7bbb      	ldrb	r3, [r7, #14]
 80197f2:	2b10      	cmp	r3, #16
 80197f4:	d002      	beq.n	80197fc <I2C_ITError+0x24>
 80197f6:	7bbb      	ldrb	r3, [r7, #14]
 80197f8:	2b40      	cmp	r3, #64	; 0x40
 80197fa:	d10a      	bne.n	8019812 <I2C_ITError+0x3a>
 80197fc:	7bfb      	ldrb	r3, [r7, #15]
 80197fe:	2b22      	cmp	r3, #34	; 0x22
 8019800:	d107      	bne.n	8019812 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019810:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019812:	7bfb      	ldrb	r3, [r7, #15]
 8019814:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019818:	2b28      	cmp	r3, #40	; 0x28
 801981a:	d107      	bne.n	801982c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	2200      	movs	r2, #0
 8019820:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	2228      	movs	r2, #40	; 0x28
 8019826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801982a:	e015      	b.n	8019858 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	685b      	ldr	r3, [r3, #4]
 8019832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801983a:	d00a      	beq.n	8019852 <I2C_ITError+0x7a>
 801983c:	7bfb      	ldrb	r3, [r7, #15]
 801983e:	2b60      	cmp	r3, #96	; 0x60
 8019840:	d007      	beq.n	8019852 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	2220      	movs	r2, #32
 8019846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	2200      	movs	r2, #0
 801984e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	2200      	movs	r2, #0
 8019856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	685b      	ldr	r3, [r3, #4]
 801985e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019866:	d162      	bne.n	801992e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	685a      	ldr	r2, [r3, #4]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019876:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801987c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019880:	b2db      	uxtb	r3, r3
 8019882:	2b01      	cmp	r3, #1
 8019884:	d020      	beq.n	80198c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801988a:	4a6a      	ldr	r2, [pc, #424]	; (8019a34 <I2C_ITError+0x25c>)
 801988c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019892:	4618      	mov	r0, r3
 8019894:	f7fd fd22 	bl	80172dc <HAL_DMA_Abort_IT>
 8019898:	4603      	mov	r3, r0
 801989a:	2b00      	cmp	r3, #0
 801989c:	f000 8089 	beq.w	80199b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	681a      	ldr	r2, [r3, #0]
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	f022 0201 	bic.w	r2, r2, #1
 80198ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	2220      	movs	r2, #32
 80198b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198be:	687a      	ldr	r2, [r7, #4]
 80198c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80198c2:	4610      	mov	r0, r2
 80198c4:	4798      	blx	r3
 80198c6:	e074      	b.n	80199b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198cc:	4a59      	ldr	r2, [pc, #356]	; (8019a34 <I2C_ITError+0x25c>)
 80198ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d4:	4618      	mov	r0, r3
 80198d6:	f7fd fd01 	bl	80172dc <HAL_DMA_Abort_IT>
 80198da:	4603      	mov	r3, r0
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d068      	beq.n	80199b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	695b      	ldr	r3, [r3, #20]
 80198e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198ea:	2b40      	cmp	r3, #64	; 0x40
 80198ec:	d10b      	bne.n	8019906 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	691a      	ldr	r2, [r3, #16]
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198f8:	b2d2      	uxtb	r2, r2
 80198fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019900:	1c5a      	adds	r2, r3, #1
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	681a      	ldr	r2, [r3, #0]
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	f022 0201 	bic.w	r2, r2, #1
 8019914:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	2220      	movs	r2, #32
 801991a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019928:	4610      	mov	r0, r2
 801992a:	4798      	blx	r3
 801992c:	e041      	b.n	80199b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019934:	b2db      	uxtb	r3, r3
 8019936:	2b60      	cmp	r3, #96	; 0x60
 8019938:	d125      	bne.n	8019986 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	2220      	movs	r2, #32
 801993e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2200      	movs	r2, #0
 8019946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	695b      	ldr	r3, [r3, #20]
 801994e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019952:	2b40      	cmp	r3, #64	; 0x40
 8019954:	d10b      	bne.n	801996e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	691a      	ldr	r2, [r3, #16]
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019960:	b2d2      	uxtb	r2, r2
 8019962:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019968:	1c5a      	adds	r2, r3, #1
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	681a      	ldr	r2, [r3, #0]
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	f022 0201 	bic.w	r2, r2, #1
 801997c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f7fe ff0e 	bl	80187a0 <HAL_I2C_AbortCpltCallback>
 8019984:	e015      	b.n	80199b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	695b      	ldr	r3, [r3, #20]
 801998c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019990:	2b40      	cmp	r3, #64	; 0x40
 8019992:	d10b      	bne.n	80199ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	691a      	ldr	r2, [r3, #16]
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801999e:	b2d2      	uxtb	r2, r2
 80199a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199a6:	1c5a      	adds	r2, r3, #1
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80199ac:	6878      	ldr	r0, [r7, #4]
 80199ae:	f7fe feed 	bl	801878c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80199b8:	68bb      	ldr	r3, [r7, #8]
 80199ba:	f003 0301 	and.w	r3, r3, #1
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d10e      	bne.n	80199e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d109      	bne.n	80199e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80199cc:	68bb      	ldr	r3, [r7, #8]
 80199ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d104      	bne.n	80199e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d007      	beq.n	80199f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	685a      	ldr	r2, [r3, #4]
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80199ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80199f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199fc:	f003 0304 	and.w	r3, r3, #4
 8019a00:	2b04      	cmp	r3, #4
 8019a02:	d113      	bne.n	8019a2c <I2C_ITError+0x254>
 8019a04:	7bfb      	ldrb	r3, [r7, #15]
 8019a06:	2b28      	cmp	r3, #40	; 0x28
 8019a08:	d110      	bne.n	8019a2c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	4a0a      	ldr	r2, [pc, #40]	; (8019a38 <I2C_ITError+0x260>)
 8019a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	2200      	movs	r2, #0
 8019a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	2220      	movs	r2, #32
 8019a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	2200      	movs	r2, #0
 8019a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019a26:	6878      	ldr	r0, [r7, #4]
 8019a28:	f7fe fe92 	bl	8018750 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019a2c:	bf00      	nop
 8019a2e:	3710      	adds	r7, #16
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd80      	pop	{r7, pc}
 8019a34:	08019c61 	.word	0x08019c61
 8019a38:	ffff0000 	.word	0xffff0000

08019a3c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b086      	sub	sp, #24
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019a4a:	697b      	ldr	r3, [r7, #20]
 8019a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019a50:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019a58:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019a5a:	697b      	ldr	r3, [r7, #20]
 8019a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a5e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8019a60:	697b      	ldr	r3, [r7, #20]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	685a      	ldr	r2, [r3, #4]
 8019a66:	697b      	ldr	r3, [r7, #20]
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019a6e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d003      	beq.n	8019a80 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019a80:	697b      	ldr	r3, [r7, #20]
 8019a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d003      	beq.n	8019a90 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019a88:	697b      	ldr	r3, [r7, #20]
 8019a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8019a90:	7cfb      	ldrb	r3, [r7, #19]
 8019a92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8019a96:	2b21      	cmp	r3, #33	; 0x21
 8019a98:	d007      	beq.n	8019aaa <I2C_DMAXferCplt+0x6e>
 8019a9a:	7cfb      	ldrb	r3, [r7, #19]
 8019a9c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8019aa0:	2b22      	cmp	r3, #34	; 0x22
 8019aa2:	d131      	bne.n	8019b08 <I2C_DMAXferCplt+0xcc>
 8019aa4:	7cbb      	ldrb	r3, [r7, #18]
 8019aa6:	2b20      	cmp	r3, #32
 8019aa8:	d12e      	bne.n	8019b08 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019aaa:	697b      	ldr	r3, [r7, #20]
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	685a      	ldr	r2, [r3, #4]
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019ab8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8019aba:	697b      	ldr	r3, [r7, #20]
 8019abc:	2200      	movs	r2, #0
 8019abe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8019ac0:	7cfb      	ldrb	r3, [r7, #19]
 8019ac2:	2b29      	cmp	r3, #41	; 0x29
 8019ac4:	d10a      	bne.n	8019adc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	2221      	movs	r2, #33	; 0x21
 8019aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019acc:	697b      	ldr	r3, [r7, #20]
 8019ace:	2228      	movs	r2, #40	; 0x28
 8019ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019ad4:	6978      	ldr	r0, [r7, #20]
 8019ad6:	f7fe fe19 	bl	801870c <HAL_I2C_SlaveTxCpltCallback>
 8019ada:	e00c      	b.n	8019af6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8019adc:	7cfb      	ldrb	r3, [r7, #19]
 8019ade:	2b2a      	cmp	r3, #42	; 0x2a
 8019ae0:	d109      	bne.n	8019af6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	2222      	movs	r2, #34	; 0x22
 8019ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019ae8:	697b      	ldr	r3, [r7, #20]
 8019aea:	2228      	movs	r2, #40	; 0x28
 8019aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8019af0:	6978      	ldr	r0, [r7, #20]
 8019af2:	f7fe fe15 	bl	8018720 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8019af6:	697b      	ldr	r3, [r7, #20]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	685a      	ldr	r2, [r3, #4]
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8019b04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8019b06:	e06a      	b.n	8019bde <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d064      	beq.n	8019bde <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8019b14:	697b      	ldr	r3, [r7, #20]
 8019b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019b18:	b29b      	uxth	r3, r3
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d107      	bne.n	8019b2e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	681a      	ldr	r2, [r3, #0]
 8019b24:	697b      	ldr	r3, [r7, #20]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019b2c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8019b2e:	697b      	ldr	r3, [r7, #20]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	685a      	ldr	r2, [r3, #4]
 8019b34:	697b      	ldr	r3, [r7, #20]
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8019b3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019b44:	d009      	beq.n	8019b5a <I2C_DMAXferCplt+0x11e>
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	2b08      	cmp	r3, #8
 8019b4a:	d006      	beq.n	8019b5a <I2C_DMAXferCplt+0x11e>
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019b52:	d002      	beq.n	8019b5a <I2C_DMAXferCplt+0x11e>
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	2b20      	cmp	r3, #32
 8019b58:	d107      	bne.n	8019b6a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019b5a:	697b      	ldr	r3, [r7, #20]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	681a      	ldr	r2, [r3, #0]
 8019b60:	697b      	ldr	r3, [r7, #20]
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019b68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019b6a:	697b      	ldr	r3, [r7, #20]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	685a      	ldr	r2, [r3, #4]
 8019b70:	697b      	ldr	r3, [r7, #20]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019b78:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019b7a:	697b      	ldr	r3, [r7, #20]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	685a      	ldr	r2, [r3, #4]
 8019b80:	697b      	ldr	r3, [r7, #20]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019b88:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8019b8a:	697b      	ldr	r3, [r7, #20]
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d003      	beq.n	8019ba0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8019b98:	6978      	ldr	r0, [r7, #20]
 8019b9a:	f7fe fdf7 	bl	801878c <HAL_I2C_ErrorCallback>
}
 8019b9e:	e01e      	b.n	8019bde <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8019ba0:	697b      	ldr	r3, [r7, #20]
 8019ba2:	2220      	movs	r2, #32
 8019ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8019ba8:	697b      	ldr	r3, [r7, #20]
 8019baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	2b40      	cmp	r3, #64	; 0x40
 8019bb2:	d10a      	bne.n	8019bca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019bb4:	697b      	ldr	r3, [r7, #20]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8019bbc:	697b      	ldr	r3, [r7, #20]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8019bc2:	6978      	ldr	r0, [r7, #20]
 8019bc4:	f7fe fdd8 	bl	8018778 <HAL_I2C_MemRxCpltCallback>
}
 8019bc8:	e009      	b.n	8019bde <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019bca:	697b      	ldr	r3, [r7, #20]
 8019bcc:	2200      	movs	r2, #0
 8019bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8019bd2:	697b      	ldr	r3, [r7, #20]
 8019bd4:	2212      	movs	r2, #18
 8019bd6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8019bd8:	6978      	ldr	r0, [r7, #20]
 8019bda:	f7f5 f84b 	bl	800ec74 <HAL_I2C_MasterRxCpltCallback>
}
 8019bde:	bf00      	nop
 8019be0:	3718      	adds	r7, #24
 8019be2:	46bd      	mov	sp, r7
 8019be4:	bd80      	pop	{r7, pc}

08019be6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8019be6:	b580      	push	{r7, lr}
 8019be8:	b084      	sub	sp, #16
 8019bea:	af00      	add	r7, sp, #0
 8019bec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bf2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d003      	beq.n	8019c04 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c00:	2200      	movs	r2, #0
 8019c02:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d003      	beq.n	8019c14 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c10:	2200      	movs	r2, #0
 8019c12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8019c14:	6878      	ldr	r0, [r7, #4]
 8019c16:	f7fd fd1b 	bl	8017650 <HAL_DMA_GetError>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	2b02      	cmp	r3, #2
 8019c1e:	d01b      	beq.n	8019c58 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	681a      	ldr	r2, [r3, #0]
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019c2e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	2200      	movs	r2, #0
 8019c34:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	2220      	movs	r2, #32
 8019c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	2200      	movs	r2, #0
 8019c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c4a:	f043 0210 	orr.w	r2, r3, #16
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019c52:	68f8      	ldr	r0, [r7, #12]
 8019c54:	f7fe fd9a 	bl	801878c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019c58:	bf00      	nop
 8019c5a:	3710      	adds	r7, #16
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}

08019c60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b086      	sub	sp, #24
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019c68:	2300      	movs	r3, #0
 8019c6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019c72:	697b      	ldr	r3, [r7, #20]
 8019c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019c78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019c7a:	4b4b      	ldr	r3, [pc, #300]	; (8019da8 <I2C_DMAAbort+0x148>)
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	08db      	lsrs	r3, r3, #3
 8019c80:	4a4a      	ldr	r2, [pc, #296]	; (8019dac <I2C_DMAAbort+0x14c>)
 8019c82:	fba2 2303 	umull	r2, r3, r2, r3
 8019c86:	0a1a      	lsrs	r2, r3, #8
 8019c88:	4613      	mov	r3, r2
 8019c8a:	009b      	lsls	r3, r3, #2
 8019c8c:	4413      	add	r3, r2
 8019c8e:	00da      	lsls	r2, r3, #3
 8019c90:	1ad3      	subs	r3, r2, r3
 8019c92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d106      	bne.n	8019ca8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c9e:	f043 0220 	orr.w	r2, r3, #32
 8019ca2:	697b      	ldr	r3, [r7, #20]
 8019ca4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019ca6:	e00a      	b.n	8019cbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	3b01      	subs	r3, #1
 8019cac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cbc:	d0ea      	beq.n	8019c94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019cbe:	697b      	ldr	r3, [r7, #20]
 8019cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d003      	beq.n	8019cce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cca:	2200      	movs	r2, #0
 8019ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019cce:	697b      	ldr	r3, [r7, #20]
 8019cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d003      	beq.n	8019cde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cda:	2200      	movs	r2, #0
 8019cdc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	681a      	ldr	r2, [r3, #0]
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019cec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019cee:	697b      	ldr	r3, [r7, #20]
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d003      	beq.n	8019d04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019cfc:	697b      	ldr	r3, [r7, #20]
 8019cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d00:	2200      	movs	r2, #0
 8019d02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019d04:	697b      	ldr	r3, [r7, #20]
 8019d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d003      	beq.n	8019d14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019d0c:	697b      	ldr	r3, [r7, #20]
 8019d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d10:	2200      	movs	r2, #0
 8019d12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	681a      	ldr	r2, [r3, #0]
 8019d1a:	697b      	ldr	r3, [r7, #20]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	f022 0201 	bic.w	r2, r2, #1
 8019d22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019d24:	697b      	ldr	r3, [r7, #20]
 8019d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019d2a:	b2db      	uxtb	r3, r3
 8019d2c:	2b60      	cmp	r3, #96	; 0x60
 8019d2e:	d10e      	bne.n	8019d4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019d30:	697b      	ldr	r3, [r7, #20]
 8019d32:	2220      	movs	r2, #32
 8019d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019d38:	697b      	ldr	r3, [r7, #20]
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	2200      	movs	r2, #0
 8019d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019d46:	6978      	ldr	r0, [r7, #20]
 8019d48:	f7fe fd2a 	bl	80187a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019d4c:	e027      	b.n	8019d9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019d4e:	7cfb      	ldrb	r3, [r7, #19]
 8019d50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019d54:	2b28      	cmp	r3, #40	; 0x28
 8019d56:	d117      	bne.n	8019d88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019d58:	697b      	ldr	r3, [r7, #20]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	681a      	ldr	r2, [r3, #0]
 8019d5e:	697b      	ldr	r3, [r7, #20]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	f042 0201 	orr.w	r2, r2, #1
 8019d66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019d68:	697b      	ldr	r3, [r7, #20]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	681a      	ldr	r2, [r3, #0]
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019d76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019d7e:	697b      	ldr	r3, [r7, #20]
 8019d80:	2228      	movs	r2, #40	; 0x28
 8019d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019d86:	e007      	b.n	8019d98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	2220      	movs	r2, #32
 8019d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019d90:	697b      	ldr	r3, [r7, #20]
 8019d92:	2200      	movs	r2, #0
 8019d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019d98:	6978      	ldr	r0, [r7, #20]
 8019d9a:	f7fe fcf7 	bl	801878c <HAL_I2C_ErrorCallback>
}
 8019d9e:	bf00      	nop
 8019da0:	3718      	adds	r7, #24
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	20000054 	.word	0x20000054
 8019dac:	14f8b589 	.word	0x14f8b589

08019db0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8019db0:	b480      	push	{r7}
 8019db2:	b085      	sub	sp, #20
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019db8:	2300      	movs	r3, #0
 8019dba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8019dbc:	4b13      	ldr	r3, [pc, #76]	; (8019e0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	08db      	lsrs	r3, r3, #3
 8019dc2:	4a13      	ldr	r2, [pc, #76]	; (8019e10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8019dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8019dc8:	0a1a      	lsrs	r2, r3, #8
 8019dca:	4613      	mov	r3, r2
 8019dcc:	009b      	lsls	r3, r3, #2
 8019dce:	4413      	add	r3, r2
 8019dd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	3b01      	subs	r3, #1
 8019dd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d107      	bne.n	8019dee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019de2:	f043 0220 	orr.w	r2, r3, #32
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019dea:	2301      	movs	r3, #1
 8019dec:	e008      	b.n	8019e00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019dfc:	d0e9      	beq.n	8019dd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019dfe:	2300      	movs	r3, #0
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3714      	adds	r7, #20
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr
 8019e0c:	20000054 	.word	0x20000054
 8019e10:	14f8b589 	.word	0x14f8b589

08019e14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8019e14:	b480      	push	{r7}
 8019e16:	b083      	sub	sp, #12
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019e24:	d103      	bne.n	8019e2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	2201      	movs	r2, #1
 8019e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8019e2c:	e007      	b.n	8019e3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019e36:	d102      	bne.n	8019e3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2208      	movs	r2, #8
 8019e3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019e3e:	bf00      	nop
 8019e40:	370c      	adds	r7, #12
 8019e42:	46bd      	mov	sp, r7
 8019e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e48:	4770      	bx	lr
	...

08019e4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b086      	sub	sp, #24
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d101      	bne.n	8019e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8019e5a:	2301      	movs	r3, #1
 8019e5c:	e25b      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	f003 0301 	and.w	r3, r3, #1
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d075      	beq.n	8019f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019e6a:	4ba3      	ldr	r3, [pc, #652]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019e6c:	689b      	ldr	r3, [r3, #8]
 8019e6e:	f003 030c 	and.w	r3, r3, #12
 8019e72:	2b04      	cmp	r3, #4
 8019e74:	d00c      	beq.n	8019e90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019e76:	4ba0      	ldr	r3, [pc, #640]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019e78:	689b      	ldr	r3, [r3, #8]
 8019e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8019e7e:	2b08      	cmp	r3, #8
 8019e80:	d112      	bne.n	8019ea8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019e82:	4b9d      	ldr	r3, [pc, #628]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019e84:	685b      	ldr	r3, [r3, #4]
 8019e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019e8e:	d10b      	bne.n	8019ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019e90:	4b99      	ldr	r3, [pc, #612]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d05b      	beq.n	8019f54 <HAL_RCC_OscConfig+0x108>
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d157      	bne.n	8019f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	e236      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019eb0:	d106      	bne.n	8019ec0 <HAL_RCC_OscConfig+0x74>
 8019eb2:	4b91      	ldr	r3, [pc, #580]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	4a90      	ldr	r2, [pc, #576]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019ebc:	6013      	str	r3, [r2, #0]
 8019ebe:	e01d      	b.n	8019efc <HAL_RCC_OscConfig+0xb0>
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	685b      	ldr	r3, [r3, #4]
 8019ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019ec8:	d10c      	bne.n	8019ee4 <HAL_RCC_OscConfig+0x98>
 8019eca:	4b8b      	ldr	r3, [pc, #556]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ecc:	681b      	ldr	r3, [r3, #0]
 8019ece:	4a8a      	ldr	r2, [pc, #552]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019ed4:	6013      	str	r3, [r2, #0]
 8019ed6:	4b88      	ldr	r3, [pc, #544]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	4a87      	ldr	r2, [pc, #540]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019ee0:	6013      	str	r3, [r2, #0]
 8019ee2:	e00b      	b.n	8019efc <HAL_RCC_OscConfig+0xb0>
 8019ee4:	4b84      	ldr	r3, [pc, #528]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	4a83      	ldr	r2, [pc, #524]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019eee:	6013      	str	r3, [r2, #0]
 8019ef0:	4b81      	ldr	r3, [pc, #516]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	4a80      	ldr	r2, [pc, #512]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	685b      	ldr	r3, [r3, #4]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d013      	beq.n	8019f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f04:	f7fc f8ac 	bl	8016060 <HAL_GetTick>
 8019f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019f0a:	e008      	b.n	8019f1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019f0c:	f7fc f8a8 	bl	8016060 <HAL_GetTick>
 8019f10:	4602      	mov	r2, r0
 8019f12:	693b      	ldr	r3, [r7, #16]
 8019f14:	1ad3      	subs	r3, r2, r3
 8019f16:	2b64      	cmp	r3, #100	; 0x64
 8019f18:	d901      	bls.n	8019f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019f1a:	2303      	movs	r3, #3
 8019f1c:	e1fb      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019f1e:	4b76      	ldr	r3, [pc, #472]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d0f0      	beq.n	8019f0c <HAL_RCC_OscConfig+0xc0>
 8019f2a:	e014      	b.n	8019f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f2c:	f7fc f898 	bl	8016060 <HAL_GetTick>
 8019f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019f32:	e008      	b.n	8019f46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019f34:	f7fc f894 	bl	8016060 <HAL_GetTick>
 8019f38:	4602      	mov	r2, r0
 8019f3a:	693b      	ldr	r3, [r7, #16]
 8019f3c:	1ad3      	subs	r3, r2, r3
 8019f3e:	2b64      	cmp	r3, #100	; 0x64
 8019f40:	d901      	bls.n	8019f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019f42:	2303      	movs	r3, #3
 8019f44:	e1e7      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019f46:	4b6c      	ldr	r3, [pc, #432]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d1f0      	bne.n	8019f34 <HAL_RCC_OscConfig+0xe8>
 8019f52:	e000      	b.n	8019f56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	f003 0302 	and.w	r3, r3, #2
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d063      	beq.n	801a02a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019f62:	4b65      	ldr	r3, [pc, #404]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019f64:	689b      	ldr	r3, [r3, #8]
 8019f66:	f003 030c 	and.w	r3, r3, #12
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d00b      	beq.n	8019f86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019f6e:	4b62      	ldr	r3, [pc, #392]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019f70:	689b      	ldr	r3, [r3, #8]
 8019f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019f76:	2b08      	cmp	r3, #8
 8019f78:	d11c      	bne.n	8019fb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019f7a:	4b5f      	ldr	r3, [pc, #380]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019f7c:	685b      	ldr	r3, [r3, #4]
 8019f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d116      	bne.n	8019fb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019f86:	4b5c      	ldr	r3, [pc, #368]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	f003 0302 	and.w	r3, r3, #2
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d005      	beq.n	8019f9e <HAL_RCC_OscConfig+0x152>
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	68db      	ldr	r3, [r3, #12]
 8019f96:	2b01      	cmp	r3, #1
 8019f98:	d001      	beq.n	8019f9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8019f9a:	2301      	movs	r3, #1
 8019f9c:	e1bb      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019f9e:	4b56      	ldr	r3, [pc, #344]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	691b      	ldr	r3, [r3, #16]
 8019faa:	00db      	lsls	r3, r3, #3
 8019fac:	4952      	ldr	r1, [pc, #328]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019fae:	4313      	orrs	r3, r2
 8019fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019fb2:	e03a      	b.n	801a02a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	68db      	ldr	r3, [r3, #12]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d020      	beq.n	8019ffe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019fbc:	4b4f      	ldr	r3, [pc, #316]	; (801a0fc <HAL_RCC_OscConfig+0x2b0>)
 8019fbe:	2201      	movs	r2, #1
 8019fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019fc2:	f7fc f84d 	bl	8016060 <HAL_GetTick>
 8019fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019fc8:	e008      	b.n	8019fdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019fca:	f7fc f849 	bl	8016060 <HAL_GetTick>
 8019fce:	4602      	mov	r2, r0
 8019fd0:	693b      	ldr	r3, [r7, #16]
 8019fd2:	1ad3      	subs	r3, r2, r3
 8019fd4:	2b02      	cmp	r3, #2
 8019fd6:	d901      	bls.n	8019fdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019fd8:	2303      	movs	r3, #3
 8019fda:	e19c      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019fdc:	4b46      	ldr	r3, [pc, #280]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019fde:	681b      	ldr	r3, [r3, #0]
 8019fe0:	f003 0302 	and.w	r3, r3, #2
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d0f0      	beq.n	8019fca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019fe8:	4b43      	ldr	r3, [pc, #268]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	691b      	ldr	r3, [r3, #16]
 8019ff4:	00db      	lsls	r3, r3, #3
 8019ff6:	4940      	ldr	r1, [pc, #256]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 8019ff8:	4313      	orrs	r3, r2
 8019ffa:	600b      	str	r3, [r1, #0]
 8019ffc:	e015      	b.n	801a02a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019ffe:	4b3f      	ldr	r3, [pc, #252]	; (801a0fc <HAL_RCC_OscConfig+0x2b0>)
 801a000:	2200      	movs	r2, #0
 801a002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a004:	f7fc f82c 	bl	8016060 <HAL_GetTick>
 801a008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a00a:	e008      	b.n	801a01e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a00c:	f7fc f828 	bl	8016060 <HAL_GetTick>
 801a010:	4602      	mov	r2, r0
 801a012:	693b      	ldr	r3, [r7, #16]
 801a014:	1ad3      	subs	r3, r2, r3
 801a016:	2b02      	cmp	r3, #2
 801a018:	d901      	bls.n	801a01e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a01a:	2303      	movs	r3, #3
 801a01c:	e17b      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a01e:	4b36      	ldr	r3, [pc, #216]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	f003 0302 	and.w	r3, r3, #2
 801a026:	2b00      	cmp	r3, #0
 801a028:	d1f0      	bne.n	801a00c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	f003 0308 	and.w	r3, r3, #8
 801a032:	2b00      	cmp	r3, #0
 801a034:	d030      	beq.n	801a098 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	695b      	ldr	r3, [r3, #20]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d016      	beq.n	801a06c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a03e:	4b30      	ldr	r3, [pc, #192]	; (801a100 <HAL_RCC_OscConfig+0x2b4>)
 801a040:	2201      	movs	r2, #1
 801a042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a044:	f7fc f80c 	bl	8016060 <HAL_GetTick>
 801a048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a04a:	e008      	b.n	801a05e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a04c:	f7fc f808 	bl	8016060 <HAL_GetTick>
 801a050:	4602      	mov	r2, r0
 801a052:	693b      	ldr	r3, [r7, #16]
 801a054:	1ad3      	subs	r3, r2, r3
 801a056:	2b02      	cmp	r3, #2
 801a058:	d901      	bls.n	801a05e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a05a:	2303      	movs	r3, #3
 801a05c:	e15b      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a05e:	4b26      	ldr	r3, [pc, #152]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a062:	f003 0302 	and.w	r3, r3, #2
 801a066:	2b00      	cmp	r3, #0
 801a068:	d0f0      	beq.n	801a04c <HAL_RCC_OscConfig+0x200>
 801a06a:	e015      	b.n	801a098 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a06c:	4b24      	ldr	r3, [pc, #144]	; (801a100 <HAL_RCC_OscConfig+0x2b4>)
 801a06e:	2200      	movs	r2, #0
 801a070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a072:	f7fb fff5 	bl	8016060 <HAL_GetTick>
 801a076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a078:	e008      	b.n	801a08c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a07a:	f7fb fff1 	bl	8016060 <HAL_GetTick>
 801a07e:	4602      	mov	r2, r0
 801a080:	693b      	ldr	r3, [r7, #16]
 801a082:	1ad3      	subs	r3, r2, r3
 801a084:	2b02      	cmp	r3, #2
 801a086:	d901      	bls.n	801a08c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801a088:	2303      	movs	r3, #3
 801a08a:	e144      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a08c:	4b1a      	ldr	r3, [pc, #104]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a08e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a090:	f003 0302 	and.w	r3, r3, #2
 801a094:	2b00      	cmp	r3, #0
 801a096:	d1f0      	bne.n	801a07a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	f003 0304 	and.w	r3, r3, #4
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	f000 80a0 	beq.w	801a1e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a0aa:	4b13      	ldr	r3, [pc, #76]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d10f      	bne.n	801a0d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	60bb      	str	r3, [r7, #8]
 801a0ba:	4b0f      	ldr	r3, [pc, #60]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0be:	4a0e      	ldr	r2, [pc, #56]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a0c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a0c4:	6413      	str	r3, [r2, #64]	; 0x40
 801a0c6:	4b0c      	ldr	r3, [pc, #48]	; (801a0f8 <HAL_RCC_OscConfig+0x2ac>)
 801a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a0ce:	60bb      	str	r3, [r7, #8]
 801a0d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a0d2:	2301      	movs	r3, #1
 801a0d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a0d6:	4b0b      	ldr	r3, [pc, #44]	; (801a104 <HAL_RCC_OscConfig+0x2b8>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d121      	bne.n	801a126 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a0e2:	4b08      	ldr	r3, [pc, #32]	; (801a104 <HAL_RCC_OscConfig+0x2b8>)
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	4a07      	ldr	r2, [pc, #28]	; (801a104 <HAL_RCC_OscConfig+0x2b8>)
 801a0e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a0ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a0ee:	f7fb ffb7 	bl	8016060 <HAL_GetTick>
 801a0f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a0f4:	e011      	b.n	801a11a <HAL_RCC_OscConfig+0x2ce>
 801a0f6:	bf00      	nop
 801a0f8:	40023800 	.word	0x40023800
 801a0fc:	42470000 	.word	0x42470000
 801a100:	42470e80 	.word	0x42470e80
 801a104:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a108:	f7fb ffaa 	bl	8016060 <HAL_GetTick>
 801a10c:	4602      	mov	r2, r0
 801a10e:	693b      	ldr	r3, [r7, #16]
 801a110:	1ad3      	subs	r3, r2, r3
 801a112:	2b02      	cmp	r3, #2
 801a114:	d901      	bls.n	801a11a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801a116:	2303      	movs	r3, #3
 801a118:	e0fd      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a11a:	4b81      	ldr	r3, [pc, #516]	; (801a320 <HAL_RCC_OscConfig+0x4d4>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a122:	2b00      	cmp	r3, #0
 801a124:	d0f0      	beq.n	801a108 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	689b      	ldr	r3, [r3, #8]
 801a12a:	2b01      	cmp	r3, #1
 801a12c:	d106      	bne.n	801a13c <HAL_RCC_OscConfig+0x2f0>
 801a12e:	4b7d      	ldr	r3, [pc, #500]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a132:	4a7c      	ldr	r2, [pc, #496]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a134:	f043 0301 	orr.w	r3, r3, #1
 801a138:	6713      	str	r3, [r2, #112]	; 0x70
 801a13a:	e01c      	b.n	801a176 <HAL_RCC_OscConfig+0x32a>
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	689b      	ldr	r3, [r3, #8]
 801a140:	2b05      	cmp	r3, #5
 801a142:	d10c      	bne.n	801a15e <HAL_RCC_OscConfig+0x312>
 801a144:	4b77      	ldr	r3, [pc, #476]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a148:	4a76      	ldr	r2, [pc, #472]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a14a:	f043 0304 	orr.w	r3, r3, #4
 801a14e:	6713      	str	r3, [r2, #112]	; 0x70
 801a150:	4b74      	ldr	r3, [pc, #464]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a154:	4a73      	ldr	r2, [pc, #460]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a156:	f043 0301 	orr.w	r3, r3, #1
 801a15a:	6713      	str	r3, [r2, #112]	; 0x70
 801a15c:	e00b      	b.n	801a176 <HAL_RCC_OscConfig+0x32a>
 801a15e:	4b71      	ldr	r3, [pc, #452]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a162:	4a70      	ldr	r2, [pc, #448]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a164:	f023 0301 	bic.w	r3, r3, #1
 801a168:	6713      	str	r3, [r2, #112]	; 0x70
 801a16a:	4b6e      	ldr	r3, [pc, #440]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a16e:	4a6d      	ldr	r2, [pc, #436]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a170:	f023 0304 	bic.w	r3, r3, #4
 801a174:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	689b      	ldr	r3, [r3, #8]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d015      	beq.n	801a1aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a17e:	f7fb ff6f 	bl	8016060 <HAL_GetTick>
 801a182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a184:	e00a      	b.n	801a19c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a186:	f7fb ff6b 	bl	8016060 <HAL_GetTick>
 801a18a:	4602      	mov	r2, r0
 801a18c:	693b      	ldr	r3, [r7, #16]
 801a18e:	1ad3      	subs	r3, r2, r3
 801a190:	f241 3288 	movw	r2, #5000	; 0x1388
 801a194:	4293      	cmp	r3, r2
 801a196:	d901      	bls.n	801a19c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801a198:	2303      	movs	r3, #3
 801a19a:	e0bc      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a19c:	4b61      	ldr	r3, [pc, #388]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1a0:	f003 0302 	and.w	r3, r3, #2
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d0ee      	beq.n	801a186 <HAL_RCC_OscConfig+0x33a>
 801a1a8:	e014      	b.n	801a1d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a1aa:	f7fb ff59 	bl	8016060 <HAL_GetTick>
 801a1ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a1b0:	e00a      	b.n	801a1c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a1b2:	f7fb ff55 	bl	8016060 <HAL_GetTick>
 801a1b6:	4602      	mov	r2, r0
 801a1b8:	693b      	ldr	r3, [r7, #16]
 801a1ba:	1ad3      	subs	r3, r2, r3
 801a1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	d901      	bls.n	801a1c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801a1c4:	2303      	movs	r3, #3
 801a1c6:	e0a6      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a1c8:	4b56      	ldr	r3, [pc, #344]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1cc:	f003 0302 	and.w	r3, r3, #2
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1ee      	bne.n	801a1b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a1d4:	7dfb      	ldrb	r3, [r7, #23]
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d105      	bne.n	801a1e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a1da:	4b52      	ldr	r3, [pc, #328]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1de:	4a51      	ldr	r2, [pc, #324]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a1e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a1e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	699b      	ldr	r3, [r3, #24]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	f000 8092 	beq.w	801a314 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a1f0:	4b4c      	ldr	r3, [pc, #304]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a1f2:	689b      	ldr	r3, [r3, #8]
 801a1f4:	f003 030c 	and.w	r3, r3, #12
 801a1f8:	2b08      	cmp	r3, #8
 801a1fa:	d05c      	beq.n	801a2b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	699b      	ldr	r3, [r3, #24]
 801a200:	2b02      	cmp	r3, #2
 801a202:	d141      	bne.n	801a288 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a204:	4b48      	ldr	r3, [pc, #288]	; (801a328 <HAL_RCC_OscConfig+0x4dc>)
 801a206:	2200      	movs	r2, #0
 801a208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a20a:	f7fb ff29 	bl	8016060 <HAL_GetTick>
 801a20e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a210:	e008      	b.n	801a224 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a212:	f7fb ff25 	bl	8016060 <HAL_GetTick>
 801a216:	4602      	mov	r2, r0
 801a218:	693b      	ldr	r3, [r7, #16]
 801a21a:	1ad3      	subs	r3, r2, r3
 801a21c:	2b02      	cmp	r3, #2
 801a21e:	d901      	bls.n	801a224 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801a220:	2303      	movs	r3, #3
 801a222:	e078      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a224:	4b3f      	ldr	r3, [pc, #252]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d1f0      	bne.n	801a212 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	69da      	ldr	r2, [r3, #28]
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	6a1b      	ldr	r3, [r3, #32]
 801a238:	431a      	orrs	r2, r3
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a23e:	019b      	lsls	r3, r3, #6
 801a240:	431a      	orrs	r2, r3
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a246:	085b      	lsrs	r3, r3, #1
 801a248:	3b01      	subs	r3, #1
 801a24a:	041b      	lsls	r3, r3, #16
 801a24c:	431a      	orrs	r2, r3
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a252:	061b      	lsls	r3, r3, #24
 801a254:	4933      	ldr	r1, [pc, #204]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a256:	4313      	orrs	r3, r2
 801a258:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a25a:	4b33      	ldr	r3, [pc, #204]	; (801a328 <HAL_RCC_OscConfig+0x4dc>)
 801a25c:	2201      	movs	r2, #1
 801a25e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a260:	f7fb fefe 	bl	8016060 <HAL_GetTick>
 801a264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a266:	e008      	b.n	801a27a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a268:	f7fb fefa 	bl	8016060 <HAL_GetTick>
 801a26c:	4602      	mov	r2, r0
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	1ad3      	subs	r3, r2, r3
 801a272:	2b02      	cmp	r3, #2
 801a274:	d901      	bls.n	801a27a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801a276:	2303      	movs	r3, #3
 801a278:	e04d      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a27a:	4b2a      	ldr	r3, [pc, #168]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a282:	2b00      	cmp	r3, #0
 801a284:	d0f0      	beq.n	801a268 <HAL_RCC_OscConfig+0x41c>
 801a286:	e045      	b.n	801a314 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a288:	4b27      	ldr	r3, [pc, #156]	; (801a328 <HAL_RCC_OscConfig+0x4dc>)
 801a28a:	2200      	movs	r2, #0
 801a28c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a28e:	f7fb fee7 	bl	8016060 <HAL_GetTick>
 801a292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a294:	e008      	b.n	801a2a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a296:	f7fb fee3 	bl	8016060 <HAL_GetTick>
 801a29a:	4602      	mov	r2, r0
 801a29c:	693b      	ldr	r3, [r7, #16]
 801a29e:	1ad3      	subs	r3, r2, r3
 801a2a0:	2b02      	cmp	r3, #2
 801a2a2:	d901      	bls.n	801a2a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801a2a4:	2303      	movs	r3, #3
 801a2a6:	e036      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a2a8:	4b1e      	ldr	r3, [pc, #120]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d1f0      	bne.n	801a296 <HAL_RCC_OscConfig+0x44a>
 801a2b4:	e02e      	b.n	801a314 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	699b      	ldr	r3, [r3, #24]
 801a2ba:	2b01      	cmp	r3, #1
 801a2bc:	d101      	bne.n	801a2c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801a2be:	2301      	movs	r3, #1
 801a2c0:	e029      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a2c2:	4b18      	ldr	r3, [pc, #96]	; (801a324 <HAL_RCC_OscConfig+0x4d8>)
 801a2c4:	685b      	ldr	r3, [r3, #4]
 801a2c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	69db      	ldr	r3, [r3, #28]
 801a2d2:	429a      	cmp	r2, r3
 801a2d4:	d11c      	bne.n	801a310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801a2d6:	68fb      	ldr	r3, [r7, #12]
 801a2d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a2e0:	429a      	cmp	r2, r3
 801a2e2:	d115      	bne.n	801a310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801a2e4:	68fa      	ldr	r2, [r7, #12]
 801a2e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	687a      	ldr	r2, [r7, #4]
 801a2ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801a2f0:	4293      	cmp	r3, r2
 801a2f2:	d10d      	bne.n	801a310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801a2fe:	429a      	cmp	r2, r3
 801a300:	d106      	bne.n	801a310 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d001      	beq.n	801a314 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801a310:	2301      	movs	r3, #1
 801a312:	e000      	b.n	801a316 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801a314:	2300      	movs	r3, #0
}
 801a316:	4618      	mov	r0, r3
 801a318:	3718      	adds	r7, #24
 801a31a:	46bd      	mov	sp, r7
 801a31c:	bd80      	pop	{r7, pc}
 801a31e:	bf00      	nop
 801a320:	40007000 	.word	0x40007000
 801a324:	40023800 	.word	0x40023800
 801a328:	42470060 	.word	0x42470060

0801a32c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b084      	sub	sp, #16
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
 801a334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d101      	bne.n	801a340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a33c:	2301      	movs	r3, #1
 801a33e:	e0cc      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a340:	4b68      	ldr	r3, [pc, #416]	; (801a4e4 <HAL_RCC_ClockConfig+0x1b8>)
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	f003 030f 	and.w	r3, r3, #15
 801a348:	683a      	ldr	r2, [r7, #0]
 801a34a:	429a      	cmp	r2, r3
 801a34c:	d90c      	bls.n	801a368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a34e:	4b65      	ldr	r3, [pc, #404]	; (801a4e4 <HAL_RCC_ClockConfig+0x1b8>)
 801a350:	683a      	ldr	r2, [r7, #0]
 801a352:	b2d2      	uxtb	r2, r2
 801a354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a356:	4b63      	ldr	r3, [pc, #396]	; (801a4e4 <HAL_RCC_ClockConfig+0x1b8>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	f003 030f 	and.w	r3, r3, #15
 801a35e:	683a      	ldr	r2, [r7, #0]
 801a360:	429a      	cmp	r2, r3
 801a362:	d001      	beq.n	801a368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a364:	2301      	movs	r3, #1
 801a366:	e0b8      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	f003 0302 	and.w	r3, r3, #2
 801a370:	2b00      	cmp	r3, #0
 801a372:	d020      	beq.n	801a3b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	f003 0304 	and.w	r3, r3, #4
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d005      	beq.n	801a38c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a380:	4b59      	ldr	r3, [pc, #356]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a382:	689b      	ldr	r3, [r3, #8]
 801a384:	4a58      	ldr	r2, [pc, #352]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a38a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	f003 0308 	and.w	r3, r3, #8
 801a394:	2b00      	cmp	r3, #0
 801a396:	d005      	beq.n	801a3a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a398:	4b53      	ldr	r3, [pc, #332]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a39a:	689b      	ldr	r3, [r3, #8]
 801a39c:	4a52      	ldr	r2, [pc, #328]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a39e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a3a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a3a4:	4b50      	ldr	r3, [pc, #320]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a3a6:	689b      	ldr	r3, [r3, #8]
 801a3a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	689b      	ldr	r3, [r3, #8]
 801a3b0:	494d      	ldr	r1, [pc, #308]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a3b2:	4313      	orrs	r3, r2
 801a3b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	f003 0301 	and.w	r3, r3, #1
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d044      	beq.n	801a44c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	685b      	ldr	r3, [r3, #4]
 801a3c6:	2b01      	cmp	r3, #1
 801a3c8:	d107      	bne.n	801a3da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a3ca:	4b47      	ldr	r3, [pc, #284]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d119      	bne.n	801a40a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a3d6:	2301      	movs	r3, #1
 801a3d8:	e07f      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	685b      	ldr	r3, [r3, #4]
 801a3de:	2b02      	cmp	r3, #2
 801a3e0:	d003      	beq.n	801a3ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a3e6:	2b03      	cmp	r3, #3
 801a3e8:	d107      	bne.n	801a3fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a3ea:	4b3f      	ldr	r3, [pc, #252]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d109      	bne.n	801a40a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	e06f      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a3fa:	4b3b      	ldr	r3, [pc, #236]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	f003 0302 	and.w	r3, r3, #2
 801a402:	2b00      	cmp	r3, #0
 801a404:	d101      	bne.n	801a40a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a406:	2301      	movs	r3, #1
 801a408:	e067      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a40a:	4b37      	ldr	r3, [pc, #220]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a40c:	689b      	ldr	r3, [r3, #8]
 801a40e:	f023 0203 	bic.w	r2, r3, #3
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	4934      	ldr	r1, [pc, #208]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a418:	4313      	orrs	r3, r2
 801a41a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a41c:	f7fb fe20 	bl	8016060 <HAL_GetTick>
 801a420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a422:	e00a      	b.n	801a43a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a424:	f7fb fe1c 	bl	8016060 <HAL_GetTick>
 801a428:	4602      	mov	r2, r0
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	1ad3      	subs	r3, r2, r3
 801a42e:	f241 3288 	movw	r2, #5000	; 0x1388
 801a432:	4293      	cmp	r3, r2
 801a434:	d901      	bls.n	801a43a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801a436:	2303      	movs	r3, #3
 801a438:	e04f      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801a43a:	4b2b      	ldr	r3, [pc, #172]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a43c:	689b      	ldr	r3, [r3, #8]
 801a43e:	f003 020c 	and.w	r2, r3, #12
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	009b      	lsls	r3, r3, #2
 801a448:	429a      	cmp	r2, r3
 801a44a:	d1eb      	bne.n	801a424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a44c:	4b25      	ldr	r3, [pc, #148]	; (801a4e4 <HAL_RCC_ClockConfig+0x1b8>)
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f003 030f 	and.w	r3, r3, #15
 801a454:	683a      	ldr	r2, [r7, #0]
 801a456:	429a      	cmp	r2, r3
 801a458:	d20c      	bcs.n	801a474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a45a:	4b22      	ldr	r3, [pc, #136]	; (801a4e4 <HAL_RCC_ClockConfig+0x1b8>)
 801a45c:	683a      	ldr	r2, [r7, #0]
 801a45e:	b2d2      	uxtb	r2, r2
 801a460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a462:	4b20      	ldr	r3, [pc, #128]	; (801a4e4 <HAL_RCC_ClockConfig+0x1b8>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	f003 030f 	and.w	r3, r3, #15
 801a46a:	683a      	ldr	r2, [r7, #0]
 801a46c:	429a      	cmp	r2, r3
 801a46e:	d001      	beq.n	801a474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801a470:	2301      	movs	r3, #1
 801a472:	e032      	b.n	801a4da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	f003 0304 	and.w	r3, r3, #4
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d008      	beq.n	801a492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a480:	4b19      	ldr	r3, [pc, #100]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a482:	689b      	ldr	r3, [r3, #8]
 801a484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	68db      	ldr	r3, [r3, #12]
 801a48c:	4916      	ldr	r1, [pc, #88]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a48e:	4313      	orrs	r3, r2
 801a490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	f003 0308 	and.w	r3, r3, #8
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d009      	beq.n	801a4b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801a49e:	4b12      	ldr	r3, [pc, #72]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a4a0:	689b      	ldr	r3, [r3, #8]
 801a4a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	691b      	ldr	r3, [r3, #16]
 801a4aa:	00db      	lsls	r3, r3, #3
 801a4ac:	490e      	ldr	r1, [pc, #56]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a4ae:	4313      	orrs	r3, r2
 801a4b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a4b2:	f000 f82d 	bl	801a510 <HAL_RCC_GetSysClockFreq>
 801a4b6:	4602      	mov	r2, r0
 801a4b8:	4b0b      	ldr	r3, [pc, #44]	; (801a4e8 <HAL_RCC_ClockConfig+0x1bc>)
 801a4ba:	689b      	ldr	r3, [r3, #8]
 801a4bc:	091b      	lsrs	r3, r3, #4
 801a4be:	f003 030f 	and.w	r3, r3, #15
 801a4c2:	490a      	ldr	r1, [pc, #40]	; (801a4ec <HAL_RCC_ClockConfig+0x1c0>)
 801a4c4:	5ccb      	ldrb	r3, [r1, r3]
 801a4c6:	fa22 f303 	lsr.w	r3, r2, r3
 801a4ca:	4a09      	ldr	r2, [pc, #36]	; (801a4f0 <HAL_RCC_ClockConfig+0x1c4>)
 801a4cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a4ce:	4b09      	ldr	r3, [pc, #36]	; (801a4f4 <HAL_RCC_ClockConfig+0x1c8>)
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	f7f4 fc0a 	bl	800ecec <HAL_InitTick>

  return HAL_OK;
 801a4d8:	2300      	movs	r3, #0
}
 801a4da:	4618      	mov	r0, r3
 801a4dc:	3710      	adds	r7, #16
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bd80      	pop	{r7, pc}
 801a4e2:	bf00      	nop
 801a4e4:	40023c00 	.word	0x40023c00
 801a4e8:	40023800 	.word	0x40023800
 801a4ec:	08025b28 	.word	0x08025b28
 801a4f0:	20000054 	.word	0x20000054
 801a4f4:	200000b8 	.word	0x200000b8

0801a4f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 801a4fc:	4b03      	ldr	r3, [pc, #12]	; (801a50c <HAL_RCC_EnableCSS+0x14>)
 801a4fe:	2201      	movs	r2, #1
 801a500:	601a      	str	r2, [r3, #0]
}
 801a502:	bf00      	nop
 801a504:	46bd      	mov	sp, r7
 801a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50a:	4770      	bx	lr
 801a50c:	4247004c 	.word	0x4247004c

0801a510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a514:	b084      	sub	sp, #16
 801a516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a518:	2300      	movs	r3, #0
 801a51a:	607b      	str	r3, [r7, #4]
 801a51c:	2300      	movs	r3, #0
 801a51e:	60fb      	str	r3, [r7, #12]
 801a520:	2300      	movs	r3, #0
 801a522:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801a524:	2300      	movs	r3, #0
 801a526:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a528:	4b67      	ldr	r3, [pc, #412]	; (801a6c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a52a:	689b      	ldr	r3, [r3, #8]
 801a52c:	f003 030c 	and.w	r3, r3, #12
 801a530:	2b08      	cmp	r3, #8
 801a532:	d00d      	beq.n	801a550 <HAL_RCC_GetSysClockFreq+0x40>
 801a534:	2b08      	cmp	r3, #8
 801a536:	f200 80bd 	bhi.w	801a6b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d002      	beq.n	801a544 <HAL_RCC_GetSysClockFreq+0x34>
 801a53e:	2b04      	cmp	r3, #4
 801a540:	d003      	beq.n	801a54a <HAL_RCC_GetSysClockFreq+0x3a>
 801a542:	e0b7      	b.n	801a6b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a544:	4b61      	ldr	r3, [pc, #388]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 801a546:	60bb      	str	r3, [r7, #8]
       break;
 801a548:	e0b7      	b.n	801a6ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a54a:	4b61      	ldr	r3, [pc, #388]	; (801a6d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 801a54c:	60bb      	str	r3, [r7, #8]
      break;
 801a54e:	e0b4      	b.n	801a6ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a550:	4b5d      	ldr	r3, [pc, #372]	; (801a6c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a552:	685b      	ldr	r3, [r3, #4]
 801a554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a558:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a55a:	4b5b      	ldr	r3, [pc, #364]	; (801a6c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a562:	2b00      	cmp	r3, #0
 801a564:	d04d      	beq.n	801a602 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a566:	4b58      	ldr	r3, [pc, #352]	; (801a6c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a568:	685b      	ldr	r3, [r3, #4]
 801a56a:	099b      	lsrs	r3, r3, #6
 801a56c:	461a      	mov	r2, r3
 801a56e:	f04f 0300 	mov.w	r3, #0
 801a572:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a576:	f04f 0100 	mov.w	r1, #0
 801a57a:	ea02 0800 	and.w	r8, r2, r0
 801a57e:	ea03 0901 	and.w	r9, r3, r1
 801a582:	4640      	mov	r0, r8
 801a584:	4649      	mov	r1, r9
 801a586:	f04f 0200 	mov.w	r2, #0
 801a58a:	f04f 0300 	mov.w	r3, #0
 801a58e:	014b      	lsls	r3, r1, #5
 801a590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801a594:	0142      	lsls	r2, r0, #5
 801a596:	4610      	mov	r0, r2
 801a598:	4619      	mov	r1, r3
 801a59a:	ebb0 0008 	subs.w	r0, r0, r8
 801a59e:	eb61 0109 	sbc.w	r1, r1, r9
 801a5a2:	f04f 0200 	mov.w	r2, #0
 801a5a6:	f04f 0300 	mov.w	r3, #0
 801a5aa:	018b      	lsls	r3, r1, #6
 801a5ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801a5b0:	0182      	lsls	r2, r0, #6
 801a5b2:	1a12      	subs	r2, r2, r0
 801a5b4:	eb63 0301 	sbc.w	r3, r3, r1
 801a5b8:	f04f 0000 	mov.w	r0, #0
 801a5bc:	f04f 0100 	mov.w	r1, #0
 801a5c0:	00d9      	lsls	r1, r3, #3
 801a5c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a5c6:	00d0      	lsls	r0, r2, #3
 801a5c8:	4602      	mov	r2, r0
 801a5ca:	460b      	mov	r3, r1
 801a5cc:	eb12 0208 	adds.w	r2, r2, r8
 801a5d0:	eb43 0309 	adc.w	r3, r3, r9
 801a5d4:	f04f 0000 	mov.w	r0, #0
 801a5d8:	f04f 0100 	mov.w	r1, #0
 801a5dc:	0259      	lsls	r1, r3, #9
 801a5de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801a5e2:	0250      	lsls	r0, r2, #9
 801a5e4:	4602      	mov	r2, r0
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	4610      	mov	r0, r2
 801a5ea:	4619      	mov	r1, r3
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	461a      	mov	r2, r3
 801a5f0:	f04f 0300 	mov.w	r3, #0
 801a5f4:	f7e6 fb48 	bl	8000c88 <__aeabi_uldivmod>
 801a5f8:	4602      	mov	r2, r0
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	4613      	mov	r3, r2
 801a5fe:	60fb      	str	r3, [r7, #12]
 801a600:	e04a      	b.n	801a698 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a602:	4b31      	ldr	r3, [pc, #196]	; (801a6c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a604:	685b      	ldr	r3, [r3, #4]
 801a606:	099b      	lsrs	r3, r3, #6
 801a608:	461a      	mov	r2, r3
 801a60a:	f04f 0300 	mov.w	r3, #0
 801a60e:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a612:	f04f 0100 	mov.w	r1, #0
 801a616:	ea02 0400 	and.w	r4, r2, r0
 801a61a:	ea03 0501 	and.w	r5, r3, r1
 801a61e:	4620      	mov	r0, r4
 801a620:	4629      	mov	r1, r5
 801a622:	f04f 0200 	mov.w	r2, #0
 801a626:	f04f 0300 	mov.w	r3, #0
 801a62a:	014b      	lsls	r3, r1, #5
 801a62c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801a630:	0142      	lsls	r2, r0, #5
 801a632:	4610      	mov	r0, r2
 801a634:	4619      	mov	r1, r3
 801a636:	1b00      	subs	r0, r0, r4
 801a638:	eb61 0105 	sbc.w	r1, r1, r5
 801a63c:	f04f 0200 	mov.w	r2, #0
 801a640:	f04f 0300 	mov.w	r3, #0
 801a644:	018b      	lsls	r3, r1, #6
 801a646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801a64a:	0182      	lsls	r2, r0, #6
 801a64c:	1a12      	subs	r2, r2, r0
 801a64e:	eb63 0301 	sbc.w	r3, r3, r1
 801a652:	f04f 0000 	mov.w	r0, #0
 801a656:	f04f 0100 	mov.w	r1, #0
 801a65a:	00d9      	lsls	r1, r3, #3
 801a65c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a660:	00d0      	lsls	r0, r2, #3
 801a662:	4602      	mov	r2, r0
 801a664:	460b      	mov	r3, r1
 801a666:	1912      	adds	r2, r2, r4
 801a668:	eb45 0303 	adc.w	r3, r5, r3
 801a66c:	f04f 0000 	mov.w	r0, #0
 801a670:	f04f 0100 	mov.w	r1, #0
 801a674:	0299      	lsls	r1, r3, #10
 801a676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801a67a:	0290      	lsls	r0, r2, #10
 801a67c:	4602      	mov	r2, r0
 801a67e:	460b      	mov	r3, r1
 801a680:	4610      	mov	r0, r2
 801a682:	4619      	mov	r1, r3
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	461a      	mov	r2, r3
 801a688:	f04f 0300 	mov.w	r3, #0
 801a68c:	f7e6 fafc 	bl	8000c88 <__aeabi_uldivmod>
 801a690:	4602      	mov	r2, r0
 801a692:	460b      	mov	r3, r1
 801a694:	4613      	mov	r3, r2
 801a696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a698:	4b0b      	ldr	r3, [pc, #44]	; (801a6c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	0c1b      	lsrs	r3, r3, #16
 801a69e:	f003 0303 	and.w	r3, r3, #3
 801a6a2:	3301      	adds	r3, #1
 801a6a4:	005b      	lsls	r3, r3, #1
 801a6a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801a6a8:	68fa      	ldr	r2, [r7, #12]
 801a6aa:	683b      	ldr	r3, [r7, #0]
 801a6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6b0:	60bb      	str	r3, [r7, #8]
      break;
 801a6b2:	e002      	b.n	801a6ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a6b4:	4b05      	ldr	r3, [pc, #20]	; (801a6cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 801a6b6:	60bb      	str	r3, [r7, #8]
      break;
 801a6b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a6ba:	68bb      	ldr	r3, [r7, #8]
}
 801a6bc:	4618      	mov	r0, r3
 801a6be:	3710      	adds	r7, #16
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a6c6:	bf00      	nop
 801a6c8:	40023800 	.word	0x40023800
 801a6cc:	00f42400 	.word	0x00f42400
 801a6d0:	007a1200 	.word	0x007a1200

0801a6d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a6d4:	b480      	push	{r7}
 801a6d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a6d8:	4b03      	ldr	r3, [pc, #12]	; (801a6e8 <HAL_RCC_GetHCLKFreq+0x14>)
 801a6da:	681b      	ldr	r3, [r3, #0]
}
 801a6dc:	4618      	mov	r0, r3
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e4:	4770      	bx	lr
 801a6e6:	bf00      	nop
 801a6e8:	20000054 	.word	0x20000054

0801a6ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a6f0:	f7ff fff0 	bl	801a6d4 <HAL_RCC_GetHCLKFreq>
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	4b05      	ldr	r3, [pc, #20]	; (801a70c <HAL_RCC_GetPCLK1Freq+0x20>)
 801a6f8:	689b      	ldr	r3, [r3, #8]
 801a6fa:	0a9b      	lsrs	r3, r3, #10
 801a6fc:	f003 0307 	and.w	r3, r3, #7
 801a700:	4903      	ldr	r1, [pc, #12]	; (801a710 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a702:	5ccb      	ldrb	r3, [r1, r3]
 801a704:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a708:	4618      	mov	r0, r3
 801a70a:	bd80      	pop	{r7, pc}
 801a70c:	40023800 	.word	0x40023800
 801a710:	08025b38 	.word	0x08025b38

0801a714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a714:	b580      	push	{r7, lr}
 801a716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a718:	f7ff ffdc 	bl	801a6d4 <HAL_RCC_GetHCLKFreq>
 801a71c:	4602      	mov	r2, r0
 801a71e:	4b05      	ldr	r3, [pc, #20]	; (801a734 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a720:	689b      	ldr	r3, [r3, #8]
 801a722:	0b5b      	lsrs	r3, r3, #13
 801a724:	f003 0307 	and.w	r3, r3, #7
 801a728:	4903      	ldr	r1, [pc, #12]	; (801a738 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a72a:	5ccb      	ldrb	r3, [r1, r3]
 801a72c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a730:	4618      	mov	r0, r3
 801a732:	bd80      	pop	{r7, pc}
 801a734:	40023800 	.word	0x40023800
 801a738:	08025b38 	.word	0x08025b38

0801a73c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801a73c:	b480      	push	{r7}
 801a73e:	b083      	sub	sp, #12
 801a740:	af00      	add	r7, sp, #0
 801a742:	6078      	str	r0, [r7, #4]
 801a744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	220f      	movs	r2, #15
 801a74a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801a74c:	4b12      	ldr	r3, [pc, #72]	; (801a798 <HAL_RCC_GetClockConfig+0x5c>)
 801a74e:	689b      	ldr	r3, [r3, #8]
 801a750:	f003 0203 	and.w	r2, r3, #3
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801a758:	4b0f      	ldr	r3, [pc, #60]	; (801a798 <HAL_RCC_GetClockConfig+0x5c>)
 801a75a:	689b      	ldr	r3, [r3, #8]
 801a75c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801a764:	4b0c      	ldr	r3, [pc, #48]	; (801a798 <HAL_RCC_GetClockConfig+0x5c>)
 801a766:	689b      	ldr	r3, [r3, #8]
 801a768:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801a770:	4b09      	ldr	r3, [pc, #36]	; (801a798 <HAL_RCC_GetClockConfig+0x5c>)
 801a772:	689b      	ldr	r3, [r3, #8]
 801a774:	08db      	lsrs	r3, r3, #3
 801a776:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801a77e:	4b07      	ldr	r3, [pc, #28]	; (801a79c <HAL_RCC_GetClockConfig+0x60>)
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	f003 020f 	and.w	r2, r3, #15
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	601a      	str	r2, [r3, #0]
}
 801a78a:	bf00      	nop
 801a78c:	370c      	adds	r7, #12
 801a78e:	46bd      	mov	sp, r7
 801a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a794:	4770      	bx	lr
 801a796:	bf00      	nop
 801a798:	40023800 	.word	0x40023800
 801a79c:	40023c00 	.word	0x40023c00

0801a7a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b088      	sub	sp, #32
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	685b      	ldr	r3, [r3, #4]
 801a7ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	689b      	ldr	r3, [r3, #8]
 801a7b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801a7b8:	69bb      	ldr	r3, [r7, #24]
 801a7ba:	099b      	lsrs	r3, r3, #6
 801a7bc:	f003 0301 	and.w	r3, r3, #1
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d10f      	bne.n	801a7e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801a7c4:	69bb      	ldr	r3, [r7, #24]
 801a7c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d00a      	beq.n	801a7e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801a7ce:	69fb      	ldr	r3, [r7, #28]
 801a7d0:	099b      	lsrs	r3, r3, #6
 801a7d2:	f003 0301 	and.w	r3, r3, #1
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d004      	beq.n	801a7e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	4798      	blx	r3
    return;
 801a7e2:	e0d7      	b.n	801a994 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801a7e4:	69bb      	ldr	r3, [r7, #24]
 801a7e6:	085b      	lsrs	r3, r3, #1
 801a7e8:	f003 0301 	and.w	r3, r3, #1
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d00a      	beq.n	801a806 <HAL_SPI_IRQHandler+0x66>
 801a7f0:	69fb      	ldr	r3, [r7, #28]
 801a7f2:	09db      	lsrs	r3, r3, #7
 801a7f4:	f003 0301 	and.w	r3, r3, #1
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d004      	beq.n	801a806 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a800:	6878      	ldr	r0, [r7, #4]
 801a802:	4798      	blx	r3
    return;
 801a804:	e0c6      	b.n	801a994 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801a806:	69bb      	ldr	r3, [r7, #24]
 801a808:	095b      	lsrs	r3, r3, #5
 801a80a:	f003 0301 	and.w	r3, r3, #1
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d10c      	bne.n	801a82c <HAL_SPI_IRQHandler+0x8c>
 801a812:	69bb      	ldr	r3, [r7, #24]
 801a814:	099b      	lsrs	r3, r3, #6
 801a816:	f003 0301 	and.w	r3, r3, #1
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d106      	bne.n	801a82c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801a81e:	69bb      	ldr	r3, [r7, #24]
 801a820:	0a1b      	lsrs	r3, r3, #8
 801a822:	f003 0301 	and.w	r3, r3, #1
 801a826:	2b00      	cmp	r3, #0
 801a828:	f000 80b4 	beq.w	801a994 <HAL_SPI_IRQHandler+0x1f4>
 801a82c:	69fb      	ldr	r3, [r7, #28]
 801a82e:	095b      	lsrs	r3, r3, #5
 801a830:	f003 0301 	and.w	r3, r3, #1
 801a834:	2b00      	cmp	r3, #0
 801a836:	f000 80ad 	beq.w	801a994 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801a83a:	69bb      	ldr	r3, [r7, #24]
 801a83c:	099b      	lsrs	r3, r3, #6
 801a83e:	f003 0301 	and.w	r3, r3, #1
 801a842:	2b00      	cmp	r3, #0
 801a844:	d023      	beq.n	801a88e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	2b03      	cmp	r3, #3
 801a850:	d011      	beq.n	801a876 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a856:	f043 0204 	orr.w	r2, r3, #4
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a85e:	2300      	movs	r3, #0
 801a860:	617b      	str	r3, [r7, #20]
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	68db      	ldr	r3, [r3, #12]
 801a868:	617b      	str	r3, [r7, #20]
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	689b      	ldr	r3, [r3, #8]
 801a870:	617b      	str	r3, [r7, #20]
 801a872:	697b      	ldr	r3, [r7, #20]
 801a874:	e00b      	b.n	801a88e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a876:	2300      	movs	r3, #0
 801a878:	613b      	str	r3, [r7, #16]
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	68db      	ldr	r3, [r3, #12]
 801a880:	613b      	str	r3, [r7, #16]
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	689b      	ldr	r3, [r3, #8]
 801a888:	613b      	str	r3, [r7, #16]
 801a88a:	693b      	ldr	r3, [r7, #16]
        return;
 801a88c:	e082      	b.n	801a994 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801a88e:	69bb      	ldr	r3, [r7, #24]
 801a890:	095b      	lsrs	r3, r3, #5
 801a892:	f003 0301 	and.w	r3, r3, #1
 801a896:	2b00      	cmp	r3, #0
 801a898:	d014      	beq.n	801a8c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a89e:	f043 0201 	orr.w	r2, r3, #1
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	60fb      	str	r3, [r7, #12]
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	689b      	ldr	r3, [r3, #8]
 801a8b0:	60fb      	str	r3, [r7, #12]
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	681a      	ldr	r2, [r3, #0]
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a8c0:	601a      	str	r2, [r3, #0]
 801a8c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801a8c4:	69bb      	ldr	r3, [r7, #24]
 801a8c6:	0a1b      	lsrs	r3, r3, #8
 801a8c8:	f003 0301 	and.w	r3, r3, #1
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d00c      	beq.n	801a8ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a8d4:	f043 0208 	orr.w	r2, r3, #8
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801a8dc:	2300      	movs	r3, #0
 801a8de:	60bb      	str	r3, [r7, #8]
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	689b      	ldr	r3, [r3, #8]
 801a8e6:	60bb      	str	r3, [r7, #8]
 801a8e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d04f      	beq.n	801a992 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	685a      	ldr	r2, [r3, #4]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a900:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	2201      	movs	r2, #1
 801a906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801a90a:	69fb      	ldr	r3, [r7, #28]
 801a90c:	f003 0302 	and.w	r3, r3, #2
 801a910:	2b00      	cmp	r3, #0
 801a912:	d104      	bne.n	801a91e <HAL_SPI_IRQHandler+0x17e>
 801a914:	69fb      	ldr	r3, [r7, #28]
 801a916:	f003 0301 	and.w	r3, r3, #1
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d034      	beq.n	801a988 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	685a      	ldr	r2, [r3, #4]
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	f022 0203 	bic.w	r2, r2, #3
 801a92c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a932:	2b00      	cmp	r3, #0
 801a934:	d011      	beq.n	801a95a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a93a:	4a18      	ldr	r2, [pc, #96]	; (801a99c <HAL_SPI_IRQHandler+0x1fc>)
 801a93c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a942:	4618      	mov	r0, r3
 801a944:	f7fc fcca 	bl	80172dc <HAL_DMA_Abort_IT>
 801a948:	4603      	mov	r3, r0
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d005      	beq.n	801a95a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d016      	beq.n	801a990 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a966:	4a0d      	ldr	r2, [pc, #52]	; (801a99c <HAL_SPI_IRQHandler+0x1fc>)
 801a968:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a96e:	4618      	mov	r0, r3
 801a970:	f7fc fcb4 	bl	80172dc <HAL_DMA_Abort_IT>
 801a974:	4603      	mov	r3, r0
 801a976:	2b00      	cmp	r3, #0
 801a978:	d00a      	beq.n	801a990 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a97e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801a986:	e003      	b.n	801a990 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801a988:	6878      	ldr	r0, [r7, #4]
 801a98a:	f000 f809 	bl	801a9a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801a98e:	e000      	b.n	801a992 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 801a990:	bf00      	nop
    return;
 801a992:	bf00      	nop
  }
}
 801a994:	3720      	adds	r7, #32
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}
 801a99a:	bf00      	nop
 801a99c:	0801a9b5 	.word	0x0801a9b5

0801a9a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801a9a0:	b480      	push	{r7}
 801a9a2:	b083      	sub	sp, #12
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801a9a8:	bf00      	nop
 801a9aa:	370c      	adds	r7, #12
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b2:	4770      	bx	lr

0801a9b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b084      	sub	sp, #16
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801a9ce:	68f8      	ldr	r0, [r7, #12]
 801a9d0:	f7ff ffe6 	bl	801a9a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801a9d4:	bf00      	nop
 801a9d6:	3710      	adds	r7, #16
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}

0801a9dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b082      	sub	sp, #8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d101      	bne.n	801a9ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	e01d      	b.n	801aa2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a9f4:	b2db      	uxtb	r3, r3
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d106      	bne.n	801aa08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801aa02:	6878      	ldr	r0, [r7, #4]
 801aa04:	f7e7 fdc2 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2202      	movs	r2, #2
 801aa0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681a      	ldr	r2, [r3, #0]
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	3304      	adds	r3, #4
 801aa18:	4619      	mov	r1, r3
 801aa1a:	4610      	mov	r0, r2
 801aa1c:	f000 fc3e 	bl	801b29c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	2201      	movs	r2, #1
 801aa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801aa28:	2300      	movs	r3, #0
}
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	3708      	adds	r7, #8
 801aa2e:	46bd      	mov	sp, r7
 801aa30:	bd80      	pop	{r7, pc}

0801aa32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801aa32:	b480      	push	{r7}
 801aa34:	b085      	sub	sp, #20
 801aa36:	af00      	add	r7, sp, #0
 801aa38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	2202      	movs	r2, #2
 801aa3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	689b      	ldr	r3, [r3, #8]
 801aa48:	f003 0307 	and.w	r3, r3, #7
 801aa4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	2b06      	cmp	r3, #6
 801aa52:	d007      	beq.n	801aa64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	681a      	ldr	r2, [r3, #0]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	f042 0201 	orr.w	r2, r2, #1
 801aa62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2201      	movs	r2, #1
 801aa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801aa6c:	2300      	movs	r3, #0
}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	3714      	adds	r7, #20
 801aa72:	46bd      	mov	sp, r7
 801aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa78:	4770      	bx	lr

0801aa7a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801aa7a:	b480      	push	{r7}
 801aa7c:	b085      	sub	sp, #20
 801aa7e:	af00      	add	r7, sp, #0
 801aa80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	68da      	ldr	r2, [r3, #12]
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	f042 0201 	orr.w	r2, r2, #1
 801aa90:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	689b      	ldr	r3, [r3, #8]
 801aa98:	f003 0307 	and.w	r3, r3, #7
 801aa9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	2b06      	cmp	r3, #6
 801aaa2:	d007      	beq.n	801aab4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	681a      	ldr	r2, [r3, #0]
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	f042 0201 	orr.w	r2, r2, #1
 801aab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801aab4:	2300      	movs	r3, #0
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3714      	adds	r7, #20
 801aaba:	46bd      	mov	sp, r7
 801aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac0:	4770      	bx	lr

0801aac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801aac2:	b580      	push	{r7, lr}
 801aac4:	b082      	sub	sp, #8
 801aac6:	af00      	add	r7, sp, #0
 801aac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d101      	bne.n	801aad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801aad0:	2301      	movs	r3, #1
 801aad2:	e01d      	b.n	801ab10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d106      	bne.n	801aaee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	2200      	movs	r2, #0
 801aae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801aae8:	6878      	ldr	r0, [r7, #4]
 801aaea:	f7e7 fc11 	bl	8002310 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	2202      	movs	r2, #2
 801aaf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681a      	ldr	r2, [r3, #0]
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	3304      	adds	r3, #4
 801aafe:	4619      	mov	r1, r3
 801ab00:	4610      	mov	r0, r2
 801ab02:	f000 fbcb 	bl	801b29c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	2201      	movs	r2, #1
 801ab0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ab0e:	2300      	movs	r3, #0
}
 801ab10:	4618      	mov	r0, r3
 801ab12:	3708      	adds	r7, #8
 801ab14:	46bd      	mov	sp, r7
 801ab16:	bd80      	pop	{r7, pc}

0801ab18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b084      	sub	sp, #16
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
 801ab20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	2201      	movs	r2, #1
 801ab28:	6839      	ldr	r1, [r7, #0]
 801ab2a:	4618      	mov	r0, r3
 801ab2c:	f000 fea0 	bl	801b870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	4a15      	ldr	r2, [pc, #84]	; (801ab8c <HAL_TIM_PWM_Start+0x74>)
 801ab36:	4293      	cmp	r3, r2
 801ab38:	d004      	beq.n	801ab44 <HAL_TIM_PWM_Start+0x2c>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	4a14      	ldr	r2, [pc, #80]	; (801ab90 <HAL_TIM_PWM_Start+0x78>)
 801ab40:	4293      	cmp	r3, r2
 801ab42:	d101      	bne.n	801ab48 <HAL_TIM_PWM_Start+0x30>
 801ab44:	2301      	movs	r3, #1
 801ab46:	e000      	b.n	801ab4a <HAL_TIM_PWM_Start+0x32>
 801ab48:	2300      	movs	r3, #0
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d007      	beq.n	801ab5e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ab5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	689b      	ldr	r3, [r3, #8]
 801ab64:	f003 0307 	and.w	r3, r3, #7
 801ab68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	2b06      	cmp	r3, #6
 801ab6e:	d007      	beq.n	801ab80 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	f042 0201 	orr.w	r2, r2, #1
 801ab7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ab80:	2300      	movs	r3, #0
}
 801ab82:	4618      	mov	r0, r3
 801ab84:	3710      	adds	r7, #16
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bd80      	pop	{r7, pc}
 801ab8a:	bf00      	nop
 801ab8c:	40010000 	.word	0x40010000
 801ab90:	40010400 	.word	0x40010400

0801ab94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b086      	sub	sp, #24
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
 801ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d101      	bne.n	801aba8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801aba4:	2301      	movs	r3, #1
 801aba6:	e083      	b.n	801acb0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801abae:	b2db      	uxtb	r3, r3
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d106      	bne.n	801abc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2200      	movs	r2, #0
 801abb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801abbc:	6878      	ldr	r0, [r7, #4]
 801abbe:	f7e7 ff99 	bl	8002af4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2202      	movs	r2, #2
 801abc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	689b      	ldr	r3, [r3, #8]
 801abd0:	687a      	ldr	r2, [r7, #4]
 801abd2:	6812      	ldr	r2, [r2, #0]
 801abd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801abd8:	f023 0307 	bic.w	r3, r3, #7
 801abdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	3304      	adds	r3, #4
 801abe6:	4619      	mov	r1, r3
 801abe8:	4610      	mov	r0, r2
 801abea:	f000 fb57 	bl	801b29c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	689b      	ldr	r3, [r3, #8]
 801abf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	699b      	ldr	r3, [r3, #24]
 801abfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	6a1b      	ldr	r3, [r3, #32]
 801ac04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	697a      	ldr	r2, [r7, #20]
 801ac0c:	4313      	orrs	r3, r2
 801ac0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801ac10:	693b      	ldr	r3, [r7, #16]
 801ac12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ac16:	f023 0303 	bic.w	r3, r3, #3
 801ac1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801ac1c:	683b      	ldr	r3, [r7, #0]
 801ac1e:	689a      	ldr	r2, [r3, #8]
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	699b      	ldr	r3, [r3, #24]
 801ac24:	021b      	lsls	r3, r3, #8
 801ac26:	4313      	orrs	r3, r2
 801ac28:	693a      	ldr	r2, [r7, #16]
 801ac2a:	4313      	orrs	r3, r2
 801ac2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801ac2e:	693b      	ldr	r3, [r7, #16]
 801ac30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801ac34:	f023 030c 	bic.w	r3, r3, #12
 801ac38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801ac3a:	693b      	ldr	r3, [r7, #16]
 801ac3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801ac40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ac44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801ac46:	683b      	ldr	r3, [r7, #0]
 801ac48:	68da      	ldr	r2, [r3, #12]
 801ac4a:	683b      	ldr	r3, [r7, #0]
 801ac4c:	69db      	ldr	r3, [r3, #28]
 801ac4e:	021b      	lsls	r3, r3, #8
 801ac50:	4313      	orrs	r3, r2
 801ac52:	693a      	ldr	r2, [r7, #16]
 801ac54:	4313      	orrs	r3, r2
 801ac56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801ac58:	683b      	ldr	r3, [r7, #0]
 801ac5a:	691b      	ldr	r3, [r3, #16]
 801ac5c:	011a      	lsls	r2, r3, #4
 801ac5e:	683b      	ldr	r3, [r7, #0]
 801ac60:	6a1b      	ldr	r3, [r3, #32]
 801ac62:	031b      	lsls	r3, r3, #12
 801ac64:	4313      	orrs	r3, r2
 801ac66:	693a      	ldr	r2, [r7, #16]
 801ac68:	4313      	orrs	r3, r2
 801ac6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801ac72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801ac7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801ac7c:	683b      	ldr	r3, [r7, #0]
 801ac7e:	685a      	ldr	r2, [r3, #4]
 801ac80:	683b      	ldr	r3, [r7, #0]
 801ac82:	695b      	ldr	r3, [r3, #20]
 801ac84:	011b      	lsls	r3, r3, #4
 801ac86:	4313      	orrs	r3, r2
 801ac88:	68fa      	ldr	r2, [r7, #12]
 801ac8a:	4313      	orrs	r3, r2
 801ac8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	697a      	ldr	r2, [r7, #20]
 801ac94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	693a      	ldr	r2, [r7, #16]
 801ac9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	68fa      	ldr	r2, [r7, #12]
 801aca4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	2201      	movs	r2, #1
 801acaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801acae:	2300      	movs	r3, #0
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3718      	adds	r7, #24
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b082      	sub	sp, #8
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
 801acc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801acc2:	683b      	ldr	r3, [r7, #0]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d003      	beq.n	801acd0 <HAL_TIM_Encoder_Start+0x18>
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	2b04      	cmp	r3, #4
 801accc:	d008      	beq.n	801ace0 <HAL_TIM_Encoder_Start+0x28>
 801acce:	e00f      	b.n	801acf0 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	2201      	movs	r2, #1
 801acd6:	2100      	movs	r1, #0
 801acd8:	4618      	mov	r0, r3
 801acda:	f000 fdc9 	bl	801b870 <TIM_CCxChannelCmd>
      break;
 801acde:	e016      	b.n	801ad0e <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	2201      	movs	r2, #1
 801ace6:	2104      	movs	r1, #4
 801ace8:	4618      	mov	r0, r3
 801acea:	f000 fdc1 	bl	801b870 <TIM_CCxChannelCmd>
      break;
 801acee:	e00e      	b.n	801ad0e <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	2201      	movs	r2, #1
 801acf6:	2100      	movs	r1, #0
 801acf8:	4618      	mov	r0, r3
 801acfa:	f000 fdb9 	bl	801b870 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	2201      	movs	r2, #1
 801ad04:	2104      	movs	r1, #4
 801ad06:	4618      	mov	r0, r3
 801ad08:	f000 fdb2 	bl	801b870 <TIM_CCxChannelCmd>
      break;
 801ad0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	681a      	ldr	r2, [r3, #0]
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	f042 0201 	orr.w	r2, r2, #1
 801ad1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801ad1e:	2300      	movs	r3, #0
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	3708      	adds	r7, #8
 801ad24:	46bd      	mov	sp, r7
 801ad26:	bd80      	pop	{r7, pc}

0801ad28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b082      	sub	sp, #8
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	691b      	ldr	r3, [r3, #16]
 801ad36:	f003 0302 	and.w	r3, r3, #2
 801ad3a:	2b02      	cmp	r3, #2
 801ad3c:	d122      	bne.n	801ad84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	68db      	ldr	r3, [r3, #12]
 801ad44:	f003 0302 	and.w	r3, r3, #2
 801ad48:	2b02      	cmp	r3, #2
 801ad4a:	d11b      	bne.n	801ad84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	f06f 0202 	mvn.w	r2, #2
 801ad54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	2201      	movs	r2, #1
 801ad5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	699b      	ldr	r3, [r3, #24]
 801ad62:	f003 0303 	and.w	r3, r3, #3
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d003      	beq.n	801ad72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ad6a:	6878      	ldr	r0, [r7, #4]
 801ad6c:	f000 fa78 	bl	801b260 <HAL_TIM_IC_CaptureCallback>
 801ad70:	e005      	b.n	801ad7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ad72:	6878      	ldr	r0, [r7, #4]
 801ad74:	f000 fa6a 	bl	801b24c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ad78:	6878      	ldr	r0, [r7, #4]
 801ad7a:	f000 fa7b 	bl	801b274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	2200      	movs	r2, #0
 801ad82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	691b      	ldr	r3, [r3, #16]
 801ad8a:	f003 0304 	and.w	r3, r3, #4
 801ad8e:	2b04      	cmp	r3, #4
 801ad90:	d122      	bne.n	801add8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	68db      	ldr	r3, [r3, #12]
 801ad98:	f003 0304 	and.w	r3, r3, #4
 801ad9c:	2b04      	cmp	r3, #4
 801ad9e:	d11b      	bne.n	801add8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	f06f 0204 	mvn.w	r2, #4
 801ada8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2202      	movs	r2, #2
 801adae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	699b      	ldr	r3, [r3, #24]
 801adb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d003      	beq.n	801adc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f000 fa4e 	bl	801b260 <HAL_TIM_IC_CaptureCallback>
 801adc4:	e005      	b.n	801add2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	f000 fa40 	bl	801b24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801adcc:	6878      	ldr	r0, [r7, #4]
 801adce:	f000 fa51 	bl	801b274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2200      	movs	r2, #0
 801add6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	691b      	ldr	r3, [r3, #16]
 801adde:	f003 0308 	and.w	r3, r3, #8
 801ade2:	2b08      	cmp	r3, #8
 801ade4:	d122      	bne.n	801ae2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	68db      	ldr	r3, [r3, #12]
 801adec:	f003 0308 	and.w	r3, r3, #8
 801adf0:	2b08      	cmp	r3, #8
 801adf2:	d11b      	bne.n	801ae2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	f06f 0208 	mvn.w	r2, #8
 801adfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	2204      	movs	r2, #4
 801ae02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	69db      	ldr	r3, [r3, #28]
 801ae0a:	f003 0303 	and.w	r3, r3, #3
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d003      	beq.n	801ae1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ae12:	6878      	ldr	r0, [r7, #4]
 801ae14:	f000 fa24 	bl	801b260 <HAL_TIM_IC_CaptureCallback>
 801ae18:	e005      	b.n	801ae26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ae1a:	6878      	ldr	r0, [r7, #4]
 801ae1c:	f000 fa16 	bl	801b24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ae20:	6878      	ldr	r0, [r7, #4]
 801ae22:	f000 fa27 	bl	801b274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	2200      	movs	r2, #0
 801ae2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	691b      	ldr	r3, [r3, #16]
 801ae32:	f003 0310 	and.w	r3, r3, #16
 801ae36:	2b10      	cmp	r3, #16
 801ae38:	d122      	bne.n	801ae80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	68db      	ldr	r3, [r3, #12]
 801ae40:	f003 0310 	and.w	r3, r3, #16
 801ae44:	2b10      	cmp	r3, #16
 801ae46:	d11b      	bne.n	801ae80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	f06f 0210 	mvn.w	r2, #16
 801ae50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	2208      	movs	r2, #8
 801ae56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	69db      	ldr	r3, [r3, #28]
 801ae5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d003      	beq.n	801ae6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f000 f9fa 	bl	801b260 <HAL_TIM_IC_CaptureCallback>
 801ae6c:	e005      	b.n	801ae7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ae6e:	6878      	ldr	r0, [r7, #4]
 801ae70:	f000 f9ec 	bl	801b24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ae74:	6878      	ldr	r0, [r7, #4]
 801ae76:	f000 f9fd 	bl	801b274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	691b      	ldr	r3, [r3, #16]
 801ae86:	f003 0301 	and.w	r3, r3, #1
 801ae8a:	2b01      	cmp	r3, #1
 801ae8c:	d10e      	bne.n	801aeac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	68db      	ldr	r3, [r3, #12]
 801ae94:	f003 0301 	and.w	r3, r3, #1
 801ae98:	2b01      	cmp	r3, #1
 801ae9a:	d107      	bne.n	801aeac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	f06f 0201 	mvn.w	r2, #1
 801aea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801aea6:	6878      	ldr	r0, [r7, #4]
 801aea8:	f7f3 fec8 	bl	800ec3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	691b      	ldr	r3, [r3, #16]
 801aeb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aeb6:	2b80      	cmp	r3, #128	; 0x80
 801aeb8:	d10e      	bne.n	801aed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	68db      	ldr	r3, [r3, #12]
 801aec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aec4:	2b80      	cmp	r3, #128	; 0x80
 801aec6:	d107      	bne.n	801aed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801aed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801aed2:	6878      	ldr	r0, [r7, #4]
 801aed4:	f000 fd78 	bl	801b9c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	691b      	ldr	r3, [r3, #16]
 801aede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aee2:	2b40      	cmp	r3, #64	; 0x40
 801aee4:	d10e      	bne.n	801af04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	68db      	ldr	r3, [r3, #12]
 801aeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aef0:	2b40      	cmp	r3, #64	; 0x40
 801aef2:	d107      	bne.n	801af04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801aefc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801aefe:	6878      	ldr	r0, [r7, #4]
 801af00:	f000 f9c2 	bl	801b288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	691b      	ldr	r3, [r3, #16]
 801af0a:	f003 0320 	and.w	r3, r3, #32
 801af0e:	2b20      	cmp	r3, #32
 801af10:	d10e      	bne.n	801af30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	68db      	ldr	r3, [r3, #12]
 801af18:	f003 0320 	and.w	r3, r3, #32
 801af1c:	2b20      	cmp	r3, #32
 801af1e:	d107      	bne.n	801af30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	f06f 0220 	mvn.w	r2, #32
 801af28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801af2a:	6878      	ldr	r0, [r7, #4]
 801af2c:	f000 fd42 	bl	801b9b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801af30:	bf00      	nop
 801af32:	3708      	adds	r7, #8
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}

0801af38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b084      	sub	sp, #16
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	60f8      	str	r0, [r7, #12]
 801af40:	60b9      	str	r1, [r7, #8]
 801af42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801af4a:	2b01      	cmp	r3, #1
 801af4c:	d101      	bne.n	801af52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801af4e:	2302      	movs	r3, #2
 801af50:	e0b4      	b.n	801b0bc <HAL_TIM_PWM_ConfigChannel+0x184>
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	2201      	movs	r2, #1
 801af56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	2202      	movs	r2, #2
 801af5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	2b0c      	cmp	r3, #12
 801af66:	f200 809f 	bhi.w	801b0a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 801af6a:	a201      	add	r2, pc, #4	; (adr r2, 801af70 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af70:	0801afa5 	.word	0x0801afa5
 801af74:	0801b0a9 	.word	0x0801b0a9
 801af78:	0801b0a9 	.word	0x0801b0a9
 801af7c:	0801b0a9 	.word	0x0801b0a9
 801af80:	0801afe5 	.word	0x0801afe5
 801af84:	0801b0a9 	.word	0x0801b0a9
 801af88:	0801b0a9 	.word	0x0801b0a9
 801af8c:	0801b0a9 	.word	0x0801b0a9
 801af90:	0801b027 	.word	0x0801b027
 801af94:	0801b0a9 	.word	0x0801b0a9
 801af98:	0801b0a9 	.word	0x0801b0a9
 801af9c:	0801b0a9 	.word	0x0801b0a9
 801afa0:	0801b067 	.word	0x0801b067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	68b9      	ldr	r1, [r7, #8]
 801afaa:	4618      	mov	r0, r3
 801afac:	f000 fa16 	bl	801b3dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	699a      	ldr	r2, [r3, #24]
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	f042 0208 	orr.w	r2, r2, #8
 801afbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	699a      	ldr	r2, [r3, #24]
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	f022 0204 	bic.w	r2, r2, #4
 801afce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801afd0:	68fb      	ldr	r3, [r7, #12]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	6999      	ldr	r1, [r3, #24]
 801afd6:	68bb      	ldr	r3, [r7, #8]
 801afd8:	691a      	ldr	r2, [r3, #16]
 801afda:	68fb      	ldr	r3, [r7, #12]
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	430a      	orrs	r2, r1
 801afe0:	619a      	str	r2, [r3, #24]
      break;
 801afe2:	e062      	b.n	801b0aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	68b9      	ldr	r1, [r7, #8]
 801afea:	4618      	mov	r0, r3
 801afec:	f000 fa66 	bl	801b4bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	699a      	ldr	r2, [r3, #24]
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801affe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	699a      	ldr	r2, [r3, #24]
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	6999      	ldr	r1, [r3, #24]
 801b016:	68bb      	ldr	r3, [r7, #8]
 801b018:	691b      	ldr	r3, [r3, #16]
 801b01a:	021a      	lsls	r2, r3, #8
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	430a      	orrs	r2, r1
 801b022:	619a      	str	r2, [r3, #24]
      break;
 801b024:	e041      	b.n	801b0aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	68b9      	ldr	r1, [r7, #8]
 801b02c:	4618      	mov	r0, r3
 801b02e:	f000 fabb 	bl	801b5a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b032:	68fb      	ldr	r3, [r7, #12]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	69da      	ldr	r2, [r3, #28]
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	f042 0208 	orr.w	r2, r2, #8
 801b040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	69da      	ldr	r2, [r3, #28]
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	f022 0204 	bic.w	r2, r2, #4
 801b050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b052:	68fb      	ldr	r3, [r7, #12]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	69d9      	ldr	r1, [r3, #28]
 801b058:	68bb      	ldr	r3, [r7, #8]
 801b05a:	691a      	ldr	r2, [r3, #16]
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	430a      	orrs	r2, r1
 801b062:	61da      	str	r2, [r3, #28]
      break;
 801b064:	e021      	b.n	801b0aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	68b9      	ldr	r1, [r7, #8]
 801b06c:	4618      	mov	r0, r3
 801b06e:	f000 fb0f 	bl	801b690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	69da      	ldr	r2, [r3, #28]
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	69da      	ldr	r2, [r3, #28]
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	69d9      	ldr	r1, [r3, #28]
 801b098:	68bb      	ldr	r3, [r7, #8]
 801b09a:	691b      	ldr	r3, [r3, #16]
 801b09c:	021a      	lsls	r2, r3, #8
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	430a      	orrs	r2, r1
 801b0a4:	61da      	str	r2, [r3, #28]
      break;
 801b0a6:	e000      	b.n	801b0aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801b0a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	2201      	movs	r2, #1
 801b0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b0ba:	2300      	movs	r3, #0
}
 801b0bc:	4618      	mov	r0, r3
 801b0be:	3710      	adds	r7, #16
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	bd80      	pop	{r7, pc}

0801b0c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b084      	sub	sp, #16
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
 801b0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b0d4:	2b01      	cmp	r3, #1
 801b0d6:	d101      	bne.n	801b0dc <HAL_TIM_ConfigClockSource+0x18>
 801b0d8:	2302      	movs	r3, #2
 801b0da:	e0b3      	b.n	801b244 <HAL_TIM_ConfigClockSource+0x180>
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	2201      	movs	r2, #1
 801b0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	2202      	movs	r2, #2
 801b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	689b      	ldr	r3, [r3, #8]
 801b0f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b0fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	68fa      	ldr	r2, [r7, #12]
 801b10a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b10c:	683b      	ldr	r3, [r7, #0]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b114:	d03e      	beq.n	801b194 <HAL_TIM_ConfigClockSource+0xd0>
 801b116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b11a:	f200 8087 	bhi.w	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b122:	f000 8085 	beq.w	801b230 <HAL_TIM_ConfigClockSource+0x16c>
 801b126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b12a:	d87f      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b12c:	2b70      	cmp	r3, #112	; 0x70
 801b12e:	d01a      	beq.n	801b166 <HAL_TIM_ConfigClockSource+0xa2>
 801b130:	2b70      	cmp	r3, #112	; 0x70
 801b132:	d87b      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b134:	2b60      	cmp	r3, #96	; 0x60
 801b136:	d050      	beq.n	801b1da <HAL_TIM_ConfigClockSource+0x116>
 801b138:	2b60      	cmp	r3, #96	; 0x60
 801b13a:	d877      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b13c:	2b50      	cmp	r3, #80	; 0x50
 801b13e:	d03c      	beq.n	801b1ba <HAL_TIM_ConfigClockSource+0xf6>
 801b140:	2b50      	cmp	r3, #80	; 0x50
 801b142:	d873      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b144:	2b40      	cmp	r3, #64	; 0x40
 801b146:	d058      	beq.n	801b1fa <HAL_TIM_ConfigClockSource+0x136>
 801b148:	2b40      	cmp	r3, #64	; 0x40
 801b14a:	d86f      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b14c:	2b30      	cmp	r3, #48	; 0x30
 801b14e:	d064      	beq.n	801b21a <HAL_TIM_ConfigClockSource+0x156>
 801b150:	2b30      	cmp	r3, #48	; 0x30
 801b152:	d86b      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b154:	2b20      	cmp	r3, #32
 801b156:	d060      	beq.n	801b21a <HAL_TIM_ConfigClockSource+0x156>
 801b158:	2b20      	cmp	r3, #32
 801b15a:	d867      	bhi.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d05c      	beq.n	801b21a <HAL_TIM_ConfigClockSource+0x156>
 801b160:	2b10      	cmp	r3, #16
 801b162:	d05a      	beq.n	801b21a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801b164:	e062      	b.n	801b22c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	6818      	ldr	r0, [r3, #0]
 801b16a:	683b      	ldr	r3, [r7, #0]
 801b16c:	6899      	ldr	r1, [r3, #8]
 801b16e:	683b      	ldr	r3, [r7, #0]
 801b170:	685a      	ldr	r2, [r3, #4]
 801b172:	683b      	ldr	r3, [r7, #0]
 801b174:	68db      	ldr	r3, [r3, #12]
 801b176:	f000 fb5b 	bl	801b830 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	689b      	ldr	r3, [r3, #8]
 801b180:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b188:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	68fa      	ldr	r2, [r7, #12]
 801b190:	609a      	str	r2, [r3, #8]
      break;
 801b192:	e04e      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	6818      	ldr	r0, [r3, #0]
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	6899      	ldr	r1, [r3, #8]
 801b19c:	683b      	ldr	r3, [r7, #0]
 801b19e:	685a      	ldr	r2, [r3, #4]
 801b1a0:	683b      	ldr	r3, [r7, #0]
 801b1a2:	68db      	ldr	r3, [r3, #12]
 801b1a4:	f000 fb44 	bl	801b830 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	689a      	ldr	r2, [r3, #8]
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b1b6:	609a      	str	r2, [r3, #8]
      break;
 801b1b8:	e03b      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	6818      	ldr	r0, [r3, #0]
 801b1be:	683b      	ldr	r3, [r7, #0]
 801b1c0:	6859      	ldr	r1, [r3, #4]
 801b1c2:	683b      	ldr	r3, [r7, #0]
 801b1c4:	68db      	ldr	r3, [r3, #12]
 801b1c6:	461a      	mov	r2, r3
 801b1c8:	f000 fab8 	bl	801b73c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	2150      	movs	r1, #80	; 0x50
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f000 fb11 	bl	801b7fa <TIM_ITRx_SetConfig>
      break;
 801b1d8:	e02b      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	6818      	ldr	r0, [r3, #0]
 801b1de:	683b      	ldr	r3, [r7, #0]
 801b1e0:	6859      	ldr	r1, [r3, #4]
 801b1e2:	683b      	ldr	r3, [r7, #0]
 801b1e4:	68db      	ldr	r3, [r3, #12]
 801b1e6:	461a      	mov	r2, r3
 801b1e8:	f000 fad7 	bl	801b79a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	2160      	movs	r1, #96	; 0x60
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	f000 fb01 	bl	801b7fa <TIM_ITRx_SetConfig>
      break;
 801b1f8:	e01b      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	6818      	ldr	r0, [r3, #0]
 801b1fe:	683b      	ldr	r3, [r7, #0]
 801b200:	6859      	ldr	r1, [r3, #4]
 801b202:	683b      	ldr	r3, [r7, #0]
 801b204:	68db      	ldr	r3, [r3, #12]
 801b206:	461a      	mov	r2, r3
 801b208:	f000 fa98 	bl	801b73c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	2140      	movs	r1, #64	; 0x40
 801b212:	4618      	mov	r0, r3
 801b214:	f000 faf1 	bl	801b7fa <TIM_ITRx_SetConfig>
      break;
 801b218:	e00b      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681a      	ldr	r2, [r3, #0]
 801b21e:	683b      	ldr	r3, [r7, #0]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	4619      	mov	r1, r3
 801b224:	4610      	mov	r0, r2
 801b226:	f000 fae8 	bl	801b7fa <TIM_ITRx_SetConfig>
      break;
 801b22a:	e002      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801b22c:	bf00      	nop
 801b22e:	e000      	b.n	801b232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801b230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	2201      	movs	r2, #1
 801b236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	2200      	movs	r2, #0
 801b23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b242:	2300      	movs	r3, #0
}
 801b244:	4618      	mov	r0, r3
 801b246:	3710      	adds	r7, #16
 801b248:	46bd      	mov	sp, r7
 801b24a:	bd80      	pop	{r7, pc}

0801b24c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b24c:	b480      	push	{r7}
 801b24e:	b083      	sub	sp, #12
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b254:	bf00      	nop
 801b256:	370c      	adds	r7, #12
 801b258:	46bd      	mov	sp, r7
 801b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b25e:	4770      	bx	lr

0801b260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b260:	b480      	push	{r7}
 801b262:	b083      	sub	sp, #12
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b268:	bf00      	nop
 801b26a:	370c      	adds	r7, #12
 801b26c:	46bd      	mov	sp, r7
 801b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b272:	4770      	bx	lr

0801b274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b274:	b480      	push	{r7}
 801b276:	b083      	sub	sp, #12
 801b278:	af00      	add	r7, sp, #0
 801b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b27c:	bf00      	nop
 801b27e:	370c      	adds	r7, #12
 801b280:	46bd      	mov	sp, r7
 801b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b286:	4770      	bx	lr

0801b288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b288:	b480      	push	{r7}
 801b28a:	b083      	sub	sp, #12
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b290:	bf00      	nop
 801b292:	370c      	adds	r7, #12
 801b294:	46bd      	mov	sp, r7
 801b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b29a:	4770      	bx	lr

0801b29c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b29c:	b480      	push	{r7}
 801b29e:	b085      	sub	sp, #20
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
 801b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	4a40      	ldr	r2, [pc, #256]	; (801b3b0 <TIM_Base_SetConfig+0x114>)
 801b2b0:	4293      	cmp	r3, r2
 801b2b2:	d013      	beq.n	801b2dc <TIM_Base_SetConfig+0x40>
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b2ba:	d00f      	beq.n	801b2dc <TIM_Base_SetConfig+0x40>
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	4a3d      	ldr	r2, [pc, #244]	; (801b3b4 <TIM_Base_SetConfig+0x118>)
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	d00b      	beq.n	801b2dc <TIM_Base_SetConfig+0x40>
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	4a3c      	ldr	r2, [pc, #240]	; (801b3b8 <TIM_Base_SetConfig+0x11c>)
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	d007      	beq.n	801b2dc <TIM_Base_SetConfig+0x40>
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	4a3b      	ldr	r2, [pc, #236]	; (801b3bc <TIM_Base_SetConfig+0x120>)
 801b2d0:	4293      	cmp	r3, r2
 801b2d2:	d003      	beq.n	801b2dc <TIM_Base_SetConfig+0x40>
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	4a3a      	ldr	r2, [pc, #232]	; (801b3c0 <TIM_Base_SetConfig+0x124>)
 801b2d8:	4293      	cmp	r3, r2
 801b2da:	d108      	bne.n	801b2ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b2e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b2e4:	683b      	ldr	r3, [r7, #0]
 801b2e6:	685b      	ldr	r3, [r3, #4]
 801b2e8:	68fa      	ldr	r2, [r7, #12]
 801b2ea:	4313      	orrs	r3, r2
 801b2ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	4a2f      	ldr	r2, [pc, #188]	; (801b3b0 <TIM_Base_SetConfig+0x114>)
 801b2f2:	4293      	cmp	r3, r2
 801b2f4:	d02b      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b2fc:	d027      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	4a2c      	ldr	r2, [pc, #176]	; (801b3b4 <TIM_Base_SetConfig+0x118>)
 801b302:	4293      	cmp	r3, r2
 801b304:	d023      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	4a2b      	ldr	r2, [pc, #172]	; (801b3b8 <TIM_Base_SetConfig+0x11c>)
 801b30a:	4293      	cmp	r3, r2
 801b30c:	d01f      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	4a2a      	ldr	r2, [pc, #168]	; (801b3bc <TIM_Base_SetConfig+0x120>)
 801b312:	4293      	cmp	r3, r2
 801b314:	d01b      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	4a29      	ldr	r2, [pc, #164]	; (801b3c0 <TIM_Base_SetConfig+0x124>)
 801b31a:	4293      	cmp	r3, r2
 801b31c:	d017      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	4a28      	ldr	r2, [pc, #160]	; (801b3c4 <TIM_Base_SetConfig+0x128>)
 801b322:	4293      	cmp	r3, r2
 801b324:	d013      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	4a27      	ldr	r2, [pc, #156]	; (801b3c8 <TIM_Base_SetConfig+0x12c>)
 801b32a:	4293      	cmp	r3, r2
 801b32c:	d00f      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	4a26      	ldr	r2, [pc, #152]	; (801b3cc <TIM_Base_SetConfig+0x130>)
 801b332:	4293      	cmp	r3, r2
 801b334:	d00b      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	4a25      	ldr	r2, [pc, #148]	; (801b3d0 <TIM_Base_SetConfig+0x134>)
 801b33a:	4293      	cmp	r3, r2
 801b33c:	d007      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	4a24      	ldr	r2, [pc, #144]	; (801b3d4 <TIM_Base_SetConfig+0x138>)
 801b342:	4293      	cmp	r3, r2
 801b344:	d003      	beq.n	801b34e <TIM_Base_SetConfig+0xb2>
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	4a23      	ldr	r2, [pc, #140]	; (801b3d8 <TIM_Base_SetConfig+0x13c>)
 801b34a:	4293      	cmp	r3, r2
 801b34c:	d108      	bne.n	801b360 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b356:	683b      	ldr	r3, [r7, #0]
 801b358:	68db      	ldr	r3, [r3, #12]
 801b35a:	68fa      	ldr	r2, [r7, #12]
 801b35c:	4313      	orrs	r3, r2
 801b35e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	695b      	ldr	r3, [r3, #20]
 801b36a:	4313      	orrs	r3, r2
 801b36c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	68fa      	ldr	r2, [r7, #12]
 801b372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b374:	683b      	ldr	r3, [r7, #0]
 801b376:	689a      	ldr	r2, [r3, #8]
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b37c:	683b      	ldr	r3, [r7, #0]
 801b37e:	681a      	ldr	r2, [r3, #0]
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	4a0a      	ldr	r2, [pc, #40]	; (801b3b0 <TIM_Base_SetConfig+0x114>)
 801b388:	4293      	cmp	r3, r2
 801b38a:	d003      	beq.n	801b394 <TIM_Base_SetConfig+0xf8>
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	4a0c      	ldr	r2, [pc, #48]	; (801b3c0 <TIM_Base_SetConfig+0x124>)
 801b390:	4293      	cmp	r3, r2
 801b392:	d103      	bne.n	801b39c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b394:	683b      	ldr	r3, [r7, #0]
 801b396:	691a      	ldr	r2, [r3, #16]
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2201      	movs	r2, #1
 801b3a0:	615a      	str	r2, [r3, #20]
}
 801b3a2:	bf00      	nop
 801b3a4:	3714      	adds	r7, #20
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ac:	4770      	bx	lr
 801b3ae:	bf00      	nop
 801b3b0:	40010000 	.word	0x40010000
 801b3b4:	40000400 	.word	0x40000400
 801b3b8:	40000800 	.word	0x40000800
 801b3bc:	40000c00 	.word	0x40000c00
 801b3c0:	40010400 	.word	0x40010400
 801b3c4:	40014000 	.word	0x40014000
 801b3c8:	40014400 	.word	0x40014400
 801b3cc:	40014800 	.word	0x40014800
 801b3d0:	40001800 	.word	0x40001800
 801b3d4:	40001c00 	.word	0x40001c00
 801b3d8:	40002000 	.word	0x40002000

0801b3dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b3dc:	b480      	push	{r7}
 801b3de:	b087      	sub	sp, #28
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
 801b3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6a1b      	ldr	r3, [r3, #32]
 801b3ea:	f023 0201 	bic.w	r2, r3, #1
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	6a1b      	ldr	r3, [r3, #32]
 801b3f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	685b      	ldr	r3, [r3, #4]
 801b3fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	699b      	ldr	r3, [r3, #24]
 801b402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	f023 0303 	bic.w	r3, r3, #3
 801b412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b414:	683b      	ldr	r3, [r7, #0]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	68fa      	ldr	r2, [r7, #12]
 801b41a:	4313      	orrs	r3, r2
 801b41c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b41e:	697b      	ldr	r3, [r7, #20]
 801b420:	f023 0302 	bic.w	r3, r3, #2
 801b424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b426:	683b      	ldr	r3, [r7, #0]
 801b428:	689b      	ldr	r3, [r3, #8]
 801b42a:	697a      	ldr	r2, [r7, #20]
 801b42c:	4313      	orrs	r3, r2
 801b42e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	4a20      	ldr	r2, [pc, #128]	; (801b4b4 <TIM_OC1_SetConfig+0xd8>)
 801b434:	4293      	cmp	r3, r2
 801b436:	d003      	beq.n	801b440 <TIM_OC1_SetConfig+0x64>
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	4a1f      	ldr	r2, [pc, #124]	; (801b4b8 <TIM_OC1_SetConfig+0xdc>)
 801b43c:	4293      	cmp	r3, r2
 801b43e:	d10c      	bne.n	801b45a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b440:	697b      	ldr	r3, [r7, #20]
 801b442:	f023 0308 	bic.w	r3, r3, #8
 801b446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b448:	683b      	ldr	r3, [r7, #0]
 801b44a:	68db      	ldr	r3, [r3, #12]
 801b44c:	697a      	ldr	r2, [r7, #20]
 801b44e:	4313      	orrs	r3, r2
 801b450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b452:	697b      	ldr	r3, [r7, #20]
 801b454:	f023 0304 	bic.w	r3, r3, #4
 801b458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4a15      	ldr	r2, [pc, #84]	; (801b4b4 <TIM_OC1_SetConfig+0xd8>)
 801b45e:	4293      	cmp	r3, r2
 801b460:	d003      	beq.n	801b46a <TIM_OC1_SetConfig+0x8e>
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	4a14      	ldr	r2, [pc, #80]	; (801b4b8 <TIM_OC1_SetConfig+0xdc>)
 801b466:	4293      	cmp	r3, r2
 801b468:	d111      	bne.n	801b48e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b46a:	693b      	ldr	r3, [r7, #16]
 801b46c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b472:	693b      	ldr	r3, [r7, #16]
 801b474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b47a:	683b      	ldr	r3, [r7, #0]
 801b47c:	695b      	ldr	r3, [r3, #20]
 801b47e:	693a      	ldr	r2, [r7, #16]
 801b480:	4313      	orrs	r3, r2
 801b482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b484:	683b      	ldr	r3, [r7, #0]
 801b486:	699b      	ldr	r3, [r3, #24]
 801b488:	693a      	ldr	r2, [r7, #16]
 801b48a:	4313      	orrs	r3, r2
 801b48c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	693a      	ldr	r2, [r7, #16]
 801b492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	68fa      	ldr	r2, [r7, #12]
 801b498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	685a      	ldr	r2, [r3, #4]
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	697a      	ldr	r2, [r7, #20]
 801b4a6:	621a      	str	r2, [r3, #32]
}
 801b4a8:	bf00      	nop
 801b4aa:	371c      	adds	r7, #28
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b2:	4770      	bx	lr
 801b4b4:	40010000 	.word	0x40010000
 801b4b8:	40010400 	.word	0x40010400

0801b4bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b4bc:	b480      	push	{r7}
 801b4be:	b087      	sub	sp, #28
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
 801b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	6a1b      	ldr	r3, [r3, #32]
 801b4ca:	f023 0210 	bic.w	r2, r3, #16
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6a1b      	ldr	r3, [r3, #32]
 801b4d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	699b      	ldr	r3, [r3, #24]
 801b4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b4ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b4f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b4f4:	683b      	ldr	r3, [r7, #0]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	021b      	lsls	r3, r3, #8
 801b4fa:	68fa      	ldr	r2, [r7, #12]
 801b4fc:	4313      	orrs	r3, r2
 801b4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b500:	697b      	ldr	r3, [r7, #20]
 801b502:	f023 0320 	bic.w	r3, r3, #32
 801b506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	689b      	ldr	r3, [r3, #8]
 801b50c:	011b      	lsls	r3, r3, #4
 801b50e:	697a      	ldr	r2, [r7, #20]
 801b510:	4313      	orrs	r3, r2
 801b512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	4a22      	ldr	r2, [pc, #136]	; (801b5a0 <TIM_OC2_SetConfig+0xe4>)
 801b518:	4293      	cmp	r3, r2
 801b51a:	d003      	beq.n	801b524 <TIM_OC2_SetConfig+0x68>
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	4a21      	ldr	r2, [pc, #132]	; (801b5a4 <TIM_OC2_SetConfig+0xe8>)
 801b520:	4293      	cmp	r3, r2
 801b522:	d10d      	bne.n	801b540 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b524:	697b      	ldr	r3, [r7, #20]
 801b526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b52a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b52c:	683b      	ldr	r3, [r7, #0]
 801b52e:	68db      	ldr	r3, [r3, #12]
 801b530:	011b      	lsls	r3, r3, #4
 801b532:	697a      	ldr	r2, [r7, #20]
 801b534:	4313      	orrs	r3, r2
 801b536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b538:	697b      	ldr	r3, [r7, #20]
 801b53a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b53e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	4a17      	ldr	r2, [pc, #92]	; (801b5a0 <TIM_OC2_SetConfig+0xe4>)
 801b544:	4293      	cmp	r3, r2
 801b546:	d003      	beq.n	801b550 <TIM_OC2_SetConfig+0x94>
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	4a16      	ldr	r2, [pc, #88]	; (801b5a4 <TIM_OC2_SetConfig+0xe8>)
 801b54c:	4293      	cmp	r3, r2
 801b54e:	d113      	bne.n	801b578 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b550:	693b      	ldr	r3, [r7, #16]
 801b552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b556:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b558:	693b      	ldr	r3, [r7, #16]
 801b55a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b55e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	695b      	ldr	r3, [r3, #20]
 801b564:	009b      	lsls	r3, r3, #2
 801b566:	693a      	ldr	r2, [r7, #16]
 801b568:	4313      	orrs	r3, r2
 801b56a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b56c:	683b      	ldr	r3, [r7, #0]
 801b56e:	699b      	ldr	r3, [r3, #24]
 801b570:	009b      	lsls	r3, r3, #2
 801b572:	693a      	ldr	r2, [r7, #16]
 801b574:	4313      	orrs	r3, r2
 801b576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	693a      	ldr	r2, [r7, #16]
 801b57c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	68fa      	ldr	r2, [r7, #12]
 801b582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	685a      	ldr	r2, [r3, #4]
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	697a      	ldr	r2, [r7, #20]
 801b590:	621a      	str	r2, [r3, #32]
}
 801b592:	bf00      	nop
 801b594:	371c      	adds	r7, #28
 801b596:	46bd      	mov	sp, r7
 801b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b59c:	4770      	bx	lr
 801b59e:	bf00      	nop
 801b5a0:	40010000 	.word	0x40010000
 801b5a4:	40010400 	.word	0x40010400

0801b5a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b5a8:	b480      	push	{r7}
 801b5aa:	b087      	sub	sp, #28
 801b5ac:	af00      	add	r7, sp, #0
 801b5ae:	6078      	str	r0, [r7, #4]
 801b5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	6a1b      	ldr	r3, [r3, #32]
 801b5b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	6a1b      	ldr	r3, [r3, #32]
 801b5c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	685b      	ldr	r3, [r3, #4]
 801b5c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	69db      	ldr	r3, [r3, #28]
 801b5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b5d0:	68fb      	ldr	r3, [r7, #12]
 801b5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b5d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	f023 0303 	bic.w	r3, r3, #3
 801b5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	68fa      	ldr	r2, [r7, #12]
 801b5e6:	4313      	orrs	r3, r2
 801b5e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b5f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	689b      	ldr	r3, [r3, #8]
 801b5f6:	021b      	lsls	r3, r3, #8
 801b5f8:	697a      	ldr	r2, [r7, #20]
 801b5fa:	4313      	orrs	r3, r2
 801b5fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	4a21      	ldr	r2, [pc, #132]	; (801b688 <TIM_OC3_SetConfig+0xe0>)
 801b602:	4293      	cmp	r3, r2
 801b604:	d003      	beq.n	801b60e <TIM_OC3_SetConfig+0x66>
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	4a20      	ldr	r2, [pc, #128]	; (801b68c <TIM_OC3_SetConfig+0xe4>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d10d      	bne.n	801b62a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b60e:	697b      	ldr	r3, [r7, #20]
 801b610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	68db      	ldr	r3, [r3, #12]
 801b61a:	021b      	lsls	r3, r3, #8
 801b61c:	697a      	ldr	r2, [r7, #20]
 801b61e:	4313      	orrs	r3, r2
 801b620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b622:	697b      	ldr	r3, [r7, #20]
 801b624:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	4a16      	ldr	r2, [pc, #88]	; (801b688 <TIM_OC3_SetConfig+0xe0>)
 801b62e:	4293      	cmp	r3, r2
 801b630:	d003      	beq.n	801b63a <TIM_OC3_SetConfig+0x92>
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	4a15      	ldr	r2, [pc, #84]	; (801b68c <TIM_OC3_SetConfig+0xe4>)
 801b636:	4293      	cmp	r3, r2
 801b638:	d113      	bne.n	801b662 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b642:	693b      	ldr	r3, [r7, #16]
 801b644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b64a:	683b      	ldr	r3, [r7, #0]
 801b64c:	695b      	ldr	r3, [r3, #20]
 801b64e:	011b      	lsls	r3, r3, #4
 801b650:	693a      	ldr	r2, [r7, #16]
 801b652:	4313      	orrs	r3, r2
 801b654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	699b      	ldr	r3, [r3, #24]
 801b65a:	011b      	lsls	r3, r3, #4
 801b65c:	693a      	ldr	r2, [r7, #16]
 801b65e:	4313      	orrs	r3, r2
 801b660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	693a      	ldr	r2, [r7, #16]
 801b666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	68fa      	ldr	r2, [r7, #12]
 801b66c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	685a      	ldr	r2, [r3, #4]
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	697a      	ldr	r2, [r7, #20]
 801b67a:	621a      	str	r2, [r3, #32]
}
 801b67c:	bf00      	nop
 801b67e:	371c      	adds	r7, #28
 801b680:	46bd      	mov	sp, r7
 801b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b686:	4770      	bx	lr
 801b688:	40010000 	.word	0x40010000
 801b68c:	40010400 	.word	0x40010400

0801b690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b690:	b480      	push	{r7}
 801b692:	b087      	sub	sp, #28
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	6a1b      	ldr	r3, [r3, #32]
 801b69e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	6a1b      	ldr	r3, [r3, #32]
 801b6aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	685b      	ldr	r3, [r3, #4]
 801b6b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	69db      	ldr	r3, [r3, #28]
 801b6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b6c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b6c8:	683b      	ldr	r3, [r7, #0]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	021b      	lsls	r3, r3, #8
 801b6ce:	68fa      	ldr	r2, [r7, #12]
 801b6d0:	4313      	orrs	r3, r2
 801b6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b6d4:	693b      	ldr	r3, [r7, #16]
 801b6d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b6da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b6dc:	683b      	ldr	r3, [r7, #0]
 801b6de:	689b      	ldr	r3, [r3, #8]
 801b6e0:	031b      	lsls	r3, r3, #12
 801b6e2:	693a      	ldr	r2, [r7, #16]
 801b6e4:	4313      	orrs	r3, r2
 801b6e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	4a12      	ldr	r2, [pc, #72]	; (801b734 <TIM_OC4_SetConfig+0xa4>)
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d003      	beq.n	801b6f8 <TIM_OC4_SetConfig+0x68>
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	4a11      	ldr	r2, [pc, #68]	; (801b738 <TIM_OC4_SetConfig+0xa8>)
 801b6f4:	4293      	cmp	r3, r2
 801b6f6:	d109      	bne.n	801b70c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b6f8:	697b      	ldr	r3, [r7, #20]
 801b6fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b6fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	695b      	ldr	r3, [r3, #20]
 801b704:	019b      	lsls	r3, r3, #6
 801b706:	697a      	ldr	r2, [r7, #20]
 801b708:	4313      	orrs	r3, r2
 801b70a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	697a      	ldr	r2, [r7, #20]
 801b710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	68fa      	ldr	r2, [r7, #12]
 801b716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b718:	683b      	ldr	r3, [r7, #0]
 801b71a:	685a      	ldr	r2, [r3, #4]
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	693a      	ldr	r2, [r7, #16]
 801b724:	621a      	str	r2, [r3, #32]
}
 801b726:	bf00      	nop
 801b728:	371c      	adds	r7, #28
 801b72a:	46bd      	mov	sp, r7
 801b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b730:	4770      	bx	lr
 801b732:	bf00      	nop
 801b734:	40010000 	.word	0x40010000
 801b738:	40010400 	.word	0x40010400

0801b73c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b73c:	b480      	push	{r7}
 801b73e:	b087      	sub	sp, #28
 801b740:	af00      	add	r7, sp, #0
 801b742:	60f8      	str	r0, [r7, #12]
 801b744:	60b9      	str	r1, [r7, #8]
 801b746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	6a1b      	ldr	r3, [r3, #32]
 801b74c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b74e:	68fb      	ldr	r3, [r7, #12]
 801b750:	6a1b      	ldr	r3, [r3, #32]
 801b752:	f023 0201 	bic.w	r2, r3, #1
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	699b      	ldr	r3, [r3, #24]
 801b75e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b760:	693b      	ldr	r3, [r7, #16]
 801b762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	011b      	lsls	r3, r3, #4
 801b76c:	693a      	ldr	r2, [r7, #16]
 801b76e:	4313      	orrs	r3, r2
 801b770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b772:	697b      	ldr	r3, [r7, #20]
 801b774:	f023 030a 	bic.w	r3, r3, #10
 801b778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b77a:	697a      	ldr	r2, [r7, #20]
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	4313      	orrs	r3, r2
 801b780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	693a      	ldr	r2, [r7, #16]
 801b786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	697a      	ldr	r2, [r7, #20]
 801b78c:	621a      	str	r2, [r3, #32]
}
 801b78e:	bf00      	nop
 801b790:	371c      	adds	r7, #28
 801b792:	46bd      	mov	sp, r7
 801b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b798:	4770      	bx	lr

0801b79a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b79a:	b480      	push	{r7}
 801b79c:	b087      	sub	sp, #28
 801b79e:	af00      	add	r7, sp, #0
 801b7a0:	60f8      	str	r0, [r7, #12]
 801b7a2:	60b9      	str	r1, [r7, #8]
 801b7a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	6a1b      	ldr	r3, [r3, #32]
 801b7aa:	f023 0210 	bic.w	r2, r3, #16
 801b7ae:	68fb      	ldr	r3, [r7, #12]
 801b7b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	699b      	ldr	r3, [r3, #24]
 801b7b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	6a1b      	ldr	r3, [r3, #32]
 801b7bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b7be:	697b      	ldr	r3, [r7, #20]
 801b7c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b7c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	031b      	lsls	r3, r3, #12
 801b7ca:	697a      	ldr	r2, [r7, #20]
 801b7cc:	4313      	orrs	r3, r2
 801b7ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b7d0:	693b      	ldr	r3, [r7, #16]
 801b7d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b7d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b7d8:	68bb      	ldr	r3, [r7, #8]
 801b7da:	011b      	lsls	r3, r3, #4
 801b7dc:	693a      	ldr	r2, [r7, #16]
 801b7de:	4313      	orrs	r3, r2
 801b7e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	697a      	ldr	r2, [r7, #20]
 801b7e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	693a      	ldr	r2, [r7, #16]
 801b7ec:	621a      	str	r2, [r3, #32]
}
 801b7ee:	bf00      	nop
 801b7f0:	371c      	adds	r7, #28
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f8:	4770      	bx	lr

0801b7fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b7fa:	b480      	push	{r7}
 801b7fc:	b085      	sub	sp, #20
 801b7fe:	af00      	add	r7, sp, #0
 801b800:	6078      	str	r0, [r7, #4]
 801b802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	689b      	ldr	r3, [r3, #8]
 801b808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b812:	683a      	ldr	r2, [r7, #0]
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	4313      	orrs	r3, r2
 801b818:	f043 0307 	orr.w	r3, r3, #7
 801b81c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	68fa      	ldr	r2, [r7, #12]
 801b822:	609a      	str	r2, [r3, #8]
}
 801b824:	bf00      	nop
 801b826:	3714      	adds	r7, #20
 801b828:	46bd      	mov	sp, r7
 801b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b82e:	4770      	bx	lr

0801b830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b830:	b480      	push	{r7}
 801b832:	b087      	sub	sp, #28
 801b834:	af00      	add	r7, sp, #0
 801b836:	60f8      	str	r0, [r7, #12]
 801b838:	60b9      	str	r1, [r7, #8]
 801b83a:	607a      	str	r2, [r7, #4]
 801b83c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b83e:	68fb      	ldr	r3, [r7, #12]
 801b840:	689b      	ldr	r3, [r3, #8]
 801b842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b844:	697b      	ldr	r3, [r7, #20]
 801b846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b84a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b84c:	683b      	ldr	r3, [r7, #0]
 801b84e:	021a      	lsls	r2, r3, #8
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	431a      	orrs	r2, r3
 801b854:	68bb      	ldr	r3, [r7, #8]
 801b856:	4313      	orrs	r3, r2
 801b858:	697a      	ldr	r2, [r7, #20]
 801b85a:	4313      	orrs	r3, r2
 801b85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	697a      	ldr	r2, [r7, #20]
 801b862:	609a      	str	r2, [r3, #8]
}
 801b864:	bf00      	nop
 801b866:	371c      	adds	r7, #28
 801b868:	46bd      	mov	sp, r7
 801b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86e:	4770      	bx	lr

0801b870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b870:	b480      	push	{r7}
 801b872:	b087      	sub	sp, #28
 801b874:	af00      	add	r7, sp, #0
 801b876:	60f8      	str	r0, [r7, #12]
 801b878:	60b9      	str	r1, [r7, #8]
 801b87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b87c:	68bb      	ldr	r3, [r7, #8]
 801b87e:	f003 031f 	and.w	r3, r3, #31
 801b882:	2201      	movs	r2, #1
 801b884:	fa02 f303 	lsl.w	r3, r2, r3
 801b888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	6a1a      	ldr	r2, [r3, #32]
 801b88e:	697b      	ldr	r3, [r7, #20]
 801b890:	43db      	mvns	r3, r3
 801b892:	401a      	ands	r2, r3
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	6a1a      	ldr	r2, [r3, #32]
 801b89c:	68bb      	ldr	r3, [r7, #8]
 801b89e:	f003 031f 	and.w	r3, r3, #31
 801b8a2:	6879      	ldr	r1, [r7, #4]
 801b8a4:	fa01 f303 	lsl.w	r3, r1, r3
 801b8a8:	431a      	orrs	r2, r3
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	621a      	str	r2, [r3, #32]
}
 801b8ae:	bf00      	nop
 801b8b0:	371c      	adds	r7, #28
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b8:	4770      	bx	lr
	...

0801b8bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b8bc:	b480      	push	{r7}
 801b8be:	b085      	sub	sp, #20
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
 801b8c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b8cc:	2b01      	cmp	r3, #1
 801b8ce:	d101      	bne.n	801b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b8d0:	2302      	movs	r3, #2
 801b8d2:	e05a      	b.n	801b98a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	2201      	movs	r2, #1
 801b8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	2202      	movs	r2, #2
 801b8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	685b      	ldr	r3, [r3, #4]
 801b8ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	689b      	ldr	r3, [r3, #8]
 801b8f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b8fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	68fa      	ldr	r2, [r7, #12]
 801b902:	4313      	orrs	r3, r2
 801b904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	68fa      	ldr	r2, [r7, #12]
 801b90c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	4a21      	ldr	r2, [pc, #132]	; (801b998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801b914:	4293      	cmp	r3, r2
 801b916:	d022      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b920:	d01d      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	4a1d      	ldr	r2, [pc, #116]	; (801b99c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801b928:	4293      	cmp	r3, r2
 801b92a:	d018      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	4a1b      	ldr	r2, [pc, #108]	; (801b9a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801b932:	4293      	cmp	r3, r2
 801b934:	d013      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	4a1a      	ldr	r2, [pc, #104]	; (801b9a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801b93c:	4293      	cmp	r3, r2
 801b93e:	d00e      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	4a18      	ldr	r2, [pc, #96]	; (801b9a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801b946:	4293      	cmp	r3, r2
 801b948:	d009      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	4a17      	ldr	r2, [pc, #92]	; (801b9ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801b950:	4293      	cmp	r3, r2
 801b952:	d004      	beq.n	801b95e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	4a15      	ldr	r2, [pc, #84]	; (801b9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801b95a:	4293      	cmp	r3, r2
 801b95c:	d10c      	bne.n	801b978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b95e:	68bb      	ldr	r3, [r7, #8]
 801b960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b966:	683b      	ldr	r3, [r7, #0]
 801b968:	685b      	ldr	r3, [r3, #4]
 801b96a:	68ba      	ldr	r2, [r7, #8]
 801b96c:	4313      	orrs	r3, r2
 801b96e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	68ba      	ldr	r2, [r7, #8]
 801b976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	2201      	movs	r2, #1
 801b97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	2200      	movs	r2, #0
 801b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b988:	2300      	movs	r3, #0
}
 801b98a:	4618      	mov	r0, r3
 801b98c:	3714      	adds	r7, #20
 801b98e:	46bd      	mov	sp, r7
 801b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b994:	4770      	bx	lr
 801b996:	bf00      	nop
 801b998:	40010000 	.word	0x40010000
 801b99c:	40000400 	.word	0x40000400
 801b9a0:	40000800 	.word	0x40000800
 801b9a4:	40000c00 	.word	0x40000c00
 801b9a8:	40010400 	.word	0x40010400
 801b9ac:	40014000 	.word	0x40014000
 801b9b0:	40001800 	.word	0x40001800

0801b9b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b9b4:	b480      	push	{r7}
 801b9b6:	b083      	sub	sp, #12
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b9bc:	bf00      	nop
 801b9be:	370c      	adds	r7, #12
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c6:	4770      	bx	lr

0801b9c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b9c8:	b480      	push	{r7}
 801b9ca:	b083      	sub	sp, #12
 801b9cc:	af00      	add	r7, sp, #0
 801b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b9d0:	bf00      	nop
 801b9d2:	370c      	adds	r7, #12
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9da:	4770      	bx	lr

0801b9dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b9dc:	b580      	push	{r7, lr}
 801b9de:	b082      	sub	sp, #8
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d101      	bne.n	801b9ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b9ea:	2301      	movs	r3, #1
 801b9ec:	e03f      	b.n	801ba6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b9f4:	b2db      	uxtb	r3, r3
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d106      	bne.n	801ba08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801ba02:	6878      	ldr	r0, [r7, #4]
 801ba04:	f7e6 ff00 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	2224      	movs	r2, #36	; 0x24
 801ba0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	68da      	ldr	r2, [r3, #12]
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ba1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801ba20:	6878      	ldr	r0, [r7, #4]
 801ba22:	f000 fb97 	bl	801c154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	691a      	ldr	r2, [r3, #16]
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801ba34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	695a      	ldr	r2, [r3, #20]
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ba44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	68da      	ldr	r2, [r3, #12]
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ba54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	2200      	movs	r2, #0
 801ba5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	2220      	movs	r2, #32
 801ba60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	2220      	movs	r2, #32
 801ba68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801ba6c:	2300      	movs	r3, #0
}
 801ba6e:	4618      	mov	r0, r3
 801ba70:	3708      	adds	r7, #8
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bd80      	pop	{r7, pc}

0801ba76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ba76:	b580      	push	{r7, lr}
 801ba78:	b088      	sub	sp, #32
 801ba7a:	af02      	add	r7, sp, #8
 801ba7c:	60f8      	str	r0, [r7, #12]
 801ba7e:	60b9      	str	r1, [r7, #8]
 801ba80:	603b      	str	r3, [r7, #0]
 801ba82:	4613      	mov	r3, r2
 801ba84:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801ba86:	2300      	movs	r3, #0
 801ba88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801ba90:	b2db      	uxtb	r3, r3
 801ba92:	2b20      	cmp	r3, #32
 801ba94:	f040 8083 	bne.w	801bb9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d002      	beq.n	801baa4 <HAL_UART_Transmit+0x2e>
 801ba9e:	88fb      	ldrh	r3, [r7, #6]
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d101      	bne.n	801baa8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801baa4:	2301      	movs	r3, #1
 801baa6:	e07b      	b.n	801bba0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801baae:	2b01      	cmp	r3, #1
 801bab0:	d101      	bne.n	801bab6 <HAL_UART_Transmit+0x40>
 801bab2:	2302      	movs	r3, #2
 801bab4:	e074      	b.n	801bba0 <HAL_UART_Transmit+0x12a>
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	2201      	movs	r2, #1
 801baba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	2200      	movs	r2, #0
 801bac2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	2221      	movs	r2, #33	; 0x21
 801bac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801bacc:	f7fa fac8 	bl	8016060 <HAL_GetTick>
 801bad0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	88fa      	ldrh	r2, [r7, #6]
 801bad6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	88fa      	ldrh	r2, [r7, #6]
 801badc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	2200      	movs	r2, #0
 801bae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801bae6:	e042      	b.n	801bb6e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801baec:	b29b      	uxth	r3, r3
 801baee:	3b01      	subs	r3, #1
 801baf0:	b29a      	uxth	r2, r3
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	689b      	ldr	r3, [r3, #8]
 801bafa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bafe:	d122      	bne.n	801bb46 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bb00:	683b      	ldr	r3, [r7, #0]
 801bb02:	9300      	str	r3, [sp, #0]
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	2200      	movs	r2, #0
 801bb08:	2180      	movs	r1, #128	; 0x80
 801bb0a:	68f8      	ldr	r0, [r7, #12]
 801bb0c:	f000 f9b6 	bl	801be7c <UART_WaitOnFlagUntilTimeout>
 801bb10:	4603      	mov	r3, r0
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d001      	beq.n	801bb1a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801bb16:	2303      	movs	r3, #3
 801bb18:	e042      	b.n	801bba0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801bb1a:	68bb      	ldr	r3, [r7, #8]
 801bb1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801bb1e:	693b      	ldr	r3, [r7, #16]
 801bb20:	881b      	ldrh	r3, [r3, #0]
 801bb22:	461a      	mov	r2, r3
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bb2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	691b      	ldr	r3, [r3, #16]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d103      	bne.n	801bb3e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801bb36:	68bb      	ldr	r3, [r7, #8]
 801bb38:	3302      	adds	r3, #2
 801bb3a:	60bb      	str	r3, [r7, #8]
 801bb3c:	e017      	b.n	801bb6e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801bb3e:	68bb      	ldr	r3, [r7, #8]
 801bb40:	3301      	adds	r3, #1
 801bb42:	60bb      	str	r3, [r7, #8]
 801bb44:	e013      	b.n	801bb6e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	9300      	str	r3, [sp, #0]
 801bb4a:	697b      	ldr	r3, [r7, #20]
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	2180      	movs	r1, #128	; 0x80
 801bb50:	68f8      	ldr	r0, [r7, #12]
 801bb52:	f000 f993 	bl	801be7c <UART_WaitOnFlagUntilTimeout>
 801bb56:	4603      	mov	r3, r0
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d001      	beq.n	801bb60 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801bb5c:	2303      	movs	r3, #3
 801bb5e:	e01f      	b.n	801bba0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801bb60:	68bb      	ldr	r3, [r7, #8]
 801bb62:	1c5a      	adds	r2, r3, #1
 801bb64:	60ba      	str	r2, [r7, #8]
 801bb66:	781a      	ldrb	r2, [r3, #0]
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bb72:	b29b      	uxth	r3, r3
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d1b7      	bne.n	801bae8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bb78:	683b      	ldr	r3, [r7, #0]
 801bb7a:	9300      	str	r3, [sp, #0]
 801bb7c:	697b      	ldr	r3, [r7, #20]
 801bb7e:	2200      	movs	r2, #0
 801bb80:	2140      	movs	r1, #64	; 0x40
 801bb82:	68f8      	ldr	r0, [r7, #12]
 801bb84:	f000 f97a 	bl	801be7c <UART_WaitOnFlagUntilTimeout>
 801bb88:	4603      	mov	r3, r0
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d001      	beq.n	801bb92 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801bb8e:	2303      	movs	r3, #3
 801bb90:	e006      	b.n	801bba0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	2220      	movs	r2, #32
 801bb96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	e000      	b.n	801bba0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801bb9e:	2302      	movs	r3, #2
  }
}
 801bba0:	4618      	mov	r0, r3
 801bba2:	3718      	adds	r7, #24
 801bba4:	46bd      	mov	sp, r7
 801bba6:	bd80      	pop	{r7, pc}

0801bba8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bba8:	b480      	push	{r7}
 801bbaa:	b085      	sub	sp, #20
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	60f8      	str	r0, [r7, #12]
 801bbb0:	60b9      	str	r1, [r7, #8]
 801bbb2:	4613      	mov	r3, r2
 801bbb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801bbbc:	b2db      	uxtb	r3, r3
 801bbbe:	2b20      	cmp	r3, #32
 801bbc0:	d140      	bne.n	801bc44 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801bbc2:	68bb      	ldr	r3, [r7, #8]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d002      	beq.n	801bbce <HAL_UART_Receive_IT+0x26>
 801bbc8:	88fb      	ldrh	r3, [r7, #6]
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d101      	bne.n	801bbd2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801bbce:	2301      	movs	r3, #1
 801bbd0:	e039      	b.n	801bc46 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bbd8:	2b01      	cmp	r3, #1
 801bbda:	d101      	bne.n	801bbe0 <HAL_UART_Receive_IT+0x38>
 801bbdc:	2302      	movs	r3, #2
 801bbde:	e032      	b.n	801bc46 <HAL_UART_Receive_IT+0x9e>
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	2201      	movs	r2, #1
 801bbe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	68ba      	ldr	r2, [r7, #8]
 801bbec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	88fa      	ldrh	r2, [r7, #6]
 801bbf2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	88fa      	ldrh	r2, [r7, #6]
 801bbf8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	2222      	movs	r2, #34	; 0x22
 801bc04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	2200      	movs	r2, #0
 801bc0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801bc10:	68fb      	ldr	r3, [r7, #12]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	68da      	ldr	r2, [r3, #12]
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bc1e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	695a      	ldr	r2, [r3, #20]
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	f042 0201 	orr.w	r2, r2, #1
 801bc2e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801bc30:	68fb      	ldr	r3, [r7, #12]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	68da      	ldr	r2, [r3, #12]
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	f042 0220 	orr.w	r2, r2, #32
 801bc3e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801bc40:	2300      	movs	r3, #0
 801bc42:	e000      	b.n	801bc46 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 801bc44:	2302      	movs	r3, #2
  }
}
 801bc46:	4618      	mov	r0, r3
 801bc48:	3714      	adds	r7, #20
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc50:	4770      	bx	lr
	...

0801bc54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801bc54:	b580      	push	{r7, lr}
 801bc56:	b088      	sub	sp, #32
 801bc58:	af00      	add	r7, sp, #0
 801bc5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	68db      	ldr	r3, [r3, #12]
 801bc6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	695b      	ldr	r3, [r3, #20]
 801bc72:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801bc74:	2300      	movs	r3, #0
 801bc76:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801bc78:	2300      	movs	r3, #0
 801bc7a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801bc7c:	69fb      	ldr	r3, [r7, #28]
 801bc7e:	f003 030f 	and.w	r3, r3, #15
 801bc82:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801bc84:	693b      	ldr	r3, [r7, #16]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d10d      	bne.n	801bca6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bc8a:	69fb      	ldr	r3, [r7, #28]
 801bc8c:	f003 0320 	and.w	r3, r3, #32
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d008      	beq.n	801bca6 <HAL_UART_IRQHandler+0x52>
 801bc94:	69bb      	ldr	r3, [r7, #24]
 801bc96:	f003 0320 	and.w	r3, r3, #32
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d003      	beq.n	801bca6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f000 f9d6 	bl	801c050 <UART_Receive_IT>
      return;
 801bca4:	e0d0      	b.n	801be48 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801bca6:	693b      	ldr	r3, [r7, #16]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	f000 80b0 	beq.w	801be0e <HAL_UART_IRQHandler+0x1ba>
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	f003 0301 	and.w	r3, r3, #1
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d105      	bne.n	801bcc4 <HAL_UART_IRQHandler+0x70>
 801bcb8:	69bb      	ldr	r3, [r7, #24]
 801bcba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	f000 80a5 	beq.w	801be0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801bcc4:	69fb      	ldr	r3, [r7, #28]
 801bcc6:	f003 0301 	and.w	r3, r3, #1
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d00a      	beq.n	801bce4 <HAL_UART_IRQHandler+0x90>
 801bcce:	69bb      	ldr	r3, [r7, #24]
 801bcd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d005      	beq.n	801bce4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bcdc:	f043 0201 	orr.w	r2, r3, #1
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bce4:	69fb      	ldr	r3, [r7, #28]
 801bce6:	f003 0304 	and.w	r3, r3, #4
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d00a      	beq.n	801bd04 <HAL_UART_IRQHandler+0xb0>
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	f003 0301 	and.w	r3, r3, #1
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d005      	beq.n	801bd04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bcfc:	f043 0202 	orr.w	r2, r3, #2
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801bd04:	69fb      	ldr	r3, [r7, #28]
 801bd06:	f003 0302 	and.w	r3, r3, #2
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d00a      	beq.n	801bd24 <HAL_UART_IRQHandler+0xd0>
 801bd0e:	697b      	ldr	r3, [r7, #20]
 801bd10:	f003 0301 	and.w	r3, r3, #1
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d005      	beq.n	801bd24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd1c:	f043 0204 	orr.w	r2, r3, #4
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801bd24:	69fb      	ldr	r3, [r7, #28]
 801bd26:	f003 0308 	and.w	r3, r3, #8
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d00f      	beq.n	801bd4e <HAL_UART_IRQHandler+0xfa>
 801bd2e:	69bb      	ldr	r3, [r7, #24]
 801bd30:	f003 0320 	and.w	r3, r3, #32
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d104      	bne.n	801bd42 <HAL_UART_IRQHandler+0xee>
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	f003 0301 	and.w	r3, r3, #1
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d005      	beq.n	801bd4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd46:	f043 0208 	orr.w	r2, r3, #8
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d077      	beq.n	801be46 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bd56:	69fb      	ldr	r3, [r7, #28]
 801bd58:	f003 0320 	and.w	r3, r3, #32
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d007      	beq.n	801bd70 <HAL_UART_IRQHandler+0x11c>
 801bd60:	69bb      	ldr	r3, [r7, #24]
 801bd62:	f003 0320 	and.w	r3, r3, #32
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d002      	beq.n	801bd70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801bd6a:	6878      	ldr	r0, [r7, #4]
 801bd6c:	f000 f970 	bl	801c050 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	695b      	ldr	r3, [r3, #20]
 801bd76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bd7a:	2b40      	cmp	r3, #64	; 0x40
 801bd7c:	bf0c      	ite	eq
 801bd7e:	2301      	moveq	r3, #1
 801bd80:	2300      	movne	r3, #0
 801bd82:	b2db      	uxtb	r3, r3
 801bd84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd8a:	f003 0308 	and.w	r3, r3, #8
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d102      	bne.n	801bd98 <HAL_UART_IRQHandler+0x144>
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d031      	beq.n	801bdfc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bd98:	6878      	ldr	r0, [r7, #4]
 801bd9a:	f000 f8b9 	bl	801bf10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	695b      	ldr	r3, [r3, #20]
 801bda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bda8:	2b40      	cmp	r3, #64	; 0x40
 801bdaa:	d123      	bne.n	801bdf4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	695a      	ldr	r2, [r3, #20]
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bdba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d013      	beq.n	801bdec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdc8:	4a21      	ldr	r2, [pc, #132]	; (801be50 <HAL_UART_IRQHandler+0x1fc>)
 801bdca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7fb fa83 	bl	80172dc <HAL_DMA_Abort_IT>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d016      	beq.n	801be0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bde2:	687a      	ldr	r2, [r7, #4]
 801bde4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801bde6:	4610      	mov	r0, r2
 801bde8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdea:	e00e      	b.n	801be0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bdec:	6878      	ldr	r0, [r7, #4]
 801bdee:	f000 f83b 	bl	801be68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdf2:	e00a      	b.n	801be0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bdf4:	6878      	ldr	r0, [r7, #4]
 801bdf6:	f000 f837 	bl	801be68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bdfa:	e006      	b.n	801be0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801bdfc:	6878      	ldr	r0, [r7, #4]
 801bdfe:	f000 f833 	bl	801be68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	2200      	movs	r2, #0
 801be06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801be08:	e01d      	b.n	801be46 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801be0a:	bf00      	nop
    return;
 801be0c:	e01b      	b.n	801be46 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801be0e:	69fb      	ldr	r3, [r7, #28]
 801be10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be14:	2b00      	cmp	r3, #0
 801be16:	d008      	beq.n	801be2a <HAL_UART_IRQHandler+0x1d6>
 801be18:	69bb      	ldr	r3, [r7, #24]
 801be1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d003      	beq.n	801be2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	f000 f8a6 	bl	801bf74 <UART_Transmit_IT>
    return;
 801be28:	e00e      	b.n	801be48 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be30:	2b00      	cmp	r3, #0
 801be32:	d009      	beq.n	801be48 <HAL_UART_IRQHandler+0x1f4>
 801be34:	69bb      	ldr	r3, [r7, #24]
 801be36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d004      	beq.n	801be48 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801be3e:	6878      	ldr	r0, [r7, #4]
 801be40:	f000 f8ee 	bl	801c020 <UART_EndTransmit_IT>
    return;
 801be44:	e000      	b.n	801be48 <HAL_UART_IRQHandler+0x1f4>
    return;
 801be46:	bf00      	nop
  }
}
 801be48:	3720      	adds	r7, #32
 801be4a:	46bd      	mov	sp, r7
 801be4c:	bd80      	pop	{r7, pc}
 801be4e:	bf00      	nop
 801be50:	0801bf4d 	.word	0x0801bf4d

0801be54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801be54:	b480      	push	{r7}
 801be56:	b083      	sub	sp, #12
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801be5c:	bf00      	nop
 801be5e:	370c      	adds	r7, #12
 801be60:	46bd      	mov	sp, r7
 801be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be66:	4770      	bx	lr

0801be68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801be68:	b480      	push	{r7}
 801be6a:	b083      	sub	sp, #12
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801be70:	bf00      	nop
 801be72:	370c      	adds	r7, #12
 801be74:	46bd      	mov	sp, r7
 801be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be7a:	4770      	bx	lr

0801be7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	b084      	sub	sp, #16
 801be80:	af00      	add	r7, sp, #0
 801be82:	60f8      	str	r0, [r7, #12]
 801be84:	60b9      	str	r1, [r7, #8]
 801be86:	603b      	str	r3, [r7, #0]
 801be88:	4613      	mov	r3, r2
 801be8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801be8c:	e02c      	b.n	801bee8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801be8e:	69bb      	ldr	r3, [r7, #24]
 801be90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801be94:	d028      	beq.n	801bee8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801be96:	69bb      	ldr	r3, [r7, #24]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d007      	beq.n	801beac <UART_WaitOnFlagUntilTimeout+0x30>
 801be9c:	f7fa f8e0 	bl	8016060 <HAL_GetTick>
 801bea0:	4602      	mov	r2, r0
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	1ad3      	subs	r3, r2, r3
 801bea6:	69ba      	ldr	r2, [r7, #24]
 801bea8:	429a      	cmp	r2, r3
 801beaa:	d21d      	bcs.n	801bee8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	68da      	ldr	r2, [r3, #12]
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801beba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	695a      	ldr	r2, [r3, #20]
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	f022 0201 	bic.w	r2, r2, #1
 801beca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	2220      	movs	r2, #32
 801bed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	2220      	movs	r2, #32
 801bed8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	2200      	movs	r2, #0
 801bee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801bee4:	2303      	movs	r3, #3
 801bee6:	e00f      	b.n	801bf08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	681a      	ldr	r2, [r3, #0]
 801beee:	68bb      	ldr	r3, [r7, #8]
 801bef0:	4013      	ands	r3, r2
 801bef2:	68ba      	ldr	r2, [r7, #8]
 801bef4:	429a      	cmp	r2, r3
 801bef6:	bf0c      	ite	eq
 801bef8:	2301      	moveq	r3, #1
 801befa:	2300      	movne	r3, #0
 801befc:	b2db      	uxtb	r3, r3
 801befe:	461a      	mov	r2, r3
 801bf00:	79fb      	ldrb	r3, [r7, #7]
 801bf02:	429a      	cmp	r2, r3
 801bf04:	d0c3      	beq.n	801be8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801bf06:	2300      	movs	r3, #0
}
 801bf08:	4618      	mov	r0, r3
 801bf0a:	3710      	adds	r7, #16
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	bd80      	pop	{r7, pc}

0801bf10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801bf10:	b480      	push	{r7}
 801bf12:	b083      	sub	sp, #12
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	68da      	ldr	r2, [r3, #12]
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801bf26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	695a      	ldr	r2, [r3, #20]
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	f022 0201 	bic.w	r2, r2, #1
 801bf36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2220      	movs	r2, #32
 801bf3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801bf40:	bf00      	nop
 801bf42:	370c      	adds	r7, #12
 801bf44:	46bd      	mov	sp, r7
 801bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf4a:	4770      	bx	lr

0801bf4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b084      	sub	sp, #16
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	2200      	movs	r2, #0
 801bf64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801bf66:	68f8      	ldr	r0, [r7, #12]
 801bf68:	f7ff ff7e 	bl	801be68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801bf6c:	bf00      	nop
 801bf6e:	3710      	adds	r7, #16
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}

0801bf74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801bf74:	b480      	push	{r7}
 801bf76:	b085      	sub	sp, #20
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801bf82:	b2db      	uxtb	r3, r3
 801bf84:	2b21      	cmp	r3, #33	; 0x21
 801bf86:	d144      	bne.n	801c012 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	689b      	ldr	r3, [r3, #8]
 801bf8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bf90:	d11a      	bne.n	801bfc8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	6a1b      	ldr	r3, [r3, #32]
 801bf96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	881b      	ldrh	r3, [r3, #0]
 801bf9c:	461a      	mov	r2, r3
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801bfa6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	691b      	ldr	r3, [r3, #16]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d105      	bne.n	801bfbc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	6a1b      	ldr	r3, [r3, #32]
 801bfb4:	1c9a      	adds	r2, r3, #2
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	621a      	str	r2, [r3, #32]
 801bfba:	e00e      	b.n	801bfda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	6a1b      	ldr	r3, [r3, #32]
 801bfc0:	1c5a      	adds	r2, r3, #1
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	621a      	str	r2, [r3, #32]
 801bfc6:	e008      	b.n	801bfda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	6a1b      	ldr	r3, [r3, #32]
 801bfcc:	1c59      	adds	r1, r3, #1
 801bfce:	687a      	ldr	r2, [r7, #4]
 801bfd0:	6211      	str	r1, [r2, #32]
 801bfd2:	781a      	ldrb	r2, [r3, #0]
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bfde:	b29b      	uxth	r3, r3
 801bfe0:	3b01      	subs	r3, #1
 801bfe2:	b29b      	uxth	r3, r3
 801bfe4:	687a      	ldr	r2, [r7, #4]
 801bfe6:	4619      	mov	r1, r3
 801bfe8:	84d1      	strh	r1, [r2, #38]	; 0x26
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d10f      	bne.n	801c00e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	68da      	ldr	r2, [r3, #12]
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801bffc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	68da      	ldr	r2, [r3, #12]
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c00c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c00e:	2300      	movs	r3, #0
 801c010:	e000      	b.n	801c014 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c012:	2302      	movs	r3, #2
  }
}
 801c014:	4618      	mov	r0, r3
 801c016:	3714      	adds	r7, #20
 801c018:	46bd      	mov	sp, r7
 801c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c01e:	4770      	bx	lr

0801c020 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b082      	sub	sp, #8
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	68da      	ldr	r2, [r3, #12]
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c036:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2220      	movs	r2, #32
 801c03c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c040:	6878      	ldr	r0, [r7, #4]
 801c042:	f7ff ff07 	bl	801be54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c046:	2300      	movs	r3, #0
}
 801c048:	4618      	mov	r0, r3
 801c04a:	3708      	adds	r7, #8
 801c04c:	46bd      	mov	sp, r7
 801c04e:	bd80      	pop	{r7, pc}

0801c050 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c050:	b580      	push	{r7, lr}
 801c052:	b084      	sub	sp, #16
 801c054:	af00      	add	r7, sp, #0
 801c056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801c05e:	b2db      	uxtb	r3, r3
 801c060:	2b22      	cmp	r3, #34	; 0x22
 801c062:	d171      	bne.n	801c148 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	689b      	ldr	r3, [r3, #8]
 801c068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c06c:	d123      	bne.n	801c0b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c072:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	691b      	ldr	r3, [r3, #16]
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d10e      	bne.n	801c09a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	685b      	ldr	r3, [r3, #4]
 801c082:	b29b      	uxth	r3, r3
 801c084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c088:	b29a      	uxth	r2, r3
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c092:	1c9a      	adds	r2, r3, #2
 801c094:	687b      	ldr	r3, [r7, #4]
 801c096:	629a      	str	r2, [r3, #40]	; 0x28
 801c098:	e029      	b.n	801c0ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	685b      	ldr	r3, [r3, #4]
 801c0a0:	b29b      	uxth	r3, r3
 801c0a2:	b2db      	uxtb	r3, r3
 801c0a4:	b29a      	uxth	r2, r3
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0ae:	1c5a      	adds	r2, r3, #1
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	629a      	str	r2, [r3, #40]	; 0x28
 801c0b4:	e01b      	b.n	801c0ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	691b      	ldr	r3, [r3, #16]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d10a      	bne.n	801c0d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	6858      	ldr	r0, [r3, #4]
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0c8:	1c59      	adds	r1, r3, #1
 801c0ca:	687a      	ldr	r2, [r7, #4]
 801c0cc:	6291      	str	r1, [r2, #40]	; 0x28
 801c0ce:	b2c2      	uxtb	r2, r0
 801c0d0:	701a      	strb	r2, [r3, #0]
 801c0d2:	e00c      	b.n	801c0ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	685b      	ldr	r3, [r3, #4]
 801c0da:	b2da      	uxtb	r2, r3
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0e0:	1c58      	adds	r0, r3, #1
 801c0e2:	6879      	ldr	r1, [r7, #4]
 801c0e4:	6288      	str	r0, [r1, #40]	; 0x28
 801c0e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c0ea:	b2d2      	uxtb	r2, r2
 801c0ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c0f2:	b29b      	uxth	r3, r3
 801c0f4:	3b01      	subs	r3, #1
 801c0f6:	b29b      	uxth	r3, r3
 801c0f8:	687a      	ldr	r2, [r7, #4]
 801c0fa:	4619      	mov	r1, r3
 801c0fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d120      	bne.n	801c144 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	68da      	ldr	r2, [r3, #12]
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	f022 0220 	bic.w	r2, r2, #32
 801c110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	68da      	ldr	r2, [r3, #12]
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c120:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	695a      	ldr	r2, [r3, #20]
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	f022 0201 	bic.w	r2, r2, #1
 801c130:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	2220      	movs	r2, #32
 801c136:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801c13a:	6878      	ldr	r0, [r7, #4]
 801c13c:	f7e8 fadc 	bl	80046f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801c140:	2300      	movs	r3, #0
 801c142:	e002      	b.n	801c14a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801c144:	2300      	movs	r3, #0
 801c146:	e000      	b.n	801c14a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801c148:	2302      	movs	r3, #2
  }
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	3710      	adds	r7, #16
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}
	...

0801c154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c158:	b0bd      	sub	sp, #244	; 0xf4
 801c15a:	af00      	add	r7, sp, #0
 801c15c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	691b      	ldr	r3, [r3, #16]
 801c168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c170:	68d9      	ldr	r1, [r3, #12]
 801c172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	ea40 0301 	orr.w	r3, r0, r1
 801c17c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c182:	689a      	ldr	r2, [r3, #8]
 801c184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c188:	691b      	ldr	r3, [r3, #16]
 801c18a:	431a      	orrs	r2, r3
 801c18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c190:	695b      	ldr	r3, [r3, #20]
 801c192:	431a      	orrs	r2, r3
 801c194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c198:	69db      	ldr	r3, [r3, #28]
 801c19a:	4313      	orrs	r3, r2
 801c19c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 801c1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	68db      	ldr	r3, [r3, #12]
 801c1a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c1ac:	f021 010c 	bic.w	r1, r1, #12
 801c1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1b4:	681a      	ldr	r2, [r3, #0]
 801c1b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801c1ba:	430b      	orrs	r3, r1
 801c1bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	695b      	ldr	r3, [r3, #20]
 801c1c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1ce:	6999      	ldr	r1, [r3, #24]
 801c1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1d4:	681a      	ldr	r2, [r3, #0]
 801c1d6:	ea40 0301 	orr.w	r3, r0, r1
 801c1da:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1e0:	69db      	ldr	r3, [r3, #28]
 801c1e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1e6:	f040 81a5 	bne.w	801c534 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1ee:	681a      	ldr	r2, [r3, #0]
 801c1f0:	4bcd      	ldr	r3, [pc, #820]	; (801c528 <UART_SetConfig+0x3d4>)
 801c1f2:	429a      	cmp	r2, r3
 801c1f4:	d006      	beq.n	801c204 <UART_SetConfig+0xb0>
 801c1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c1fa:	681a      	ldr	r2, [r3, #0]
 801c1fc:	4bcb      	ldr	r3, [pc, #812]	; (801c52c <UART_SetConfig+0x3d8>)
 801c1fe:	429a      	cmp	r2, r3
 801c200:	f040 80cb 	bne.w	801c39a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c204:	f7fe fa86 	bl	801a714 <HAL_RCC_GetPCLK2Freq>
 801c208:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c20c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c210:	461c      	mov	r4, r3
 801c212:	f04f 0500 	mov.w	r5, #0
 801c216:	4622      	mov	r2, r4
 801c218:	462b      	mov	r3, r5
 801c21a:	1891      	adds	r1, r2, r2
 801c21c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801c220:	415b      	adcs	r3, r3
 801c222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801c226:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801c22a:	1912      	adds	r2, r2, r4
 801c22c:	eb45 0303 	adc.w	r3, r5, r3
 801c230:	f04f 0000 	mov.w	r0, #0
 801c234:	f04f 0100 	mov.w	r1, #0
 801c238:	00d9      	lsls	r1, r3, #3
 801c23a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c23e:	00d0      	lsls	r0, r2, #3
 801c240:	4602      	mov	r2, r0
 801c242:	460b      	mov	r3, r1
 801c244:	1911      	adds	r1, r2, r4
 801c246:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801c24a:	416b      	adcs	r3, r5
 801c24c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c254:	685b      	ldr	r3, [r3, #4]
 801c256:	461a      	mov	r2, r3
 801c258:	f04f 0300 	mov.w	r3, #0
 801c25c:	1891      	adds	r1, r2, r2
 801c25e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801c262:	415b      	adcs	r3, r3
 801c264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c268:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801c26c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801c270:	f7e4 fd0a 	bl	8000c88 <__aeabi_uldivmod>
 801c274:	4602      	mov	r2, r0
 801c276:	460b      	mov	r3, r1
 801c278:	4bad      	ldr	r3, [pc, #692]	; (801c530 <UART_SetConfig+0x3dc>)
 801c27a:	fba3 2302 	umull	r2, r3, r3, r2
 801c27e:	095b      	lsrs	r3, r3, #5
 801c280:	011e      	lsls	r6, r3, #4
 801c282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c286:	461c      	mov	r4, r3
 801c288:	f04f 0500 	mov.w	r5, #0
 801c28c:	4622      	mov	r2, r4
 801c28e:	462b      	mov	r3, r5
 801c290:	1891      	adds	r1, r2, r2
 801c292:	67b9      	str	r1, [r7, #120]	; 0x78
 801c294:	415b      	adcs	r3, r3
 801c296:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c298:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801c29c:	1912      	adds	r2, r2, r4
 801c29e:	eb45 0303 	adc.w	r3, r5, r3
 801c2a2:	f04f 0000 	mov.w	r0, #0
 801c2a6:	f04f 0100 	mov.w	r1, #0
 801c2aa:	00d9      	lsls	r1, r3, #3
 801c2ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c2b0:	00d0      	lsls	r0, r2, #3
 801c2b2:	4602      	mov	r2, r0
 801c2b4:	460b      	mov	r3, r1
 801c2b6:	1911      	adds	r1, r2, r4
 801c2b8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 801c2bc:	416b      	adcs	r3, r5
 801c2be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c2c6:	685b      	ldr	r3, [r3, #4]
 801c2c8:	461a      	mov	r2, r3
 801c2ca:	f04f 0300 	mov.w	r3, #0
 801c2ce:	1891      	adds	r1, r2, r2
 801c2d0:	6739      	str	r1, [r7, #112]	; 0x70
 801c2d2:	415b      	adcs	r3, r3
 801c2d4:	677b      	str	r3, [r7, #116]	; 0x74
 801c2d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801c2da:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801c2de:	f7e4 fcd3 	bl	8000c88 <__aeabi_uldivmod>
 801c2e2:	4602      	mov	r2, r0
 801c2e4:	460b      	mov	r3, r1
 801c2e6:	4b92      	ldr	r3, [pc, #584]	; (801c530 <UART_SetConfig+0x3dc>)
 801c2e8:	fba3 1302 	umull	r1, r3, r3, r2
 801c2ec:	095b      	lsrs	r3, r3, #5
 801c2ee:	2164      	movs	r1, #100	; 0x64
 801c2f0:	fb01 f303 	mul.w	r3, r1, r3
 801c2f4:	1ad3      	subs	r3, r2, r3
 801c2f6:	00db      	lsls	r3, r3, #3
 801c2f8:	3332      	adds	r3, #50	; 0x32
 801c2fa:	4a8d      	ldr	r2, [pc, #564]	; (801c530 <UART_SetConfig+0x3dc>)
 801c2fc:	fba2 2303 	umull	r2, r3, r2, r3
 801c300:	095b      	lsrs	r3, r3, #5
 801c302:	005b      	lsls	r3, r3, #1
 801c304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c308:	441e      	add	r6, r3
 801c30a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c30e:	4618      	mov	r0, r3
 801c310:	f04f 0100 	mov.w	r1, #0
 801c314:	4602      	mov	r2, r0
 801c316:	460b      	mov	r3, r1
 801c318:	1894      	adds	r4, r2, r2
 801c31a:	66bc      	str	r4, [r7, #104]	; 0x68
 801c31c:	415b      	adcs	r3, r3
 801c31e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c320:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801c324:	1812      	adds	r2, r2, r0
 801c326:	eb41 0303 	adc.w	r3, r1, r3
 801c32a:	f04f 0400 	mov.w	r4, #0
 801c32e:	f04f 0500 	mov.w	r5, #0
 801c332:	00dd      	lsls	r5, r3, #3
 801c334:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c338:	00d4      	lsls	r4, r2, #3
 801c33a:	4622      	mov	r2, r4
 801c33c:	462b      	mov	r3, r5
 801c33e:	1814      	adds	r4, r2, r0
 801c340:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801c344:	414b      	adcs	r3, r1
 801c346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c34e:	685b      	ldr	r3, [r3, #4]
 801c350:	461a      	mov	r2, r3
 801c352:	f04f 0300 	mov.w	r3, #0
 801c356:	1891      	adds	r1, r2, r2
 801c358:	6639      	str	r1, [r7, #96]	; 0x60
 801c35a:	415b      	adcs	r3, r3
 801c35c:	667b      	str	r3, [r7, #100]	; 0x64
 801c35e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801c362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801c366:	f7e4 fc8f 	bl	8000c88 <__aeabi_uldivmod>
 801c36a:	4602      	mov	r2, r0
 801c36c:	460b      	mov	r3, r1
 801c36e:	4b70      	ldr	r3, [pc, #448]	; (801c530 <UART_SetConfig+0x3dc>)
 801c370:	fba3 1302 	umull	r1, r3, r3, r2
 801c374:	095b      	lsrs	r3, r3, #5
 801c376:	2164      	movs	r1, #100	; 0x64
 801c378:	fb01 f303 	mul.w	r3, r1, r3
 801c37c:	1ad3      	subs	r3, r2, r3
 801c37e:	00db      	lsls	r3, r3, #3
 801c380:	3332      	adds	r3, #50	; 0x32
 801c382:	4a6b      	ldr	r2, [pc, #428]	; (801c530 <UART_SetConfig+0x3dc>)
 801c384:	fba2 2303 	umull	r2, r3, r2, r3
 801c388:	095b      	lsrs	r3, r3, #5
 801c38a:	f003 0207 	and.w	r2, r3, #7
 801c38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	4432      	add	r2, r6
 801c396:	609a      	str	r2, [r3, #8]
 801c398:	e26d      	b.n	801c876 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c39a:	f7fe f9a7 	bl	801a6ec <HAL_RCC_GetPCLK1Freq>
 801c39e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c3a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c3a6:	461c      	mov	r4, r3
 801c3a8:	f04f 0500 	mov.w	r5, #0
 801c3ac:	4622      	mov	r2, r4
 801c3ae:	462b      	mov	r3, r5
 801c3b0:	1891      	adds	r1, r2, r2
 801c3b2:	65b9      	str	r1, [r7, #88]	; 0x58
 801c3b4:	415b      	adcs	r3, r3
 801c3b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c3b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c3bc:	1912      	adds	r2, r2, r4
 801c3be:	eb45 0303 	adc.w	r3, r5, r3
 801c3c2:	f04f 0000 	mov.w	r0, #0
 801c3c6:	f04f 0100 	mov.w	r1, #0
 801c3ca:	00d9      	lsls	r1, r3, #3
 801c3cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c3d0:	00d0      	lsls	r0, r2, #3
 801c3d2:	4602      	mov	r2, r0
 801c3d4:	460b      	mov	r3, r1
 801c3d6:	1911      	adds	r1, r2, r4
 801c3d8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801c3dc:	416b      	adcs	r3, r5
 801c3de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c3e6:	685b      	ldr	r3, [r3, #4]
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	f04f 0300 	mov.w	r3, #0
 801c3ee:	1891      	adds	r1, r2, r2
 801c3f0:	6539      	str	r1, [r7, #80]	; 0x50
 801c3f2:	415b      	adcs	r3, r3
 801c3f4:	657b      	str	r3, [r7, #84]	; 0x54
 801c3f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c3fa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801c3fe:	f7e4 fc43 	bl	8000c88 <__aeabi_uldivmod>
 801c402:	4602      	mov	r2, r0
 801c404:	460b      	mov	r3, r1
 801c406:	4b4a      	ldr	r3, [pc, #296]	; (801c530 <UART_SetConfig+0x3dc>)
 801c408:	fba3 2302 	umull	r2, r3, r3, r2
 801c40c:	095b      	lsrs	r3, r3, #5
 801c40e:	011e      	lsls	r6, r3, #4
 801c410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c414:	461c      	mov	r4, r3
 801c416:	f04f 0500 	mov.w	r5, #0
 801c41a:	4622      	mov	r2, r4
 801c41c:	462b      	mov	r3, r5
 801c41e:	1891      	adds	r1, r2, r2
 801c420:	64b9      	str	r1, [r7, #72]	; 0x48
 801c422:	415b      	adcs	r3, r3
 801c424:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c426:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c42a:	1912      	adds	r2, r2, r4
 801c42c:	eb45 0303 	adc.w	r3, r5, r3
 801c430:	f04f 0000 	mov.w	r0, #0
 801c434:	f04f 0100 	mov.w	r1, #0
 801c438:	00d9      	lsls	r1, r3, #3
 801c43a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c43e:	00d0      	lsls	r0, r2, #3
 801c440:	4602      	mov	r2, r0
 801c442:	460b      	mov	r3, r1
 801c444:	1911      	adds	r1, r2, r4
 801c446:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801c44a:	416b      	adcs	r3, r5
 801c44c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	461a      	mov	r2, r3
 801c458:	f04f 0300 	mov.w	r3, #0
 801c45c:	1891      	adds	r1, r2, r2
 801c45e:	6439      	str	r1, [r7, #64]	; 0x40
 801c460:	415b      	adcs	r3, r3
 801c462:	647b      	str	r3, [r7, #68]	; 0x44
 801c464:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c468:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801c46c:	f7e4 fc0c 	bl	8000c88 <__aeabi_uldivmod>
 801c470:	4602      	mov	r2, r0
 801c472:	460b      	mov	r3, r1
 801c474:	4b2e      	ldr	r3, [pc, #184]	; (801c530 <UART_SetConfig+0x3dc>)
 801c476:	fba3 1302 	umull	r1, r3, r3, r2
 801c47a:	095b      	lsrs	r3, r3, #5
 801c47c:	2164      	movs	r1, #100	; 0x64
 801c47e:	fb01 f303 	mul.w	r3, r1, r3
 801c482:	1ad3      	subs	r3, r2, r3
 801c484:	00db      	lsls	r3, r3, #3
 801c486:	3332      	adds	r3, #50	; 0x32
 801c488:	4a29      	ldr	r2, [pc, #164]	; (801c530 <UART_SetConfig+0x3dc>)
 801c48a:	fba2 2303 	umull	r2, r3, r2, r3
 801c48e:	095b      	lsrs	r3, r3, #5
 801c490:	005b      	lsls	r3, r3, #1
 801c492:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c496:	441e      	add	r6, r3
 801c498:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c49c:	4618      	mov	r0, r3
 801c49e:	f04f 0100 	mov.w	r1, #0
 801c4a2:	4602      	mov	r2, r0
 801c4a4:	460b      	mov	r3, r1
 801c4a6:	1894      	adds	r4, r2, r2
 801c4a8:	63bc      	str	r4, [r7, #56]	; 0x38
 801c4aa:	415b      	adcs	r3, r3
 801c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c4ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c4b2:	1812      	adds	r2, r2, r0
 801c4b4:	eb41 0303 	adc.w	r3, r1, r3
 801c4b8:	f04f 0400 	mov.w	r4, #0
 801c4bc:	f04f 0500 	mov.w	r5, #0
 801c4c0:	00dd      	lsls	r5, r3, #3
 801c4c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c4c6:	00d4      	lsls	r4, r2, #3
 801c4c8:	4622      	mov	r2, r4
 801c4ca:	462b      	mov	r3, r5
 801c4cc:	1814      	adds	r4, r2, r0
 801c4ce:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801c4d2:	414b      	adcs	r3, r1
 801c4d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c4dc:	685b      	ldr	r3, [r3, #4]
 801c4de:	461a      	mov	r2, r3
 801c4e0:	f04f 0300 	mov.w	r3, #0
 801c4e4:	1891      	adds	r1, r2, r2
 801c4e6:	6339      	str	r1, [r7, #48]	; 0x30
 801c4e8:	415b      	adcs	r3, r3
 801c4ea:	637b      	str	r3, [r7, #52]	; 0x34
 801c4ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801c4f0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801c4f4:	f7e4 fbc8 	bl	8000c88 <__aeabi_uldivmod>
 801c4f8:	4602      	mov	r2, r0
 801c4fa:	460b      	mov	r3, r1
 801c4fc:	4b0c      	ldr	r3, [pc, #48]	; (801c530 <UART_SetConfig+0x3dc>)
 801c4fe:	fba3 1302 	umull	r1, r3, r3, r2
 801c502:	095b      	lsrs	r3, r3, #5
 801c504:	2164      	movs	r1, #100	; 0x64
 801c506:	fb01 f303 	mul.w	r3, r1, r3
 801c50a:	1ad3      	subs	r3, r2, r3
 801c50c:	00db      	lsls	r3, r3, #3
 801c50e:	3332      	adds	r3, #50	; 0x32
 801c510:	4a07      	ldr	r2, [pc, #28]	; (801c530 <UART_SetConfig+0x3dc>)
 801c512:	fba2 2303 	umull	r2, r3, r2, r3
 801c516:	095b      	lsrs	r3, r3, #5
 801c518:	f003 0207 	and.w	r2, r3, #7
 801c51c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c520:	681b      	ldr	r3, [r3, #0]
 801c522:	4432      	add	r2, r6
 801c524:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801c526:	e1a6      	b.n	801c876 <UART_SetConfig+0x722>
 801c528:	40011000 	.word	0x40011000
 801c52c:	40011400 	.word	0x40011400
 801c530:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c538:	681a      	ldr	r2, [r3, #0]
 801c53a:	4bd1      	ldr	r3, [pc, #836]	; (801c880 <UART_SetConfig+0x72c>)
 801c53c:	429a      	cmp	r2, r3
 801c53e:	d006      	beq.n	801c54e <UART_SetConfig+0x3fa>
 801c540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c544:	681a      	ldr	r2, [r3, #0]
 801c546:	4bcf      	ldr	r3, [pc, #828]	; (801c884 <UART_SetConfig+0x730>)
 801c548:	429a      	cmp	r2, r3
 801c54a:	f040 80ca 	bne.w	801c6e2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801c54e:	f7fe f8e1 	bl	801a714 <HAL_RCC_GetPCLK2Freq>
 801c552:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c556:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c55a:	461c      	mov	r4, r3
 801c55c:	f04f 0500 	mov.w	r5, #0
 801c560:	4622      	mov	r2, r4
 801c562:	462b      	mov	r3, r5
 801c564:	1891      	adds	r1, r2, r2
 801c566:	62b9      	str	r1, [r7, #40]	; 0x28
 801c568:	415b      	adcs	r3, r3
 801c56a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c56c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c570:	1912      	adds	r2, r2, r4
 801c572:	eb45 0303 	adc.w	r3, r5, r3
 801c576:	f04f 0000 	mov.w	r0, #0
 801c57a:	f04f 0100 	mov.w	r1, #0
 801c57e:	00d9      	lsls	r1, r3, #3
 801c580:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c584:	00d0      	lsls	r0, r2, #3
 801c586:	4602      	mov	r2, r0
 801c588:	460b      	mov	r3, r1
 801c58a:	eb12 0a04 	adds.w	sl, r2, r4
 801c58e:	eb43 0b05 	adc.w	fp, r3, r5
 801c592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c596:	685b      	ldr	r3, [r3, #4]
 801c598:	4618      	mov	r0, r3
 801c59a:	f04f 0100 	mov.w	r1, #0
 801c59e:	f04f 0200 	mov.w	r2, #0
 801c5a2:	f04f 0300 	mov.w	r3, #0
 801c5a6:	008b      	lsls	r3, r1, #2
 801c5a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c5ac:	0082      	lsls	r2, r0, #2
 801c5ae:	4650      	mov	r0, sl
 801c5b0:	4659      	mov	r1, fp
 801c5b2:	f7e4 fb69 	bl	8000c88 <__aeabi_uldivmod>
 801c5b6:	4602      	mov	r2, r0
 801c5b8:	460b      	mov	r3, r1
 801c5ba:	4bb3      	ldr	r3, [pc, #716]	; (801c888 <UART_SetConfig+0x734>)
 801c5bc:	fba3 2302 	umull	r2, r3, r3, r2
 801c5c0:	095b      	lsrs	r3, r3, #5
 801c5c2:	011e      	lsls	r6, r3, #4
 801c5c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	f04f 0100 	mov.w	r1, #0
 801c5ce:	4602      	mov	r2, r0
 801c5d0:	460b      	mov	r3, r1
 801c5d2:	1894      	adds	r4, r2, r2
 801c5d4:	623c      	str	r4, [r7, #32]
 801c5d6:	415b      	adcs	r3, r3
 801c5d8:	627b      	str	r3, [r7, #36]	; 0x24
 801c5da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c5de:	1812      	adds	r2, r2, r0
 801c5e0:	eb41 0303 	adc.w	r3, r1, r3
 801c5e4:	f04f 0400 	mov.w	r4, #0
 801c5e8:	f04f 0500 	mov.w	r5, #0
 801c5ec:	00dd      	lsls	r5, r3, #3
 801c5ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c5f2:	00d4      	lsls	r4, r2, #3
 801c5f4:	4622      	mov	r2, r4
 801c5f6:	462b      	mov	r3, r5
 801c5f8:	1814      	adds	r4, r2, r0
 801c5fa:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801c5fe:	414b      	adcs	r3, r1
 801c600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c608:	685b      	ldr	r3, [r3, #4]
 801c60a:	4618      	mov	r0, r3
 801c60c:	f04f 0100 	mov.w	r1, #0
 801c610:	f04f 0200 	mov.w	r2, #0
 801c614:	f04f 0300 	mov.w	r3, #0
 801c618:	008b      	lsls	r3, r1, #2
 801c61a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c61e:	0082      	lsls	r2, r0, #2
 801c620:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801c624:	f7e4 fb30 	bl	8000c88 <__aeabi_uldivmod>
 801c628:	4602      	mov	r2, r0
 801c62a:	460b      	mov	r3, r1
 801c62c:	4b96      	ldr	r3, [pc, #600]	; (801c888 <UART_SetConfig+0x734>)
 801c62e:	fba3 1302 	umull	r1, r3, r3, r2
 801c632:	095b      	lsrs	r3, r3, #5
 801c634:	2164      	movs	r1, #100	; 0x64
 801c636:	fb01 f303 	mul.w	r3, r1, r3
 801c63a:	1ad3      	subs	r3, r2, r3
 801c63c:	011b      	lsls	r3, r3, #4
 801c63e:	3332      	adds	r3, #50	; 0x32
 801c640:	4a91      	ldr	r2, [pc, #580]	; (801c888 <UART_SetConfig+0x734>)
 801c642:	fba2 2303 	umull	r2, r3, r2, r3
 801c646:	095b      	lsrs	r3, r3, #5
 801c648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c64c:	441e      	add	r6, r3
 801c64e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c652:	4618      	mov	r0, r3
 801c654:	f04f 0100 	mov.w	r1, #0
 801c658:	4602      	mov	r2, r0
 801c65a:	460b      	mov	r3, r1
 801c65c:	1894      	adds	r4, r2, r2
 801c65e:	61bc      	str	r4, [r7, #24]
 801c660:	415b      	adcs	r3, r3
 801c662:	61fb      	str	r3, [r7, #28]
 801c664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c668:	1812      	adds	r2, r2, r0
 801c66a:	eb41 0303 	adc.w	r3, r1, r3
 801c66e:	f04f 0400 	mov.w	r4, #0
 801c672:	f04f 0500 	mov.w	r5, #0
 801c676:	00dd      	lsls	r5, r3, #3
 801c678:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c67c:	00d4      	lsls	r4, r2, #3
 801c67e:	4622      	mov	r2, r4
 801c680:	462b      	mov	r3, r5
 801c682:	1814      	adds	r4, r2, r0
 801c684:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 801c688:	414b      	adcs	r3, r1
 801c68a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c692:	685b      	ldr	r3, [r3, #4]
 801c694:	4618      	mov	r0, r3
 801c696:	f04f 0100 	mov.w	r1, #0
 801c69a:	f04f 0200 	mov.w	r2, #0
 801c69e:	f04f 0300 	mov.w	r3, #0
 801c6a2:	008b      	lsls	r3, r1, #2
 801c6a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c6a8:	0082      	lsls	r2, r0, #2
 801c6aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801c6ae:	f7e4 faeb 	bl	8000c88 <__aeabi_uldivmod>
 801c6b2:	4602      	mov	r2, r0
 801c6b4:	460b      	mov	r3, r1
 801c6b6:	4b74      	ldr	r3, [pc, #464]	; (801c888 <UART_SetConfig+0x734>)
 801c6b8:	fba3 1302 	umull	r1, r3, r3, r2
 801c6bc:	095b      	lsrs	r3, r3, #5
 801c6be:	2164      	movs	r1, #100	; 0x64
 801c6c0:	fb01 f303 	mul.w	r3, r1, r3
 801c6c4:	1ad3      	subs	r3, r2, r3
 801c6c6:	011b      	lsls	r3, r3, #4
 801c6c8:	3332      	adds	r3, #50	; 0x32
 801c6ca:	4a6f      	ldr	r2, [pc, #444]	; (801c888 <UART_SetConfig+0x734>)
 801c6cc:	fba2 2303 	umull	r2, r3, r2, r3
 801c6d0:	095b      	lsrs	r3, r3, #5
 801c6d2:	f003 020f 	and.w	r2, r3, #15
 801c6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	4432      	add	r2, r6
 801c6de:	609a      	str	r2, [r3, #8]
 801c6e0:	e0c9      	b.n	801c876 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801c6e2:	f7fe f803 	bl	801a6ec <HAL_RCC_GetPCLK1Freq>
 801c6e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c6ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c6ee:	461c      	mov	r4, r3
 801c6f0:	f04f 0500 	mov.w	r5, #0
 801c6f4:	4622      	mov	r2, r4
 801c6f6:	462b      	mov	r3, r5
 801c6f8:	1891      	adds	r1, r2, r2
 801c6fa:	6139      	str	r1, [r7, #16]
 801c6fc:	415b      	adcs	r3, r3
 801c6fe:	617b      	str	r3, [r7, #20]
 801c700:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c704:	1912      	adds	r2, r2, r4
 801c706:	eb45 0303 	adc.w	r3, r5, r3
 801c70a:	f04f 0000 	mov.w	r0, #0
 801c70e:	f04f 0100 	mov.w	r1, #0
 801c712:	00d9      	lsls	r1, r3, #3
 801c714:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801c718:	00d0      	lsls	r0, r2, #3
 801c71a:	4602      	mov	r2, r0
 801c71c:	460b      	mov	r3, r1
 801c71e:	eb12 0804 	adds.w	r8, r2, r4
 801c722:	eb43 0905 	adc.w	r9, r3, r5
 801c726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c72a:	685b      	ldr	r3, [r3, #4]
 801c72c:	4618      	mov	r0, r3
 801c72e:	f04f 0100 	mov.w	r1, #0
 801c732:	f04f 0200 	mov.w	r2, #0
 801c736:	f04f 0300 	mov.w	r3, #0
 801c73a:	008b      	lsls	r3, r1, #2
 801c73c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c740:	0082      	lsls	r2, r0, #2
 801c742:	4640      	mov	r0, r8
 801c744:	4649      	mov	r1, r9
 801c746:	f7e4 fa9f 	bl	8000c88 <__aeabi_uldivmod>
 801c74a:	4602      	mov	r2, r0
 801c74c:	460b      	mov	r3, r1
 801c74e:	4b4e      	ldr	r3, [pc, #312]	; (801c888 <UART_SetConfig+0x734>)
 801c750:	fba3 2302 	umull	r2, r3, r3, r2
 801c754:	095b      	lsrs	r3, r3, #5
 801c756:	011e      	lsls	r6, r3, #4
 801c758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c75c:	4618      	mov	r0, r3
 801c75e:	f04f 0100 	mov.w	r1, #0
 801c762:	4602      	mov	r2, r0
 801c764:	460b      	mov	r3, r1
 801c766:	1894      	adds	r4, r2, r2
 801c768:	60bc      	str	r4, [r7, #8]
 801c76a:	415b      	adcs	r3, r3
 801c76c:	60fb      	str	r3, [r7, #12]
 801c76e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c772:	1812      	adds	r2, r2, r0
 801c774:	eb41 0303 	adc.w	r3, r1, r3
 801c778:	f04f 0400 	mov.w	r4, #0
 801c77c:	f04f 0500 	mov.w	r5, #0
 801c780:	00dd      	lsls	r5, r3, #3
 801c782:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c786:	00d4      	lsls	r4, r2, #3
 801c788:	4622      	mov	r2, r4
 801c78a:	462b      	mov	r3, r5
 801c78c:	1814      	adds	r4, r2, r0
 801c78e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801c792:	414b      	adcs	r3, r1
 801c794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c79c:	685b      	ldr	r3, [r3, #4]
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f04f 0100 	mov.w	r1, #0
 801c7a4:	f04f 0200 	mov.w	r2, #0
 801c7a8:	f04f 0300 	mov.w	r3, #0
 801c7ac:	008b      	lsls	r3, r1, #2
 801c7ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c7b2:	0082      	lsls	r2, r0, #2
 801c7b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801c7b8:	f7e4 fa66 	bl	8000c88 <__aeabi_uldivmod>
 801c7bc:	4602      	mov	r2, r0
 801c7be:	460b      	mov	r3, r1
 801c7c0:	4b31      	ldr	r3, [pc, #196]	; (801c888 <UART_SetConfig+0x734>)
 801c7c2:	fba3 1302 	umull	r1, r3, r3, r2
 801c7c6:	095b      	lsrs	r3, r3, #5
 801c7c8:	2164      	movs	r1, #100	; 0x64
 801c7ca:	fb01 f303 	mul.w	r3, r1, r3
 801c7ce:	1ad3      	subs	r3, r2, r3
 801c7d0:	011b      	lsls	r3, r3, #4
 801c7d2:	3332      	adds	r3, #50	; 0x32
 801c7d4:	4a2c      	ldr	r2, [pc, #176]	; (801c888 <UART_SetConfig+0x734>)
 801c7d6:	fba2 2303 	umull	r2, r3, r2, r3
 801c7da:	095b      	lsrs	r3, r3, #5
 801c7dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c7e0:	441e      	add	r6, r3
 801c7e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	f04f 0100 	mov.w	r1, #0
 801c7ec:	4602      	mov	r2, r0
 801c7ee:	460b      	mov	r3, r1
 801c7f0:	1894      	adds	r4, r2, r2
 801c7f2:	603c      	str	r4, [r7, #0]
 801c7f4:	415b      	adcs	r3, r3
 801c7f6:	607b      	str	r3, [r7, #4]
 801c7f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c7fc:	1812      	adds	r2, r2, r0
 801c7fe:	eb41 0303 	adc.w	r3, r1, r3
 801c802:	f04f 0400 	mov.w	r4, #0
 801c806:	f04f 0500 	mov.w	r5, #0
 801c80a:	00dd      	lsls	r5, r3, #3
 801c80c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801c810:	00d4      	lsls	r4, r2, #3
 801c812:	4622      	mov	r2, r4
 801c814:	462b      	mov	r3, r5
 801c816:	1814      	adds	r4, r2, r0
 801c818:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801c81c:	414b      	adcs	r3, r1
 801c81e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c826:	685b      	ldr	r3, [r3, #4]
 801c828:	4618      	mov	r0, r3
 801c82a:	f04f 0100 	mov.w	r1, #0
 801c82e:	f04f 0200 	mov.w	r2, #0
 801c832:	f04f 0300 	mov.w	r3, #0
 801c836:	008b      	lsls	r3, r1, #2
 801c838:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801c83c:	0082      	lsls	r2, r0, #2
 801c83e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801c842:	f7e4 fa21 	bl	8000c88 <__aeabi_uldivmod>
 801c846:	4602      	mov	r2, r0
 801c848:	460b      	mov	r3, r1
 801c84a:	4b0f      	ldr	r3, [pc, #60]	; (801c888 <UART_SetConfig+0x734>)
 801c84c:	fba3 1302 	umull	r1, r3, r3, r2
 801c850:	095b      	lsrs	r3, r3, #5
 801c852:	2164      	movs	r1, #100	; 0x64
 801c854:	fb01 f303 	mul.w	r3, r1, r3
 801c858:	1ad3      	subs	r3, r2, r3
 801c85a:	011b      	lsls	r3, r3, #4
 801c85c:	3332      	adds	r3, #50	; 0x32
 801c85e:	4a0a      	ldr	r2, [pc, #40]	; (801c888 <UART_SetConfig+0x734>)
 801c860:	fba2 2303 	umull	r2, r3, r2, r3
 801c864:	095b      	lsrs	r3, r3, #5
 801c866:	f003 020f 	and.w	r2, r3, #15
 801c86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	4432      	add	r2, r6
 801c872:	609a      	str	r2, [r3, #8]
}
 801c874:	e7ff      	b.n	801c876 <UART_SetConfig+0x722>
 801c876:	bf00      	nop
 801c878:	37f4      	adds	r7, #244	; 0xf4
 801c87a:	46bd      	mov	sp, r7
 801c87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c880:	40011000 	.word	0x40011000
 801c884:	40011400 	.word	0x40011400
 801c888:	51eb851f 	.word	0x51eb851f

0801c88c <__NVIC_SetPriority>:
{
 801c88c:	b480      	push	{r7}
 801c88e:	b083      	sub	sp, #12
 801c890:	af00      	add	r7, sp, #0
 801c892:	4603      	mov	r3, r0
 801c894:	6039      	str	r1, [r7, #0]
 801c896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	db0a      	blt.n	801c8b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	b2da      	uxtb	r2, r3
 801c8a4:	490c      	ldr	r1, [pc, #48]	; (801c8d8 <__NVIC_SetPriority+0x4c>)
 801c8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8aa:	0112      	lsls	r2, r2, #4
 801c8ac:	b2d2      	uxtb	r2, r2
 801c8ae:	440b      	add	r3, r1
 801c8b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801c8b4:	e00a      	b.n	801c8cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c8b6:	683b      	ldr	r3, [r7, #0]
 801c8b8:	b2da      	uxtb	r2, r3
 801c8ba:	4908      	ldr	r1, [pc, #32]	; (801c8dc <__NVIC_SetPriority+0x50>)
 801c8bc:	79fb      	ldrb	r3, [r7, #7]
 801c8be:	f003 030f 	and.w	r3, r3, #15
 801c8c2:	3b04      	subs	r3, #4
 801c8c4:	0112      	lsls	r2, r2, #4
 801c8c6:	b2d2      	uxtb	r2, r2
 801c8c8:	440b      	add	r3, r1
 801c8ca:	761a      	strb	r2, [r3, #24]
}
 801c8cc:	bf00      	nop
 801c8ce:	370c      	adds	r7, #12
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d6:	4770      	bx	lr
 801c8d8:	e000e100 	.word	0xe000e100
 801c8dc:	e000ed00 	.word	0xe000ed00

0801c8e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801c8e4:	4b05      	ldr	r3, [pc, #20]	; (801c8fc <SysTick_Handler+0x1c>)
 801c8e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801c8e8:	f001 fcfe 	bl	801e2e8 <xTaskGetSchedulerState>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	2b01      	cmp	r3, #1
 801c8f0:	d001      	beq.n	801c8f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801c8f2:	f002 fae9 	bl	801eec8 <xPortSysTickHandler>
  }
}
 801c8f6:	bf00      	nop
 801c8f8:	bd80      	pop	{r7, pc}
 801c8fa:	bf00      	nop
 801c8fc:	e000e010 	.word	0xe000e010

0801c900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801c900:	b580      	push	{r7, lr}
 801c902:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801c904:	2100      	movs	r1, #0
 801c906:	f06f 0004 	mvn.w	r0, #4
 801c90a:	f7ff ffbf 	bl	801c88c <__NVIC_SetPriority>
#endif
}
 801c90e:	bf00      	nop
 801c910:	bd80      	pop	{r7, pc}
	...

0801c914 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801c914:	b480      	push	{r7}
 801c916:	b083      	sub	sp, #12
 801c918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c91a:	f3ef 8305 	mrs	r3, IPSR
 801c91e:	603b      	str	r3, [r7, #0]
  return(result);
 801c920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c922:	2b00      	cmp	r3, #0
 801c924:	d003      	beq.n	801c92e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801c926:	f06f 0305 	mvn.w	r3, #5
 801c92a:	607b      	str	r3, [r7, #4]
 801c92c:	e00c      	b.n	801c948 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801c92e:	4b0a      	ldr	r3, [pc, #40]	; (801c958 <osKernelInitialize+0x44>)
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d105      	bne.n	801c942 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801c936:	4b08      	ldr	r3, [pc, #32]	; (801c958 <osKernelInitialize+0x44>)
 801c938:	2201      	movs	r2, #1
 801c93a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801c93c:	2300      	movs	r3, #0
 801c93e:	607b      	str	r3, [r7, #4]
 801c940:	e002      	b.n	801c948 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801c942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801c948:	687b      	ldr	r3, [r7, #4]
}
 801c94a:	4618      	mov	r0, r3
 801c94c:	370c      	adds	r7, #12
 801c94e:	46bd      	mov	sp, r7
 801c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c954:	4770      	bx	lr
 801c956:	bf00      	nop
 801c958:	20001100 	.word	0x20001100

0801c95c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b082      	sub	sp, #8
 801c960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c962:	f3ef 8305 	mrs	r3, IPSR
 801c966:	603b      	str	r3, [r7, #0]
  return(result);
 801c968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d003      	beq.n	801c976 <osKernelStart+0x1a>
    stat = osErrorISR;
 801c96e:	f06f 0305 	mvn.w	r3, #5
 801c972:	607b      	str	r3, [r7, #4]
 801c974:	e010      	b.n	801c998 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801c976:	4b0b      	ldr	r3, [pc, #44]	; (801c9a4 <osKernelStart+0x48>)
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	2b01      	cmp	r3, #1
 801c97c:	d109      	bne.n	801c992 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801c97e:	f7ff ffbf 	bl	801c900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801c982:	4b08      	ldr	r3, [pc, #32]	; (801c9a4 <osKernelStart+0x48>)
 801c984:	2202      	movs	r2, #2
 801c986:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801c988:	f001 f866 	bl	801da58 <vTaskStartScheduler>
      stat = osOK;
 801c98c:	2300      	movs	r3, #0
 801c98e:	607b      	str	r3, [r7, #4]
 801c990:	e002      	b.n	801c998 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801c992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801c998:	687b      	ldr	r3, [r7, #4]
}
 801c99a:	4618      	mov	r0, r3
 801c99c:	3708      	adds	r7, #8
 801c99e:	46bd      	mov	sp, r7
 801c9a0:	bd80      	pop	{r7, pc}
 801c9a2:	bf00      	nop
 801c9a4:	20001100 	.word	0x20001100

0801c9a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801c9a8:	b580      	push	{r7, lr}
 801c9aa:	b08e      	sub	sp, #56	; 0x38
 801c9ac:	af04      	add	r7, sp, #16
 801c9ae:	60f8      	str	r0, [r7, #12]
 801c9b0:	60b9      	str	r1, [r7, #8]
 801c9b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c9b8:	f3ef 8305 	mrs	r3, IPSR
 801c9bc:	617b      	str	r3, [r7, #20]
  return(result);
 801c9be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d17e      	bne.n	801cac2 <osThreadNew+0x11a>
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d07b      	beq.n	801cac2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801c9ca:	2380      	movs	r3, #128	; 0x80
 801c9cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801c9ce:	2318      	movs	r3, #24
 801c9d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801c9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c9da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d045      	beq.n	801ca6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	d002      	beq.n	801c9f0 <osThreadNew+0x48>
        name = attr->name;
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	699b      	ldr	r3, [r3, #24]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d002      	beq.n	801c9fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	699b      	ldr	r3, [r3, #24]
 801c9fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801c9fe:	69fb      	ldr	r3, [r7, #28]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d008      	beq.n	801ca16 <osThreadNew+0x6e>
 801ca04:	69fb      	ldr	r3, [r7, #28]
 801ca06:	2b38      	cmp	r3, #56	; 0x38
 801ca08:	d805      	bhi.n	801ca16 <osThreadNew+0x6e>
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	685b      	ldr	r3, [r3, #4]
 801ca0e:	f003 0301 	and.w	r3, r3, #1
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d001      	beq.n	801ca1a <osThreadNew+0x72>
        return (NULL);
 801ca16:	2300      	movs	r3, #0
 801ca18:	e054      	b.n	801cac4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	695b      	ldr	r3, [r3, #20]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d003      	beq.n	801ca2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	695b      	ldr	r3, [r3, #20]
 801ca26:	089b      	lsrs	r3, r3, #2
 801ca28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	689b      	ldr	r3, [r3, #8]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d00e      	beq.n	801ca50 <osThreadNew+0xa8>
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	68db      	ldr	r3, [r3, #12]
 801ca36:	2b5b      	cmp	r3, #91	; 0x5b
 801ca38:	d90a      	bls.n	801ca50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d006      	beq.n	801ca50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	695b      	ldr	r3, [r3, #20]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d002      	beq.n	801ca50 <osThreadNew+0xa8>
        mem = 1;
 801ca4a:	2301      	movs	r3, #1
 801ca4c:	61bb      	str	r3, [r7, #24]
 801ca4e:	e010      	b.n	801ca72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	689b      	ldr	r3, [r3, #8]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d10c      	bne.n	801ca72 <osThreadNew+0xca>
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d108      	bne.n	801ca72 <osThreadNew+0xca>
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	691b      	ldr	r3, [r3, #16]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d104      	bne.n	801ca72 <osThreadNew+0xca>
          mem = 0;
 801ca68:	2300      	movs	r3, #0
 801ca6a:	61bb      	str	r3, [r7, #24]
 801ca6c:	e001      	b.n	801ca72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801ca6e:	2300      	movs	r3, #0
 801ca70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801ca72:	69bb      	ldr	r3, [r7, #24]
 801ca74:	2b01      	cmp	r3, #1
 801ca76:	d110      	bne.n	801ca9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801ca7c:	687a      	ldr	r2, [r7, #4]
 801ca7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ca80:	9202      	str	r2, [sp, #8]
 801ca82:	9301      	str	r3, [sp, #4]
 801ca84:	69fb      	ldr	r3, [r7, #28]
 801ca86:	9300      	str	r3, [sp, #0]
 801ca88:	68bb      	ldr	r3, [r7, #8]
 801ca8a:	6a3a      	ldr	r2, [r7, #32]
 801ca8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ca8e:	68f8      	ldr	r0, [r7, #12]
 801ca90:	f000 fe0c 	bl	801d6ac <xTaskCreateStatic>
 801ca94:	4603      	mov	r3, r0
 801ca96:	613b      	str	r3, [r7, #16]
 801ca98:	e013      	b.n	801cac2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801ca9a:	69bb      	ldr	r3, [r7, #24]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d110      	bne.n	801cac2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801caa0:	6a3b      	ldr	r3, [r7, #32]
 801caa2:	b29a      	uxth	r2, r3
 801caa4:	f107 0310 	add.w	r3, r7, #16
 801caa8:	9301      	str	r3, [sp, #4]
 801caaa:	69fb      	ldr	r3, [r7, #28]
 801caac:	9300      	str	r3, [sp, #0]
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cab2:	68f8      	ldr	r0, [r7, #12]
 801cab4:	f000 fe57 	bl	801d766 <xTaskCreate>
 801cab8:	4603      	mov	r3, r0
 801caba:	2b01      	cmp	r3, #1
 801cabc:	d001      	beq.n	801cac2 <osThreadNew+0x11a>
            hTask = NULL;
 801cabe:	2300      	movs	r3, #0
 801cac0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801cac2:	693b      	ldr	r3, [r7, #16]
}
 801cac4:	4618      	mov	r0, r3
 801cac6:	3728      	adds	r7, #40	; 0x28
 801cac8:	46bd      	mov	sp, r7
 801caca:	bd80      	pop	{r7, pc}

0801cacc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801cacc:	b580      	push	{r7, lr}
 801cace:	b084      	sub	sp, #16
 801cad0:	af00      	add	r7, sp, #0
 801cad2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801cad4:	f3ef 8305 	mrs	r3, IPSR
 801cad8:	60bb      	str	r3, [r7, #8]
  return(result);
 801cada:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801cadc:	2b00      	cmp	r3, #0
 801cade:	d003      	beq.n	801cae8 <osDelay+0x1c>
    stat = osErrorISR;
 801cae0:	f06f 0305 	mvn.w	r3, #5
 801cae4:	60fb      	str	r3, [r7, #12]
 801cae6:	e007      	b.n	801caf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801cae8:	2300      	movs	r3, #0
 801caea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d002      	beq.n	801caf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 801caf2:	6878      	ldr	r0, [r7, #4]
 801caf4:	f000 ff7c 	bl	801d9f0 <vTaskDelay>
    }
  }

  return (stat);
 801caf8:	68fb      	ldr	r3, [r7, #12]
}
 801cafa:	4618      	mov	r0, r3
 801cafc:	3710      	adds	r7, #16
 801cafe:	46bd      	mov	sp, r7
 801cb00:	bd80      	pop	{r7, pc}
	...

0801cb04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801cb04:	b480      	push	{r7}
 801cb06:	b085      	sub	sp, #20
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	60f8      	str	r0, [r7, #12]
 801cb0c:	60b9      	str	r1, [r7, #8]
 801cb0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	4a07      	ldr	r2, [pc, #28]	; (801cb30 <vApplicationGetIdleTaskMemory+0x2c>)
 801cb14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801cb16:	68bb      	ldr	r3, [r7, #8]
 801cb18:	4a06      	ldr	r2, [pc, #24]	; (801cb34 <vApplicationGetIdleTaskMemory+0x30>)
 801cb1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	2280      	movs	r2, #128	; 0x80
 801cb20:	601a      	str	r2, [r3, #0]
}
 801cb22:	bf00      	nop
 801cb24:	3714      	adds	r7, #20
 801cb26:	46bd      	mov	sp, r7
 801cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2c:	4770      	bx	lr
 801cb2e:	bf00      	nop
 801cb30:	20001104 	.word	0x20001104
 801cb34:	20001160 	.word	0x20001160

0801cb38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801cb38:	b480      	push	{r7}
 801cb3a:	b085      	sub	sp, #20
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	60f8      	str	r0, [r7, #12]
 801cb40:	60b9      	str	r1, [r7, #8]
 801cb42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	4a07      	ldr	r2, [pc, #28]	; (801cb64 <vApplicationGetTimerTaskMemory+0x2c>)
 801cb48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801cb4a:	68bb      	ldr	r3, [r7, #8]
 801cb4c:	4a06      	ldr	r2, [pc, #24]	; (801cb68 <vApplicationGetTimerTaskMemory+0x30>)
 801cb4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cb56:	601a      	str	r2, [r3, #0]
}
 801cb58:	bf00      	nop
 801cb5a:	3714      	adds	r7, #20
 801cb5c:	46bd      	mov	sp, r7
 801cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb62:	4770      	bx	lr
 801cb64:	20001360 	.word	0x20001360
 801cb68:	200013bc 	.word	0x200013bc

0801cb6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801cb6c:	b480      	push	{r7}
 801cb6e:	b083      	sub	sp, #12
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	f103 0208 	add.w	r2, r3, #8
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cb84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	f103 0208 	add.w	r2, r3, #8
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	f103 0208 	add.w	r2, r3, #8
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801cba0:	bf00      	nop
 801cba2:	370c      	adds	r7, #12
 801cba4:	46bd      	mov	sp, r7
 801cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbaa:	4770      	bx	lr

0801cbac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801cbac:	b480      	push	{r7}
 801cbae:	b083      	sub	sp, #12
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801cbba:	bf00      	nop
 801cbbc:	370c      	adds	r7, #12
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc4:	4770      	bx	lr

0801cbc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801cbc6:	b480      	push	{r7}
 801cbc8:	b085      	sub	sp, #20
 801cbca:	af00      	add	r7, sp, #0
 801cbcc:	6078      	str	r0, [r7, #4]
 801cbce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	685b      	ldr	r3, [r3, #4]
 801cbd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801cbd6:	683b      	ldr	r3, [r7, #0]
 801cbd8:	68fa      	ldr	r2, [r7, #12]
 801cbda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	689a      	ldr	r2, [r3, #8]
 801cbe0:	683b      	ldr	r3, [r7, #0]
 801cbe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	689b      	ldr	r3, [r3, #8]
 801cbe8:	683a      	ldr	r2, [r7, #0]
 801cbea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801cbec:	68fb      	ldr	r3, [r7, #12]
 801cbee:	683a      	ldr	r2, [r7, #0]
 801cbf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801cbf2:	683b      	ldr	r3, [r7, #0]
 801cbf4:	687a      	ldr	r2, [r7, #4]
 801cbf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	1c5a      	adds	r2, r3, #1
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	601a      	str	r2, [r3, #0]
}
 801cc02:	bf00      	nop
 801cc04:	3714      	adds	r7, #20
 801cc06:	46bd      	mov	sp, r7
 801cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc0c:	4770      	bx	lr

0801cc0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801cc0e:	b480      	push	{r7}
 801cc10:	b085      	sub	sp, #20
 801cc12:	af00      	add	r7, sp, #0
 801cc14:	6078      	str	r0, [r7, #4]
 801cc16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801cc1e:	68bb      	ldr	r3, [r7, #8]
 801cc20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cc24:	d103      	bne.n	801cc2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	691b      	ldr	r3, [r3, #16]
 801cc2a:	60fb      	str	r3, [r7, #12]
 801cc2c:	e00c      	b.n	801cc48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	3308      	adds	r3, #8
 801cc32:	60fb      	str	r3, [r7, #12]
 801cc34:	e002      	b.n	801cc3c <vListInsert+0x2e>
 801cc36:	68fb      	ldr	r3, [r7, #12]
 801cc38:	685b      	ldr	r3, [r3, #4]
 801cc3a:	60fb      	str	r3, [r7, #12]
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	685b      	ldr	r3, [r3, #4]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	68ba      	ldr	r2, [r7, #8]
 801cc44:	429a      	cmp	r2, r3
 801cc46:	d2f6      	bcs.n	801cc36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	685a      	ldr	r2, [r3, #4]
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	685b      	ldr	r3, [r3, #4]
 801cc54:	683a      	ldr	r2, [r7, #0]
 801cc56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801cc58:	683b      	ldr	r3, [r7, #0]
 801cc5a:	68fa      	ldr	r2, [r7, #12]
 801cc5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	683a      	ldr	r2, [r7, #0]
 801cc62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801cc64:	683b      	ldr	r3, [r7, #0]
 801cc66:	687a      	ldr	r2, [r7, #4]
 801cc68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	1c5a      	adds	r2, r3, #1
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	601a      	str	r2, [r3, #0]
}
 801cc74:	bf00      	nop
 801cc76:	3714      	adds	r7, #20
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc7e:	4770      	bx	lr

0801cc80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801cc80:	b480      	push	{r7}
 801cc82:	b085      	sub	sp, #20
 801cc84:	af00      	add	r7, sp, #0
 801cc86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	691b      	ldr	r3, [r3, #16]
 801cc8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	685b      	ldr	r3, [r3, #4]
 801cc92:	687a      	ldr	r2, [r7, #4]
 801cc94:	6892      	ldr	r2, [r2, #8]
 801cc96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	689b      	ldr	r3, [r3, #8]
 801cc9c:	687a      	ldr	r2, [r7, #4]
 801cc9e:	6852      	ldr	r2, [r2, #4]
 801cca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	685b      	ldr	r3, [r3, #4]
 801cca6:	687a      	ldr	r2, [r7, #4]
 801cca8:	429a      	cmp	r2, r3
 801ccaa:	d103      	bne.n	801ccb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	689a      	ldr	r2, [r3, #8]
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	1e5a      	subs	r2, r3, #1
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801ccc4:	68fb      	ldr	r3, [r7, #12]
 801ccc6:	681b      	ldr	r3, [r3, #0]
}
 801ccc8:	4618      	mov	r0, r3
 801ccca:	3714      	adds	r7, #20
 801cccc:	46bd      	mov	sp, r7
 801ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccd2:	4770      	bx	lr

0801ccd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801ccd4:	b580      	push	{r7, lr}
 801ccd6:	b084      	sub	sp, #16
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	6078      	str	r0, [r7, #4]
 801ccdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d10a      	bne.n	801ccfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801cce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ccec:	f383 8811 	msr	BASEPRI, r3
 801ccf0:	f3bf 8f6f 	isb	sy
 801ccf4:	f3bf 8f4f 	dsb	sy
 801ccf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801ccfa:	bf00      	nop
 801ccfc:	e7fe      	b.n	801ccfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801ccfe:	f002 f851 	bl	801eda4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	681a      	ldr	r2, [r3, #0]
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd0a:	68f9      	ldr	r1, [r7, #12]
 801cd0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801cd0e:	fb01 f303 	mul.w	r3, r1, r3
 801cd12:	441a      	add	r2, r3
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	2200      	movs	r2, #0
 801cd1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	681a      	ldr	r2, [r3, #0]
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	681a      	ldr	r2, [r3, #0]
 801cd2a:	68fb      	ldr	r3, [r7, #12]
 801cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd2e:	3b01      	subs	r3, #1
 801cd30:	68f9      	ldr	r1, [r7, #12]
 801cd32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801cd34:	fb01 f303 	mul.w	r3, r1, r3
 801cd38:	441a      	add	r2, r3
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801cd3e:	68fb      	ldr	r3, [r7, #12]
 801cd40:	22ff      	movs	r2, #255	; 0xff
 801cd42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	22ff      	movs	r2, #255	; 0xff
 801cd4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801cd4e:	683b      	ldr	r3, [r7, #0]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d114      	bne.n	801cd7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cd54:	68fb      	ldr	r3, [r7, #12]
 801cd56:	691b      	ldr	r3, [r3, #16]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d01a      	beq.n	801cd92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	3310      	adds	r3, #16
 801cd60:	4618      	mov	r0, r3
 801cd62:	f001 f903 	bl	801df6c <xTaskRemoveFromEventList>
 801cd66:	4603      	mov	r3, r0
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d012      	beq.n	801cd92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801cd6c:	4b0c      	ldr	r3, [pc, #48]	; (801cda0 <xQueueGenericReset+0xcc>)
 801cd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cd72:	601a      	str	r2, [r3, #0]
 801cd74:	f3bf 8f4f 	dsb	sy
 801cd78:	f3bf 8f6f 	isb	sy
 801cd7c:	e009      	b.n	801cd92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	3310      	adds	r3, #16
 801cd82:	4618      	mov	r0, r3
 801cd84:	f7ff fef2 	bl	801cb6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	3324      	adds	r3, #36	; 0x24
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f7ff feed 	bl	801cb6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801cd92:	f002 f837 	bl	801ee04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801cd96:	2301      	movs	r3, #1
}
 801cd98:	4618      	mov	r0, r3
 801cd9a:	3710      	adds	r7, #16
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	bd80      	pop	{r7, pc}
 801cda0:	e000ed04 	.word	0xe000ed04

0801cda4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b08e      	sub	sp, #56	; 0x38
 801cda8:	af02      	add	r7, sp, #8
 801cdaa:	60f8      	str	r0, [r7, #12]
 801cdac:	60b9      	str	r1, [r7, #8]
 801cdae:	607a      	str	r2, [r7, #4]
 801cdb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d10a      	bne.n	801cdce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cdbc:	f383 8811 	msr	BASEPRI, r3
 801cdc0:	f3bf 8f6f 	isb	sy
 801cdc4:	f3bf 8f4f 	dsb	sy
 801cdc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801cdca:	bf00      	nop
 801cdcc:	e7fe      	b.n	801cdcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801cdce:	683b      	ldr	r3, [r7, #0]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d10a      	bne.n	801cdea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cdd8:	f383 8811 	msr	BASEPRI, r3
 801cddc:	f3bf 8f6f 	isb	sy
 801cde0:	f3bf 8f4f 	dsb	sy
 801cde4:	627b      	str	r3, [r7, #36]	; 0x24
}
 801cde6:	bf00      	nop
 801cde8:	e7fe      	b.n	801cde8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d002      	beq.n	801cdf6 <xQueueGenericCreateStatic+0x52>
 801cdf0:	68bb      	ldr	r3, [r7, #8]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d001      	beq.n	801cdfa <xQueueGenericCreateStatic+0x56>
 801cdf6:	2301      	movs	r3, #1
 801cdf8:	e000      	b.n	801cdfc <xQueueGenericCreateStatic+0x58>
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d10a      	bne.n	801ce16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce04:	f383 8811 	msr	BASEPRI, r3
 801ce08:	f3bf 8f6f 	isb	sy
 801ce0c:	f3bf 8f4f 	dsb	sy
 801ce10:	623b      	str	r3, [r7, #32]
}
 801ce12:	bf00      	nop
 801ce14:	e7fe      	b.n	801ce14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d102      	bne.n	801ce22 <xQueueGenericCreateStatic+0x7e>
 801ce1c:	68bb      	ldr	r3, [r7, #8]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d101      	bne.n	801ce26 <xQueueGenericCreateStatic+0x82>
 801ce22:	2301      	movs	r3, #1
 801ce24:	e000      	b.n	801ce28 <xQueueGenericCreateStatic+0x84>
 801ce26:	2300      	movs	r3, #0
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d10a      	bne.n	801ce42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce30:	f383 8811 	msr	BASEPRI, r3
 801ce34:	f3bf 8f6f 	isb	sy
 801ce38:	f3bf 8f4f 	dsb	sy
 801ce3c:	61fb      	str	r3, [r7, #28]
}
 801ce3e:	bf00      	nop
 801ce40:	e7fe      	b.n	801ce40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ce42:	2350      	movs	r3, #80	; 0x50
 801ce44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ce46:	697b      	ldr	r3, [r7, #20]
 801ce48:	2b50      	cmp	r3, #80	; 0x50
 801ce4a:	d00a      	beq.n	801ce62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ce50:	f383 8811 	msr	BASEPRI, r3
 801ce54:	f3bf 8f6f 	isb	sy
 801ce58:	f3bf 8f4f 	dsb	sy
 801ce5c:	61bb      	str	r3, [r7, #24]
}
 801ce5e:	bf00      	nop
 801ce60:	e7fe      	b.n	801ce60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801ce62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ce64:	683b      	ldr	r3, [r7, #0]
 801ce66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d00d      	beq.n	801ce8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce70:	2201      	movs	r2, #1
 801ce72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ce76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce7c:	9300      	str	r3, [sp, #0]
 801ce7e:	4613      	mov	r3, r2
 801ce80:	687a      	ldr	r2, [r7, #4]
 801ce82:	68b9      	ldr	r1, [r7, #8]
 801ce84:	68f8      	ldr	r0, [r7, #12]
 801ce86:	f000 f805 	bl	801ce94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801ce8c:	4618      	mov	r0, r3
 801ce8e:	3730      	adds	r7, #48	; 0x30
 801ce90:	46bd      	mov	sp, r7
 801ce92:	bd80      	pop	{r7, pc}

0801ce94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ce94:	b580      	push	{r7, lr}
 801ce96:	b084      	sub	sp, #16
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	60f8      	str	r0, [r7, #12]
 801ce9c:	60b9      	str	r1, [r7, #8]
 801ce9e:	607a      	str	r2, [r7, #4]
 801cea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801cea2:	68bb      	ldr	r3, [r7, #8]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d103      	bne.n	801ceb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801cea8:	69bb      	ldr	r3, [r7, #24]
 801ceaa:	69ba      	ldr	r2, [r7, #24]
 801ceac:	601a      	str	r2, [r3, #0]
 801ceae:	e002      	b.n	801ceb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ceb0:	69bb      	ldr	r3, [r7, #24]
 801ceb2:	687a      	ldr	r2, [r7, #4]
 801ceb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ceb6:	69bb      	ldr	r3, [r7, #24]
 801ceb8:	68fa      	ldr	r2, [r7, #12]
 801ceba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801cebc:	69bb      	ldr	r3, [r7, #24]
 801cebe:	68ba      	ldr	r2, [r7, #8]
 801cec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801cec2:	2101      	movs	r1, #1
 801cec4:	69b8      	ldr	r0, [r7, #24]
 801cec6:	f7ff ff05 	bl	801ccd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801ceca:	69bb      	ldr	r3, [r7, #24]
 801cecc:	78fa      	ldrb	r2, [r7, #3]
 801cece:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ced2:	bf00      	nop
 801ced4:	3710      	adds	r7, #16
 801ced6:	46bd      	mov	sp, r7
 801ced8:	bd80      	pop	{r7, pc}
	...

0801cedc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801cedc:	b580      	push	{r7, lr}
 801cede:	b08e      	sub	sp, #56	; 0x38
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	60f8      	str	r0, [r7, #12]
 801cee4:	60b9      	str	r1, [r7, #8]
 801cee6:	607a      	str	r2, [r7, #4]
 801cee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ceea:	2300      	movs	r3, #0
 801ceec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d10a      	bne.n	801cf0e <xQueueGenericSend+0x32>
	__asm volatile
 801cef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cefc:	f383 8811 	msr	BASEPRI, r3
 801cf00:	f3bf 8f6f 	isb	sy
 801cf04:	f3bf 8f4f 	dsb	sy
 801cf08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801cf0a:	bf00      	nop
 801cf0c:	e7fe      	b.n	801cf0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801cf0e:	68bb      	ldr	r3, [r7, #8]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d103      	bne.n	801cf1c <xQueueGenericSend+0x40>
 801cf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d101      	bne.n	801cf20 <xQueueGenericSend+0x44>
 801cf1c:	2301      	movs	r3, #1
 801cf1e:	e000      	b.n	801cf22 <xQueueGenericSend+0x46>
 801cf20:	2300      	movs	r3, #0
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d10a      	bne.n	801cf3c <xQueueGenericSend+0x60>
	__asm volatile
 801cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf2a:	f383 8811 	msr	BASEPRI, r3
 801cf2e:	f3bf 8f6f 	isb	sy
 801cf32:	f3bf 8f4f 	dsb	sy
 801cf36:	627b      	str	r3, [r7, #36]	; 0x24
}
 801cf38:	bf00      	nop
 801cf3a:	e7fe      	b.n	801cf3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801cf3c:	683b      	ldr	r3, [r7, #0]
 801cf3e:	2b02      	cmp	r3, #2
 801cf40:	d103      	bne.n	801cf4a <xQueueGenericSend+0x6e>
 801cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cf46:	2b01      	cmp	r3, #1
 801cf48:	d101      	bne.n	801cf4e <xQueueGenericSend+0x72>
 801cf4a:	2301      	movs	r3, #1
 801cf4c:	e000      	b.n	801cf50 <xQueueGenericSend+0x74>
 801cf4e:	2300      	movs	r3, #0
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d10a      	bne.n	801cf6a <xQueueGenericSend+0x8e>
	__asm volatile
 801cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf58:	f383 8811 	msr	BASEPRI, r3
 801cf5c:	f3bf 8f6f 	isb	sy
 801cf60:	f3bf 8f4f 	dsb	sy
 801cf64:	623b      	str	r3, [r7, #32]
}
 801cf66:	bf00      	nop
 801cf68:	e7fe      	b.n	801cf68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801cf6a:	f001 f9bd 	bl	801e2e8 <xTaskGetSchedulerState>
 801cf6e:	4603      	mov	r3, r0
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d102      	bne.n	801cf7a <xQueueGenericSend+0x9e>
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d101      	bne.n	801cf7e <xQueueGenericSend+0xa2>
 801cf7a:	2301      	movs	r3, #1
 801cf7c:	e000      	b.n	801cf80 <xQueueGenericSend+0xa4>
 801cf7e:	2300      	movs	r3, #0
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d10a      	bne.n	801cf9a <xQueueGenericSend+0xbe>
	__asm volatile
 801cf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cf88:	f383 8811 	msr	BASEPRI, r3
 801cf8c:	f3bf 8f6f 	isb	sy
 801cf90:	f3bf 8f4f 	dsb	sy
 801cf94:	61fb      	str	r3, [r7, #28]
}
 801cf96:	bf00      	nop
 801cf98:	e7fe      	b.n	801cf98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801cf9a:	f001 ff03 	bl	801eda4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cfa6:	429a      	cmp	r2, r3
 801cfa8:	d302      	bcc.n	801cfb0 <xQueueGenericSend+0xd4>
 801cfaa:	683b      	ldr	r3, [r7, #0]
 801cfac:	2b02      	cmp	r3, #2
 801cfae:	d129      	bne.n	801d004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801cfb0:	683a      	ldr	r2, [r7, #0]
 801cfb2:	68b9      	ldr	r1, [r7, #8]
 801cfb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cfb6:	f000 fa0b 	bl	801d3d0 <prvCopyDataToQueue>
 801cfba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d010      	beq.n	801cfe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801cfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cfc6:	3324      	adds	r3, #36	; 0x24
 801cfc8:	4618      	mov	r0, r3
 801cfca:	f000 ffcf 	bl	801df6c <xTaskRemoveFromEventList>
 801cfce:	4603      	mov	r3, r0
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d013      	beq.n	801cffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801cfd4:	4b3f      	ldr	r3, [pc, #252]	; (801d0d4 <xQueueGenericSend+0x1f8>)
 801cfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cfda:	601a      	str	r2, [r3, #0]
 801cfdc:	f3bf 8f4f 	dsb	sy
 801cfe0:	f3bf 8f6f 	isb	sy
 801cfe4:	e00a      	b.n	801cffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d007      	beq.n	801cffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801cfec:	4b39      	ldr	r3, [pc, #228]	; (801d0d4 <xQueueGenericSend+0x1f8>)
 801cfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cff2:	601a      	str	r2, [r3, #0]
 801cff4:	f3bf 8f4f 	dsb	sy
 801cff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801cffc:	f001 ff02 	bl	801ee04 <vPortExitCritical>
				return pdPASS;
 801d000:	2301      	movs	r3, #1
 801d002:	e063      	b.n	801d0cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d103      	bne.n	801d012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801d00a:	f001 fefb 	bl	801ee04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801d00e:	2300      	movs	r3, #0
 801d010:	e05c      	b.n	801d0cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801d012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d014:	2b00      	cmp	r3, #0
 801d016:	d106      	bne.n	801d026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801d018:	f107 0314 	add.w	r3, r7, #20
 801d01c:	4618      	mov	r0, r3
 801d01e:	f001 f809 	bl	801e034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801d022:	2301      	movs	r3, #1
 801d024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801d026:	f001 feed 	bl	801ee04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801d02a:	f000 fd7b 	bl	801db24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801d02e:	f001 feb9 	bl	801eda4 <vPortEnterCritical>
 801d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d038:	b25b      	sxtb	r3, r3
 801d03a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d03e:	d103      	bne.n	801d048 <xQueueGenericSend+0x16c>
 801d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d042:	2200      	movs	r2, #0
 801d044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d04e:	b25b      	sxtb	r3, r3
 801d050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d054:	d103      	bne.n	801d05e <xQueueGenericSend+0x182>
 801d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d058:	2200      	movs	r2, #0
 801d05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d05e:	f001 fed1 	bl	801ee04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801d062:	1d3a      	adds	r2, r7, #4
 801d064:	f107 0314 	add.w	r3, r7, #20
 801d068:	4611      	mov	r1, r2
 801d06a:	4618      	mov	r0, r3
 801d06c:	f000 fff8 	bl	801e060 <xTaskCheckForTimeOut>
 801d070:	4603      	mov	r3, r0
 801d072:	2b00      	cmp	r3, #0
 801d074:	d124      	bne.n	801d0c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801d076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d078:	f000 faa2 	bl	801d5c0 <prvIsQueueFull>
 801d07c:	4603      	mov	r3, r0
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d018      	beq.n	801d0b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d084:	3310      	adds	r3, #16
 801d086:	687a      	ldr	r2, [r7, #4]
 801d088:	4611      	mov	r1, r2
 801d08a:	4618      	mov	r0, r3
 801d08c:	f000 ff1e 	bl	801decc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801d090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d092:	f000 fa2d 	bl	801d4f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801d096:	f000 fd53 	bl	801db40 <xTaskResumeAll>
 801d09a:	4603      	mov	r3, r0
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	f47f af7c 	bne.w	801cf9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801d0a2:	4b0c      	ldr	r3, [pc, #48]	; (801d0d4 <xQueueGenericSend+0x1f8>)
 801d0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d0a8:	601a      	str	r2, [r3, #0]
 801d0aa:	f3bf 8f4f 	dsb	sy
 801d0ae:	f3bf 8f6f 	isb	sy
 801d0b2:	e772      	b.n	801cf9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801d0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d0b6:	f000 fa1b 	bl	801d4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801d0ba:	f000 fd41 	bl	801db40 <xTaskResumeAll>
 801d0be:	e76c      	b.n	801cf9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801d0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d0c2:	f000 fa15 	bl	801d4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801d0c6:	f000 fd3b 	bl	801db40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801d0ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	3738      	adds	r7, #56	; 0x38
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}
 801d0d4:	e000ed04 	.word	0xe000ed04

0801d0d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	b090      	sub	sp, #64	; 0x40
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	60f8      	str	r0, [r7, #12]
 801d0e0:	60b9      	str	r1, [r7, #8]
 801d0e2:	607a      	str	r2, [r7, #4]
 801d0e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d10a      	bne.n	801d106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d0f4:	f383 8811 	msr	BASEPRI, r3
 801d0f8:	f3bf 8f6f 	isb	sy
 801d0fc:	f3bf 8f4f 	dsb	sy
 801d100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801d102:	bf00      	nop
 801d104:	e7fe      	b.n	801d104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801d106:	68bb      	ldr	r3, [r7, #8]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d103      	bne.n	801d114 <xQueueGenericSendFromISR+0x3c>
 801d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d110:	2b00      	cmp	r3, #0
 801d112:	d101      	bne.n	801d118 <xQueueGenericSendFromISR+0x40>
 801d114:	2301      	movs	r3, #1
 801d116:	e000      	b.n	801d11a <xQueueGenericSendFromISR+0x42>
 801d118:	2300      	movs	r3, #0
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d10a      	bne.n	801d134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d122:	f383 8811 	msr	BASEPRI, r3
 801d126:	f3bf 8f6f 	isb	sy
 801d12a:	f3bf 8f4f 	dsb	sy
 801d12e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801d130:	bf00      	nop
 801d132:	e7fe      	b.n	801d132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801d134:	683b      	ldr	r3, [r7, #0]
 801d136:	2b02      	cmp	r3, #2
 801d138:	d103      	bne.n	801d142 <xQueueGenericSendFromISR+0x6a>
 801d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d13e:	2b01      	cmp	r3, #1
 801d140:	d101      	bne.n	801d146 <xQueueGenericSendFromISR+0x6e>
 801d142:	2301      	movs	r3, #1
 801d144:	e000      	b.n	801d148 <xQueueGenericSendFromISR+0x70>
 801d146:	2300      	movs	r3, #0
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d10a      	bne.n	801d162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d150:	f383 8811 	msr	BASEPRI, r3
 801d154:	f3bf 8f6f 	isb	sy
 801d158:	f3bf 8f4f 	dsb	sy
 801d15c:	623b      	str	r3, [r7, #32]
}
 801d15e:	bf00      	nop
 801d160:	e7fe      	b.n	801d160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801d162:	f001 ff01 	bl	801ef68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801d166:	f3ef 8211 	mrs	r2, BASEPRI
 801d16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d16e:	f383 8811 	msr	BASEPRI, r3
 801d172:	f3bf 8f6f 	isb	sy
 801d176:	f3bf 8f4f 	dsb	sy
 801d17a:	61fa      	str	r2, [r7, #28]
 801d17c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801d17e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801d180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d18a:	429a      	cmp	r2, r3
 801d18c:	d302      	bcc.n	801d194 <xQueueGenericSendFromISR+0xbc>
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	2b02      	cmp	r3, #2
 801d192:	d12f      	bne.n	801d1f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801d1a4:	683a      	ldr	r2, [r7, #0]
 801d1a6:	68b9      	ldr	r1, [r7, #8]
 801d1a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801d1aa:	f000 f911 	bl	801d3d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801d1ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d1b6:	d112      	bne.n	801d1de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d016      	beq.n	801d1ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1c2:	3324      	adds	r3, #36	; 0x24
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f000 fed1 	bl	801df6c <xTaskRemoveFromEventList>
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d00e      	beq.n	801d1ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d00b      	beq.n	801d1ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	2201      	movs	r2, #1
 801d1da:	601a      	str	r2, [r3, #0]
 801d1dc:	e007      	b.n	801d1ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801d1de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801d1e2:	3301      	adds	r3, #1
 801d1e4:	b2db      	uxtb	r3, r3
 801d1e6:	b25a      	sxtb	r2, r3
 801d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801d1ee:	2301      	movs	r3, #1
 801d1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801d1f2:	e001      	b.n	801d1f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801d1fc:	697b      	ldr	r3, [r7, #20]
 801d1fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801d202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801d204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801d206:	4618      	mov	r0, r3
 801d208:	3740      	adds	r7, #64	; 0x40
 801d20a:	46bd      	mov	sp, r7
 801d20c:	bd80      	pop	{r7, pc}
	...

0801d210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801d210:	b580      	push	{r7, lr}
 801d212:	b08c      	sub	sp, #48	; 0x30
 801d214:	af00      	add	r7, sp, #0
 801d216:	60f8      	str	r0, [r7, #12]
 801d218:	60b9      	str	r1, [r7, #8]
 801d21a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801d21c:	2300      	movs	r3, #0
 801d21e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d226:	2b00      	cmp	r3, #0
 801d228:	d10a      	bne.n	801d240 <xQueueReceive+0x30>
	__asm volatile
 801d22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d22e:	f383 8811 	msr	BASEPRI, r3
 801d232:	f3bf 8f6f 	isb	sy
 801d236:	f3bf 8f4f 	dsb	sy
 801d23a:	623b      	str	r3, [r7, #32]
}
 801d23c:	bf00      	nop
 801d23e:	e7fe      	b.n	801d23e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801d240:	68bb      	ldr	r3, [r7, #8]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d103      	bne.n	801d24e <xQueueReceive+0x3e>
 801d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d101      	bne.n	801d252 <xQueueReceive+0x42>
 801d24e:	2301      	movs	r3, #1
 801d250:	e000      	b.n	801d254 <xQueueReceive+0x44>
 801d252:	2300      	movs	r3, #0
 801d254:	2b00      	cmp	r3, #0
 801d256:	d10a      	bne.n	801d26e <xQueueReceive+0x5e>
	__asm volatile
 801d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d25c:	f383 8811 	msr	BASEPRI, r3
 801d260:	f3bf 8f6f 	isb	sy
 801d264:	f3bf 8f4f 	dsb	sy
 801d268:	61fb      	str	r3, [r7, #28]
}
 801d26a:	bf00      	nop
 801d26c:	e7fe      	b.n	801d26c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801d26e:	f001 f83b 	bl	801e2e8 <xTaskGetSchedulerState>
 801d272:	4603      	mov	r3, r0
 801d274:	2b00      	cmp	r3, #0
 801d276:	d102      	bne.n	801d27e <xQueueReceive+0x6e>
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d101      	bne.n	801d282 <xQueueReceive+0x72>
 801d27e:	2301      	movs	r3, #1
 801d280:	e000      	b.n	801d284 <xQueueReceive+0x74>
 801d282:	2300      	movs	r3, #0
 801d284:	2b00      	cmp	r3, #0
 801d286:	d10a      	bne.n	801d29e <xQueueReceive+0x8e>
	__asm volatile
 801d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d28c:	f383 8811 	msr	BASEPRI, r3
 801d290:	f3bf 8f6f 	isb	sy
 801d294:	f3bf 8f4f 	dsb	sy
 801d298:	61bb      	str	r3, [r7, #24]
}
 801d29a:	bf00      	nop
 801d29c:	e7fe      	b.n	801d29c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801d29e:	f001 fd81 	bl	801eda4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d01f      	beq.n	801d2ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801d2ae:	68b9      	ldr	r1, [r7, #8]
 801d2b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d2b2:	f000 f8f7 	bl	801d4a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2b8:	1e5a      	subs	r2, r3, #1
 801d2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2c0:	691b      	ldr	r3, [r3, #16]
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d00f      	beq.n	801d2e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2c8:	3310      	adds	r3, #16
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f000 fe4e 	bl	801df6c <xTaskRemoveFromEventList>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d007      	beq.n	801d2e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801d2d6:	4b3d      	ldr	r3, [pc, #244]	; (801d3cc <xQueueReceive+0x1bc>)
 801d2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d2dc:	601a      	str	r2, [r3, #0]
 801d2de:	f3bf 8f4f 	dsb	sy
 801d2e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801d2e6:	f001 fd8d 	bl	801ee04 <vPortExitCritical>
				return pdPASS;
 801d2ea:	2301      	movs	r3, #1
 801d2ec:	e069      	b.n	801d3c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d103      	bne.n	801d2fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801d2f4:	f001 fd86 	bl	801ee04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	e062      	b.n	801d3c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d106      	bne.n	801d310 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801d302:	f107 0310 	add.w	r3, r7, #16
 801d306:	4618      	mov	r0, r3
 801d308:	f000 fe94 	bl	801e034 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801d30c:	2301      	movs	r3, #1
 801d30e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801d310:	f001 fd78 	bl	801ee04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801d314:	f000 fc06 	bl	801db24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801d318:	f001 fd44 	bl	801eda4 <vPortEnterCritical>
 801d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d31e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d322:	b25b      	sxtb	r3, r3
 801d324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d328:	d103      	bne.n	801d332 <xQueueReceive+0x122>
 801d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d32c:	2200      	movs	r2, #0
 801d32e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d338:	b25b      	sxtb	r3, r3
 801d33a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d33e:	d103      	bne.n	801d348 <xQueueReceive+0x138>
 801d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d342:	2200      	movs	r2, #0
 801d344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d348:	f001 fd5c 	bl	801ee04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801d34c:	1d3a      	adds	r2, r7, #4
 801d34e:	f107 0310 	add.w	r3, r7, #16
 801d352:	4611      	mov	r1, r2
 801d354:	4618      	mov	r0, r3
 801d356:	f000 fe83 	bl	801e060 <xTaskCheckForTimeOut>
 801d35a:	4603      	mov	r3, r0
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d123      	bne.n	801d3a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801d360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d362:	f000 f917 	bl	801d594 <prvIsQueueEmpty>
 801d366:	4603      	mov	r3, r0
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d017      	beq.n	801d39c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d36e:	3324      	adds	r3, #36	; 0x24
 801d370:	687a      	ldr	r2, [r7, #4]
 801d372:	4611      	mov	r1, r2
 801d374:	4618      	mov	r0, r3
 801d376:	f000 fda9 	bl	801decc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801d37a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d37c:	f000 f8b8 	bl	801d4f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801d380:	f000 fbde 	bl	801db40 <xTaskResumeAll>
 801d384:	4603      	mov	r3, r0
 801d386:	2b00      	cmp	r3, #0
 801d388:	d189      	bne.n	801d29e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801d38a:	4b10      	ldr	r3, [pc, #64]	; (801d3cc <xQueueReceive+0x1bc>)
 801d38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d390:	601a      	str	r2, [r3, #0]
 801d392:	f3bf 8f4f 	dsb	sy
 801d396:	f3bf 8f6f 	isb	sy
 801d39a:	e780      	b.n	801d29e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801d39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d39e:	f000 f8a7 	bl	801d4f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801d3a2:	f000 fbcd 	bl	801db40 <xTaskResumeAll>
 801d3a6:	e77a      	b.n	801d29e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801d3a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d3aa:	f000 f8a1 	bl	801d4f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801d3ae:	f000 fbc7 	bl	801db40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801d3b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d3b4:	f000 f8ee 	bl	801d594 <prvIsQueueEmpty>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	f43f af6f 	beq.w	801d29e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801d3c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	3730      	adds	r7, #48	; 0x30
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bd80      	pop	{r7, pc}
 801d3ca:	bf00      	nop
 801d3cc:	e000ed04 	.word	0xe000ed04

0801d3d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b086      	sub	sp, #24
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	60f8      	str	r0, [r7, #12]
 801d3d8:	60b9      	str	r1, [r7, #8]
 801d3da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801d3dc:	2300      	movs	r3, #0
 801d3de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d10d      	bne.n	801d40a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d14d      	bne.n	801d492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	689b      	ldr	r3, [r3, #8]
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	f000 ff92 	bl	801e324 <xTaskPriorityDisinherit>
 801d400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	2200      	movs	r2, #0
 801d406:	609a      	str	r2, [r3, #8]
 801d408:	e043      	b.n	801d492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d119      	bne.n	801d444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	6858      	ldr	r0, [r3, #4]
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d418:	461a      	mov	r2, r3
 801d41a:	68b9      	ldr	r1, [r7, #8]
 801d41c:	f002 f800 	bl	801f420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	685a      	ldr	r2, [r3, #4]
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d428:	441a      	add	r2, r3
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	685a      	ldr	r2, [r3, #4]
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	689b      	ldr	r3, [r3, #8]
 801d436:	429a      	cmp	r2, r3
 801d438:	d32b      	bcc.n	801d492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	681a      	ldr	r2, [r3, #0]
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	605a      	str	r2, [r3, #4]
 801d442:	e026      	b.n	801d492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	68d8      	ldr	r0, [r3, #12]
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d44c:	461a      	mov	r2, r3
 801d44e:	68b9      	ldr	r1, [r7, #8]
 801d450:	f001 ffe6 	bl	801f420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	68da      	ldr	r2, [r3, #12]
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d45c:	425b      	negs	r3, r3
 801d45e:	441a      	add	r2, r3
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	68da      	ldr	r2, [r3, #12]
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	429a      	cmp	r2, r3
 801d46e:	d207      	bcs.n	801d480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	689a      	ldr	r2, [r3, #8]
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d478:	425b      	negs	r3, r3
 801d47a:	441a      	add	r2, r3
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	2b02      	cmp	r3, #2
 801d484:	d105      	bne.n	801d492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d486:	693b      	ldr	r3, [r7, #16]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d002      	beq.n	801d492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801d48c:	693b      	ldr	r3, [r7, #16]
 801d48e:	3b01      	subs	r3, #1
 801d490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d492:	693b      	ldr	r3, [r7, #16]
 801d494:	1c5a      	adds	r2, r3, #1
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801d49a:	697b      	ldr	r3, [r7, #20]
}
 801d49c:	4618      	mov	r0, r3
 801d49e:	3718      	adds	r7, #24
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	bd80      	pop	{r7, pc}

0801d4a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801d4a4:	b580      	push	{r7, lr}
 801d4a6:	b082      	sub	sp, #8
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	6078      	str	r0, [r7, #4]
 801d4ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d018      	beq.n	801d4e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	68da      	ldr	r2, [r3, #12]
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4be:	441a      	add	r2, r3
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	68da      	ldr	r2, [r3, #12]
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	689b      	ldr	r3, [r3, #8]
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d303      	bcc.n	801d4d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	681a      	ldr	r2, [r3, #0]
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	68d9      	ldr	r1, [r3, #12]
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4e0:	461a      	mov	r2, r3
 801d4e2:	6838      	ldr	r0, [r7, #0]
 801d4e4:	f001 ff9c 	bl	801f420 <memcpy>
	}
}
 801d4e8:	bf00      	nop
 801d4ea:	3708      	adds	r7, #8
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	bd80      	pop	{r7, pc}

0801d4f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b084      	sub	sp, #16
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801d4f8:	f001 fc54 	bl	801eda4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d504:	e011      	b.n	801d52a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d012      	beq.n	801d534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d50e:	687b      	ldr	r3, [r7, #4]
 801d510:	3324      	adds	r3, #36	; 0x24
 801d512:	4618      	mov	r0, r3
 801d514:	f000 fd2a 	bl	801df6c <xTaskRemoveFromEventList>
 801d518:	4603      	mov	r3, r0
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d001      	beq.n	801d522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801d51e:	f000 fe01 	bl	801e124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801d522:	7bfb      	ldrb	r3, [r7, #15]
 801d524:	3b01      	subs	r3, #1
 801d526:	b2db      	uxtb	r3, r3
 801d528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	dce9      	bgt.n	801d506 <prvUnlockQueue+0x16>
 801d532:	e000      	b.n	801d536 <prvUnlockQueue+0x46>
					break;
 801d534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	22ff      	movs	r2, #255	; 0xff
 801d53a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801d53e:	f001 fc61 	bl	801ee04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801d542:	f001 fc2f 	bl	801eda4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d54c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d54e:	e011      	b.n	801d574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	691b      	ldr	r3, [r3, #16]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d012      	beq.n	801d57e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	3310      	adds	r3, #16
 801d55c:	4618      	mov	r0, r3
 801d55e:	f000 fd05 	bl	801df6c <xTaskRemoveFromEventList>
 801d562:	4603      	mov	r3, r0
 801d564:	2b00      	cmp	r3, #0
 801d566:	d001      	beq.n	801d56c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801d568:	f000 fddc 	bl	801e124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801d56c:	7bbb      	ldrb	r3, [r7, #14]
 801d56e:	3b01      	subs	r3, #1
 801d570:	b2db      	uxtb	r3, r3
 801d572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d578:	2b00      	cmp	r3, #0
 801d57a:	dce9      	bgt.n	801d550 <prvUnlockQueue+0x60>
 801d57c:	e000      	b.n	801d580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801d57e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	22ff      	movs	r2, #255	; 0xff
 801d584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801d588:	f001 fc3c 	bl	801ee04 <vPortExitCritical>
}
 801d58c:	bf00      	nop
 801d58e:	3710      	adds	r7, #16
 801d590:	46bd      	mov	sp, r7
 801d592:	bd80      	pop	{r7, pc}

0801d594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801d594:	b580      	push	{r7, lr}
 801d596:	b084      	sub	sp, #16
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d59c:	f001 fc02 	bl	801eda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d102      	bne.n	801d5ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801d5a8:	2301      	movs	r3, #1
 801d5aa:	60fb      	str	r3, [r7, #12]
 801d5ac:	e001      	b.n	801d5b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d5b2:	f001 fc27 	bl	801ee04 <vPortExitCritical>

	return xReturn;
 801d5b6:	68fb      	ldr	r3, [r7, #12]
}
 801d5b8:	4618      	mov	r0, r3
 801d5ba:	3710      	adds	r7, #16
 801d5bc:	46bd      	mov	sp, r7
 801d5be:	bd80      	pop	{r7, pc}

0801d5c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b084      	sub	sp, #16
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d5c8:	f001 fbec 	bl	801eda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	d102      	bne.n	801d5de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801d5d8:	2301      	movs	r3, #1
 801d5da:	60fb      	str	r3, [r7, #12]
 801d5dc:	e001      	b.n	801d5e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d5e2:	f001 fc0f 	bl	801ee04 <vPortExitCritical>

	return xReturn;
 801d5e6:	68fb      	ldr	r3, [r7, #12]
}
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	3710      	adds	r7, #16
 801d5ec:	46bd      	mov	sp, r7
 801d5ee:	bd80      	pop	{r7, pc}

0801d5f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801d5f0:	b480      	push	{r7}
 801d5f2:	b085      	sub	sp, #20
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	6078      	str	r0, [r7, #4]
 801d5f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	60fb      	str	r3, [r7, #12]
 801d5fe:	e014      	b.n	801d62a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801d600:	4a0f      	ldr	r2, [pc, #60]	; (801d640 <vQueueAddToRegistry+0x50>)
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d10b      	bne.n	801d624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801d60c:	490c      	ldr	r1, [pc, #48]	; (801d640 <vQueueAddToRegistry+0x50>)
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	683a      	ldr	r2, [r7, #0]
 801d612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801d616:	4a0a      	ldr	r2, [pc, #40]	; (801d640 <vQueueAddToRegistry+0x50>)
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	00db      	lsls	r3, r3, #3
 801d61c:	4413      	add	r3, r2
 801d61e:	687a      	ldr	r2, [r7, #4]
 801d620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801d622:	e006      	b.n	801d632 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	3301      	adds	r3, #1
 801d628:	60fb      	str	r3, [r7, #12]
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	2b07      	cmp	r3, #7
 801d62e:	d9e7      	bls.n	801d600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801d630:	bf00      	nop
 801d632:	bf00      	nop
 801d634:	3714      	adds	r7, #20
 801d636:	46bd      	mov	sp, r7
 801d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d63c:	4770      	bx	lr
 801d63e:	bf00      	nop
 801d640:	2000a90c 	.word	0x2000a90c

0801d644 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801d644:	b580      	push	{r7, lr}
 801d646:	b086      	sub	sp, #24
 801d648:	af00      	add	r7, sp, #0
 801d64a:	60f8      	str	r0, [r7, #12]
 801d64c:	60b9      	str	r1, [r7, #8]
 801d64e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801d654:	f001 fba6 	bl	801eda4 <vPortEnterCritical>
 801d658:	697b      	ldr	r3, [r7, #20]
 801d65a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d65e:	b25b      	sxtb	r3, r3
 801d660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d664:	d103      	bne.n	801d66e <vQueueWaitForMessageRestricted+0x2a>
 801d666:	697b      	ldr	r3, [r7, #20]
 801d668:	2200      	movs	r2, #0
 801d66a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d66e:	697b      	ldr	r3, [r7, #20]
 801d670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d674:	b25b      	sxtb	r3, r3
 801d676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d67a:	d103      	bne.n	801d684 <vQueueWaitForMessageRestricted+0x40>
 801d67c:	697b      	ldr	r3, [r7, #20]
 801d67e:	2200      	movs	r2, #0
 801d680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d684:	f001 fbbe 	bl	801ee04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801d688:	697b      	ldr	r3, [r7, #20]
 801d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d106      	bne.n	801d69e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801d690:	697b      	ldr	r3, [r7, #20]
 801d692:	3324      	adds	r3, #36	; 0x24
 801d694:	687a      	ldr	r2, [r7, #4]
 801d696:	68b9      	ldr	r1, [r7, #8]
 801d698:	4618      	mov	r0, r3
 801d69a:	f000 fc3b 	bl	801df14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801d69e:	6978      	ldr	r0, [r7, #20]
 801d6a0:	f7ff ff26 	bl	801d4f0 <prvUnlockQueue>
	}
 801d6a4:	bf00      	nop
 801d6a6:	3718      	adds	r7, #24
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd80      	pop	{r7, pc}

0801d6ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b08e      	sub	sp, #56	; 0x38
 801d6b0:	af04      	add	r7, sp, #16
 801d6b2:	60f8      	str	r0, [r7, #12]
 801d6b4:	60b9      	str	r1, [r7, #8]
 801d6b6:	607a      	str	r2, [r7, #4]
 801d6b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801d6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d10a      	bne.n	801d6d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 801d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d6c4:	f383 8811 	msr	BASEPRI, r3
 801d6c8:	f3bf 8f6f 	isb	sy
 801d6cc:	f3bf 8f4f 	dsb	sy
 801d6d0:	623b      	str	r3, [r7, #32]
}
 801d6d2:	bf00      	nop
 801d6d4:	e7fe      	b.n	801d6d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801d6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d10a      	bne.n	801d6f2 <xTaskCreateStatic+0x46>
	__asm volatile
 801d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d6e0:	f383 8811 	msr	BASEPRI, r3
 801d6e4:	f3bf 8f6f 	isb	sy
 801d6e8:	f3bf 8f4f 	dsb	sy
 801d6ec:	61fb      	str	r3, [r7, #28]
}
 801d6ee:	bf00      	nop
 801d6f0:	e7fe      	b.n	801d6f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801d6f2:	235c      	movs	r3, #92	; 0x5c
 801d6f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801d6f6:	693b      	ldr	r3, [r7, #16]
 801d6f8:	2b5c      	cmp	r3, #92	; 0x5c
 801d6fa:	d00a      	beq.n	801d712 <xTaskCreateStatic+0x66>
	__asm volatile
 801d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d700:	f383 8811 	msr	BASEPRI, r3
 801d704:	f3bf 8f6f 	isb	sy
 801d708:	f3bf 8f4f 	dsb	sy
 801d70c:	61bb      	str	r3, [r7, #24]
}
 801d70e:	bf00      	nop
 801d710:	e7fe      	b.n	801d710 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801d712:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d716:	2b00      	cmp	r3, #0
 801d718:	d01e      	beq.n	801d758 <xTaskCreateStatic+0xac>
 801d71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d01b      	beq.n	801d758 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d722:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801d724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d728:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d72c:	2202      	movs	r2, #2
 801d72e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801d732:	2300      	movs	r3, #0
 801d734:	9303      	str	r3, [sp, #12]
 801d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d738:	9302      	str	r3, [sp, #8]
 801d73a:	f107 0314 	add.w	r3, r7, #20
 801d73e:	9301      	str	r3, [sp, #4]
 801d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d742:	9300      	str	r3, [sp, #0]
 801d744:	683b      	ldr	r3, [r7, #0]
 801d746:	687a      	ldr	r2, [r7, #4]
 801d748:	68b9      	ldr	r1, [r7, #8]
 801d74a:	68f8      	ldr	r0, [r7, #12]
 801d74c:	f000 f850 	bl	801d7f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d752:	f000 f8dd 	bl	801d910 <prvAddNewTaskToReadyList>
 801d756:	e001      	b.n	801d75c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801d758:	2300      	movs	r3, #0
 801d75a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801d75c:	697b      	ldr	r3, [r7, #20]
	}
 801d75e:	4618      	mov	r0, r3
 801d760:	3728      	adds	r7, #40	; 0x28
 801d762:	46bd      	mov	sp, r7
 801d764:	bd80      	pop	{r7, pc}

0801d766 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801d766:	b580      	push	{r7, lr}
 801d768:	b08c      	sub	sp, #48	; 0x30
 801d76a:	af04      	add	r7, sp, #16
 801d76c:	60f8      	str	r0, [r7, #12]
 801d76e:	60b9      	str	r1, [r7, #8]
 801d770:	603b      	str	r3, [r7, #0]
 801d772:	4613      	mov	r3, r2
 801d774:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801d776:	88fb      	ldrh	r3, [r7, #6]
 801d778:	009b      	lsls	r3, r3, #2
 801d77a:	4618      	mov	r0, r3
 801d77c:	f001 fc34 	bl	801efe8 <pvPortMalloc>
 801d780:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801d782:	697b      	ldr	r3, [r7, #20]
 801d784:	2b00      	cmp	r3, #0
 801d786:	d00e      	beq.n	801d7a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801d788:	205c      	movs	r0, #92	; 0x5c
 801d78a:	f001 fc2d 	bl	801efe8 <pvPortMalloc>
 801d78e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801d790:	69fb      	ldr	r3, [r7, #28]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d003      	beq.n	801d79e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801d796:	69fb      	ldr	r3, [r7, #28]
 801d798:	697a      	ldr	r2, [r7, #20]
 801d79a:	631a      	str	r2, [r3, #48]	; 0x30
 801d79c:	e005      	b.n	801d7aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801d79e:	6978      	ldr	r0, [r7, #20]
 801d7a0:	f001 fcee 	bl	801f180 <vPortFree>
 801d7a4:	e001      	b.n	801d7aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801d7a6:	2300      	movs	r3, #0
 801d7a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801d7aa:	69fb      	ldr	r3, [r7, #28]
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d017      	beq.n	801d7e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801d7b0:	69fb      	ldr	r3, [r7, #28]
 801d7b2:	2200      	movs	r2, #0
 801d7b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801d7b8:	88fa      	ldrh	r2, [r7, #6]
 801d7ba:	2300      	movs	r3, #0
 801d7bc:	9303      	str	r3, [sp, #12]
 801d7be:	69fb      	ldr	r3, [r7, #28]
 801d7c0:	9302      	str	r3, [sp, #8]
 801d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7c4:	9301      	str	r3, [sp, #4]
 801d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7c8:	9300      	str	r3, [sp, #0]
 801d7ca:	683b      	ldr	r3, [r7, #0]
 801d7cc:	68b9      	ldr	r1, [r7, #8]
 801d7ce:	68f8      	ldr	r0, [r7, #12]
 801d7d0:	f000 f80e 	bl	801d7f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d7d4:	69f8      	ldr	r0, [r7, #28]
 801d7d6:	f000 f89b 	bl	801d910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801d7da:	2301      	movs	r3, #1
 801d7dc:	61bb      	str	r3, [r7, #24]
 801d7de:	e002      	b.n	801d7e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801d7e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801d7e6:	69bb      	ldr	r3, [r7, #24]
	}
 801d7e8:	4618      	mov	r0, r3
 801d7ea:	3720      	adds	r7, #32
 801d7ec:	46bd      	mov	sp, r7
 801d7ee:	bd80      	pop	{r7, pc}

0801d7f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801d7f0:	b580      	push	{r7, lr}
 801d7f2:	b088      	sub	sp, #32
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	60f8      	str	r0, [r7, #12]
 801d7f8:	60b9      	str	r1, [r7, #8]
 801d7fa:	607a      	str	r2, [r7, #4]
 801d7fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d800:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	009b      	lsls	r3, r3, #2
 801d806:	461a      	mov	r2, r3
 801d808:	21a5      	movs	r1, #165	; 0xa5
 801d80a:	f001 fe17 	bl	801f43c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d818:	3b01      	subs	r3, #1
 801d81a:	009b      	lsls	r3, r3, #2
 801d81c:	4413      	add	r3, r2
 801d81e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801d820:	69bb      	ldr	r3, [r7, #24]
 801d822:	f023 0307 	bic.w	r3, r3, #7
 801d826:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801d828:	69bb      	ldr	r3, [r7, #24]
 801d82a:	f003 0307 	and.w	r3, r3, #7
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d00a      	beq.n	801d848 <prvInitialiseNewTask+0x58>
	__asm volatile
 801d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d836:	f383 8811 	msr	BASEPRI, r3
 801d83a:	f3bf 8f6f 	isb	sy
 801d83e:	f3bf 8f4f 	dsb	sy
 801d842:	617b      	str	r3, [r7, #20]
}
 801d844:	bf00      	nop
 801d846:	e7fe      	b.n	801d846 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801d848:	68bb      	ldr	r3, [r7, #8]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d01f      	beq.n	801d88e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d84e:	2300      	movs	r3, #0
 801d850:	61fb      	str	r3, [r7, #28]
 801d852:	e012      	b.n	801d87a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801d854:	68ba      	ldr	r2, [r7, #8]
 801d856:	69fb      	ldr	r3, [r7, #28]
 801d858:	4413      	add	r3, r2
 801d85a:	7819      	ldrb	r1, [r3, #0]
 801d85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d85e:	69fb      	ldr	r3, [r7, #28]
 801d860:	4413      	add	r3, r2
 801d862:	3334      	adds	r3, #52	; 0x34
 801d864:	460a      	mov	r2, r1
 801d866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801d868:	68ba      	ldr	r2, [r7, #8]
 801d86a:	69fb      	ldr	r3, [r7, #28]
 801d86c:	4413      	add	r3, r2
 801d86e:	781b      	ldrb	r3, [r3, #0]
 801d870:	2b00      	cmp	r3, #0
 801d872:	d006      	beq.n	801d882 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d874:	69fb      	ldr	r3, [r7, #28]
 801d876:	3301      	adds	r3, #1
 801d878:	61fb      	str	r3, [r7, #28]
 801d87a:	69fb      	ldr	r3, [r7, #28]
 801d87c:	2b0f      	cmp	r3, #15
 801d87e:	d9e9      	bls.n	801d854 <prvInitialiseNewTask+0x64>
 801d880:	e000      	b.n	801d884 <prvInitialiseNewTask+0x94>
			{
				break;
 801d882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801d884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d886:	2200      	movs	r2, #0
 801d888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d88c:	e003      	b.n	801d896 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d890:	2200      	movs	r2, #0
 801d892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801d896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d898:	2b37      	cmp	r3, #55	; 0x37
 801d89a:	d901      	bls.n	801d8a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801d89c:	2337      	movs	r3, #55	; 0x37
 801d89e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801d8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d8a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d8aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801d8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8ae:	2200      	movs	r2, #0
 801d8b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801d8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8b4:	3304      	adds	r3, #4
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f7ff f978 	bl	801cbac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8be:	3318      	adds	r3, #24
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f7ff f973 	bl	801cbac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d8da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8de:	2200      	movs	r2, #0
 801d8e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8e4:	2200      	movs	r2, #0
 801d8e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801d8ea:	683a      	ldr	r2, [r7, #0]
 801d8ec:	68f9      	ldr	r1, [r7, #12]
 801d8ee:	69b8      	ldr	r0, [r7, #24]
 801d8f0:	f001 f928 	bl	801eb44 <pxPortInitialiseStack>
 801d8f4:	4602      	mov	r2, r0
 801d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d002      	beq.n	801d906 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d906:	bf00      	nop
 801d908:	3720      	adds	r7, #32
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}
	...

0801d910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b082      	sub	sp, #8
 801d914:	af00      	add	r7, sp, #0
 801d916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801d918:	f001 fa44 	bl	801eda4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801d91c:	4b2d      	ldr	r3, [pc, #180]	; (801d9d4 <prvAddNewTaskToReadyList+0xc4>)
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	3301      	adds	r3, #1
 801d922:	4a2c      	ldr	r2, [pc, #176]	; (801d9d4 <prvAddNewTaskToReadyList+0xc4>)
 801d924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801d926:	4b2c      	ldr	r3, [pc, #176]	; (801d9d8 <prvAddNewTaskToReadyList+0xc8>)
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d109      	bne.n	801d942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801d92e:	4a2a      	ldr	r2, [pc, #168]	; (801d9d8 <prvAddNewTaskToReadyList+0xc8>)
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801d934:	4b27      	ldr	r3, [pc, #156]	; (801d9d4 <prvAddNewTaskToReadyList+0xc4>)
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	2b01      	cmp	r3, #1
 801d93a:	d110      	bne.n	801d95e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801d93c:	f000 fc16 	bl	801e16c <prvInitialiseTaskLists>
 801d940:	e00d      	b.n	801d95e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801d942:	4b26      	ldr	r3, [pc, #152]	; (801d9dc <prvAddNewTaskToReadyList+0xcc>)
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d109      	bne.n	801d95e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801d94a:	4b23      	ldr	r3, [pc, #140]	; (801d9d8 <prvAddNewTaskToReadyList+0xc8>)
 801d94c:	681b      	ldr	r3, [r3, #0]
 801d94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d954:	429a      	cmp	r2, r3
 801d956:	d802      	bhi.n	801d95e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801d958:	4a1f      	ldr	r2, [pc, #124]	; (801d9d8 <prvAddNewTaskToReadyList+0xc8>)
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801d95e:	4b20      	ldr	r3, [pc, #128]	; (801d9e0 <prvAddNewTaskToReadyList+0xd0>)
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	3301      	adds	r3, #1
 801d964:	4a1e      	ldr	r2, [pc, #120]	; (801d9e0 <prvAddNewTaskToReadyList+0xd0>)
 801d966:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801d968:	4b1d      	ldr	r3, [pc, #116]	; (801d9e0 <prvAddNewTaskToReadyList+0xd0>)
 801d96a:	681a      	ldr	r2, [r3, #0]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d974:	4b1b      	ldr	r3, [pc, #108]	; (801d9e4 <prvAddNewTaskToReadyList+0xd4>)
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	429a      	cmp	r2, r3
 801d97a:	d903      	bls.n	801d984 <prvAddNewTaskToReadyList+0x74>
 801d97c:	687b      	ldr	r3, [r7, #4]
 801d97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d980:	4a18      	ldr	r2, [pc, #96]	; (801d9e4 <prvAddNewTaskToReadyList+0xd4>)
 801d982:	6013      	str	r3, [r2, #0]
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d988:	4613      	mov	r3, r2
 801d98a:	009b      	lsls	r3, r3, #2
 801d98c:	4413      	add	r3, r2
 801d98e:	009b      	lsls	r3, r3, #2
 801d990:	4a15      	ldr	r2, [pc, #84]	; (801d9e8 <prvAddNewTaskToReadyList+0xd8>)
 801d992:	441a      	add	r2, r3
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	3304      	adds	r3, #4
 801d998:	4619      	mov	r1, r3
 801d99a:	4610      	mov	r0, r2
 801d99c:	f7ff f913 	bl	801cbc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801d9a0:	f001 fa30 	bl	801ee04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801d9a4:	4b0d      	ldr	r3, [pc, #52]	; (801d9dc <prvAddNewTaskToReadyList+0xcc>)
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d00e      	beq.n	801d9ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801d9ac:	4b0a      	ldr	r3, [pc, #40]	; (801d9d8 <prvAddNewTaskToReadyList+0xc8>)
 801d9ae:	681b      	ldr	r3, [r3, #0]
 801d9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9b6:	429a      	cmp	r2, r3
 801d9b8:	d207      	bcs.n	801d9ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801d9ba:	4b0c      	ldr	r3, [pc, #48]	; (801d9ec <prvAddNewTaskToReadyList+0xdc>)
 801d9bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d9c0:	601a      	str	r2, [r3, #0]
 801d9c2:	f3bf 8f4f 	dsb	sy
 801d9c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d9ca:	bf00      	nop
 801d9cc:	3708      	adds	r7, #8
 801d9ce:	46bd      	mov	sp, r7
 801d9d0:	bd80      	pop	{r7, pc}
 801d9d2:	bf00      	nop
 801d9d4:	20001c90 	.word	0x20001c90
 801d9d8:	200017bc 	.word	0x200017bc
 801d9dc:	20001c9c 	.word	0x20001c9c
 801d9e0:	20001cac 	.word	0x20001cac
 801d9e4:	20001c98 	.word	0x20001c98
 801d9e8:	200017c0 	.word	0x200017c0
 801d9ec:	e000ed04 	.word	0xe000ed04

0801d9f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801d9f0:	b580      	push	{r7, lr}
 801d9f2:	b084      	sub	sp, #16
 801d9f4:	af00      	add	r7, sp, #0
 801d9f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d017      	beq.n	801da32 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801da02:	4b13      	ldr	r3, [pc, #76]	; (801da50 <vTaskDelay+0x60>)
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d00a      	beq.n	801da20 <vTaskDelay+0x30>
	__asm volatile
 801da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801da0e:	f383 8811 	msr	BASEPRI, r3
 801da12:	f3bf 8f6f 	isb	sy
 801da16:	f3bf 8f4f 	dsb	sy
 801da1a:	60bb      	str	r3, [r7, #8]
}
 801da1c:	bf00      	nop
 801da1e:	e7fe      	b.n	801da1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801da20:	f000 f880 	bl	801db24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801da24:	2100      	movs	r1, #0
 801da26:	6878      	ldr	r0, [r7, #4]
 801da28:	f000 fcea 	bl	801e400 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801da2c:	f000 f888 	bl	801db40 <xTaskResumeAll>
 801da30:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d107      	bne.n	801da48 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801da38:	4b06      	ldr	r3, [pc, #24]	; (801da54 <vTaskDelay+0x64>)
 801da3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801da3e:	601a      	str	r2, [r3, #0]
 801da40:	f3bf 8f4f 	dsb	sy
 801da44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801da48:	bf00      	nop
 801da4a:	3710      	adds	r7, #16
 801da4c:	46bd      	mov	sp, r7
 801da4e:	bd80      	pop	{r7, pc}
 801da50:	20001cb8 	.word	0x20001cb8
 801da54:	e000ed04 	.word	0xe000ed04

0801da58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801da58:	b580      	push	{r7, lr}
 801da5a:	b08a      	sub	sp, #40	; 0x28
 801da5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801da5e:	2300      	movs	r3, #0
 801da60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801da62:	2300      	movs	r3, #0
 801da64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801da66:	463a      	mov	r2, r7
 801da68:	1d39      	adds	r1, r7, #4
 801da6a:	f107 0308 	add.w	r3, r7, #8
 801da6e:	4618      	mov	r0, r3
 801da70:	f7ff f848 	bl	801cb04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801da74:	6839      	ldr	r1, [r7, #0]
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	68ba      	ldr	r2, [r7, #8]
 801da7a:	9202      	str	r2, [sp, #8]
 801da7c:	9301      	str	r3, [sp, #4]
 801da7e:	2300      	movs	r3, #0
 801da80:	9300      	str	r3, [sp, #0]
 801da82:	2300      	movs	r3, #0
 801da84:	460a      	mov	r2, r1
 801da86:	4921      	ldr	r1, [pc, #132]	; (801db0c <vTaskStartScheduler+0xb4>)
 801da88:	4821      	ldr	r0, [pc, #132]	; (801db10 <vTaskStartScheduler+0xb8>)
 801da8a:	f7ff fe0f 	bl	801d6ac <xTaskCreateStatic>
 801da8e:	4603      	mov	r3, r0
 801da90:	4a20      	ldr	r2, [pc, #128]	; (801db14 <vTaskStartScheduler+0xbc>)
 801da92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801da94:	4b1f      	ldr	r3, [pc, #124]	; (801db14 <vTaskStartScheduler+0xbc>)
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d002      	beq.n	801daa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801da9c:	2301      	movs	r3, #1
 801da9e:	617b      	str	r3, [r7, #20]
 801daa0:	e001      	b.n	801daa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801daa2:	2300      	movs	r3, #0
 801daa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801daa6:	697b      	ldr	r3, [r7, #20]
 801daa8:	2b01      	cmp	r3, #1
 801daaa:	d102      	bne.n	801dab2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801daac:	f000 fcfc 	bl	801e4a8 <xTimerCreateTimerTask>
 801dab0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801dab2:	697b      	ldr	r3, [r7, #20]
 801dab4:	2b01      	cmp	r3, #1
 801dab6:	d116      	bne.n	801dae6 <vTaskStartScheduler+0x8e>
	__asm volatile
 801dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dabc:	f383 8811 	msr	BASEPRI, r3
 801dac0:	f3bf 8f6f 	isb	sy
 801dac4:	f3bf 8f4f 	dsb	sy
 801dac8:	613b      	str	r3, [r7, #16]
}
 801daca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801dacc:	4b12      	ldr	r3, [pc, #72]	; (801db18 <vTaskStartScheduler+0xc0>)
 801dace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dad2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801dad4:	4b11      	ldr	r3, [pc, #68]	; (801db1c <vTaskStartScheduler+0xc4>)
 801dad6:	2201      	movs	r2, #1
 801dad8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801dada:	4b11      	ldr	r3, [pc, #68]	; (801db20 <vTaskStartScheduler+0xc8>)
 801dadc:	2200      	movs	r2, #0
 801dade:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801dae0:	f001 f8be 	bl	801ec60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801dae4:	e00e      	b.n	801db04 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801dae6:	697b      	ldr	r3, [r7, #20]
 801dae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801daec:	d10a      	bne.n	801db04 <vTaskStartScheduler+0xac>
	__asm volatile
 801daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801daf2:	f383 8811 	msr	BASEPRI, r3
 801daf6:	f3bf 8f6f 	isb	sy
 801dafa:	f3bf 8f4f 	dsb	sy
 801dafe:	60fb      	str	r3, [r7, #12]
}
 801db00:	bf00      	nop
 801db02:	e7fe      	b.n	801db02 <vTaskStartScheduler+0xaa>
}
 801db04:	bf00      	nop
 801db06:	3718      	adds	r7, #24
 801db08:	46bd      	mov	sp, r7
 801db0a:	bd80      	pop	{r7, pc}
 801db0c:	08025b10 	.word	0x08025b10
 801db10:	0801e13d 	.word	0x0801e13d
 801db14:	20001cb4 	.word	0x20001cb4
 801db18:	20001cb0 	.word	0x20001cb0
 801db1c:	20001c9c 	.word	0x20001c9c
 801db20:	20001c94 	.word	0x20001c94

0801db24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801db24:	b480      	push	{r7}
 801db26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801db28:	4b04      	ldr	r3, [pc, #16]	; (801db3c <vTaskSuspendAll+0x18>)
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	3301      	adds	r3, #1
 801db2e:	4a03      	ldr	r2, [pc, #12]	; (801db3c <vTaskSuspendAll+0x18>)
 801db30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801db32:	bf00      	nop
 801db34:	46bd      	mov	sp, r7
 801db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db3a:	4770      	bx	lr
 801db3c:	20001cb8 	.word	0x20001cb8

0801db40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801db40:	b580      	push	{r7, lr}
 801db42:	b084      	sub	sp, #16
 801db44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801db46:	2300      	movs	r3, #0
 801db48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801db4a:	2300      	movs	r3, #0
 801db4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801db4e:	4b42      	ldr	r3, [pc, #264]	; (801dc58 <xTaskResumeAll+0x118>)
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d10a      	bne.n	801db6c <xTaskResumeAll+0x2c>
	__asm volatile
 801db56:	f04f 0350 	mov.w	r3, #80	; 0x50
 801db5a:	f383 8811 	msr	BASEPRI, r3
 801db5e:	f3bf 8f6f 	isb	sy
 801db62:	f3bf 8f4f 	dsb	sy
 801db66:	603b      	str	r3, [r7, #0]
}
 801db68:	bf00      	nop
 801db6a:	e7fe      	b.n	801db6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801db6c:	f001 f91a 	bl	801eda4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801db70:	4b39      	ldr	r3, [pc, #228]	; (801dc58 <xTaskResumeAll+0x118>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	3b01      	subs	r3, #1
 801db76:	4a38      	ldr	r2, [pc, #224]	; (801dc58 <xTaskResumeAll+0x118>)
 801db78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801db7a:	4b37      	ldr	r3, [pc, #220]	; (801dc58 <xTaskResumeAll+0x118>)
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d162      	bne.n	801dc48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801db82:	4b36      	ldr	r3, [pc, #216]	; (801dc5c <xTaskResumeAll+0x11c>)
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	2b00      	cmp	r3, #0
 801db88:	d05e      	beq.n	801dc48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801db8a:	e02f      	b.n	801dbec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801db8c:	4b34      	ldr	r3, [pc, #208]	; (801dc60 <xTaskResumeAll+0x120>)
 801db8e:	68db      	ldr	r3, [r3, #12]
 801db90:	68db      	ldr	r3, [r3, #12]
 801db92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801db94:	68fb      	ldr	r3, [r7, #12]
 801db96:	3318      	adds	r3, #24
 801db98:	4618      	mov	r0, r3
 801db9a:	f7ff f871 	bl	801cc80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	3304      	adds	r3, #4
 801dba2:	4618      	mov	r0, r3
 801dba4:	f7ff f86c 	bl	801cc80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbac:	4b2d      	ldr	r3, [pc, #180]	; (801dc64 <xTaskResumeAll+0x124>)
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	429a      	cmp	r2, r3
 801dbb2:	d903      	bls.n	801dbbc <xTaskResumeAll+0x7c>
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbb8:	4a2a      	ldr	r2, [pc, #168]	; (801dc64 <xTaskResumeAll+0x124>)
 801dbba:	6013      	str	r3, [r2, #0]
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbc0:	4613      	mov	r3, r2
 801dbc2:	009b      	lsls	r3, r3, #2
 801dbc4:	4413      	add	r3, r2
 801dbc6:	009b      	lsls	r3, r3, #2
 801dbc8:	4a27      	ldr	r2, [pc, #156]	; (801dc68 <xTaskResumeAll+0x128>)
 801dbca:	441a      	add	r2, r3
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	3304      	adds	r3, #4
 801dbd0:	4619      	mov	r1, r3
 801dbd2:	4610      	mov	r0, r2
 801dbd4:	f7fe fff7 	bl	801cbc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbdc:	4b23      	ldr	r3, [pc, #140]	; (801dc6c <xTaskResumeAll+0x12c>)
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbe2:	429a      	cmp	r2, r3
 801dbe4:	d302      	bcc.n	801dbec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801dbe6:	4b22      	ldr	r3, [pc, #136]	; (801dc70 <xTaskResumeAll+0x130>)
 801dbe8:	2201      	movs	r2, #1
 801dbea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801dbec:	4b1c      	ldr	r3, [pc, #112]	; (801dc60 <xTaskResumeAll+0x120>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	2b00      	cmp	r3, #0
 801dbf2:	d1cb      	bne.n	801db8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801dbf4:	68fb      	ldr	r3, [r7, #12]
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d001      	beq.n	801dbfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801dbfa:	f000 fb55 	bl	801e2a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801dbfe:	4b1d      	ldr	r3, [pc, #116]	; (801dc74 <xTaskResumeAll+0x134>)
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d010      	beq.n	801dc2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801dc0a:	f000 f847 	bl	801dc9c <xTaskIncrementTick>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d002      	beq.n	801dc1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801dc14:	4b16      	ldr	r3, [pc, #88]	; (801dc70 <xTaskResumeAll+0x130>)
 801dc16:	2201      	movs	r2, #1
 801dc18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	3b01      	subs	r3, #1
 801dc1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d1f1      	bne.n	801dc0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801dc26:	4b13      	ldr	r3, [pc, #76]	; (801dc74 <xTaskResumeAll+0x134>)
 801dc28:	2200      	movs	r2, #0
 801dc2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801dc2c:	4b10      	ldr	r3, [pc, #64]	; (801dc70 <xTaskResumeAll+0x130>)
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d009      	beq.n	801dc48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801dc34:	2301      	movs	r3, #1
 801dc36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801dc38:	4b0f      	ldr	r3, [pc, #60]	; (801dc78 <xTaskResumeAll+0x138>)
 801dc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dc3e:	601a      	str	r2, [r3, #0]
 801dc40:	f3bf 8f4f 	dsb	sy
 801dc44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801dc48:	f001 f8dc 	bl	801ee04 <vPortExitCritical>

	return xAlreadyYielded;
 801dc4c:	68bb      	ldr	r3, [r7, #8]
}
 801dc4e:	4618      	mov	r0, r3
 801dc50:	3710      	adds	r7, #16
 801dc52:	46bd      	mov	sp, r7
 801dc54:	bd80      	pop	{r7, pc}
 801dc56:	bf00      	nop
 801dc58:	20001cb8 	.word	0x20001cb8
 801dc5c:	20001c90 	.word	0x20001c90
 801dc60:	20001c50 	.word	0x20001c50
 801dc64:	20001c98 	.word	0x20001c98
 801dc68:	200017c0 	.word	0x200017c0
 801dc6c:	200017bc 	.word	0x200017bc
 801dc70:	20001ca4 	.word	0x20001ca4
 801dc74:	20001ca0 	.word	0x20001ca0
 801dc78:	e000ed04 	.word	0xe000ed04

0801dc7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801dc7c:	b480      	push	{r7}
 801dc7e:	b083      	sub	sp, #12
 801dc80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801dc82:	4b05      	ldr	r3, [pc, #20]	; (801dc98 <xTaskGetTickCount+0x1c>)
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801dc88:	687b      	ldr	r3, [r7, #4]
}
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	370c      	adds	r7, #12
 801dc8e:	46bd      	mov	sp, r7
 801dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc94:	4770      	bx	lr
 801dc96:	bf00      	nop
 801dc98:	20001c94 	.word	0x20001c94

0801dc9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801dc9c:	b580      	push	{r7, lr}
 801dc9e:	b086      	sub	sp, #24
 801dca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801dca2:	2300      	movs	r3, #0
 801dca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801dca6:	4b4f      	ldr	r3, [pc, #316]	; (801dde4 <xTaskIncrementTick+0x148>)
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	f040 808f 	bne.w	801ddce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801dcb0:	4b4d      	ldr	r3, [pc, #308]	; (801dde8 <xTaskIncrementTick+0x14c>)
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	3301      	adds	r3, #1
 801dcb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801dcb8:	4a4b      	ldr	r2, [pc, #300]	; (801dde8 <xTaskIncrementTick+0x14c>)
 801dcba:	693b      	ldr	r3, [r7, #16]
 801dcbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801dcbe:	693b      	ldr	r3, [r7, #16]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d120      	bne.n	801dd06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801dcc4:	4b49      	ldr	r3, [pc, #292]	; (801ddec <xTaskIncrementTick+0x150>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d00a      	beq.n	801dce4 <xTaskIncrementTick+0x48>
	__asm volatile
 801dcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dcd2:	f383 8811 	msr	BASEPRI, r3
 801dcd6:	f3bf 8f6f 	isb	sy
 801dcda:	f3bf 8f4f 	dsb	sy
 801dcde:	603b      	str	r3, [r7, #0]
}
 801dce0:	bf00      	nop
 801dce2:	e7fe      	b.n	801dce2 <xTaskIncrementTick+0x46>
 801dce4:	4b41      	ldr	r3, [pc, #260]	; (801ddec <xTaskIncrementTick+0x150>)
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	60fb      	str	r3, [r7, #12]
 801dcea:	4b41      	ldr	r3, [pc, #260]	; (801ddf0 <xTaskIncrementTick+0x154>)
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	4a3f      	ldr	r2, [pc, #252]	; (801ddec <xTaskIncrementTick+0x150>)
 801dcf0:	6013      	str	r3, [r2, #0]
 801dcf2:	4a3f      	ldr	r2, [pc, #252]	; (801ddf0 <xTaskIncrementTick+0x154>)
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	6013      	str	r3, [r2, #0]
 801dcf8:	4b3e      	ldr	r3, [pc, #248]	; (801ddf4 <xTaskIncrementTick+0x158>)
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	3301      	adds	r3, #1
 801dcfe:	4a3d      	ldr	r2, [pc, #244]	; (801ddf4 <xTaskIncrementTick+0x158>)
 801dd00:	6013      	str	r3, [r2, #0]
 801dd02:	f000 fad1 	bl	801e2a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801dd06:	4b3c      	ldr	r3, [pc, #240]	; (801ddf8 <xTaskIncrementTick+0x15c>)
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	693a      	ldr	r2, [r7, #16]
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	d349      	bcc.n	801dda4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801dd10:	4b36      	ldr	r3, [pc, #216]	; (801ddec <xTaskIncrementTick+0x150>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d104      	bne.n	801dd24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801dd1a:	4b37      	ldr	r3, [pc, #220]	; (801ddf8 <xTaskIncrementTick+0x15c>)
 801dd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dd20:	601a      	str	r2, [r3, #0]
					break;
 801dd22:	e03f      	b.n	801dda4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801dd24:	4b31      	ldr	r3, [pc, #196]	; (801ddec <xTaskIncrementTick+0x150>)
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	68db      	ldr	r3, [r3, #12]
 801dd2a:	68db      	ldr	r3, [r3, #12]
 801dd2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801dd2e:	68bb      	ldr	r3, [r7, #8]
 801dd30:	685b      	ldr	r3, [r3, #4]
 801dd32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801dd34:	693a      	ldr	r2, [r7, #16]
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	429a      	cmp	r2, r3
 801dd3a:	d203      	bcs.n	801dd44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801dd3c:	4a2e      	ldr	r2, [pc, #184]	; (801ddf8 <xTaskIncrementTick+0x15c>)
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801dd42:	e02f      	b.n	801dda4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	3304      	adds	r3, #4
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7fe ff99 	bl	801cc80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801dd4e:	68bb      	ldr	r3, [r7, #8]
 801dd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d004      	beq.n	801dd60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801dd56:	68bb      	ldr	r3, [r7, #8]
 801dd58:	3318      	adds	r3, #24
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	f7fe ff90 	bl	801cc80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801dd60:	68bb      	ldr	r3, [r7, #8]
 801dd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dd64:	4b25      	ldr	r3, [pc, #148]	; (801ddfc <xTaskIncrementTick+0x160>)
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	429a      	cmp	r2, r3
 801dd6a:	d903      	bls.n	801dd74 <xTaskIncrementTick+0xd8>
 801dd6c:	68bb      	ldr	r3, [r7, #8]
 801dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd70:	4a22      	ldr	r2, [pc, #136]	; (801ddfc <xTaskIncrementTick+0x160>)
 801dd72:	6013      	str	r3, [r2, #0]
 801dd74:	68bb      	ldr	r3, [r7, #8]
 801dd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dd78:	4613      	mov	r3, r2
 801dd7a:	009b      	lsls	r3, r3, #2
 801dd7c:	4413      	add	r3, r2
 801dd7e:	009b      	lsls	r3, r3, #2
 801dd80:	4a1f      	ldr	r2, [pc, #124]	; (801de00 <xTaskIncrementTick+0x164>)
 801dd82:	441a      	add	r2, r3
 801dd84:	68bb      	ldr	r3, [r7, #8]
 801dd86:	3304      	adds	r3, #4
 801dd88:	4619      	mov	r1, r3
 801dd8a:	4610      	mov	r0, r2
 801dd8c:	f7fe ff1b 	bl	801cbc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801dd90:	68bb      	ldr	r3, [r7, #8]
 801dd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dd94:	4b1b      	ldr	r3, [pc, #108]	; (801de04 <xTaskIncrementTick+0x168>)
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	d3b8      	bcc.n	801dd10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801dd9e:	2301      	movs	r3, #1
 801dda0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801dda2:	e7b5      	b.n	801dd10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801dda4:	4b17      	ldr	r3, [pc, #92]	; (801de04 <xTaskIncrementTick+0x168>)
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ddaa:	4915      	ldr	r1, [pc, #84]	; (801de00 <xTaskIncrementTick+0x164>)
 801ddac:	4613      	mov	r3, r2
 801ddae:	009b      	lsls	r3, r3, #2
 801ddb0:	4413      	add	r3, r2
 801ddb2:	009b      	lsls	r3, r3, #2
 801ddb4:	440b      	add	r3, r1
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	2b01      	cmp	r3, #1
 801ddba:	d901      	bls.n	801ddc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801ddbc:	2301      	movs	r3, #1
 801ddbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801ddc0:	4b11      	ldr	r3, [pc, #68]	; (801de08 <xTaskIncrementTick+0x16c>)
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d007      	beq.n	801ddd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801ddc8:	2301      	movs	r3, #1
 801ddca:	617b      	str	r3, [r7, #20]
 801ddcc:	e004      	b.n	801ddd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801ddce:	4b0f      	ldr	r3, [pc, #60]	; (801de0c <xTaskIncrementTick+0x170>)
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	3301      	adds	r3, #1
 801ddd4:	4a0d      	ldr	r2, [pc, #52]	; (801de0c <xTaskIncrementTick+0x170>)
 801ddd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801ddd8:	697b      	ldr	r3, [r7, #20]
}
 801ddda:	4618      	mov	r0, r3
 801dddc:	3718      	adds	r7, #24
 801ddde:	46bd      	mov	sp, r7
 801dde0:	bd80      	pop	{r7, pc}
 801dde2:	bf00      	nop
 801dde4:	20001cb8 	.word	0x20001cb8
 801dde8:	20001c94 	.word	0x20001c94
 801ddec:	20001c48 	.word	0x20001c48
 801ddf0:	20001c4c 	.word	0x20001c4c
 801ddf4:	20001ca8 	.word	0x20001ca8
 801ddf8:	20001cb0 	.word	0x20001cb0
 801ddfc:	20001c98 	.word	0x20001c98
 801de00:	200017c0 	.word	0x200017c0
 801de04:	200017bc 	.word	0x200017bc
 801de08:	20001ca4 	.word	0x20001ca4
 801de0c:	20001ca0 	.word	0x20001ca0

0801de10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801de10:	b480      	push	{r7}
 801de12:	b085      	sub	sp, #20
 801de14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801de16:	4b28      	ldr	r3, [pc, #160]	; (801deb8 <vTaskSwitchContext+0xa8>)
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d003      	beq.n	801de26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801de1e:	4b27      	ldr	r3, [pc, #156]	; (801debc <vTaskSwitchContext+0xac>)
 801de20:	2201      	movs	r2, #1
 801de22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801de24:	e041      	b.n	801deaa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801de26:	4b25      	ldr	r3, [pc, #148]	; (801debc <vTaskSwitchContext+0xac>)
 801de28:	2200      	movs	r2, #0
 801de2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801de2c:	4b24      	ldr	r3, [pc, #144]	; (801dec0 <vTaskSwitchContext+0xb0>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	60fb      	str	r3, [r7, #12]
 801de32:	e010      	b.n	801de56 <vTaskSwitchContext+0x46>
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	2b00      	cmp	r3, #0
 801de38:	d10a      	bne.n	801de50 <vTaskSwitchContext+0x40>
	__asm volatile
 801de3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801de3e:	f383 8811 	msr	BASEPRI, r3
 801de42:	f3bf 8f6f 	isb	sy
 801de46:	f3bf 8f4f 	dsb	sy
 801de4a:	607b      	str	r3, [r7, #4]
}
 801de4c:	bf00      	nop
 801de4e:	e7fe      	b.n	801de4e <vTaskSwitchContext+0x3e>
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	3b01      	subs	r3, #1
 801de54:	60fb      	str	r3, [r7, #12]
 801de56:	491b      	ldr	r1, [pc, #108]	; (801dec4 <vTaskSwitchContext+0xb4>)
 801de58:	68fa      	ldr	r2, [r7, #12]
 801de5a:	4613      	mov	r3, r2
 801de5c:	009b      	lsls	r3, r3, #2
 801de5e:	4413      	add	r3, r2
 801de60:	009b      	lsls	r3, r3, #2
 801de62:	440b      	add	r3, r1
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	2b00      	cmp	r3, #0
 801de68:	d0e4      	beq.n	801de34 <vTaskSwitchContext+0x24>
 801de6a:	68fa      	ldr	r2, [r7, #12]
 801de6c:	4613      	mov	r3, r2
 801de6e:	009b      	lsls	r3, r3, #2
 801de70:	4413      	add	r3, r2
 801de72:	009b      	lsls	r3, r3, #2
 801de74:	4a13      	ldr	r2, [pc, #76]	; (801dec4 <vTaskSwitchContext+0xb4>)
 801de76:	4413      	add	r3, r2
 801de78:	60bb      	str	r3, [r7, #8]
 801de7a:	68bb      	ldr	r3, [r7, #8]
 801de7c:	685b      	ldr	r3, [r3, #4]
 801de7e:	685a      	ldr	r2, [r3, #4]
 801de80:	68bb      	ldr	r3, [r7, #8]
 801de82:	605a      	str	r2, [r3, #4]
 801de84:	68bb      	ldr	r3, [r7, #8]
 801de86:	685a      	ldr	r2, [r3, #4]
 801de88:	68bb      	ldr	r3, [r7, #8]
 801de8a:	3308      	adds	r3, #8
 801de8c:	429a      	cmp	r2, r3
 801de8e:	d104      	bne.n	801de9a <vTaskSwitchContext+0x8a>
 801de90:	68bb      	ldr	r3, [r7, #8]
 801de92:	685b      	ldr	r3, [r3, #4]
 801de94:	685a      	ldr	r2, [r3, #4]
 801de96:	68bb      	ldr	r3, [r7, #8]
 801de98:	605a      	str	r2, [r3, #4]
 801de9a:	68bb      	ldr	r3, [r7, #8]
 801de9c:	685b      	ldr	r3, [r3, #4]
 801de9e:	68db      	ldr	r3, [r3, #12]
 801dea0:	4a09      	ldr	r2, [pc, #36]	; (801dec8 <vTaskSwitchContext+0xb8>)
 801dea2:	6013      	str	r3, [r2, #0]
 801dea4:	4a06      	ldr	r2, [pc, #24]	; (801dec0 <vTaskSwitchContext+0xb0>)
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	6013      	str	r3, [r2, #0]
}
 801deaa:	bf00      	nop
 801deac:	3714      	adds	r7, #20
 801deae:	46bd      	mov	sp, r7
 801deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deb4:	4770      	bx	lr
 801deb6:	bf00      	nop
 801deb8:	20001cb8 	.word	0x20001cb8
 801debc:	20001ca4 	.word	0x20001ca4
 801dec0:	20001c98 	.word	0x20001c98
 801dec4:	200017c0 	.word	0x200017c0
 801dec8:	200017bc 	.word	0x200017bc

0801decc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801decc:	b580      	push	{r7, lr}
 801dece:	b084      	sub	sp, #16
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
 801ded4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d10a      	bne.n	801def2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dee0:	f383 8811 	msr	BASEPRI, r3
 801dee4:	f3bf 8f6f 	isb	sy
 801dee8:	f3bf 8f4f 	dsb	sy
 801deec:	60fb      	str	r3, [r7, #12]
}
 801deee:	bf00      	nop
 801def0:	e7fe      	b.n	801def0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801def2:	4b07      	ldr	r3, [pc, #28]	; (801df10 <vTaskPlaceOnEventList+0x44>)
 801def4:	681b      	ldr	r3, [r3, #0]
 801def6:	3318      	adds	r3, #24
 801def8:	4619      	mov	r1, r3
 801defa:	6878      	ldr	r0, [r7, #4]
 801defc:	f7fe fe87 	bl	801cc0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801df00:	2101      	movs	r1, #1
 801df02:	6838      	ldr	r0, [r7, #0]
 801df04:	f000 fa7c 	bl	801e400 <prvAddCurrentTaskToDelayedList>
}
 801df08:	bf00      	nop
 801df0a:	3710      	adds	r7, #16
 801df0c:	46bd      	mov	sp, r7
 801df0e:	bd80      	pop	{r7, pc}
 801df10:	200017bc 	.word	0x200017bc

0801df14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801df14:	b580      	push	{r7, lr}
 801df16:	b086      	sub	sp, #24
 801df18:	af00      	add	r7, sp, #0
 801df1a:	60f8      	str	r0, [r7, #12]
 801df1c:	60b9      	str	r1, [r7, #8]
 801df1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d10a      	bne.n	801df3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801df26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df2a:	f383 8811 	msr	BASEPRI, r3
 801df2e:	f3bf 8f6f 	isb	sy
 801df32:	f3bf 8f4f 	dsb	sy
 801df36:	617b      	str	r3, [r7, #20]
}
 801df38:	bf00      	nop
 801df3a:	e7fe      	b.n	801df3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801df3c:	4b0a      	ldr	r3, [pc, #40]	; (801df68 <vTaskPlaceOnEventListRestricted+0x54>)
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	3318      	adds	r3, #24
 801df42:	4619      	mov	r1, r3
 801df44:	68f8      	ldr	r0, [r7, #12]
 801df46:	f7fe fe3e 	bl	801cbc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d002      	beq.n	801df56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801df50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801df56:	6879      	ldr	r1, [r7, #4]
 801df58:	68b8      	ldr	r0, [r7, #8]
 801df5a:	f000 fa51 	bl	801e400 <prvAddCurrentTaskToDelayedList>
	}
 801df5e:	bf00      	nop
 801df60:	3718      	adds	r7, #24
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}
 801df66:	bf00      	nop
 801df68:	200017bc 	.word	0x200017bc

0801df6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801df6c:	b580      	push	{r7, lr}
 801df6e:	b086      	sub	sp, #24
 801df70:	af00      	add	r7, sp, #0
 801df72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801df74:	687b      	ldr	r3, [r7, #4]
 801df76:	68db      	ldr	r3, [r3, #12]
 801df78:	68db      	ldr	r3, [r3, #12]
 801df7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801df7c:	693b      	ldr	r3, [r7, #16]
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d10a      	bne.n	801df98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df86:	f383 8811 	msr	BASEPRI, r3
 801df8a:	f3bf 8f6f 	isb	sy
 801df8e:	f3bf 8f4f 	dsb	sy
 801df92:	60fb      	str	r3, [r7, #12]
}
 801df94:	bf00      	nop
 801df96:	e7fe      	b.n	801df96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801df98:	693b      	ldr	r3, [r7, #16]
 801df9a:	3318      	adds	r3, #24
 801df9c:	4618      	mov	r0, r3
 801df9e:	f7fe fe6f 	bl	801cc80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801dfa2:	4b1e      	ldr	r3, [pc, #120]	; (801e01c <xTaskRemoveFromEventList+0xb0>)
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d11d      	bne.n	801dfe6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801dfaa:	693b      	ldr	r3, [r7, #16]
 801dfac:	3304      	adds	r3, #4
 801dfae:	4618      	mov	r0, r3
 801dfb0:	f7fe fe66 	bl	801cc80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801dfb4:	693b      	ldr	r3, [r7, #16]
 801dfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dfb8:	4b19      	ldr	r3, [pc, #100]	; (801e020 <xTaskRemoveFromEventList+0xb4>)
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	429a      	cmp	r2, r3
 801dfbe:	d903      	bls.n	801dfc8 <xTaskRemoveFromEventList+0x5c>
 801dfc0:	693b      	ldr	r3, [r7, #16]
 801dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfc4:	4a16      	ldr	r2, [pc, #88]	; (801e020 <xTaskRemoveFromEventList+0xb4>)
 801dfc6:	6013      	str	r3, [r2, #0]
 801dfc8:	693b      	ldr	r3, [r7, #16]
 801dfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dfcc:	4613      	mov	r3, r2
 801dfce:	009b      	lsls	r3, r3, #2
 801dfd0:	4413      	add	r3, r2
 801dfd2:	009b      	lsls	r3, r3, #2
 801dfd4:	4a13      	ldr	r2, [pc, #76]	; (801e024 <xTaskRemoveFromEventList+0xb8>)
 801dfd6:	441a      	add	r2, r3
 801dfd8:	693b      	ldr	r3, [r7, #16]
 801dfda:	3304      	adds	r3, #4
 801dfdc:	4619      	mov	r1, r3
 801dfde:	4610      	mov	r0, r2
 801dfe0:	f7fe fdf1 	bl	801cbc6 <vListInsertEnd>
 801dfe4:	e005      	b.n	801dff2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801dfe6:	693b      	ldr	r3, [r7, #16]
 801dfe8:	3318      	adds	r3, #24
 801dfea:	4619      	mov	r1, r3
 801dfec:	480e      	ldr	r0, [pc, #56]	; (801e028 <xTaskRemoveFromEventList+0xbc>)
 801dfee:	f7fe fdea 	bl	801cbc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801dff2:	693b      	ldr	r3, [r7, #16]
 801dff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dff6:	4b0d      	ldr	r3, [pc, #52]	; (801e02c <xTaskRemoveFromEventList+0xc0>)
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dffc:	429a      	cmp	r2, r3
 801dffe:	d905      	bls.n	801e00c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801e000:	2301      	movs	r3, #1
 801e002:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801e004:	4b0a      	ldr	r3, [pc, #40]	; (801e030 <xTaskRemoveFromEventList+0xc4>)
 801e006:	2201      	movs	r2, #1
 801e008:	601a      	str	r2, [r3, #0]
 801e00a:	e001      	b.n	801e010 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801e00c:	2300      	movs	r3, #0
 801e00e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801e010:	697b      	ldr	r3, [r7, #20]
}
 801e012:	4618      	mov	r0, r3
 801e014:	3718      	adds	r7, #24
 801e016:	46bd      	mov	sp, r7
 801e018:	bd80      	pop	{r7, pc}
 801e01a:	bf00      	nop
 801e01c:	20001cb8 	.word	0x20001cb8
 801e020:	20001c98 	.word	0x20001c98
 801e024:	200017c0 	.word	0x200017c0
 801e028:	20001c50 	.word	0x20001c50
 801e02c:	200017bc 	.word	0x200017bc
 801e030:	20001ca4 	.word	0x20001ca4

0801e034 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801e034:	b480      	push	{r7}
 801e036:	b083      	sub	sp, #12
 801e038:	af00      	add	r7, sp, #0
 801e03a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801e03c:	4b06      	ldr	r3, [pc, #24]	; (801e058 <vTaskInternalSetTimeOutState+0x24>)
 801e03e:	681a      	ldr	r2, [r3, #0]
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801e044:	4b05      	ldr	r3, [pc, #20]	; (801e05c <vTaskInternalSetTimeOutState+0x28>)
 801e046:	681a      	ldr	r2, [r3, #0]
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	605a      	str	r2, [r3, #4]
}
 801e04c:	bf00      	nop
 801e04e:	370c      	adds	r7, #12
 801e050:	46bd      	mov	sp, r7
 801e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e056:	4770      	bx	lr
 801e058:	20001ca8 	.word	0x20001ca8
 801e05c:	20001c94 	.word	0x20001c94

0801e060 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801e060:	b580      	push	{r7, lr}
 801e062:	b088      	sub	sp, #32
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
 801e068:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	d10a      	bne.n	801e086 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801e070:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e074:	f383 8811 	msr	BASEPRI, r3
 801e078:	f3bf 8f6f 	isb	sy
 801e07c:	f3bf 8f4f 	dsb	sy
 801e080:	613b      	str	r3, [r7, #16]
}
 801e082:	bf00      	nop
 801e084:	e7fe      	b.n	801e084 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801e086:	683b      	ldr	r3, [r7, #0]
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d10a      	bne.n	801e0a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e090:	f383 8811 	msr	BASEPRI, r3
 801e094:	f3bf 8f6f 	isb	sy
 801e098:	f3bf 8f4f 	dsb	sy
 801e09c:	60fb      	str	r3, [r7, #12]
}
 801e09e:	bf00      	nop
 801e0a0:	e7fe      	b.n	801e0a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801e0a2:	f000 fe7f 	bl	801eda4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801e0a6:	4b1d      	ldr	r3, [pc, #116]	; (801e11c <xTaskCheckForTimeOut+0xbc>)
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	69ba      	ldr	r2, [r7, #24]
 801e0b2:	1ad3      	subs	r3, r2, r3
 801e0b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801e0b6:	683b      	ldr	r3, [r7, #0]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e0be:	d102      	bne.n	801e0c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	61fb      	str	r3, [r7, #28]
 801e0c4:	e023      	b.n	801e10e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	681a      	ldr	r2, [r3, #0]
 801e0ca:	4b15      	ldr	r3, [pc, #84]	; (801e120 <xTaskCheckForTimeOut+0xc0>)
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	429a      	cmp	r2, r3
 801e0d0:	d007      	beq.n	801e0e2 <xTaskCheckForTimeOut+0x82>
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	685b      	ldr	r3, [r3, #4]
 801e0d6:	69ba      	ldr	r2, [r7, #24]
 801e0d8:	429a      	cmp	r2, r3
 801e0da:	d302      	bcc.n	801e0e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801e0dc:	2301      	movs	r3, #1
 801e0de:	61fb      	str	r3, [r7, #28]
 801e0e0:	e015      	b.n	801e10e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801e0e2:	683b      	ldr	r3, [r7, #0]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	697a      	ldr	r2, [r7, #20]
 801e0e8:	429a      	cmp	r2, r3
 801e0ea:	d20b      	bcs.n	801e104 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801e0ec:	683b      	ldr	r3, [r7, #0]
 801e0ee:	681a      	ldr	r2, [r3, #0]
 801e0f0:	697b      	ldr	r3, [r7, #20]
 801e0f2:	1ad2      	subs	r2, r2, r3
 801e0f4:	683b      	ldr	r3, [r7, #0]
 801e0f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801e0f8:	6878      	ldr	r0, [r7, #4]
 801e0fa:	f7ff ff9b 	bl	801e034 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801e0fe:	2300      	movs	r3, #0
 801e100:	61fb      	str	r3, [r7, #28]
 801e102:	e004      	b.n	801e10e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801e104:	683b      	ldr	r3, [r7, #0]
 801e106:	2200      	movs	r2, #0
 801e108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801e10a:	2301      	movs	r3, #1
 801e10c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801e10e:	f000 fe79 	bl	801ee04 <vPortExitCritical>

	return xReturn;
 801e112:	69fb      	ldr	r3, [r7, #28]
}
 801e114:	4618      	mov	r0, r3
 801e116:	3720      	adds	r7, #32
 801e118:	46bd      	mov	sp, r7
 801e11a:	bd80      	pop	{r7, pc}
 801e11c:	20001c94 	.word	0x20001c94
 801e120:	20001ca8 	.word	0x20001ca8

0801e124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801e124:	b480      	push	{r7}
 801e126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801e128:	4b03      	ldr	r3, [pc, #12]	; (801e138 <vTaskMissedYield+0x14>)
 801e12a:	2201      	movs	r2, #1
 801e12c:	601a      	str	r2, [r3, #0]
}
 801e12e:	bf00      	nop
 801e130:	46bd      	mov	sp, r7
 801e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e136:	4770      	bx	lr
 801e138:	20001ca4 	.word	0x20001ca4

0801e13c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801e13c:	b580      	push	{r7, lr}
 801e13e:	b082      	sub	sp, #8
 801e140:	af00      	add	r7, sp, #0
 801e142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801e144:	f000 f852 	bl	801e1ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801e148:	4b06      	ldr	r3, [pc, #24]	; (801e164 <prvIdleTask+0x28>)
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	2b01      	cmp	r3, #1
 801e14e:	d9f9      	bls.n	801e144 <prvIdleTask+0x8>
			{
				taskYIELD();
 801e150:	4b05      	ldr	r3, [pc, #20]	; (801e168 <prvIdleTask+0x2c>)
 801e152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e156:	601a      	str	r2, [r3, #0]
 801e158:	f3bf 8f4f 	dsb	sy
 801e15c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801e160:	e7f0      	b.n	801e144 <prvIdleTask+0x8>
 801e162:	bf00      	nop
 801e164:	200017c0 	.word	0x200017c0
 801e168:	e000ed04 	.word	0xe000ed04

0801e16c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801e16c:	b580      	push	{r7, lr}
 801e16e:	b082      	sub	sp, #8
 801e170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801e172:	2300      	movs	r3, #0
 801e174:	607b      	str	r3, [r7, #4]
 801e176:	e00c      	b.n	801e192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801e178:	687a      	ldr	r2, [r7, #4]
 801e17a:	4613      	mov	r3, r2
 801e17c:	009b      	lsls	r3, r3, #2
 801e17e:	4413      	add	r3, r2
 801e180:	009b      	lsls	r3, r3, #2
 801e182:	4a12      	ldr	r2, [pc, #72]	; (801e1cc <prvInitialiseTaskLists+0x60>)
 801e184:	4413      	add	r3, r2
 801e186:	4618      	mov	r0, r3
 801e188:	f7fe fcf0 	bl	801cb6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	3301      	adds	r3, #1
 801e190:	607b      	str	r3, [r7, #4]
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	2b37      	cmp	r3, #55	; 0x37
 801e196:	d9ef      	bls.n	801e178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801e198:	480d      	ldr	r0, [pc, #52]	; (801e1d0 <prvInitialiseTaskLists+0x64>)
 801e19a:	f7fe fce7 	bl	801cb6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801e19e:	480d      	ldr	r0, [pc, #52]	; (801e1d4 <prvInitialiseTaskLists+0x68>)
 801e1a0:	f7fe fce4 	bl	801cb6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801e1a4:	480c      	ldr	r0, [pc, #48]	; (801e1d8 <prvInitialiseTaskLists+0x6c>)
 801e1a6:	f7fe fce1 	bl	801cb6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801e1aa:	480c      	ldr	r0, [pc, #48]	; (801e1dc <prvInitialiseTaskLists+0x70>)
 801e1ac:	f7fe fcde 	bl	801cb6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801e1b0:	480b      	ldr	r0, [pc, #44]	; (801e1e0 <prvInitialiseTaskLists+0x74>)
 801e1b2:	f7fe fcdb 	bl	801cb6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801e1b6:	4b0b      	ldr	r3, [pc, #44]	; (801e1e4 <prvInitialiseTaskLists+0x78>)
 801e1b8:	4a05      	ldr	r2, [pc, #20]	; (801e1d0 <prvInitialiseTaskLists+0x64>)
 801e1ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e1bc:	4b0a      	ldr	r3, [pc, #40]	; (801e1e8 <prvInitialiseTaskLists+0x7c>)
 801e1be:	4a05      	ldr	r2, [pc, #20]	; (801e1d4 <prvInitialiseTaskLists+0x68>)
 801e1c0:	601a      	str	r2, [r3, #0]
}
 801e1c2:	bf00      	nop
 801e1c4:	3708      	adds	r7, #8
 801e1c6:	46bd      	mov	sp, r7
 801e1c8:	bd80      	pop	{r7, pc}
 801e1ca:	bf00      	nop
 801e1cc:	200017c0 	.word	0x200017c0
 801e1d0:	20001c20 	.word	0x20001c20
 801e1d4:	20001c34 	.word	0x20001c34
 801e1d8:	20001c50 	.word	0x20001c50
 801e1dc:	20001c64 	.word	0x20001c64
 801e1e0:	20001c7c 	.word	0x20001c7c
 801e1e4:	20001c48 	.word	0x20001c48
 801e1e8:	20001c4c 	.word	0x20001c4c

0801e1ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801e1ec:	b580      	push	{r7, lr}
 801e1ee:	b082      	sub	sp, #8
 801e1f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e1f2:	e019      	b.n	801e228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801e1f4:	f000 fdd6 	bl	801eda4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e1f8:	4b10      	ldr	r3, [pc, #64]	; (801e23c <prvCheckTasksWaitingTermination+0x50>)
 801e1fa:	68db      	ldr	r3, [r3, #12]
 801e1fc:	68db      	ldr	r3, [r3, #12]
 801e1fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	3304      	adds	r3, #4
 801e204:	4618      	mov	r0, r3
 801e206:	f7fe fd3b 	bl	801cc80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801e20a:	4b0d      	ldr	r3, [pc, #52]	; (801e240 <prvCheckTasksWaitingTermination+0x54>)
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	3b01      	subs	r3, #1
 801e210:	4a0b      	ldr	r2, [pc, #44]	; (801e240 <prvCheckTasksWaitingTermination+0x54>)
 801e212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801e214:	4b0b      	ldr	r3, [pc, #44]	; (801e244 <prvCheckTasksWaitingTermination+0x58>)
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	3b01      	subs	r3, #1
 801e21a:	4a0a      	ldr	r2, [pc, #40]	; (801e244 <prvCheckTasksWaitingTermination+0x58>)
 801e21c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801e21e:	f000 fdf1 	bl	801ee04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801e222:	6878      	ldr	r0, [r7, #4]
 801e224:	f000 f810 	bl	801e248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e228:	4b06      	ldr	r3, [pc, #24]	; (801e244 <prvCheckTasksWaitingTermination+0x58>)
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	2b00      	cmp	r3, #0
 801e22e:	d1e1      	bne.n	801e1f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801e230:	bf00      	nop
 801e232:	bf00      	nop
 801e234:	3708      	adds	r7, #8
 801e236:	46bd      	mov	sp, r7
 801e238:	bd80      	pop	{r7, pc}
 801e23a:	bf00      	nop
 801e23c:	20001c64 	.word	0x20001c64
 801e240:	20001c90 	.word	0x20001c90
 801e244:	20001c78 	.word	0x20001c78

0801e248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b084      	sub	sp, #16
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801e256:	2b00      	cmp	r3, #0
 801e258:	d108      	bne.n	801e26c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e25e:	4618      	mov	r0, r3
 801e260:	f000 ff8e 	bl	801f180 <vPortFree>
				vPortFree( pxTCB );
 801e264:	6878      	ldr	r0, [r7, #4]
 801e266:	f000 ff8b 	bl	801f180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801e26a:	e018      	b.n	801e29e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801e272:	2b01      	cmp	r3, #1
 801e274:	d103      	bne.n	801e27e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801e276:	6878      	ldr	r0, [r7, #4]
 801e278:	f000 ff82 	bl	801f180 <vPortFree>
	}
 801e27c:	e00f      	b.n	801e29e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801e284:	2b02      	cmp	r3, #2
 801e286:	d00a      	beq.n	801e29e <prvDeleteTCB+0x56>
	__asm volatile
 801e288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e28c:	f383 8811 	msr	BASEPRI, r3
 801e290:	f3bf 8f6f 	isb	sy
 801e294:	f3bf 8f4f 	dsb	sy
 801e298:	60fb      	str	r3, [r7, #12]
}
 801e29a:	bf00      	nop
 801e29c:	e7fe      	b.n	801e29c <prvDeleteTCB+0x54>
	}
 801e29e:	bf00      	nop
 801e2a0:	3710      	adds	r7, #16
 801e2a2:	46bd      	mov	sp, r7
 801e2a4:	bd80      	pop	{r7, pc}
	...

0801e2a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801e2a8:	b480      	push	{r7}
 801e2aa:	b083      	sub	sp, #12
 801e2ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801e2ae:	4b0c      	ldr	r3, [pc, #48]	; (801e2e0 <prvResetNextTaskUnblockTime+0x38>)
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	2b00      	cmp	r3, #0
 801e2b6:	d104      	bne.n	801e2c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801e2b8:	4b0a      	ldr	r3, [pc, #40]	; (801e2e4 <prvResetNextTaskUnblockTime+0x3c>)
 801e2ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e2be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801e2c0:	e008      	b.n	801e2d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e2c2:	4b07      	ldr	r3, [pc, #28]	; (801e2e0 <prvResetNextTaskUnblockTime+0x38>)
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	68db      	ldr	r3, [r3, #12]
 801e2c8:	68db      	ldr	r3, [r3, #12]
 801e2ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	685b      	ldr	r3, [r3, #4]
 801e2d0:	4a04      	ldr	r2, [pc, #16]	; (801e2e4 <prvResetNextTaskUnblockTime+0x3c>)
 801e2d2:	6013      	str	r3, [r2, #0]
}
 801e2d4:	bf00      	nop
 801e2d6:	370c      	adds	r7, #12
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2de:	4770      	bx	lr
 801e2e0:	20001c48 	.word	0x20001c48
 801e2e4:	20001cb0 	.word	0x20001cb0

0801e2e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801e2e8:	b480      	push	{r7}
 801e2ea:	b083      	sub	sp, #12
 801e2ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801e2ee:	4b0b      	ldr	r3, [pc, #44]	; (801e31c <xTaskGetSchedulerState+0x34>)
 801e2f0:	681b      	ldr	r3, [r3, #0]
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d102      	bne.n	801e2fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801e2f6:	2301      	movs	r3, #1
 801e2f8:	607b      	str	r3, [r7, #4]
 801e2fa:	e008      	b.n	801e30e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801e2fc:	4b08      	ldr	r3, [pc, #32]	; (801e320 <xTaskGetSchedulerState+0x38>)
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	2b00      	cmp	r3, #0
 801e302:	d102      	bne.n	801e30a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801e304:	2302      	movs	r3, #2
 801e306:	607b      	str	r3, [r7, #4]
 801e308:	e001      	b.n	801e30e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801e30a:	2300      	movs	r3, #0
 801e30c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801e30e:	687b      	ldr	r3, [r7, #4]
	}
 801e310:	4618      	mov	r0, r3
 801e312:	370c      	adds	r7, #12
 801e314:	46bd      	mov	sp, r7
 801e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e31a:	4770      	bx	lr
 801e31c:	20001c9c 	.word	0x20001c9c
 801e320:	20001cb8 	.word	0x20001cb8

0801e324 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801e324:	b580      	push	{r7, lr}
 801e326:	b086      	sub	sp, #24
 801e328:	af00      	add	r7, sp, #0
 801e32a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801e330:	2300      	movs	r3, #0
 801e332:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	2b00      	cmp	r3, #0
 801e338:	d056      	beq.n	801e3e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801e33a:	4b2e      	ldr	r3, [pc, #184]	; (801e3f4 <xTaskPriorityDisinherit+0xd0>)
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	693a      	ldr	r2, [r7, #16]
 801e340:	429a      	cmp	r2, r3
 801e342:	d00a      	beq.n	801e35a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801e344:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e348:	f383 8811 	msr	BASEPRI, r3
 801e34c:	f3bf 8f6f 	isb	sy
 801e350:	f3bf 8f4f 	dsb	sy
 801e354:	60fb      	str	r3, [r7, #12]
}
 801e356:	bf00      	nop
 801e358:	e7fe      	b.n	801e358 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801e35a:	693b      	ldr	r3, [r7, #16]
 801e35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d10a      	bne.n	801e378 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e366:	f383 8811 	msr	BASEPRI, r3
 801e36a:	f3bf 8f6f 	isb	sy
 801e36e:	f3bf 8f4f 	dsb	sy
 801e372:	60bb      	str	r3, [r7, #8]
}
 801e374:	bf00      	nop
 801e376:	e7fe      	b.n	801e376 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801e378:	693b      	ldr	r3, [r7, #16]
 801e37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e37c:	1e5a      	subs	r2, r3, #1
 801e37e:	693b      	ldr	r3, [r7, #16]
 801e380:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801e382:	693b      	ldr	r3, [r7, #16]
 801e384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e386:	693b      	ldr	r3, [r7, #16]
 801e388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e38a:	429a      	cmp	r2, r3
 801e38c:	d02c      	beq.n	801e3e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801e38e:	693b      	ldr	r3, [r7, #16]
 801e390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e392:	2b00      	cmp	r3, #0
 801e394:	d128      	bne.n	801e3e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e396:	693b      	ldr	r3, [r7, #16]
 801e398:	3304      	adds	r3, #4
 801e39a:	4618      	mov	r0, r3
 801e39c:	f7fe fc70 	bl	801cc80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801e3a0:	693b      	ldr	r3, [r7, #16]
 801e3a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e3a4:	693b      	ldr	r3, [r7, #16]
 801e3a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e3a8:	693b      	ldr	r3, [r7, #16]
 801e3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801e3b0:	693b      	ldr	r3, [r7, #16]
 801e3b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801e3b4:	693b      	ldr	r3, [r7, #16]
 801e3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e3b8:	4b0f      	ldr	r3, [pc, #60]	; (801e3f8 <xTaskPriorityDisinherit+0xd4>)
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	429a      	cmp	r2, r3
 801e3be:	d903      	bls.n	801e3c8 <xTaskPriorityDisinherit+0xa4>
 801e3c0:	693b      	ldr	r3, [r7, #16]
 801e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3c4:	4a0c      	ldr	r2, [pc, #48]	; (801e3f8 <xTaskPriorityDisinherit+0xd4>)
 801e3c6:	6013      	str	r3, [r2, #0]
 801e3c8:	693b      	ldr	r3, [r7, #16]
 801e3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e3cc:	4613      	mov	r3, r2
 801e3ce:	009b      	lsls	r3, r3, #2
 801e3d0:	4413      	add	r3, r2
 801e3d2:	009b      	lsls	r3, r3, #2
 801e3d4:	4a09      	ldr	r2, [pc, #36]	; (801e3fc <xTaskPriorityDisinherit+0xd8>)
 801e3d6:	441a      	add	r2, r3
 801e3d8:	693b      	ldr	r3, [r7, #16]
 801e3da:	3304      	adds	r3, #4
 801e3dc:	4619      	mov	r1, r3
 801e3de:	4610      	mov	r0, r2
 801e3e0:	f7fe fbf1 	bl	801cbc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801e3e4:	2301      	movs	r3, #1
 801e3e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801e3e8:	697b      	ldr	r3, [r7, #20]
	}
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	3718      	adds	r7, #24
 801e3ee:	46bd      	mov	sp, r7
 801e3f0:	bd80      	pop	{r7, pc}
 801e3f2:	bf00      	nop
 801e3f4:	200017bc 	.word	0x200017bc
 801e3f8:	20001c98 	.word	0x20001c98
 801e3fc:	200017c0 	.word	0x200017c0

0801e400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801e400:	b580      	push	{r7, lr}
 801e402:	b084      	sub	sp, #16
 801e404:	af00      	add	r7, sp, #0
 801e406:	6078      	str	r0, [r7, #4]
 801e408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801e40a:	4b21      	ldr	r3, [pc, #132]	; (801e490 <prvAddCurrentTaskToDelayedList+0x90>)
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e410:	4b20      	ldr	r3, [pc, #128]	; (801e494 <prvAddCurrentTaskToDelayedList+0x94>)
 801e412:	681b      	ldr	r3, [r3, #0]
 801e414:	3304      	adds	r3, #4
 801e416:	4618      	mov	r0, r3
 801e418:	f7fe fc32 	bl	801cc80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e422:	d10a      	bne.n	801e43a <prvAddCurrentTaskToDelayedList+0x3a>
 801e424:	683b      	ldr	r3, [r7, #0]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d007      	beq.n	801e43a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e42a:	4b1a      	ldr	r3, [pc, #104]	; (801e494 <prvAddCurrentTaskToDelayedList+0x94>)
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	3304      	adds	r3, #4
 801e430:	4619      	mov	r1, r3
 801e432:	4819      	ldr	r0, [pc, #100]	; (801e498 <prvAddCurrentTaskToDelayedList+0x98>)
 801e434:	f7fe fbc7 	bl	801cbc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801e438:	e026      	b.n	801e488 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801e43a:	68fa      	ldr	r2, [r7, #12]
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	4413      	add	r3, r2
 801e440:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801e442:	4b14      	ldr	r3, [pc, #80]	; (801e494 <prvAddCurrentTaskToDelayedList+0x94>)
 801e444:	681b      	ldr	r3, [r3, #0]
 801e446:	68ba      	ldr	r2, [r7, #8]
 801e448:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801e44a:	68ba      	ldr	r2, [r7, #8]
 801e44c:	68fb      	ldr	r3, [r7, #12]
 801e44e:	429a      	cmp	r2, r3
 801e450:	d209      	bcs.n	801e466 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e452:	4b12      	ldr	r3, [pc, #72]	; (801e49c <prvAddCurrentTaskToDelayedList+0x9c>)
 801e454:	681a      	ldr	r2, [r3, #0]
 801e456:	4b0f      	ldr	r3, [pc, #60]	; (801e494 <prvAddCurrentTaskToDelayedList+0x94>)
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	3304      	adds	r3, #4
 801e45c:	4619      	mov	r1, r3
 801e45e:	4610      	mov	r0, r2
 801e460:	f7fe fbd5 	bl	801cc0e <vListInsert>
}
 801e464:	e010      	b.n	801e488 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e466:	4b0e      	ldr	r3, [pc, #56]	; (801e4a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 801e468:	681a      	ldr	r2, [r3, #0]
 801e46a:	4b0a      	ldr	r3, [pc, #40]	; (801e494 <prvAddCurrentTaskToDelayedList+0x94>)
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	3304      	adds	r3, #4
 801e470:	4619      	mov	r1, r3
 801e472:	4610      	mov	r0, r2
 801e474:	f7fe fbcb 	bl	801cc0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801e478:	4b0a      	ldr	r3, [pc, #40]	; (801e4a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	68ba      	ldr	r2, [r7, #8]
 801e47e:	429a      	cmp	r2, r3
 801e480:	d202      	bcs.n	801e488 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801e482:	4a08      	ldr	r2, [pc, #32]	; (801e4a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801e484:	68bb      	ldr	r3, [r7, #8]
 801e486:	6013      	str	r3, [r2, #0]
}
 801e488:	bf00      	nop
 801e48a:	3710      	adds	r7, #16
 801e48c:	46bd      	mov	sp, r7
 801e48e:	bd80      	pop	{r7, pc}
 801e490:	20001c94 	.word	0x20001c94
 801e494:	200017bc 	.word	0x200017bc
 801e498:	20001c7c 	.word	0x20001c7c
 801e49c:	20001c4c 	.word	0x20001c4c
 801e4a0:	20001c48 	.word	0x20001c48
 801e4a4:	20001cb0 	.word	0x20001cb0

0801e4a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801e4a8:	b580      	push	{r7, lr}
 801e4aa:	b08a      	sub	sp, #40	; 0x28
 801e4ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801e4ae:	2300      	movs	r3, #0
 801e4b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801e4b2:	f000 fb07 	bl	801eac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801e4b6:	4b1c      	ldr	r3, [pc, #112]	; (801e528 <xTimerCreateTimerTask+0x80>)
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d021      	beq.n	801e502 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801e4be:	2300      	movs	r3, #0
 801e4c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801e4c2:	2300      	movs	r3, #0
 801e4c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801e4c6:	1d3a      	adds	r2, r7, #4
 801e4c8:	f107 0108 	add.w	r1, r7, #8
 801e4cc:	f107 030c 	add.w	r3, r7, #12
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f7fe fb31 	bl	801cb38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801e4d6:	6879      	ldr	r1, [r7, #4]
 801e4d8:	68bb      	ldr	r3, [r7, #8]
 801e4da:	68fa      	ldr	r2, [r7, #12]
 801e4dc:	9202      	str	r2, [sp, #8]
 801e4de:	9301      	str	r3, [sp, #4]
 801e4e0:	2302      	movs	r3, #2
 801e4e2:	9300      	str	r3, [sp, #0]
 801e4e4:	2300      	movs	r3, #0
 801e4e6:	460a      	mov	r2, r1
 801e4e8:	4910      	ldr	r1, [pc, #64]	; (801e52c <xTimerCreateTimerTask+0x84>)
 801e4ea:	4811      	ldr	r0, [pc, #68]	; (801e530 <xTimerCreateTimerTask+0x88>)
 801e4ec:	f7ff f8de 	bl	801d6ac <xTaskCreateStatic>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	4a10      	ldr	r2, [pc, #64]	; (801e534 <xTimerCreateTimerTask+0x8c>)
 801e4f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801e4f6:	4b0f      	ldr	r3, [pc, #60]	; (801e534 <xTimerCreateTimerTask+0x8c>)
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d001      	beq.n	801e502 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801e4fe:	2301      	movs	r3, #1
 801e500:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801e502:	697b      	ldr	r3, [r7, #20]
 801e504:	2b00      	cmp	r3, #0
 801e506:	d10a      	bne.n	801e51e <xTimerCreateTimerTask+0x76>
	__asm volatile
 801e508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e50c:	f383 8811 	msr	BASEPRI, r3
 801e510:	f3bf 8f6f 	isb	sy
 801e514:	f3bf 8f4f 	dsb	sy
 801e518:	613b      	str	r3, [r7, #16]
}
 801e51a:	bf00      	nop
 801e51c:	e7fe      	b.n	801e51c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801e51e:	697b      	ldr	r3, [r7, #20]
}
 801e520:	4618      	mov	r0, r3
 801e522:	3718      	adds	r7, #24
 801e524:	46bd      	mov	sp, r7
 801e526:	bd80      	pop	{r7, pc}
 801e528:	20001cec 	.word	0x20001cec
 801e52c:	08025b18 	.word	0x08025b18
 801e530:	0801e66d 	.word	0x0801e66d
 801e534:	20001cf0 	.word	0x20001cf0

0801e538 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801e538:	b580      	push	{r7, lr}
 801e53a:	b08a      	sub	sp, #40	; 0x28
 801e53c:	af00      	add	r7, sp, #0
 801e53e:	60f8      	str	r0, [r7, #12]
 801e540:	60b9      	str	r1, [r7, #8]
 801e542:	607a      	str	r2, [r7, #4]
 801e544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801e546:	2300      	movs	r3, #0
 801e548:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801e54a:	68fb      	ldr	r3, [r7, #12]
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	d10a      	bne.n	801e566 <xTimerGenericCommand+0x2e>
	__asm volatile
 801e550:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e554:	f383 8811 	msr	BASEPRI, r3
 801e558:	f3bf 8f6f 	isb	sy
 801e55c:	f3bf 8f4f 	dsb	sy
 801e560:	623b      	str	r3, [r7, #32]
}
 801e562:	bf00      	nop
 801e564:	e7fe      	b.n	801e564 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801e566:	4b1a      	ldr	r3, [pc, #104]	; (801e5d0 <xTimerGenericCommand+0x98>)
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d02a      	beq.n	801e5c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801e57a:	68bb      	ldr	r3, [r7, #8]
 801e57c:	2b05      	cmp	r3, #5
 801e57e:	dc18      	bgt.n	801e5b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801e580:	f7ff feb2 	bl	801e2e8 <xTaskGetSchedulerState>
 801e584:	4603      	mov	r3, r0
 801e586:	2b02      	cmp	r3, #2
 801e588:	d109      	bne.n	801e59e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801e58a:	4b11      	ldr	r3, [pc, #68]	; (801e5d0 <xTimerGenericCommand+0x98>)
 801e58c:	6818      	ldr	r0, [r3, #0]
 801e58e:	f107 0110 	add.w	r1, r7, #16
 801e592:	2300      	movs	r3, #0
 801e594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e596:	f7fe fca1 	bl	801cedc <xQueueGenericSend>
 801e59a:	6278      	str	r0, [r7, #36]	; 0x24
 801e59c:	e012      	b.n	801e5c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801e59e:	4b0c      	ldr	r3, [pc, #48]	; (801e5d0 <xTimerGenericCommand+0x98>)
 801e5a0:	6818      	ldr	r0, [r3, #0]
 801e5a2:	f107 0110 	add.w	r1, r7, #16
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	2200      	movs	r2, #0
 801e5aa:	f7fe fc97 	bl	801cedc <xQueueGenericSend>
 801e5ae:	6278      	str	r0, [r7, #36]	; 0x24
 801e5b0:	e008      	b.n	801e5c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801e5b2:	4b07      	ldr	r3, [pc, #28]	; (801e5d0 <xTimerGenericCommand+0x98>)
 801e5b4:	6818      	ldr	r0, [r3, #0]
 801e5b6:	f107 0110 	add.w	r1, r7, #16
 801e5ba:	2300      	movs	r3, #0
 801e5bc:	683a      	ldr	r2, [r7, #0]
 801e5be:	f7fe fd8b 	bl	801d0d8 <xQueueGenericSendFromISR>
 801e5c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	3728      	adds	r7, #40	; 0x28
 801e5ca:	46bd      	mov	sp, r7
 801e5cc:	bd80      	pop	{r7, pc}
 801e5ce:	bf00      	nop
 801e5d0:	20001cec 	.word	0x20001cec

0801e5d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801e5d4:	b580      	push	{r7, lr}
 801e5d6:	b088      	sub	sp, #32
 801e5d8:	af02      	add	r7, sp, #8
 801e5da:	6078      	str	r0, [r7, #4]
 801e5dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e5de:	4b22      	ldr	r3, [pc, #136]	; (801e668 <prvProcessExpiredTimer+0x94>)
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	68db      	ldr	r3, [r3, #12]
 801e5e4:	68db      	ldr	r3, [r3, #12]
 801e5e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e5e8:	697b      	ldr	r3, [r7, #20]
 801e5ea:	3304      	adds	r3, #4
 801e5ec:	4618      	mov	r0, r3
 801e5ee:	f7fe fb47 	bl	801cc80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e5f2:	697b      	ldr	r3, [r7, #20]
 801e5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e5f8:	f003 0304 	and.w	r3, r3, #4
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d022      	beq.n	801e646 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801e600:	697b      	ldr	r3, [r7, #20]
 801e602:	699a      	ldr	r2, [r3, #24]
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	18d1      	adds	r1, r2, r3
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	683a      	ldr	r2, [r7, #0]
 801e60c:	6978      	ldr	r0, [r7, #20]
 801e60e:	f000 f8d1 	bl	801e7b4 <prvInsertTimerInActiveList>
 801e612:	4603      	mov	r3, r0
 801e614:	2b00      	cmp	r3, #0
 801e616:	d01f      	beq.n	801e658 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e618:	2300      	movs	r3, #0
 801e61a:	9300      	str	r3, [sp, #0]
 801e61c:	2300      	movs	r3, #0
 801e61e:	687a      	ldr	r2, [r7, #4]
 801e620:	2100      	movs	r1, #0
 801e622:	6978      	ldr	r0, [r7, #20]
 801e624:	f7ff ff88 	bl	801e538 <xTimerGenericCommand>
 801e628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801e62a:	693b      	ldr	r3, [r7, #16]
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d113      	bne.n	801e658 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801e630:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e634:	f383 8811 	msr	BASEPRI, r3
 801e638:	f3bf 8f6f 	isb	sy
 801e63c:	f3bf 8f4f 	dsb	sy
 801e640:	60fb      	str	r3, [r7, #12]
}
 801e642:	bf00      	nop
 801e644:	e7fe      	b.n	801e644 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e646:	697b      	ldr	r3, [r7, #20]
 801e648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e64c:	f023 0301 	bic.w	r3, r3, #1
 801e650:	b2da      	uxtb	r2, r3
 801e652:	697b      	ldr	r3, [r7, #20]
 801e654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e658:	697b      	ldr	r3, [r7, #20]
 801e65a:	6a1b      	ldr	r3, [r3, #32]
 801e65c:	6978      	ldr	r0, [r7, #20]
 801e65e:	4798      	blx	r3
}
 801e660:	bf00      	nop
 801e662:	3718      	adds	r7, #24
 801e664:	46bd      	mov	sp, r7
 801e666:	bd80      	pop	{r7, pc}
 801e668:	20001ce4 	.word	0x20001ce4

0801e66c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801e66c:	b580      	push	{r7, lr}
 801e66e:	b084      	sub	sp, #16
 801e670:	af00      	add	r7, sp, #0
 801e672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e674:	f107 0308 	add.w	r3, r7, #8
 801e678:	4618      	mov	r0, r3
 801e67a:	f000 f857 	bl	801e72c <prvGetNextExpireTime>
 801e67e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801e680:	68bb      	ldr	r3, [r7, #8]
 801e682:	4619      	mov	r1, r3
 801e684:	68f8      	ldr	r0, [r7, #12]
 801e686:	f000 f803 	bl	801e690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801e68a:	f000 f8d5 	bl	801e838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e68e:	e7f1      	b.n	801e674 <prvTimerTask+0x8>

0801e690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801e690:	b580      	push	{r7, lr}
 801e692:	b084      	sub	sp, #16
 801e694:	af00      	add	r7, sp, #0
 801e696:	6078      	str	r0, [r7, #4]
 801e698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801e69a:	f7ff fa43 	bl	801db24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e69e:	f107 0308 	add.w	r3, r7, #8
 801e6a2:	4618      	mov	r0, r3
 801e6a4:	f000 f866 	bl	801e774 <prvSampleTimeNow>
 801e6a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801e6aa:	68bb      	ldr	r3, [r7, #8]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d130      	bne.n	801e712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d10a      	bne.n	801e6cc <prvProcessTimerOrBlockTask+0x3c>
 801e6b6:	687a      	ldr	r2, [r7, #4]
 801e6b8:	68fb      	ldr	r3, [r7, #12]
 801e6ba:	429a      	cmp	r2, r3
 801e6bc:	d806      	bhi.n	801e6cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801e6be:	f7ff fa3f 	bl	801db40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801e6c2:	68f9      	ldr	r1, [r7, #12]
 801e6c4:	6878      	ldr	r0, [r7, #4]
 801e6c6:	f7ff ff85 	bl	801e5d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801e6ca:	e024      	b.n	801e716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801e6cc:	683b      	ldr	r3, [r7, #0]
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d008      	beq.n	801e6e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801e6d2:	4b13      	ldr	r3, [pc, #76]	; (801e720 <prvProcessTimerOrBlockTask+0x90>)
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	d101      	bne.n	801e6e0 <prvProcessTimerOrBlockTask+0x50>
 801e6dc:	2301      	movs	r3, #1
 801e6de:	e000      	b.n	801e6e2 <prvProcessTimerOrBlockTask+0x52>
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801e6e4:	4b0f      	ldr	r3, [pc, #60]	; (801e724 <prvProcessTimerOrBlockTask+0x94>)
 801e6e6:	6818      	ldr	r0, [r3, #0]
 801e6e8:	687a      	ldr	r2, [r7, #4]
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	1ad3      	subs	r3, r2, r3
 801e6ee:	683a      	ldr	r2, [r7, #0]
 801e6f0:	4619      	mov	r1, r3
 801e6f2:	f7fe ffa7 	bl	801d644 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801e6f6:	f7ff fa23 	bl	801db40 <xTaskResumeAll>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d10a      	bne.n	801e716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801e700:	4b09      	ldr	r3, [pc, #36]	; (801e728 <prvProcessTimerOrBlockTask+0x98>)
 801e702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e706:	601a      	str	r2, [r3, #0]
 801e708:	f3bf 8f4f 	dsb	sy
 801e70c:	f3bf 8f6f 	isb	sy
}
 801e710:	e001      	b.n	801e716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801e712:	f7ff fa15 	bl	801db40 <xTaskResumeAll>
}
 801e716:	bf00      	nop
 801e718:	3710      	adds	r7, #16
 801e71a:	46bd      	mov	sp, r7
 801e71c:	bd80      	pop	{r7, pc}
 801e71e:	bf00      	nop
 801e720:	20001ce8 	.word	0x20001ce8
 801e724:	20001cec 	.word	0x20001cec
 801e728:	e000ed04 	.word	0xe000ed04

0801e72c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801e72c:	b480      	push	{r7}
 801e72e:	b085      	sub	sp, #20
 801e730:	af00      	add	r7, sp, #0
 801e732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801e734:	4b0e      	ldr	r3, [pc, #56]	; (801e770 <prvGetNextExpireTime+0x44>)
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d101      	bne.n	801e742 <prvGetNextExpireTime+0x16>
 801e73e:	2201      	movs	r2, #1
 801e740:	e000      	b.n	801e744 <prvGetNextExpireTime+0x18>
 801e742:	2200      	movs	r2, #0
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	681b      	ldr	r3, [r3, #0]
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d105      	bne.n	801e75c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e750:	4b07      	ldr	r3, [pc, #28]	; (801e770 <prvGetNextExpireTime+0x44>)
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	68db      	ldr	r3, [r3, #12]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	60fb      	str	r3, [r7, #12]
 801e75a:	e001      	b.n	801e760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801e75c:	2300      	movs	r3, #0
 801e75e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801e760:	68fb      	ldr	r3, [r7, #12]
}
 801e762:	4618      	mov	r0, r3
 801e764:	3714      	adds	r7, #20
 801e766:	46bd      	mov	sp, r7
 801e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e76c:	4770      	bx	lr
 801e76e:	bf00      	nop
 801e770:	20001ce4 	.word	0x20001ce4

0801e774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801e774:	b580      	push	{r7, lr}
 801e776:	b084      	sub	sp, #16
 801e778:	af00      	add	r7, sp, #0
 801e77a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801e77c:	f7ff fa7e 	bl	801dc7c <xTaskGetTickCount>
 801e780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801e782:	4b0b      	ldr	r3, [pc, #44]	; (801e7b0 <prvSampleTimeNow+0x3c>)
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	68fa      	ldr	r2, [r7, #12]
 801e788:	429a      	cmp	r2, r3
 801e78a:	d205      	bcs.n	801e798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801e78c:	f000 f936 	bl	801e9fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	2201      	movs	r2, #1
 801e794:	601a      	str	r2, [r3, #0]
 801e796:	e002      	b.n	801e79e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	2200      	movs	r2, #0
 801e79c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801e79e:	4a04      	ldr	r2, [pc, #16]	; (801e7b0 <prvSampleTimeNow+0x3c>)
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801e7a4:	68fb      	ldr	r3, [r7, #12]
}
 801e7a6:	4618      	mov	r0, r3
 801e7a8:	3710      	adds	r7, #16
 801e7aa:	46bd      	mov	sp, r7
 801e7ac:	bd80      	pop	{r7, pc}
 801e7ae:	bf00      	nop
 801e7b0:	20001cf4 	.word	0x20001cf4

0801e7b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801e7b4:	b580      	push	{r7, lr}
 801e7b6:	b086      	sub	sp, #24
 801e7b8:	af00      	add	r7, sp, #0
 801e7ba:	60f8      	str	r0, [r7, #12]
 801e7bc:	60b9      	str	r1, [r7, #8]
 801e7be:	607a      	str	r2, [r7, #4]
 801e7c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	68ba      	ldr	r2, [r7, #8]
 801e7ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e7cc:	68fb      	ldr	r3, [r7, #12]
 801e7ce:	68fa      	ldr	r2, [r7, #12]
 801e7d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801e7d2:	68ba      	ldr	r2, [r7, #8]
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	429a      	cmp	r2, r3
 801e7d8:	d812      	bhi.n	801e800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e7da:	687a      	ldr	r2, [r7, #4]
 801e7dc:	683b      	ldr	r3, [r7, #0]
 801e7de:	1ad2      	subs	r2, r2, r3
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	699b      	ldr	r3, [r3, #24]
 801e7e4:	429a      	cmp	r2, r3
 801e7e6:	d302      	bcc.n	801e7ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801e7e8:	2301      	movs	r3, #1
 801e7ea:	617b      	str	r3, [r7, #20]
 801e7ec:	e01b      	b.n	801e826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801e7ee:	4b10      	ldr	r3, [pc, #64]	; (801e830 <prvInsertTimerInActiveList+0x7c>)
 801e7f0:	681a      	ldr	r2, [r3, #0]
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	3304      	adds	r3, #4
 801e7f6:	4619      	mov	r1, r3
 801e7f8:	4610      	mov	r0, r2
 801e7fa:	f7fe fa08 	bl	801cc0e <vListInsert>
 801e7fe:	e012      	b.n	801e826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801e800:	687a      	ldr	r2, [r7, #4]
 801e802:	683b      	ldr	r3, [r7, #0]
 801e804:	429a      	cmp	r2, r3
 801e806:	d206      	bcs.n	801e816 <prvInsertTimerInActiveList+0x62>
 801e808:	68ba      	ldr	r2, [r7, #8]
 801e80a:	683b      	ldr	r3, [r7, #0]
 801e80c:	429a      	cmp	r2, r3
 801e80e:	d302      	bcc.n	801e816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801e810:	2301      	movs	r3, #1
 801e812:	617b      	str	r3, [r7, #20]
 801e814:	e007      	b.n	801e826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e816:	4b07      	ldr	r3, [pc, #28]	; (801e834 <prvInsertTimerInActiveList+0x80>)
 801e818:	681a      	ldr	r2, [r3, #0]
 801e81a:	68fb      	ldr	r3, [r7, #12]
 801e81c:	3304      	adds	r3, #4
 801e81e:	4619      	mov	r1, r3
 801e820:	4610      	mov	r0, r2
 801e822:	f7fe f9f4 	bl	801cc0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801e826:	697b      	ldr	r3, [r7, #20]
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3718      	adds	r7, #24
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}
 801e830:	20001ce8 	.word	0x20001ce8
 801e834:	20001ce4 	.word	0x20001ce4

0801e838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801e838:	b580      	push	{r7, lr}
 801e83a:	b08e      	sub	sp, #56	; 0x38
 801e83c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e83e:	e0ca      	b.n	801e9d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	2b00      	cmp	r3, #0
 801e844:	da18      	bge.n	801e878 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801e846:	1d3b      	adds	r3, r7, #4
 801e848:	3304      	adds	r3, #4
 801e84a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d10a      	bne.n	801e868 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801e852:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e856:	f383 8811 	msr	BASEPRI, r3
 801e85a:	f3bf 8f6f 	isb	sy
 801e85e:	f3bf 8f4f 	dsb	sy
 801e862:	61fb      	str	r3, [r7, #28]
}
 801e864:	bf00      	nop
 801e866:	e7fe      	b.n	801e866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e86e:	6850      	ldr	r0, [r2, #4]
 801e870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e872:	6892      	ldr	r2, [r2, #8]
 801e874:	4611      	mov	r1, r2
 801e876:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	f2c0 80aa 	blt.w	801e9d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801e880:	68fb      	ldr	r3, [r7, #12]
 801e882:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e886:	695b      	ldr	r3, [r3, #20]
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d004      	beq.n	801e896 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e88e:	3304      	adds	r3, #4
 801e890:	4618      	mov	r0, r3
 801e892:	f7fe f9f5 	bl	801cc80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e896:	463b      	mov	r3, r7
 801e898:	4618      	mov	r0, r3
 801e89a:	f7ff ff6b 	bl	801e774 <prvSampleTimeNow>
 801e89e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	2b09      	cmp	r3, #9
 801e8a4:	f200 8097 	bhi.w	801e9d6 <prvProcessReceivedCommands+0x19e>
 801e8a8:	a201      	add	r2, pc, #4	; (adr r2, 801e8b0 <prvProcessReceivedCommands+0x78>)
 801e8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8ae:	bf00      	nop
 801e8b0:	0801e8d9 	.word	0x0801e8d9
 801e8b4:	0801e8d9 	.word	0x0801e8d9
 801e8b8:	0801e8d9 	.word	0x0801e8d9
 801e8bc:	0801e94d 	.word	0x0801e94d
 801e8c0:	0801e961 	.word	0x0801e961
 801e8c4:	0801e9ab 	.word	0x0801e9ab
 801e8c8:	0801e8d9 	.word	0x0801e8d9
 801e8cc:	0801e8d9 	.word	0x0801e8d9
 801e8d0:	0801e94d 	.word	0x0801e94d
 801e8d4:	0801e961 	.word	0x0801e961
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e8de:	f043 0301 	orr.w	r3, r3, #1
 801e8e2:	b2da      	uxtb	r2, r3
 801e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801e8ea:	68ba      	ldr	r2, [r7, #8]
 801e8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8ee:	699b      	ldr	r3, [r3, #24]
 801e8f0:	18d1      	adds	r1, r2, r3
 801e8f2:	68bb      	ldr	r3, [r7, #8]
 801e8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e8f8:	f7ff ff5c 	bl	801e7b4 <prvInsertTimerInActiveList>
 801e8fc:	4603      	mov	r3, r0
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d069      	beq.n	801e9d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e904:	6a1b      	ldr	r3, [r3, #32]
 801e906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e90c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e910:	f003 0304 	and.w	r3, r3, #4
 801e914:	2b00      	cmp	r3, #0
 801e916:	d05e      	beq.n	801e9d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801e918:	68ba      	ldr	r2, [r7, #8]
 801e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e91c:	699b      	ldr	r3, [r3, #24]
 801e91e:	441a      	add	r2, r3
 801e920:	2300      	movs	r3, #0
 801e922:	9300      	str	r3, [sp, #0]
 801e924:	2300      	movs	r3, #0
 801e926:	2100      	movs	r1, #0
 801e928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e92a:	f7ff fe05 	bl	801e538 <xTimerGenericCommand>
 801e92e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801e930:	6a3b      	ldr	r3, [r7, #32]
 801e932:	2b00      	cmp	r3, #0
 801e934:	d14f      	bne.n	801e9d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801e936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e93a:	f383 8811 	msr	BASEPRI, r3
 801e93e:	f3bf 8f6f 	isb	sy
 801e942:	f3bf 8f4f 	dsb	sy
 801e946:	61bb      	str	r3, [r7, #24]
}
 801e948:	bf00      	nop
 801e94a:	e7fe      	b.n	801e94a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e952:	f023 0301 	bic.w	r3, r3, #1
 801e956:	b2da      	uxtb	r2, r3
 801e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801e95e:	e03a      	b.n	801e9d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e966:	f043 0301 	orr.w	r3, r3, #1
 801e96a:	b2da      	uxtb	r2, r3
 801e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e96e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801e972:	68ba      	ldr	r2, [r7, #8]
 801e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e976:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e97a:	699b      	ldr	r3, [r3, #24]
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d10a      	bne.n	801e996 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e984:	f383 8811 	msr	BASEPRI, r3
 801e988:	f3bf 8f6f 	isb	sy
 801e98c:	f3bf 8f4f 	dsb	sy
 801e990:	617b      	str	r3, [r7, #20]
}
 801e992:	bf00      	nop
 801e994:	e7fe      	b.n	801e994 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e998:	699a      	ldr	r2, [r3, #24]
 801e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e99c:	18d1      	adds	r1, r2, r3
 801e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e9a4:	f7ff ff06 	bl	801e7b4 <prvInsertTimerInActiveList>
					break;
 801e9a8:	e015      	b.n	801e9d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e9b0:	f003 0302 	and.w	r3, r3, #2
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d103      	bne.n	801e9c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801e9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e9ba:	f000 fbe1 	bl	801f180 <vPortFree>
 801e9be:	e00a      	b.n	801e9d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e9c6:	f023 0301 	bic.w	r3, r3, #1
 801e9ca:	b2da      	uxtb	r2, r3
 801e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801e9d2:	e000      	b.n	801e9d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801e9d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e9d6:	4b08      	ldr	r3, [pc, #32]	; (801e9f8 <prvProcessReceivedCommands+0x1c0>)
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	1d39      	adds	r1, r7, #4
 801e9dc:	2200      	movs	r2, #0
 801e9de:	4618      	mov	r0, r3
 801e9e0:	f7fe fc16 	bl	801d210 <xQueueReceive>
 801e9e4:	4603      	mov	r3, r0
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	f47f af2a 	bne.w	801e840 <prvProcessReceivedCommands+0x8>
	}
}
 801e9ec:	bf00      	nop
 801e9ee:	bf00      	nop
 801e9f0:	3730      	adds	r7, #48	; 0x30
 801e9f2:	46bd      	mov	sp, r7
 801e9f4:	bd80      	pop	{r7, pc}
 801e9f6:	bf00      	nop
 801e9f8:	20001cec 	.word	0x20001cec

0801e9fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801e9fc:	b580      	push	{r7, lr}
 801e9fe:	b088      	sub	sp, #32
 801ea00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ea02:	e048      	b.n	801ea96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ea04:	4b2d      	ldr	r3, [pc, #180]	; (801eabc <prvSwitchTimerLists+0xc0>)
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	68db      	ldr	r3, [r3, #12]
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ea0e:	4b2b      	ldr	r3, [pc, #172]	; (801eabc <prvSwitchTimerLists+0xc0>)
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	68db      	ldr	r3, [r3, #12]
 801ea14:	68db      	ldr	r3, [r3, #12]
 801ea16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	3304      	adds	r3, #4
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f7fe f92f 	bl	801cc80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ea22:	68fb      	ldr	r3, [r7, #12]
 801ea24:	6a1b      	ldr	r3, [r3, #32]
 801ea26:	68f8      	ldr	r0, [r7, #12]
 801ea28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ea2a:	68fb      	ldr	r3, [r7, #12]
 801ea2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ea30:	f003 0304 	and.w	r3, r3, #4
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d02e      	beq.n	801ea96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ea38:	68fb      	ldr	r3, [r7, #12]
 801ea3a:	699b      	ldr	r3, [r3, #24]
 801ea3c:	693a      	ldr	r2, [r7, #16]
 801ea3e:	4413      	add	r3, r2
 801ea40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ea42:	68ba      	ldr	r2, [r7, #8]
 801ea44:	693b      	ldr	r3, [r7, #16]
 801ea46:	429a      	cmp	r2, r3
 801ea48:	d90e      	bls.n	801ea68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ea4a:	68fb      	ldr	r3, [r7, #12]
 801ea4c:	68ba      	ldr	r2, [r7, #8]
 801ea4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	68fa      	ldr	r2, [r7, #12]
 801ea54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ea56:	4b19      	ldr	r3, [pc, #100]	; (801eabc <prvSwitchTimerLists+0xc0>)
 801ea58:	681a      	ldr	r2, [r3, #0]
 801ea5a:	68fb      	ldr	r3, [r7, #12]
 801ea5c:	3304      	adds	r3, #4
 801ea5e:	4619      	mov	r1, r3
 801ea60:	4610      	mov	r0, r2
 801ea62:	f7fe f8d4 	bl	801cc0e <vListInsert>
 801ea66:	e016      	b.n	801ea96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ea68:	2300      	movs	r3, #0
 801ea6a:	9300      	str	r3, [sp, #0]
 801ea6c:	2300      	movs	r3, #0
 801ea6e:	693a      	ldr	r2, [r7, #16]
 801ea70:	2100      	movs	r1, #0
 801ea72:	68f8      	ldr	r0, [r7, #12]
 801ea74:	f7ff fd60 	bl	801e538 <xTimerGenericCommand>
 801ea78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	d10a      	bne.n	801ea96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ea84:	f383 8811 	msr	BASEPRI, r3
 801ea88:	f3bf 8f6f 	isb	sy
 801ea8c:	f3bf 8f4f 	dsb	sy
 801ea90:	603b      	str	r3, [r7, #0]
}
 801ea92:	bf00      	nop
 801ea94:	e7fe      	b.n	801ea94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ea96:	4b09      	ldr	r3, [pc, #36]	; (801eabc <prvSwitchTimerLists+0xc0>)
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d1b1      	bne.n	801ea04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801eaa0:	4b06      	ldr	r3, [pc, #24]	; (801eabc <prvSwitchTimerLists+0xc0>)
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801eaa6:	4b06      	ldr	r3, [pc, #24]	; (801eac0 <prvSwitchTimerLists+0xc4>)
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	4a04      	ldr	r2, [pc, #16]	; (801eabc <prvSwitchTimerLists+0xc0>)
 801eaac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801eaae:	4a04      	ldr	r2, [pc, #16]	; (801eac0 <prvSwitchTimerLists+0xc4>)
 801eab0:	697b      	ldr	r3, [r7, #20]
 801eab2:	6013      	str	r3, [r2, #0]
}
 801eab4:	bf00      	nop
 801eab6:	3718      	adds	r7, #24
 801eab8:	46bd      	mov	sp, r7
 801eaba:	bd80      	pop	{r7, pc}
 801eabc:	20001ce4 	.word	0x20001ce4
 801eac0:	20001ce8 	.word	0x20001ce8

0801eac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801eac4:	b580      	push	{r7, lr}
 801eac6:	b082      	sub	sp, #8
 801eac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801eaca:	f000 f96b 	bl	801eda4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801eace:	4b15      	ldr	r3, [pc, #84]	; (801eb24 <prvCheckForValidListAndQueue+0x60>)
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	d120      	bne.n	801eb18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801ead6:	4814      	ldr	r0, [pc, #80]	; (801eb28 <prvCheckForValidListAndQueue+0x64>)
 801ead8:	f7fe f848 	bl	801cb6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801eadc:	4813      	ldr	r0, [pc, #76]	; (801eb2c <prvCheckForValidListAndQueue+0x68>)
 801eade:	f7fe f845 	bl	801cb6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801eae2:	4b13      	ldr	r3, [pc, #76]	; (801eb30 <prvCheckForValidListAndQueue+0x6c>)
 801eae4:	4a10      	ldr	r2, [pc, #64]	; (801eb28 <prvCheckForValidListAndQueue+0x64>)
 801eae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801eae8:	4b12      	ldr	r3, [pc, #72]	; (801eb34 <prvCheckForValidListAndQueue+0x70>)
 801eaea:	4a10      	ldr	r2, [pc, #64]	; (801eb2c <prvCheckForValidListAndQueue+0x68>)
 801eaec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801eaee:	2300      	movs	r3, #0
 801eaf0:	9300      	str	r3, [sp, #0]
 801eaf2:	4b11      	ldr	r3, [pc, #68]	; (801eb38 <prvCheckForValidListAndQueue+0x74>)
 801eaf4:	4a11      	ldr	r2, [pc, #68]	; (801eb3c <prvCheckForValidListAndQueue+0x78>)
 801eaf6:	2110      	movs	r1, #16
 801eaf8:	200a      	movs	r0, #10
 801eafa:	f7fe f953 	bl	801cda4 <xQueueGenericCreateStatic>
 801eafe:	4603      	mov	r3, r0
 801eb00:	4a08      	ldr	r2, [pc, #32]	; (801eb24 <prvCheckForValidListAndQueue+0x60>)
 801eb02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801eb04:	4b07      	ldr	r3, [pc, #28]	; (801eb24 <prvCheckForValidListAndQueue+0x60>)
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d005      	beq.n	801eb18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801eb0c:	4b05      	ldr	r3, [pc, #20]	; (801eb24 <prvCheckForValidListAndQueue+0x60>)
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	490b      	ldr	r1, [pc, #44]	; (801eb40 <prvCheckForValidListAndQueue+0x7c>)
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7fe fd6c 	bl	801d5f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801eb18:	f000 f974 	bl	801ee04 <vPortExitCritical>
}
 801eb1c:	bf00      	nop
 801eb1e:	46bd      	mov	sp, r7
 801eb20:	bd80      	pop	{r7, pc}
 801eb22:	bf00      	nop
 801eb24:	20001cec 	.word	0x20001cec
 801eb28:	20001cbc 	.word	0x20001cbc
 801eb2c:	20001cd0 	.word	0x20001cd0
 801eb30:	20001ce4 	.word	0x20001ce4
 801eb34:	20001ce8 	.word	0x20001ce8
 801eb38:	20001d98 	.word	0x20001d98
 801eb3c:	20001cf8 	.word	0x20001cf8
 801eb40:	08025b20 	.word	0x08025b20

0801eb44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801eb44:	b480      	push	{r7}
 801eb46:	b085      	sub	sp, #20
 801eb48:	af00      	add	r7, sp, #0
 801eb4a:	60f8      	str	r0, [r7, #12]
 801eb4c:	60b9      	str	r1, [r7, #8]
 801eb4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801eb50:	68fb      	ldr	r3, [r7, #12]
 801eb52:	3b04      	subs	r3, #4
 801eb54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801eb56:	68fb      	ldr	r3, [r7, #12]
 801eb58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801eb5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	3b04      	subs	r3, #4
 801eb62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801eb64:	68bb      	ldr	r3, [r7, #8]
 801eb66:	f023 0201 	bic.w	r2, r3, #1
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	3b04      	subs	r3, #4
 801eb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801eb74:	4a0c      	ldr	r2, [pc, #48]	; (801eba8 <pxPortInitialiseStack+0x64>)
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801eb7a:	68fb      	ldr	r3, [r7, #12]
 801eb7c:	3b14      	subs	r3, #20
 801eb7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801eb80:	687a      	ldr	r2, [r7, #4]
 801eb82:	68fb      	ldr	r3, [r7, #12]
 801eb84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	3b04      	subs	r3, #4
 801eb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	f06f 0202 	mvn.w	r2, #2
 801eb92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	3b20      	subs	r3, #32
 801eb98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801eb9a:	68fb      	ldr	r3, [r7, #12]
}
 801eb9c:	4618      	mov	r0, r3
 801eb9e:	3714      	adds	r7, #20
 801eba0:	46bd      	mov	sp, r7
 801eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eba6:	4770      	bx	lr
 801eba8:	0801ebad 	.word	0x0801ebad

0801ebac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ebac:	b480      	push	{r7}
 801ebae:	b085      	sub	sp, #20
 801ebb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801ebb6:	4b12      	ldr	r3, [pc, #72]	; (801ec00 <prvTaskExitError+0x54>)
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ebbe:	d00a      	beq.n	801ebd6 <prvTaskExitError+0x2a>
	__asm volatile
 801ebc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebc4:	f383 8811 	msr	BASEPRI, r3
 801ebc8:	f3bf 8f6f 	isb	sy
 801ebcc:	f3bf 8f4f 	dsb	sy
 801ebd0:	60fb      	str	r3, [r7, #12]
}
 801ebd2:	bf00      	nop
 801ebd4:	e7fe      	b.n	801ebd4 <prvTaskExitError+0x28>
	__asm volatile
 801ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ebda:	f383 8811 	msr	BASEPRI, r3
 801ebde:	f3bf 8f6f 	isb	sy
 801ebe2:	f3bf 8f4f 	dsb	sy
 801ebe6:	60bb      	str	r3, [r7, #8]
}
 801ebe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801ebea:	bf00      	nop
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d0fc      	beq.n	801ebec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801ebf2:	bf00      	nop
 801ebf4:	bf00      	nop
 801ebf6:	3714      	adds	r7, #20
 801ebf8:	46bd      	mov	sp, r7
 801ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebfe:	4770      	bx	lr
 801ec00:	200000c0 	.word	0x200000c0
	...

0801ec10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801ec10:	4b07      	ldr	r3, [pc, #28]	; (801ec30 <pxCurrentTCBConst2>)
 801ec12:	6819      	ldr	r1, [r3, #0]
 801ec14:	6808      	ldr	r0, [r1, #0]
 801ec16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec1a:	f380 8809 	msr	PSP, r0
 801ec1e:	f3bf 8f6f 	isb	sy
 801ec22:	f04f 0000 	mov.w	r0, #0
 801ec26:	f380 8811 	msr	BASEPRI, r0
 801ec2a:	4770      	bx	lr
 801ec2c:	f3af 8000 	nop.w

0801ec30 <pxCurrentTCBConst2>:
 801ec30:	200017bc 	.word	0x200017bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801ec34:	bf00      	nop
 801ec36:	bf00      	nop

0801ec38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801ec38:	4808      	ldr	r0, [pc, #32]	; (801ec5c <prvPortStartFirstTask+0x24>)
 801ec3a:	6800      	ldr	r0, [r0, #0]
 801ec3c:	6800      	ldr	r0, [r0, #0]
 801ec3e:	f380 8808 	msr	MSP, r0
 801ec42:	f04f 0000 	mov.w	r0, #0
 801ec46:	f380 8814 	msr	CONTROL, r0
 801ec4a:	b662      	cpsie	i
 801ec4c:	b661      	cpsie	f
 801ec4e:	f3bf 8f4f 	dsb	sy
 801ec52:	f3bf 8f6f 	isb	sy
 801ec56:	df00      	svc	0
 801ec58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ec5a:	bf00      	nop
 801ec5c:	e000ed08 	.word	0xe000ed08

0801ec60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ec60:	b580      	push	{r7, lr}
 801ec62:	b086      	sub	sp, #24
 801ec64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ec66:	4b46      	ldr	r3, [pc, #280]	; (801ed80 <xPortStartScheduler+0x120>)
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	4a46      	ldr	r2, [pc, #280]	; (801ed84 <xPortStartScheduler+0x124>)
 801ec6c:	4293      	cmp	r3, r2
 801ec6e:	d10a      	bne.n	801ec86 <xPortStartScheduler+0x26>
	__asm volatile
 801ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec74:	f383 8811 	msr	BASEPRI, r3
 801ec78:	f3bf 8f6f 	isb	sy
 801ec7c:	f3bf 8f4f 	dsb	sy
 801ec80:	613b      	str	r3, [r7, #16]
}
 801ec82:	bf00      	nop
 801ec84:	e7fe      	b.n	801ec84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801ec86:	4b3e      	ldr	r3, [pc, #248]	; (801ed80 <xPortStartScheduler+0x120>)
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	4a3f      	ldr	r2, [pc, #252]	; (801ed88 <xPortStartScheduler+0x128>)
 801ec8c:	4293      	cmp	r3, r2
 801ec8e:	d10a      	bne.n	801eca6 <xPortStartScheduler+0x46>
	__asm volatile
 801ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec94:	f383 8811 	msr	BASEPRI, r3
 801ec98:	f3bf 8f6f 	isb	sy
 801ec9c:	f3bf 8f4f 	dsb	sy
 801eca0:	60fb      	str	r3, [r7, #12]
}
 801eca2:	bf00      	nop
 801eca4:	e7fe      	b.n	801eca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801eca6:	4b39      	ldr	r3, [pc, #228]	; (801ed8c <xPortStartScheduler+0x12c>)
 801eca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801ecaa:	697b      	ldr	r3, [r7, #20]
 801ecac:	781b      	ldrb	r3, [r3, #0]
 801ecae:	b2db      	uxtb	r3, r3
 801ecb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801ecb2:	697b      	ldr	r3, [r7, #20]
 801ecb4:	22ff      	movs	r2, #255	; 0xff
 801ecb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801ecb8:	697b      	ldr	r3, [r7, #20]
 801ecba:	781b      	ldrb	r3, [r3, #0]
 801ecbc:	b2db      	uxtb	r3, r3
 801ecbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ecc0:	78fb      	ldrb	r3, [r7, #3]
 801ecc2:	b2db      	uxtb	r3, r3
 801ecc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ecc8:	b2da      	uxtb	r2, r3
 801ecca:	4b31      	ldr	r3, [pc, #196]	; (801ed90 <xPortStartScheduler+0x130>)
 801eccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ecce:	4b31      	ldr	r3, [pc, #196]	; (801ed94 <xPortStartScheduler+0x134>)
 801ecd0:	2207      	movs	r2, #7
 801ecd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ecd4:	e009      	b.n	801ecea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801ecd6:	4b2f      	ldr	r3, [pc, #188]	; (801ed94 <xPortStartScheduler+0x134>)
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	3b01      	subs	r3, #1
 801ecdc:	4a2d      	ldr	r2, [pc, #180]	; (801ed94 <xPortStartScheduler+0x134>)
 801ecde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ece0:	78fb      	ldrb	r3, [r7, #3]
 801ece2:	b2db      	uxtb	r3, r3
 801ece4:	005b      	lsls	r3, r3, #1
 801ece6:	b2db      	uxtb	r3, r3
 801ece8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ecea:	78fb      	ldrb	r3, [r7, #3]
 801ecec:	b2db      	uxtb	r3, r3
 801ecee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ecf2:	2b80      	cmp	r3, #128	; 0x80
 801ecf4:	d0ef      	beq.n	801ecd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ecf6:	4b27      	ldr	r3, [pc, #156]	; (801ed94 <xPortStartScheduler+0x134>)
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	f1c3 0307 	rsb	r3, r3, #7
 801ecfe:	2b04      	cmp	r3, #4
 801ed00:	d00a      	beq.n	801ed18 <xPortStartScheduler+0xb8>
	__asm volatile
 801ed02:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ed06:	f383 8811 	msr	BASEPRI, r3
 801ed0a:	f3bf 8f6f 	isb	sy
 801ed0e:	f3bf 8f4f 	dsb	sy
 801ed12:	60bb      	str	r3, [r7, #8]
}
 801ed14:	bf00      	nop
 801ed16:	e7fe      	b.n	801ed16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801ed18:	4b1e      	ldr	r3, [pc, #120]	; (801ed94 <xPortStartScheduler+0x134>)
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	021b      	lsls	r3, r3, #8
 801ed1e:	4a1d      	ldr	r2, [pc, #116]	; (801ed94 <xPortStartScheduler+0x134>)
 801ed20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801ed22:	4b1c      	ldr	r3, [pc, #112]	; (801ed94 <xPortStartScheduler+0x134>)
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801ed2a:	4a1a      	ldr	r2, [pc, #104]	; (801ed94 <xPortStartScheduler+0x134>)
 801ed2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	b2da      	uxtb	r2, r3
 801ed32:	697b      	ldr	r3, [r7, #20]
 801ed34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ed36:	4b18      	ldr	r3, [pc, #96]	; (801ed98 <xPortStartScheduler+0x138>)
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	4a17      	ldr	r2, [pc, #92]	; (801ed98 <xPortStartScheduler+0x138>)
 801ed3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801ed40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801ed42:	4b15      	ldr	r3, [pc, #84]	; (801ed98 <xPortStartScheduler+0x138>)
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	4a14      	ldr	r2, [pc, #80]	; (801ed98 <xPortStartScheduler+0x138>)
 801ed48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801ed4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801ed4e:	f000 f8dd 	bl	801ef0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801ed52:	4b12      	ldr	r3, [pc, #72]	; (801ed9c <xPortStartScheduler+0x13c>)
 801ed54:	2200      	movs	r2, #0
 801ed56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801ed58:	f000 f8fc 	bl	801ef54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801ed5c:	4b10      	ldr	r3, [pc, #64]	; (801eda0 <xPortStartScheduler+0x140>)
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	4a0f      	ldr	r2, [pc, #60]	; (801eda0 <xPortStartScheduler+0x140>)
 801ed62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801ed66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801ed68:	f7ff ff66 	bl	801ec38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801ed6c:	f7ff f850 	bl	801de10 <vTaskSwitchContext>
	prvTaskExitError();
 801ed70:	f7ff ff1c 	bl	801ebac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801ed74:	2300      	movs	r3, #0
}
 801ed76:	4618      	mov	r0, r3
 801ed78:	3718      	adds	r7, #24
 801ed7a:	46bd      	mov	sp, r7
 801ed7c:	bd80      	pop	{r7, pc}
 801ed7e:	bf00      	nop
 801ed80:	e000ed00 	.word	0xe000ed00
 801ed84:	410fc271 	.word	0x410fc271
 801ed88:	410fc270 	.word	0x410fc270
 801ed8c:	e000e400 	.word	0xe000e400
 801ed90:	20001de8 	.word	0x20001de8
 801ed94:	20001dec 	.word	0x20001dec
 801ed98:	e000ed20 	.word	0xe000ed20
 801ed9c:	200000c0 	.word	0x200000c0
 801eda0:	e000ef34 	.word	0xe000ef34

0801eda4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801eda4:	b480      	push	{r7}
 801eda6:	b083      	sub	sp, #12
 801eda8:	af00      	add	r7, sp, #0
	__asm volatile
 801edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801edae:	f383 8811 	msr	BASEPRI, r3
 801edb2:	f3bf 8f6f 	isb	sy
 801edb6:	f3bf 8f4f 	dsb	sy
 801edba:	607b      	str	r3, [r7, #4]
}
 801edbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801edbe:	4b0f      	ldr	r3, [pc, #60]	; (801edfc <vPortEnterCritical+0x58>)
 801edc0:	681b      	ldr	r3, [r3, #0]
 801edc2:	3301      	adds	r3, #1
 801edc4:	4a0d      	ldr	r2, [pc, #52]	; (801edfc <vPortEnterCritical+0x58>)
 801edc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801edc8:	4b0c      	ldr	r3, [pc, #48]	; (801edfc <vPortEnterCritical+0x58>)
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	2b01      	cmp	r3, #1
 801edce:	d10f      	bne.n	801edf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801edd0:	4b0b      	ldr	r3, [pc, #44]	; (801ee00 <vPortEnterCritical+0x5c>)
 801edd2:	681b      	ldr	r3, [r3, #0]
 801edd4:	b2db      	uxtb	r3, r3
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d00a      	beq.n	801edf0 <vPortEnterCritical+0x4c>
	__asm volatile
 801edda:	f04f 0350 	mov.w	r3, #80	; 0x50
 801edde:	f383 8811 	msr	BASEPRI, r3
 801ede2:	f3bf 8f6f 	isb	sy
 801ede6:	f3bf 8f4f 	dsb	sy
 801edea:	603b      	str	r3, [r7, #0]
}
 801edec:	bf00      	nop
 801edee:	e7fe      	b.n	801edee <vPortEnterCritical+0x4a>
	}
}
 801edf0:	bf00      	nop
 801edf2:	370c      	adds	r7, #12
 801edf4:	46bd      	mov	sp, r7
 801edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edfa:	4770      	bx	lr
 801edfc:	200000c0 	.word	0x200000c0
 801ee00:	e000ed04 	.word	0xe000ed04

0801ee04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801ee04:	b480      	push	{r7}
 801ee06:	b083      	sub	sp, #12
 801ee08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801ee0a:	4b12      	ldr	r3, [pc, #72]	; (801ee54 <vPortExitCritical+0x50>)
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d10a      	bne.n	801ee28 <vPortExitCritical+0x24>
	__asm volatile
 801ee12:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ee16:	f383 8811 	msr	BASEPRI, r3
 801ee1a:	f3bf 8f6f 	isb	sy
 801ee1e:	f3bf 8f4f 	dsb	sy
 801ee22:	607b      	str	r3, [r7, #4]
}
 801ee24:	bf00      	nop
 801ee26:	e7fe      	b.n	801ee26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801ee28:	4b0a      	ldr	r3, [pc, #40]	; (801ee54 <vPortExitCritical+0x50>)
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	3b01      	subs	r3, #1
 801ee2e:	4a09      	ldr	r2, [pc, #36]	; (801ee54 <vPortExitCritical+0x50>)
 801ee30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801ee32:	4b08      	ldr	r3, [pc, #32]	; (801ee54 <vPortExitCritical+0x50>)
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d105      	bne.n	801ee46 <vPortExitCritical+0x42>
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801ee3e:	683b      	ldr	r3, [r7, #0]
 801ee40:	f383 8811 	msr	BASEPRI, r3
}
 801ee44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801ee46:	bf00      	nop
 801ee48:	370c      	adds	r7, #12
 801ee4a:	46bd      	mov	sp, r7
 801ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee50:	4770      	bx	lr
 801ee52:	bf00      	nop
 801ee54:	200000c0 	.word	0x200000c0
	...

0801ee60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801ee60:	f3ef 8009 	mrs	r0, PSP
 801ee64:	f3bf 8f6f 	isb	sy
 801ee68:	4b15      	ldr	r3, [pc, #84]	; (801eec0 <pxCurrentTCBConst>)
 801ee6a:	681a      	ldr	r2, [r3, #0]
 801ee6c:	f01e 0f10 	tst.w	lr, #16
 801ee70:	bf08      	it	eq
 801ee72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801ee76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee7a:	6010      	str	r0, [r2, #0]
 801ee7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801ee80:	f04f 0050 	mov.w	r0, #80	; 0x50
 801ee84:	f380 8811 	msr	BASEPRI, r0
 801ee88:	f3bf 8f4f 	dsb	sy
 801ee8c:	f3bf 8f6f 	isb	sy
 801ee90:	f7fe ffbe 	bl	801de10 <vTaskSwitchContext>
 801ee94:	f04f 0000 	mov.w	r0, #0
 801ee98:	f380 8811 	msr	BASEPRI, r0
 801ee9c:	bc09      	pop	{r0, r3}
 801ee9e:	6819      	ldr	r1, [r3, #0]
 801eea0:	6808      	ldr	r0, [r1, #0]
 801eea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eea6:	f01e 0f10 	tst.w	lr, #16
 801eeaa:	bf08      	it	eq
 801eeac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801eeb0:	f380 8809 	msr	PSP, r0
 801eeb4:	f3bf 8f6f 	isb	sy
 801eeb8:	4770      	bx	lr
 801eeba:	bf00      	nop
 801eebc:	f3af 8000 	nop.w

0801eec0 <pxCurrentTCBConst>:
 801eec0:	200017bc 	.word	0x200017bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801eec4:	bf00      	nop
 801eec6:	bf00      	nop

0801eec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801eec8:	b580      	push	{r7, lr}
 801eeca:	b082      	sub	sp, #8
 801eecc:	af00      	add	r7, sp, #0
	__asm volatile
 801eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eed2:	f383 8811 	msr	BASEPRI, r3
 801eed6:	f3bf 8f6f 	isb	sy
 801eeda:	f3bf 8f4f 	dsb	sy
 801eede:	607b      	str	r3, [r7, #4]
}
 801eee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801eee2:	f7fe fedb 	bl	801dc9c <xTaskIncrementTick>
 801eee6:	4603      	mov	r3, r0
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	d003      	beq.n	801eef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801eeec:	4b06      	ldr	r3, [pc, #24]	; (801ef08 <xPortSysTickHandler+0x40>)
 801eeee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801eef2:	601a      	str	r2, [r3, #0]
 801eef4:	2300      	movs	r3, #0
 801eef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801eef8:	683b      	ldr	r3, [r7, #0]
 801eefa:	f383 8811 	msr	BASEPRI, r3
}
 801eefe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801ef00:	bf00      	nop
 801ef02:	3708      	adds	r7, #8
 801ef04:	46bd      	mov	sp, r7
 801ef06:	bd80      	pop	{r7, pc}
 801ef08:	e000ed04 	.word	0xe000ed04

0801ef0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801ef0c:	b480      	push	{r7}
 801ef0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ef10:	4b0b      	ldr	r3, [pc, #44]	; (801ef40 <vPortSetupTimerInterrupt+0x34>)
 801ef12:	2200      	movs	r2, #0
 801ef14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ef16:	4b0b      	ldr	r3, [pc, #44]	; (801ef44 <vPortSetupTimerInterrupt+0x38>)
 801ef18:	2200      	movs	r2, #0
 801ef1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ef1c:	4b0a      	ldr	r3, [pc, #40]	; (801ef48 <vPortSetupTimerInterrupt+0x3c>)
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	4a0a      	ldr	r2, [pc, #40]	; (801ef4c <vPortSetupTimerInterrupt+0x40>)
 801ef22:	fba2 2303 	umull	r2, r3, r2, r3
 801ef26:	099b      	lsrs	r3, r3, #6
 801ef28:	4a09      	ldr	r2, [pc, #36]	; (801ef50 <vPortSetupTimerInterrupt+0x44>)
 801ef2a:	3b01      	subs	r3, #1
 801ef2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801ef2e:	4b04      	ldr	r3, [pc, #16]	; (801ef40 <vPortSetupTimerInterrupt+0x34>)
 801ef30:	2207      	movs	r2, #7
 801ef32:	601a      	str	r2, [r3, #0]
}
 801ef34:	bf00      	nop
 801ef36:	46bd      	mov	sp, r7
 801ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef3c:	4770      	bx	lr
 801ef3e:	bf00      	nop
 801ef40:	e000e010 	.word	0xe000e010
 801ef44:	e000e018 	.word	0xe000e018
 801ef48:	20000054 	.word	0x20000054
 801ef4c:	10624dd3 	.word	0x10624dd3
 801ef50:	e000e014 	.word	0xe000e014

0801ef54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ef54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ef64 <vPortEnableVFP+0x10>
 801ef58:	6801      	ldr	r1, [r0, #0]
 801ef5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801ef5e:	6001      	str	r1, [r0, #0]
 801ef60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ef62:	bf00      	nop
 801ef64:	e000ed88 	.word	0xe000ed88

0801ef68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ef68:	b480      	push	{r7}
 801ef6a:	b085      	sub	sp, #20
 801ef6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ef6e:	f3ef 8305 	mrs	r3, IPSR
 801ef72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	2b0f      	cmp	r3, #15
 801ef78:	d914      	bls.n	801efa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ef7a:	4a17      	ldr	r2, [pc, #92]	; (801efd8 <vPortValidateInterruptPriority+0x70>)
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	4413      	add	r3, r2
 801ef80:	781b      	ldrb	r3, [r3, #0]
 801ef82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ef84:	4b15      	ldr	r3, [pc, #84]	; (801efdc <vPortValidateInterruptPriority+0x74>)
 801ef86:	781b      	ldrb	r3, [r3, #0]
 801ef88:	7afa      	ldrb	r2, [r7, #11]
 801ef8a:	429a      	cmp	r2, r3
 801ef8c:	d20a      	bcs.n	801efa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801ef8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef92:	f383 8811 	msr	BASEPRI, r3
 801ef96:	f3bf 8f6f 	isb	sy
 801ef9a:	f3bf 8f4f 	dsb	sy
 801ef9e:	607b      	str	r3, [r7, #4]
}
 801efa0:	bf00      	nop
 801efa2:	e7fe      	b.n	801efa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801efa4:	4b0e      	ldr	r3, [pc, #56]	; (801efe0 <vPortValidateInterruptPriority+0x78>)
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801efac:	4b0d      	ldr	r3, [pc, #52]	; (801efe4 <vPortValidateInterruptPriority+0x7c>)
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	429a      	cmp	r2, r3
 801efb2:	d90a      	bls.n	801efca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801efb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801efb8:	f383 8811 	msr	BASEPRI, r3
 801efbc:	f3bf 8f6f 	isb	sy
 801efc0:	f3bf 8f4f 	dsb	sy
 801efc4:	603b      	str	r3, [r7, #0]
}
 801efc6:	bf00      	nop
 801efc8:	e7fe      	b.n	801efc8 <vPortValidateInterruptPriority+0x60>
	}
 801efca:	bf00      	nop
 801efcc:	3714      	adds	r7, #20
 801efce:	46bd      	mov	sp, r7
 801efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd4:	4770      	bx	lr
 801efd6:	bf00      	nop
 801efd8:	e000e3f0 	.word	0xe000e3f0
 801efdc:	20001de8 	.word	0x20001de8
 801efe0:	e000ed0c 	.word	0xe000ed0c
 801efe4:	20001dec 	.word	0x20001dec

0801efe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801efe8:	b580      	push	{r7, lr}
 801efea:	b08a      	sub	sp, #40	; 0x28
 801efec:	af00      	add	r7, sp, #0
 801efee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801eff0:	2300      	movs	r3, #0
 801eff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801eff4:	f7fe fd96 	bl	801db24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801eff8:	4b5b      	ldr	r3, [pc, #364]	; (801f168 <pvPortMalloc+0x180>)
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d101      	bne.n	801f004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801f000:	f000 f920 	bl	801f244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801f004:	4b59      	ldr	r3, [pc, #356]	; (801f16c <pvPortMalloc+0x184>)
 801f006:	681a      	ldr	r2, [r3, #0]
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	4013      	ands	r3, r2
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	f040 8093 	bne.w	801f138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d01d      	beq.n	801f054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801f018:	2208      	movs	r2, #8
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	4413      	add	r3, r2
 801f01e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	f003 0307 	and.w	r3, r3, #7
 801f026:	2b00      	cmp	r3, #0
 801f028:	d014      	beq.n	801f054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	f023 0307 	bic.w	r3, r3, #7
 801f030:	3308      	adds	r3, #8
 801f032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	f003 0307 	and.w	r3, r3, #7
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d00a      	beq.n	801f054 <pvPortMalloc+0x6c>
	__asm volatile
 801f03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f042:	f383 8811 	msr	BASEPRI, r3
 801f046:	f3bf 8f6f 	isb	sy
 801f04a:	f3bf 8f4f 	dsb	sy
 801f04e:	617b      	str	r3, [r7, #20]
}
 801f050:	bf00      	nop
 801f052:	e7fe      	b.n	801f052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d06e      	beq.n	801f138 <pvPortMalloc+0x150>
 801f05a:	4b45      	ldr	r3, [pc, #276]	; (801f170 <pvPortMalloc+0x188>)
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	687a      	ldr	r2, [r7, #4]
 801f060:	429a      	cmp	r2, r3
 801f062:	d869      	bhi.n	801f138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801f064:	4b43      	ldr	r3, [pc, #268]	; (801f174 <pvPortMalloc+0x18c>)
 801f066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801f068:	4b42      	ldr	r3, [pc, #264]	; (801f174 <pvPortMalloc+0x18c>)
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f06e:	e004      	b.n	801f07a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f07c:	685b      	ldr	r3, [r3, #4]
 801f07e:	687a      	ldr	r2, [r7, #4]
 801f080:	429a      	cmp	r2, r3
 801f082:	d903      	bls.n	801f08c <pvPortMalloc+0xa4>
 801f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f086:	681b      	ldr	r3, [r3, #0]
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d1f1      	bne.n	801f070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801f08c:	4b36      	ldr	r3, [pc, #216]	; (801f168 <pvPortMalloc+0x180>)
 801f08e:	681b      	ldr	r3, [r3, #0]
 801f090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f092:	429a      	cmp	r2, r3
 801f094:	d050      	beq.n	801f138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801f096:	6a3b      	ldr	r3, [r7, #32]
 801f098:	681b      	ldr	r3, [r3, #0]
 801f09a:	2208      	movs	r2, #8
 801f09c:	4413      	add	r3, r2
 801f09e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0a2:	681a      	ldr	r2, [r3, #0]
 801f0a4:	6a3b      	ldr	r3, [r7, #32]
 801f0a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0aa:	685a      	ldr	r2, [r3, #4]
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	1ad2      	subs	r2, r2, r3
 801f0b0:	2308      	movs	r3, #8
 801f0b2:	005b      	lsls	r3, r3, #1
 801f0b4:	429a      	cmp	r2, r3
 801f0b6:	d91f      	bls.n	801f0f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801f0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	4413      	add	r3, r2
 801f0be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801f0c0:	69bb      	ldr	r3, [r7, #24]
 801f0c2:	f003 0307 	and.w	r3, r3, #7
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d00a      	beq.n	801f0e0 <pvPortMalloc+0xf8>
	__asm volatile
 801f0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f0ce:	f383 8811 	msr	BASEPRI, r3
 801f0d2:	f3bf 8f6f 	isb	sy
 801f0d6:	f3bf 8f4f 	dsb	sy
 801f0da:	613b      	str	r3, [r7, #16]
}
 801f0dc:	bf00      	nop
 801f0de:	e7fe      	b.n	801f0de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0e2:	685a      	ldr	r2, [r3, #4]
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	1ad2      	subs	r2, r2, r3
 801f0e8:	69bb      	ldr	r3, [r7, #24]
 801f0ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ee:	687a      	ldr	r2, [r7, #4]
 801f0f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801f0f2:	69b8      	ldr	r0, [r7, #24]
 801f0f4:	f000 f908 	bl	801f308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801f0f8:	4b1d      	ldr	r3, [pc, #116]	; (801f170 <pvPortMalloc+0x188>)
 801f0fa:	681a      	ldr	r2, [r3, #0]
 801f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0fe:	685b      	ldr	r3, [r3, #4]
 801f100:	1ad3      	subs	r3, r2, r3
 801f102:	4a1b      	ldr	r2, [pc, #108]	; (801f170 <pvPortMalloc+0x188>)
 801f104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801f106:	4b1a      	ldr	r3, [pc, #104]	; (801f170 <pvPortMalloc+0x188>)
 801f108:	681a      	ldr	r2, [r3, #0]
 801f10a:	4b1b      	ldr	r3, [pc, #108]	; (801f178 <pvPortMalloc+0x190>)
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	429a      	cmp	r2, r3
 801f110:	d203      	bcs.n	801f11a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801f112:	4b17      	ldr	r3, [pc, #92]	; (801f170 <pvPortMalloc+0x188>)
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	4a18      	ldr	r2, [pc, #96]	; (801f178 <pvPortMalloc+0x190>)
 801f118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801f11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f11c:	685a      	ldr	r2, [r3, #4]
 801f11e:	4b13      	ldr	r3, [pc, #76]	; (801f16c <pvPortMalloc+0x184>)
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	431a      	orrs	r2, r3
 801f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801f128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f12a:	2200      	movs	r2, #0
 801f12c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801f12e:	4b13      	ldr	r3, [pc, #76]	; (801f17c <pvPortMalloc+0x194>)
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	3301      	adds	r3, #1
 801f134:	4a11      	ldr	r2, [pc, #68]	; (801f17c <pvPortMalloc+0x194>)
 801f136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801f138:	f7fe fd02 	bl	801db40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801f13c:	69fb      	ldr	r3, [r7, #28]
 801f13e:	f003 0307 	and.w	r3, r3, #7
 801f142:	2b00      	cmp	r3, #0
 801f144:	d00a      	beq.n	801f15c <pvPortMalloc+0x174>
	__asm volatile
 801f146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f14a:	f383 8811 	msr	BASEPRI, r3
 801f14e:	f3bf 8f6f 	isb	sy
 801f152:	f3bf 8f4f 	dsb	sy
 801f156:	60fb      	str	r3, [r7, #12]
}
 801f158:	bf00      	nop
 801f15a:	e7fe      	b.n	801f15a <pvPortMalloc+0x172>
	return pvReturn;
 801f15c:	69fb      	ldr	r3, [r7, #28]
}
 801f15e:	4618      	mov	r0, r3
 801f160:	3728      	adds	r7, #40	; 0x28
 801f162:	46bd      	mov	sp, r7
 801f164:	bd80      	pop	{r7, pc}
 801f166:	bf00      	nop
 801f168:	200059f8 	.word	0x200059f8
 801f16c:	20005a0c 	.word	0x20005a0c
 801f170:	200059fc 	.word	0x200059fc
 801f174:	200059f0 	.word	0x200059f0
 801f178:	20005a00 	.word	0x20005a00
 801f17c:	20005a04 	.word	0x20005a04

0801f180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801f180:	b580      	push	{r7, lr}
 801f182:	b086      	sub	sp, #24
 801f184:	af00      	add	r7, sp, #0
 801f186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d04d      	beq.n	801f22e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801f192:	2308      	movs	r3, #8
 801f194:	425b      	negs	r3, r3
 801f196:	697a      	ldr	r2, [r7, #20]
 801f198:	4413      	add	r3, r2
 801f19a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801f19c:	697b      	ldr	r3, [r7, #20]
 801f19e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801f1a0:	693b      	ldr	r3, [r7, #16]
 801f1a2:	685a      	ldr	r2, [r3, #4]
 801f1a4:	4b24      	ldr	r3, [pc, #144]	; (801f238 <vPortFree+0xb8>)
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	4013      	ands	r3, r2
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d10a      	bne.n	801f1c4 <vPortFree+0x44>
	__asm volatile
 801f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1b2:	f383 8811 	msr	BASEPRI, r3
 801f1b6:	f3bf 8f6f 	isb	sy
 801f1ba:	f3bf 8f4f 	dsb	sy
 801f1be:	60fb      	str	r3, [r7, #12]
}
 801f1c0:	bf00      	nop
 801f1c2:	e7fe      	b.n	801f1c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801f1c4:	693b      	ldr	r3, [r7, #16]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d00a      	beq.n	801f1e2 <vPortFree+0x62>
	__asm volatile
 801f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1d0:	f383 8811 	msr	BASEPRI, r3
 801f1d4:	f3bf 8f6f 	isb	sy
 801f1d8:	f3bf 8f4f 	dsb	sy
 801f1dc:	60bb      	str	r3, [r7, #8]
}
 801f1de:	bf00      	nop
 801f1e0:	e7fe      	b.n	801f1e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801f1e2:	693b      	ldr	r3, [r7, #16]
 801f1e4:	685a      	ldr	r2, [r3, #4]
 801f1e6:	4b14      	ldr	r3, [pc, #80]	; (801f238 <vPortFree+0xb8>)
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	4013      	ands	r3, r2
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d01e      	beq.n	801f22e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801f1f0:	693b      	ldr	r3, [r7, #16]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d11a      	bne.n	801f22e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801f1f8:	693b      	ldr	r3, [r7, #16]
 801f1fa:	685a      	ldr	r2, [r3, #4]
 801f1fc:	4b0e      	ldr	r3, [pc, #56]	; (801f238 <vPortFree+0xb8>)
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	43db      	mvns	r3, r3
 801f202:	401a      	ands	r2, r3
 801f204:	693b      	ldr	r3, [r7, #16]
 801f206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801f208:	f7fe fc8c 	bl	801db24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801f20c:	693b      	ldr	r3, [r7, #16]
 801f20e:	685a      	ldr	r2, [r3, #4]
 801f210:	4b0a      	ldr	r3, [pc, #40]	; (801f23c <vPortFree+0xbc>)
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	4413      	add	r3, r2
 801f216:	4a09      	ldr	r2, [pc, #36]	; (801f23c <vPortFree+0xbc>)
 801f218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801f21a:	6938      	ldr	r0, [r7, #16]
 801f21c:	f000 f874 	bl	801f308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801f220:	4b07      	ldr	r3, [pc, #28]	; (801f240 <vPortFree+0xc0>)
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	3301      	adds	r3, #1
 801f226:	4a06      	ldr	r2, [pc, #24]	; (801f240 <vPortFree+0xc0>)
 801f228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801f22a:	f7fe fc89 	bl	801db40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801f22e:	bf00      	nop
 801f230:	3718      	adds	r7, #24
 801f232:	46bd      	mov	sp, r7
 801f234:	bd80      	pop	{r7, pc}
 801f236:	bf00      	nop
 801f238:	20005a0c 	.word	0x20005a0c
 801f23c:	200059fc 	.word	0x200059fc
 801f240:	20005a08 	.word	0x20005a08

0801f244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801f244:	b480      	push	{r7}
 801f246:	b085      	sub	sp, #20
 801f248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801f24a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801f24e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801f250:	4b27      	ldr	r3, [pc, #156]	; (801f2f0 <prvHeapInit+0xac>)
 801f252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f254:	68fb      	ldr	r3, [r7, #12]
 801f256:	f003 0307 	and.w	r3, r3, #7
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d00c      	beq.n	801f278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	3307      	adds	r3, #7
 801f262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	f023 0307 	bic.w	r3, r3, #7
 801f26a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801f26c:	68ba      	ldr	r2, [r7, #8]
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	1ad3      	subs	r3, r2, r3
 801f272:	4a1f      	ldr	r2, [pc, #124]	; (801f2f0 <prvHeapInit+0xac>)
 801f274:	4413      	add	r3, r2
 801f276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801f27c:	4a1d      	ldr	r2, [pc, #116]	; (801f2f4 <prvHeapInit+0xb0>)
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801f282:	4b1c      	ldr	r3, [pc, #112]	; (801f2f4 <prvHeapInit+0xb0>)
 801f284:	2200      	movs	r2, #0
 801f286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	68ba      	ldr	r2, [r7, #8]
 801f28c:	4413      	add	r3, r2
 801f28e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801f290:	2208      	movs	r2, #8
 801f292:	68fb      	ldr	r3, [r7, #12]
 801f294:	1a9b      	subs	r3, r3, r2
 801f296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	f023 0307 	bic.w	r3, r3, #7
 801f29e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801f2a0:	68fb      	ldr	r3, [r7, #12]
 801f2a2:	4a15      	ldr	r2, [pc, #84]	; (801f2f8 <prvHeapInit+0xb4>)
 801f2a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801f2a6:	4b14      	ldr	r3, [pc, #80]	; (801f2f8 <prvHeapInit+0xb4>)
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	2200      	movs	r2, #0
 801f2ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801f2ae:	4b12      	ldr	r3, [pc, #72]	; (801f2f8 <prvHeapInit+0xb4>)
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	2200      	movs	r2, #0
 801f2b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801f2b6:	687b      	ldr	r3, [r7, #4]
 801f2b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801f2ba:	683b      	ldr	r3, [r7, #0]
 801f2bc:	68fa      	ldr	r2, [r7, #12]
 801f2be:	1ad2      	subs	r2, r2, r3
 801f2c0:	683b      	ldr	r3, [r7, #0]
 801f2c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801f2c4:	4b0c      	ldr	r3, [pc, #48]	; (801f2f8 <prvHeapInit+0xb4>)
 801f2c6:	681a      	ldr	r2, [r3, #0]
 801f2c8:	683b      	ldr	r3, [r7, #0]
 801f2ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f2cc:	683b      	ldr	r3, [r7, #0]
 801f2ce:	685b      	ldr	r3, [r3, #4]
 801f2d0:	4a0a      	ldr	r2, [pc, #40]	; (801f2fc <prvHeapInit+0xb8>)
 801f2d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	685b      	ldr	r3, [r3, #4]
 801f2d8:	4a09      	ldr	r2, [pc, #36]	; (801f300 <prvHeapInit+0xbc>)
 801f2da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f2dc:	4b09      	ldr	r3, [pc, #36]	; (801f304 <prvHeapInit+0xc0>)
 801f2de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801f2e2:	601a      	str	r2, [r3, #0]
}
 801f2e4:	bf00      	nop
 801f2e6:	3714      	adds	r7, #20
 801f2e8:	46bd      	mov	sp, r7
 801f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ee:	4770      	bx	lr
 801f2f0:	20001df0 	.word	0x20001df0
 801f2f4:	200059f0 	.word	0x200059f0
 801f2f8:	200059f8 	.word	0x200059f8
 801f2fc:	20005a00 	.word	0x20005a00
 801f300:	200059fc 	.word	0x200059fc
 801f304:	20005a0c 	.word	0x20005a0c

0801f308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801f308:	b480      	push	{r7}
 801f30a:	b085      	sub	sp, #20
 801f30c:	af00      	add	r7, sp, #0
 801f30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f310:	4b28      	ldr	r3, [pc, #160]	; (801f3b4 <prvInsertBlockIntoFreeList+0xac>)
 801f312:	60fb      	str	r3, [r7, #12]
 801f314:	e002      	b.n	801f31c <prvInsertBlockIntoFreeList+0x14>
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	60fb      	str	r3, [r7, #12]
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	687a      	ldr	r2, [r7, #4]
 801f322:	429a      	cmp	r2, r3
 801f324:	d8f7      	bhi.n	801f316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801f32a:	68fb      	ldr	r3, [r7, #12]
 801f32c:	685b      	ldr	r3, [r3, #4]
 801f32e:	68ba      	ldr	r2, [r7, #8]
 801f330:	4413      	add	r3, r2
 801f332:	687a      	ldr	r2, [r7, #4]
 801f334:	429a      	cmp	r2, r3
 801f336:	d108      	bne.n	801f34a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	685a      	ldr	r2, [r3, #4]
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	685b      	ldr	r3, [r3, #4]
 801f340:	441a      	add	r2, r3
 801f342:	68fb      	ldr	r3, [r7, #12]
 801f344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	685b      	ldr	r3, [r3, #4]
 801f352:	68ba      	ldr	r2, [r7, #8]
 801f354:	441a      	add	r2, r3
 801f356:	68fb      	ldr	r3, [r7, #12]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	429a      	cmp	r2, r3
 801f35c:	d118      	bne.n	801f390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	681a      	ldr	r2, [r3, #0]
 801f362:	4b15      	ldr	r3, [pc, #84]	; (801f3b8 <prvInsertBlockIntoFreeList+0xb0>)
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	429a      	cmp	r2, r3
 801f368:	d00d      	beq.n	801f386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	685a      	ldr	r2, [r3, #4]
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	685b      	ldr	r3, [r3, #4]
 801f374:	441a      	add	r2, r3
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	681a      	ldr	r2, [r3, #0]
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	601a      	str	r2, [r3, #0]
 801f384:	e008      	b.n	801f398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801f386:	4b0c      	ldr	r3, [pc, #48]	; (801f3b8 <prvInsertBlockIntoFreeList+0xb0>)
 801f388:	681a      	ldr	r2, [r3, #0]
 801f38a:	687b      	ldr	r3, [r7, #4]
 801f38c:	601a      	str	r2, [r3, #0]
 801f38e:	e003      	b.n	801f398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	681a      	ldr	r2, [r3, #0]
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801f398:	68fa      	ldr	r2, [r7, #12]
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	429a      	cmp	r2, r3
 801f39e:	d002      	beq.n	801f3a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801f3a0:	68fb      	ldr	r3, [r7, #12]
 801f3a2:	687a      	ldr	r2, [r7, #4]
 801f3a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f3a6:	bf00      	nop
 801f3a8:	3714      	adds	r7, #20
 801f3aa:	46bd      	mov	sp, r7
 801f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b0:	4770      	bx	lr
 801f3b2:	bf00      	nop
 801f3b4:	200059f0 	.word	0x200059f0
 801f3b8:	200059f8 	.word	0x200059f8

0801f3bc <__errno>:
 801f3bc:	4b01      	ldr	r3, [pc, #4]	; (801f3c4 <__errno+0x8>)
 801f3be:	6818      	ldr	r0, [r3, #0]
 801f3c0:	4770      	bx	lr
 801f3c2:	bf00      	nop
 801f3c4:	200000c4 	.word	0x200000c4

0801f3c8 <__libc_init_array>:
 801f3c8:	b570      	push	{r4, r5, r6, lr}
 801f3ca:	4d0d      	ldr	r5, [pc, #52]	; (801f400 <__libc_init_array+0x38>)
 801f3cc:	4c0d      	ldr	r4, [pc, #52]	; (801f404 <__libc_init_array+0x3c>)
 801f3ce:	1b64      	subs	r4, r4, r5
 801f3d0:	10a4      	asrs	r4, r4, #2
 801f3d2:	2600      	movs	r6, #0
 801f3d4:	42a6      	cmp	r6, r4
 801f3d6:	d109      	bne.n	801f3ec <__libc_init_array+0x24>
 801f3d8:	4d0b      	ldr	r5, [pc, #44]	; (801f408 <__libc_init_array+0x40>)
 801f3da:	4c0c      	ldr	r4, [pc, #48]	; (801f40c <__libc_init_array+0x44>)
 801f3dc:	f005 ff40 	bl	8025260 <_init>
 801f3e0:	1b64      	subs	r4, r4, r5
 801f3e2:	10a4      	asrs	r4, r4, #2
 801f3e4:	2600      	movs	r6, #0
 801f3e6:	42a6      	cmp	r6, r4
 801f3e8:	d105      	bne.n	801f3f6 <__libc_init_array+0x2e>
 801f3ea:	bd70      	pop	{r4, r5, r6, pc}
 801f3ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801f3f0:	4798      	blx	r3
 801f3f2:	3601      	adds	r6, #1
 801f3f4:	e7ee      	b.n	801f3d4 <__libc_init_array+0xc>
 801f3f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801f3fa:	4798      	blx	r3
 801f3fc:	3601      	adds	r6, #1
 801f3fe:	e7f2      	b.n	801f3e6 <__libc_init_array+0x1e>
 801f400:	0802662c 	.word	0x0802662c
 801f404:	0802662c 	.word	0x0802662c
 801f408:	0802662c 	.word	0x0802662c
 801f40c:	08026630 	.word	0x08026630

0801f410 <malloc>:
 801f410:	4b02      	ldr	r3, [pc, #8]	; (801f41c <malloc+0xc>)
 801f412:	4601      	mov	r1, r0
 801f414:	6818      	ldr	r0, [r3, #0]
 801f416:	f000 b869 	b.w	801f4ec <_malloc_r>
 801f41a:	bf00      	nop
 801f41c:	200000c4 	.word	0x200000c4

0801f420 <memcpy>:
 801f420:	440a      	add	r2, r1
 801f422:	4291      	cmp	r1, r2
 801f424:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f428:	d100      	bne.n	801f42c <memcpy+0xc>
 801f42a:	4770      	bx	lr
 801f42c:	b510      	push	{r4, lr}
 801f42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f432:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f436:	4291      	cmp	r1, r2
 801f438:	d1f9      	bne.n	801f42e <memcpy+0xe>
 801f43a:	bd10      	pop	{r4, pc}

0801f43c <memset>:
 801f43c:	4402      	add	r2, r0
 801f43e:	4603      	mov	r3, r0
 801f440:	4293      	cmp	r3, r2
 801f442:	d100      	bne.n	801f446 <memset+0xa>
 801f444:	4770      	bx	lr
 801f446:	f803 1b01 	strb.w	r1, [r3], #1
 801f44a:	e7f9      	b.n	801f440 <memset+0x4>

0801f44c <_free_r>:
 801f44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f44e:	2900      	cmp	r1, #0
 801f450:	d048      	beq.n	801f4e4 <_free_r+0x98>
 801f452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f456:	9001      	str	r0, [sp, #4]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	f1a1 0404 	sub.w	r4, r1, #4
 801f45e:	bfb8      	it	lt
 801f460:	18e4      	addlt	r4, r4, r3
 801f462:	f003 f8fd 	bl	8022660 <__malloc_lock>
 801f466:	4a20      	ldr	r2, [pc, #128]	; (801f4e8 <_free_r+0x9c>)
 801f468:	9801      	ldr	r0, [sp, #4]
 801f46a:	6813      	ldr	r3, [r2, #0]
 801f46c:	4615      	mov	r5, r2
 801f46e:	b933      	cbnz	r3, 801f47e <_free_r+0x32>
 801f470:	6063      	str	r3, [r4, #4]
 801f472:	6014      	str	r4, [r2, #0]
 801f474:	b003      	add	sp, #12
 801f476:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f47a:	f003 b8f7 	b.w	802266c <__malloc_unlock>
 801f47e:	42a3      	cmp	r3, r4
 801f480:	d90b      	bls.n	801f49a <_free_r+0x4e>
 801f482:	6821      	ldr	r1, [r4, #0]
 801f484:	1862      	adds	r2, r4, r1
 801f486:	4293      	cmp	r3, r2
 801f488:	bf04      	itt	eq
 801f48a:	681a      	ldreq	r2, [r3, #0]
 801f48c:	685b      	ldreq	r3, [r3, #4]
 801f48e:	6063      	str	r3, [r4, #4]
 801f490:	bf04      	itt	eq
 801f492:	1852      	addeq	r2, r2, r1
 801f494:	6022      	streq	r2, [r4, #0]
 801f496:	602c      	str	r4, [r5, #0]
 801f498:	e7ec      	b.n	801f474 <_free_r+0x28>
 801f49a:	461a      	mov	r2, r3
 801f49c:	685b      	ldr	r3, [r3, #4]
 801f49e:	b10b      	cbz	r3, 801f4a4 <_free_r+0x58>
 801f4a0:	42a3      	cmp	r3, r4
 801f4a2:	d9fa      	bls.n	801f49a <_free_r+0x4e>
 801f4a4:	6811      	ldr	r1, [r2, #0]
 801f4a6:	1855      	adds	r5, r2, r1
 801f4a8:	42a5      	cmp	r5, r4
 801f4aa:	d10b      	bne.n	801f4c4 <_free_r+0x78>
 801f4ac:	6824      	ldr	r4, [r4, #0]
 801f4ae:	4421      	add	r1, r4
 801f4b0:	1854      	adds	r4, r2, r1
 801f4b2:	42a3      	cmp	r3, r4
 801f4b4:	6011      	str	r1, [r2, #0]
 801f4b6:	d1dd      	bne.n	801f474 <_free_r+0x28>
 801f4b8:	681c      	ldr	r4, [r3, #0]
 801f4ba:	685b      	ldr	r3, [r3, #4]
 801f4bc:	6053      	str	r3, [r2, #4]
 801f4be:	4421      	add	r1, r4
 801f4c0:	6011      	str	r1, [r2, #0]
 801f4c2:	e7d7      	b.n	801f474 <_free_r+0x28>
 801f4c4:	d902      	bls.n	801f4cc <_free_r+0x80>
 801f4c6:	230c      	movs	r3, #12
 801f4c8:	6003      	str	r3, [r0, #0]
 801f4ca:	e7d3      	b.n	801f474 <_free_r+0x28>
 801f4cc:	6825      	ldr	r5, [r4, #0]
 801f4ce:	1961      	adds	r1, r4, r5
 801f4d0:	428b      	cmp	r3, r1
 801f4d2:	bf04      	itt	eq
 801f4d4:	6819      	ldreq	r1, [r3, #0]
 801f4d6:	685b      	ldreq	r3, [r3, #4]
 801f4d8:	6063      	str	r3, [r4, #4]
 801f4da:	bf04      	itt	eq
 801f4dc:	1949      	addeq	r1, r1, r5
 801f4de:	6021      	streq	r1, [r4, #0]
 801f4e0:	6054      	str	r4, [r2, #4]
 801f4e2:	e7c7      	b.n	801f474 <_free_r+0x28>
 801f4e4:	b003      	add	sp, #12
 801f4e6:	bd30      	pop	{r4, r5, pc}
 801f4e8:	20005a10 	.word	0x20005a10

0801f4ec <_malloc_r>:
 801f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4ee:	1ccd      	adds	r5, r1, #3
 801f4f0:	f025 0503 	bic.w	r5, r5, #3
 801f4f4:	3508      	adds	r5, #8
 801f4f6:	2d0c      	cmp	r5, #12
 801f4f8:	bf38      	it	cc
 801f4fa:	250c      	movcc	r5, #12
 801f4fc:	2d00      	cmp	r5, #0
 801f4fe:	4606      	mov	r6, r0
 801f500:	db01      	blt.n	801f506 <_malloc_r+0x1a>
 801f502:	42a9      	cmp	r1, r5
 801f504:	d903      	bls.n	801f50e <_malloc_r+0x22>
 801f506:	230c      	movs	r3, #12
 801f508:	6033      	str	r3, [r6, #0]
 801f50a:	2000      	movs	r0, #0
 801f50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f50e:	f003 f8a7 	bl	8022660 <__malloc_lock>
 801f512:	4921      	ldr	r1, [pc, #132]	; (801f598 <_malloc_r+0xac>)
 801f514:	680a      	ldr	r2, [r1, #0]
 801f516:	4614      	mov	r4, r2
 801f518:	b99c      	cbnz	r4, 801f542 <_malloc_r+0x56>
 801f51a:	4f20      	ldr	r7, [pc, #128]	; (801f59c <_malloc_r+0xb0>)
 801f51c:	683b      	ldr	r3, [r7, #0]
 801f51e:	b923      	cbnz	r3, 801f52a <_malloc_r+0x3e>
 801f520:	4621      	mov	r1, r4
 801f522:	4630      	mov	r0, r6
 801f524:	f000 febe 	bl	80202a4 <_sbrk_r>
 801f528:	6038      	str	r0, [r7, #0]
 801f52a:	4629      	mov	r1, r5
 801f52c:	4630      	mov	r0, r6
 801f52e:	f000 feb9 	bl	80202a4 <_sbrk_r>
 801f532:	1c43      	adds	r3, r0, #1
 801f534:	d123      	bne.n	801f57e <_malloc_r+0x92>
 801f536:	230c      	movs	r3, #12
 801f538:	6033      	str	r3, [r6, #0]
 801f53a:	4630      	mov	r0, r6
 801f53c:	f003 f896 	bl	802266c <__malloc_unlock>
 801f540:	e7e3      	b.n	801f50a <_malloc_r+0x1e>
 801f542:	6823      	ldr	r3, [r4, #0]
 801f544:	1b5b      	subs	r3, r3, r5
 801f546:	d417      	bmi.n	801f578 <_malloc_r+0x8c>
 801f548:	2b0b      	cmp	r3, #11
 801f54a:	d903      	bls.n	801f554 <_malloc_r+0x68>
 801f54c:	6023      	str	r3, [r4, #0]
 801f54e:	441c      	add	r4, r3
 801f550:	6025      	str	r5, [r4, #0]
 801f552:	e004      	b.n	801f55e <_malloc_r+0x72>
 801f554:	6863      	ldr	r3, [r4, #4]
 801f556:	42a2      	cmp	r2, r4
 801f558:	bf0c      	ite	eq
 801f55a:	600b      	streq	r3, [r1, #0]
 801f55c:	6053      	strne	r3, [r2, #4]
 801f55e:	4630      	mov	r0, r6
 801f560:	f003 f884 	bl	802266c <__malloc_unlock>
 801f564:	f104 000b 	add.w	r0, r4, #11
 801f568:	1d23      	adds	r3, r4, #4
 801f56a:	f020 0007 	bic.w	r0, r0, #7
 801f56e:	1ac2      	subs	r2, r0, r3
 801f570:	d0cc      	beq.n	801f50c <_malloc_r+0x20>
 801f572:	1a1b      	subs	r3, r3, r0
 801f574:	50a3      	str	r3, [r4, r2]
 801f576:	e7c9      	b.n	801f50c <_malloc_r+0x20>
 801f578:	4622      	mov	r2, r4
 801f57a:	6864      	ldr	r4, [r4, #4]
 801f57c:	e7cc      	b.n	801f518 <_malloc_r+0x2c>
 801f57e:	1cc4      	adds	r4, r0, #3
 801f580:	f024 0403 	bic.w	r4, r4, #3
 801f584:	42a0      	cmp	r0, r4
 801f586:	d0e3      	beq.n	801f550 <_malloc_r+0x64>
 801f588:	1a21      	subs	r1, r4, r0
 801f58a:	4630      	mov	r0, r6
 801f58c:	f000 fe8a 	bl	80202a4 <_sbrk_r>
 801f590:	3001      	adds	r0, #1
 801f592:	d1dd      	bne.n	801f550 <_malloc_r+0x64>
 801f594:	e7cf      	b.n	801f536 <_malloc_r+0x4a>
 801f596:	bf00      	nop
 801f598:	20005a10 	.word	0x20005a10
 801f59c:	20005a14 	.word	0x20005a14

0801f5a0 <__cvt>:
 801f5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f5a4:	ec55 4b10 	vmov	r4, r5, d0
 801f5a8:	2d00      	cmp	r5, #0
 801f5aa:	460e      	mov	r6, r1
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	462b      	mov	r3, r5
 801f5b0:	bfbb      	ittet	lt
 801f5b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f5b6:	461d      	movlt	r5, r3
 801f5b8:	2300      	movge	r3, #0
 801f5ba:	232d      	movlt	r3, #45	; 0x2d
 801f5bc:	700b      	strb	r3, [r1, #0]
 801f5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f5c4:	4691      	mov	r9, r2
 801f5c6:	f023 0820 	bic.w	r8, r3, #32
 801f5ca:	bfbc      	itt	lt
 801f5cc:	4622      	movlt	r2, r4
 801f5ce:	4614      	movlt	r4, r2
 801f5d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f5d4:	d005      	beq.n	801f5e2 <__cvt+0x42>
 801f5d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f5da:	d100      	bne.n	801f5de <__cvt+0x3e>
 801f5dc:	3601      	adds	r6, #1
 801f5de:	2102      	movs	r1, #2
 801f5e0:	e000      	b.n	801f5e4 <__cvt+0x44>
 801f5e2:	2103      	movs	r1, #3
 801f5e4:	ab03      	add	r3, sp, #12
 801f5e6:	9301      	str	r3, [sp, #4]
 801f5e8:	ab02      	add	r3, sp, #8
 801f5ea:	9300      	str	r3, [sp, #0]
 801f5ec:	ec45 4b10 	vmov	d0, r4, r5
 801f5f0:	4653      	mov	r3, sl
 801f5f2:	4632      	mov	r2, r6
 801f5f4:	f001 feb0 	bl	8021358 <_dtoa_r>
 801f5f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f5fc:	4607      	mov	r7, r0
 801f5fe:	d102      	bne.n	801f606 <__cvt+0x66>
 801f600:	f019 0f01 	tst.w	r9, #1
 801f604:	d022      	beq.n	801f64c <__cvt+0xac>
 801f606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f60a:	eb07 0906 	add.w	r9, r7, r6
 801f60e:	d110      	bne.n	801f632 <__cvt+0x92>
 801f610:	783b      	ldrb	r3, [r7, #0]
 801f612:	2b30      	cmp	r3, #48	; 0x30
 801f614:	d10a      	bne.n	801f62c <__cvt+0x8c>
 801f616:	2200      	movs	r2, #0
 801f618:	2300      	movs	r3, #0
 801f61a:	4620      	mov	r0, r4
 801f61c:	4629      	mov	r1, r5
 801f61e:	f7e1 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 801f622:	b918      	cbnz	r0, 801f62c <__cvt+0x8c>
 801f624:	f1c6 0601 	rsb	r6, r6, #1
 801f628:	f8ca 6000 	str.w	r6, [sl]
 801f62c:	f8da 3000 	ldr.w	r3, [sl]
 801f630:	4499      	add	r9, r3
 801f632:	2200      	movs	r2, #0
 801f634:	2300      	movs	r3, #0
 801f636:	4620      	mov	r0, r4
 801f638:	4629      	mov	r1, r5
 801f63a:	f7e1 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 801f63e:	b108      	cbz	r0, 801f644 <__cvt+0xa4>
 801f640:	f8cd 900c 	str.w	r9, [sp, #12]
 801f644:	2230      	movs	r2, #48	; 0x30
 801f646:	9b03      	ldr	r3, [sp, #12]
 801f648:	454b      	cmp	r3, r9
 801f64a:	d307      	bcc.n	801f65c <__cvt+0xbc>
 801f64c:	9b03      	ldr	r3, [sp, #12]
 801f64e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f650:	1bdb      	subs	r3, r3, r7
 801f652:	4638      	mov	r0, r7
 801f654:	6013      	str	r3, [r2, #0]
 801f656:	b004      	add	sp, #16
 801f658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f65c:	1c59      	adds	r1, r3, #1
 801f65e:	9103      	str	r1, [sp, #12]
 801f660:	701a      	strb	r2, [r3, #0]
 801f662:	e7f0      	b.n	801f646 <__cvt+0xa6>

0801f664 <__exponent>:
 801f664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f666:	4603      	mov	r3, r0
 801f668:	2900      	cmp	r1, #0
 801f66a:	bfb8      	it	lt
 801f66c:	4249      	neglt	r1, r1
 801f66e:	f803 2b02 	strb.w	r2, [r3], #2
 801f672:	bfb4      	ite	lt
 801f674:	222d      	movlt	r2, #45	; 0x2d
 801f676:	222b      	movge	r2, #43	; 0x2b
 801f678:	2909      	cmp	r1, #9
 801f67a:	7042      	strb	r2, [r0, #1]
 801f67c:	dd2a      	ble.n	801f6d4 <__exponent+0x70>
 801f67e:	f10d 0407 	add.w	r4, sp, #7
 801f682:	46a4      	mov	ip, r4
 801f684:	270a      	movs	r7, #10
 801f686:	46a6      	mov	lr, r4
 801f688:	460a      	mov	r2, r1
 801f68a:	fb91 f6f7 	sdiv	r6, r1, r7
 801f68e:	fb07 1516 	mls	r5, r7, r6, r1
 801f692:	3530      	adds	r5, #48	; 0x30
 801f694:	2a63      	cmp	r2, #99	; 0x63
 801f696:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801f69a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f69e:	4631      	mov	r1, r6
 801f6a0:	dcf1      	bgt.n	801f686 <__exponent+0x22>
 801f6a2:	3130      	adds	r1, #48	; 0x30
 801f6a4:	f1ae 0502 	sub.w	r5, lr, #2
 801f6a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f6ac:	1c44      	adds	r4, r0, #1
 801f6ae:	4629      	mov	r1, r5
 801f6b0:	4561      	cmp	r1, ip
 801f6b2:	d30a      	bcc.n	801f6ca <__exponent+0x66>
 801f6b4:	f10d 0209 	add.w	r2, sp, #9
 801f6b8:	eba2 020e 	sub.w	r2, r2, lr
 801f6bc:	4565      	cmp	r5, ip
 801f6be:	bf88      	it	hi
 801f6c0:	2200      	movhi	r2, #0
 801f6c2:	4413      	add	r3, r2
 801f6c4:	1a18      	subs	r0, r3, r0
 801f6c6:	b003      	add	sp, #12
 801f6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f6ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f6d2:	e7ed      	b.n	801f6b0 <__exponent+0x4c>
 801f6d4:	2330      	movs	r3, #48	; 0x30
 801f6d6:	3130      	adds	r1, #48	; 0x30
 801f6d8:	7083      	strb	r3, [r0, #2]
 801f6da:	70c1      	strb	r1, [r0, #3]
 801f6dc:	1d03      	adds	r3, r0, #4
 801f6de:	e7f1      	b.n	801f6c4 <__exponent+0x60>

0801f6e0 <_printf_float>:
 801f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6e4:	ed2d 8b02 	vpush	{d8}
 801f6e8:	b08d      	sub	sp, #52	; 0x34
 801f6ea:	460c      	mov	r4, r1
 801f6ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f6f0:	4616      	mov	r6, r2
 801f6f2:	461f      	mov	r7, r3
 801f6f4:	4605      	mov	r5, r0
 801f6f6:	f002 ff8b 	bl	8022610 <_localeconv_r>
 801f6fa:	f8d0 a000 	ldr.w	sl, [r0]
 801f6fe:	4650      	mov	r0, sl
 801f700:	f7e0 fd66 	bl	80001d0 <strlen>
 801f704:	2300      	movs	r3, #0
 801f706:	930a      	str	r3, [sp, #40]	; 0x28
 801f708:	6823      	ldr	r3, [r4, #0]
 801f70a:	9305      	str	r3, [sp, #20]
 801f70c:	f8d8 3000 	ldr.w	r3, [r8]
 801f710:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f714:	3307      	adds	r3, #7
 801f716:	f023 0307 	bic.w	r3, r3, #7
 801f71a:	f103 0208 	add.w	r2, r3, #8
 801f71e:	f8c8 2000 	str.w	r2, [r8]
 801f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f726:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f72a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f72e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f732:	9307      	str	r3, [sp, #28]
 801f734:	f8cd 8018 	str.w	r8, [sp, #24]
 801f738:	ee08 0a10 	vmov	s16, r0
 801f73c:	4b9f      	ldr	r3, [pc, #636]	; (801f9bc <_printf_float+0x2dc>)
 801f73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f746:	f7e1 f9f1 	bl	8000b2c <__aeabi_dcmpun>
 801f74a:	bb88      	cbnz	r0, 801f7b0 <_printf_float+0xd0>
 801f74c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f750:	4b9a      	ldr	r3, [pc, #616]	; (801f9bc <_printf_float+0x2dc>)
 801f752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f756:	f7e1 f9cb 	bl	8000af0 <__aeabi_dcmple>
 801f75a:	bb48      	cbnz	r0, 801f7b0 <_printf_float+0xd0>
 801f75c:	2200      	movs	r2, #0
 801f75e:	2300      	movs	r3, #0
 801f760:	4640      	mov	r0, r8
 801f762:	4649      	mov	r1, r9
 801f764:	f7e1 f9ba 	bl	8000adc <__aeabi_dcmplt>
 801f768:	b110      	cbz	r0, 801f770 <_printf_float+0x90>
 801f76a:	232d      	movs	r3, #45	; 0x2d
 801f76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f770:	4b93      	ldr	r3, [pc, #588]	; (801f9c0 <_printf_float+0x2e0>)
 801f772:	4894      	ldr	r0, [pc, #592]	; (801f9c4 <_printf_float+0x2e4>)
 801f774:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f778:	bf94      	ite	ls
 801f77a:	4698      	movls	r8, r3
 801f77c:	4680      	movhi	r8, r0
 801f77e:	2303      	movs	r3, #3
 801f780:	6123      	str	r3, [r4, #16]
 801f782:	9b05      	ldr	r3, [sp, #20]
 801f784:	f023 0204 	bic.w	r2, r3, #4
 801f788:	6022      	str	r2, [r4, #0]
 801f78a:	f04f 0900 	mov.w	r9, #0
 801f78e:	9700      	str	r7, [sp, #0]
 801f790:	4633      	mov	r3, r6
 801f792:	aa0b      	add	r2, sp, #44	; 0x2c
 801f794:	4621      	mov	r1, r4
 801f796:	4628      	mov	r0, r5
 801f798:	f000 f9d8 	bl	801fb4c <_printf_common>
 801f79c:	3001      	adds	r0, #1
 801f79e:	f040 8090 	bne.w	801f8c2 <_printf_float+0x1e2>
 801f7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f7a6:	b00d      	add	sp, #52	; 0x34
 801f7a8:	ecbd 8b02 	vpop	{d8}
 801f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7b0:	4642      	mov	r2, r8
 801f7b2:	464b      	mov	r3, r9
 801f7b4:	4640      	mov	r0, r8
 801f7b6:	4649      	mov	r1, r9
 801f7b8:	f7e1 f9b8 	bl	8000b2c <__aeabi_dcmpun>
 801f7bc:	b140      	cbz	r0, 801f7d0 <_printf_float+0xf0>
 801f7be:	464b      	mov	r3, r9
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	bfbc      	itt	lt
 801f7c4:	232d      	movlt	r3, #45	; 0x2d
 801f7c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f7ca:	487f      	ldr	r0, [pc, #508]	; (801f9c8 <_printf_float+0x2e8>)
 801f7cc:	4b7f      	ldr	r3, [pc, #508]	; (801f9cc <_printf_float+0x2ec>)
 801f7ce:	e7d1      	b.n	801f774 <_printf_float+0x94>
 801f7d0:	6863      	ldr	r3, [r4, #4]
 801f7d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f7d6:	9206      	str	r2, [sp, #24]
 801f7d8:	1c5a      	adds	r2, r3, #1
 801f7da:	d13f      	bne.n	801f85c <_printf_float+0x17c>
 801f7dc:	2306      	movs	r3, #6
 801f7de:	6063      	str	r3, [r4, #4]
 801f7e0:	9b05      	ldr	r3, [sp, #20]
 801f7e2:	6861      	ldr	r1, [r4, #4]
 801f7e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f7e8:	2300      	movs	r3, #0
 801f7ea:	9303      	str	r3, [sp, #12]
 801f7ec:	ab0a      	add	r3, sp, #40	; 0x28
 801f7ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f7f2:	ab09      	add	r3, sp, #36	; 0x24
 801f7f4:	ec49 8b10 	vmov	d0, r8, r9
 801f7f8:	9300      	str	r3, [sp, #0]
 801f7fa:	6022      	str	r2, [r4, #0]
 801f7fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f800:	4628      	mov	r0, r5
 801f802:	f7ff fecd 	bl	801f5a0 <__cvt>
 801f806:	9b06      	ldr	r3, [sp, #24]
 801f808:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f80a:	2b47      	cmp	r3, #71	; 0x47
 801f80c:	4680      	mov	r8, r0
 801f80e:	d108      	bne.n	801f822 <_printf_float+0x142>
 801f810:	1cc8      	adds	r0, r1, #3
 801f812:	db02      	blt.n	801f81a <_printf_float+0x13a>
 801f814:	6863      	ldr	r3, [r4, #4]
 801f816:	4299      	cmp	r1, r3
 801f818:	dd41      	ble.n	801f89e <_printf_float+0x1be>
 801f81a:	f1ab 0b02 	sub.w	fp, fp, #2
 801f81e:	fa5f fb8b 	uxtb.w	fp, fp
 801f822:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f826:	d820      	bhi.n	801f86a <_printf_float+0x18a>
 801f828:	3901      	subs	r1, #1
 801f82a:	465a      	mov	r2, fp
 801f82c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f830:	9109      	str	r1, [sp, #36]	; 0x24
 801f832:	f7ff ff17 	bl	801f664 <__exponent>
 801f836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f838:	1813      	adds	r3, r2, r0
 801f83a:	2a01      	cmp	r2, #1
 801f83c:	4681      	mov	r9, r0
 801f83e:	6123      	str	r3, [r4, #16]
 801f840:	dc02      	bgt.n	801f848 <_printf_float+0x168>
 801f842:	6822      	ldr	r2, [r4, #0]
 801f844:	07d2      	lsls	r2, r2, #31
 801f846:	d501      	bpl.n	801f84c <_printf_float+0x16c>
 801f848:	3301      	adds	r3, #1
 801f84a:	6123      	str	r3, [r4, #16]
 801f84c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f850:	2b00      	cmp	r3, #0
 801f852:	d09c      	beq.n	801f78e <_printf_float+0xae>
 801f854:	232d      	movs	r3, #45	; 0x2d
 801f856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f85a:	e798      	b.n	801f78e <_printf_float+0xae>
 801f85c:	9a06      	ldr	r2, [sp, #24]
 801f85e:	2a47      	cmp	r2, #71	; 0x47
 801f860:	d1be      	bne.n	801f7e0 <_printf_float+0x100>
 801f862:	2b00      	cmp	r3, #0
 801f864:	d1bc      	bne.n	801f7e0 <_printf_float+0x100>
 801f866:	2301      	movs	r3, #1
 801f868:	e7b9      	b.n	801f7de <_printf_float+0xfe>
 801f86a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f86e:	d118      	bne.n	801f8a2 <_printf_float+0x1c2>
 801f870:	2900      	cmp	r1, #0
 801f872:	6863      	ldr	r3, [r4, #4]
 801f874:	dd0b      	ble.n	801f88e <_printf_float+0x1ae>
 801f876:	6121      	str	r1, [r4, #16]
 801f878:	b913      	cbnz	r3, 801f880 <_printf_float+0x1a0>
 801f87a:	6822      	ldr	r2, [r4, #0]
 801f87c:	07d0      	lsls	r0, r2, #31
 801f87e:	d502      	bpl.n	801f886 <_printf_float+0x1a6>
 801f880:	3301      	adds	r3, #1
 801f882:	440b      	add	r3, r1
 801f884:	6123      	str	r3, [r4, #16]
 801f886:	65a1      	str	r1, [r4, #88]	; 0x58
 801f888:	f04f 0900 	mov.w	r9, #0
 801f88c:	e7de      	b.n	801f84c <_printf_float+0x16c>
 801f88e:	b913      	cbnz	r3, 801f896 <_printf_float+0x1b6>
 801f890:	6822      	ldr	r2, [r4, #0]
 801f892:	07d2      	lsls	r2, r2, #31
 801f894:	d501      	bpl.n	801f89a <_printf_float+0x1ba>
 801f896:	3302      	adds	r3, #2
 801f898:	e7f4      	b.n	801f884 <_printf_float+0x1a4>
 801f89a:	2301      	movs	r3, #1
 801f89c:	e7f2      	b.n	801f884 <_printf_float+0x1a4>
 801f89e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8a4:	4299      	cmp	r1, r3
 801f8a6:	db05      	blt.n	801f8b4 <_printf_float+0x1d4>
 801f8a8:	6823      	ldr	r3, [r4, #0]
 801f8aa:	6121      	str	r1, [r4, #16]
 801f8ac:	07d8      	lsls	r0, r3, #31
 801f8ae:	d5ea      	bpl.n	801f886 <_printf_float+0x1a6>
 801f8b0:	1c4b      	adds	r3, r1, #1
 801f8b2:	e7e7      	b.n	801f884 <_printf_float+0x1a4>
 801f8b4:	2900      	cmp	r1, #0
 801f8b6:	bfd4      	ite	le
 801f8b8:	f1c1 0202 	rsble	r2, r1, #2
 801f8bc:	2201      	movgt	r2, #1
 801f8be:	4413      	add	r3, r2
 801f8c0:	e7e0      	b.n	801f884 <_printf_float+0x1a4>
 801f8c2:	6823      	ldr	r3, [r4, #0]
 801f8c4:	055a      	lsls	r2, r3, #21
 801f8c6:	d407      	bmi.n	801f8d8 <_printf_float+0x1f8>
 801f8c8:	6923      	ldr	r3, [r4, #16]
 801f8ca:	4642      	mov	r2, r8
 801f8cc:	4631      	mov	r1, r6
 801f8ce:	4628      	mov	r0, r5
 801f8d0:	47b8      	blx	r7
 801f8d2:	3001      	adds	r0, #1
 801f8d4:	d12c      	bne.n	801f930 <_printf_float+0x250>
 801f8d6:	e764      	b.n	801f7a2 <_printf_float+0xc2>
 801f8d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f8dc:	f240 80e0 	bls.w	801faa0 <_printf_float+0x3c0>
 801f8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f8e4:	2200      	movs	r2, #0
 801f8e6:	2300      	movs	r3, #0
 801f8e8:	f7e1 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 801f8ec:	2800      	cmp	r0, #0
 801f8ee:	d034      	beq.n	801f95a <_printf_float+0x27a>
 801f8f0:	4a37      	ldr	r2, [pc, #220]	; (801f9d0 <_printf_float+0x2f0>)
 801f8f2:	2301      	movs	r3, #1
 801f8f4:	4631      	mov	r1, r6
 801f8f6:	4628      	mov	r0, r5
 801f8f8:	47b8      	blx	r7
 801f8fa:	3001      	adds	r0, #1
 801f8fc:	f43f af51 	beq.w	801f7a2 <_printf_float+0xc2>
 801f900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f904:	429a      	cmp	r2, r3
 801f906:	db02      	blt.n	801f90e <_printf_float+0x22e>
 801f908:	6823      	ldr	r3, [r4, #0]
 801f90a:	07d8      	lsls	r0, r3, #31
 801f90c:	d510      	bpl.n	801f930 <_printf_float+0x250>
 801f90e:	ee18 3a10 	vmov	r3, s16
 801f912:	4652      	mov	r2, sl
 801f914:	4631      	mov	r1, r6
 801f916:	4628      	mov	r0, r5
 801f918:	47b8      	blx	r7
 801f91a:	3001      	adds	r0, #1
 801f91c:	f43f af41 	beq.w	801f7a2 <_printf_float+0xc2>
 801f920:	f04f 0800 	mov.w	r8, #0
 801f924:	f104 091a 	add.w	r9, r4, #26
 801f928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f92a:	3b01      	subs	r3, #1
 801f92c:	4543      	cmp	r3, r8
 801f92e:	dc09      	bgt.n	801f944 <_printf_float+0x264>
 801f930:	6823      	ldr	r3, [r4, #0]
 801f932:	079b      	lsls	r3, r3, #30
 801f934:	f100 8105 	bmi.w	801fb42 <_printf_float+0x462>
 801f938:	68e0      	ldr	r0, [r4, #12]
 801f93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f93c:	4298      	cmp	r0, r3
 801f93e:	bfb8      	it	lt
 801f940:	4618      	movlt	r0, r3
 801f942:	e730      	b.n	801f7a6 <_printf_float+0xc6>
 801f944:	2301      	movs	r3, #1
 801f946:	464a      	mov	r2, r9
 801f948:	4631      	mov	r1, r6
 801f94a:	4628      	mov	r0, r5
 801f94c:	47b8      	blx	r7
 801f94e:	3001      	adds	r0, #1
 801f950:	f43f af27 	beq.w	801f7a2 <_printf_float+0xc2>
 801f954:	f108 0801 	add.w	r8, r8, #1
 801f958:	e7e6      	b.n	801f928 <_printf_float+0x248>
 801f95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	dc39      	bgt.n	801f9d4 <_printf_float+0x2f4>
 801f960:	4a1b      	ldr	r2, [pc, #108]	; (801f9d0 <_printf_float+0x2f0>)
 801f962:	2301      	movs	r3, #1
 801f964:	4631      	mov	r1, r6
 801f966:	4628      	mov	r0, r5
 801f968:	47b8      	blx	r7
 801f96a:	3001      	adds	r0, #1
 801f96c:	f43f af19 	beq.w	801f7a2 <_printf_float+0xc2>
 801f970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f974:	4313      	orrs	r3, r2
 801f976:	d102      	bne.n	801f97e <_printf_float+0x29e>
 801f978:	6823      	ldr	r3, [r4, #0]
 801f97a:	07d9      	lsls	r1, r3, #31
 801f97c:	d5d8      	bpl.n	801f930 <_printf_float+0x250>
 801f97e:	ee18 3a10 	vmov	r3, s16
 801f982:	4652      	mov	r2, sl
 801f984:	4631      	mov	r1, r6
 801f986:	4628      	mov	r0, r5
 801f988:	47b8      	blx	r7
 801f98a:	3001      	adds	r0, #1
 801f98c:	f43f af09 	beq.w	801f7a2 <_printf_float+0xc2>
 801f990:	f04f 0900 	mov.w	r9, #0
 801f994:	f104 0a1a 	add.w	sl, r4, #26
 801f998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f99a:	425b      	negs	r3, r3
 801f99c:	454b      	cmp	r3, r9
 801f99e:	dc01      	bgt.n	801f9a4 <_printf_float+0x2c4>
 801f9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f9a2:	e792      	b.n	801f8ca <_printf_float+0x1ea>
 801f9a4:	2301      	movs	r3, #1
 801f9a6:	4652      	mov	r2, sl
 801f9a8:	4631      	mov	r1, r6
 801f9aa:	4628      	mov	r0, r5
 801f9ac:	47b8      	blx	r7
 801f9ae:	3001      	adds	r0, #1
 801f9b0:	f43f aef7 	beq.w	801f7a2 <_printf_float+0xc2>
 801f9b4:	f109 0901 	add.w	r9, r9, #1
 801f9b8:	e7ee      	b.n	801f998 <_printf_float+0x2b8>
 801f9ba:	bf00      	nop
 801f9bc:	7fefffff 	.word	0x7fefffff
 801f9c0:	08025d4c 	.word	0x08025d4c
 801f9c4:	08025d50 	.word	0x08025d50
 801f9c8:	08025d58 	.word	0x08025d58
 801f9cc:	08025d54 	.word	0x08025d54
 801f9d0:	08025d5c 	.word	0x08025d5c
 801f9d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f9d8:	429a      	cmp	r2, r3
 801f9da:	bfa8      	it	ge
 801f9dc:	461a      	movge	r2, r3
 801f9de:	2a00      	cmp	r2, #0
 801f9e0:	4691      	mov	r9, r2
 801f9e2:	dc37      	bgt.n	801fa54 <_printf_float+0x374>
 801f9e4:	f04f 0b00 	mov.w	fp, #0
 801f9e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f9ec:	f104 021a 	add.w	r2, r4, #26
 801f9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f9f2:	9305      	str	r3, [sp, #20]
 801f9f4:	eba3 0309 	sub.w	r3, r3, r9
 801f9f8:	455b      	cmp	r3, fp
 801f9fa:	dc33      	bgt.n	801fa64 <_printf_float+0x384>
 801f9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fa00:	429a      	cmp	r2, r3
 801fa02:	db3b      	blt.n	801fa7c <_printf_float+0x39c>
 801fa04:	6823      	ldr	r3, [r4, #0]
 801fa06:	07da      	lsls	r2, r3, #31
 801fa08:	d438      	bmi.n	801fa7c <_printf_float+0x39c>
 801fa0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa0c:	9b05      	ldr	r3, [sp, #20]
 801fa0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fa10:	1ad3      	subs	r3, r2, r3
 801fa12:	eba2 0901 	sub.w	r9, r2, r1
 801fa16:	4599      	cmp	r9, r3
 801fa18:	bfa8      	it	ge
 801fa1a:	4699      	movge	r9, r3
 801fa1c:	f1b9 0f00 	cmp.w	r9, #0
 801fa20:	dc35      	bgt.n	801fa8e <_printf_float+0x3ae>
 801fa22:	f04f 0800 	mov.w	r8, #0
 801fa26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fa2a:	f104 0a1a 	add.w	sl, r4, #26
 801fa2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801fa32:	1a9b      	subs	r3, r3, r2
 801fa34:	eba3 0309 	sub.w	r3, r3, r9
 801fa38:	4543      	cmp	r3, r8
 801fa3a:	f77f af79 	ble.w	801f930 <_printf_float+0x250>
 801fa3e:	2301      	movs	r3, #1
 801fa40:	4652      	mov	r2, sl
 801fa42:	4631      	mov	r1, r6
 801fa44:	4628      	mov	r0, r5
 801fa46:	47b8      	blx	r7
 801fa48:	3001      	adds	r0, #1
 801fa4a:	f43f aeaa 	beq.w	801f7a2 <_printf_float+0xc2>
 801fa4e:	f108 0801 	add.w	r8, r8, #1
 801fa52:	e7ec      	b.n	801fa2e <_printf_float+0x34e>
 801fa54:	4613      	mov	r3, r2
 801fa56:	4631      	mov	r1, r6
 801fa58:	4642      	mov	r2, r8
 801fa5a:	4628      	mov	r0, r5
 801fa5c:	47b8      	blx	r7
 801fa5e:	3001      	adds	r0, #1
 801fa60:	d1c0      	bne.n	801f9e4 <_printf_float+0x304>
 801fa62:	e69e      	b.n	801f7a2 <_printf_float+0xc2>
 801fa64:	2301      	movs	r3, #1
 801fa66:	4631      	mov	r1, r6
 801fa68:	4628      	mov	r0, r5
 801fa6a:	9205      	str	r2, [sp, #20]
 801fa6c:	47b8      	blx	r7
 801fa6e:	3001      	adds	r0, #1
 801fa70:	f43f ae97 	beq.w	801f7a2 <_printf_float+0xc2>
 801fa74:	9a05      	ldr	r2, [sp, #20]
 801fa76:	f10b 0b01 	add.w	fp, fp, #1
 801fa7a:	e7b9      	b.n	801f9f0 <_printf_float+0x310>
 801fa7c:	ee18 3a10 	vmov	r3, s16
 801fa80:	4652      	mov	r2, sl
 801fa82:	4631      	mov	r1, r6
 801fa84:	4628      	mov	r0, r5
 801fa86:	47b8      	blx	r7
 801fa88:	3001      	adds	r0, #1
 801fa8a:	d1be      	bne.n	801fa0a <_printf_float+0x32a>
 801fa8c:	e689      	b.n	801f7a2 <_printf_float+0xc2>
 801fa8e:	9a05      	ldr	r2, [sp, #20]
 801fa90:	464b      	mov	r3, r9
 801fa92:	4442      	add	r2, r8
 801fa94:	4631      	mov	r1, r6
 801fa96:	4628      	mov	r0, r5
 801fa98:	47b8      	blx	r7
 801fa9a:	3001      	adds	r0, #1
 801fa9c:	d1c1      	bne.n	801fa22 <_printf_float+0x342>
 801fa9e:	e680      	b.n	801f7a2 <_printf_float+0xc2>
 801faa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801faa2:	2a01      	cmp	r2, #1
 801faa4:	dc01      	bgt.n	801faaa <_printf_float+0x3ca>
 801faa6:	07db      	lsls	r3, r3, #31
 801faa8:	d538      	bpl.n	801fb1c <_printf_float+0x43c>
 801faaa:	2301      	movs	r3, #1
 801faac:	4642      	mov	r2, r8
 801faae:	4631      	mov	r1, r6
 801fab0:	4628      	mov	r0, r5
 801fab2:	47b8      	blx	r7
 801fab4:	3001      	adds	r0, #1
 801fab6:	f43f ae74 	beq.w	801f7a2 <_printf_float+0xc2>
 801faba:	ee18 3a10 	vmov	r3, s16
 801fabe:	4652      	mov	r2, sl
 801fac0:	4631      	mov	r1, r6
 801fac2:	4628      	mov	r0, r5
 801fac4:	47b8      	blx	r7
 801fac6:	3001      	adds	r0, #1
 801fac8:	f43f ae6b 	beq.w	801f7a2 <_printf_float+0xc2>
 801facc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fad0:	2200      	movs	r2, #0
 801fad2:	2300      	movs	r3, #0
 801fad4:	f7e0 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 801fad8:	b9d8      	cbnz	r0, 801fb12 <_printf_float+0x432>
 801fada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fadc:	f108 0201 	add.w	r2, r8, #1
 801fae0:	3b01      	subs	r3, #1
 801fae2:	4631      	mov	r1, r6
 801fae4:	4628      	mov	r0, r5
 801fae6:	47b8      	blx	r7
 801fae8:	3001      	adds	r0, #1
 801faea:	d10e      	bne.n	801fb0a <_printf_float+0x42a>
 801faec:	e659      	b.n	801f7a2 <_printf_float+0xc2>
 801faee:	2301      	movs	r3, #1
 801faf0:	4652      	mov	r2, sl
 801faf2:	4631      	mov	r1, r6
 801faf4:	4628      	mov	r0, r5
 801faf6:	47b8      	blx	r7
 801faf8:	3001      	adds	r0, #1
 801fafa:	f43f ae52 	beq.w	801f7a2 <_printf_float+0xc2>
 801fafe:	f108 0801 	add.w	r8, r8, #1
 801fb02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb04:	3b01      	subs	r3, #1
 801fb06:	4543      	cmp	r3, r8
 801fb08:	dcf1      	bgt.n	801faee <_printf_float+0x40e>
 801fb0a:	464b      	mov	r3, r9
 801fb0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fb10:	e6dc      	b.n	801f8cc <_printf_float+0x1ec>
 801fb12:	f04f 0800 	mov.w	r8, #0
 801fb16:	f104 0a1a 	add.w	sl, r4, #26
 801fb1a:	e7f2      	b.n	801fb02 <_printf_float+0x422>
 801fb1c:	2301      	movs	r3, #1
 801fb1e:	4642      	mov	r2, r8
 801fb20:	e7df      	b.n	801fae2 <_printf_float+0x402>
 801fb22:	2301      	movs	r3, #1
 801fb24:	464a      	mov	r2, r9
 801fb26:	4631      	mov	r1, r6
 801fb28:	4628      	mov	r0, r5
 801fb2a:	47b8      	blx	r7
 801fb2c:	3001      	adds	r0, #1
 801fb2e:	f43f ae38 	beq.w	801f7a2 <_printf_float+0xc2>
 801fb32:	f108 0801 	add.w	r8, r8, #1
 801fb36:	68e3      	ldr	r3, [r4, #12]
 801fb38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fb3a:	1a5b      	subs	r3, r3, r1
 801fb3c:	4543      	cmp	r3, r8
 801fb3e:	dcf0      	bgt.n	801fb22 <_printf_float+0x442>
 801fb40:	e6fa      	b.n	801f938 <_printf_float+0x258>
 801fb42:	f04f 0800 	mov.w	r8, #0
 801fb46:	f104 0919 	add.w	r9, r4, #25
 801fb4a:	e7f4      	b.n	801fb36 <_printf_float+0x456>

0801fb4c <_printf_common>:
 801fb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb50:	4616      	mov	r6, r2
 801fb52:	4699      	mov	r9, r3
 801fb54:	688a      	ldr	r2, [r1, #8]
 801fb56:	690b      	ldr	r3, [r1, #16]
 801fb58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fb5c:	4293      	cmp	r3, r2
 801fb5e:	bfb8      	it	lt
 801fb60:	4613      	movlt	r3, r2
 801fb62:	6033      	str	r3, [r6, #0]
 801fb64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fb68:	4607      	mov	r7, r0
 801fb6a:	460c      	mov	r4, r1
 801fb6c:	b10a      	cbz	r2, 801fb72 <_printf_common+0x26>
 801fb6e:	3301      	adds	r3, #1
 801fb70:	6033      	str	r3, [r6, #0]
 801fb72:	6823      	ldr	r3, [r4, #0]
 801fb74:	0699      	lsls	r1, r3, #26
 801fb76:	bf42      	ittt	mi
 801fb78:	6833      	ldrmi	r3, [r6, #0]
 801fb7a:	3302      	addmi	r3, #2
 801fb7c:	6033      	strmi	r3, [r6, #0]
 801fb7e:	6825      	ldr	r5, [r4, #0]
 801fb80:	f015 0506 	ands.w	r5, r5, #6
 801fb84:	d106      	bne.n	801fb94 <_printf_common+0x48>
 801fb86:	f104 0a19 	add.w	sl, r4, #25
 801fb8a:	68e3      	ldr	r3, [r4, #12]
 801fb8c:	6832      	ldr	r2, [r6, #0]
 801fb8e:	1a9b      	subs	r3, r3, r2
 801fb90:	42ab      	cmp	r3, r5
 801fb92:	dc26      	bgt.n	801fbe2 <_printf_common+0x96>
 801fb94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fb98:	1e13      	subs	r3, r2, #0
 801fb9a:	6822      	ldr	r2, [r4, #0]
 801fb9c:	bf18      	it	ne
 801fb9e:	2301      	movne	r3, #1
 801fba0:	0692      	lsls	r2, r2, #26
 801fba2:	d42b      	bmi.n	801fbfc <_printf_common+0xb0>
 801fba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fba8:	4649      	mov	r1, r9
 801fbaa:	4638      	mov	r0, r7
 801fbac:	47c0      	blx	r8
 801fbae:	3001      	adds	r0, #1
 801fbb0:	d01e      	beq.n	801fbf0 <_printf_common+0xa4>
 801fbb2:	6823      	ldr	r3, [r4, #0]
 801fbb4:	68e5      	ldr	r5, [r4, #12]
 801fbb6:	6832      	ldr	r2, [r6, #0]
 801fbb8:	f003 0306 	and.w	r3, r3, #6
 801fbbc:	2b04      	cmp	r3, #4
 801fbbe:	bf08      	it	eq
 801fbc0:	1aad      	subeq	r5, r5, r2
 801fbc2:	68a3      	ldr	r3, [r4, #8]
 801fbc4:	6922      	ldr	r2, [r4, #16]
 801fbc6:	bf0c      	ite	eq
 801fbc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fbcc:	2500      	movne	r5, #0
 801fbce:	4293      	cmp	r3, r2
 801fbd0:	bfc4      	itt	gt
 801fbd2:	1a9b      	subgt	r3, r3, r2
 801fbd4:	18ed      	addgt	r5, r5, r3
 801fbd6:	2600      	movs	r6, #0
 801fbd8:	341a      	adds	r4, #26
 801fbda:	42b5      	cmp	r5, r6
 801fbdc:	d11a      	bne.n	801fc14 <_printf_common+0xc8>
 801fbde:	2000      	movs	r0, #0
 801fbe0:	e008      	b.n	801fbf4 <_printf_common+0xa8>
 801fbe2:	2301      	movs	r3, #1
 801fbe4:	4652      	mov	r2, sl
 801fbe6:	4649      	mov	r1, r9
 801fbe8:	4638      	mov	r0, r7
 801fbea:	47c0      	blx	r8
 801fbec:	3001      	adds	r0, #1
 801fbee:	d103      	bne.n	801fbf8 <_printf_common+0xac>
 801fbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbf8:	3501      	adds	r5, #1
 801fbfa:	e7c6      	b.n	801fb8a <_printf_common+0x3e>
 801fbfc:	18e1      	adds	r1, r4, r3
 801fbfe:	1c5a      	adds	r2, r3, #1
 801fc00:	2030      	movs	r0, #48	; 0x30
 801fc02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fc06:	4422      	add	r2, r4
 801fc08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fc0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fc10:	3302      	adds	r3, #2
 801fc12:	e7c7      	b.n	801fba4 <_printf_common+0x58>
 801fc14:	2301      	movs	r3, #1
 801fc16:	4622      	mov	r2, r4
 801fc18:	4649      	mov	r1, r9
 801fc1a:	4638      	mov	r0, r7
 801fc1c:	47c0      	blx	r8
 801fc1e:	3001      	adds	r0, #1
 801fc20:	d0e6      	beq.n	801fbf0 <_printf_common+0xa4>
 801fc22:	3601      	adds	r6, #1
 801fc24:	e7d9      	b.n	801fbda <_printf_common+0x8e>
	...

0801fc28 <_printf_i>:
 801fc28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc2c:	460c      	mov	r4, r1
 801fc2e:	4691      	mov	r9, r2
 801fc30:	7e27      	ldrb	r7, [r4, #24]
 801fc32:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fc34:	2f78      	cmp	r7, #120	; 0x78
 801fc36:	4680      	mov	r8, r0
 801fc38:	469a      	mov	sl, r3
 801fc3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fc3e:	d807      	bhi.n	801fc50 <_printf_i+0x28>
 801fc40:	2f62      	cmp	r7, #98	; 0x62
 801fc42:	d80a      	bhi.n	801fc5a <_printf_i+0x32>
 801fc44:	2f00      	cmp	r7, #0
 801fc46:	f000 80d8 	beq.w	801fdfa <_printf_i+0x1d2>
 801fc4a:	2f58      	cmp	r7, #88	; 0x58
 801fc4c:	f000 80a3 	beq.w	801fd96 <_printf_i+0x16e>
 801fc50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fc54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fc58:	e03a      	b.n	801fcd0 <_printf_i+0xa8>
 801fc5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fc5e:	2b15      	cmp	r3, #21
 801fc60:	d8f6      	bhi.n	801fc50 <_printf_i+0x28>
 801fc62:	a001      	add	r0, pc, #4	; (adr r0, 801fc68 <_printf_i+0x40>)
 801fc64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fc68:	0801fcc1 	.word	0x0801fcc1
 801fc6c:	0801fcd5 	.word	0x0801fcd5
 801fc70:	0801fc51 	.word	0x0801fc51
 801fc74:	0801fc51 	.word	0x0801fc51
 801fc78:	0801fc51 	.word	0x0801fc51
 801fc7c:	0801fc51 	.word	0x0801fc51
 801fc80:	0801fcd5 	.word	0x0801fcd5
 801fc84:	0801fc51 	.word	0x0801fc51
 801fc88:	0801fc51 	.word	0x0801fc51
 801fc8c:	0801fc51 	.word	0x0801fc51
 801fc90:	0801fc51 	.word	0x0801fc51
 801fc94:	0801fde1 	.word	0x0801fde1
 801fc98:	0801fd05 	.word	0x0801fd05
 801fc9c:	0801fdc3 	.word	0x0801fdc3
 801fca0:	0801fc51 	.word	0x0801fc51
 801fca4:	0801fc51 	.word	0x0801fc51
 801fca8:	0801fe03 	.word	0x0801fe03
 801fcac:	0801fc51 	.word	0x0801fc51
 801fcb0:	0801fd05 	.word	0x0801fd05
 801fcb4:	0801fc51 	.word	0x0801fc51
 801fcb8:	0801fc51 	.word	0x0801fc51
 801fcbc:	0801fdcb 	.word	0x0801fdcb
 801fcc0:	680b      	ldr	r3, [r1, #0]
 801fcc2:	1d1a      	adds	r2, r3, #4
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	600a      	str	r2, [r1, #0]
 801fcc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fcd0:	2301      	movs	r3, #1
 801fcd2:	e0a3      	b.n	801fe1c <_printf_i+0x1f4>
 801fcd4:	6825      	ldr	r5, [r4, #0]
 801fcd6:	6808      	ldr	r0, [r1, #0]
 801fcd8:	062e      	lsls	r6, r5, #24
 801fcda:	f100 0304 	add.w	r3, r0, #4
 801fcde:	d50a      	bpl.n	801fcf6 <_printf_i+0xce>
 801fce0:	6805      	ldr	r5, [r0, #0]
 801fce2:	600b      	str	r3, [r1, #0]
 801fce4:	2d00      	cmp	r5, #0
 801fce6:	da03      	bge.n	801fcf0 <_printf_i+0xc8>
 801fce8:	232d      	movs	r3, #45	; 0x2d
 801fcea:	426d      	negs	r5, r5
 801fcec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fcf0:	485e      	ldr	r0, [pc, #376]	; (801fe6c <_printf_i+0x244>)
 801fcf2:	230a      	movs	r3, #10
 801fcf4:	e019      	b.n	801fd2a <_printf_i+0x102>
 801fcf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fcfa:	6805      	ldr	r5, [r0, #0]
 801fcfc:	600b      	str	r3, [r1, #0]
 801fcfe:	bf18      	it	ne
 801fd00:	b22d      	sxthne	r5, r5
 801fd02:	e7ef      	b.n	801fce4 <_printf_i+0xbc>
 801fd04:	680b      	ldr	r3, [r1, #0]
 801fd06:	6825      	ldr	r5, [r4, #0]
 801fd08:	1d18      	adds	r0, r3, #4
 801fd0a:	6008      	str	r0, [r1, #0]
 801fd0c:	0628      	lsls	r0, r5, #24
 801fd0e:	d501      	bpl.n	801fd14 <_printf_i+0xec>
 801fd10:	681d      	ldr	r5, [r3, #0]
 801fd12:	e002      	b.n	801fd1a <_printf_i+0xf2>
 801fd14:	0669      	lsls	r1, r5, #25
 801fd16:	d5fb      	bpl.n	801fd10 <_printf_i+0xe8>
 801fd18:	881d      	ldrh	r5, [r3, #0]
 801fd1a:	4854      	ldr	r0, [pc, #336]	; (801fe6c <_printf_i+0x244>)
 801fd1c:	2f6f      	cmp	r7, #111	; 0x6f
 801fd1e:	bf0c      	ite	eq
 801fd20:	2308      	moveq	r3, #8
 801fd22:	230a      	movne	r3, #10
 801fd24:	2100      	movs	r1, #0
 801fd26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fd2a:	6866      	ldr	r6, [r4, #4]
 801fd2c:	60a6      	str	r6, [r4, #8]
 801fd2e:	2e00      	cmp	r6, #0
 801fd30:	bfa2      	ittt	ge
 801fd32:	6821      	ldrge	r1, [r4, #0]
 801fd34:	f021 0104 	bicge.w	r1, r1, #4
 801fd38:	6021      	strge	r1, [r4, #0]
 801fd3a:	b90d      	cbnz	r5, 801fd40 <_printf_i+0x118>
 801fd3c:	2e00      	cmp	r6, #0
 801fd3e:	d04d      	beq.n	801fddc <_printf_i+0x1b4>
 801fd40:	4616      	mov	r6, r2
 801fd42:	fbb5 f1f3 	udiv	r1, r5, r3
 801fd46:	fb03 5711 	mls	r7, r3, r1, r5
 801fd4a:	5dc7      	ldrb	r7, [r0, r7]
 801fd4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fd50:	462f      	mov	r7, r5
 801fd52:	42bb      	cmp	r3, r7
 801fd54:	460d      	mov	r5, r1
 801fd56:	d9f4      	bls.n	801fd42 <_printf_i+0x11a>
 801fd58:	2b08      	cmp	r3, #8
 801fd5a:	d10b      	bne.n	801fd74 <_printf_i+0x14c>
 801fd5c:	6823      	ldr	r3, [r4, #0]
 801fd5e:	07df      	lsls	r7, r3, #31
 801fd60:	d508      	bpl.n	801fd74 <_printf_i+0x14c>
 801fd62:	6923      	ldr	r3, [r4, #16]
 801fd64:	6861      	ldr	r1, [r4, #4]
 801fd66:	4299      	cmp	r1, r3
 801fd68:	bfde      	ittt	le
 801fd6a:	2330      	movle	r3, #48	; 0x30
 801fd6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fd70:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801fd74:	1b92      	subs	r2, r2, r6
 801fd76:	6122      	str	r2, [r4, #16]
 801fd78:	f8cd a000 	str.w	sl, [sp]
 801fd7c:	464b      	mov	r3, r9
 801fd7e:	aa03      	add	r2, sp, #12
 801fd80:	4621      	mov	r1, r4
 801fd82:	4640      	mov	r0, r8
 801fd84:	f7ff fee2 	bl	801fb4c <_printf_common>
 801fd88:	3001      	adds	r0, #1
 801fd8a:	d14c      	bne.n	801fe26 <_printf_i+0x1fe>
 801fd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fd90:	b004      	add	sp, #16
 801fd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd96:	4835      	ldr	r0, [pc, #212]	; (801fe6c <_printf_i+0x244>)
 801fd98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fd9c:	6823      	ldr	r3, [r4, #0]
 801fd9e:	680e      	ldr	r6, [r1, #0]
 801fda0:	061f      	lsls	r7, r3, #24
 801fda2:	f856 5b04 	ldr.w	r5, [r6], #4
 801fda6:	600e      	str	r6, [r1, #0]
 801fda8:	d514      	bpl.n	801fdd4 <_printf_i+0x1ac>
 801fdaa:	07d9      	lsls	r1, r3, #31
 801fdac:	bf44      	itt	mi
 801fdae:	f043 0320 	orrmi.w	r3, r3, #32
 801fdb2:	6023      	strmi	r3, [r4, #0]
 801fdb4:	b91d      	cbnz	r5, 801fdbe <_printf_i+0x196>
 801fdb6:	6823      	ldr	r3, [r4, #0]
 801fdb8:	f023 0320 	bic.w	r3, r3, #32
 801fdbc:	6023      	str	r3, [r4, #0]
 801fdbe:	2310      	movs	r3, #16
 801fdc0:	e7b0      	b.n	801fd24 <_printf_i+0xfc>
 801fdc2:	6823      	ldr	r3, [r4, #0]
 801fdc4:	f043 0320 	orr.w	r3, r3, #32
 801fdc8:	6023      	str	r3, [r4, #0]
 801fdca:	2378      	movs	r3, #120	; 0x78
 801fdcc:	4828      	ldr	r0, [pc, #160]	; (801fe70 <_printf_i+0x248>)
 801fdce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fdd2:	e7e3      	b.n	801fd9c <_printf_i+0x174>
 801fdd4:	065e      	lsls	r6, r3, #25
 801fdd6:	bf48      	it	mi
 801fdd8:	b2ad      	uxthmi	r5, r5
 801fdda:	e7e6      	b.n	801fdaa <_printf_i+0x182>
 801fddc:	4616      	mov	r6, r2
 801fdde:	e7bb      	b.n	801fd58 <_printf_i+0x130>
 801fde0:	680b      	ldr	r3, [r1, #0]
 801fde2:	6826      	ldr	r6, [r4, #0]
 801fde4:	6960      	ldr	r0, [r4, #20]
 801fde6:	1d1d      	adds	r5, r3, #4
 801fde8:	600d      	str	r5, [r1, #0]
 801fdea:	0635      	lsls	r5, r6, #24
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	d501      	bpl.n	801fdf4 <_printf_i+0x1cc>
 801fdf0:	6018      	str	r0, [r3, #0]
 801fdf2:	e002      	b.n	801fdfa <_printf_i+0x1d2>
 801fdf4:	0671      	lsls	r1, r6, #25
 801fdf6:	d5fb      	bpl.n	801fdf0 <_printf_i+0x1c8>
 801fdf8:	8018      	strh	r0, [r3, #0]
 801fdfa:	2300      	movs	r3, #0
 801fdfc:	6123      	str	r3, [r4, #16]
 801fdfe:	4616      	mov	r6, r2
 801fe00:	e7ba      	b.n	801fd78 <_printf_i+0x150>
 801fe02:	680b      	ldr	r3, [r1, #0]
 801fe04:	1d1a      	adds	r2, r3, #4
 801fe06:	600a      	str	r2, [r1, #0]
 801fe08:	681e      	ldr	r6, [r3, #0]
 801fe0a:	6862      	ldr	r2, [r4, #4]
 801fe0c:	2100      	movs	r1, #0
 801fe0e:	4630      	mov	r0, r6
 801fe10:	f7e0 f9e6 	bl	80001e0 <memchr>
 801fe14:	b108      	cbz	r0, 801fe1a <_printf_i+0x1f2>
 801fe16:	1b80      	subs	r0, r0, r6
 801fe18:	6060      	str	r0, [r4, #4]
 801fe1a:	6863      	ldr	r3, [r4, #4]
 801fe1c:	6123      	str	r3, [r4, #16]
 801fe1e:	2300      	movs	r3, #0
 801fe20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fe24:	e7a8      	b.n	801fd78 <_printf_i+0x150>
 801fe26:	6923      	ldr	r3, [r4, #16]
 801fe28:	4632      	mov	r2, r6
 801fe2a:	4649      	mov	r1, r9
 801fe2c:	4640      	mov	r0, r8
 801fe2e:	47d0      	blx	sl
 801fe30:	3001      	adds	r0, #1
 801fe32:	d0ab      	beq.n	801fd8c <_printf_i+0x164>
 801fe34:	6823      	ldr	r3, [r4, #0]
 801fe36:	079b      	lsls	r3, r3, #30
 801fe38:	d413      	bmi.n	801fe62 <_printf_i+0x23a>
 801fe3a:	68e0      	ldr	r0, [r4, #12]
 801fe3c:	9b03      	ldr	r3, [sp, #12]
 801fe3e:	4298      	cmp	r0, r3
 801fe40:	bfb8      	it	lt
 801fe42:	4618      	movlt	r0, r3
 801fe44:	e7a4      	b.n	801fd90 <_printf_i+0x168>
 801fe46:	2301      	movs	r3, #1
 801fe48:	4632      	mov	r2, r6
 801fe4a:	4649      	mov	r1, r9
 801fe4c:	4640      	mov	r0, r8
 801fe4e:	47d0      	blx	sl
 801fe50:	3001      	adds	r0, #1
 801fe52:	d09b      	beq.n	801fd8c <_printf_i+0x164>
 801fe54:	3501      	adds	r5, #1
 801fe56:	68e3      	ldr	r3, [r4, #12]
 801fe58:	9903      	ldr	r1, [sp, #12]
 801fe5a:	1a5b      	subs	r3, r3, r1
 801fe5c:	42ab      	cmp	r3, r5
 801fe5e:	dcf2      	bgt.n	801fe46 <_printf_i+0x21e>
 801fe60:	e7eb      	b.n	801fe3a <_printf_i+0x212>
 801fe62:	2500      	movs	r5, #0
 801fe64:	f104 0619 	add.w	r6, r4, #25
 801fe68:	e7f5      	b.n	801fe56 <_printf_i+0x22e>
 801fe6a:	bf00      	nop
 801fe6c:	08025d5e 	.word	0x08025d5e
 801fe70:	08025d6f 	.word	0x08025d6f

0801fe74 <_scanf_float>:
 801fe74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe78:	b087      	sub	sp, #28
 801fe7a:	4617      	mov	r7, r2
 801fe7c:	9303      	str	r3, [sp, #12]
 801fe7e:	688b      	ldr	r3, [r1, #8]
 801fe80:	1e5a      	subs	r2, r3, #1
 801fe82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fe86:	bf83      	ittte	hi
 801fe88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fe8c:	195b      	addhi	r3, r3, r5
 801fe8e:	9302      	strhi	r3, [sp, #8]
 801fe90:	2300      	movls	r3, #0
 801fe92:	bf86      	itte	hi
 801fe94:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fe98:	608b      	strhi	r3, [r1, #8]
 801fe9a:	9302      	strls	r3, [sp, #8]
 801fe9c:	680b      	ldr	r3, [r1, #0]
 801fe9e:	468b      	mov	fp, r1
 801fea0:	2500      	movs	r5, #0
 801fea2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801fea6:	f84b 3b1c 	str.w	r3, [fp], #28
 801feaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801feae:	4680      	mov	r8, r0
 801feb0:	460c      	mov	r4, r1
 801feb2:	465e      	mov	r6, fp
 801feb4:	46aa      	mov	sl, r5
 801feb6:	46a9      	mov	r9, r5
 801feb8:	9501      	str	r5, [sp, #4]
 801feba:	68a2      	ldr	r2, [r4, #8]
 801febc:	b152      	cbz	r2, 801fed4 <_scanf_float+0x60>
 801febe:	683b      	ldr	r3, [r7, #0]
 801fec0:	781b      	ldrb	r3, [r3, #0]
 801fec2:	2b4e      	cmp	r3, #78	; 0x4e
 801fec4:	d864      	bhi.n	801ff90 <_scanf_float+0x11c>
 801fec6:	2b40      	cmp	r3, #64	; 0x40
 801fec8:	d83c      	bhi.n	801ff44 <_scanf_float+0xd0>
 801feca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801fece:	b2c8      	uxtb	r0, r1
 801fed0:	280e      	cmp	r0, #14
 801fed2:	d93a      	bls.n	801ff4a <_scanf_float+0xd6>
 801fed4:	f1b9 0f00 	cmp.w	r9, #0
 801fed8:	d003      	beq.n	801fee2 <_scanf_float+0x6e>
 801feda:	6823      	ldr	r3, [r4, #0]
 801fedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fee0:	6023      	str	r3, [r4, #0]
 801fee2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fee6:	f1ba 0f01 	cmp.w	sl, #1
 801feea:	f200 8113 	bhi.w	8020114 <_scanf_float+0x2a0>
 801feee:	455e      	cmp	r6, fp
 801fef0:	f200 8105 	bhi.w	80200fe <_scanf_float+0x28a>
 801fef4:	2501      	movs	r5, #1
 801fef6:	4628      	mov	r0, r5
 801fef8:	b007      	add	sp, #28
 801fefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fefe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ff02:	2a0d      	cmp	r2, #13
 801ff04:	d8e6      	bhi.n	801fed4 <_scanf_float+0x60>
 801ff06:	a101      	add	r1, pc, #4	; (adr r1, 801ff0c <_scanf_float+0x98>)
 801ff08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ff0c:	0802004b 	.word	0x0802004b
 801ff10:	0801fed5 	.word	0x0801fed5
 801ff14:	0801fed5 	.word	0x0801fed5
 801ff18:	0801fed5 	.word	0x0801fed5
 801ff1c:	080200ab 	.word	0x080200ab
 801ff20:	08020083 	.word	0x08020083
 801ff24:	0801fed5 	.word	0x0801fed5
 801ff28:	0801fed5 	.word	0x0801fed5
 801ff2c:	08020059 	.word	0x08020059
 801ff30:	0801fed5 	.word	0x0801fed5
 801ff34:	0801fed5 	.word	0x0801fed5
 801ff38:	0801fed5 	.word	0x0801fed5
 801ff3c:	0801fed5 	.word	0x0801fed5
 801ff40:	08020011 	.word	0x08020011
 801ff44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ff48:	e7db      	b.n	801ff02 <_scanf_float+0x8e>
 801ff4a:	290e      	cmp	r1, #14
 801ff4c:	d8c2      	bhi.n	801fed4 <_scanf_float+0x60>
 801ff4e:	a001      	add	r0, pc, #4	; (adr r0, 801ff54 <_scanf_float+0xe0>)
 801ff50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ff54:	08020003 	.word	0x08020003
 801ff58:	0801fed5 	.word	0x0801fed5
 801ff5c:	08020003 	.word	0x08020003
 801ff60:	08020097 	.word	0x08020097
 801ff64:	0801fed5 	.word	0x0801fed5
 801ff68:	0801ffb1 	.word	0x0801ffb1
 801ff6c:	0801ffed 	.word	0x0801ffed
 801ff70:	0801ffed 	.word	0x0801ffed
 801ff74:	0801ffed 	.word	0x0801ffed
 801ff78:	0801ffed 	.word	0x0801ffed
 801ff7c:	0801ffed 	.word	0x0801ffed
 801ff80:	0801ffed 	.word	0x0801ffed
 801ff84:	0801ffed 	.word	0x0801ffed
 801ff88:	0801ffed 	.word	0x0801ffed
 801ff8c:	0801ffed 	.word	0x0801ffed
 801ff90:	2b6e      	cmp	r3, #110	; 0x6e
 801ff92:	d809      	bhi.n	801ffa8 <_scanf_float+0x134>
 801ff94:	2b60      	cmp	r3, #96	; 0x60
 801ff96:	d8b2      	bhi.n	801fefe <_scanf_float+0x8a>
 801ff98:	2b54      	cmp	r3, #84	; 0x54
 801ff9a:	d077      	beq.n	802008c <_scanf_float+0x218>
 801ff9c:	2b59      	cmp	r3, #89	; 0x59
 801ff9e:	d199      	bne.n	801fed4 <_scanf_float+0x60>
 801ffa0:	2d07      	cmp	r5, #7
 801ffa2:	d197      	bne.n	801fed4 <_scanf_float+0x60>
 801ffa4:	2508      	movs	r5, #8
 801ffa6:	e029      	b.n	801fffc <_scanf_float+0x188>
 801ffa8:	2b74      	cmp	r3, #116	; 0x74
 801ffaa:	d06f      	beq.n	802008c <_scanf_float+0x218>
 801ffac:	2b79      	cmp	r3, #121	; 0x79
 801ffae:	e7f6      	b.n	801ff9e <_scanf_float+0x12a>
 801ffb0:	6821      	ldr	r1, [r4, #0]
 801ffb2:	05c8      	lsls	r0, r1, #23
 801ffb4:	d51a      	bpl.n	801ffec <_scanf_float+0x178>
 801ffb6:	9b02      	ldr	r3, [sp, #8]
 801ffb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ffbc:	6021      	str	r1, [r4, #0]
 801ffbe:	f109 0901 	add.w	r9, r9, #1
 801ffc2:	b11b      	cbz	r3, 801ffcc <_scanf_float+0x158>
 801ffc4:	3b01      	subs	r3, #1
 801ffc6:	3201      	adds	r2, #1
 801ffc8:	9302      	str	r3, [sp, #8]
 801ffca:	60a2      	str	r2, [r4, #8]
 801ffcc:	68a3      	ldr	r3, [r4, #8]
 801ffce:	3b01      	subs	r3, #1
 801ffd0:	60a3      	str	r3, [r4, #8]
 801ffd2:	6923      	ldr	r3, [r4, #16]
 801ffd4:	3301      	adds	r3, #1
 801ffd6:	6123      	str	r3, [r4, #16]
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	3b01      	subs	r3, #1
 801ffdc:	2b00      	cmp	r3, #0
 801ffde:	607b      	str	r3, [r7, #4]
 801ffe0:	f340 8084 	ble.w	80200ec <_scanf_float+0x278>
 801ffe4:	683b      	ldr	r3, [r7, #0]
 801ffe6:	3301      	adds	r3, #1
 801ffe8:	603b      	str	r3, [r7, #0]
 801ffea:	e766      	b.n	801feba <_scanf_float+0x46>
 801ffec:	eb1a 0f05 	cmn.w	sl, r5
 801fff0:	f47f af70 	bne.w	801fed4 <_scanf_float+0x60>
 801fff4:	6822      	ldr	r2, [r4, #0]
 801fff6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801fffa:	6022      	str	r2, [r4, #0]
 801fffc:	f806 3b01 	strb.w	r3, [r6], #1
 8020000:	e7e4      	b.n	801ffcc <_scanf_float+0x158>
 8020002:	6822      	ldr	r2, [r4, #0]
 8020004:	0610      	lsls	r0, r2, #24
 8020006:	f57f af65 	bpl.w	801fed4 <_scanf_float+0x60>
 802000a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802000e:	e7f4      	b.n	801fffa <_scanf_float+0x186>
 8020010:	f1ba 0f00 	cmp.w	sl, #0
 8020014:	d10e      	bne.n	8020034 <_scanf_float+0x1c0>
 8020016:	f1b9 0f00 	cmp.w	r9, #0
 802001a:	d10e      	bne.n	802003a <_scanf_float+0x1c6>
 802001c:	6822      	ldr	r2, [r4, #0]
 802001e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020022:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020026:	d108      	bne.n	802003a <_scanf_float+0x1c6>
 8020028:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802002c:	6022      	str	r2, [r4, #0]
 802002e:	f04f 0a01 	mov.w	sl, #1
 8020032:	e7e3      	b.n	801fffc <_scanf_float+0x188>
 8020034:	f1ba 0f02 	cmp.w	sl, #2
 8020038:	d055      	beq.n	80200e6 <_scanf_float+0x272>
 802003a:	2d01      	cmp	r5, #1
 802003c:	d002      	beq.n	8020044 <_scanf_float+0x1d0>
 802003e:	2d04      	cmp	r5, #4
 8020040:	f47f af48 	bne.w	801fed4 <_scanf_float+0x60>
 8020044:	3501      	adds	r5, #1
 8020046:	b2ed      	uxtb	r5, r5
 8020048:	e7d8      	b.n	801fffc <_scanf_float+0x188>
 802004a:	f1ba 0f01 	cmp.w	sl, #1
 802004e:	f47f af41 	bne.w	801fed4 <_scanf_float+0x60>
 8020052:	f04f 0a02 	mov.w	sl, #2
 8020056:	e7d1      	b.n	801fffc <_scanf_float+0x188>
 8020058:	b97d      	cbnz	r5, 802007a <_scanf_float+0x206>
 802005a:	f1b9 0f00 	cmp.w	r9, #0
 802005e:	f47f af3c 	bne.w	801feda <_scanf_float+0x66>
 8020062:	6822      	ldr	r2, [r4, #0]
 8020064:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8020068:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802006c:	f47f af39 	bne.w	801fee2 <_scanf_float+0x6e>
 8020070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020074:	6022      	str	r2, [r4, #0]
 8020076:	2501      	movs	r5, #1
 8020078:	e7c0      	b.n	801fffc <_scanf_float+0x188>
 802007a:	2d03      	cmp	r5, #3
 802007c:	d0e2      	beq.n	8020044 <_scanf_float+0x1d0>
 802007e:	2d05      	cmp	r5, #5
 8020080:	e7de      	b.n	8020040 <_scanf_float+0x1cc>
 8020082:	2d02      	cmp	r5, #2
 8020084:	f47f af26 	bne.w	801fed4 <_scanf_float+0x60>
 8020088:	2503      	movs	r5, #3
 802008a:	e7b7      	b.n	801fffc <_scanf_float+0x188>
 802008c:	2d06      	cmp	r5, #6
 802008e:	f47f af21 	bne.w	801fed4 <_scanf_float+0x60>
 8020092:	2507      	movs	r5, #7
 8020094:	e7b2      	b.n	801fffc <_scanf_float+0x188>
 8020096:	6822      	ldr	r2, [r4, #0]
 8020098:	0591      	lsls	r1, r2, #22
 802009a:	f57f af1b 	bpl.w	801fed4 <_scanf_float+0x60>
 802009e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80200a2:	6022      	str	r2, [r4, #0]
 80200a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80200a8:	e7a8      	b.n	801fffc <_scanf_float+0x188>
 80200aa:	6822      	ldr	r2, [r4, #0]
 80200ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80200b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80200b4:	d006      	beq.n	80200c4 <_scanf_float+0x250>
 80200b6:	0550      	lsls	r0, r2, #21
 80200b8:	f57f af0c 	bpl.w	801fed4 <_scanf_float+0x60>
 80200bc:	f1b9 0f00 	cmp.w	r9, #0
 80200c0:	f43f af0f 	beq.w	801fee2 <_scanf_float+0x6e>
 80200c4:	0591      	lsls	r1, r2, #22
 80200c6:	bf58      	it	pl
 80200c8:	9901      	ldrpl	r1, [sp, #4]
 80200ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80200ce:	bf58      	it	pl
 80200d0:	eba9 0101 	subpl.w	r1, r9, r1
 80200d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80200d8:	bf58      	it	pl
 80200da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80200de:	6022      	str	r2, [r4, #0]
 80200e0:	f04f 0900 	mov.w	r9, #0
 80200e4:	e78a      	b.n	801fffc <_scanf_float+0x188>
 80200e6:	f04f 0a03 	mov.w	sl, #3
 80200ea:	e787      	b.n	801fffc <_scanf_float+0x188>
 80200ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80200f0:	4639      	mov	r1, r7
 80200f2:	4640      	mov	r0, r8
 80200f4:	4798      	blx	r3
 80200f6:	2800      	cmp	r0, #0
 80200f8:	f43f aedf 	beq.w	801feba <_scanf_float+0x46>
 80200fc:	e6ea      	b.n	801fed4 <_scanf_float+0x60>
 80200fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020106:	463a      	mov	r2, r7
 8020108:	4640      	mov	r0, r8
 802010a:	4798      	blx	r3
 802010c:	6923      	ldr	r3, [r4, #16]
 802010e:	3b01      	subs	r3, #1
 8020110:	6123      	str	r3, [r4, #16]
 8020112:	e6ec      	b.n	801feee <_scanf_float+0x7a>
 8020114:	1e6b      	subs	r3, r5, #1
 8020116:	2b06      	cmp	r3, #6
 8020118:	d825      	bhi.n	8020166 <_scanf_float+0x2f2>
 802011a:	2d02      	cmp	r5, #2
 802011c:	d836      	bhi.n	802018c <_scanf_float+0x318>
 802011e:	455e      	cmp	r6, fp
 8020120:	f67f aee8 	bls.w	801fef4 <_scanf_float+0x80>
 8020124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020128:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802012c:	463a      	mov	r2, r7
 802012e:	4640      	mov	r0, r8
 8020130:	4798      	blx	r3
 8020132:	6923      	ldr	r3, [r4, #16]
 8020134:	3b01      	subs	r3, #1
 8020136:	6123      	str	r3, [r4, #16]
 8020138:	e7f1      	b.n	802011e <_scanf_float+0x2aa>
 802013a:	9802      	ldr	r0, [sp, #8]
 802013c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020140:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020144:	9002      	str	r0, [sp, #8]
 8020146:	463a      	mov	r2, r7
 8020148:	4640      	mov	r0, r8
 802014a:	4798      	blx	r3
 802014c:	6923      	ldr	r3, [r4, #16]
 802014e:	3b01      	subs	r3, #1
 8020150:	6123      	str	r3, [r4, #16]
 8020152:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020156:	fa5f fa8a 	uxtb.w	sl, sl
 802015a:	f1ba 0f02 	cmp.w	sl, #2
 802015e:	d1ec      	bne.n	802013a <_scanf_float+0x2c6>
 8020160:	3d03      	subs	r5, #3
 8020162:	b2ed      	uxtb	r5, r5
 8020164:	1b76      	subs	r6, r6, r5
 8020166:	6823      	ldr	r3, [r4, #0]
 8020168:	05da      	lsls	r2, r3, #23
 802016a:	d52f      	bpl.n	80201cc <_scanf_float+0x358>
 802016c:	055b      	lsls	r3, r3, #21
 802016e:	d510      	bpl.n	8020192 <_scanf_float+0x31e>
 8020170:	455e      	cmp	r6, fp
 8020172:	f67f aebf 	bls.w	801fef4 <_scanf_float+0x80>
 8020176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802017a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802017e:	463a      	mov	r2, r7
 8020180:	4640      	mov	r0, r8
 8020182:	4798      	blx	r3
 8020184:	6923      	ldr	r3, [r4, #16]
 8020186:	3b01      	subs	r3, #1
 8020188:	6123      	str	r3, [r4, #16]
 802018a:	e7f1      	b.n	8020170 <_scanf_float+0x2fc>
 802018c:	46aa      	mov	sl, r5
 802018e:	9602      	str	r6, [sp, #8]
 8020190:	e7df      	b.n	8020152 <_scanf_float+0x2de>
 8020192:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8020196:	6923      	ldr	r3, [r4, #16]
 8020198:	2965      	cmp	r1, #101	; 0x65
 802019a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802019e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80201a2:	6123      	str	r3, [r4, #16]
 80201a4:	d00c      	beq.n	80201c0 <_scanf_float+0x34c>
 80201a6:	2945      	cmp	r1, #69	; 0x45
 80201a8:	d00a      	beq.n	80201c0 <_scanf_float+0x34c>
 80201aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80201ae:	463a      	mov	r2, r7
 80201b0:	4640      	mov	r0, r8
 80201b2:	4798      	blx	r3
 80201b4:	6923      	ldr	r3, [r4, #16]
 80201b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80201ba:	3b01      	subs	r3, #1
 80201bc:	1eb5      	subs	r5, r6, #2
 80201be:	6123      	str	r3, [r4, #16]
 80201c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80201c4:	463a      	mov	r2, r7
 80201c6:	4640      	mov	r0, r8
 80201c8:	4798      	blx	r3
 80201ca:	462e      	mov	r6, r5
 80201cc:	6825      	ldr	r5, [r4, #0]
 80201ce:	f015 0510 	ands.w	r5, r5, #16
 80201d2:	d158      	bne.n	8020286 <_scanf_float+0x412>
 80201d4:	7035      	strb	r5, [r6, #0]
 80201d6:	6823      	ldr	r3, [r4, #0]
 80201d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80201dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80201e0:	d11c      	bne.n	802021c <_scanf_float+0x3a8>
 80201e2:	9b01      	ldr	r3, [sp, #4]
 80201e4:	454b      	cmp	r3, r9
 80201e6:	eba3 0209 	sub.w	r2, r3, r9
 80201ea:	d124      	bne.n	8020236 <_scanf_float+0x3c2>
 80201ec:	2200      	movs	r2, #0
 80201ee:	4659      	mov	r1, fp
 80201f0:	4640      	mov	r0, r8
 80201f2:	f000 ff77 	bl	80210e4 <_strtod_r>
 80201f6:	9b03      	ldr	r3, [sp, #12]
 80201f8:	6821      	ldr	r1, [r4, #0]
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	f011 0f02 	tst.w	r1, #2
 8020200:	ec57 6b10 	vmov	r6, r7, d0
 8020204:	f103 0204 	add.w	r2, r3, #4
 8020208:	d020      	beq.n	802024c <_scanf_float+0x3d8>
 802020a:	9903      	ldr	r1, [sp, #12]
 802020c:	600a      	str	r2, [r1, #0]
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	e9c3 6700 	strd	r6, r7, [r3]
 8020214:	68e3      	ldr	r3, [r4, #12]
 8020216:	3301      	adds	r3, #1
 8020218:	60e3      	str	r3, [r4, #12]
 802021a:	e66c      	b.n	801fef6 <_scanf_float+0x82>
 802021c:	9b04      	ldr	r3, [sp, #16]
 802021e:	2b00      	cmp	r3, #0
 8020220:	d0e4      	beq.n	80201ec <_scanf_float+0x378>
 8020222:	9905      	ldr	r1, [sp, #20]
 8020224:	230a      	movs	r3, #10
 8020226:	462a      	mov	r2, r5
 8020228:	3101      	adds	r1, #1
 802022a:	4640      	mov	r0, r8
 802022c:	f000 ffe4 	bl	80211f8 <_strtol_r>
 8020230:	9b04      	ldr	r3, [sp, #16]
 8020232:	9e05      	ldr	r6, [sp, #20]
 8020234:	1ac2      	subs	r2, r0, r3
 8020236:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802023a:	429e      	cmp	r6, r3
 802023c:	bf28      	it	cs
 802023e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8020242:	4912      	ldr	r1, [pc, #72]	; (802028c <_scanf_float+0x418>)
 8020244:	4630      	mov	r0, r6
 8020246:	f000 f8b5 	bl	80203b4 <siprintf>
 802024a:	e7cf      	b.n	80201ec <_scanf_float+0x378>
 802024c:	f011 0f04 	tst.w	r1, #4
 8020250:	9903      	ldr	r1, [sp, #12]
 8020252:	600a      	str	r2, [r1, #0]
 8020254:	d1db      	bne.n	802020e <_scanf_float+0x39a>
 8020256:	f8d3 8000 	ldr.w	r8, [r3]
 802025a:	ee10 2a10 	vmov	r2, s0
 802025e:	ee10 0a10 	vmov	r0, s0
 8020262:	463b      	mov	r3, r7
 8020264:	4639      	mov	r1, r7
 8020266:	f7e0 fc61 	bl	8000b2c <__aeabi_dcmpun>
 802026a:	b128      	cbz	r0, 8020278 <_scanf_float+0x404>
 802026c:	4808      	ldr	r0, [pc, #32]	; (8020290 <_scanf_float+0x41c>)
 802026e:	f000 f829 	bl	80202c4 <nanf>
 8020272:	ed88 0a00 	vstr	s0, [r8]
 8020276:	e7cd      	b.n	8020214 <_scanf_float+0x3a0>
 8020278:	4630      	mov	r0, r6
 802027a:	4639      	mov	r1, r7
 802027c:	f7e0 fcb4 	bl	8000be8 <__aeabi_d2f>
 8020280:	f8c8 0000 	str.w	r0, [r8]
 8020284:	e7c6      	b.n	8020214 <_scanf_float+0x3a0>
 8020286:	2500      	movs	r5, #0
 8020288:	e635      	b.n	801fef6 <_scanf_float+0x82>
 802028a:	bf00      	nop
 802028c:	08025d80 	.word	0x08025d80
 8020290:	08026198 	.word	0x08026198

08020294 <realloc>:
 8020294:	4b02      	ldr	r3, [pc, #8]	; (80202a0 <realloc+0xc>)
 8020296:	460a      	mov	r2, r1
 8020298:	4601      	mov	r1, r0
 802029a:	6818      	ldr	r0, [r3, #0]
 802029c:	f002 beb6 	b.w	802300c <_realloc_r>
 80202a0:	200000c4 	.word	0x200000c4

080202a4 <_sbrk_r>:
 80202a4:	b538      	push	{r3, r4, r5, lr}
 80202a6:	4d06      	ldr	r5, [pc, #24]	; (80202c0 <_sbrk_r+0x1c>)
 80202a8:	2300      	movs	r3, #0
 80202aa:	4604      	mov	r4, r0
 80202ac:	4608      	mov	r0, r1
 80202ae:	602b      	str	r3, [r5, #0]
 80202b0:	f7ee fe06 	bl	800eec0 <_sbrk>
 80202b4:	1c43      	adds	r3, r0, #1
 80202b6:	d102      	bne.n	80202be <_sbrk_r+0x1a>
 80202b8:	682b      	ldr	r3, [r5, #0]
 80202ba:	b103      	cbz	r3, 80202be <_sbrk_r+0x1a>
 80202bc:	6023      	str	r3, [r4, #0]
 80202be:	bd38      	pop	{r3, r4, r5, pc}
 80202c0:	2000a94c 	.word	0x2000a94c

080202c4 <nanf>:
 80202c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80202cc <nanf+0x8>
 80202c8:	4770      	bx	lr
 80202ca:	bf00      	nop
 80202cc:	7fc00000 	.word	0x7fc00000

080202d0 <scalbnf>:
 80202d0:	ee10 3a10 	vmov	r3, s0
 80202d4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80202d8:	d025      	beq.n	8020326 <scalbnf+0x56>
 80202da:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80202de:	d302      	bcc.n	80202e6 <scalbnf+0x16>
 80202e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80202e4:	4770      	bx	lr
 80202e6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80202ea:	d122      	bne.n	8020332 <scalbnf+0x62>
 80202ec:	4b2a      	ldr	r3, [pc, #168]	; (8020398 <scalbnf+0xc8>)
 80202ee:	eddf 7a2b 	vldr	s15, [pc, #172]	; 802039c <scalbnf+0xcc>
 80202f2:	4298      	cmp	r0, r3
 80202f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80202f8:	db16      	blt.n	8020328 <scalbnf+0x58>
 80202fa:	ee10 3a10 	vmov	r3, s0
 80202fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8020302:	3a19      	subs	r2, #25
 8020304:	4402      	add	r2, r0
 8020306:	2afe      	cmp	r2, #254	; 0xfe
 8020308:	dd15      	ble.n	8020336 <scalbnf+0x66>
 802030a:	ee10 3a10 	vmov	r3, s0
 802030e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80203a0 <scalbnf+0xd0>
 8020312:	eddf 6a24 	vldr	s13, [pc, #144]	; 80203a4 <scalbnf+0xd4>
 8020316:	2b00      	cmp	r3, #0
 8020318:	eeb0 7a67 	vmov.f32	s14, s15
 802031c:	bfb8      	it	lt
 802031e:	eef0 7a66 	vmovlt.f32	s15, s13
 8020322:	ee27 0a27 	vmul.f32	s0, s14, s15
 8020326:	4770      	bx	lr
 8020328:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80203a8 <scalbnf+0xd8>
 802032c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020330:	4770      	bx	lr
 8020332:	0dd2      	lsrs	r2, r2, #23
 8020334:	e7e6      	b.n	8020304 <scalbnf+0x34>
 8020336:	2a00      	cmp	r2, #0
 8020338:	dd06      	ble.n	8020348 <scalbnf+0x78>
 802033a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802033e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8020342:	ee00 3a10 	vmov	s0, r3
 8020346:	4770      	bx	lr
 8020348:	f112 0f16 	cmn.w	r2, #22
 802034c:	da1a      	bge.n	8020384 <scalbnf+0xb4>
 802034e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020352:	4298      	cmp	r0, r3
 8020354:	ee10 3a10 	vmov	r3, s0
 8020358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802035c:	dd0a      	ble.n	8020374 <scalbnf+0xa4>
 802035e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80203a0 <scalbnf+0xd0>
 8020362:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80203a4 <scalbnf+0xd4>
 8020366:	eef0 7a40 	vmov.f32	s15, s0
 802036a:	2b00      	cmp	r3, #0
 802036c:	bf18      	it	ne
 802036e:	eeb0 0a47 	vmovne.f32	s0, s14
 8020372:	e7db      	b.n	802032c <scalbnf+0x5c>
 8020374:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80203a8 <scalbnf+0xd8>
 8020378:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80203ac <scalbnf+0xdc>
 802037c:	eef0 7a40 	vmov.f32	s15, s0
 8020380:	2b00      	cmp	r3, #0
 8020382:	e7f3      	b.n	802036c <scalbnf+0x9c>
 8020384:	3219      	adds	r2, #25
 8020386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802038a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 802038e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80203b0 <scalbnf+0xe0>
 8020392:	ee07 3a10 	vmov	s14, r3
 8020396:	e7c4      	b.n	8020322 <scalbnf+0x52>
 8020398:	ffff3cb0 	.word	0xffff3cb0
 802039c:	4c000000 	.word	0x4c000000
 80203a0:	7149f2ca 	.word	0x7149f2ca
 80203a4:	f149f2ca 	.word	0xf149f2ca
 80203a8:	0da24260 	.word	0x0da24260
 80203ac:	8da24260 	.word	0x8da24260
 80203b0:	33000000 	.word	0x33000000

080203b4 <siprintf>:
 80203b4:	b40e      	push	{r1, r2, r3}
 80203b6:	b500      	push	{lr}
 80203b8:	b09c      	sub	sp, #112	; 0x70
 80203ba:	ab1d      	add	r3, sp, #116	; 0x74
 80203bc:	9002      	str	r0, [sp, #8]
 80203be:	9006      	str	r0, [sp, #24]
 80203c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80203c4:	4809      	ldr	r0, [pc, #36]	; (80203ec <siprintf+0x38>)
 80203c6:	9107      	str	r1, [sp, #28]
 80203c8:	9104      	str	r1, [sp, #16]
 80203ca:	4909      	ldr	r1, [pc, #36]	; (80203f0 <siprintf+0x3c>)
 80203cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80203d0:	9105      	str	r1, [sp, #20]
 80203d2:	6800      	ldr	r0, [r0, #0]
 80203d4:	9301      	str	r3, [sp, #4]
 80203d6:	a902      	add	r1, sp, #8
 80203d8:	f002 fe9a 	bl	8023110 <_svfiprintf_r>
 80203dc:	9b02      	ldr	r3, [sp, #8]
 80203de:	2200      	movs	r2, #0
 80203e0:	701a      	strb	r2, [r3, #0]
 80203e2:	b01c      	add	sp, #112	; 0x70
 80203e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80203e8:	b003      	add	sp, #12
 80203ea:	4770      	bx	lr
 80203ec:	200000c4 	.word	0x200000c4
 80203f0:	ffff0208 	.word	0xffff0208

080203f4 <__sread>:
 80203f4:	b510      	push	{r4, lr}
 80203f6:	460c      	mov	r4, r1
 80203f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203fc:	f002 ff88 	bl	8023310 <_read_r>
 8020400:	2800      	cmp	r0, #0
 8020402:	bfab      	itete	ge
 8020404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020406:	89a3      	ldrhlt	r3, [r4, #12]
 8020408:	181b      	addge	r3, r3, r0
 802040a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802040e:	bfac      	ite	ge
 8020410:	6563      	strge	r3, [r4, #84]	; 0x54
 8020412:	81a3      	strhlt	r3, [r4, #12]
 8020414:	bd10      	pop	{r4, pc}

08020416 <__swrite>:
 8020416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802041a:	461f      	mov	r7, r3
 802041c:	898b      	ldrh	r3, [r1, #12]
 802041e:	05db      	lsls	r3, r3, #23
 8020420:	4605      	mov	r5, r0
 8020422:	460c      	mov	r4, r1
 8020424:	4616      	mov	r6, r2
 8020426:	d505      	bpl.n	8020434 <__swrite+0x1e>
 8020428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802042c:	2302      	movs	r3, #2
 802042e:	2200      	movs	r2, #0
 8020430:	f002 f8f2 	bl	8022618 <_lseek_r>
 8020434:	89a3      	ldrh	r3, [r4, #12]
 8020436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802043a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802043e:	81a3      	strh	r3, [r4, #12]
 8020440:	4632      	mov	r2, r6
 8020442:	463b      	mov	r3, r7
 8020444:	4628      	mov	r0, r5
 8020446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802044a:	f000 bed7 	b.w	80211fc <_write_r>

0802044e <__sseek>:
 802044e:	b510      	push	{r4, lr}
 8020450:	460c      	mov	r4, r1
 8020452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020456:	f002 f8df 	bl	8022618 <_lseek_r>
 802045a:	1c43      	adds	r3, r0, #1
 802045c:	89a3      	ldrh	r3, [r4, #12]
 802045e:	bf15      	itete	ne
 8020460:	6560      	strne	r0, [r4, #84]	; 0x54
 8020462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802046a:	81a3      	strheq	r3, [r4, #12]
 802046c:	bf18      	it	ne
 802046e:	81a3      	strhne	r3, [r4, #12]
 8020470:	bd10      	pop	{r4, pc}

08020472 <__sclose>:
 8020472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020476:	f000 bed3 	b.w	8021220 <_close_r>

0802047a <strcat>:
 802047a:	b510      	push	{r4, lr}
 802047c:	4602      	mov	r2, r0
 802047e:	7814      	ldrb	r4, [r2, #0]
 8020480:	4613      	mov	r3, r2
 8020482:	3201      	adds	r2, #1
 8020484:	2c00      	cmp	r4, #0
 8020486:	d1fa      	bne.n	802047e <strcat+0x4>
 8020488:	3b01      	subs	r3, #1
 802048a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802048e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020492:	2a00      	cmp	r2, #0
 8020494:	d1f9      	bne.n	802048a <strcat+0x10>
 8020496:	bd10      	pop	{r4, pc}

08020498 <sulp>:
 8020498:	b570      	push	{r4, r5, r6, lr}
 802049a:	4604      	mov	r4, r0
 802049c:	460d      	mov	r5, r1
 802049e:	ec45 4b10 	vmov	d0, r4, r5
 80204a2:	4616      	mov	r6, r2
 80204a4:	f002 fc54 	bl	8022d50 <__ulp>
 80204a8:	ec51 0b10 	vmov	r0, r1, d0
 80204ac:	b17e      	cbz	r6, 80204ce <sulp+0x36>
 80204ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80204b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	dd09      	ble.n	80204ce <sulp+0x36>
 80204ba:	051b      	lsls	r3, r3, #20
 80204bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80204c0:	2400      	movs	r4, #0
 80204c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80204c6:	4622      	mov	r2, r4
 80204c8:	462b      	mov	r3, r5
 80204ca:	f7e0 f895 	bl	80005f8 <__aeabi_dmul>
 80204ce:	bd70      	pop	{r4, r5, r6, pc}

080204d0 <_strtod_l>:
 80204d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204d4:	b0a3      	sub	sp, #140	; 0x8c
 80204d6:	461f      	mov	r7, r3
 80204d8:	2300      	movs	r3, #0
 80204da:	931e      	str	r3, [sp, #120]	; 0x78
 80204dc:	4ba4      	ldr	r3, [pc, #656]	; (8020770 <_strtod_l+0x2a0>)
 80204de:	9219      	str	r2, [sp, #100]	; 0x64
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	9307      	str	r3, [sp, #28]
 80204e4:	4604      	mov	r4, r0
 80204e6:	4618      	mov	r0, r3
 80204e8:	4688      	mov	r8, r1
 80204ea:	f7df fe71 	bl	80001d0 <strlen>
 80204ee:	f04f 0a00 	mov.w	sl, #0
 80204f2:	4605      	mov	r5, r0
 80204f4:	f04f 0b00 	mov.w	fp, #0
 80204f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80204fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80204fe:	781a      	ldrb	r2, [r3, #0]
 8020500:	2a2b      	cmp	r2, #43	; 0x2b
 8020502:	d04c      	beq.n	802059e <_strtod_l+0xce>
 8020504:	d839      	bhi.n	802057a <_strtod_l+0xaa>
 8020506:	2a0d      	cmp	r2, #13
 8020508:	d832      	bhi.n	8020570 <_strtod_l+0xa0>
 802050a:	2a08      	cmp	r2, #8
 802050c:	d832      	bhi.n	8020574 <_strtod_l+0xa4>
 802050e:	2a00      	cmp	r2, #0
 8020510:	d03c      	beq.n	802058c <_strtod_l+0xbc>
 8020512:	2300      	movs	r3, #0
 8020514:	930e      	str	r3, [sp, #56]	; 0x38
 8020516:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8020518:	7833      	ldrb	r3, [r6, #0]
 802051a:	2b30      	cmp	r3, #48	; 0x30
 802051c:	f040 80b4 	bne.w	8020688 <_strtod_l+0x1b8>
 8020520:	7873      	ldrb	r3, [r6, #1]
 8020522:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020526:	2b58      	cmp	r3, #88	; 0x58
 8020528:	d16c      	bne.n	8020604 <_strtod_l+0x134>
 802052a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802052c:	9301      	str	r3, [sp, #4]
 802052e:	ab1e      	add	r3, sp, #120	; 0x78
 8020530:	9702      	str	r7, [sp, #8]
 8020532:	9300      	str	r3, [sp, #0]
 8020534:	4a8f      	ldr	r2, [pc, #572]	; (8020774 <_strtod_l+0x2a4>)
 8020536:	ab1f      	add	r3, sp, #124	; 0x7c
 8020538:	a91d      	add	r1, sp, #116	; 0x74
 802053a:	4620      	mov	r0, r4
 802053c:	f001 fd60 	bl	8022000 <__gethex>
 8020540:	f010 0707 	ands.w	r7, r0, #7
 8020544:	4605      	mov	r5, r0
 8020546:	d005      	beq.n	8020554 <_strtod_l+0x84>
 8020548:	2f06      	cmp	r7, #6
 802054a:	d12a      	bne.n	80205a2 <_strtod_l+0xd2>
 802054c:	3601      	adds	r6, #1
 802054e:	2300      	movs	r3, #0
 8020550:	961d      	str	r6, [sp, #116]	; 0x74
 8020552:	930e      	str	r3, [sp, #56]	; 0x38
 8020554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020556:	2b00      	cmp	r3, #0
 8020558:	f040 8596 	bne.w	8021088 <_strtod_l+0xbb8>
 802055c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802055e:	b1db      	cbz	r3, 8020598 <_strtod_l+0xc8>
 8020560:	4652      	mov	r2, sl
 8020562:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8020566:	ec43 2b10 	vmov	d0, r2, r3
 802056a:	b023      	add	sp, #140	; 0x8c
 802056c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020570:	2a20      	cmp	r2, #32
 8020572:	d1ce      	bne.n	8020512 <_strtod_l+0x42>
 8020574:	3301      	adds	r3, #1
 8020576:	931d      	str	r3, [sp, #116]	; 0x74
 8020578:	e7c0      	b.n	80204fc <_strtod_l+0x2c>
 802057a:	2a2d      	cmp	r2, #45	; 0x2d
 802057c:	d1c9      	bne.n	8020512 <_strtod_l+0x42>
 802057e:	2201      	movs	r2, #1
 8020580:	920e      	str	r2, [sp, #56]	; 0x38
 8020582:	1c5a      	adds	r2, r3, #1
 8020584:	921d      	str	r2, [sp, #116]	; 0x74
 8020586:	785b      	ldrb	r3, [r3, #1]
 8020588:	2b00      	cmp	r3, #0
 802058a:	d1c4      	bne.n	8020516 <_strtod_l+0x46>
 802058c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802058e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8020592:	2b00      	cmp	r3, #0
 8020594:	f040 8576 	bne.w	8021084 <_strtod_l+0xbb4>
 8020598:	4652      	mov	r2, sl
 802059a:	465b      	mov	r3, fp
 802059c:	e7e3      	b.n	8020566 <_strtod_l+0x96>
 802059e:	2200      	movs	r2, #0
 80205a0:	e7ee      	b.n	8020580 <_strtod_l+0xb0>
 80205a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80205a4:	b13a      	cbz	r2, 80205b6 <_strtod_l+0xe6>
 80205a6:	2135      	movs	r1, #53	; 0x35
 80205a8:	a820      	add	r0, sp, #128	; 0x80
 80205aa:	f002 fcdc 	bl	8022f66 <__copybits>
 80205ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80205b0:	4620      	mov	r0, r4
 80205b2:	f002 f8a1 	bl	80226f8 <_Bfree>
 80205b6:	3f01      	subs	r7, #1
 80205b8:	2f05      	cmp	r7, #5
 80205ba:	d807      	bhi.n	80205cc <_strtod_l+0xfc>
 80205bc:	e8df f007 	tbb	[pc, r7]
 80205c0:	1d180b0e 	.word	0x1d180b0e
 80205c4:	030e      	.short	0x030e
 80205c6:	f04f 0b00 	mov.w	fp, #0
 80205ca:	46da      	mov	sl, fp
 80205cc:	0728      	lsls	r0, r5, #28
 80205ce:	d5c1      	bpl.n	8020554 <_strtod_l+0x84>
 80205d0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80205d4:	e7be      	b.n	8020554 <_strtod_l+0x84>
 80205d6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80205da:	e7f7      	b.n	80205cc <_strtod_l+0xfc>
 80205dc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80205e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80205e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80205e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80205ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80205ee:	e7ed      	b.n	80205cc <_strtod_l+0xfc>
 80205f0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8020778 <_strtod_l+0x2a8>
 80205f4:	f04f 0a00 	mov.w	sl, #0
 80205f8:	e7e8      	b.n	80205cc <_strtod_l+0xfc>
 80205fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80205fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020602:	e7e3      	b.n	80205cc <_strtod_l+0xfc>
 8020604:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020606:	1c5a      	adds	r2, r3, #1
 8020608:	921d      	str	r2, [sp, #116]	; 0x74
 802060a:	785b      	ldrb	r3, [r3, #1]
 802060c:	2b30      	cmp	r3, #48	; 0x30
 802060e:	d0f9      	beq.n	8020604 <_strtod_l+0x134>
 8020610:	2b00      	cmp	r3, #0
 8020612:	d09f      	beq.n	8020554 <_strtod_l+0x84>
 8020614:	2301      	movs	r3, #1
 8020616:	f04f 0900 	mov.w	r9, #0
 802061a:	9304      	str	r3, [sp, #16]
 802061c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802061e:	930a      	str	r3, [sp, #40]	; 0x28
 8020620:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020624:	464f      	mov	r7, r9
 8020626:	220a      	movs	r2, #10
 8020628:	981d      	ldr	r0, [sp, #116]	; 0x74
 802062a:	7806      	ldrb	r6, [r0, #0]
 802062c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8020630:	b2d9      	uxtb	r1, r3
 8020632:	2909      	cmp	r1, #9
 8020634:	d92a      	bls.n	802068c <_strtod_l+0x1bc>
 8020636:	9907      	ldr	r1, [sp, #28]
 8020638:	462a      	mov	r2, r5
 802063a:	f002 fe92 	bl	8023362 <strncmp>
 802063e:	b398      	cbz	r0, 80206a8 <_strtod_l+0x1d8>
 8020640:	2000      	movs	r0, #0
 8020642:	4633      	mov	r3, r6
 8020644:	463d      	mov	r5, r7
 8020646:	9007      	str	r0, [sp, #28]
 8020648:	4602      	mov	r2, r0
 802064a:	2b65      	cmp	r3, #101	; 0x65
 802064c:	d001      	beq.n	8020652 <_strtod_l+0x182>
 802064e:	2b45      	cmp	r3, #69	; 0x45
 8020650:	d118      	bne.n	8020684 <_strtod_l+0x1b4>
 8020652:	b91d      	cbnz	r5, 802065c <_strtod_l+0x18c>
 8020654:	9b04      	ldr	r3, [sp, #16]
 8020656:	4303      	orrs	r3, r0
 8020658:	d098      	beq.n	802058c <_strtod_l+0xbc>
 802065a:	2500      	movs	r5, #0
 802065c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8020660:	f108 0301 	add.w	r3, r8, #1
 8020664:	931d      	str	r3, [sp, #116]	; 0x74
 8020666:	f898 3001 	ldrb.w	r3, [r8, #1]
 802066a:	2b2b      	cmp	r3, #43	; 0x2b
 802066c:	d075      	beq.n	802075a <_strtod_l+0x28a>
 802066e:	2b2d      	cmp	r3, #45	; 0x2d
 8020670:	d07b      	beq.n	802076a <_strtod_l+0x29a>
 8020672:	f04f 0c00 	mov.w	ip, #0
 8020676:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802067a:	2909      	cmp	r1, #9
 802067c:	f240 8082 	bls.w	8020784 <_strtod_l+0x2b4>
 8020680:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8020684:	2600      	movs	r6, #0
 8020686:	e09d      	b.n	80207c4 <_strtod_l+0x2f4>
 8020688:	2300      	movs	r3, #0
 802068a:	e7c4      	b.n	8020616 <_strtod_l+0x146>
 802068c:	2f08      	cmp	r7, #8
 802068e:	bfd8      	it	le
 8020690:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8020692:	f100 0001 	add.w	r0, r0, #1
 8020696:	bfda      	itte	le
 8020698:	fb02 3301 	mlale	r3, r2, r1, r3
 802069c:	9309      	strle	r3, [sp, #36]	; 0x24
 802069e:	fb02 3909 	mlagt	r9, r2, r9, r3
 80206a2:	3701      	adds	r7, #1
 80206a4:	901d      	str	r0, [sp, #116]	; 0x74
 80206a6:	e7bf      	b.n	8020628 <_strtod_l+0x158>
 80206a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80206aa:	195a      	adds	r2, r3, r5
 80206ac:	921d      	str	r2, [sp, #116]	; 0x74
 80206ae:	5d5b      	ldrb	r3, [r3, r5]
 80206b0:	2f00      	cmp	r7, #0
 80206b2:	d037      	beq.n	8020724 <_strtod_l+0x254>
 80206b4:	9007      	str	r0, [sp, #28]
 80206b6:	463d      	mov	r5, r7
 80206b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80206bc:	2a09      	cmp	r2, #9
 80206be:	d912      	bls.n	80206e6 <_strtod_l+0x216>
 80206c0:	2201      	movs	r2, #1
 80206c2:	e7c2      	b.n	802064a <_strtod_l+0x17a>
 80206c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80206c6:	1c5a      	adds	r2, r3, #1
 80206c8:	921d      	str	r2, [sp, #116]	; 0x74
 80206ca:	785b      	ldrb	r3, [r3, #1]
 80206cc:	3001      	adds	r0, #1
 80206ce:	2b30      	cmp	r3, #48	; 0x30
 80206d0:	d0f8      	beq.n	80206c4 <_strtod_l+0x1f4>
 80206d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80206d6:	2a08      	cmp	r2, #8
 80206d8:	f200 84db 	bhi.w	8021092 <_strtod_l+0xbc2>
 80206dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80206de:	9007      	str	r0, [sp, #28]
 80206e0:	2000      	movs	r0, #0
 80206e2:	920a      	str	r2, [sp, #40]	; 0x28
 80206e4:	4605      	mov	r5, r0
 80206e6:	3b30      	subs	r3, #48	; 0x30
 80206e8:	f100 0201 	add.w	r2, r0, #1
 80206ec:	d014      	beq.n	8020718 <_strtod_l+0x248>
 80206ee:	9907      	ldr	r1, [sp, #28]
 80206f0:	4411      	add	r1, r2
 80206f2:	9107      	str	r1, [sp, #28]
 80206f4:	462a      	mov	r2, r5
 80206f6:	eb00 0e05 	add.w	lr, r0, r5
 80206fa:	210a      	movs	r1, #10
 80206fc:	4572      	cmp	r2, lr
 80206fe:	d113      	bne.n	8020728 <_strtod_l+0x258>
 8020700:	182a      	adds	r2, r5, r0
 8020702:	2a08      	cmp	r2, #8
 8020704:	f105 0501 	add.w	r5, r5, #1
 8020708:	4405      	add	r5, r0
 802070a:	dc1c      	bgt.n	8020746 <_strtod_l+0x276>
 802070c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802070e:	220a      	movs	r2, #10
 8020710:	fb02 3301 	mla	r3, r2, r1, r3
 8020714:	9309      	str	r3, [sp, #36]	; 0x24
 8020716:	2200      	movs	r2, #0
 8020718:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802071a:	1c59      	adds	r1, r3, #1
 802071c:	911d      	str	r1, [sp, #116]	; 0x74
 802071e:	785b      	ldrb	r3, [r3, #1]
 8020720:	4610      	mov	r0, r2
 8020722:	e7c9      	b.n	80206b8 <_strtod_l+0x1e8>
 8020724:	4638      	mov	r0, r7
 8020726:	e7d2      	b.n	80206ce <_strtod_l+0x1fe>
 8020728:	2a08      	cmp	r2, #8
 802072a:	dc04      	bgt.n	8020736 <_strtod_l+0x266>
 802072c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802072e:	434e      	muls	r6, r1
 8020730:	9609      	str	r6, [sp, #36]	; 0x24
 8020732:	3201      	adds	r2, #1
 8020734:	e7e2      	b.n	80206fc <_strtod_l+0x22c>
 8020736:	f102 0c01 	add.w	ip, r2, #1
 802073a:	f1bc 0f10 	cmp.w	ip, #16
 802073e:	bfd8      	it	le
 8020740:	fb01 f909 	mulle.w	r9, r1, r9
 8020744:	e7f5      	b.n	8020732 <_strtod_l+0x262>
 8020746:	2d10      	cmp	r5, #16
 8020748:	bfdc      	itt	le
 802074a:	220a      	movle	r2, #10
 802074c:	fb02 3909 	mlale	r9, r2, r9, r3
 8020750:	e7e1      	b.n	8020716 <_strtod_l+0x246>
 8020752:	2300      	movs	r3, #0
 8020754:	9307      	str	r3, [sp, #28]
 8020756:	2201      	movs	r2, #1
 8020758:	e77c      	b.n	8020654 <_strtod_l+0x184>
 802075a:	f04f 0c00 	mov.w	ip, #0
 802075e:	f108 0302 	add.w	r3, r8, #2
 8020762:	931d      	str	r3, [sp, #116]	; 0x74
 8020764:	f898 3002 	ldrb.w	r3, [r8, #2]
 8020768:	e785      	b.n	8020676 <_strtod_l+0x1a6>
 802076a:	f04f 0c01 	mov.w	ip, #1
 802076e:	e7f6      	b.n	802075e <_strtod_l+0x28e>
 8020770:	08025fd8 	.word	0x08025fd8
 8020774:	08025d88 	.word	0x08025d88
 8020778:	7ff00000 	.word	0x7ff00000
 802077c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802077e:	1c59      	adds	r1, r3, #1
 8020780:	911d      	str	r1, [sp, #116]	; 0x74
 8020782:	785b      	ldrb	r3, [r3, #1]
 8020784:	2b30      	cmp	r3, #48	; 0x30
 8020786:	d0f9      	beq.n	802077c <_strtod_l+0x2ac>
 8020788:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 802078c:	2908      	cmp	r1, #8
 802078e:	f63f af79 	bhi.w	8020684 <_strtod_l+0x1b4>
 8020792:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8020796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020798:	9308      	str	r3, [sp, #32]
 802079a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802079c:	1c59      	adds	r1, r3, #1
 802079e:	911d      	str	r1, [sp, #116]	; 0x74
 80207a0:	785b      	ldrb	r3, [r3, #1]
 80207a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80207a6:	2e09      	cmp	r6, #9
 80207a8:	d937      	bls.n	802081a <_strtod_l+0x34a>
 80207aa:	9e08      	ldr	r6, [sp, #32]
 80207ac:	1b89      	subs	r1, r1, r6
 80207ae:	2908      	cmp	r1, #8
 80207b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80207b4:	dc02      	bgt.n	80207bc <_strtod_l+0x2ec>
 80207b6:	4576      	cmp	r6, lr
 80207b8:	bfa8      	it	ge
 80207ba:	4676      	movge	r6, lr
 80207bc:	f1bc 0f00 	cmp.w	ip, #0
 80207c0:	d000      	beq.n	80207c4 <_strtod_l+0x2f4>
 80207c2:	4276      	negs	r6, r6
 80207c4:	2d00      	cmp	r5, #0
 80207c6:	d14f      	bne.n	8020868 <_strtod_l+0x398>
 80207c8:	9904      	ldr	r1, [sp, #16]
 80207ca:	4301      	orrs	r1, r0
 80207cc:	f47f aec2 	bne.w	8020554 <_strtod_l+0x84>
 80207d0:	2a00      	cmp	r2, #0
 80207d2:	f47f aedb 	bne.w	802058c <_strtod_l+0xbc>
 80207d6:	2b69      	cmp	r3, #105	; 0x69
 80207d8:	d027      	beq.n	802082a <_strtod_l+0x35a>
 80207da:	dc24      	bgt.n	8020826 <_strtod_l+0x356>
 80207dc:	2b49      	cmp	r3, #73	; 0x49
 80207de:	d024      	beq.n	802082a <_strtod_l+0x35a>
 80207e0:	2b4e      	cmp	r3, #78	; 0x4e
 80207e2:	f47f aed3 	bne.w	802058c <_strtod_l+0xbc>
 80207e6:	499e      	ldr	r1, [pc, #632]	; (8020a60 <_strtod_l+0x590>)
 80207e8:	a81d      	add	r0, sp, #116	; 0x74
 80207ea:	f001 fe61 	bl	80224b0 <__match>
 80207ee:	2800      	cmp	r0, #0
 80207f0:	f43f aecc 	beq.w	802058c <_strtod_l+0xbc>
 80207f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80207f6:	781b      	ldrb	r3, [r3, #0]
 80207f8:	2b28      	cmp	r3, #40	; 0x28
 80207fa:	d12d      	bne.n	8020858 <_strtod_l+0x388>
 80207fc:	4999      	ldr	r1, [pc, #612]	; (8020a64 <_strtod_l+0x594>)
 80207fe:	aa20      	add	r2, sp, #128	; 0x80
 8020800:	a81d      	add	r0, sp, #116	; 0x74
 8020802:	f001 fe69 	bl	80224d8 <__hexnan>
 8020806:	2805      	cmp	r0, #5
 8020808:	d126      	bne.n	8020858 <_strtod_l+0x388>
 802080a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802080c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8020810:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020814:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8020818:	e69c      	b.n	8020554 <_strtod_l+0x84>
 802081a:	210a      	movs	r1, #10
 802081c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8020820:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020824:	e7b9      	b.n	802079a <_strtod_l+0x2ca>
 8020826:	2b6e      	cmp	r3, #110	; 0x6e
 8020828:	e7db      	b.n	80207e2 <_strtod_l+0x312>
 802082a:	498f      	ldr	r1, [pc, #572]	; (8020a68 <_strtod_l+0x598>)
 802082c:	a81d      	add	r0, sp, #116	; 0x74
 802082e:	f001 fe3f 	bl	80224b0 <__match>
 8020832:	2800      	cmp	r0, #0
 8020834:	f43f aeaa 	beq.w	802058c <_strtod_l+0xbc>
 8020838:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802083a:	498c      	ldr	r1, [pc, #560]	; (8020a6c <_strtod_l+0x59c>)
 802083c:	3b01      	subs	r3, #1
 802083e:	a81d      	add	r0, sp, #116	; 0x74
 8020840:	931d      	str	r3, [sp, #116]	; 0x74
 8020842:	f001 fe35 	bl	80224b0 <__match>
 8020846:	b910      	cbnz	r0, 802084e <_strtod_l+0x37e>
 8020848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802084a:	3301      	adds	r3, #1
 802084c:	931d      	str	r3, [sp, #116]	; 0x74
 802084e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8020a7c <_strtod_l+0x5ac>
 8020852:	f04f 0a00 	mov.w	sl, #0
 8020856:	e67d      	b.n	8020554 <_strtod_l+0x84>
 8020858:	4885      	ldr	r0, [pc, #532]	; (8020a70 <_strtod_l+0x5a0>)
 802085a:	f002 fd6d 	bl	8023338 <nan>
 802085e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8020862:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8020866:	e675      	b.n	8020554 <_strtod_l+0x84>
 8020868:	9b07      	ldr	r3, [sp, #28]
 802086a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802086c:	1af3      	subs	r3, r6, r3
 802086e:	2f00      	cmp	r7, #0
 8020870:	bf08      	it	eq
 8020872:	462f      	moveq	r7, r5
 8020874:	2d10      	cmp	r5, #16
 8020876:	9308      	str	r3, [sp, #32]
 8020878:	46a8      	mov	r8, r5
 802087a:	bfa8      	it	ge
 802087c:	f04f 0810 	movge.w	r8, #16
 8020880:	f7df fe40 	bl	8000504 <__aeabi_ui2d>
 8020884:	2d09      	cmp	r5, #9
 8020886:	4682      	mov	sl, r0
 8020888:	468b      	mov	fp, r1
 802088a:	dd13      	ble.n	80208b4 <_strtod_l+0x3e4>
 802088c:	4b79      	ldr	r3, [pc, #484]	; (8020a74 <_strtod_l+0x5a4>)
 802088e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8020892:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8020896:	f7df feaf 	bl	80005f8 <__aeabi_dmul>
 802089a:	4682      	mov	sl, r0
 802089c:	4648      	mov	r0, r9
 802089e:	468b      	mov	fp, r1
 80208a0:	f7df fe30 	bl	8000504 <__aeabi_ui2d>
 80208a4:	4602      	mov	r2, r0
 80208a6:	460b      	mov	r3, r1
 80208a8:	4650      	mov	r0, sl
 80208aa:	4659      	mov	r1, fp
 80208ac:	f7df fcee 	bl	800028c <__adddf3>
 80208b0:	4682      	mov	sl, r0
 80208b2:	468b      	mov	fp, r1
 80208b4:	2d0f      	cmp	r5, #15
 80208b6:	dc38      	bgt.n	802092a <_strtod_l+0x45a>
 80208b8:	9b08      	ldr	r3, [sp, #32]
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	f43f ae4a 	beq.w	8020554 <_strtod_l+0x84>
 80208c0:	dd24      	ble.n	802090c <_strtod_l+0x43c>
 80208c2:	2b16      	cmp	r3, #22
 80208c4:	dc0b      	bgt.n	80208de <_strtod_l+0x40e>
 80208c6:	4d6b      	ldr	r5, [pc, #428]	; (8020a74 <_strtod_l+0x5a4>)
 80208c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80208cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80208d0:	4652      	mov	r2, sl
 80208d2:	465b      	mov	r3, fp
 80208d4:	f7df fe90 	bl	80005f8 <__aeabi_dmul>
 80208d8:	4682      	mov	sl, r0
 80208da:	468b      	mov	fp, r1
 80208dc:	e63a      	b.n	8020554 <_strtod_l+0x84>
 80208de:	9a08      	ldr	r2, [sp, #32]
 80208e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80208e4:	4293      	cmp	r3, r2
 80208e6:	db20      	blt.n	802092a <_strtod_l+0x45a>
 80208e8:	4c62      	ldr	r4, [pc, #392]	; (8020a74 <_strtod_l+0x5a4>)
 80208ea:	f1c5 050f 	rsb	r5, r5, #15
 80208ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80208f2:	4652      	mov	r2, sl
 80208f4:	465b      	mov	r3, fp
 80208f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80208fa:	f7df fe7d 	bl	80005f8 <__aeabi_dmul>
 80208fe:	9b08      	ldr	r3, [sp, #32]
 8020900:	1b5d      	subs	r5, r3, r5
 8020902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020906:	e9d4 2300 	ldrd	r2, r3, [r4]
 802090a:	e7e3      	b.n	80208d4 <_strtod_l+0x404>
 802090c:	9b08      	ldr	r3, [sp, #32]
 802090e:	3316      	adds	r3, #22
 8020910:	db0b      	blt.n	802092a <_strtod_l+0x45a>
 8020912:	9b07      	ldr	r3, [sp, #28]
 8020914:	4a57      	ldr	r2, [pc, #348]	; (8020a74 <_strtod_l+0x5a4>)
 8020916:	1b9e      	subs	r6, r3, r6
 8020918:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802091c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020920:	4650      	mov	r0, sl
 8020922:	4659      	mov	r1, fp
 8020924:	f7df ff92 	bl	800084c <__aeabi_ddiv>
 8020928:	e7d6      	b.n	80208d8 <_strtod_l+0x408>
 802092a:	9b08      	ldr	r3, [sp, #32]
 802092c:	eba5 0808 	sub.w	r8, r5, r8
 8020930:	4498      	add	r8, r3
 8020932:	f1b8 0f00 	cmp.w	r8, #0
 8020936:	dd71      	ble.n	8020a1c <_strtod_l+0x54c>
 8020938:	f018 030f 	ands.w	r3, r8, #15
 802093c:	d00a      	beq.n	8020954 <_strtod_l+0x484>
 802093e:	494d      	ldr	r1, [pc, #308]	; (8020a74 <_strtod_l+0x5a4>)
 8020940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020944:	4652      	mov	r2, sl
 8020946:	465b      	mov	r3, fp
 8020948:	e9d1 0100 	ldrd	r0, r1, [r1]
 802094c:	f7df fe54 	bl	80005f8 <__aeabi_dmul>
 8020950:	4682      	mov	sl, r0
 8020952:	468b      	mov	fp, r1
 8020954:	f038 080f 	bics.w	r8, r8, #15
 8020958:	d04d      	beq.n	80209f6 <_strtod_l+0x526>
 802095a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802095e:	dd22      	ble.n	80209a6 <_strtod_l+0x4d6>
 8020960:	2500      	movs	r5, #0
 8020962:	462e      	mov	r6, r5
 8020964:	9509      	str	r5, [sp, #36]	; 0x24
 8020966:	9507      	str	r5, [sp, #28]
 8020968:	2322      	movs	r3, #34	; 0x22
 802096a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8020a7c <_strtod_l+0x5ac>
 802096e:	6023      	str	r3, [r4, #0]
 8020970:	f04f 0a00 	mov.w	sl, #0
 8020974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020976:	2b00      	cmp	r3, #0
 8020978:	f43f adec 	beq.w	8020554 <_strtod_l+0x84>
 802097c:	991e      	ldr	r1, [sp, #120]	; 0x78
 802097e:	4620      	mov	r0, r4
 8020980:	f001 feba 	bl	80226f8 <_Bfree>
 8020984:	9907      	ldr	r1, [sp, #28]
 8020986:	4620      	mov	r0, r4
 8020988:	f001 feb6 	bl	80226f8 <_Bfree>
 802098c:	4631      	mov	r1, r6
 802098e:	4620      	mov	r0, r4
 8020990:	f001 feb2 	bl	80226f8 <_Bfree>
 8020994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020996:	4620      	mov	r0, r4
 8020998:	f001 feae 	bl	80226f8 <_Bfree>
 802099c:	4629      	mov	r1, r5
 802099e:	4620      	mov	r0, r4
 80209a0:	f001 feaa 	bl	80226f8 <_Bfree>
 80209a4:	e5d6      	b.n	8020554 <_strtod_l+0x84>
 80209a6:	2300      	movs	r3, #0
 80209a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80209ac:	4650      	mov	r0, sl
 80209ae:	4659      	mov	r1, fp
 80209b0:	4699      	mov	r9, r3
 80209b2:	f1b8 0f01 	cmp.w	r8, #1
 80209b6:	dc21      	bgt.n	80209fc <_strtod_l+0x52c>
 80209b8:	b10b      	cbz	r3, 80209be <_strtod_l+0x4ee>
 80209ba:	4682      	mov	sl, r0
 80209bc:	468b      	mov	fp, r1
 80209be:	4b2e      	ldr	r3, [pc, #184]	; (8020a78 <_strtod_l+0x5a8>)
 80209c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80209c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80209c8:	4652      	mov	r2, sl
 80209ca:	465b      	mov	r3, fp
 80209cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80209d0:	f7df fe12 	bl	80005f8 <__aeabi_dmul>
 80209d4:	4b29      	ldr	r3, [pc, #164]	; (8020a7c <_strtod_l+0x5ac>)
 80209d6:	460a      	mov	r2, r1
 80209d8:	400b      	ands	r3, r1
 80209da:	4929      	ldr	r1, [pc, #164]	; (8020a80 <_strtod_l+0x5b0>)
 80209dc:	428b      	cmp	r3, r1
 80209de:	4682      	mov	sl, r0
 80209e0:	d8be      	bhi.n	8020960 <_strtod_l+0x490>
 80209e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80209e6:	428b      	cmp	r3, r1
 80209e8:	bf86      	itte	hi
 80209ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8020a84 <_strtod_l+0x5b4>
 80209ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80209f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80209f6:	2300      	movs	r3, #0
 80209f8:	9304      	str	r3, [sp, #16]
 80209fa:	e081      	b.n	8020b00 <_strtod_l+0x630>
 80209fc:	f018 0f01 	tst.w	r8, #1
 8020a00:	d007      	beq.n	8020a12 <_strtod_l+0x542>
 8020a02:	4b1d      	ldr	r3, [pc, #116]	; (8020a78 <_strtod_l+0x5a8>)
 8020a04:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8020a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a0c:	f7df fdf4 	bl	80005f8 <__aeabi_dmul>
 8020a10:	2301      	movs	r3, #1
 8020a12:	f109 0901 	add.w	r9, r9, #1
 8020a16:	ea4f 0868 	mov.w	r8, r8, asr #1
 8020a1a:	e7ca      	b.n	80209b2 <_strtod_l+0x4e2>
 8020a1c:	d0eb      	beq.n	80209f6 <_strtod_l+0x526>
 8020a1e:	f1c8 0800 	rsb	r8, r8, #0
 8020a22:	f018 020f 	ands.w	r2, r8, #15
 8020a26:	d00a      	beq.n	8020a3e <_strtod_l+0x56e>
 8020a28:	4b12      	ldr	r3, [pc, #72]	; (8020a74 <_strtod_l+0x5a4>)
 8020a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020a2e:	4650      	mov	r0, sl
 8020a30:	4659      	mov	r1, fp
 8020a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a36:	f7df ff09 	bl	800084c <__aeabi_ddiv>
 8020a3a:	4682      	mov	sl, r0
 8020a3c:	468b      	mov	fp, r1
 8020a3e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8020a42:	d0d8      	beq.n	80209f6 <_strtod_l+0x526>
 8020a44:	f1b8 0f1f 	cmp.w	r8, #31
 8020a48:	dd1e      	ble.n	8020a88 <_strtod_l+0x5b8>
 8020a4a:	2500      	movs	r5, #0
 8020a4c:	462e      	mov	r6, r5
 8020a4e:	9509      	str	r5, [sp, #36]	; 0x24
 8020a50:	9507      	str	r5, [sp, #28]
 8020a52:	2322      	movs	r3, #34	; 0x22
 8020a54:	f04f 0a00 	mov.w	sl, #0
 8020a58:	f04f 0b00 	mov.w	fp, #0
 8020a5c:	6023      	str	r3, [r4, #0]
 8020a5e:	e789      	b.n	8020974 <_strtod_l+0x4a4>
 8020a60:	08025d59 	.word	0x08025d59
 8020a64:	08025d9c 	.word	0x08025d9c
 8020a68:	08025d51 	.word	0x08025d51
 8020a6c:	08025edc 	.word	0x08025edc
 8020a70:	08026198 	.word	0x08026198
 8020a74:	08026078 	.word	0x08026078
 8020a78:	08026050 	.word	0x08026050
 8020a7c:	7ff00000 	.word	0x7ff00000
 8020a80:	7ca00000 	.word	0x7ca00000
 8020a84:	7fefffff 	.word	0x7fefffff
 8020a88:	f018 0310 	ands.w	r3, r8, #16
 8020a8c:	bf18      	it	ne
 8020a8e:	236a      	movne	r3, #106	; 0x6a
 8020a90:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8020e48 <_strtod_l+0x978>
 8020a94:	9304      	str	r3, [sp, #16]
 8020a96:	4650      	mov	r0, sl
 8020a98:	4659      	mov	r1, fp
 8020a9a:	2300      	movs	r3, #0
 8020a9c:	f018 0f01 	tst.w	r8, #1
 8020aa0:	d004      	beq.n	8020aac <_strtod_l+0x5dc>
 8020aa2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8020aa6:	f7df fda7 	bl	80005f8 <__aeabi_dmul>
 8020aaa:	2301      	movs	r3, #1
 8020aac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8020ab0:	f109 0908 	add.w	r9, r9, #8
 8020ab4:	d1f2      	bne.n	8020a9c <_strtod_l+0x5cc>
 8020ab6:	b10b      	cbz	r3, 8020abc <_strtod_l+0x5ec>
 8020ab8:	4682      	mov	sl, r0
 8020aba:	468b      	mov	fp, r1
 8020abc:	9b04      	ldr	r3, [sp, #16]
 8020abe:	b1bb      	cbz	r3, 8020af0 <_strtod_l+0x620>
 8020ac0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8020ac4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	4659      	mov	r1, fp
 8020acc:	dd10      	ble.n	8020af0 <_strtod_l+0x620>
 8020ace:	2b1f      	cmp	r3, #31
 8020ad0:	f340 8128 	ble.w	8020d24 <_strtod_l+0x854>
 8020ad4:	2b34      	cmp	r3, #52	; 0x34
 8020ad6:	bfde      	ittt	le
 8020ad8:	3b20      	suble	r3, #32
 8020ada:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8020ade:	fa02 f303 	lslle.w	r3, r2, r3
 8020ae2:	f04f 0a00 	mov.w	sl, #0
 8020ae6:	bfcc      	ite	gt
 8020ae8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8020aec:	ea03 0b01 	andle.w	fp, r3, r1
 8020af0:	2200      	movs	r2, #0
 8020af2:	2300      	movs	r3, #0
 8020af4:	4650      	mov	r0, sl
 8020af6:	4659      	mov	r1, fp
 8020af8:	f7df ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8020afc:	2800      	cmp	r0, #0
 8020afe:	d1a4      	bne.n	8020a4a <_strtod_l+0x57a>
 8020b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b02:	9300      	str	r3, [sp, #0]
 8020b04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020b06:	462b      	mov	r3, r5
 8020b08:	463a      	mov	r2, r7
 8020b0a:	4620      	mov	r0, r4
 8020b0c:	f001 fe60 	bl	80227d0 <__s2b>
 8020b10:	9009      	str	r0, [sp, #36]	; 0x24
 8020b12:	2800      	cmp	r0, #0
 8020b14:	f43f af24 	beq.w	8020960 <_strtod_l+0x490>
 8020b18:	9b07      	ldr	r3, [sp, #28]
 8020b1a:	1b9e      	subs	r6, r3, r6
 8020b1c:	9b08      	ldr	r3, [sp, #32]
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	bfb4      	ite	lt
 8020b22:	4633      	movlt	r3, r6
 8020b24:	2300      	movge	r3, #0
 8020b26:	9310      	str	r3, [sp, #64]	; 0x40
 8020b28:	9b08      	ldr	r3, [sp, #32]
 8020b2a:	2500      	movs	r5, #0
 8020b2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020b30:	9318      	str	r3, [sp, #96]	; 0x60
 8020b32:	462e      	mov	r6, r5
 8020b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b36:	4620      	mov	r0, r4
 8020b38:	6859      	ldr	r1, [r3, #4]
 8020b3a:	f001 fd9d 	bl	8022678 <_Balloc>
 8020b3e:	9007      	str	r0, [sp, #28]
 8020b40:	2800      	cmp	r0, #0
 8020b42:	f43f af11 	beq.w	8020968 <_strtod_l+0x498>
 8020b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b48:	691a      	ldr	r2, [r3, #16]
 8020b4a:	3202      	adds	r2, #2
 8020b4c:	f103 010c 	add.w	r1, r3, #12
 8020b50:	0092      	lsls	r2, r2, #2
 8020b52:	300c      	adds	r0, #12
 8020b54:	f7fe fc64 	bl	801f420 <memcpy>
 8020b58:	ec4b ab10 	vmov	d0, sl, fp
 8020b5c:	aa20      	add	r2, sp, #128	; 0x80
 8020b5e:	a91f      	add	r1, sp, #124	; 0x7c
 8020b60:	4620      	mov	r0, r4
 8020b62:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8020b66:	f002 f96f 	bl	8022e48 <__d2b>
 8020b6a:	901e      	str	r0, [sp, #120]	; 0x78
 8020b6c:	2800      	cmp	r0, #0
 8020b6e:	f43f aefb 	beq.w	8020968 <_strtod_l+0x498>
 8020b72:	2101      	movs	r1, #1
 8020b74:	4620      	mov	r0, r4
 8020b76:	f001 fec5 	bl	8022904 <__i2b>
 8020b7a:	4606      	mov	r6, r0
 8020b7c:	2800      	cmp	r0, #0
 8020b7e:	f43f aef3 	beq.w	8020968 <_strtod_l+0x498>
 8020b82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b84:	9904      	ldr	r1, [sp, #16]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	bfab      	itete	ge
 8020b8a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8020b8c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8020b8e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8020b90:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8020b94:	bfac      	ite	ge
 8020b96:	eb03 0902 	addge.w	r9, r3, r2
 8020b9a:	1ad7      	sublt	r7, r2, r3
 8020b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020b9e:	eba3 0801 	sub.w	r8, r3, r1
 8020ba2:	4490      	add	r8, r2
 8020ba4:	4ba3      	ldr	r3, [pc, #652]	; (8020e34 <_strtod_l+0x964>)
 8020ba6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8020baa:	4598      	cmp	r8, r3
 8020bac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020bb0:	f280 80cc 	bge.w	8020d4c <_strtod_l+0x87c>
 8020bb4:	eba3 0308 	sub.w	r3, r3, r8
 8020bb8:	2b1f      	cmp	r3, #31
 8020bba:	eba2 0203 	sub.w	r2, r2, r3
 8020bbe:	f04f 0101 	mov.w	r1, #1
 8020bc2:	f300 80b6 	bgt.w	8020d32 <_strtod_l+0x862>
 8020bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8020bca:	9311      	str	r3, [sp, #68]	; 0x44
 8020bcc:	2300      	movs	r3, #0
 8020bce:	930c      	str	r3, [sp, #48]	; 0x30
 8020bd0:	eb09 0802 	add.w	r8, r9, r2
 8020bd4:	9b04      	ldr	r3, [sp, #16]
 8020bd6:	45c1      	cmp	r9, r8
 8020bd8:	4417      	add	r7, r2
 8020bda:	441f      	add	r7, r3
 8020bdc:	464b      	mov	r3, r9
 8020bde:	bfa8      	it	ge
 8020be0:	4643      	movge	r3, r8
 8020be2:	42bb      	cmp	r3, r7
 8020be4:	bfa8      	it	ge
 8020be6:	463b      	movge	r3, r7
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	bfc2      	ittt	gt
 8020bec:	eba8 0803 	subgt.w	r8, r8, r3
 8020bf0:	1aff      	subgt	r7, r7, r3
 8020bf2:	eba9 0903 	subgt.w	r9, r9, r3
 8020bf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	dd17      	ble.n	8020c2c <_strtod_l+0x75c>
 8020bfc:	4631      	mov	r1, r6
 8020bfe:	461a      	mov	r2, r3
 8020c00:	4620      	mov	r0, r4
 8020c02:	f001 ff3b 	bl	8022a7c <__pow5mult>
 8020c06:	4606      	mov	r6, r0
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	f43f aead 	beq.w	8020968 <_strtod_l+0x498>
 8020c0e:	4601      	mov	r1, r0
 8020c10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020c12:	4620      	mov	r0, r4
 8020c14:	f001 fe8c 	bl	8022930 <__multiply>
 8020c18:	900f      	str	r0, [sp, #60]	; 0x3c
 8020c1a:	2800      	cmp	r0, #0
 8020c1c:	f43f aea4 	beq.w	8020968 <_strtod_l+0x498>
 8020c20:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020c22:	4620      	mov	r0, r4
 8020c24:	f001 fd68 	bl	80226f8 <_Bfree>
 8020c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c2a:	931e      	str	r3, [sp, #120]	; 0x78
 8020c2c:	f1b8 0f00 	cmp.w	r8, #0
 8020c30:	f300 8091 	bgt.w	8020d56 <_strtod_l+0x886>
 8020c34:	9b08      	ldr	r3, [sp, #32]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	dd08      	ble.n	8020c4c <_strtod_l+0x77c>
 8020c3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020c3c:	9907      	ldr	r1, [sp, #28]
 8020c3e:	4620      	mov	r0, r4
 8020c40:	f001 ff1c 	bl	8022a7c <__pow5mult>
 8020c44:	9007      	str	r0, [sp, #28]
 8020c46:	2800      	cmp	r0, #0
 8020c48:	f43f ae8e 	beq.w	8020968 <_strtod_l+0x498>
 8020c4c:	2f00      	cmp	r7, #0
 8020c4e:	dd08      	ble.n	8020c62 <_strtod_l+0x792>
 8020c50:	9907      	ldr	r1, [sp, #28]
 8020c52:	463a      	mov	r2, r7
 8020c54:	4620      	mov	r0, r4
 8020c56:	f001 ff6b 	bl	8022b30 <__lshift>
 8020c5a:	9007      	str	r0, [sp, #28]
 8020c5c:	2800      	cmp	r0, #0
 8020c5e:	f43f ae83 	beq.w	8020968 <_strtod_l+0x498>
 8020c62:	f1b9 0f00 	cmp.w	r9, #0
 8020c66:	dd08      	ble.n	8020c7a <_strtod_l+0x7aa>
 8020c68:	4631      	mov	r1, r6
 8020c6a:	464a      	mov	r2, r9
 8020c6c:	4620      	mov	r0, r4
 8020c6e:	f001 ff5f 	bl	8022b30 <__lshift>
 8020c72:	4606      	mov	r6, r0
 8020c74:	2800      	cmp	r0, #0
 8020c76:	f43f ae77 	beq.w	8020968 <_strtod_l+0x498>
 8020c7a:	9a07      	ldr	r2, [sp, #28]
 8020c7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020c7e:	4620      	mov	r0, r4
 8020c80:	f001 ffde 	bl	8022c40 <__mdiff>
 8020c84:	4605      	mov	r5, r0
 8020c86:	2800      	cmp	r0, #0
 8020c88:	f43f ae6e 	beq.w	8020968 <_strtod_l+0x498>
 8020c8c:	68c3      	ldr	r3, [r0, #12]
 8020c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c90:	2300      	movs	r3, #0
 8020c92:	60c3      	str	r3, [r0, #12]
 8020c94:	4631      	mov	r1, r6
 8020c96:	f001 ffb7 	bl	8022c08 <__mcmp>
 8020c9a:	2800      	cmp	r0, #0
 8020c9c:	da65      	bge.n	8020d6a <_strtod_l+0x89a>
 8020c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020ca0:	ea53 030a 	orrs.w	r3, r3, sl
 8020ca4:	f040 8087 	bne.w	8020db6 <_strtod_l+0x8e6>
 8020ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	f040 8082 	bne.w	8020db6 <_strtod_l+0x8e6>
 8020cb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020cb6:	0d1b      	lsrs	r3, r3, #20
 8020cb8:	051b      	lsls	r3, r3, #20
 8020cba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8020cbe:	d97a      	bls.n	8020db6 <_strtod_l+0x8e6>
 8020cc0:	696b      	ldr	r3, [r5, #20]
 8020cc2:	b913      	cbnz	r3, 8020cca <_strtod_l+0x7fa>
 8020cc4:	692b      	ldr	r3, [r5, #16]
 8020cc6:	2b01      	cmp	r3, #1
 8020cc8:	dd75      	ble.n	8020db6 <_strtod_l+0x8e6>
 8020cca:	4629      	mov	r1, r5
 8020ccc:	2201      	movs	r2, #1
 8020cce:	4620      	mov	r0, r4
 8020cd0:	f001 ff2e 	bl	8022b30 <__lshift>
 8020cd4:	4631      	mov	r1, r6
 8020cd6:	4605      	mov	r5, r0
 8020cd8:	f001 ff96 	bl	8022c08 <__mcmp>
 8020cdc:	2800      	cmp	r0, #0
 8020cde:	dd6a      	ble.n	8020db6 <_strtod_l+0x8e6>
 8020ce0:	9904      	ldr	r1, [sp, #16]
 8020ce2:	4a55      	ldr	r2, [pc, #340]	; (8020e38 <_strtod_l+0x968>)
 8020ce4:	465b      	mov	r3, fp
 8020ce6:	2900      	cmp	r1, #0
 8020ce8:	f000 8085 	beq.w	8020df6 <_strtod_l+0x926>
 8020cec:	ea02 010b 	and.w	r1, r2, fp
 8020cf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020cf4:	dc7f      	bgt.n	8020df6 <_strtod_l+0x926>
 8020cf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020cfa:	f77f aeaa 	ble.w	8020a52 <_strtod_l+0x582>
 8020cfe:	4a4f      	ldr	r2, [pc, #316]	; (8020e3c <_strtod_l+0x96c>)
 8020d00:	2300      	movs	r3, #0
 8020d02:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020d06:	4650      	mov	r0, sl
 8020d08:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8020d0c:	4659      	mov	r1, fp
 8020d0e:	f7df fc73 	bl	80005f8 <__aeabi_dmul>
 8020d12:	460b      	mov	r3, r1
 8020d14:	4303      	orrs	r3, r0
 8020d16:	bf08      	it	eq
 8020d18:	2322      	moveq	r3, #34	; 0x22
 8020d1a:	4682      	mov	sl, r0
 8020d1c:	468b      	mov	fp, r1
 8020d1e:	bf08      	it	eq
 8020d20:	6023      	streq	r3, [r4, #0]
 8020d22:	e62b      	b.n	802097c <_strtod_l+0x4ac>
 8020d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020d28:	fa02 f303 	lsl.w	r3, r2, r3
 8020d2c:	ea03 0a0a 	and.w	sl, r3, sl
 8020d30:	e6de      	b.n	8020af0 <_strtod_l+0x620>
 8020d32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020d36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8020d3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8020d3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8020d42:	fa01 f308 	lsl.w	r3, r1, r8
 8020d46:	930c      	str	r3, [sp, #48]	; 0x30
 8020d48:	9111      	str	r1, [sp, #68]	; 0x44
 8020d4a:	e741      	b.n	8020bd0 <_strtod_l+0x700>
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8020d50:	2301      	movs	r3, #1
 8020d52:	9311      	str	r3, [sp, #68]	; 0x44
 8020d54:	e73c      	b.n	8020bd0 <_strtod_l+0x700>
 8020d56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020d58:	4642      	mov	r2, r8
 8020d5a:	4620      	mov	r0, r4
 8020d5c:	f001 fee8 	bl	8022b30 <__lshift>
 8020d60:	901e      	str	r0, [sp, #120]	; 0x78
 8020d62:	2800      	cmp	r0, #0
 8020d64:	f47f af66 	bne.w	8020c34 <_strtod_l+0x764>
 8020d68:	e5fe      	b.n	8020968 <_strtod_l+0x498>
 8020d6a:	465f      	mov	r7, fp
 8020d6c:	d16e      	bne.n	8020e4c <_strtod_l+0x97c>
 8020d6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020d74:	b342      	cbz	r2, 8020dc8 <_strtod_l+0x8f8>
 8020d76:	4a32      	ldr	r2, [pc, #200]	; (8020e40 <_strtod_l+0x970>)
 8020d78:	4293      	cmp	r3, r2
 8020d7a:	d128      	bne.n	8020dce <_strtod_l+0x8fe>
 8020d7c:	9b04      	ldr	r3, [sp, #16]
 8020d7e:	4650      	mov	r0, sl
 8020d80:	b1eb      	cbz	r3, 8020dbe <_strtod_l+0x8ee>
 8020d82:	4a2d      	ldr	r2, [pc, #180]	; (8020e38 <_strtod_l+0x968>)
 8020d84:	403a      	ands	r2, r7
 8020d86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8020d8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020d8e:	d819      	bhi.n	8020dc4 <_strtod_l+0x8f4>
 8020d90:	0d12      	lsrs	r2, r2, #20
 8020d92:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020d96:	fa01 f303 	lsl.w	r3, r1, r3
 8020d9a:	4298      	cmp	r0, r3
 8020d9c:	d117      	bne.n	8020dce <_strtod_l+0x8fe>
 8020d9e:	4b29      	ldr	r3, [pc, #164]	; (8020e44 <_strtod_l+0x974>)
 8020da0:	429f      	cmp	r7, r3
 8020da2:	d102      	bne.n	8020daa <_strtod_l+0x8da>
 8020da4:	3001      	adds	r0, #1
 8020da6:	f43f addf 	beq.w	8020968 <_strtod_l+0x498>
 8020daa:	4b23      	ldr	r3, [pc, #140]	; (8020e38 <_strtod_l+0x968>)
 8020dac:	403b      	ands	r3, r7
 8020dae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020db2:	f04f 0a00 	mov.w	sl, #0
 8020db6:	9b04      	ldr	r3, [sp, #16]
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d1a0      	bne.n	8020cfe <_strtod_l+0x82e>
 8020dbc:	e5de      	b.n	802097c <_strtod_l+0x4ac>
 8020dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020dc2:	e7ea      	b.n	8020d9a <_strtod_l+0x8ca>
 8020dc4:	460b      	mov	r3, r1
 8020dc6:	e7e8      	b.n	8020d9a <_strtod_l+0x8ca>
 8020dc8:	ea53 030a 	orrs.w	r3, r3, sl
 8020dcc:	d088      	beq.n	8020ce0 <_strtod_l+0x810>
 8020dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020dd0:	b1db      	cbz	r3, 8020e0a <_strtod_l+0x93a>
 8020dd2:	423b      	tst	r3, r7
 8020dd4:	d0ef      	beq.n	8020db6 <_strtod_l+0x8e6>
 8020dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020dd8:	9a04      	ldr	r2, [sp, #16]
 8020dda:	4650      	mov	r0, sl
 8020ddc:	4659      	mov	r1, fp
 8020dde:	b1c3      	cbz	r3, 8020e12 <_strtod_l+0x942>
 8020de0:	f7ff fb5a 	bl	8020498 <sulp>
 8020de4:	4602      	mov	r2, r0
 8020de6:	460b      	mov	r3, r1
 8020de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020dec:	f7df fa4e 	bl	800028c <__adddf3>
 8020df0:	4682      	mov	sl, r0
 8020df2:	468b      	mov	fp, r1
 8020df4:	e7df      	b.n	8020db6 <_strtod_l+0x8e6>
 8020df6:	4013      	ands	r3, r2
 8020df8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8020dfc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020e00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020e04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020e08:	e7d5      	b.n	8020db6 <_strtod_l+0x8e6>
 8020e0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020e0c:	ea13 0f0a 	tst.w	r3, sl
 8020e10:	e7e0      	b.n	8020dd4 <_strtod_l+0x904>
 8020e12:	f7ff fb41 	bl	8020498 <sulp>
 8020e16:	4602      	mov	r2, r0
 8020e18:	460b      	mov	r3, r1
 8020e1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020e1e:	f7df fa33 	bl	8000288 <__aeabi_dsub>
 8020e22:	2200      	movs	r2, #0
 8020e24:	2300      	movs	r3, #0
 8020e26:	4682      	mov	sl, r0
 8020e28:	468b      	mov	fp, r1
 8020e2a:	f7df fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8020e2e:	2800      	cmp	r0, #0
 8020e30:	d0c1      	beq.n	8020db6 <_strtod_l+0x8e6>
 8020e32:	e60e      	b.n	8020a52 <_strtod_l+0x582>
 8020e34:	fffffc02 	.word	0xfffffc02
 8020e38:	7ff00000 	.word	0x7ff00000
 8020e3c:	39500000 	.word	0x39500000
 8020e40:	000fffff 	.word	0x000fffff
 8020e44:	7fefffff 	.word	0x7fefffff
 8020e48:	08025db0 	.word	0x08025db0
 8020e4c:	4631      	mov	r1, r6
 8020e4e:	4628      	mov	r0, r5
 8020e50:	f002 f856 	bl	8022f00 <__ratio>
 8020e54:	ec59 8b10 	vmov	r8, r9, d0
 8020e58:	ee10 0a10 	vmov	r0, s0
 8020e5c:	2200      	movs	r2, #0
 8020e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020e62:	4649      	mov	r1, r9
 8020e64:	f7df fe44 	bl	8000af0 <__aeabi_dcmple>
 8020e68:	2800      	cmp	r0, #0
 8020e6a:	d07c      	beq.n	8020f66 <_strtod_l+0xa96>
 8020e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	d04c      	beq.n	8020f0c <_strtod_l+0xa3c>
 8020e72:	4b95      	ldr	r3, [pc, #596]	; (80210c8 <_strtod_l+0xbf8>)
 8020e74:	2200      	movs	r2, #0
 8020e76:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020e7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80210c8 <_strtod_l+0xbf8>
 8020e7e:	f04f 0800 	mov.w	r8, #0
 8020e82:	4b92      	ldr	r3, [pc, #584]	; (80210cc <_strtod_l+0xbfc>)
 8020e84:	403b      	ands	r3, r7
 8020e86:	9311      	str	r3, [sp, #68]	; 0x44
 8020e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e8a:	4b91      	ldr	r3, [pc, #580]	; (80210d0 <_strtod_l+0xc00>)
 8020e8c:	429a      	cmp	r2, r3
 8020e8e:	f040 80b2 	bne.w	8020ff6 <_strtod_l+0xb26>
 8020e92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020e9a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8020e9e:	ec4b ab10 	vmov	d0, sl, fp
 8020ea2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8020ea6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020eaa:	f001 ff51 	bl	8022d50 <__ulp>
 8020eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020eb2:	ec53 2b10 	vmov	r2, r3, d0
 8020eb6:	f7df fb9f 	bl	80005f8 <__aeabi_dmul>
 8020eba:	4652      	mov	r2, sl
 8020ebc:	465b      	mov	r3, fp
 8020ebe:	f7df f9e5 	bl	800028c <__adddf3>
 8020ec2:	460b      	mov	r3, r1
 8020ec4:	4981      	ldr	r1, [pc, #516]	; (80210cc <_strtod_l+0xbfc>)
 8020ec6:	4a83      	ldr	r2, [pc, #524]	; (80210d4 <_strtod_l+0xc04>)
 8020ec8:	4019      	ands	r1, r3
 8020eca:	4291      	cmp	r1, r2
 8020ecc:	4682      	mov	sl, r0
 8020ece:	d95e      	bls.n	8020f8e <_strtod_l+0xabe>
 8020ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ed2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020ed6:	4293      	cmp	r3, r2
 8020ed8:	d103      	bne.n	8020ee2 <_strtod_l+0xa12>
 8020eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020edc:	3301      	adds	r3, #1
 8020ede:	f43f ad43 	beq.w	8020968 <_strtod_l+0x498>
 8020ee2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80210e0 <_strtod_l+0xc10>
 8020ee6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020eea:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020eec:	4620      	mov	r0, r4
 8020eee:	f001 fc03 	bl	80226f8 <_Bfree>
 8020ef2:	9907      	ldr	r1, [sp, #28]
 8020ef4:	4620      	mov	r0, r4
 8020ef6:	f001 fbff 	bl	80226f8 <_Bfree>
 8020efa:	4631      	mov	r1, r6
 8020efc:	4620      	mov	r0, r4
 8020efe:	f001 fbfb 	bl	80226f8 <_Bfree>
 8020f02:	4629      	mov	r1, r5
 8020f04:	4620      	mov	r0, r4
 8020f06:	f001 fbf7 	bl	80226f8 <_Bfree>
 8020f0a:	e613      	b.n	8020b34 <_strtod_l+0x664>
 8020f0c:	f1ba 0f00 	cmp.w	sl, #0
 8020f10:	d11b      	bne.n	8020f4a <_strtod_l+0xa7a>
 8020f12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020f16:	b9f3      	cbnz	r3, 8020f56 <_strtod_l+0xa86>
 8020f18:	4b6b      	ldr	r3, [pc, #428]	; (80210c8 <_strtod_l+0xbf8>)
 8020f1a:	2200      	movs	r2, #0
 8020f1c:	4640      	mov	r0, r8
 8020f1e:	4649      	mov	r1, r9
 8020f20:	f7df fddc 	bl	8000adc <__aeabi_dcmplt>
 8020f24:	b9d0      	cbnz	r0, 8020f5c <_strtod_l+0xa8c>
 8020f26:	4640      	mov	r0, r8
 8020f28:	4649      	mov	r1, r9
 8020f2a:	4b6b      	ldr	r3, [pc, #428]	; (80210d8 <_strtod_l+0xc08>)
 8020f2c:	2200      	movs	r2, #0
 8020f2e:	f7df fb63 	bl	80005f8 <__aeabi_dmul>
 8020f32:	4680      	mov	r8, r0
 8020f34:	4689      	mov	r9, r1
 8020f36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020f3a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8020f3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020f40:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020f44:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020f48:	e79b      	b.n	8020e82 <_strtod_l+0x9b2>
 8020f4a:	f1ba 0f01 	cmp.w	sl, #1
 8020f4e:	d102      	bne.n	8020f56 <_strtod_l+0xa86>
 8020f50:	2f00      	cmp	r7, #0
 8020f52:	f43f ad7e 	beq.w	8020a52 <_strtod_l+0x582>
 8020f56:	4b61      	ldr	r3, [pc, #388]	; (80210dc <_strtod_l+0xc0c>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	e78c      	b.n	8020e76 <_strtod_l+0x9a6>
 8020f5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80210d8 <_strtod_l+0xc08>
 8020f60:	f04f 0800 	mov.w	r8, #0
 8020f64:	e7e7      	b.n	8020f36 <_strtod_l+0xa66>
 8020f66:	4b5c      	ldr	r3, [pc, #368]	; (80210d8 <_strtod_l+0xc08>)
 8020f68:	4640      	mov	r0, r8
 8020f6a:	4649      	mov	r1, r9
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	f7df fb43 	bl	80005f8 <__aeabi_dmul>
 8020f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f74:	4680      	mov	r8, r0
 8020f76:	4689      	mov	r9, r1
 8020f78:	b933      	cbnz	r3, 8020f88 <_strtod_l+0xab8>
 8020f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020f7e:	9012      	str	r0, [sp, #72]	; 0x48
 8020f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8020f82:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8020f86:	e7dd      	b.n	8020f44 <_strtod_l+0xa74>
 8020f88:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8020f8c:	e7f9      	b.n	8020f82 <_strtod_l+0xab2>
 8020f8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020f92:	9b04      	ldr	r3, [sp, #16]
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d1a8      	bne.n	8020eea <_strtod_l+0xa1a>
 8020f98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f9e:	0d1b      	lsrs	r3, r3, #20
 8020fa0:	051b      	lsls	r3, r3, #20
 8020fa2:	429a      	cmp	r2, r3
 8020fa4:	d1a1      	bne.n	8020eea <_strtod_l+0xa1a>
 8020fa6:	4640      	mov	r0, r8
 8020fa8:	4649      	mov	r1, r9
 8020faa:	f7df fe85 	bl	8000cb8 <__aeabi_d2lz>
 8020fae:	f7df faf5 	bl	800059c <__aeabi_l2d>
 8020fb2:	4602      	mov	r2, r0
 8020fb4:	460b      	mov	r3, r1
 8020fb6:	4640      	mov	r0, r8
 8020fb8:	4649      	mov	r1, r9
 8020fba:	f7df f965 	bl	8000288 <__aeabi_dsub>
 8020fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020fc4:	ea43 030a 	orr.w	r3, r3, sl
 8020fc8:	4313      	orrs	r3, r2
 8020fca:	4680      	mov	r8, r0
 8020fcc:	4689      	mov	r9, r1
 8020fce:	d053      	beq.n	8021078 <_strtod_l+0xba8>
 8020fd0:	a335      	add	r3, pc, #212	; (adr r3, 80210a8 <_strtod_l+0xbd8>)
 8020fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fd6:	f7df fd81 	bl	8000adc <__aeabi_dcmplt>
 8020fda:	2800      	cmp	r0, #0
 8020fdc:	f47f acce 	bne.w	802097c <_strtod_l+0x4ac>
 8020fe0:	a333      	add	r3, pc, #204	; (adr r3, 80210b0 <_strtod_l+0xbe0>)
 8020fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fe6:	4640      	mov	r0, r8
 8020fe8:	4649      	mov	r1, r9
 8020fea:	f7df fd95 	bl	8000b18 <__aeabi_dcmpgt>
 8020fee:	2800      	cmp	r0, #0
 8020ff0:	f43f af7b 	beq.w	8020eea <_strtod_l+0xa1a>
 8020ff4:	e4c2      	b.n	802097c <_strtod_l+0x4ac>
 8020ff6:	9b04      	ldr	r3, [sp, #16]
 8020ff8:	b333      	cbz	r3, 8021048 <_strtod_l+0xb78>
 8020ffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ffc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8021000:	d822      	bhi.n	8021048 <_strtod_l+0xb78>
 8021002:	a32d      	add	r3, pc, #180	; (adr r3, 80210b8 <_strtod_l+0xbe8>)
 8021004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021008:	4640      	mov	r0, r8
 802100a:	4649      	mov	r1, r9
 802100c:	f7df fd70 	bl	8000af0 <__aeabi_dcmple>
 8021010:	b1a0      	cbz	r0, 802103c <_strtod_l+0xb6c>
 8021012:	4649      	mov	r1, r9
 8021014:	4640      	mov	r0, r8
 8021016:	f7df fdc7 	bl	8000ba8 <__aeabi_d2uiz>
 802101a:	2801      	cmp	r0, #1
 802101c:	bf38      	it	cc
 802101e:	2001      	movcc	r0, #1
 8021020:	f7df fa70 	bl	8000504 <__aeabi_ui2d>
 8021024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021026:	4680      	mov	r8, r0
 8021028:	4689      	mov	r9, r1
 802102a:	bb13      	cbnz	r3, 8021072 <_strtod_l+0xba2>
 802102c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021030:	9014      	str	r0, [sp, #80]	; 0x50
 8021032:	9315      	str	r3, [sp, #84]	; 0x54
 8021034:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8021038:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802103c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802103e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021040:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8021044:	1a9b      	subs	r3, r3, r2
 8021046:	930d      	str	r3, [sp, #52]	; 0x34
 8021048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802104c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8021050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8021054:	f001 fe7c 	bl	8022d50 <__ulp>
 8021058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802105c:	ec53 2b10 	vmov	r2, r3, d0
 8021060:	f7df faca 	bl	80005f8 <__aeabi_dmul>
 8021064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021068:	f7df f910 	bl	800028c <__adddf3>
 802106c:	4682      	mov	sl, r0
 802106e:	468b      	mov	fp, r1
 8021070:	e78f      	b.n	8020f92 <_strtod_l+0xac2>
 8021072:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8021076:	e7dd      	b.n	8021034 <_strtod_l+0xb64>
 8021078:	a311      	add	r3, pc, #68	; (adr r3, 80210c0 <_strtod_l+0xbf0>)
 802107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802107e:	f7df fd2d 	bl	8000adc <__aeabi_dcmplt>
 8021082:	e7b4      	b.n	8020fee <_strtod_l+0xb1e>
 8021084:	2300      	movs	r3, #0
 8021086:	930e      	str	r3, [sp, #56]	; 0x38
 8021088:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802108a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802108c:	6013      	str	r3, [r2, #0]
 802108e:	f7ff ba65 	b.w	802055c <_strtod_l+0x8c>
 8021092:	2b65      	cmp	r3, #101	; 0x65
 8021094:	f43f ab5d 	beq.w	8020752 <_strtod_l+0x282>
 8021098:	2b45      	cmp	r3, #69	; 0x45
 802109a:	f43f ab5a 	beq.w	8020752 <_strtod_l+0x282>
 802109e:	2201      	movs	r2, #1
 80210a0:	f7ff bb92 	b.w	80207c8 <_strtod_l+0x2f8>
 80210a4:	f3af 8000 	nop.w
 80210a8:	94a03595 	.word	0x94a03595
 80210ac:	3fdfffff 	.word	0x3fdfffff
 80210b0:	35afe535 	.word	0x35afe535
 80210b4:	3fe00000 	.word	0x3fe00000
 80210b8:	ffc00000 	.word	0xffc00000
 80210bc:	41dfffff 	.word	0x41dfffff
 80210c0:	94a03595 	.word	0x94a03595
 80210c4:	3fcfffff 	.word	0x3fcfffff
 80210c8:	3ff00000 	.word	0x3ff00000
 80210cc:	7ff00000 	.word	0x7ff00000
 80210d0:	7fe00000 	.word	0x7fe00000
 80210d4:	7c9fffff 	.word	0x7c9fffff
 80210d8:	3fe00000 	.word	0x3fe00000
 80210dc:	bff00000 	.word	0xbff00000
 80210e0:	7fefffff 	.word	0x7fefffff

080210e4 <_strtod_r>:
 80210e4:	4b01      	ldr	r3, [pc, #4]	; (80210ec <_strtod_r+0x8>)
 80210e6:	f7ff b9f3 	b.w	80204d0 <_strtod_l>
 80210ea:	bf00      	nop
 80210ec:	2000012c 	.word	0x2000012c

080210f0 <_strtol_l.isra.0>:
 80210f0:	2b01      	cmp	r3, #1
 80210f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80210f6:	d001      	beq.n	80210fc <_strtol_l.isra.0+0xc>
 80210f8:	2b24      	cmp	r3, #36	; 0x24
 80210fa:	d906      	bls.n	802110a <_strtol_l.isra.0+0x1a>
 80210fc:	f7fe f95e 	bl	801f3bc <__errno>
 8021100:	2316      	movs	r3, #22
 8021102:	6003      	str	r3, [r0, #0]
 8021104:	2000      	movs	r0, #0
 8021106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802110a:	4f3a      	ldr	r7, [pc, #232]	; (80211f4 <_strtol_l.isra.0+0x104>)
 802110c:	468e      	mov	lr, r1
 802110e:	4676      	mov	r6, lr
 8021110:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021114:	5de5      	ldrb	r5, [r4, r7]
 8021116:	f015 0508 	ands.w	r5, r5, #8
 802111a:	d1f8      	bne.n	802110e <_strtol_l.isra.0+0x1e>
 802111c:	2c2d      	cmp	r4, #45	; 0x2d
 802111e:	d134      	bne.n	802118a <_strtol_l.isra.0+0x9a>
 8021120:	f89e 4000 	ldrb.w	r4, [lr]
 8021124:	f04f 0801 	mov.w	r8, #1
 8021128:	f106 0e02 	add.w	lr, r6, #2
 802112c:	2b00      	cmp	r3, #0
 802112e:	d05c      	beq.n	80211ea <_strtol_l.isra.0+0xfa>
 8021130:	2b10      	cmp	r3, #16
 8021132:	d10c      	bne.n	802114e <_strtol_l.isra.0+0x5e>
 8021134:	2c30      	cmp	r4, #48	; 0x30
 8021136:	d10a      	bne.n	802114e <_strtol_l.isra.0+0x5e>
 8021138:	f89e 4000 	ldrb.w	r4, [lr]
 802113c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021140:	2c58      	cmp	r4, #88	; 0x58
 8021142:	d14d      	bne.n	80211e0 <_strtol_l.isra.0+0xf0>
 8021144:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021148:	2310      	movs	r3, #16
 802114a:	f10e 0e02 	add.w	lr, lr, #2
 802114e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021152:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8021156:	2600      	movs	r6, #0
 8021158:	fbbc f9f3 	udiv	r9, ip, r3
 802115c:	4635      	mov	r5, r6
 802115e:	fb03 ca19 	mls	sl, r3, r9, ip
 8021162:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021166:	2f09      	cmp	r7, #9
 8021168:	d818      	bhi.n	802119c <_strtol_l.isra.0+0xac>
 802116a:	463c      	mov	r4, r7
 802116c:	42a3      	cmp	r3, r4
 802116e:	dd24      	ble.n	80211ba <_strtol_l.isra.0+0xca>
 8021170:	2e00      	cmp	r6, #0
 8021172:	db1f      	blt.n	80211b4 <_strtol_l.isra.0+0xc4>
 8021174:	45a9      	cmp	r9, r5
 8021176:	d31d      	bcc.n	80211b4 <_strtol_l.isra.0+0xc4>
 8021178:	d101      	bne.n	802117e <_strtol_l.isra.0+0x8e>
 802117a:	45a2      	cmp	sl, r4
 802117c:	db1a      	blt.n	80211b4 <_strtol_l.isra.0+0xc4>
 802117e:	fb05 4503 	mla	r5, r5, r3, r4
 8021182:	2601      	movs	r6, #1
 8021184:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021188:	e7eb      	b.n	8021162 <_strtol_l.isra.0+0x72>
 802118a:	2c2b      	cmp	r4, #43	; 0x2b
 802118c:	bf08      	it	eq
 802118e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021192:	46a8      	mov	r8, r5
 8021194:	bf08      	it	eq
 8021196:	f106 0e02 	addeq.w	lr, r6, #2
 802119a:	e7c7      	b.n	802112c <_strtol_l.isra.0+0x3c>
 802119c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80211a0:	2f19      	cmp	r7, #25
 80211a2:	d801      	bhi.n	80211a8 <_strtol_l.isra.0+0xb8>
 80211a4:	3c37      	subs	r4, #55	; 0x37
 80211a6:	e7e1      	b.n	802116c <_strtol_l.isra.0+0x7c>
 80211a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80211ac:	2f19      	cmp	r7, #25
 80211ae:	d804      	bhi.n	80211ba <_strtol_l.isra.0+0xca>
 80211b0:	3c57      	subs	r4, #87	; 0x57
 80211b2:	e7db      	b.n	802116c <_strtol_l.isra.0+0x7c>
 80211b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80211b8:	e7e4      	b.n	8021184 <_strtol_l.isra.0+0x94>
 80211ba:	2e00      	cmp	r6, #0
 80211bc:	da05      	bge.n	80211ca <_strtol_l.isra.0+0xda>
 80211be:	2322      	movs	r3, #34	; 0x22
 80211c0:	6003      	str	r3, [r0, #0]
 80211c2:	4665      	mov	r5, ip
 80211c4:	b942      	cbnz	r2, 80211d8 <_strtol_l.isra.0+0xe8>
 80211c6:	4628      	mov	r0, r5
 80211c8:	e79d      	b.n	8021106 <_strtol_l.isra.0+0x16>
 80211ca:	f1b8 0f00 	cmp.w	r8, #0
 80211ce:	d000      	beq.n	80211d2 <_strtol_l.isra.0+0xe2>
 80211d0:	426d      	negs	r5, r5
 80211d2:	2a00      	cmp	r2, #0
 80211d4:	d0f7      	beq.n	80211c6 <_strtol_l.isra.0+0xd6>
 80211d6:	b10e      	cbz	r6, 80211dc <_strtol_l.isra.0+0xec>
 80211d8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80211dc:	6011      	str	r1, [r2, #0]
 80211de:	e7f2      	b.n	80211c6 <_strtol_l.isra.0+0xd6>
 80211e0:	2430      	movs	r4, #48	; 0x30
 80211e2:	2b00      	cmp	r3, #0
 80211e4:	d1b3      	bne.n	802114e <_strtol_l.isra.0+0x5e>
 80211e6:	2308      	movs	r3, #8
 80211e8:	e7b1      	b.n	802114e <_strtol_l.isra.0+0x5e>
 80211ea:	2c30      	cmp	r4, #48	; 0x30
 80211ec:	d0a4      	beq.n	8021138 <_strtol_l.isra.0+0x48>
 80211ee:	230a      	movs	r3, #10
 80211f0:	e7ad      	b.n	802114e <_strtol_l.isra.0+0x5e>
 80211f2:	bf00      	nop
 80211f4:	08025dd9 	.word	0x08025dd9

080211f8 <_strtol_r>:
 80211f8:	f7ff bf7a 	b.w	80210f0 <_strtol_l.isra.0>

080211fc <_write_r>:
 80211fc:	b538      	push	{r3, r4, r5, lr}
 80211fe:	4d07      	ldr	r5, [pc, #28]	; (802121c <_write_r+0x20>)
 8021200:	4604      	mov	r4, r0
 8021202:	4608      	mov	r0, r1
 8021204:	4611      	mov	r1, r2
 8021206:	2200      	movs	r2, #0
 8021208:	602a      	str	r2, [r5, #0]
 802120a:	461a      	mov	r2, r3
 802120c:	f7ed fe07 	bl	800ee1e <_write>
 8021210:	1c43      	adds	r3, r0, #1
 8021212:	d102      	bne.n	802121a <_write_r+0x1e>
 8021214:	682b      	ldr	r3, [r5, #0]
 8021216:	b103      	cbz	r3, 802121a <_write_r+0x1e>
 8021218:	6023      	str	r3, [r4, #0]
 802121a:	bd38      	pop	{r3, r4, r5, pc}
 802121c:	2000a94c 	.word	0x2000a94c

08021220 <_close_r>:
 8021220:	b538      	push	{r3, r4, r5, lr}
 8021222:	4d06      	ldr	r5, [pc, #24]	; (802123c <_close_r+0x1c>)
 8021224:	2300      	movs	r3, #0
 8021226:	4604      	mov	r4, r0
 8021228:	4608      	mov	r0, r1
 802122a:	602b      	str	r3, [r5, #0]
 802122c:	f7ed fe13 	bl	800ee56 <_close>
 8021230:	1c43      	adds	r3, r0, #1
 8021232:	d102      	bne.n	802123a <_close_r+0x1a>
 8021234:	682b      	ldr	r3, [r5, #0]
 8021236:	b103      	cbz	r3, 802123a <_close_r+0x1a>
 8021238:	6023      	str	r3, [r4, #0]
 802123a:	bd38      	pop	{r3, r4, r5, pc}
 802123c:	2000a94c 	.word	0x2000a94c

08021240 <quorem>:
 8021240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021244:	6903      	ldr	r3, [r0, #16]
 8021246:	690c      	ldr	r4, [r1, #16]
 8021248:	42a3      	cmp	r3, r4
 802124a:	4607      	mov	r7, r0
 802124c:	f2c0 8081 	blt.w	8021352 <quorem+0x112>
 8021250:	3c01      	subs	r4, #1
 8021252:	f101 0814 	add.w	r8, r1, #20
 8021256:	f100 0514 	add.w	r5, r0, #20
 802125a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802125e:	9301      	str	r3, [sp, #4]
 8021260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021268:	3301      	adds	r3, #1
 802126a:	429a      	cmp	r2, r3
 802126c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021274:	fbb2 f6f3 	udiv	r6, r2, r3
 8021278:	d331      	bcc.n	80212de <quorem+0x9e>
 802127a:	f04f 0e00 	mov.w	lr, #0
 802127e:	4640      	mov	r0, r8
 8021280:	46ac      	mov	ip, r5
 8021282:	46f2      	mov	sl, lr
 8021284:	f850 2b04 	ldr.w	r2, [r0], #4
 8021288:	b293      	uxth	r3, r2
 802128a:	fb06 e303 	mla	r3, r6, r3, lr
 802128e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021292:	b29b      	uxth	r3, r3
 8021294:	ebaa 0303 	sub.w	r3, sl, r3
 8021298:	0c12      	lsrs	r2, r2, #16
 802129a:	f8dc a000 	ldr.w	sl, [ip]
 802129e:	fb06 e202 	mla	r2, r6, r2, lr
 80212a2:	fa13 f38a 	uxtah	r3, r3, sl
 80212a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80212aa:	fa1f fa82 	uxth.w	sl, r2
 80212ae:	f8dc 2000 	ldr.w	r2, [ip]
 80212b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80212b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80212ba:	b29b      	uxth	r3, r3
 80212bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80212c0:	4581      	cmp	r9, r0
 80212c2:	f84c 3b04 	str.w	r3, [ip], #4
 80212c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80212ca:	d2db      	bcs.n	8021284 <quorem+0x44>
 80212cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80212d0:	b92b      	cbnz	r3, 80212de <quorem+0x9e>
 80212d2:	9b01      	ldr	r3, [sp, #4]
 80212d4:	3b04      	subs	r3, #4
 80212d6:	429d      	cmp	r5, r3
 80212d8:	461a      	mov	r2, r3
 80212da:	d32e      	bcc.n	802133a <quorem+0xfa>
 80212dc:	613c      	str	r4, [r7, #16]
 80212de:	4638      	mov	r0, r7
 80212e0:	f001 fc92 	bl	8022c08 <__mcmp>
 80212e4:	2800      	cmp	r0, #0
 80212e6:	db24      	blt.n	8021332 <quorem+0xf2>
 80212e8:	3601      	adds	r6, #1
 80212ea:	4628      	mov	r0, r5
 80212ec:	f04f 0c00 	mov.w	ip, #0
 80212f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80212f4:	f8d0 e000 	ldr.w	lr, [r0]
 80212f8:	b293      	uxth	r3, r2
 80212fa:	ebac 0303 	sub.w	r3, ip, r3
 80212fe:	0c12      	lsrs	r2, r2, #16
 8021300:	fa13 f38e 	uxtah	r3, r3, lr
 8021304:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802130c:	b29b      	uxth	r3, r3
 802130e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021312:	45c1      	cmp	r9, r8
 8021314:	f840 3b04 	str.w	r3, [r0], #4
 8021318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802131c:	d2e8      	bcs.n	80212f0 <quorem+0xb0>
 802131e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021326:	b922      	cbnz	r2, 8021332 <quorem+0xf2>
 8021328:	3b04      	subs	r3, #4
 802132a:	429d      	cmp	r5, r3
 802132c:	461a      	mov	r2, r3
 802132e:	d30a      	bcc.n	8021346 <quorem+0x106>
 8021330:	613c      	str	r4, [r7, #16]
 8021332:	4630      	mov	r0, r6
 8021334:	b003      	add	sp, #12
 8021336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802133a:	6812      	ldr	r2, [r2, #0]
 802133c:	3b04      	subs	r3, #4
 802133e:	2a00      	cmp	r2, #0
 8021340:	d1cc      	bne.n	80212dc <quorem+0x9c>
 8021342:	3c01      	subs	r4, #1
 8021344:	e7c7      	b.n	80212d6 <quorem+0x96>
 8021346:	6812      	ldr	r2, [r2, #0]
 8021348:	3b04      	subs	r3, #4
 802134a:	2a00      	cmp	r2, #0
 802134c:	d1f0      	bne.n	8021330 <quorem+0xf0>
 802134e:	3c01      	subs	r4, #1
 8021350:	e7eb      	b.n	802132a <quorem+0xea>
 8021352:	2000      	movs	r0, #0
 8021354:	e7ee      	b.n	8021334 <quorem+0xf4>
	...

08021358 <_dtoa_r>:
 8021358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802135c:	ed2d 8b02 	vpush	{d8}
 8021360:	ec57 6b10 	vmov	r6, r7, d0
 8021364:	b095      	sub	sp, #84	; 0x54
 8021366:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021368:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802136c:	9105      	str	r1, [sp, #20]
 802136e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8021372:	4604      	mov	r4, r0
 8021374:	9209      	str	r2, [sp, #36]	; 0x24
 8021376:	930f      	str	r3, [sp, #60]	; 0x3c
 8021378:	b975      	cbnz	r5, 8021398 <_dtoa_r+0x40>
 802137a:	2010      	movs	r0, #16
 802137c:	f7fe f848 	bl	801f410 <malloc>
 8021380:	4602      	mov	r2, r0
 8021382:	6260      	str	r0, [r4, #36]	; 0x24
 8021384:	b920      	cbnz	r0, 8021390 <_dtoa_r+0x38>
 8021386:	4bb2      	ldr	r3, [pc, #712]	; (8021650 <_dtoa_r+0x2f8>)
 8021388:	21ea      	movs	r1, #234	; 0xea
 802138a:	48b2      	ldr	r0, [pc, #712]	; (8021654 <_dtoa_r+0x2fc>)
 802138c:	f002 f808 	bl	80233a0 <__assert_func>
 8021390:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021394:	6005      	str	r5, [r0, #0]
 8021396:	60c5      	str	r5, [r0, #12]
 8021398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802139a:	6819      	ldr	r1, [r3, #0]
 802139c:	b151      	cbz	r1, 80213b4 <_dtoa_r+0x5c>
 802139e:	685a      	ldr	r2, [r3, #4]
 80213a0:	604a      	str	r2, [r1, #4]
 80213a2:	2301      	movs	r3, #1
 80213a4:	4093      	lsls	r3, r2
 80213a6:	608b      	str	r3, [r1, #8]
 80213a8:	4620      	mov	r0, r4
 80213aa:	f001 f9a5 	bl	80226f8 <_Bfree>
 80213ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80213b0:	2200      	movs	r2, #0
 80213b2:	601a      	str	r2, [r3, #0]
 80213b4:	1e3b      	subs	r3, r7, #0
 80213b6:	bfb9      	ittee	lt
 80213b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80213bc:	9303      	strlt	r3, [sp, #12]
 80213be:	2300      	movge	r3, #0
 80213c0:	f8c8 3000 	strge.w	r3, [r8]
 80213c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80213c8:	4ba3      	ldr	r3, [pc, #652]	; (8021658 <_dtoa_r+0x300>)
 80213ca:	bfbc      	itt	lt
 80213cc:	2201      	movlt	r2, #1
 80213ce:	f8c8 2000 	strlt.w	r2, [r8]
 80213d2:	ea33 0309 	bics.w	r3, r3, r9
 80213d6:	d11b      	bne.n	8021410 <_dtoa_r+0xb8>
 80213d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213da:	f242 730f 	movw	r3, #9999	; 0x270f
 80213de:	6013      	str	r3, [r2, #0]
 80213e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80213e4:	4333      	orrs	r3, r6
 80213e6:	f000 857a 	beq.w	8021ede <_dtoa_r+0xb86>
 80213ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80213ec:	b963      	cbnz	r3, 8021408 <_dtoa_r+0xb0>
 80213ee:	4b9b      	ldr	r3, [pc, #620]	; (802165c <_dtoa_r+0x304>)
 80213f0:	e024      	b.n	802143c <_dtoa_r+0xe4>
 80213f2:	4b9b      	ldr	r3, [pc, #620]	; (8021660 <_dtoa_r+0x308>)
 80213f4:	9300      	str	r3, [sp, #0]
 80213f6:	3308      	adds	r3, #8
 80213f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80213fa:	6013      	str	r3, [r2, #0]
 80213fc:	9800      	ldr	r0, [sp, #0]
 80213fe:	b015      	add	sp, #84	; 0x54
 8021400:	ecbd 8b02 	vpop	{d8}
 8021404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021408:	4b94      	ldr	r3, [pc, #592]	; (802165c <_dtoa_r+0x304>)
 802140a:	9300      	str	r3, [sp, #0]
 802140c:	3303      	adds	r3, #3
 802140e:	e7f3      	b.n	80213f8 <_dtoa_r+0xa0>
 8021410:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021414:	2200      	movs	r2, #0
 8021416:	ec51 0b17 	vmov	r0, r1, d7
 802141a:	2300      	movs	r3, #0
 802141c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8021420:	f7df fb52 	bl	8000ac8 <__aeabi_dcmpeq>
 8021424:	4680      	mov	r8, r0
 8021426:	b158      	cbz	r0, 8021440 <_dtoa_r+0xe8>
 8021428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802142a:	2301      	movs	r3, #1
 802142c:	6013      	str	r3, [r2, #0]
 802142e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021430:	2b00      	cmp	r3, #0
 8021432:	f000 8551 	beq.w	8021ed8 <_dtoa_r+0xb80>
 8021436:	488b      	ldr	r0, [pc, #556]	; (8021664 <_dtoa_r+0x30c>)
 8021438:	6018      	str	r0, [r3, #0]
 802143a:	1e43      	subs	r3, r0, #1
 802143c:	9300      	str	r3, [sp, #0]
 802143e:	e7dd      	b.n	80213fc <_dtoa_r+0xa4>
 8021440:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8021444:	aa12      	add	r2, sp, #72	; 0x48
 8021446:	a913      	add	r1, sp, #76	; 0x4c
 8021448:	4620      	mov	r0, r4
 802144a:	f001 fcfd 	bl	8022e48 <__d2b>
 802144e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021452:	4683      	mov	fp, r0
 8021454:	2d00      	cmp	r5, #0
 8021456:	d07c      	beq.n	8021552 <_dtoa_r+0x1fa>
 8021458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802145a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802145e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021462:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8021466:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802146a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802146e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021472:	4b7d      	ldr	r3, [pc, #500]	; (8021668 <_dtoa_r+0x310>)
 8021474:	2200      	movs	r2, #0
 8021476:	4630      	mov	r0, r6
 8021478:	4639      	mov	r1, r7
 802147a:	f7de ff05 	bl	8000288 <__aeabi_dsub>
 802147e:	a36e      	add	r3, pc, #440	; (adr r3, 8021638 <_dtoa_r+0x2e0>)
 8021480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021484:	f7df f8b8 	bl	80005f8 <__aeabi_dmul>
 8021488:	a36d      	add	r3, pc, #436	; (adr r3, 8021640 <_dtoa_r+0x2e8>)
 802148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802148e:	f7de fefd 	bl	800028c <__adddf3>
 8021492:	4606      	mov	r6, r0
 8021494:	4628      	mov	r0, r5
 8021496:	460f      	mov	r7, r1
 8021498:	f7df f844 	bl	8000524 <__aeabi_i2d>
 802149c:	a36a      	add	r3, pc, #424	; (adr r3, 8021648 <_dtoa_r+0x2f0>)
 802149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214a2:	f7df f8a9 	bl	80005f8 <__aeabi_dmul>
 80214a6:	4602      	mov	r2, r0
 80214a8:	460b      	mov	r3, r1
 80214aa:	4630      	mov	r0, r6
 80214ac:	4639      	mov	r1, r7
 80214ae:	f7de feed 	bl	800028c <__adddf3>
 80214b2:	4606      	mov	r6, r0
 80214b4:	460f      	mov	r7, r1
 80214b6:	f7df fb4f 	bl	8000b58 <__aeabi_d2iz>
 80214ba:	2200      	movs	r2, #0
 80214bc:	4682      	mov	sl, r0
 80214be:	2300      	movs	r3, #0
 80214c0:	4630      	mov	r0, r6
 80214c2:	4639      	mov	r1, r7
 80214c4:	f7df fb0a 	bl	8000adc <__aeabi_dcmplt>
 80214c8:	b148      	cbz	r0, 80214de <_dtoa_r+0x186>
 80214ca:	4650      	mov	r0, sl
 80214cc:	f7df f82a 	bl	8000524 <__aeabi_i2d>
 80214d0:	4632      	mov	r2, r6
 80214d2:	463b      	mov	r3, r7
 80214d4:	f7df faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80214d8:	b908      	cbnz	r0, 80214de <_dtoa_r+0x186>
 80214da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80214de:	f1ba 0f16 	cmp.w	sl, #22
 80214e2:	d854      	bhi.n	802158e <_dtoa_r+0x236>
 80214e4:	4b61      	ldr	r3, [pc, #388]	; (802166c <_dtoa_r+0x314>)
 80214e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80214ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80214f2:	f7df faf3 	bl	8000adc <__aeabi_dcmplt>
 80214f6:	2800      	cmp	r0, #0
 80214f8:	d04b      	beq.n	8021592 <_dtoa_r+0x23a>
 80214fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80214fe:	2300      	movs	r3, #0
 8021500:	930e      	str	r3, [sp, #56]	; 0x38
 8021502:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021504:	1b5d      	subs	r5, r3, r5
 8021506:	1e6b      	subs	r3, r5, #1
 8021508:	9304      	str	r3, [sp, #16]
 802150a:	bf43      	ittte	mi
 802150c:	2300      	movmi	r3, #0
 802150e:	f1c5 0801 	rsbmi	r8, r5, #1
 8021512:	9304      	strmi	r3, [sp, #16]
 8021514:	f04f 0800 	movpl.w	r8, #0
 8021518:	f1ba 0f00 	cmp.w	sl, #0
 802151c:	db3b      	blt.n	8021596 <_dtoa_r+0x23e>
 802151e:	9b04      	ldr	r3, [sp, #16]
 8021520:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8021524:	4453      	add	r3, sl
 8021526:	9304      	str	r3, [sp, #16]
 8021528:	2300      	movs	r3, #0
 802152a:	9306      	str	r3, [sp, #24]
 802152c:	9b05      	ldr	r3, [sp, #20]
 802152e:	2b09      	cmp	r3, #9
 8021530:	d869      	bhi.n	8021606 <_dtoa_r+0x2ae>
 8021532:	2b05      	cmp	r3, #5
 8021534:	bfc4      	itt	gt
 8021536:	3b04      	subgt	r3, #4
 8021538:	9305      	strgt	r3, [sp, #20]
 802153a:	9b05      	ldr	r3, [sp, #20]
 802153c:	f1a3 0302 	sub.w	r3, r3, #2
 8021540:	bfcc      	ite	gt
 8021542:	2500      	movgt	r5, #0
 8021544:	2501      	movle	r5, #1
 8021546:	2b03      	cmp	r3, #3
 8021548:	d869      	bhi.n	802161e <_dtoa_r+0x2c6>
 802154a:	e8df f003 	tbb	[pc, r3]
 802154e:	4e2c      	.short	0x4e2c
 8021550:	5a4c      	.short	0x5a4c
 8021552:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8021556:	441d      	add	r5, r3
 8021558:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802155c:	2b20      	cmp	r3, #32
 802155e:	bfc1      	itttt	gt
 8021560:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021564:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021568:	fa09 f303 	lslgt.w	r3, r9, r3
 802156c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021570:	bfda      	itte	le
 8021572:	f1c3 0320 	rsble	r3, r3, #32
 8021576:	fa06 f003 	lslle.w	r0, r6, r3
 802157a:	4318      	orrgt	r0, r3
 802157c:	f7de ffc2 	bl	8000504 <__aeabi_ui2d>
 8021580:	2301      	movs	r3, #1
 8021582:	4606      	mov	r6, r0
 8021584:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021588:	3d01      	subs	r5, #1
 802158a:	9310      	str	r3, [sp, #64]	; 0x40
 802158c:	e771      	b.n	8021472 <_dtoa_r+0x11a>
 802158e:	2301      	movs	r3, #1
 8021590:	e7b6      	b.n	8021500 <_dtoa_r+0x1a8>
 8021592:	900e      	str	r0, [sp, #56]	; 0x38
 8021594:	e7b5      	b.n	8021502 <_dtoa_r+0x1aa>
 8021596:	f1ca 0300 	rsb	r3, sl, #0
 802159a:	9306      	str	r3, [sp, #24]
 802159c:	2300      	movs	r3, #0
 802159e:	eba8 080a 	sub.w	r8, r8, sl
 80215a2:	930d      	str	r3, [sp, #52]	; 0x34
 80215a4:	e7c2      	b.n	802152c <_dtoa_r+0x1d4>
 80215a6:	2300      	movs	r3, #0
 80215a8:	9308      	str	r3, [sp, #32]
 80215aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	dc39      	bgt.n	8021624 <_dtoa_r+0x2cc>
 80215b0:	f04f 0901 	mov.w	r9, #1
 80215b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80215b8:	464b      	mov	r3, r9
 80215ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80215be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80215c0:	2200      	movs	r2, #0
 80215c2:	6042      	str	r2, [r0, #4]
 80215c4:	2204      	movs	r2, #4
 80215c6:	f102 0614 	add.w	r6, r2, #20
 80215ca:	429e      	cmp	r6, r3
 80215cc:	6841      	ldr	r1, [r0, #4]
 80215ce:	d92f      	bls.n	8021630 <_dtoa_r+0x2d8>
 80215d0:	4620      	mov	r0, r4
 80215d2:	f001 f851 	bl	8022678 <_Balloc>
 80215d6:	9000      	str	r0, [sp, #0]
 80215d8:	2800      	cmp	r0, #0
 80215da:	d14b      	bne.n	8021674 <_dtoa_r+0x31c>
 80215dc:	4b24      	ldr	r3, [pc, #144]	; (8021670 <_dtoa_r+0x318>)
 80215de:	4602      	mov	r2, r0
 80215e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80215e4:	e6d1      	b.n	802138a <_dtoa_r+0x32>
 80215e6:	2301      	movs	r3, #1
 80215e8:	e7de      	b.n	80215a8 <_dtoa_r+0x250>
 80215ea:	2300      	movs	r3, #0
 80215ec:	9308      	str	r3, [sp, #32]
 80215ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215f0:	eb0a 0903 	add.w	r9, sl, r3
 80215f4:	f109 0301 	add.w	r3, r9, #1
 80215f8:	2b01      	cmp	r3, #1
 80215fa:	9301      	str	r3, [sp, #4]
 80215fc:	bfb8      	it	lt
 80215fe:	2301      	movlt	r3, #1
 8021600:	e7dd      	b.n	80215be <_dtoa_r+0x266>
 8021602:	2301      	movs	r3, #1
 8021604:	e7f2      	b.n	80215ec <_dtoa_r+0x294>
 8021606:	2501      	movs	r5, #1
 8021608:	2300      	movs	r3, #0
 802160a:	9305      	str	r3, [sp, #20]
 802160c:	9508      	str	r5, [sp, #32]
 802160e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8021612:	2200      	movs	r2, #0
 8021614:	f8cd 9004 	str.w	r9, [sp, #4]
 8021618:	2312      	movs	r3, #18
 802161a:	9209      	str	r2, [sp, #36]	; 0x24
 802161c:	e7cf      	b.n	80215be <_dtoa_r+0x266>
 802161e:	2301      	movs	r3, #1
 8021620:	9308      	str	r3, [sp, #32]
 8021622:	e7f4      	b.n	802160e <_dtoa_r+0x2b6>
 8021624:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021628:	f8cd 9004 	str.w	r9, [sp, #4]
 802162c:	464b      	mov	r3, r9
 802162e:	e7c6      	b.n	80215be <_dtoa_r+0x266>
 8021630:	3101      	adds	r1, #1
 8021632:	6041      	str	r1, [r0, #4]
 8021634:	0052      	lsls	r2, r2, #1
 8021636:	e7c6      	b.n	80215c6 <_dtoa_r+0x26e>
 8021638:	636f4361 	.word	0x636f4361
 802163c:	3fd287a7 	.word	0x3fd287a7
 8021640:	8b60c8b3 	.word	0x8b60c8b3
 8021644:	3fc68a28 	.word	0x3fc68a28
 8021648:	509f79fb 	.word	0x509f79fb
 802164c:	3fd34413 	.word	0x3fd34413
 8021650:	08025ee6 	.word	0x08025ee6
 8021654:	08025efd 	.word	0x08025efd
 8021658:	7ff00000 	.word	0x7ff00000
 802165c:	08025ee2 	.word	0x08025ee2
 8021660:	08025ed9 	.word	0x08025ed9
 8021664:	08025d5d 	.word	0x08025d5d
 8021668:	3ff80000 	.word	0x3ff80000
 802166c:	08026078 	.word	0x08026078
 8021670:	08025f5c 	.word	0x08025f5c
 8021674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021676:	9a00      	ldr	r2, [sp, #0]
 8021678:	601a      	str	r2, [r3, #0]
 802167a:	9b01      	ldr	r3, [sp, #4]
 802167c:	2b0e      	cmp	r3, #14
 802167e:	f200 80ad 	bhi.w	80217dc <_dtoa_r+0x484>
 8021682:	2d00      	cmp	r5, #0
 8021684:	f000 80aa 	beq.w	80217dc <_dtoa_r+0x484>
 8021688:	f1ba 0f00 	cmp.w	sl, #0
 802168c:	dd36      	ble.n	80216fc <_dtoa_r+0x3a4>
 802168e:	4ac3      	ldr	r2, [pc, #780]	; (802199c <_dtoa_r+0x644>)
 8021690:	f00a 030f 	and.w	r3, sl, #15
 8021694:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021698:	ed93 7b00 	vldr	d7, [r3]
 802169c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80216a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80216a4:	eeb0 8a47 	vmov.f32	s16, s14
 80216a8:	eef0 8a67 	vmov.f32	s17, s15
 80216ac:	d016      	beq.n	80216dc <_dtoa_r+0x384>
 80216ae:	4bbc      	ldr	r3, [pc, #752]	; (80219a0 <_dtoa_r+0x648>)
 80216b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80216b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80216b8:	f7df f8c8 	bl	800084c <__aeabi_ddiv>
 80216bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80216c0:	f007 070f 	and.w	r7, r7, #15
 80216c4:	2503      	movs	r5, #3
 80216c6:	4eb6      	ldr	r6, [pc, #728]	; (80219a0 <_dtoa_r+0x648>)
 80216c8:	b957      	cbnz	r7, 80216e0 <_dtoa_r+0x388>
 80216ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80216ce:	ec53 2b18 	vmov	r2, r3, d8
 80216d2:	f7df f8bb 	bl	800084c <__aeabi_ddiv>
 80216d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80216da:	e029      	b.n	8021730 <_dtoa_r+0x3d8>
 80216dc:	2502      	movs	r5, #2
 80216de:	e7f2      	b.n	80216c6 <_dtoa_r+0x36e>
 80216e0:	07f9      	lsls	r1, r7, #31
 80216e2:	d508      	bpl.n	80216f6 <_dtoa_r+0x39e>
 80216e4:	ec51 0b18 	vmov	r0, r1, d8
 80216e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80216ec:	f7de ff84 	bl	80005f8 <__aeabi_dmul>
 80216f0:	ec41 0b18 	vmov	d8, r0, r1
 80216f4:	3501      	adds	r5, #1
 80216f6:	107f      	asrs	r7, r7, #1
 80216f8:	3608      	adds	r6, #8
 80216fa:	e7e5      	b.n	80216c8 <_dtoa_r+0x370>
 80216fc:	f000 80a6 	beq.w	802184c <_dtoa_r+0x4f4>
 8021700:	f1ca 0600 	rsb	r6, sl, #0
 8021704:	4ba5      	ldr	r3, [pc, #660]	; (802199c <_dtoa_r+0x644>)
 8021706:	4fa6      	ldr	r7, [pc, #664]	; (80219a0 <_dtoa_r+0x648>)
 8021708:	f006 020f 	and.w	r2, r6, #15
 802170c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021714:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021718:	f7de ff6e 	bl	80005f8 <__aeabi_dmul>
 802171c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021720:	1136      	asrs	r6, r6, #4
 8021722:	2300      	movs	r3, #0
 8021724:	2502      	movs	r5, #2
 8021726:	2e00      	cmp	r6, #0
 8021728:	f040 8085 	bne.w	8021836 <_dtoa_r+0x4de>
 802172c:	2b00      	cmp	r3, #0
 802172e:	d1d2      	bne.n	80216d6 <_dtoa_r+0x37e>
 8021730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021732:	2b00      	cmp	r3, #0
 8021734:	f000 808c 	beq.w	8021850 <_dtoa_r+0x4f8>
 8021738:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802173c:	4b99      	ldr	r3, [pc, #612]	; (80219a4 <_dtoa_r+0x64c>)
 802173e:	2200      	movs	r2, #0
 8021740:	4630      	mov	r0, r6
 8021742:	4639      	mov	r1, r7
 8021744:	f7df f9ca 	bl	8000adc <__aeabi_dcmplt>
 8021748:	2800      	cmp	r0, #0
 802174a:	f000 8081 	beq.w	8021850 <_dtoa_r+0x4f8>
 802174e:	9b01      	ldr	r3, [sp, #4]
 8021750:	2b00      	cmp	r3, #0
 8021752:	d07d      	beq.n	8021850 <_dtoa_r+0x4f8>
 8021754:	f1b9 0f00 	cmp.w	r9, #0
 8021758:	dd3c      	ble.n	80217d4 <_dtoa_r+0x47c>
 802175a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802175e:	9307      	str	r3, [sp, #28]
 8021760:	2200      	movs	r2, #0
 8021762:	4b91      	ldr	r3, [pc, #580]	; (80219a8 <_dtoa_r+0x650>)
 8021764:	4630      	mov	r0, r6
 8021766:	4639      	mov	r1, r7
 8021768:	f7de ff46 	bl	80005f8 <__aeabi_dmul>
 802176c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021770:	3501      	adds	r5, #1
 8021772:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8021776:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802177a:	4628      	mov	r0, r5
 802177c:	f7de fed2 	bl	8000524 <__aeabi_i2d>
 8021780:	4632      	mov	r2, r6
 8021782:	463b      	mov	r3, r7
 8021784:	f7de ff38 	bl	80005f8 <__aeabi_dmul>
 8021788:	4b88      	ldr	r3, [pc, #544]	; (80219ac <_dtoa_r+0x654>)
 802178a:	2200      	movs	r2, #0
 802178c:	f7de fd7e 	bl	800028c <__adddf3>
 8021790:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8021794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021798:	9303      	str	r3, [sp, #12]
 802179a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802179c:	2b00      	cmp	r3, #0
 802179e:	d15c      	bne.n	802185a <_dtoa_r+0x502>
 80217a0:	4b83      	ldr	r3, [pc, #524]	; (80219b0 <_dtoa_r+0x658>)
 80217a2:	2200      	movs	r2, #0
 80217a4:	4630      	mov	r0, r6
 80217a6:	4639      	mov	r1, r7
 80217a8:	f7de fd6e 	bl	8000288 <__aeabi_dsub>
 80217ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80217b0:	4606      	mov	r6, r0
 80217b2:	460f      	mov	r7, r1
 80217b4:	f7df f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 80217b8:	2800      	cmp	r0, #0
 80217ba:	f040 8296 	bne.w	8021cea <_dtoa_r+0x992>
 80217be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80217c2:	4630      	mov	r0, r6
 80217c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80217c8:	4639      	mov	r1, r7
 80217ca:	f7df f987 	bl	8000adc <__aeabi_dcmplt>
 80217ce:	2800      	cmp	r0, #0
 80217d0:	f040 8288 	bne.w	8021ce4 <_dtoa_r+0x98c>
 80217d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80217d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80217dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80217de:	2b00      	cmp	r3, #0
 80217e0:	f2c0 8158 	blt.w	8021a94 <_dtoa_r+0x73c>
 80217e4:	f1ba 0f0e 	cmp.w	sl, #14
 80217e8:	f300 8154 	bgt.w	8021a94 <_dtoa_r+0x73c>
 80217ec:	4b6b      	ldr	r3, [pc, #428]	; (802199c <_dtoa_r+0x644>)
 80217ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80217f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80217f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	f280 80e3 	bge.w	80219c4 <_dtoa_r+0x66c>
 80217fe:	9b01      	ldr	r3, [sp, #4]
 8021800:	2b00      	cmp	r3, #0
 8021802:	f300 80df 	bgt.w	80219c4 <_dtoa_r+0x66c>
 8021806:	f040 826d 	bne.w	8021ce4 <_dtoa_r+0x98c>
 802180a:	4b69      	ldr	r3, [pc, #420]	; (80219b0 <_dtoa_r+0x658>)
 802180c:	2200      	movs	r2, #0
 802180e:	4640      	mov	r0, r8
 8021810:	4649      	mov	r1, r9
 8021812:	f7de fef1 	bl	80005f8 <__aeabi_dmul>
 8021816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802181a:	f7df f973 	bl	8000b04 <__aeabi_dcmpge>
 802181e:	9e01      	ldr	r6, [sp, #4]
 8021820:	4637      	mov	r7, r6
 8021822:	2800      	cmp	r0, #0
 8021824:	f040 8243 	bne.w	8021cae <_dtoa_r+0x956>
 8021828:	9d00      	ldr	r5, [sp, #0]
 802182a:	2331      	movs	r3, #49	; 0x31
 802182c:	f805 3b01 	strb.w	r3, [r5], #1
 8021830:	f10a 0a01 	add.w	sl, sl, #1
 8021834:	e23f      	b.n	8021cb6 <_dtoa_r+0x95e>
 8021836:	07f2      	lsls	r2, r6, #31
 8021838:	d505      	bpl.n	8021846 <_dtoa_r+0x4ee>
 802183a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802183e:	f7de fedb 	bl	80005f8 <__aeabi_dmul>
 8021842:	3501      	adds	r5, #1
 8021844:	2301      	movs	r3, #1
 8021846:	1076      	asrs	r6, r6, #1
 8021848:	3708      	adds	r7, #8
 802184a:	e76c      	b.n	8021726 <_dtoa_r+0x3ce>
 802184c:	2502      	movs	r5, #2
 802184e:	e76f      	b.n	8021730 <_dtoa_r+0x3d8>
 8021850:	9b01      	ldr	r3, [sp, #4]
 8021852:	f8cd a01c 	str.w	sl, [sp, #28]
 8021856:	930c      	str	r3, [sp, #48]	; 0x30
 8021858:	e78d      	b.n	8021776 <_dtoa_r+0x41e>
 802185a:	9900      	ldr	r1, [sp, #0]
 802185c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802185e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021860:	4b4e      	ldr	r3, [pc, #312]	; (802199c <_dtoa_r+0x644>)
 8021862:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021866:	4401      	add	r1, r0
 8021868:	9102      	str	r1, [sp, #8]
 802186a:	9908      	ldr	r1, [sp, #32]
 802186c:	eeb0 8a47 	vmov.f32	s16, s14
 8021870:	eef0 8a67 	vmov.f32	s17, s15
 8021874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021878:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802187c:	2900      	cmp	r1, #0
 802187e:	d045      	beq.n	802190c <_dtoa_r+0x5b4>
 8021880:	494c      	ldr	r1, [pc, #304]	; (80219b4 <_dtoa_r+0x65c>)
 8021882:	2000      	movs	r0, #0
 8021884:	f7de ffe2 	bl	800084c <__aeabi_ddiv>
 8021888:	ec53 2b18 	vmov	r2, r3, d8
 802188c:	f7de fcfc 	bl	8000288 <__aeabi_dsub>
 8021890:	9d00      	ldr	r5, [sp, #0]
 8021892:	ec41 0b18 	vmov	d8, r0, r1
 8021896:	4639      	mov	r1, r7
 8021898:	4630      	mov	r0, r6
 802189a:	f7df f95d 	bl	8000b58 <__aeabi_d2iz>
 802189e:	900c      	str	r0, [sp, #48]	; 0x30
 80218a0:	f7de fe40 	bl	8000524 <__aeabi_i2d>
 80218a4:	4602      	mov	r2, r0
 80218a6:	460b      	mov	r3, r1
 80218a8:	4630      	mov	r0, r6
 80218aa:	4639      	mov	r1, r7
 80218ac:	f7de fcec 	bl	8000288 <__aeabi_dsub>
 80218b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80218b2:	3330      	adds	r3, #48	; 0x30
 80218b4:	f805 3b01 	strb.w	r3, [r5], #1
 80218b8:	ec53 2b18 	vmov	r2, r3, d8
 80218bc:	4606      	mov	r6, r0
 80218be:	460f      	mov	r7, r1
 80218c0:	f7df f90c 	bl	8000adc <__aeabi_dcmplt>
 80218c4:	2800      	cmp	r0, #0
 80218c6:	d165      	bne.n	8021994 <_dtoa_r+0x63c>
 80218c8:	4632      	mov	r2, r6
 80218ca:	463b      	mov	r3, r7
 80218cc:	4935      	ldr	r1, [pc, #212]	; (80219a4 <_dtoa_r+0x64c>)
 80218ce:	2000      	movs	r0, #0
 80218d0:	f7de fcda 	bl	8000288 <__aeabi_dsub>
 80218d4:	ec53 2b18 	vmov	r2, r3, d8
 80218d8:	f7df f900 	bl	8000adc <__aeabi_dcmplt>
 80218dc:	2800      	cmp	r0, #0
 80218de:	f040 80b9 	bne.w	8021a54 <_dtoa_r+0x6fc>
 80218e2:	9b02      	ldr	r3, [sp, #8]
 80218e4:	429d      	cmp	r5, r3
 80218e6:	f43f af75 	beq.w	80217d4 <_dtoa_r+0x47c>
 80218ea:	4b2f      	ldr	r3, [pc, #188]	; (80219a8 <_dtoa_r+0x650>)
 80218ec:	ec51 0b18 	vmov	r0, r1, d8
 80218f0:	2200      	movs	r2, #0
 80218f2:	f7de fe81 	bl	80005f8 <__aeabi_dmul>
 80218f6:	4b2c      	ldr	r3, [pc, #176]	; (80219a8 <_dtoa_r+0x650>)
 80218f8:	ec41 0b18 	vmov	d8, r0, r1
 80218fc:	2200      	movs	r2, #0
 80218fe:	4630      	mov	r0, r6
 8021900:	4639      	mov	r1, r7
 8021902:	f7de fe79 	bl	80005f8 <__aeabi_dmul>
 8021906:	4606      	mov	r6, r0
 8021908:	460f      	mov	r7, r1
 802190a:	e7c4      	b.n	8021896 <_dtoa_r+0x53e>
 802190c:	ec51 0b17 	vmov	r0, r1, d7
 8021910:	f7de fe72 	bl	80005f8 <__aeabi_dmul>
 8021914:	9b02      	ldr	r3, [sp, #8]
 8021916:	9d00      	ldr	r5, [sp, #0]
 8021918:	930c      	str	r3, [sp, #48]	; 0x30
 802191a:	ec41 0b18 	vmov	d8, r0, r1
 802191e:	4639      	mov	r1, r7
 8021920:	4630      	mov	r0, r6
 8021922:	f7df f919 	bl	8000b58 <__aeabi_d2iz>
 8021926:	9011      	str	r0, [sp, #68]	; 0x44
 8021928:	f7de fdfc 	bl	8000524 <__aeabi_i2d>
 802192c:	4602      	mov	r2, r0
 802192e:	460b      	mov	r3, r1
 8021930:	4630      	mov	r0, r6
 8021932:	4639      	mov	r1, r7
 8021934:	f7de fca8 	bl	8000288 <__aeabi_dsub>
 8021938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802193a:	3330      	adds	r3, #48	; 0x30
 802193c:	f805 3b01 	strb.w	r3, [r5], #1
 8021940:	9b02      	ldr	r3, [sp, #8]
 8021942:	429d      	cmp	r5, r3
 8021944:	4606      	mov	r6, r0
 8021946:	460f      	mov	r7, r1
 8021948:	f04f 0200 	mov.w	r2, #0
 802194c:	d134      	bne.n	80219b8 <_dtoa_r+0x660>
 802194e:	4b19      	ldr	r3, [pc, #100]	; (80219b4 <_dtoa_r+0x65c>)
 8021950:	ec51 0b18 	vmov	r0, r1, d8
 8021954:	f7de fc9a 	bl	800028c <__adddf3>
 8021958:	4602      	mov	r2, r0
 802195a:	460b      	mov	r3, r1
 802195c:	4630      	mov	r0, r6
 802195e:	4639      	mov	r1, r7
 8021960:	f7df f8da 	bl	8000b18 <__aeabi_dcmpgt>
 8021964:	2800      	cmp	r0, #0
 8021966:	d175      	bne.n	8021a54 <_dtoa_r+0x6fc>
 8021968:	ec53 2b18 	vmov	r2, r3, d8
 802196c:	4911      	ldr	r1, [pc, #68]	; (80219b4 <_dtoa_r+0x65c>)
 802196e:	2000      	movs	r0, #0
 8021970:	f7de fc8a 	bl	8000288 <__aeabi_dsub>
 8021974:	4602      	mov	r2, r0
 8021976:	460b      	mov	r3, r1
 8021978:	4630      	mov	r0, r6
 802197a:	4639      	mov	r1, r7
 802197c:	f7df f8ae 	bl	8000adc <__aeabi_dcmplt>
 8021980:	2800      	cmp	r0, #0
 8021982:	f43f af27 	beq.w	80217d4 <_dtoa_r+0x47c>
 8021986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021988:	1e6b      	subs	r3, r5, #1
 802198a:	930c      	str	r3, [sp, #48]	; 0x30
 802198c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021990:	2b30      	cmp	r3, #48	; 0x30
 8021992:	d0f8      	beq.n	8021986 <_dtoa_r+0x62e>
 8021994:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021998:	e04a      	b.n	8021a30 <_dtoa_r+0x6d8>
 802199a:	bf00      	nop
 802199c:	08026078 	.word	0x08026078
 80219a0:	08026050 	.word	0x08026050
 80219a4:	3ff00000 	.word	0x3ff00000
 80219a8:	40240000 	.word	0x40240000
 80219ac:	401c0000 	.word	0x401c0000
 80219b0:	40140000 	.word	0x40140000
 80219b4:	3fe00000 	.word	0x3fe00000
 80219b8:	4baf      	ldr	r3, [pc, #700]	; (8021c78 <_dtoa_r+0x920>)
 80219ba:	f7de fe1d 	bl	80005f8 <__aeabi_dmul>
 80219be:	4606      	mov	r6, r0
 80219c0:	460f      	mov	r7, r1
 80219c2:	e7ac      	b.n	802191e <_dtoa_r+0x5c6>
 80219c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80219c8:	9d00      	ldr	r5, [sp, #0]
 80219ca:	4642      	mov	r2, r8
 80219cc:	464b      	mov	r3, r9
 80219ce:	4630      	mov	r0, r6
 80219d0:	4639      	mov	r1, r7
 80219d2:	f7de ff3b 	bl	800084c <__aeabi_ddiv>
 80219d6:	f7df f8bf 	bl	8000b58 <__aeabi_d2iz>
 80219da:	9002      	str	r0, [sp, #8]
 80219dc:	f7de fda2 	bl	8000524 <__aeabi_i2d>
 80219e0:	4642      	mov	r2, r8
 80219e2:	464b      	mov	r3, r9
 80219e4:	f7de fe08 	bl	80005f8 <__aeabi_dmul>
 80219e8:	4602      	mov	r2, r0
 80219ea:	460b      	mov	r3, r1
 80219ec:	4630      	mov	r0, r6
 80219ee:	4639      	mov	r1, r7
 80219f0:	f7de fc4a 	bl	8000288 <__aeabi_dsub>
 80219f4:	9e02      	ldr	r6, [sp, #8]
 80219f6:	9f01      	ldr	r7, [sp, #4]
 80219f8:	3630      	adds	r6, #48	; 0x30
 80219fa:	f805 6b01 	strb.w	r6, [r5], #1
 80219fe:	9e00      	ldr	r6, [sp, #0]
 8021a00:	1bae      	subs	r6, r5, r6
 8021a02:	42b7      	cmp	r7, r6
 8021a04:	4602      	mov	r2, r0
 8021a06:	460b      	mov	r3, r1
 8021a08:	d137      	bne.n	8021a7a <_dtoa_r+0x722>
 8021a0a:	f7de fc3f 	bl	800028c <__adddf3>
 8021a0e:	4642      	mov	r2, r8
 8021a10:	464b      	mov	r3, r9
 8021a12:	4606      	mov	r6, r0
 8021a14:	460f      	mov	r7, r1
 8021a16:	f7df f87f 	bl	8000b18 <__aeabi_dcmpgt>
 8021a1a:	b9c8      	cbnz	r0, 8021a50 <_dtoa_r+0x6f8>
 8021a1c:	4642      	mov	r2, r8
 8021a1e:	464b      	mov	r3, r9
 8021a20:	4630      	mov	r0, r6
 8021a22:	4639      	mov	r1, r7
 8021a24:	f7df f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8021a28:	b110      	cbz	r0, 8021a30 <_dtoa_r+0x6d8>
 8021a2a:	9b02      	ldr	r3, [sp, #8]
 8021a2c:	07d9      	lsls	r1, r3, #31
 8021a2e:	d40f      	bmi.n	8021a50 <_dtoa_r+0x6f8>
 8021a30:	4620      	mov	r0, r4
 8021a32:	4659      	mov	r1, fp
 8021a34:	f000 fe60 	bl	80226f8 <_Bfree>
 8021a38:	2300      	movs	r3, #0
 8021a3a:	702b      	strb	r3, [r5, #0]
 8021a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021a3e:	f10a 0001 	add.w	r0, sl, #1
 8021a42:	6018      	str	r0, [r3, #0]
 8021a44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	f43f acd8 	beq.w	80213fc <_dtoa_r+0xa4>
 8021a4c:	601d      	str	r5, [r3, #0]
 8021a4e:	e4d5      	b.n	80213fc <_dtoa_r+0xa4>
 8021a50:	f8cd a01c 	str.w	sl, [sp, #28]
 8021a54:	462b      	mov	r3, r5
 8021a56:	461d      	mov	r5, r3
 8021a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021a5c:	2a39      	cmp	r2, #57	; 0x39
 8021a5e:	d108      	bne.n	8021a72 <_dtoa_r+0x71a>
 8021a60:	9a00      	ldr	r2, [sp, #0]
 8021a62:	429a      	cmp	r2, r3
 8021a64:	d1f7      	bne.n	8021a56 <_dtoa_r+0x6fe>
 8021a66:	9a07      	ldr	r2, [sp, #28]
 8021a68:	9900      	ldr	r1, [sp, #0]
 8021a6a:	3201      	adds	r2, #1
 8021a6c:	9207      	str	r2, [sp, #28]
 8021a6e:	2230      	movs	r2, #48	; 0x30
 8021a70:	700a      	strb	r2, [r1, #0]
 8021a72:	781a      	ldrb	r2, [r3, #0]
 8021a74:	3201      	adds	r2, #1
 8021a76:	701a      	strb	r2, [r3, #0]
 8021a78:	e78c      	b.n	8021994 <_dtoa_r+0x63c>
 8021a7a:	4b7f      	ldr	r3, [pc, #508]	; (8021c78 <_dtoa_r+0x920>)
 8021a7c:	2200      	movs	r2, #0
 8021a7e:	f7de fdbb 	bl	80005f8 <__aeabi_dmul>
 8021a82:	2200      	movs	r2, #0
 8021a84:	2300      	movs	r3, #0
 8021a86:	4606      	mov	r6, r0
 8021a88:	460f      	mov	r7, r1
 8021a8a:	f7df f81d 	bl	8000ac8 <__aeabi_dcmpeq>
 8021a8e:	2800      	cmp	r0, #0
 8021a90:	d09b      	beq.n	80219ca <_dtoa_r+0x672>
 8021a92:	e7cd      	b.n	8021a30 <_dtoa_r+0x6d8>
 8021a94:	9a08      	ldr	r2, [sp, #32]
 8021a96:	2a00      	cmp	r2, #0
 8021a98:	f000 80c4 	beq.w	8021c24 <_dtoa_r+0x8cc>
 8021a9c:	9a05      	ldr	r2, [sp, #20]
 8021a9e:	2a01      	cmp	r2, #1
 8021aa0:	f300 80a8 	bgt.w	8021bf4 <_dtoa_r+0x89c>
 8021aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021aa6:	2a00      	cmp	r2, #0
 8021aa8:	f000 80a0 	beq.w	8021bec <_dtoa_r+0x894>
 8021aac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021ab0:	9e06      	ldr	r6, [sp, #24]
 8021ab2:	4645      	mov	r5, r8
 8021ab4:	9a04      	ldr	r2, [sp, #16]
 8021ab6:	2101      	movs	r1, #1
 8021ab8:	441a      	add	r2, r3
 8021aba:	4620      	mov	r0, r4
 8021abc:	4498      	add	r8, r3
 8021abe:	9204      	str	r2, [sp, #16]
 8021ac0:	f000 ff20 	bl	8022904 <__i2b>
 8021ac4:	4607      	mov	r7, r0
 8021ac6:	2d00      	cmp	r5, #0
 8021ac8:	dd0b      	ble.n	8021ae2 <_dtoa_r+0x78a>
 8021aca:	9b04      	ldr	r3, [sp, #16]
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	dd08      	ble.n	8021ae2 <_dtoa_r+0x78a>
 8021ad0:	42ab      	cmp	r3, r5
 8021ad2:	9a04      	ldr	r2, [sp, #16]
 8021ad4:	bfa8      	it	ge
 8021ad6:	462b      	movge	r3, r5
 8021ad8:	eba8 0803 	sub.w	r8, r8, r3
 8021adc:	1aed      	subs	r5, r5, r3
 8021ade:	1ad3      	subs	r3, r2, r3
 8021ae0:	9304      	str	r3, [sp, #16]
 8021ae2:	9b06      	ldr	r3, [sp, #24]
 8021ae4:	b1fb      	cbz	r3, 8021b26 <_dtoa_r+0x7ce>
 8021ae6:	9b08      	ldr	r3, [sp, #32]
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	f000 809f 	beq.w	8021c2c <_dtoa_r+0x8d4>
 8021aee:	2e00      	cmp	r6, #0
 8021af0:	dd11      	ble.n	8021b16 <_dtoa_r+0x7be>
 8021af2:	4639      	mov	r1, r7
 8021af4:	4632      	mov	r2, r6
 8021af6:	4620      	mov	r0, r4
 8021af8:	f000 ffc0 	bl	8022a7c <__pow5mult>
 8021afc:	465a      	mov	r2, fp
 8021afe:	4601      	mov	r1, r0
 8021b00:	4607      	mov	r7, r0
 8021b02:	4620      	mov	r0, r4
 8021b04:	f000 ff14 	bl	8022930 <__multiply>
 8021b08:	4659      	mov	r1, fp
 8021b0a:	9007      	str	r0, [sp, #28]
 8021b0c:	4620      	mov	r0, r4
 8021b0e:	f000 fdf3 	bl	80226f8 <_Bfree>
 8021b12:	9b07      	ldr	r3, [sp, #28]
 8021b14:	469b      	mov	fp, r3
 8021b16:	9b06      	ldr	r3, [sp, #24]
 8021b18:	1b9a      	subs	r2, r3, r6
 8021b1a:	d004      	beq.n	8021b26 <_dtoa_r+0x7ce>
 8021b1c:	4659      	mov	r1, fp
 8021b1e:	4620      	mov	r0, r4
 8021b20:	f000 ffac 	bl	8022a7c <__pow5mult>
 8021b24:	4683      	mov	fp, r0
 8021b26:	2101      	movs	r1, #1
 8021b28:	4620      	mov	r0, r4
 8021b2a:	f000 feeb 	bl	8022904 <__i2b>
 8021b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	4606      	mov	r6, r0
 8021b34:	dd7c      	ble.n	8021c30 <_dtoa_r+0x8d8>
 8021b36:	461a      	mov	r2, r3
 8021b38:	4601      	mov	r1, r0
 8021b3a:	4620      	mov	r0, r4
 8021b3c:	f000 ff9e 	bl	8022a7c <__pow5mult>
 8021b40:	9b05      	ldr	r3, [sp, #20]
 8021b42:	2b01      	cmp	r3, #1
 8021b44:	4606      	mov	r6, r0
 8021b46:	dd76      	ble.n	8021c36 <_dtoa_r+0x8de>
 8021b48:	2300      	movs	r3, #0
 8021b4a:	9306      	str	r3, [sp, #24]
 8021b4c:	6933      	ldr	r3, [r6, #16]
 8021b4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021b52:	6918      	ldr	r0, [r3, #16]
 8021b54:	f000 fe86 	bl	8022864 <__hi0bits>
 8021b58:	f1c0 0020 	rsb	r0, r0, #32
 8021b5c:	9b04      	ldr	r3, [sp, #16]
 8021b5e:	4418      	add	r0, r3
 8021b60:	f010 001f 	ands.w	r0, r0, #31
 8021b64:	f000 8086 	beq.w	8021c74 <_dtoa_r+0x91c>
 8021b68:	f1c0 0320 	rsb	r3, r0, #32
 8021b6c:	2b04      	cmp	r3, #4
 8021b6e:	dd7f      	ble.n	8021c70 <_dtoa_r+0x918>
 8021b70:	f1c0 001c 	rsb	r0, r0, #28
 8021b74:	9b04      	ldr	r3, [sp, #16]
 8021b76:	4403      	add	r3, r0
 8021b78:	4480      	add	r8, r0
 8021b7a:	4405      	add	r5, r0
 8021b7c:	9304      	str	r3, [sp, #16]
 8021b7e:	f1b8 0f00 	cmp.w	r8, #0
 8021b82:	dd05      	ble.n	8021b90 <_dtoa_r+0x838>
 8021b84:	4659      	mov	r1, fp
 8021b86:	4642      	mov	r2, r8
 8021b88:	4620      	mov	r0, r4
 8021b8a:	f000 ffd1 	bl	8022b30 <__lshift>
 8021b8e:	4683      	mov	fp, r0
 8021b90:	9b04      	ldr	r3, [sp, #16]
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	dd05      	ble.n	8021ba2 <_dtoa_r+0x84a>
 8021b96:	4631      	mov	r1, r6
 8021b98:	461a      	mov	r2, r3
 8021b9a:	4620      	mov	r0, r4
 8021b9c:	f000 ffc8 	bl	8022b30 <__lshift>
 8021ba0:	4606      	mov	r6, r0
 8021ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ba4:	2b00      	cmp	r3, #0
 8021ba6:	d069      	beq.n	8021c7c <_dtoa_r+0x924>
 8021ba8:	4631      	mov	r1, r6
 8021baa:	4658      	mov	r0, fp
 8021bac:	f001 f82c 	bl	8022c08 <__mcmp>
 8021bb0:	2800      	cmp	r0, #0
 8021bb2:	da63      	bge.n	8021c7c <_dtoa_r+0x924>
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	4659      	mov	r1, fp
 8021bb8:	220a      	movs	r2, #10
 8021bba:	4620      	mov	r0, r4
 8021bbc:	f000 fdbe 	bl	802273c <__multadd>
 8021bc0:	9b08      	ldr	r3, [sp, #32]
 8021bc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8021bc6:	4683      	mov	fp, r0
 8021bc8:	2b00      	cmp	r3, #0
 8021bca:	f000 818f 	beq.w	8021eec <_dtoa_r+0xb94>
 8021bce:	4639      	mov	r1, r7
 8021bd0:	2300      	movs	r3, #0
 8021bd2:	220a      	movs	r2, #10
 8021bd4:	4620      	mov	r0, r4
 8021bd6:	f000 fdb1 	bl	802273c <__multadd>
 8021bda:	f1b9 0f00 	cmp.w	r9, #0
 8021bde:	4607      	mov	r7, r0
 8021be0:	f300 808e 	bgt.w	8021d00 <_dtoa_r+0x9a8>
 8021be4:	9b05      	ldr	r3, [sp, #20]
 8021be6:	2b02      	cmp	r3, #2
 8021be8:	dc50      	bgt.n	8021c8c <_dtoa_r+0x934>
 8021bea:	e089      	b.n	8021d00 <_dtoa_r+0x9a8>
 8021bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021bf2:	e75d      	b.n	8021ab0 <_dtoa_r+0x758>
 8021bf4:	9b01      	ldr	r3, [sp, #4]
 8021bf6:	1e5e      	subs	r6, r3, #1
 8021bf8:	9b06      	ldr	r3, [sp, #24]
 8021bfa:	42b3      	cmp	r3, r6
 8021bfc:	bfbf      	itttt	lt
 8021bfe:	9b06      	ldrlt	r3, [sp, #24]
 8021c00:	9606      	strlt	r6, [sp, #24]
 8021c02:	1af2      	sublt	r2, r6, r3
 8021c04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021c06:	bfb6      	itet	lt
 8021c08:	189b      	addlt	r3, r3, r2
 8021c0a:	1b9e      	subge	r6, r3, r6
 8021c0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8021c0e:	9b01      	ldr	r3, [sp, #4]
 8021c10:	bfb8      	it	lt
 8021c12:	2600      	movlt	r6, #0
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	bfb5      	itete	lt
 8021c18:	eba8 0503 	sublt.w	r5, r8, r3
 8021c1c:	9b01      	ldrge	r3, [sp, #4]
 8021c1e:	2300      	movlt	r3, #0
 8021c20:	4645      	movge	r5, r8
 8021c22:	e747      	b.n	8021ab4 <_dtoa_r+0x75c>
 8021c24:	9e06      	ldr	r6, [sp, #24]
 8021c26:	9f08      	ldr	r7, [sp, #32]
 8021c28:	4645      	mov	r5, r8
 8021c2a:	e74c      	b.n	8021ac6 <_dtoa_r+0x76e>
 8021c2c:	9a06      	ldr	r2, [sp, #24]
 8021c2e:	e775      	b.n	8021b1c <_dtoa_r+0x7c4>
 8021c30:	9b05      	ldr	r3, [sp, #20]
 8021c32:	2b01      	cmp	r3, #1
 8021c34:	dc18      	bgt.n	8021c68 <_dtoa_r+0x910>
 8021c36:	9b02      	ldr	r3, [sp, #8]
 8021c38:	b9b3      	cbnz	r3, 8021c68 <_dtoa_r+0x910>
 8021c3a:	9b03      	ldr	r3, [sp, #12]
 8021c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021c40:	b9a3      	cbnz	r3, 8021c6c <_dtoa_r+0x914>
 8021c42:	9b03      	ldr	r3, [sp, #12]
 8021c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021c48:	0d1b      	lsrs	r3, r3, #20
 8021c4a:	051b      	lsls	r3, r3, #20
 8021c4c:	b12b      	cbz	r3, 8021c5a <_dtoa_r+0x902>
 8021c4e:	9b04      	ldr	r3, [sp, #16]
 8021c50:	3301      	adds	r3, #1
 8021c52:	9304      	str	r3, [sp, #16]
 8021c54:	f108 0801 	add.w	r8, r8, #1
 8021c58:	2301      	movs	r3, #1
 8021c5a:	9306      	str	r3, [sp, #24]
 8021c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	f47f af74 	bne.w	8021b4c <_dtoa_r+0x7f4>
 8021c64:	2001      	movs	r0, #1
 8021c66:	e779      	b.n	8021b5c <_dtoa_r+0x804>
 8021c68:	2300      	movs	r3, #0
 8021c6a:	e7f6      	b.n	8021c5a <_dtoa_r+0x902>
 8021c6c:	9b02      	ldr	r3, [sp, #8]
 8021c6e:	e7f4      	b.n	8021c5a <_dtoa_r+0x902>
 8021c70:	d085      	beq.n	8021b7e <_dtoa_r+0x826>
 8021c72:	4618      	mov	r0, r3
 8021c74:	301c      	adds	r0, #28
 8021c76:	e77d      	b.n	8021b74 <_dtoa_r+0x81c>
 8021c78:	40240000 	.word	0x40240000
 8021c7c:	9b01      	ldr	r3, [sp, #4]
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	dc38      	bgt.n	8021cf4 <_dtoa_r+0x99c>
 8021c82:	9b05      	ldr	r3, [sp, #20]
 8021c84:	2b02      	cmp	r3, #2
 8021c86:	dd35      	ble.n	8021cf4 <_dtoa_r+0x99c>
 8021c88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021c8c:	f1b9 0f00 	cmp.w	r9, #0
 8021c90:	d10d      	bne.n	8021cae <_dtoa_r+0x956>
 8021c92:	4631      	mov	r1, r6
 8021c94:	464b      	mov	r3, r9
 8021c96:	2205      	movs	r2, #5
 8021c98:	4620      	mov	r0, r4
 8021c9a:	f000 fd4f 	bl	802273c <__multadd>
 8021c9e:	4601      	mov	r1, r0
 8021ca0:	4606      	mov	r6, r0
 8021ca2:	4658      	mov	r0, fp
 8021ca4:	f000 ffb0 	bl	8022c08 <__mcmp>
 8021ca8:	2800      	cmp	r0, #0
 8021caa:	f73f adbd 	bgt.w	8021828 <_dtoa_r+0x4d0>
 8021cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cb0:	9d00      	ldr	r5, [sp, #0]
 8021cb2:	ea6f 0a03 	mvn.w	sl, r3
 8021cb6:	f04f 0800 	mov.w	r8, #0
 8021cba:	4631      	mov	r1, r6
 8021cbc:	4620      	mov	r0, r4
 8021cbe:	f000 fd1b 	bl	80226f8 <_Bfree>
 8021cc2:	2f00      	cmp	r7, #0
 8021cc4:	f43f aeb4 	beq.w	8021a30 <_dtoa_r+0x6d8>
 8021cc8:	f1b8 0f00 	cmp.w	r8, #0
 8021ccc:	d005      	beq.n	8021cda <_dtoa_r+0x982>
 8021cce:	45b8      	cmp	r8, r7
 8021cd0:	d003      	beq.n	8021cda <_dtoa_r+0x982>
 8021cd2:	4641      	mov	r1, r8
 8021cd4:	4620      	mov	r0, r4
 8021cd6:	f000 fd0f 	bl	80226f8 <_Bfree>
 8021cda:	4639      	mov	r1, r7
 8021cdc:	4620      	mov	r0, r4
 8021cde:	f000 fd0b 	bl	80226f8 <_Bfree>
 8021ce2:	e6a5      	b.n	8021a30 <_dtoa_r+0x6d8>
 8021ce4:	2600      	movs	r6, #0
 8021ce6:	4637      	mov	r7, r6
 8021ce8:	e7e1      	b.n	8021cae <_dtoa_r+0x956>
 8021cea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021cec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021cf0:	4637      	mov	r7, r6
 8021cf2:	e599      	b.n	8021828 <_dtoa_r+0x4d0>
 8021cf4:	9b08      	ldr	r3, [sp, #32]
 8021cf6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021cfa:	2b00      	cmp	r3, #0
 8021cfc:	f000 80fd 	beq.w	8021efa <_dtoa_r+0xba2>
 8021d00:	2d00      	cmp	r5, #0
 8021d02:	dd05      	ble.n	8021d10 <_dtoa_r+0x9b8>
 8021d04:	4639      	mov	r1, r7
 8021d06:	462a      	mov	r2, r5
 8021d08:	4620      	mov	r0, r4
 8021d0a:	f000 ff11 	bl	8022b30 <__lshift>
 8021d0e:	4607      	mov	r7, r0
 8021d10:	9b06      	ldr	r3, [sp, #24]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d05c      	beq.n	8021dd0 <_dtoa_r+0xa78>
 8021d16:	6879      	ldr	r1, [r7, #4]
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f000 fcad 	bl	8022678 <_Balloc>
 8021d1e:	4605      	mov	r5, r0
 8021d20:	b928      	cbnz	r0, 8021d2e <_dtoa_r+0x9d6>
 8021d22:	4b80      	ldr	r3, [pc, #512]	; (8021f24 <_dtoa_r+0xbcc>)
 8021d24:	4602      	mov	r2, r0
 8021d26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021d2a:	f7ff bb2e 	b.w	802138a <_dtoa_r+0x32>
 8021d2e:	693a      	ldr	r2, [r7, #16]
 8021d30:	3202      	adds	r2, #2
 8021d32:	0092      	lsls	r2, r2, #2
 8021d34:	f107 010c 	add.w	r1, r7, #12
 8021d38:	300c      	adds	r0, #12
 8021d3a:	f7fd fb71 	bl	801f420 <memcpy>
 8021d3e:	2201      	movs	r2, #1
 8021d40:	4629      	mov	r1, r5
 8021d42:	4620      	mov	r0, r4
 8021d44:	f000 fef4 	bl	8022b30 <__lshift>
 8021d48:	9b00      	ldr	r3, [sp, #0]
 8021d4a:	3301      	adds	r3, #1
 8021d4c:	9301      	str	r3, [sp, #4]
 8021d4e:	9b00      	ldr	r3, [sp, #0]
 8021d50:	444b      	add	r3, r9
 8021d52:	9307      	str	r3, [sp, #28]
 8021d54:	9b02      	ldr	r3, [sp, #8]
 8021d56:	f003 0301 	and.w	r3, r3, #1
 8021d5a:	46b8      	mov	r8, r7
 8021d5c:	9306      	str	r3, [sp, #24]
 8021d5e:	4607      	mov	r7, r0
 8021d60:	9b01      	ldr	r3, [sp, #4]
 8021d62:	4631      	mov	r1, r6
 8021d64:	3b01      	subs	r3, #1
 8021d66:	4658      	mov	r0, fp
 8021d68:	9302      	str	r3, [sp, #8]
 8021d6a:	f7ff fa69 	bl	8021240 <quorem>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	3330      	adds	r3, #48	; 0x30
 8021d72:	9004      	str	r0, [sp, #16]
 8021d74:	4641      	mov	r1, r8
 8021d76:	4658      	mov	r0, fp
 8021d78:	9308      	str	r3, [sp, #32]
 8021d7a:	f000 ff45 	bl	8022c08 <__mcmp>
 8021d7e:	463a      	mov	r2, r7
 8021d80:	4681      	mov	r9, r0
 8021d82:	4631      	mov	r1, r6
 8021d84:	4620      	mov	r0, r4
 8021d86:	f000 ff5b 	bl	8022c40 <__mdiff>
 8021d8a:	68c2      	ldr	r2, [r0, #12]
 8021d8c:	9b08      	ldr	r3, [sp, #32]
 8021d8e:	4605      	mov	r5, r0
 8021d90:	bb02      	cbnz	r2, 8021dd4 <_dtoa_r+0xa7c>
 8021d92:	4601      	mov	r1, r0
 8021d94:	4658      	mov	r0, fp
 8021d96:	f000 ff37 	bl	8022c08 <__mcmp>
 8021d9a:	9b08      	ldr	r3, [sp, #32]
 8021d9c:	4602      	mov	r2, r0
 8021d9e:	4629      	mov	r1, r5
 8021da0:	4620      	mov	r0, r4
 8021da2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8021da6:	f000 fca7 	bl	80226f8 <_Bfree>
 8021daa:	9b05      	ldr	r3, [sp, #20]
 8021dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021dae:	9d01      	ldr	r5, [sp, #4]
 8021db0:	ea43 0102 	orr.w	r1, r3, r2
 8021db4:	9b06      	ldr	r3, [sp, #24]
 8021db6:	430b      	orrs	r3, r1
 8021db8:	9b08      	ldr	r3, [sp, #32]
 8021dba:	d10d      	bne.n	8021dd8 <_dtoa_r+0xa80>
 8021dbc:	2b39      	cmp	r3, #57	; 0x39
 8021dbe:	d029      	beq.n	8021e14 <_dtoa_r+0xabc>
 8021dc0:	f1b9 0f00 	cmp.w	r9, #0
 8021dc4:	dd01      	ble.n	8021dca <_dtoa_r+0xa72>
 8021dc6:	9b04      	ldr	r3, [sp, #16]
 8021dc8:	3331      	adds	r3, #49	; 0x31
 8021dca:	9a02      	ldr	r2, [sp, #8]
 8021dcc:	7013      	strb	r3, [r2, #0]
 8021dce:	e774      	b.n	8021cba <_dtoa_r+0x962>
 8021dd0:	4638      	mov	r0, r7
 8021dd2:	e7b9      	b.n	8021d48 <_dtoa_r+0x9f0>
 8021dd4:	2201      	movs	r2, #1
 8021dd6:	e7e2      	b.n	8021d9e <_dtoa_r+0xa46>
 8021dd8:	f1b9 0f00 	cmp.w	r9, #0
 8021ddc:	db06      	blt.n	8021dec <_dtoa_r+0xa94>
 8021dde:	9905      	ldr	r1, [sp, #20]
 8021de0:	ea41 0909 	orr.w	r9, r1, r9
 8021de4:	9906      	ldr	r1, [sp, #24]
 8021de6:	ea59 0101 	orrs.w	r1, r9, r1
 8021dea:	d120      	bne.n	8021e2e <_dtoa_r+0xad6>
 8021dec:	2a00      	cmp	r2, #0
 8021dee:	ddec      	ble.n	8021dca <_dtoa_r+0xa72>
 8021df0:	4659      	mov	r1, fp
 8021df2:	2201      	movs	r2, #1
 8021df4:	4620      	mov	r0, r4
 8021df6:	9301      	str	r3, [sp, #4]
 8021df8:	f000 fe9a 	bl	8022b30 <__lshift>
 8021dfc:	4631      	mov	r1, r6
 8021dfe:	4683      	mov	fp, r0
 8021e00:	f000 ff02 	bl	8022c08 <__mcmp>
 8021e04:	2800      	cmp	r0, #0
 8021e06:	9b01      	ldr	r3, [sp, #4]
 8021e08:	dc02      	bgt.n	8021e10 <_dtoa_r+0xab8>
 8021e0a:	d1de      	bne.n	8021dca <_dtoa_r+0xa72>
 8021e0c:	07da      	lsls	r2, r3, #31
 8021e0e:	d5dc      	bpl.n	8021dca <_dtoa_r+0xa72>
 8021e10:	2b39      	cmp	r3, #57	; 0x39
 8021e12:	d1d8      	bne.n	8021dc6 <_dtoa_r+0xa6e>
 8021e14:	9a02      	ldr	r2, [sp, #8]
 8021e16:	2339      	movs	r3, #57	; 0x39
 8021e18:	7013      	strb	r3, [r2, #0]
 8021e1a:	462b      	mov	r3, r5
 8021e1c:	461d      	mov	r5, r3
 8021e1e:	3b01      	subs	r3, #1
 8021e20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021e24:	2a39      	cmp	r2, #57	; 0x39
 8021e26:	d050      	beq.n	8021eca <_dtoa_r+0xb72>
 8021e28:	3201      	adds	r2, #1
 8021e2a:	701a      	strb	r2, [r3, #0]
 8021e2c:	e745      	b.n	8021cba <_dtoa_r+0x962>
 8021e2e:	2a00      	cmp	r2, #0
 8021e30:	dd03      	ble.n	8021e3a <_dtoa_r+0xae2>
 8021e32:	2b39      	cmp	r3, #57	; 0x39
 8021e34:	d0ee      	beq.n	8021e14 <_dtoa_r+0xabc>
 8021e36:	3301      	adds	r3, #1
 8021e38:	e7c7      	b.n	8021dca <_dtoa_r+0xa72>
 8021e3a:	9a01      	ldr	r2, [sp, #4]
 8021e3c:	9907      	ldr	r1, [sp, #28]
 8021e3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021e42:	428a      	cmp	r2, r1
 8021e44:	d02a      	beq.n	8021e9c <_dtoa_r+0xb44>
 8021e46:	4659      	mov	r1, fp
 8021e48:	2300      	movs	r3, #0
 8021e4a:	220a      	movs	r2, #10
 8021e4c:	4620      	mov	r0, r4
 8021e4e:	f000 fc75 	bl	802273c <__multadd>
 8021e52:	45b8      	cmp	r8, r7
 8021e54:	4683      	mov	fp, r0
 8021e56:	f04f 0300 	mov.w	r3, #0
 8021e5a:	f04f 020a 	mov.w	r2, #10
 8021e5e:	4641      	mov	r1, r8
 8021e60:	4620      	mov	r0, r4
 8021e62:	d107      	bne.n	8021e74 <_dtoa_r+0xb1c>
 8021e64:	f000 fc6a 	bl	802273c <__multadd>
 8021e68:	4680      	mov	r8, r0
 8021e6a:	4607      	mov	r7, r0
 8021e6c:	9b01      	ldr	r3, [sp, #4]
 8021e6e:	3301      	adds	r3, #1
 8021e70:	9301      	str	r3, [sp, #4]
 8021e72:	e775      	b.n	8021d60 <_dtoa_r+0xa08>
 8021e74:	f000 fc62 	bl	802273c <__multadd>
 8021e78:	4639      	mov	r1, r7
 8021e7a:	4680      	mov	r8, r0
 8021e7c:	2300      	movs	r3, #0
 8021e7e:	220a      	movs	r2, #10
 8021e80:	4620      	mov	r0, r4
 8021e82:	f000 fc5b 	bl	802273c <__multadd>
 8021e86:	4607      	mov	r7, r0
 8021e88:	e7f0      	b.n	8021e6c <_dtoa_r+0xb14>
 8021e8a:	f1b9 0f00 	cmp.w	r9, #0
 8021e8e:	9a00      	ldr	r2, [sp, #0]
 8021e90:	bfcc      	ite	gt
 8021e92:	464d      	movgt	r5, r9
 8021e94:	2501      	movle	r5, #1
 8021e96:	4415      	add	r5, r2
 8021e98:	f04f 0800 	mov.w	r8, #0
 8021e9c:	4659      	mov	r1, fp
 8021e9e:	2201      	movs	r2, #1
 8021ea0:	4620      	mov	r0, r4
 8021ea2:	9301      	str	r3, [sp, #4]
 8021ea4:	f000 fe44 	bl	8022b30 <__lshift>
 8021ea8:	4631      	mov	r1, r6
 8021eaa:	4683      	mov	fp, r0
 8021eac:	f000 feac 	bl	8022c08 <__mcmp>
 8021eb0:	2800      	cmp	r0, #0
 8021eb2:	dcb2      	bgt.n	8021e1a <_dtoa_r+0xac2>
 8021eb4:	d102      	bne.n	8021ebc <_dtoa_r+0xb64>
 8021eb6:	9b01      	ldr	r3, [sp, #4]
 8021eb8:	07db      	lsls	r3, r3, #31
 8021eba:	d4ae      	bmi.n	8021e1a <_dtoa_r+0xac2>
 8021ebc:	462b      	mov	r3, r5
 8021ebe:	461d      	mov	r5, r3
 8021ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021ec4:	2a30      	cmp	r2, #48	; 0x30
 8021ec6:	d0fa      	beq.n	8021ebe <_dtoa_r+0xb66>
 8021ec8:	e6f7      	b.n	8021cba <_dtoa_r+0x962>
 8021eca:	9a00      	ldr	r2, [sp, #0]
 8021ecc:	429a      	cmp	r2, r3
 8021ece:	d1a5      	bne.n	8021e1c <_dtoa_r+0xac4>
 8021ed0:	f10a 0a01 	add.w	sl, sl, #1
 8021ed4:	2331      	movs	r3, #49	; 0x31
 8021ed6:	e779      	b.n	8021dcc <_dtoa_r+0xa74>
 8021ed8:	4b13      	ldr	r3, [pc, #76]	; (8021f28 <_dtoa_r+0xbd0>)
 8021eda:	f7ff baaf 	b.w	802143c <_dtoa_r+0xe4>
 8021ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	f47f aa86 	bne.w	80213f2 <_dtoa_r+0x9a>
 8021ee6:	4b11      	ldr	r3, [pc, #68]	; (8021f2c <_dtoa_r+0xbd4>)
 8021ee8:	f7ff baa8 	b.w	802143c <_dtoa_r+0xe4>
 8021eec:	f1b9 0f00 	cmp.w	r9, #0
 8021ef0:	dc03      	bgt.n	8021efa <_dtoa_r+0xba2>
 8021ef2:	9b05      	ldr	r3, [sp, #20]
 8021ef4:	2b02      	cmp	r3, #2
 8021ef6:	f73f aec9 	bgt.w	8021c8c <_dtoa_r+0x934>
 8021efa:	9d00      	ldr	r5, [sp, #0]
 8021efc:	4631      	mov	r1, r6
 8021efe:	4658      	mov	r0, fp
 8021f00:	f7ff f99e 	bl	8021240 <quorem>
 8021f04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021f08:	f805 3b01 	strb.w	r3, [r5], #1
 8021f0c:	9a00      	ldr	r2, [sp, #0]
 8021f0e:	1aaa      	subs	r2, r5, r2
 8021f10:	4591      	cmp	r9, r2
 8021f12:	ddba      	ble.n	8021e8a <_dtoa_r+0xb32>
 8021f14:	4659      	mov	r1, fp
 8021f16:	2300      	movs	r3, #0
 8021f18:	220a      	movs	r2, #10
 8021f1a:	4620      	mov	r0, r4
 8021f1c:	f000 fc0e 	bl	802273c <__multadd>
 8021f20:	4683      	mov	fp, r0
 8021f22:	e7eb      	b.n	8021efc <_dtoa_r+0xba4>
 8021f24:	08025f5c 	.word	0x08025f5c
 8021f28:	08025d5c 	.word	0x08025d5c
 8021f2c:	08025ed9 	.word	0x08025ed9

08021f30 <rshift>:
 8021f30:	6903      	ldr	r3, [r0, #16]
 8021f32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021f3e:	f100 0414 	add.w	r4, r0, #20
 8021f42:	dd45      	ble.n	8021fd0 <rshift+0xa0>
 8021f44:	f011 011f 	ands.w	r1, r1, #31
 8021f48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021f4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021f50:	d10c      	bne.n	8021f6c <rshift+0x3c>
 8021f52:	f100 0710 	add.w	r7, r0, #16
 8021f56:	4629      	mov	r1, r5
 8021f58:	42b1      	cmp	r1, r6
 8021f5a:	d334      	bcc.n	8021fc6 <rshift+0x96>
 8021f5c:	1a9b      	subs	r3, r3, r2
 8021f5e:	009b      	lsls	r3, r3, #2
 8021f60:	1eea      	subs	r2, r5, #3
 8021f62:	4296      	cmp	r6, r2
 8021f64:	bf38      	it	cc
 8021f66:	2300      	movcc	r3, #0
 8021f68:	4423      	add	r3, r4
 8021f6a:	e015      	b.n	8021f98 <rshift+0x68>
 8021f6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021f70:	f1c1 0820 	rsb	r8, r1, #32
 8021f74:	40cf      	lsrs	r7, r1
 8021f76:	f105 0e04 	add.w	lr, r5, #4
 8021f7a:	46a1      	mov	r9, r4
 8021f7c:	4576      	cmp	r6, lr
 8021f7e:	46f4      	mov	ip, lr
 8021f80:	d815      	bhi.n	8021fae <rshift+0x7e>
 8021f82:	1a9b      	subs	r3, r3, r2
 8021f84:	009a      	lsls	r2, r3, #2
 8021f86:	3a04      	subs	r2, #4
 8021f88:	3501      	adds	r5, #1
 8021f8a:	42ae      	cmp	r6, r5
 8021f8c:	bf38      	it	cc
 8021f8e:	2200      	movcc	r2, #0
 8021f90:	18a3      	adds	r3, r4, r2
 8021f92:	50a7      	str	r7, [r4, r2]
 8021f94:	b107      	cbz	r7, 8021f98 <rshift+0x68>
 8021f96:	3304      	adds	r3, #4
 8021f98:	1b1a      	subs	r2, r3, r4
 8021f9a:	42a3      	cmp	r3, r4
 8021f9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021fa0:	bf08      	it	eq
 8021fa2:	2300      	moveq	r3, #0
 8021fa4:	6102      	str	r2, [r0, #16]
 8021fa6:	bf08      	it	eq
 8021fa8:	6143      	streq	r3, [r0, #20]
 8021faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021fae:	f8dc c000 	ldr.w	ip, [ip]
 8021fb2:	fa0c fc08 	lsl.w	ip, ip, r8
 8021fb6:	ea4c 0707 	orr.w	r7, ip, r7
 8021fba:	f849 7b04 	str.w	r7, [r9], #4
 8021fbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021fc2:	40cf      	lsrs	r7, r1
 8021fc4:	e7da      	b.n	8021f7c <rshift+0x4c>
 8021fc6:	f851 cb04 	ldr.w	ip, [r1], #4
 8021fca:	f847 cf04 	str.w	ip, [r7, #4]!
 8021fce:	e7c3      	b.n	8021f58 <rshift+0x28>
 8021fd0:	4623      	mov	r3, r4
 8021fd2:	e7e1      	b.n	8021f98 <rshift+0x68>

08021fd4 <__hexdig_fun>:
 8021fd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021fd8:	2b09      	cmp	r3, #9
 8021fda:	d802      	bhi.n	8021fe2 <__hexdig_fun+0xe>
 8021fdc:	3820      	subs	r0, #32
 8021fde:	b2c0      	uxtb	r0, r0
 8021fe0:	4770      	bx	lr
 8021fe2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021fe6:	2b05      	cmp	r3, #5
 8021fe8:	d801      	bhi.n	8021fee <__hexdig_fun+0x1a>
 8021fea:	3847      	subs	r0, #71	; 0x47
 8021fec:	e7f7      	b.n	8021fde <__hexdig_fun+0xa>
 8021fee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021ff2:	2b05      	cmp	r3, #5
 8021ff4:	d801      	bhi.n	8021ffa <__hexdig_fun+0x26>
 8021ff6:	3827      	subs	r0, #39	; 0x27
 8021ff8:	e7f1      	b.n	8021fde <__hexdig_fun+0xa>
 8021ffa:	2000      	movs	r0, #0
 8021ffc:	4770      	bx	lr
	...

08022000 <__gethex>:
 8022000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022004:	ed2d 8b02 	vpush	{d8}
 8022008:	b089      	sub	sp, #36	; 0x24
 802200a:	ee08 0a10 	vmov	s16, r0
 802200e:	9304      	str	r3, [sp, #16]
 8022010:	4bbc      	ldr	r3, [pc, #752]	; (8022304 <__gethex+0x304>)
 8022012:	681b      	ldr	r3, [r3, #0]
 8022014:	9301      	str	r3, [sp, #4]
 8022016:	4618      	mov	r0, r3
 8022018:	468b      	mov	fp, r1
 802201a:	4690      	mov	r8, r2
 802201c:	f7de f8d8 	bl	80001d0 <strlen>
 8022020:	9b01      	ldr	r3, [sp, #4]
 8022022:	f8db 2000 	ldr.w	r2, [fp]
 8022026:	4403      	add	r3, r0
 8022028:	4682      	mov	sl, r0
 802202a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802202e:	9305      	str	r3, [sp, #20]
 8022030:	1c93      	adds	r3, r2, #2
 8022032:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8022036:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802203a:	32fe      	adds	r2, #254	; 0xfe
 802203c:	18d1      	adds	r1, r2, r3
 802203e:	461f      	mov	r7, r3
 8022040:	f813 0b01 	ldrb.w	r0, [r3], #1
 8022044:	9100      	str	r1, [sp, #0]
 8022046:	2830      	cmp	r0, #48	; 0x30
 8022048:	d0f8      	beq.n	802203c <__gethex+0x3c>
 802204a:	f7ff ffc3 	bl	8021fd4 <__hexdig_fun>
 802204e:	4604      	mov	r4, r0
 8022050:	2800      	cmp	r0, #0
 8022052:	d13a      	bne.n	80220ca <__gethex+0xca>
 8022054:	9901      	ldr	r1, [sp, #4]
 8022056:	4652      	mov	r2, sl
 8022058:	4638      	mov	r0, r7
 802205a:	f001 f982 	bl	8023362 <strncmp>
 802205e:	4605      	mov	r5, r0
 8022060:	2800      	cmp	r0, #0
 8022062:	d168      	bne.n	8022136 <__gethex+0x136>
 8022064:	f817 000a 	ldrb.w	r0, [r7, sl]
 8022068:	eb07 060a 	add.w	r6, r7, sl
 802206c:	f7ff ffb2 	bl	8021fd4 <__hexdig_fun>
 8022070:	2800      	cmp	r0, #0
 8022072:	d062      	beq.n	802213a <__gethex+0x13a>
 8022074:	4633      	mov	r3, r6
 8022076:	7818      	ldrb	r0, [r3, #0]
 8022078:	2830      	cmp	r0, #48	; 0x30
 802207a:	461f      	mov	r7, r3
 802207c:	f103 0301 	add.w	r3, r3, #1
 8022080:	d0f9      	beq.n	8022076 <__gethex+0x76>
 8022082:	f7ff ffa7 	bl	8021fd4 <__hexdig_fun>
 8022086:	2301      	movs	r3, #1
 8022088:	fab0 f480 	clz	r4, r0
 802208c:	0964      	lsrs	r4, r4, #5
 802208e:	4635      	mov	r5, r6
 8022090:	9300      	str	r3, [sp, #0]
 8022092:	463a      	mov	r2, r7
 8022094:	4616      	mov	r6, r2
 8022096:	3201      	adds	r2, #1
 8022098:	7830      	ldrb	r0, [r6, #0]
 802209a:	f7ff ff9b 	bl	8021fd4 <__hexdig_fun>
 802209e:	2800      	cmp	r0, #0
 80220a0:	d1f8      	bne.n	8022094 <__gethex+0x94>
 80220a2:	9901      	ldr	r1, [sp, #4]
 80220a4:	4652      	mov	r2, sl
 80220a6:	4630      	mov	r0, r6
 80220a8:	f001 f95b 	bl	8023362 <strncmp>
 80220ac:	b980      	cbnz	r0, 80220d0 <__gethex+0xd0>
 80220ae:	b94d      	cbnz	r5, 80220c4 <__gethex+0xc4>
 80220b0:	eb06 050a 	add.w	r5, r6, sl
 80220b4:	462a      	mov	r2, r5
 80220b6:	4616      	mov	r6, r2
 80220b8:	3201      	adds	r2, #1
 80220ba:	7830      	ldrb	r0, [r6, #0]
 80220bc:	f7ff ff8a 	bl	8021fd4 <__hexdig_fun>
 80220c0:	2800      	cmp	r0, #0
 80220c2:	d1f8      	bne.n	80220b6 <__gethex+0xb6>
 80220c4:	1bad      	subs	r5, r5, r6
 80220c6:	00ad      	lsls	r5, r5, #2
 80220c8:	e004      	b.n	80220d4 <__gethex+0xd4>
 80220ca:	2400      	movs	r4, #0
 80220cc:	4625      	mov	r5, r4
 80220ce:	e7e0      	b.n	8022092 <__gethex+0x92>
 80220d0:	2d00      	cmp	r5, #0
 80220d2:	d1f7      	bne.n	80220c4 <__gethex+0xc4>
 80220d4:	7833      	ldrb	r3, [r6, #0]
 80220d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80220da:	2b50      	cmp	r3, #80	; 0x50
 80220dc:	d13b      	bne.n	8022156 <__gethex+0x156>
 80220de:	7873      	ldrb	r3, [r6, #1]
 80220e0:	2b2b      	cmp	r3, #43	; 0x2b
 80220e2:	d02c      	beq.n	802213e <__gethex+0x13e>
 80220e4:	2b2d      	cmp	r3, #45	; 0x2d
 80220e6:	d02e      	beq.n	8022146 <__gethex+0x146>
 80220e8:	1c71      	adds	r1, r6, #1
 80220ea:	f04f 0900 	mov.w	r9, #0
 80220ee:	7808      	ldrb	r0, [r1, #0]
 80220f0:	f7ff ff70 	bl	8021fd4 <__hexdig_fun>
 80220f4:	1e43      	subs	r3, r0, #1
 80220f6:	b2db      	uxtb	r3, r3
 80220f8:	2b18      	cmp	r3, #24
 80220fa:	d82c      	bhi.n	8022156 <__gethex+0x156>
 80220fc:	f1a0 0210 	sub.w	r2, r0, #16
 8022100:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8022104:	f7ff ff66 	bl	8021fd4 <__hexdig_fun>
 8022108:	1e43      	subs	r3, r0, #1
 802210a:	b2db      	uxtb	r3, r3
 802210c:	2b18      	cmp	r3, #24
 802210e:	d91d      	bls.n	802214c <__gethex+0x14c>
 8022110:	f1b9 0f00 	cmp.w	r9, #0
 8022114:	d000      	beq.n	8022118 <__gethex+0x118>
 8022116:	4252      	negs	r2, r2
 8022118:	4415      	add	r5, r2
 802211a:	f8cb 1000 	str.w	r1, [fp]
 802211e:	b1e4      	cbz	r4, 802215a <__gethex+0x15a>
 8022120:	9b00      	ldr	r3, [sp, #0]
 8022122:	2b00      	cmp	r3, #0
 8022124:	bf14      	ite	ne
 8022126:	2700      	movne	r7, #0
 8022128:	2706      	moveq	r7, #6
 802212a:	4638      	mov	r0, r7
 802212c:	b009      	add	sp, #36	; 0x24
 802212e:	ecbd 8b02 	vpop	{d8}
 8022132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022136:	463e      	mov	r6, r7
 8022138:	4625      	mov	r5, r4
 802213a:	2401      	movs	r4, #1
 802213c:	e7ca      	b.n	80220d4 <__gethex+0xd4>
 802213e:	f04f 0900 	mov.w	r9, #0
 8022142:	1cb1      	adds	r1, r6, #2
 8022144:	e7d3      	b.n	80220ee <__gethex+0xee>
 8022146:	f04f 0901 	mov.w	r9, #1
 802214a:	e7fa      	b.n	8022142 <__gethex+0x142>
 802214c:	230a      	movs	r3, #10
 802214e:	fb03 0202 	mla	r2, r3, r2, r0
 8022152:	3a10      	subs	r2, #16
 8022154:	e7d4      	b.n	8022100 <__gethex+0x100>
 8022156:	4631      	mov	r1, r6
 8022158:	e7df      	b.n	802211a <__gethex+0x11a>
 802215a:	1bf3      	subs	r3, r6, r7
 802215c:	3b01      	subs	r3, #1
 802215e:	4621      	mov	r1, r4
 8022160:	2b07      	cmp	r3, #7
 8022162:	dc0b      	bgt.n	802217c <__gethex+0x17c>
 8022164:	ee18 0a10 	vmov	r0, s16
 8022168:	f000 fa86 	bl	8022678 <_Balloc>
 802216c:	4604      	mov	r4, r0
 802216e:	b940      	cbnz	r0, 8022182 <__gethex+0x182>
 8022170:	4b65      	ldr	r3, [pc, #404]	; (8022308 <__gethex+0x308>)
 8022172:	4602      	mov	r2, r0
 8022174:	21de      	movs	r1, #222	; 0xde
 8022176:	4865      	ldr	r0, [pc, #404]	; (802230c <__gethex+0x30c>)
 8022178:	f001 f912 	bl	80233a0 <__assert_func>
 802217c:	3101      	adds	r1, #1
 802217e:	105b      	asrs	r3, r3, #1
 8022180:	e7ee      	b.n	8022160 <__gethex+0x160>
 8022182:	f100 0914 	add.w	r9, r0, #20
 8022186:	f04f 0b00 	mov.w	fp, #0
 802218a:	f1ca 0301 	rsb	r3, sl, #1
 802218e:	f8cd 9008 	str.w	r9, [sp, #8]
 8022192:	f8cd b000 	str.w	fp, [sp]
 8022196:	9306      	str	r3, [sp, #24]
 8022198:	42b7      	cmp	r7, r6
 802219a:	d340      	bcc.n	802221e <__gethex+0x21e>
 802219c:	9802      	ldr	r0, [sp, #8]
 802219e:	9b00      	ldr	r3, [sp, #0]
 80221a0:	f840 3b04 	str.w	r3, [r0], #4
 80221a4:	eba0 0009 	sub.w	r0, r0, r9
 80221a8:	1080      	asrs	r0, r0, #2
 80221aa:	0146      	lsls	r6, r0, #5
 80221ac:	6120      	str	r0, [r4, #16]
 80221ae:	4618      	mov	r0, r3
 80221b0:	f000 fb58 	bl	8022864 <__hi0bits>
 80221b4:	1a30      	subs	r0, r6, r0
 80221b6:	f8d8 6000 	ldr.w	r6, [r8]
 80221ba:	42b0      	cmp	r0, r6
 80221bc:	dd63      	ble.n	8022286 <__gethex+0x286>
 80221be:	1b87      	subs	r7, r0, r6
 80221c0:	4639      	mov	r1, r7
 80221c2:	4620      	mov	r0, r4
 80221c4:	f000 fef2 	bl	8022fac <__any_on>
 80221c8:	4682      	mov	sl, r0
 80221ca:	b1a8      	cbz	r0, 80221f8 <__gethex+0x1f8>
 80221cc:	1e7b      	subs	r3, r7, #1
 80221ce:	1159      	asrs	r1, r3, #5
 80221d0:	f003 021f 	and.w	r2, r3, #31
 80221d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80221d8:	f04f 0a01 	mov.w	sl, #1
 80221dc:	fa0a f202 	lsl.w	r2, sl, r2
 80221e0:	420a      	tst	r2, r1
 80221e2:	d009      	beq.n	80221f8 <__gethex+0x1f8>
 80221e4:	4553      	cmp	r3, sl
 80221e6:	dd05      	ble.n	80221f4 <__gethex+0x1f4>
 80221e8:	1eb9      	subs	r1, r7, #2
 80221ea:	4620      	mov	r0, r4
 80221ec:	f000 fede 	bl	8022fac <__any_on>
 80221f0:	2800      	cmp	r0, #0
 80221f2:	d145      	bne.n	8022280 <__gethex+0x280>
 80221f4:	f04f 0a02 	mov.w	sl, #2
 80221f8:	4639      	mov	r1, r7
 80221fa:	4620      	mov	r0, r4
 80221fc:	f7ff fe98 	bl	8021f30 <rshift>
 8022200:	443d      	add	r5, r7
 8022202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022206:	42ab      	cmp	r3, r5
 8022208:	da4c      	bge.n	80222a4 <__gethex+0x2a4>
 802220a:	ee18 0a10 	vmov	r0, s16
 802220e:	4621      	mov	r1, r4
 8022210:	f000 fa72 	bl	80226f8 <_Bfree>
 8022214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022216:	2300      	movs	r3, #0
 8022218:	6013      	str	r3, [r2, #0]
 802221a:	27a3      	movs	r7, #163	; 0xa3
 802221c:	e785      	b.n	802212a <__gethex+0x12a>
 802221e:	1e73      	subs	r3, r6, #1
 8022220:	9a05      	ldr	r2, [sp, #20]
 8022222:	9303      	str	r3, [sp, #12]
 8022224:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022228:	4293      	cmp	r3, r2
 802222a:	d019      	beq.n	8022260 <__gethex+0x260>
 802222c:	f1bb 0f20 	cmp.w	fp, #32
 8022230:	d107      	bne.n	8022242 <__gethex+0x242>
 8022232:	9b02      	ldr	r3, [sp, #8]
 8022234:	9a00      	ldr	r2, [sp, #0]
 8022236:	f843 2b04 	str.w	r2, [r3], #4
 802223a:	9302      	str	r3, [sp, #8]
 802223c:	2300      	movs	r3, #0
 802223e:	9300      	str	r3, [sp, #0]
 8022240:	469b      	mov	fp, r3
 8022242:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8022246:	f7ff fec5 	bl	8021fd4 <__hexdig_fun>
 802224a:	9b00      	ldr	r3, [sp, #0]
 802224c:	f000 000f 	and.w	r0, r0, #15
 8022250:	fa00 f00b 	lsl.w	r0, r0, fp
 8022254:	4303      	orrs	r3, r0
 8022256:	9300      	str	r3, [sp, #0]
 8022258:	f10b 0b04 	add.w	fp, fp, #4
 802225c:	9b03      	ldr	r3, [sp, #12]
 802225e:	e00d      	b.n	802227c <__gethex+0x27c>
 8022260:	9b03      	ldr	r3, [sp, #12]
 8022262:	9a06      	ldr	r2, [sp, #24]
 8022264:	4413      	add	r3, r2
 8022266:	42bb      	cmp	r3, r7
 8022268:	d3e0      	bcc.n	802222c <__gethex+0x22c>
 802226a:	4618      	mov	r0, r3
 802226c:	9901      	ldr	r1, [sp, #4]
 802226e:	9307      	str	r3, [sp, #28]
 8022270:	4652      	mov	r2, sl
 8022272:	f001 f876 	bl	8023362 <strncmp>
 8022276:	9b07      	ldr	r3, [sp, #28]
 8022278:	2800      	cmp	r0, #0
 802227a:	d1d7      	bne.n	802222c <__gethex+0x22c>
 802227c:	461e      	mov	r6, r3
 802227e:	e78b      	b.n	8022198 <__gethex+0x198>
 8022280:	f04f 0a03 	mov.w	sl, #3
 8022284:	e7b8      	b.n	80221f8 <__gethex+0x1f8>
 8022286:	da0a      	bge.n	802229e <__gethex+0x29e>
 8022288:	1a37      	subs	r7, r6, r0
 802228a:	4621      	mov	r1, r4
 802228c:	ee18 0a10 	vmov	r0, s16
 8022290:	463a      	mov	r2, r7
 8022292:	f000 fc4d 	bl	8022b30 <__lshift>
 8022296:	1bed      	subs	r5, r5, r7
 8022298:	4604      	mov	r4, r0
 802229a:	f100 0914 	add.w	r9, r0, #20
 802229e:	f04f 0a00 	mov.w	sl, #0
 80222a2:	e7ae      	b.n	8022202 <__gethex+0x202>
 80222a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80222a8:	42a8      	cmp	r0, r5
 80222aa:	dd72      	ble.n	8022392 <__gethex+0x392>
 80222ac:	1b45      	subs	r5, r0, r5
 80222ae:	42ae      	cmp	r6, r5
 80222b0:	dc36      	bgt.n	8022320 <__gethex+0x320>
 80222b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80222b6:	2b02      	cmp	r3, #2
 80222b8:	d02a      	beq.n	8022310 <__gethex+0x310>
 80222ba:	2b03      	cmp	r3, #3
 80222bc:	d02c      	beq.n	8022318 <__gethex+0x318>
 80222be:	2b01      	cmp	r3, #1
 80222c0:	d115      	bne.n	80222ee <__gethex+0x2ee>
 80222c2:	42ae      	cmp	r6, r5
 80222c4:	d113      	bne.n	80222ee <__gethex+0x2ee>
 80222c6:	2e01      	cmp	r6, #1
 80222c8:	d10b      	bne.n	80222e2 <__gethex+0x2e2>
 80222ca:	9a04      	ldr	r2, [sp, #16]
 80222cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80222d0:	6013      	str	r3, [r2, #0]
 80222d2:	2301      	movs	r3, #1
 80222d4:	6123      	str	r3, [r4, #16]
 80222d6:	f8c9 3000 	str.w	r3, [r9]
 80222da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80222dc:	2762      	movs	r7, #98	; 0x62
 80222de:	601c      	str	r4, [r3, #0]
 80222e0:	e723      	b.n	802212a <__gethex+0x12a>
 80222e2:	1e71      	subs	r1, r6, #1
 80222e4:	4620      	mov	r0, r4
 80222e6:	f000 fe61 	bl	8022fac <__any_on>
 80222ea:	2800      	cmp	r0, #0
 80222ec:	d1ed      	bne.n	80222ca <__gethex+0x2ca>
 80222ee:	ee18 0a10 	vmov	r0, s16
 80222f2:	4621      	mov	r1, r4
 80222f4:	f000 fa00 	bl	80226f8 <_Bfree>
 80222f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80222fa:	2300      	movs	r3, #0
 80222fc:	6013      	str	r3, [r2, #0]
 80222fe:	2750      	movs	r7, #80	; 0x50
 8022300:	e713      	b.n	802212a <__gethex+0x12a>
 8022302:	bf00      	nop
 8022304:	08025fd8 	.word	0x08025fd8
 8022308:	08025f5c 	.word	0x08025f5c
 802230c:	08025f6d 	.word	0x08025f6d
 8022310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022312:	2b00      	cmp	r3, #0
 8022314:	d1eb      	bne.n	80222ee <__gethex+0x2ee>
 8022316:	e7d8      	b.n	80222ca <__gethex+0x2ca>
 8022318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802231a:	2b00      	cmp	r3, #0
 802231c:	d1d5      	bne.n	80222ca <__gethex+0x2ca>
 802231e:	e7e6      	b.n	80222ee <__gethex+0x2ee>
 8022320:	1e6f      	subs	r7, r5, #1
 8022322:	f1ba 0f00 	cmp.w	sl, #0
 8022326:	d131      	bne.n	802238c <__gethex+0x38c>
 8022328:	b127      	cbz	r7, 8022334 <__gethex+0x334>
 802232a:	4639      	mov	r1, r7
 802232c:	4620      	mov	r0, r4
 802232e:	f000 fe3d 	bl	8022fac <__any_on>
 8022332:	4682      	mov	sl, r0
 8022334:	117b      	asrs	r3, r7, #5
 8022336:	2101      	movs	r1, #1
 8022338:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802233c:	f007 071f 	and.w	r7, r7, #31
 8022340:	fa01 f707 	lsl.w	r7, r1, r7
 8022344:	421f      	tst	r7, r3
 8022346:	4629      	mov	r1, r5
 8022348:	4620      	mov	r0, r4
 802234a:	bf18      	it	ne
 802234c:	f04a 0a02 	orrne.w	sl, sl, #2
 8022350:	1b76      	subs	r6, r6, r5
 8022352:	f7ff fded 	bl	8021f30 <rshift>
 8022356:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802235a:	2702      	movs	r7, #2
 802235c:	f1ba 0f00 	cmp.w	sl, #0
 8022360:	d048      	beq.n	80223f4 <__gethex+0x3f4>
 8022362:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8022366:	2b02      	cmp	r3, #2
 8022368:	d015      	beq.n	8022396 <__gethex+0x396>
 802236a:	2b03      	cmp	r3, #3
 802236c:	d017      	beq.n	802239e <__gethex+0x39e>
 802236e:	2b01      	cmp	r3, #1
 8022370:	d109      	bne.n	8022386 <__gethex+0x386>
 8022372:	f01a 0f02 	tst.w	sl, #2
 8022376:	d006      	beq.n	8022386 <__gethex+0x386>
 8022378:	f8d9 0000 	ldr.w	r0, [r9]
 802237c:	ea4a 0a00 	orr.w	sl, sl, r0
 8022380:	f01a 0f01 	tst.w	sl, #1
 8022384:	d10e      	bne.n	80223a4 <__gethex+0x3a4>
 8022386:	f047 0710 	orr.w	r7, r7, #16
 802238a:	e033      	b.n	80223f4 <__gethex+0x3f4>
 802238c:	f04f 0a01 	mov.w	sl, #1
 8022390:	e7d0      	b.n	8022334 <__gethex+0x334>
 8022392:	2701      	movs	r7, #1
 8022394:	e7e2      	b.n	802235c <__gethex+0x35c>
 8022396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022398:	f1c3 0301 	rsb	r3, r3, #1
 802239c:	9315      	str	r3, [sp, #84]	; 0x54
 802239e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80223a0:	2b00      	cmp	r3, #0
 80223a2:	d0f0      	beq.n	8022386 <__gethex+0x386>
 80223a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80223a8:	f104 0314 	add.w	r3, r4, #20
 80223ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80223b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80223b4:	f04f 0c00 	mov.w	ip, #0
 80223b8:	4618      	mov	r0, r3
 80223ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80223be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80223c2:	d01c      	beq.n	80223fe <__gethex+0x3fe>
 80223c4:	3201      	adds	r2, #1
 80223c6:	6002      	str	r2, [r0, #0]
 80223c8:	2f02      	cmp	r7, #2
 80223ca:	f104 0314 	add.w	r3, r4, #20
 80223ce:	d13f      	bne.n	8022450 <__gethex+0x450>
 80223d0:	f8d8 2000 	ldr.w	r2, [r8]
 80223d4:	3a01      	subs	r2, #1
 80223d6:	42b2      	cmp	r2, r6
 80223d8:	d10a      	bne.n	80223f0 <__gethex+0x3f0>
 80223da:	1171      	asrs	r1, r6, #5
 80223dc:	2201      	movs	r2, #1
 80223de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80223e2:	f006 061f 	and.w	r6, r6, #31
 80223e6:	fa02 f606 	lsl.w	r6, r2, r6
 80223ea:	421e      	tst	r6, r3
 80223ec:	bf18      	it	ne
 80223ee:	4617      	movne	r7, r2
 80223f0:	f047 0720 	orr.w	r7, r7, #32
 80223f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80223f6:	601c      	str	r4, [r3, #0]
 80223f8:	9b04      	ldr	r3, [sp, #16]
 80223fa:	601d      	str	r5, [r3, #0]
 80223fc:	e695      	b.n	802212a <__gethex+0x12a>
 80223fe:	4299      	cmp	r1, r3
 8022400:	f843 cc04 	str.w	ip, [r3, #-4]
 8022404:	d8d8      	bhi.n	80223b8 <__gethex+0x3b8>
 8022406:	68a3      	ldr	r3, [r4, #8]
 8022408:	459b      	cmp	fp, r3
 802240a:	db19      	blt.n	8022440 <__gethex+0x440>
 802240c:	6861      	ldr	r1, [r4, #4]
 802240e:	ee18 0a10 	vmov	r0, s16
 8022412:	3101      	adds	r1, #1
 8022414:	f000 f930 	bl	8022678 <_Balloc>
 8022418:	4681      	mov	r9, r0
 802241a:	b918      	cbnz	r0, 8022424 <__gethex+0x424>
 802241c:	4b1a      	ldr	r3, [pc, #104]	; (8022488 <__gethex+0x488>)
 802241e:	4602      	mov	r2, r0
 8022420:	2184      	movs	r1, #132	; 0x84
 8022422:	e6a8      	b.n	8022176 <__gethex+0x176>
 8022424:	6922      	ldr	r2, [r4, #16]
 8022426:	3202      	adds	r2, #2
 8022428:	f104 010c 	add.w	r1, r4, #12
 802242c:	0092      	lsls	r2, r2, #2
 802242e:	300c      	adds	r0, #12
 8022430:	f7fc fff6 	bl	801f420 <memcpy>
 8022434:	4621      	mov	r1, r4
 8022436:	ee18 0a10 	vmov	r0, s16
 802243a:	f000 f95d 	bl	80226f8 <_Bfree>
 802243e:	464c      	mov	r4, r9
 8022440:	6923      	ldr	r3, [r4, #16]
 8022442:	1c5a      	adds	r2, r3, #1
 8022444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022448:	6122      	str	r2, [r4, #16]
 802244a:	2201      	movs	r2, #1
 802244c:	615a      	str	r2, [r3, #20]
 802244e:	e7bb      	b.n	80223c8 <__gethex+0x3c8>
 8022450:	6922      	ldr	r2, [r4, #16]
 8022452:	455a      	cmp	r2, fp
 8022454:	dd0b      	ble.n	802246e <__gethex+0x46e>
 8022456:	2101      	movs	r1, #1
 8022458:	4620      	mov	r0, r4
 802245a:	f7ff fd69 	bl	8021f30 <rshift>
 802245e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022462:	3501      	adds	r5, #1
 8022464:	42ab      	cmp	r3, r5
 8022466:	f6ff aed0 	blt.w	802220a <__gethex+0x20a>
 802246a:	2701      	movs	r7, #1
 802246c:	e7c0      	b.n	80223f0 <__gethex+0x3f0>
 802246e:	f016 061f 	ands.w	r6, r6, #31
 8022472:	d0fa      	beq.n	802246a <__gethex+0x46a>
 8022474:	449a      	add	sl, r3
 8022476:	f1c6 0620 	rsb	r6, r6, #32
 802247a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 802247e:	f000 f9f1 	bl	8022864 <__hi0bits>
 8022482:	42b0      	cmp	r0, r6
 8022484:	dbe7      	blt.n	8022456 <__gethex+0x456>
 8022486:	e7f0      	b.n	802246a <__gethex+0x46a>
 8022488:	08025f5c 	.word	0x08025f5c

0802248c <L_shift>:
 802248c:	f1c2 0208 	rsb	r2, r2, #8
 8022490:	0092      	lsls	r2, r2, #2
 8022492:	b570      	push	{r4, r5, r6, lr}
 8022494:	f1c2 0620 	rsb	r6, r2, #32
 8022498:	6843      	ldr	r3, [r0, #4]
 802249a:	6804      	ldr	r4, [r0, #0]
 802249c:	fa03 f506 	lsl.w	r5, r3, r6
 80224a0:	432c      	orrs	r4, r5
 80224a2:	40d3      	lsrs	r3, r2
 80224a4:	6004      	str	r4, [r0, #0]
 80224a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80224aa:	4288      	cmp	r0, r1
 80224ac:	d3f4      	bcc.n	8022498 <L_shift+0xc>
 80224ae:	bd70      	pop	{r4, r5, r6, pc}

080224b0 <__match>:
 80224b0:	b530      	push	{r4, r5, lr}
 80224b2:	6803      	ldr	r3, [r0, #0]
 80224b4:	3301      	adds	r3, #1
 80224b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80224ba:	b914      	cbnz	r4, 80224c2 <__match+0x12>
 80224bc:	6003      	str	r3, [r0, #0]
 80224be:	2001      	movs	r0, #1
 80224c0:	bd30      	pop	{r4, r5, pc}
 80224c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80224c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80224ca:	2d19      	cmp	r5, #25
 80224cc:	bf98      	it	ls
 80224ce:	3220      	addls	r2, #32
 80224d0:	42a2      	cmp	r2, r4
 80224d2:	d0f0      	beq.n	80224b6 <__match+0x6>
 80224d4:	2000      	movs	r0, #0
 80224d6:	e7f3      	b.n	80224c0 <__match+0x10>

080224d8 <__hexnan>:
 80224d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224dc:	680b      	ldr	r3, [r1, #0]
 80224de:	6801      	ldr	r1, [r0, #0]
 80224e0:	115e      	asrs	r6, r3, #5
 80224e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80224e6:	f013 031f 	ands.w	r3, r3, #31
 80224ea:	b087      	sub	sp, #28
 80224ec:	bf18      	it	ne
 80224ee:	3604      	addne	r6, #4
 80224f0:	2500      	movs	r5, #0
 80224f2:	1f37      	subs	r7, r6, #4
 80224f4:	4682      	mov	sl, r0
 80224f6:	4690      	mov	r8, r2
 80224f8:	9301      	str	r3, [sp, #4]
 80224fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80224fe:	46b9      	mov	r9, r7
 8022500:	463c      	mov	r4, r7
 8022502:	9502      	str	r5, [sp, #8]
 8022504:	46ab      	mov	fp, r5
 8022506:	784a      	ldrb	r2, [r1, #1]
 8022508:	1c4b      	adds	r3, r1, #1
 802250a:	9303      	str	r3, [sp, #12]
 802250c:	b342      	cbz	r2, 8022560 <__hexnan+0x88>
 802250e:	4610      	mov	r0, r2
 8022510:	9105      	str	r1, [sp, #20]
 8022512:	9204      	str	r2, [sp, #16]
 8022514:	f7ff fd5e 	bl	8021fd4 <__hexdig_fun>
 8022518:	2800      	cmp	r0, #0
 802251a:	d14f      	bne.n	80225bc <__hexnan+0xe4>
 802251c:	9a04      	ldr	r2, [sp, #16]
 802251e:	9905      	ldr	r1, [sp, #20]
 8022520:	2a20      	cmp	r2, #32
 8022522:	d818      	bhi.n	8022556 <__hexnan+0x7e>
 8022524:	9b02      	ldr	r3, [sp, #8]
 8022526:	459b      	cmp	fp, r3
 8022528:	dd13      	ble.n	8022552 <__hexnan+0x7a>
 802252a:	454c      	cmp	r4, r9
 802252c:	d206      	bcs.n	802253c <__hexnan+0x64>
 802252e:	2d07      	cmp	r5, #7
 8022530:	dc04      	bgt.n	802253c <__hexnan+0x64>
 8022532:	462a      	mov	r2, r5
 8022534:	4649      	mov	r1, r9
 8022536:	4620      	mov	r0, r4
 8022538:	f7ff ffa8 	bl	802248c <L_shift>
 802253c:	4544      	cmp	r4, r8
 802253e:	d950      	bls.n	80225e2 <__hexnan+0x10a>
 8022540:	2300      	movs	r3, #0
 8022542:	f1a4 0904 	sub.w	r9, r4, #4
 8022546:	f844 3c04 	str.w	r3, [r4, #-4]
 802254a:	f8cd b008 	str.w	fp, [sp, #8]
 802254e:	464c      	mov	r4, r9
 8022550:	461d      	mov	r5, r3
 8022552:	9903      	ldr	r1, [sp, #12]
 8022554:	e7d7      	b.n	8022506 <__hexnan+0x2e>
 8022556:	2a29      	cmp	r2, #41	; 0x29
 8022558:	d156      	bne.n	8022608 <__hexnan+0x130>
 802255a:	3102      	adds	r1, #2
 802255c:	f8ca 1000 	str.w	r1, [sl]
 8022560:	f1bb 0f00 	cmp.w	fp, #0
 8022564:	d050      	beq.n	8022608 <__hexnan+0x130>
 8022566:	454c      	cmp	r4, r9
 8022568:	d206      	bcs.n	8022578 <__hexnan+0xa0>
 802256a:	2d07      	cmp	r5, #7
 802256c:	dc04      	bgt.n	8022578 <__hexnan+0xa0>
 802256e:	462a      	mov	r2, r5
 8022570:	4649      	mov	r1, r9
 8022572:	4620      	mov	r0, r4
 8022574:	f7ff ff8a 	bl	802248c <L_shift>
 8022578:	4544      	cmp	r4, r8
 802257a:	d934      	bls.n	80225e6 <__hexnan+0x10e>
 802257c:	f1a8 0204 	sub.w	r2, r8, #4
 8022580:	4623      	mov	r3, r4
 8022582:	f853 1b04 	ldr.w	r1, [r3], #4
 8022586:	f842 1f04 	str.w	r1, [r2, #4]!
 802258a:	429f      	cmp	r7, r3
 802258c:	d2f9      	bcs.n	8022582 <__hexnan+0xaa>
 802258e:	1b3b      	subs	r3, r7, r4
 8022590:	f023 0303 	bic.w	r3, r3, #3
 8022594:	3304      	adds	r3, #4
 8022596:	3401      	adds	r4, #1
 8022598:	3e03      	subs	r6, #3
 802259a:	42b4      	cmp	r4, r6
 802259c:	bf88      	it	hi
 802259e:	2304      	movhi	r3, #4
 80225a0:	4443      	add	r3, r8
 80225a2:	2200      	movs	r2, #0
 80225a4:	f843 2b04 	str.w	r2, [r3], #4
 80225a8:	429f      	cmp	r7, r3
 80225aa:	d2fb      	bcs.n	80225a4 <__hexnan+0xcc>
 80225ac:	683b      	ldr	r3, [r7, #0]
 80225ae:	b91b      	cbnz	r3, 80225b8 <__hexnan+0xe0>
 80225b0:	4547      	cmp	r7, r8
 80225b2:	d127      	bne.n	8022604 <__hexnan+0x12c>
 80225b4:	2301      	movs	r3, #1
 80225b6:	603b      	str	r3, [r7, #0]
 80225b8:	2005      	movs	r0, #5
 80225ba:	e026      	b.n	802260a <__hexnan+0x132>
 80225bc:	3501      	adds	r5, #1
 80225be:	2d08      	cmp	r5, #8
 80225c0:	f10b 0b01 	add.w	fp, fp, #1
 80225c4:	dd06      	ble.n	80225d4 <__hexnan+0xfc>
 80225c6:	4544      	cmp	r4, r8
 80225c8:	d9c3      	bls.n	8022552 <__hexnan+0x7a>
 80225ca:	2300      	movs	r3, #0
 80225cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80225d0:	2501      	movs	r5, #1
 80225d2:	3c04      	subs	r4, #4
 80225d4:	6822      	ldr	r2, [r4, #0]
 80225d6:	f000 000f 	and.w	r0, r0, #15
 80225da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80225de:	6022      	str	r2, [r4, #0]
 80225e0:	e7b7      	b.n	8022552 <__hexnan+0x7a>
 80225e2:	2508      	movs	r5, #8
 80225e4:	e7b5      	b.n	8022552 <__hexnan+0x7a>
 80225e6:	9b01      	ldr	r3, [sp, #4]
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	d0df      	beq.n	80225ac <__hexnan+0xd4>
 80225ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80225f0:	f1c3 0320 	rsb	r3, r3, #32
 80225f4:	fa22 f303 	lsr.w	r3, r2, r3
 80225f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80225fc:	401a      	ands	r2, r3
 80225fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8022602:	e7d3      	b.n	80225ac <__hexnan+0xd4>
 8022604:	3f04      	subs	r7, #4
 8022606:	e7d1      	b.n	80225ac <__hexnan+0xd4>
 8022608:	2004      	movs	r0, #4
 802260a:	b007      	add	sp, #28
 802260c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022610 <_localeconv_r>:
 8022610:	4800      	ldr	r0, [pc, #0]	; (8022614 <_localeconv_r+0x4>)
 8022612:	4770      	bx	lr
 8022614:	2000021c 	.word	0x2000021c

08022618 <_lseek_r>:
 8022618:	b538      	push	{r3, r4, r5, lr}
 802261a:	4d07      	ldr	r5, [pc, #28]	; (8022638 <_lseek_r+0x20>)
 802261c:	4604      	mov	r4, r0
 802261e:	4608      	mov	r0, r1
 8022620:	4611      	mov	r1, r2
 8022622:	2200      	movs	r2, #0
 8022624:	602a      	str	r2, [r5, #0]
 8022626:	461a      	mov	r2, r3
 8022628:	f7ec fc3c 	bl	800eea4 <_lseek>
 802262c:	1c43      	adds	r3, r0, #1
 802262e:	d102      	bne.n	8022636 <_lseek_r+0x1e>
 8022630:	682b      	ldr	r3, [r5, #0]
 8022632:	b103      	cbz	r3, 8022636 <_lseek_r+0x1e>
 8022634:	6023      	str	r3, [r4, #0]
 8022636:	bd38      	pop	{r3, r4, r5, pc}
 8022638:	2000a94c 	.word	0x2000a94c

0802263c <__ascii_mbtowc>:
 802263c:	b082      	sub	sp, #8
 802263e:	b901      	cbnz	r1, 8022642 <__ascii_mbtowc+0x6>
 8022640:	a901      	add	r1, sp, #4
 8022642:	b142      	cbz	r2, 8022656 <__ascii_mbtowc+0x1a>
 8022644:	b14b      	cbz	r3, 802265a <__ascii_mbtowc+0x1e>
 8022646:	7813      	ldrb	r3, [r2, #0]
 8022648:	600b      	str	r3, [r1, #0]
 802264a:	7812      	ldrb	r2, [r2, #0]
 802264c:	1e10      	subs	r0, r2, #0
 802264e:	bf18      	it	ne
 8022650:	2001      	movne	r0, #1
 8022652:	b002      	add	sp, #8
 8022654:	4770      	bx	lr
 8022656:	4610      	mov	r0, r2
 8022658:	e7fb      	b.n	8022652 <__ascii_mbtowc+0x16>
 802265a:	f06f 0001 	mvn.w	r0, #1
 802265e:	e7f8      	b.n	8022652 <__ascii_mbtowc+0x16>

08022660 <__malloc_lock>:
 8022660:	4801      	ldr	r0, [pc, #4]	; (8022668 <__malloc_lock+0x8>)
 8022662:	f001 b885 	b.w	8023770 <__retarget_lock_acquire_recursive>
 8022666:	bf00      	nop
 8022668:	2000a954 	.word	0x2000a954

0802266c <__malloc_unlock>:
 802266c:	4801      	ldr	r0, [pc, #4]	; (8022674 <__malloc_unlock+0x8>)
 802266e:	f001 b880 	b.w	8023772 <__retarget_lock_release_recursive>
 8022672:	bf00      	nop
 8022674:	2000a954 	.word	0x2000a954

08022678 <_Balloc>:
 8022678:	b570      	push	{r4, r5, r6, lr}
 802267a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802267c:	4604      	mov	r4, r0
 802267e:	460d      	mov	r5, r1
 8022680:	b976      	cbnz	r6, 80226a0 <_Balloc+0x28>
 8022682:	2010      	movs	r0, #16
 8022684:	f7fc fec4 	bl	801f410 <malloc>
 8022688:	4602      	mov	r2, r0
 802268a:	6260      	str	r0, [r4, #36]	; 0x24
 802268c:	b920      	cbnz	r0, 8022698 <_Balloc+0x20>
 802268e:	4b18      	ldr	r3, [pc, #96]	; (80226f0 <_Balloc+0x78>)
 8022690:	4818      	ldr	r0, [pc, #96]	; (80226f4 <_Balloc+0x7c>)
 8022692:	2166      	movs	r1, #102	; 0x66
 8022694:	f000 fe84 	bl	80233a0 <__assert_func>
 8022698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802269c:	6006      	str	r6, [r0, #0]
 802269e:	60c6      	str	r6, [r0, #12]
 80226a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80226a2:	68f3      	ldr	r3, [r6, #12]
 80226a4:	b183      	cbz	r3, 80226c8 <_Balloc+0x50>
 80226a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80226a8:	68db      	ldr	r3, [r3, #12]
 80226aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80226ae:	b9b8      	cbnz	r0, 80226e0 <_Balloc+0x68>
 80226b0:	2101      	movs	r1, #1
 80226b2:	fa01 f605 	lsl.w	r6, r1, r5
 80226b6:	1d72      	adds	r2, r6, #5
 80226b8:	0092      	lsls	r2, r2, #2
 80226ba:	4620      	mov	r0, r4
 80226bc:	f000 fc97 	bl	8022fee <_calloc_r>
 80226c0:	b160      	cbz	r0, 80226dc <_Balloc+0x64>
 80226c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80226c6:	e00e      	b.n	80226e6 <_Balloc+0x6e>
 80226c8:	2221      	movs	r2, #33	; 0x21
 80226ca:	2104      	movs	r1, #4
 80226cc:	4620      	mov	r0, r4
 80226ce:	f000 fc8e 	bl	8022fee <_calloc_r>
 80226d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80226d4:	60f0      	str	r0, [r6, #12]
 80226d6:	68db      	ldr	r3, [r3, #12]
 80226d8:	2b00      	cmp	r3, #0
 80226da:	d1e4      	bne.n	80226a6 <_Balloc+0x2e>
 80226dc:	2000      	movs	r0, #0
 80226de:	bd70      	pop	{r4, r5, r6, pc}
 80226e0:	6802      	ldr	r2, [r0, #0]
 80226e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80226e6:	2300      	movs	r3, #0
 80226e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80226ec:	e7f7      	b.n	80226de <_Balloc+0x66>
 80226ee:	bf00      	nop
 80226f0:	08025ee6 	.word	0x08025ee6
 80226f4:	08025fec 	.word	0x08025fec

080226f8 <_Bfree>:
 80226f8:	b570      	push	{r4, r5, r6, lr}
 80226fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80226fc:	4605      	mov	r5, r0
 80226fe:	460c      	mov	r4, r1
 8022700:	b976      	cbnz	r6, 8022720 <_Bfree+0x28>
 8022702:	2010      	movs	r0, #16
 8022704:	f7fc fe84 	bl	801f410 <malloc>
 8022708:	4602      	mov	r2, r0
 802270a:	6268      	str	r0, [r5, #36]	; 0x24
 802270c:	b920      	cbnz	r0, 8022718 <_Bfree+0x20>
 802270e:	4b09      	ldr	r3, [pc, #36]	; (8022734 <_Bfree+0x3c>)
 8022710:	4809      	ldr	r0, [pc, #36]	; (8022738 <_Bfree+0x40>)
 8022712:	218a      	movs	r1, #138	; 0x8a
 8022714:	f000 fe44 	bl	80233a0 <__assert_func>
 8022718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802271c:	6006      	str	r6, [r0, #0]
 802271e:	60c6      	str	r6, [r0, #12]
 8022720:	b13c      	cbz	r4, 8022732 <_Bfree+0x3a>
 8022722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022724:	6862      	ldr	r2, [r4, #4]
 8022726:	68db      	ldr	r3, [r3, #12]
 8022728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802272c:	6021      	str	r1, [r4, #0]
 802272e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022732:	bd70      	pop	{r4, r5, r6, pc}
 8022734:	08025ee6 	.word	0x08025ee6
 8022738:	08025fec 	.word	0x08025fec

0802273c <__multadd>:
 802273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022740:	690e      	ldr	r6, [r1, #16]
 8022742:	4607      	mov	r7, r0
 8022744:	4698      	mov	r8, r3
 8022746:	460c      	mov	r4, r1
 8022748:	f101 0014 	add.w	r0, r1, #20
 802274c:	2300      	movs	r3, #0
 802274e:	6805      	ldr	r5, [r0, #0]
 8022750:	b2a9      	uxth	r1, r5
 8022752:	fb02 8101 	mla	r1, r2, r1, r8
 8022756:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802275a:	0c2d      	lsrs	r5, r5, #16
 802275c:	fb02 c505 	mla	r5, r2, r5, ip
 8022760:	b289      	uxth	r1, r1
 8022762:	3301      	adds	r3, #1
 8022764:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022768:	429e      	cmp	r6, r3
 802276a:	f840 1b04 	str.w	r1, [r0], #4
 802276e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8022772:	dcec      	bgt.n	802274e <__multadd+0x12>
 8022774:	f1b8 0f00 	cmp.w	r8, #0
 8022778:	d022      	beq.n	80227c0 <__multadd+0x84>
 802277a:	68a3      	ldr	r3, [r4, #8]
 802277c:	42b3      	cmp	r3, r6
 802277e:	dc19      	bgt.n	80227b4 <__multadd+0x78>
 8022780:	6861      	ldr	r1, [r4, #4]
 8022782:	4638      	mov	r0, r7
 8022784:	3101      	adds	r1, #1
 8022786:	f7ff ff77 	bl	8022678 <_Balloc>
 802278a:	4605      	mov	r5, r0
 802278c:	b928      	cbnz	r0, 802279a <__multadd+0x5e>
 802278e:	4602      	mov	r2, r0
 8022790:	4b0d      	ldr	r3, [pc, #52]	; (80227c8 <__multadd+0x8c>)
 8022792:	480e      	ldr	r0, [pc, #56]	; (80227cc <__multadd+0x90>)
 8022794:	21b5      	movs	r1, #181	; 0xb5
 8022796:	f000 fe03 	bl	80233a0 <__assert_func>
 802279a:	6922      	ldr	r2, [r4, #16]
 802279c:	3202      	adds	r2, #2
 802279e:	f104 010c 	add.w	r1, r4, #12
 80227a2:	0092      	lsls	r2, r2, #2
 80227a4:	300c      	adds	r0, #12
 80227a6:	f7fc fe3b 	bl	801f420 <memcpy>
 80227aa:	4621      	mov	r1, r4
 80227ac:	4638      	mov	r0, r7
 80227ae:	f7ff ffa3 	bl	80226f8 <_Bfree>
 80227b2:	462c      	mov	r4, r5
 80227b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80227b8:	3601      	adds	r6, #1
 80227ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80227be:	6126      	str	r6, [r4, #16]
 80227c0:	4620      	mov	r0, r4
 80227c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227c6:	bf00      	nop
 80227c8:	08025f5c 	.word	0x08025f5c
 80227cc:	08025fec 	.word	0x08025fec

080227d0 <__s2b>:
 80227d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80227d4:	460c      	mov	r4, r1
 80227d6:	4615      	mov	r5, r2
 80227d8:	461f      	mov	r7, r3
 80227da:	2209      	movs	r2, #9
 80227dc:	3308      	adds	r3, #8
 80227de:	4606      	mov	r6, r0
 80227e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80227e4:	2100      	movs	r1, #0
 80227e6:	2201      	movs	r2, #1
 80227e8:	429a      	cmp	r2, r3
 80227ea:	db09      	blt.n	8022800 <__s2b+0x30>
 80227ec:	4630      	mov	r0, r6
 80227ee:	f7ff ff43 	bl	8022678 <_Balloc>
 80227f2:	b940      	cbnz	r0, 8022806 <__s2b+0x36>
 80227f4:	4602      	mov	r2, r0
 80227f6:	4b19      	ldr	r3, [pc, #100]	; (802285c <__s2b+0x8c>)
 80227f8:	4819      	ldr	r0, [pc, #100]	; (8022860 <__s2b+0x90>)
 80227fa:	21ce      	movs	r1, #206	; 0xce
 80227fc:	f000 fdd0 	bl	80233a0 <__assert_func>
 8022800:	0052      	lsls	r2, r2, #1
 8022802:	3101      	adds	r1, #1
 8022804:	e7f0      	b.n	80227e8 <__s2b+0x18>
 8022806:	9b08      	ldr	r3, [sp, #32]
 8022808:	6143      	str	r3, [r0, #20]
 802280a:	2d09      	cmp	r5, #9
 802280c:	f04f 0301 	mov.w	r3, #1
 8022810:	6103      	str	r3, [r0, #16]
 8022812:	dd16      	ble.n	8022842 <__s2b+0x72>
 8022814:	f104 0909 	add.w	r9, r4, #9
 8022818:	46c8      	mov	r8, r9
 802281a:	442c      	add	r4, r5
 802281c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022820:	4601      	mov	r1, r0
 8022822:	3b30      	subs	r3, #48	; 0x30
 8022824:	220a      	movs	r2, #10
 8022826:	4630      	mov	r0, r6
 8022828:	f7ff ff88 	bl	802273c <__multadd>
 802282c:	45a0      	cmp	r8, r4
 802282e:	d1f5      	bne.n	802281c <__s2b+0x4c>
 8022830:	f1a5 0408 	sub.w	r4, r5, #8
 8022834:	444c      	add	r4, r9
 8022836:	1b2d      	subs	r5, r5, r4
 8022838:	1963      	adds	r3, r4, r5
 802283a:	42bb      	cmp	r3, r7
 802283c:	db04      	blt.n	8022848 <__s2b+0x78>
 802283e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022842:	340a      	adds	r4, #10
 8022844:	2509      	movs	r5, #9
 8022846:	e7f6      	b.n	8022836 <__s2b+0x66>
 8022848:	f814 3b01 	ldrb.w	r3, [r4], #1
 802284c:	4601      	mov	r1, r0
 802284e:	3b30      	subs	r3, #48	; 0x30
 8022850:	220a      	movs	r2, #10
 8022852:	4630      	mov	r0, r6
 8022854:	f7ff ff72 	bl	802273c <__multadd>
 8022858:	e7ee      	b.n	8022838 <__s2b+0x68>
 802285a:	bf00      	nop
 802285c:	08025f5c 	.word	0x08025f5c
 8022860:	08025fec 	.word	0x08025fec

08022864 <__hi0bits>:
 8022864:	0c03      	lsrs	r3, r0, #16
 8022866:	041b      	lsls	r3, r3, #16
 8022868:	b9d3      	cbnz	r3, 80228a0 <__hi0bits+0x3c>
 802286a:	0400      	lsls	r0, r0, #16
 802286c:	2310      	movs	r3, #16
 802286e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022872:	bf04      	itt	eq
 8022874:	0200      	lsleq	r0, r0, #8
 8022876:	3308      	addeq	r3, #8
 8022878:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802287c:	bf04      	itt	eq
 802287e:	0100      	lsleq	r0, r0, #4
 8022880:	3304      	addeq	r3, #4
 8022882:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022886:	bf04      	itt	eq
 8022888:	0080      	lsleq	r0, r0, #2
 802288a:	3302      	addeq	r3, #2
 802288c:	2800      	cmp	r0, #0
 802288e:	db05      	blt.n	802289c <__hi0bits+0x38>
 8022890:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022894:	f103 0301 	add.w	r3, r3, #1
 8022898:	bf08      	it	eq
 802289a:	2320      	moveq	r3, #32
 802289c:	4618      	mov	r0, r3
 802289e:	4770      	bx	lr
 80228a0:	2300      	movs	r3, #0
 80228a2:	e7e4      	b.n	802286e <__hi0bits+0xa>

080228a4 <__lo0bits>:
 80228a4:	6803      	ldr	r3, [r0, #0]
 80228a6:	f013 0207 	ands.w	r2, r3, #7
 80228aa:	4601      	mov	r1, r0
 80228ac:	d00b      	beq.n	80228c6 <__lo0bits+0x22>
 80228ae:	07da      	lsls	r2, r3, #31
 80228b0:	d424      	bmi.n	80228fc <__lo0bits+0x58>
 80228b2:	0798      	lsls	r0, r3, #30
 80228b4:	bf49      	itett	mi
 80228b6:	085b      	lsrmi	r3, r3, #1
 80228b8:	089b      	lsrpl	r3, r3, #2
 80228ba:	2001      	movmi	r0, #1
 80228bc:	600b      	strmi	r3, [r1, #0]
 80228be:	bf5c      	itt	pl
 80228c0:	600b      	strpl	r3, [r1, #0]
 80228c2:	2002      	movpl	r0, #2
 80228c4:	4770      	bx	lr
 80228c6:	b298      	uxth	r0, r3
 80228c8:	b9b0      	cbnz	r0, 80228f8 <__lo0bits+0x54>
 80228ca:	0c1b      	lsrs	r3, r3, #16
 80228cc:	2010      	movs	r0, #16
 80228ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80228d2:	bf04      	itt	eq
 80228d4:	0a1b      	lsreq	r3, r3, #8
 80228d6:	3008      	addeq	r0, #8
 80228d8:	071a      	lsls	r2, r3, #28
 80228da:	bf04      	itt	eq
 80228dc:	091b      	lsreq	r3, r3, #4
 80228de:	3004      	addeq	r0, #4
 80228e0:	079a      	lsls	r2, r3, #30
 80228e2:	bf04      	itt	eq
 80228e4:	089b      	lsreq	r3, r3, #2
 80228e6:	3002      	addeq	r0, #2
 80228e8:	07da      	lsls	r2, r3, #31
 80228ea:	d403      	bmi.n	80228f4 <__lo0bits+0x50>
 80228ec:	085b      	lsrs	r3, r3, #1
 80228ee:	f100 0001 	add.w	r0, r0, #1
 80228f2:	d005      	beq.n	8022900 <__lo0bits+0x5c>
 80228f4:	600b      	str	r3, [r1, #0]
 80228f6:	4770      	bx	lr
 80228f8:	4610      	mov	r0, r2
 80228fa:	e7e8      	b.n	80228ce <__lo0bits+0x2a>
 80228fc:	2000      	movs	r0, #0
 80228fe:	4770      	bx	lr
 8022900:	2020      	movs	r0, #32
 8022902:	4770      	bx	lr

08022904 <__i2b>:
 8022904:	b510      	push	{r4, lr}
 8022906:	460c      	mov	r4, r1
 8022908:	2101      	movs	r1, #1
 802290a:	f7ff feb5 	bl	8022678 <_Balloc>
 802290e:	4602      	mov	r2, r0
 8022910:	b928      	cbnz	r0, 802291e <__i2b+0x1a>
 8022912:	4b05      	ldr	r3, [pc, #20]	; (8022928 <__i2b+0x24>)
 8022914:	4805      	ldr	r0, [pc, #20]	; (802292c <__i2b+0x28>)
 8022916:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802291a:	f000 fd41 	bl	80233a0 <__assert_func>
 802291e:	2301      	movs	r3, #1
 8022920:	6144      	str	r4, [r0, #20]
 8022922:	6103      	str	r3, [r0, #16]
 8022924:	bd10      	pop	{r4, pc}
 8022926:	bf00      	nop
 8022928:	08025f5c 	.word	0x08025f5c
 802292c:	08025fec 	.word	0x08025fec

08022930 <__multiply>:
 8022930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022934:	4614      	mov	r4, r2
 8022936:	690a      	ldr	r2, [r1, #16]
 8022938:	6923      	ldr	r3, [r4, #16]
 802293a:	429a      	cmp	r2, r3
 802293c:	bfb8      	it	lt
 802293e:	460b      	movlt	r3, r1
 8022940:	460d      	mov	r5, r1
 8022942:	bfbc      	itt	lt
 8022944:	4625      	movlt	r5, r4
 8022946:	461c      	movlt	r4, r3
 8022948:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802294c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022950:	68ab      	ldr	r3, [r5, #8]
 8022952:	6869      	ldr	r1, [r5, #4]
 8022954:	eb0a 0709 	add.w	r7, sl, r9
 8022958:	42bb      	cmp	r3, r7
 802295a:	b085      	sub	sp, #20
 802295c:	bfb8      	it	lt
 802295e:	3101      	addlt	r1, #1
 8022960:	f7ff fe8a 	bl	8022678 <_Balloc>
 8022964:	b930      	cbnz	r0, 8022974 <__multiply+0x44>
 8022966:	4602      	mov	r2, r0
 8022968:	4b42      	ldr	r3, [pc, #264]	; (8022a74 <__multiply+0x144>)
 802296a:	4843      	ldr	r0, [pc, #268]	; (8022a78 <__multiply+0x148>)
 802296c:	f240 115d 	movw	r1, #349	; 0x15d
 8022970:	f000 fd16 	bl	80233a0 <__assert_func>
 8022974:	f100 0614 	add.w	r6, r0, #20
 8022978:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802297c:	4633      	mov	r3, r6
 802297e:	2200      	movs	r2, #0
 8022980:	4543      	cmp	r3, r8
 8022982:	d31e      	bcc.n	80229c2 <__multiply+0x92>
 8022984:	f105 0c14 	add.w	ip, r5, #20
 8022988:	f104 0314 	add.w	r3, r4, #20
 802298c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8022990:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8022994:	9202      	str	r2, [sp, #8]
 8022996:	ebac 0205 	sub.w	r2, ip, r5
 802299a:	3a15      	subs	r2, #21
 802299c:	f022 0203 	bic.w	r2, r2, #3
 80229a0:	3204      	adds	r2, #4
 80229a2:	f105 0115 	add.w	r1, r5, #21
 80229a6:	458c      	cmp	ip, r1
 80229a8:	bf38      	it	cc
 80229aa:	2204      	movcc	r2, #4
 80229ac:	9201      	str	r2, [sp, #4]
 80229ae:	9a02      	ldr	r2, [sp, #8]
 80229b0:	9303      	str	r3, [sp, #12]
 80229b2:	429a      	cmp	r2, r3
 80229b4:	d808      	bhi.n	80229c8 <__multiply+0x98>
 80229b6:	2f00      	cmp	r7, #0
 80229b8:	dc55      	bgt.n	8022a66 <__multiply+0x136>
 80229ba:	6107      	str	r7, [r0, #16]
 80229bc:	b005      	add	sp, #20
 80229be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229c2:	f843 2b04 	str.w	r2, [r3], #4
 80229c6:	e7db      	b.n	8022980 <__multiply+0x50>
 80229c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80229cc:	f1ba 0f00 	cmp.w	sl, #0
 80229d0:	d020      	beq.n	8022a14 <__multiply+0xe4>
 80229d2:	f105 0e14 	add.w	lr, r5, #20
 80229d6:	46b1      	mov	r9, r6
 80229d8:	2200      	movs	r2, #0
 80229da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80229de:	f8d9 b000 	ldr.w	fp, [r9]
 80229e2:	b2a1      	uxth	r1, r4
 80229e4:	fa1f fb8b 	uxth.w	fp, fp
 80229e8:	fb0a b101 	mla	r1, sl, r1, fp
 80229ec:	4411      	add	r1, r2
 80229ee:	f8d9 2000 	ldr.w	r2, [r9]
 80229f2:	0c24      	lsrs	r4, r4, #16
 80229f4:	0c12      	lsrs	r2, r2, #16
 80229f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80229fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80229fe:	b289      	uxth	r1, r1
 8022a00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022a04:	45f4      	cmp	ip, lr
 8022a06:	f849 1b04 	str.w	r1, [r9], #4
 8022a0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8022a0e:	d8e4      	bhi.n	80229da <__multiply+0xaa>
 8022a10:	9901      	ldr	r1, [sp, #4]
 8022a12:	5072      	str	r2, [r6, r1]
 8022a14:	9a03      	ldr	r2, [sp, #12]
 8022a16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022a1a:	3304      	adds	r3, #4
 8022a1c:	f1b9 0f00 	cmp.w	r9, #0
 8022a20:	d01f      	beq.n	8022a62 <__multiply+0x132>
 8022a22:	6834      	ldr	r4, [r6, #0]
 8022a24:	f105 0114 	add.w	r1, r5, #20
 8022a28:	46b6      	mov	lr, r6
 8022a2a:	f04f 0a00 	mov.w	sl, #0
 8022a2e:	880a      	ldrh	r2, [r1, #0]
 8022a30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022a34:	fb09 b202 	mla	r2, r9, r2, fp
 8022a38:	4492      	add	sl, r2
 8022a3a:	b2a4      	uxth	r4, r4
 8022a3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022a40:	f84e 4b04 	str.w	r4, [lr], #4
 8022a44:	f851 4b04 	ldr.w	r4, [r1], #4
 8022a48:	f8be 2000 	ldrh.w	r2, [lr]
 8022a4c:	0c24      	lsrs	r4, r4, #16
 8022a4e:	fb09 2404 	mla	r4, r9, r4, r2
 8022a52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022a56:	458c      	cmp	ip, r1
 8022a58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8022a5c:	d8e7      	bhi.n	8022a2e <__multiply+0xfe>
 8022a5e:	9a01      	ldr	r2, [sp, #4]
 8022a60:	50b4      	str	r4, [r6, r2]
 8022a62:	3604      	adds	r6, #4
 8022a64:	e7a3      	b.n	80229ae <__multiply+0x7e>
 8022a66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	d1a5      	bne.n	80229ba <__multiply+0x8a>
 8022a6e:	3f01      	subs	r7, #1
 8022a70:	e7a1      	b.n	80229b6 <__multiply+0x86>
 8022a72:	bf00      	nop
 8022a74:	08025f5c 	.word	0x08025f5c
 8022a78:	08025fec 	.word	0x08025fec

08022a7c <__pow5mult>:
 8022a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a80:	4615      	mov	r5, r2
 8022a82:	f012 0203 	ands.w	r2, r2, #3
 8022a86:	4606      	mov	r6, r0
 8022a88:	460f      	mov	r7, r1
 8022a8a:	d007      	beq.n	8022a9c <__pow5mult+0x20>
 8022a8c:	4c25      	ldr	r4, [pc, #148]	; (8022b24 <__pow5mult+0xa8>)
 8022a8e:	3a01      	subs	r2, #1
 8022a90:	2300      	movs	r3, #0
 8022a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022a96:	f7ff fe51 	bl	802273c <__multadd>
 8022a9a:	4607      	mov	r7, r0
 8022a9c:	10ad      	asrs	r5, r5, #2
 8022a9e:	d03d      	beq.n	8022b1c <__pow5mult+0xa0>
 8022aa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022aa2:	b97c      	cbnz	r4, 8022ac4 <__pow5mult+0x48>
 8022aa4:	2010      	movs	r0, #16
 8022aa6:	f7fc fcb3 	bl	801f410 <malloc>
 8022aaa:	4602      	mov	r2, r0
 8022aac:	6270      	str	r0, [r6, #36]	; 0x24
 8022aae:	b928      	cbnz	r0, 8022abc <__pow5mult+0x40>
 8022ab0:	4b1d      	ldr	r3, [pc, #116]	; (8022b28 <__pow5mult+0xac>)
 8022ab2:	481e      	ldr	r0, [pc, #120]	; (8022b2c <__pow5mult+0xb0>)
 8022ab4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022ab8:	f000 fc72 	bl	80233a0 <__assert_func>
 8022abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022ac0:	6004      	str	r4, [r0, #0]
 8022ac2:	60c4      	str	r4, [r0, #12]
 8022ac4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022acc:	b94c      	cbnz	r4, 8022ae2 <__pow5mult+0x66>
 8022ace:	f240 2171 	movw	r1, #625	; 0x271
 8022ad2:	4630      	mov	r0, r6
 8022ad4:	f7ff ff16 	bl	8022904 <__i2b>
 8022ad8:	2300      	movs	r3, #0
 8022ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8022ade:	4604      	mov	r4, r0
 8022ae0:	6003      	str	r3, [r0, #0]
 8022ae2:	f04f 0900 	mov.w	r9, #0
 8022ae6:	07eb      	lsls	r3, r5, #31
 8022ae8:	d50a      	bpl.n	8022b00 <__pow5mult+0x84>
 8022aea:	4639      	mov	r1, r7
 8022aec:	4622      	mov	r2, r4
 8022aee:	4630      	mov	r0, r6
 8022af0:	f7ff ff1e 	bl	8022930 <__multiply>
 8022af4:	4639      	mov	r1, r7
 8022af6:	4680      	mov	r8, r0
 8022af8:	4630      	mov	r0, r6
 8022afa:	f7ff fdfd 	bl	80226f8 <_Bfree>
 8022afe:	4647      	mov	r7, r8
 8022b00:	106d      	asrs	r5, r5, #1
 8022b02:	d00b      	beq.n	8022b1c <__pow5mult+0xa0>
 8022b04:	6820      	ldr	r0, [r4, #0]
 8022b06:	b938      	cbnz	r0, 8022b18 <__pow5mult+0x9c>
 8022b08:	4622      	mov	r2, r4
 8022b0a:	4621      	mov	r1, r4
 8022b0c:	4630      	mov	r0, r6
 8022b0e:	f7ff ff0f 	bl	8022930 <__multiply>
 8022b12:	6020      	str	r0, [r4, #0]
 8022b14:	f8c0 9000 	str.w	r9, [r0]
 8022b18:	4604      	mov	r4, r0
 8022b1a:	e7e4      	b.n	8022ae6 <__pow5mult+0x6a>
 8022b1c:	4638      	mov	r0, r7
 8022b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b22:	bf00      	nop
 8022b24:	08026140 	.word	0x08026140
 8022b28:	08025ee6 	.word	0x08025ee6
 8022b2c:	08025fec 	.word	0x08025fec

08022b30 <__lshift>:
 8022b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b34:	460c      	mov	r4, r1
 8022b36:	6849      	ldr	r1, [r1, #4]
 8022b38:	6923      	ldr	r3, [r4, #16]
 8022b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022b3e:	68a3      	ldr	r3, [r4, #8]
 8022b40:	4607      	mov	r7, r0
 8022b42:	4691      	mov	r9, r2
 8022b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022b48:	f108 0601 	add.w	r6, r8, #1
 8022b4c:	42b3      	cmp	r3, r6
 8022b4e:	db0b      	blt.n	8022b68 <__lshift+0x38>
 8022b50:	4638      	mov	r0, r7
 8022b52:	f7ff fd91 	bl	8022678 <_Balloc>
 8022b56:	4605      	mov	r5, r0
 8022b58:	b948      	cbnz	r0, 8022b6e <__lshift+0x3e>
 8022b5a:	4602      	mov	r2, r0
 8022b5c:	4b28      	ldr	r3, [pc, #160]	; (8022c00 <__lshift+0xd0>)
 8022b5e:	4829      	ldr	r0, [pc, #164]	; (8022c04 <__lshift+0xd4>)
 8022b60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022b64:	f000 fc1c 	bl	80233a0 <__assert_func>
 8022b68:	3101      	adds	r1, #1
 8022b6a:	005b      	lsls	r3, r3, #1
 8022b6c:	e7ee      	b.n	8022b4c <__lshift+0x1c>
 8022b6e:	2300      	movs	r3, #0
 8022b70:	f100 0114 	add.w	r1, r0, #20
 8022b74:	f100 0210 	add.w	r2, r0, #16
 8022b78:	4618      	mov	r0, r3
 8022b7a:	4553      	cmp	r3, sl
 8022b7c:	db33      	blt.n	8022be6 <__lshift+0xb6>
 8022b7e:	6920      	ldr	r0, [r4, #16]
 8022b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022b84:	f104 0314 	add.w	r3, r4, #20
 8022b88:	f019 091f 	ands.w	r9, r9, #31
 8022b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022b90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8022b94:	d02b      	beq.n	8022bee <__lshift+0xbe>
 8022b96:	f1c9 0e20 	rsb	lr, r9, #32
 8022b9a:	468a      	mov	sl, r1
 8022b9c:	2200      	movs	r2, #0
 8022b9e:	6818      	ldr	r0, [r3, #0]
 8022ba0:	fa00 f009 	lsl.w	r0, r0, r9
 8022ba4:	4302      	orrs	r2, r0
 8022ba6:	f84a 2b04 	str.w	r2, [sl], #4
 8022baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8022bae:	459c      	cmp	ip, r3
 8022bb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8022bb4:	d8f3      	bhi.n	8022b9e <__lshift+0x6e>
 8022bb6:	ebac 0304 	sub.w	r3, ip, r4
 8022bba:	3b15      	subs	r3, #21
 8022bbc:	f023 0303 	bic.w	r3, r3, #3
 8022bc0:	3304      	adds	r3, #4
 8022bc2:	f104 0015 	add.w	r0, r4, #21
 8022bc6:	4584      	cmp	ip, r0
 8022bc8:	bf38      	it	cc
 8022bca:	2304      	movcc	r3, #4
 8022bcc:	50ca      	str	r2, [r1, r3]
 8022bce:	b10a      	cbz	r2, 8022bd4 <__lshift+0xa4>
 8022bd0:	f108 0602 	add.w	r6, r8, #2
 8022bd4:	3e01      	subs	r6, #1
 8022bd6:	4638      	mov	r0, r7
 8022bd8:	612e      	str	r6, [r5, #16]
 8022bda:	4621      	mov	r1, r4
 8022bdc:	f7ff fd8c 	bl	80226f8 <_Bfree>
 8022be0:	4628      	mov	r0, r5
 8022be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8022bea:	3301      	adds	r3, #1
 8022bec:	e7c5      	b.n	8022b7a <__lshift+0x4a>
 8022bee:	3904      	subs	r1, #4
 8022bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8022bf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8022bf8:	459c      	cmp	ip, r3
 8022bfa:	d8f9      	bhi.n	8022bf0 <__lshift+0xc0>
 8022bfc:	e7ea      	b.n	8022bd4 <__lshift+0xa4>
 8022bfe:	bf00      	nop
 8022c00:	08025f5c 	.word	0x08025f5c
 8022c04:	08025fec 	.word	0x08025fec

08022c08 <__mcmp>:
 8022c08:	b530      	push	{r4, r5, lr}
 8022c0a:	6902      	ldr	r2, [r0, #16]
 8022c0c:	690c      	ldr	r4, [r1, #16]
 8022c0e:	1b12      	subs	r2, r2, r4
 8022c10:	d10e      	bne.n	8022c30 <__mcmp+0x28>
 8022c12:	f100 0314 	add.w	r3, r0, #20
 8022c16:	3114      	adds	r1, #20
 8022c18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022c1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022c20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022c24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022c28:	42a5      	cmp	r5, r4
 8022c2a:	d003      	beq.n	8022c34 <__mcmp+0x2c>
 8022c2c:	d305      	bcc.n	8022c3a <__mcmp+0x32>
 8022c2e:	2201      	movs	r2, #1
 8022c30:	4610      	mov	r0, r2
 8022c32:	bd30      	pop	{r4, r5, pc}
 8022c34:	4283      	cmp	r3, r0
 8022c36:	d3f3      	bcc.n	8022c20 <__mcmp+0x18>
 8022c38:	e7fa      	b.n	8022c30 <__mcmp+0x28>
 8022c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022c3e:	e7f7      	b.n	8022c30 <__mcmp+0x28>

08022c40 <__mdiff>:
 8022c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c44:	460c      	mov	r4, r1
 8022c46:	4606      	mov	r6, r0
 8022c48:	4611      	mov	r1, r2
 8022c4a:	4620      	mov	r0, r4
 8022c4c:	4617      	mov	r7, r2
 8022c4e:	f7ff ffdb 	bl	8022c08 <__mcmp>
 8022c52:	1e05      	subs	r5, r0, #0
 8022c54:	d110      	bne.n	8022c78 <__mdiff+0x38>
 8022c56:	4629      	mov	r1, r5
 8022c58:	4630      	mov	r0, r6
 8022c5a:	f7ff fd0d 	bl	8022678 <_Balloc>
 8022c5e:	b930      	cbnz	r0, 8022c6e <__mdiff+0x2e>
 8022c60:	4b39      	ldr	r3, [pc, #228]	; (8022d48 <__mdiff+0x108>)
 8022c62:	4602      	mov	r2, r0
 8022c64:	f240 2132 	movw	r1, #562	; 0x232
 8022c68:	4838      	ldr	r0, [pc, #224]	; (8022d4c <__mdiff+0x10c>)
 8022c6a:	f000 fb99 	bl	80233a0 <__assert_func>
 8022c6e:	2301      	movs	r3, #1
 8022c70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022c74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c78:	bfa4      	itt	ge
 8022c7a:	463b      	movge	r3, r7
 8022c7c:	4627      	movge	r7, r4
 8022c7e:	4630      	mov	r0, r6
 8022c80:	6879      	ldr	r1, [r7, #4]
 8022c82:	bfa6      	itte	ge
 8022c84:	461c      	movge	r4, r3
 8022c86:	2500      	movge	r5, #0
 8022c88:	2501      	movlt	r5, #1
 8022c8a:	f7ff fcf5 	bl	8022678 <_Balloc>
 8022c8e:	b920      	cbnz	r0, 8022c9a <__mdiff+0x5a>
 8022c90:	4b2d      	ldr	r3, [pc, #180]	; (8022d48 <__mdiff+0x108>)
 8022c92:	4602      	mov	r2, r0
 8022c94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022c98:	e7e6      	b.n	8022c68 <__mdiff+0x28>
 8022c9a:	693e      	ldr	r6, [r7, #16]
 8022c9c:	60c5      	str	r5, [r0, #12]
 8022c9e:	6925      	ldr	r5, [r4, #16]
 8022ca0:	f107 0114 	add.w	r1, r7, #20
 8022ca4:	f104 0914 	add.w	r9, r4, #20
 8022ca8:	f100 0e14 	add.w	lr, r0, #20
 8022cac:	f107 0210 	add.w	r2, r7, #16
 8022cb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022cb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022cb8:	46f2      	mov	sl, lr
 8022cba:	2700      	movs	r7, #0
 8022cbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8022cc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022cc4:	fa1f f883 	uxth.w	r8, r3
 8022cc8:	fa17 f78b 	uxtah	r7, r7, fp
 8022ccc:	0c1b      	lsrs	r3, r3, #16
 8022cce:	eba7 0808 	sub.w	r8, r7, r8
 8022cd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022cd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022cda:	fa1f f888 	uxth.w	r8, r8
 8022cde:	141f      	asrs	r7, r3, #16
 8022ce0:	454d      	cmp	r5, r9
 8022ce2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022ce6:	f84a 3b04 	str.w	r3, [sl], #4
 8022cea:	d8e7      	bhi.n	8022cbc <__mdiff+0x7c>
 8022cec:	1b2b      	subs	r3, r5, r4
 8022cee:	3b15      	subs	r3, #21
 8022cf0:	f023 0303 	bic.w	r3, r3, #3
 8022cf4:	3304      	adds	r3, #4
 8022cf6:	3415      	adds	r4, #21
 8022cf8:	42a5      	cmp	r5, r4
 8022cfa:	bf38      	it	cc
 8022cfc:	2304      	movcc	r3, #4
 8022cfe:	4419      	add	r1, r3
 8022d00:	4473      	add	r3, lr
 8022d02:	469e      	mov	lr, r3
 8022d04:	460d      	mov	r5, r1
 8022d06:	4565      	cmp	r5, ip
 8022d08:	d30e      	bcc.n	8022d28 <__mdiff+0xe8>
 8022d0a:	f10c 0203 	add.w	r2, ip, #3
 8022d0e:	1a52      	subs	r2, r2, r1
 8022d10:	f022 0203 	bic.w	r2, r2, #3
 8022d14:	3903      	subs	r1, #3
 8022d16:	458c      	cmp	ip, r1
 8022d18:	bf38      	it	cc
 8022d1a:	2200      	movcc	r2, #0
 8022d1c:	441a      	add	r2, r3
 8022d1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022d22:	b17b      	cbz	r3, 8022d44 <__mdiff+0x104>
 8022d24:	6106      	str	r6, [r0, #16]
 8022d26:	e7a5      	b.n	8022c74 <__mdiff+0x34>
 8022d28:	f855 8b04 	ldr.w	r8, [r5], #4
 8022d2c:	fa17 f488 	uxtah	r4, r7, r8
 8022d30:	1422      	asrs	r2, r4, #16
 8022d32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022d36:	b2a4      	uxth	r4, r4
 8022d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022d3c:	f84e 4b04 	str.w	r4, [lr], #4
 8022d40:	1417      	asrs	r7, r2, #16
 8022d42:	e7e0      	b.n	8022d06 <__mdiff+0xc6>
 8022d44:	3e01      	subs	r6, #1
 8022d46:	e7ea      	b.n	8022d1e <__mdiff+0xde>
 8022d48:	08025f5c 	.word	0x08025f5c
 8022d4c:	08025fec 	.word	0x08025fec

08022d50 <__ulp>:
 8022d50:	b082      	sub	sp, #8
 8022d52:	ed8d 0b00 	vstr	d0, [sp]
 8022d56:	9b01      	ldr	r3, [sp, #4]
 8022d58:	4912      	ldr	r1, [pc, #72]	; (8022da4 <__ulp+0x54>)
 8022d5a:	4019      	ands	r1, r3
 8022d5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022d60:	2900      	cmp	r1, #0
 8022d62:	dd05      	ble.n	8022d70 <__ulp+0x20>
 8022d64:	2200      	movs	r2, #0
 8022d66:	460b      	mov	r3, r1
 8022d68:	ec43 2b10 	vmov	d0, r2, r3
 8022d6c:	b002      	add	sp, #8
 8022d6e:	4770      	bx	lr
 8022d70:	4249      	negs	r1, r1
 8022d72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022d76:	ea4f 5021 	mov.w	r0, r1, asr #20
 8022d7a:	f04f 0200 	mov.w	r2, #0
 8022d7e:	f04f 0300 	mov.w	r3, #0
 8022d82:	da04      	bge.n	8022d8e <__ulp+0x3e>
 8022d84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8022d88:	fa41 f300 	asr.w	r3, r1, r0
 8022d8c:	e7ec      	b.n	8022d68 <__ulp+0x18>
 8022d8e:	f1a0 0114 	sub.w	r1, r0, #20
 8022d92:	291e      	cmp	r1, #30
 8022d94:	bfda      	itte	le
 8022d96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8022d9a:	fa20 f101 	lsrle.w	r1, r0, r1
 8022d9e:	2101      	movgt	r1, #1
 8022da0:	460a      	mov	r2, r1
 8022da2:	e7e1      	b.n	8022d68 <__ulp+0x18>
 8022da4:	7ff00000 	.word	0x7ff00000

08022da8 <__b2d>:
 8022da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022daa:	6905      	ldr	r5, [r0, #16]
 8022dac:	f100 0714 	add.w	r7, r0, #20
 8022db0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022db4:	1f2e      	subs	r6, r5, #4
 8022db6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022dba:	4620      	mov	r0, r4
 8022dbc:	f7ff fd52 	bl	8022864 <__hi0bits>
 8022dc0:	f1c0 0320 	rsb	r3, r0, #32
 8022dc4:	280a      	cmp	r0, #10
 8022dc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022e44 <__b2d+0x9c>
 8022dca:	600b      	str	r3, [r1, #0]
 8022dcc:	dc14      	bgt.n	8022df8 <__b2d+0x50>
 8022dce:	f1c0 0e0b 	rsb	lr, r0, #11
 8022dd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8022dd6:	42b7      	cmp	r7, r6
 8022dd8:	ea41 030c 	orr.w	r3, r1, ip
 8022ddc:	bf34      	ite	cc
 8022dde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022de2:	2100      	movcs	r1, #0
 8022de4:	3015      	adds	r0, #21
 8022de6:	fa04 f000 	lsl.w	r0, r4, r0
 8022dea:	fa21 f10e 	lsr.w	r1, r1, lr
 8022dee:	ea40 0201 	orr.w	r2, r0, r1
 8022df2:	ec43 2b10 	vmov	d0, r2, r3
 8022df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022df8:	42b7      	cmp	r7, r6
 8022dfa:	bf3a      	itte	cc
 8022dfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022e00:	f1a5 0608 	subcc.w	r6, r5, #8
 8022e04:	2100      	movcs	r1, #0
 8022e06:	380b      	subs	r0, #11
 8022e08:	d017      	beq.n	8022e3a <__b2d+0x92>
 8022e0a:	f1c0 0c20 	rsb	ip, r0, #32
 8022e0e:	fa04 f500 	lsl.w	r5, r4, r0
 8022e12:	42be      	cmp	r6, r7
 8022e14:	fa21 f40c 	lsr.w	r4, r1, ip
 8022e18:	ea45 0504 	orr.w	r5, r5, r4
 8022e1c:	bf8c      	ite	hi
 8022e1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022e22:	2400      	movls	r4, #0
 8022e24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022e28:	fa01 f000 	lsl.w	r0, r1, r0
 8022e2c:	fa24 f40c 	lsr.w	r4, r4, ip
 8022e30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022e34:	ea40 0204 	orr.w	r2, r0, r4
 8022e38:	e7db      	b.n	8022df2 <__b2d+0x4a>
 8022e3a:	ea44 030c 	orr.w	r3, r4, ip
 8022e3e:	460a      	mov	r2, r1
 8022e40:	e7d7      	b.n	8022df2 <__b2d+0x4a>
 8022e42:	bf00      	nop
 8022e44:	3ff00000 	.word	0x3ff00000

08022e48 <__d2b>:
 8022e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022e4c:	4689      	mov	r9, r1
 8022e4e:	2101      	movs	r1, #1
 8022e50:	ec57 6b10 	vmov	r6, r7, d0
 8022e54:	4690      	mov	r8, r2
 8022e56:	f7ff fc0f 	bl	8022678 <_Balloc>
 8022e5a:	4604      	mov	r4, r0
 8022e5c:	b930      	cbnz	r0, 8022e6c <__d2b+0x24>
 8022e5e:	4602      	mov	r2, r0
 8022e60:	4b25      	ldr	r3, [pc, #148]	; (8022ef8 <__d2b+0xb0>)
 8022e62:	4826      	ldr	r0, [pc, #152]	; (8022efc <__d2b+0xb4>)
 8022e64:	f240 310a 	movw	r1, #778	; 0x30a
 8022e68:	f000 fa9a 	bl	80233a0 <__assert_func>
 8022e6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022e74:	bb35      	cbnz	r5, 8022ec4 <__d2b+0x7c>
 8022e76:	2e00      	cmp	r6, #0
 8022e78:	9301      	str	r3, [sp, #4]
 8022e7a:	d028      	beq.n	8022ece <__d2b+0x86>
 8022e7c:	4668      	mov	r0, sp
 8022e7e:	9600      	str	r6, [sp, #0]
 8022e80:	f7ff fd10 	bl	80228a4 <__lo0bits>
 8022e84:	9900      	ldr	r1, [sp, #0]
 8022e86:	b300      	cbz	r0, 8022eca <__d2b+0x82>
 8022e88:	9a01      	ldr	r2, [sp, #4]
 8022e8a:	f1c0 0320 	rsb	r3, r0, #32
 8022e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8022e92:	430b      	orrs	r3, r1
 8022e94:	40c2      	lsrs	r2, r0
 8022e96:	6163      	str	r3, [r4, #20]
 8022e98:	9201      	str	r2, [sp, #4]
 8022e9a:	9b01      	ldr	r3, [sp, #4]
 8022e9c:	61a3      	str	r3, [r4, #24]
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	bf14      	ite	ne
 8022ea2:	2202      	movne	r2, #2
 8022ea4:	2201      	moveq	r2, #1
 8022ea6:	6122      	str	r2, [r4, #16]
 8022ea8:	b1d5      	cbz	r5, 8022ee0 <__d2b+0x98>
 8022eaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022eae:	4405      	add	r5, r0
 8022eb0:	f8c9 5000 	str.w	r5, [r9]
 8022eb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022eb8:	f8c8 0000 	str.w	r0, [r8]
 8022ebc:	4620      	mov	r0, r4
 8022ebe:	b003      	add	sp, #12
 8022ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022ec8:	e7d5      	b.n	8022e76 <__d2b+0x2e>
 8022eca:	6161      	str	r1, [r4, #20]
 8022ecc:	e7e5      	b.n	8022e9a <__d2b+0x52>
 8022ece:	a801      	add	r0, sp, #4
 8022ed0:	f7ff fce8 	bl	80228a4 <__lo0bits>
 8022ed4:	9b01      	ldr	r3, [sp, #4]
 8022ed6:	6163      	str	r3, [r4, #20]
 8022ed8:	2201      	movs	r2, #1
 8022eda:	6122      	str	r2, [r4, #16]
 8022edc:	3020      	adds	r0, #32
 8022ede:	e7e3      	b.n	8022ea8 <__d2b+0x60>
 8022ee0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022ee4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022ee8:	f8c9 0000 	str.w	r0, [r9]
 8022eec:	6918      	ldr	r0, [r3, #16]
 8022eee:	f7ff fcb9 	bl	8022864 <__hi0bits>
 8022ef2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022ef6:	e7df      	b.n	8022eb8 <__d2b+0x70>
 8022ef8:	08025f5c 	.word	0x08025f5c
 8022efc:	08025fec 	.word	0x08025fec

08022f00 <__ratio>:
 8022f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f04:	4688      	mov	r8, r1
 8022f06:	4669      	mov	r1, sp
 8022f08:	4681      	mov	r9, r0
 8022f0a:	f7ff ff4d 	bl	8022da8 <__b2d>
 8022f0e:	a901      	add	r1, sp, #4
 8022f10:	4640      	mov	r0, r8
 8022f12:	ec55 4b10 	vmov	r4, r5, d0
 8022f16:	f7ff ff47 	bl	8022da8 <__b2d>
 8022f1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022f1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022f22:	eba3 0c02 	sub.w	ip, r3, r2
 8022f26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022f2a:	1a9b      	subs	r3, r3, r2
 8022f2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022f30:	ec51 0b10 	vmov	r0, r1, d0
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	bfd6      	itet	le
 8022f38:	460a      	movle	r2, r1
 8022f3a:	462a      	movgt	r2, r5
 8022f3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022f40:	468b      	mov	fp, r1
 8022f42:	462f      	mov	r7, r5
 8022f44:	bfd4      	ite	le
 8022f46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8022f4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022f4e:	4620      	mov	r0, r4
 8022f50:	ee10 2a10 	vmov	r2, s0
 8022f54:	465b      	mov	r3, fp
 8022f56:	4639      	mov	r1, r7
 8022f58:	f7dd fc78 	bl	800084c <__aeabi_ddiv>
 8022f5c:	ec41 0b10 	vmov	d0, r0, r1
 8022f60:	b003      	add	sp, #12
 8022f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f66 <__copybits>:
 8022f66:	3901      	subs	r1, #1
 8022f68:	b570      	push	{r4, r5, r6, lr}
 8022f6a:	1149      	asrs	r1, r1, #5
 8022f6c:	6914      	ldr	r4, [r2, #16]
 8022f6e:	3101      	adds	r1, #1
 8022f70:	f102 0314 	add.w	r3, r2, #20
 8022f74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022f78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022f7c:	1f05      	subs	r5, r0, #4
 8022f7e:	42a3      	cmp	r3, r4
 8022f80:	d30c      	bcc.n	8022f9c <__copybits+0x36>
 8022f82:	1aa3      	subs	r3, r4, r2
 8022f84:	3b11      	subs	r3, #17
 8022f86:	f023 0303 	bic.w	r3, r3, #3
 8022f8a:	3211      	adds	r2, #17
 8022f8c:	42a2      	cmp	r2, r4
 8022f8e:	bf88      	it	hi
 8022f90:	2300      	movhi	r3, #0
 8022f92:	4418      	add	r0, r3
 8022f94:	2300      	movs	r3, #0
 8022f96:	4288      	cmp	r0, r1
 8022f98:	d305      	bcc.n	8022fa6 <__copybits+0x40>
 8022f9a:	bd70      	pop	{r4, r5, r6, pc}
 8022f9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8022fa0:	f845 6f04 	str.w	r6, [r5, #4]!
 8022fa4:	e7eb      	b.n	8022f7e <__copybits+0x18>
 8022fa6:	f840 3b04 	str.w	r3, [r0], #4
 8022faa:	e7f4      	b.n	8022f96 <__copybits+0x30>

08022fac <__any_on>:
 8022fac:	f100 0214 	add.w	r2, r0, #20
 8022fb0:	6900      	ldr	r0, [r0, #16]
 8022fb2:	114b      	asrs	r3, r1, #5
 8022fb4:	4298      	cmp	r0, r3
 8022fb6:	b510      	push	{r4, lr}
 8022fb8:	db11      	blt.n	8022fde <__any_on+0x32>
 8022fba:	dd0a      	ble.n	8022fd2 <__any_on+0x26>
 8022fbc:	f011 011f 	ands.w	r1, r1, #31
 8022fc0:	d007      	beq.n	8022fd2 <__any_on+0x26>
 8022fc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022fc6:	fa24 f001 	lsr.w	r0, r4, r1
 8022fca:	fa00 f101 	lsl.w	r1, r0, r1
 8022fce:	428c      	cmp	r4, r1
 8022fd0:	d10b      	bne.n	8022fea <__any_on+0x3e>
 8022fd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022fd6:	4293      	cmp	r3, r2
 8022fd8:	d803      	bhi.n	8022fe2 <__any_on+0x36>
 8022fda:	2000      	movs	r0, #0
 8022fdc:	bd10      	pop	{r4, pc}
 8022fde:	4603      	mov	r3, r0
 8022fe0:	e7f7      	b.n	8022fd2 <__any_on+0x26>
 8022fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022fe6:	2900      	cmp	r1, #0
 8022fe8:	d0f5      	beq.n	8022fd6 <__any_on+0x2a>
 8022fea:	2001      	movs	r0, #1
 8022fec:	e7f6      	b.n	8022fdc <__any_on+0x30>

08022fee <_calloc_r>:
 8022fee:	b513      	push	{r0, r1, r4, lr}
 8022ff0:	434a      	muls	r2, r1
 8022ff2:	4611      	mov	r1, r2
 8022ff4:	9201      	str	r2, [sp, #4]
 8022ff6:	f7fc fa79 	bl	801f4ec <_malloc_r>
 8022ffa:	4604      	mov	r4, r0
 8022ffc:	b118      	cbz	r0, 8023006 <_calloc_r+0x18>
 8022ffe:	9a01      	ldr	r2, [sp, #4]
 8023000:	2100      	movs	r1, #0
 8023002:	f7fc fa1b 	bl	801f43c <memset>
 8023006:	4620      	mov	r0, r4
 8023008:	b002      	add	sp, #8
 802300a:	bd10      	pop	{r4, pc}

0802300c <_realloc_r>:
 802300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802300e:	4607      	mov	r7, r0
 8023010:	4614      	mov	r4, r2
 8023012:	460e      	mov	r6, r1
 8023014:	b921      	cbnz	r1, 8023020 <_realloc_r+0x14>
 8023016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802301a:	4611      	mov	r1, r2
 802301c:	f7fc ba66 	b.w	801f4ec <_malloc_r>
 8023020:	b922      	cbnz	r2, 802302c <_realloc_r+0x20>
 8023022:	f7fc fa13 	bl	801f44c <_free_r>
 8023026:	4625      	mov	r5, r4
 8023028:	4628      	mov	r0, r5
 802302a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802302c:	f000 fbbc 	bl	80237a8 <_malloc_usable_size_r>
 8023030:	42a0      	cmp	r0, r4
 8023032:	d20f      	bcs.n	8023054 <_realloc_r+0x48>
 8023034:	4621      	mov	r1, r4
 8023036:	4638      	mov	r0, r7
 8023038:	f7fc fa58 	bl	801f4ec <_malloc_r>
 802303c:	4605      	mov	r5, r0
 802303e:	2800      	cmp	r0, #0
 8023040:	d0f2      	beq.n	8023028 <_realloc_r+0x1c>
 8023042:	4631      	mov	r1, r6
 8023044:	4622      	mov	r2, r4
 8023046:	f7fc f9eb 	bl	801f420 <memcpy>
 802304a:	4631      	mov	r1, r6
 802304c:	4638      	mov	r0, r7
 802304e:	f7fc f9fd 	bl	801f44c <_free_r>
 8023052:	e7e9      	b.n	8023028 <_realloc_r+0x1c>
 8023054:	4635      	mov	r5, r6
 8023056:	e7e7      	b.n	8023028 <_realloc_r+0x1c>

08023058 <__ssputs_r>:
 8023058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802305c:	688e      	ldr	r6, [r1, #8]
 802305e:	429e      	cmp	r6, r3
 8023060:	4682      	mov	sl, r0
 8023062:	460c      	mov	r4, r1
 8023064:	4690      	mov	r8, r2
 8023066:	461f      	mov	r7, r3
 8023068:	d838      	bhi.n	80230dc <__ssputs_r+0x84>
 802306a:	898a      	ldrh	r2, [r1, #12]
 802306c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023070:	d032      	beq.n	80230d8 <__ssputs_r+0x80>
 8023072:	6825      	ldr	r5, [r4, #0]
 8023074:	6909      	ldr	r1, [r1, #16]
 8023076:	eba5 0901 	sub.w	r9, r5, r1
 802307a:	6965      	ldr	r5, [r4, #20]
 802307c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023084:	3301      	adds	r3, #1
 8023086:	444b      	add	r3, r9
 8023088:	106d      	asrs	r5, r5, #1
 802308a:	429d      	cmp	r5, r3
 802308c:	bf38      	it	cc
 802308e:	461d      	movcc	r5, r3
 8023090:	0553      	lsls	r3, r2, #21
 8023092:	d531      	bpl.n	80230f8 <__ssputs_r+0xa0>
 8023094:	4629      	mov	r1, r5
 8023096:	f7fc fa29 	bl	801f4ec <_malloc_r>
 802309a:	4606      	mov	r6, r0
 802309c:	b950      	cbnz	r0, 80230b4 <__ssputs_r+0x5c>
 802309e:	230c      	movs	r3, #12
 80230a0:	f8ca 3000 	str.w	r3, [sl]
 80230a4:	89a3      	ldrh	r3, [r4, #12]
 80230a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80230aa:	81a3      	strh	r3, [r4, #12]
 80230ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80230b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230b4:	6921      	ldr	r1, [r4, #16]
 80230b6:	464a      	mov	r2, r9
 80230b8:	f7fc f9b2 	bl	801f420 <memcpy>
 80230bc:	89a3      	ldrh	r3, [r4, #12]
 80230be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80230c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80230c6:	81a3      	strh	r3, [r4, #12]
 80230c8:	6126      	str	r6, [r4, #16]
 80230ca:	6165      	str	r5, [r4, #20]
 80230cc:	444e      	add	r6, r9
 80230ce:	eba5 0509 	sub.w	r5, r5, r9
 80230d2:	6026      	str	r6, [r4, #0]
 80230d4:	60a5      	str	r5, [r4, #8]
 80230d6:	463e      	mov	r6, r7
 80230d8:	42be      	cmp	r6, r7
 80230da:	d900      	bls.n	80230de <__ssputs_r+0x86>
 80230dc:	463e      	mov	r6, r7
 80230de:	4632      	mov	r2, r6
 80230e0:	6820      	ldr	r0, [r4, #0]
 80230e2:	4641      	mov	r1, r8
 80230e4:	f000 fb46 	bl	8023774 <memmove>
 80230e8:	68a3      	ldr	r3, [r4, #8]
 80230ea:	6822      	ldr	r2, [r4, #0]
 80230ec:	1b9b      	subs	r3, r3, r6
 80230ee:	4432      	add	r2, r6
 80230f0:	60a3      	str	r3, [r4, #8]
 80230f2:	6022      	str	r2, [r4, #0]
 80230f4:	2000      	movs	r0, #0
 80230f6:	e7db      	b.n	80230b0 <__ssputs_r+0x58>
 80230f8:	462a      	mov	r2, r5
 80230fa:	f7ff ff87 	bl	802300c <_realloc_r>
 80230fe:	4606      	mov	r6, r0
 8023100:	2800      	cmp	r0, #0
 8023102:	d1e1      	bne.n	80230c8 <__ssputs_r+0x70>
 8023104:	6921      	ldr	r1, [r4, #16]
 8023106:	4650      	mov	r0, sl
 8023108:	f7fc f9a0 	bl	801f44c <_free_r>
 802310c:	e7c7      	b.n	802309e <__ssputs_r+0x46>
	...

08023110 <_svfiprintf_r>:
 8023110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023114:	4698      	mov	r8, r3
 8023116:	898b      	ldrh	r3, [r1, #12]
 8023118:	061b      	lsls	r3, r3, #24
 802311a:	b09d      	sub	sp, #116	; 0x74
 802311c:	4607      	mov	r7, r0
 802311e:	460d      	mov	r5, r1
 8023120:	4614      	mov	r4, r2
 8023122:	d50e      	bpl.n	8023142 <_svfiprintf_r+0x32>
 8023124:	690b      	ldr	r3, [r1, #16]
 8023126:	b963      	cbnz	r3, 8023142 <_svfiprintf_r+0x32>
 8023128:	2140      	movs	r1, #64	; 0x40
 802312a:	f7fc f9df 	bl	801f4ec <_malloc_r>
 802312e:	6028      	str	r0, [r5, #0]
 8023130:	6128      	str	r0, [r5, #16]
 8023132:	b920      	cbnz	r0, 802313e <_svfiprintf_r+0x2e>
 8023134:	230c      	movs	r3, #12
 8023136:	603b      	str	r3, [r7, #0]
 8023138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802313c:	e0d1      	b.n	80232e2 <_svfiprintf_r+0x1d2>
 802313e:	2340      	movs	r3, #64	; 0x40
 8023140:	616b      	str	r3, [r5, #20]
 8023142:	2300      	movs	r3, #0
 8023144:	9309      	str	r3, [sp, #36]	; 0x24
 8023146:	2320      	movs	r3, #32
 8023148:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802314c:	f8cd 800c 	str.w	r8, [sp, #12]
 8023150:	2330      	movs	r3, #48	; 0x30
 8023152:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80232fc <_svfiprintf_r+0x1ec>
 8023156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802315a:	f04f 0901 	mov.w	r9, #1
 802315e:	4623      	mov	r3, r4
 8023160:	469a      	mov	sl, r3
 8023162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023166:	b10a      	cbz	r2, 802316c <_svfiprintf_r+0x5c>
 8023168:	2a25      	cmp	r2, #37	; 0x25
 802316a:	d1f9      	bne.n	8023160 <_svfiprintf_r+0x50>
 802316c:	ebba 0b04 	subs.w	fp, sl, r4
 8023170:	d00b      	beq.n	802318a <_svfiprintf_r+0x7a>
 8023172:	465b      	mov	r3, fp
 8023174:	4622      	mov	r2, r4
 8023176:	4629      	mov	r1, r5
 8023178:	4638      	mov	r0, r7
 802317a:	f7ff ff6d 	bl	8023058 <__ssputs_r>
 802317e:	3001      	adds	r0, #1
 8023180:	f000 80aa 	beq.w	80232d8 <_svfiprintf_r+0x1c8>
 8023184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023186:	445a      	add	r2, fp
 8023188:	9209      	str	r2, [sp, #36]	; 0x24
 802318a:	f89a 3000 	ldrb.w	r3, [sl]
 802318e:	2b00      	cmp	r3, #0
 8023190:	f000 80a2 	beq.w	80232d8 <_svfiprintf_r+0x1c8>
 8023194:	2300      	movs	r3, #0
 8023196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802319a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802319e:	f10a 0a01 	add.w	sl, sl, #1
 80231a2:	9304      	str	r3, [sp, #16]
 80231a4:	9307      	str	r3, [sp, #28]
 80231a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80231aa:	931a      	str	r3, [sp, #104]	; 0x68
 80231ac:	4654      	mov	r4, sl
 80231ae:	2205      	movs	r2, #5
 80231b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231b4:	4851      	ldr	r0, [pc, #324]	; (80232fc <_svfiprintf_r+0x1ec>)
 80231b6:	f7dd f813 	bl	80001e0 <memchr>
 80231ba:	9a04      	ldr	r2, [sp, #16]
 80231bc:	b9d8      	cbnz	r0, 80231f6 <_svfiprintf_r+0xe6>
 80231be:	06d0      	lsls	r0, r2, #27
 80231c0:	bf44      	itt	mi
 80231c2:	2320      	movmi	r3, #32
 80231c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80231c8:	0711      	lsls	r1, r2, #28
 80231ca:	bf44      	itt	mi
 80231cc:	232b      	movmi	r3, #43	; 0x2b
 80231ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80231d2:	f89a 3000 	ldrb.w	r3, [sl]
 80231d6:	2b2a      	cmp	r3, #42	; 0x2a
 80231d8:	d015      	beq.n	8023206 <_svfiprintf_r+0xf6>
 80231da:	9a07      	ldr	r2, [sp, #28]
 80231dc:	4654      	mov	r4, sl
 80231de:	2000      	movs	r0, #0
 80231e0:	f04f 0c0a 	mov.w	ip, #10
 80231e4:	4621      	mov	r1, r4
 80231e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80231ea:	3b30      	subs	r3, #48	; 0x30
 80231ec:	2b09      	cmp	r3, #9
 80231ee:	d94e      	bls.n	802328e <_svfiprintf_r+0x17e>
 80231f0:	b1b0      	cbz	r0, 8023220 <_svfiprintf_r+0x110>
 80231f2:	9207      	str	r2, [sp, #28]
 80231f4:	e014      	b.n	8023220 <_svfiprintf_r+0x110>
 80231f6:	eba0 0308 	sub.w	r3, r0, r8
 80231fa:	fa09 f303 	lsl.w	r3, r9, r3
 80231fe:	4313      	orrs	r3, r2
 8023200:	9304      	str	r3, [sp, #16]
 8023202:	46a2      	mov	sl, r4
 8023204:	e7d2      	b.n	80231ac <_svfiprintf_r+0x9c>
 8023206:	9b03      	ldr	r3, [sp, #12]
 8023208:	1d19      	adds	r1, r3, #4
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	9103      	str	r1, [sp, #12]
 802320e:	2b00      	cmp	r3, #0
 8023210:	bfbb      	ittet	lt
 8023212:	425b      	neglt	r3, r3
 8023214:	f042 0202 	orrlt.w	r2, r2, #2
 8023218:	9307      	strge	r3, [sp, #28]
 802321a:	9307      	strlt	r3, [sp, #28]
 802321c:	bfb8      	it	lt
 802321e:	9204      	strlt	r2, [sp, #16]
 8023220:	7823      	ldrb	r3, [r4, #0]
 8023222:	2b2e      	cmp	r3, #46	; 0x2e
 8023224:	d10c      	bne.n	8023240 <_svfiprintf_r+0x130>
 8023226:	7863      	ldrb	r3, [r4, #1]
 8023228:	2b2a      	cmp	r3, #42	; 0x2a
 802322a:	d135      	bne.n	8023298 <_svfiprintf_r+0x188>
 802322c:	9b03      	ldr	r3, [sp, #12]
 802322e:	1d1a      	adds	r2, r3, #4
 8023230:	681b      	ldr	r3, [r3, #0]
 8023232:	9203      	str	r2, [sp, #12]
 8023234:	2b00      	cmp	r3, #0
 8023236:	bfb8      	it	lt
 8023238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802323c:	3402      	adds	r4, #2
 802323e:	9305      	str	r3, [sp, #20]
 8023240:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802330c <_svfiprintf_r+0x1fc>
 8023244:	7821      	ldrb	r1, [r4, #0]
 8023246:	2203      	movs	r2, #3
 8023248:	4650      	mov	r0, sl
 802324a:	f7dc ffc9 	bl	80001e0 <memchr>
 802324e:	b140      	cbz	r0, 8023262 <_svfiprintf_r+0x152>
 8023250:	2340      	movs	r3, #64	; 0x40
 8023252:	eba0 000a 	sub.w	r0, r0, sl
 8023256:	fa03 f000 	lsl.w	r0, r3, r0
 802325a:	9b04      	ldr	r3, [sp, #16]
 802325c:	4303      	orrs	r3, r0
 802325e:	3401      	adds	r4, #1
 8023260:	9304      	str	r3, [sp, #16]
 8023262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023266:	4826      	ldr	r0, [pc, #152]	; (8023300 <_svfiprintf_r+0x1f0>)
 8023268:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802326c:	2206      	movs	r2, #6
 802326e:	f7dc ffb7 	bl	80001e0 <memchr>
 8023272:	2800      	cmp	r0, #0
 8023274:	d038      	beq.n	80232e8 <_svfiprintf_r+0x1d8>
 8023276:	4b23      	ldr	r3, [pc, #140]	; (8023304 <_svfiprintf_r+0x1f4>)
 8023278:	bb1b      	cbnz	r3, 80232c2 <_svfiprintf_r+0x1b2>
 802327a:	9b03      	ldr	r3, [sp, #12]
 802327c:	3307      	adds	r3, #7
 802327e:	f023 0307 	bic.w	r3, r3, #7
 8023282:	3308      	adds	r3, #8
 8023284:	9303      	str	r3, [sp, #12]
 8023286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023288:	4433      	add	r3, r6
 802328a:	9309      	str	r3, [sp, #36]	; 0x24
 802328c:	e767      	b.n	802315e <_svfiprintf_r+0x4e>
 802328e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023292:	460c      	mov	r4, r1
 8023294:	2001      	movs	r0, #1
 8023296:	e7a5      	b.n	80231e4 <_svfiprintf_r+0xd4>
 8023298:	2300      	movs	r3, #0
 802329a:	3401      	adds	r4, #1
 802329c:	9305      	str	r3, [sp, #20]
 802329e:	4619      	mov	r1, r3
 80232a0:	f04f 0c0a 	mov.w	ip, #10
 80232a4:	4620      	mov	r0, r4
 80232a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80232aa:	3a30      	subs	r2, #48	; 0x30
 80232ac:	2a09      	cmp	r2, #9
 80232ae:	d903      	bls.n	80232b8 <_svfiprintf_r+0x1a8>
 80232b0:	2b00      	cmp	r3, #0
 80232b2:	d0c5      	beq.n	8023240 <_svfiprintf_r+0x130>
 80232b4:	9105      	str	r1, [sp, #20]
 80232b6:	e7c3      	b.n	8023240 <_svfiprintf_r+0x130>
 80232b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80232bc:	4604      	mov	r4, r0
 80232be:	2301      	movs	r3, #1
 80232c0:	e7f0      	b.n	80232a4 <_svfiprintf_r+0x194>
 80232c2:	ab03      	add	r3, sp, #12
 80232c4:	9300      	str	r3, [sp, #0]
 80232c6:	462a      	mov	r2, r5
 80232c8:	4b0f      	ldr	r3, [pc, #60]	; (8023308 <_svfiprintf_r+0x1f8>)
 80232ca:	a904      	add	r1, sp, #16
 80232cc:	4638      	mov	r0, r7
 80232ce:	f7fc fa07 	bl	801f6e0 <_printf_float>
 80232d2:	1c42      	adds	r2, r0, #1
 80232d4:	4606      	mov	r6, r0
 80232d6:	d1d6      	bne.n	8023286 <_svfiprintf_r+0x176>
 80232d8:	89ab      	ldrh	r3, [r5, #12]
 80232da:	065b      	lsls	r3, r3, #25
 80232dc:	f53f af2c 	bmi.w	8023138 <_svfiprintf_r+0x28>
 80232e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80232e2:	b01d      	add	sp, #116	; 0x74
 80232e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232e8:	ab03      	add	r3, sp, #12
 80232ea:	9300      	str	r3, [sp, #0]
 80232ec:	462a      	mov	r2, r5
 80232ee:	4b06      	ldr	r3, [pc, #24]	; (8023308 <_svfiprintf_r+0x1f8>)
 80232f0:	a904      	add	r1, sp, #16
 80232f2:	4638      	mov	r0, r7
 80232f4:	f7fc fc98 	bl	801fc28 <_printf_i>
 80232f8:	e7eb      	b.n	80232d2 <_svfiprintf_r+0x1c2>
 80232fa:	bf00      	nop
 80232fc:	0802614c 	.word	0x0802614c
 8023300:	08026156 	.word	0x08026156
 8023304:	0801f6e1 	.word	0x0801f6e1
 8023308:	08023059 	.word	0x08023059
 802330c:	08026152 	.word	0x08026152

08023310 <_read_r>:
 8023310:	b538      	push	{r3, r4, r5, lr}
 8023312:	4d07      	ldr	r5, [pc, #28]	; (8023330 <_read_r+0x20>)
 8023314:	4604      	mov	r4, r0
 8023316:	4608      	mov	r0, r1
 8023318:	4611      	mov	r1, r2
 802331a:	2200      	movs	r2, #0
 802331c:	602a      	str	r2, [r5, #0]
 802331e:	461a      	mov	r2, r3
 8023320:	f7eb fd60 	bl	800ede4 <_read>
 8023324:	1c43      	adds	r3, r0, #1
 8023326:	d102      	bne.n	802332e <_read_r+0x1e>
 8023328:	682b      	ldr	r3, [r5, #0]
 802332a:	b103      	cbz	r3, 802332e <_read_r+0x1e>
 802332c:	6023      	str	r3, [r4, #0]
 802332e:	bd38      	pop	{r3, r4, r5, pc}
 8023330:	2000a94c 	.word	0x2000a94c
 8023334:	00000000 	.word	0x00000000

08023338 <nan>:
 8023338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023340 <nan+0x8>
 802333c:	4770      	bx	lr
 802333e:	bf00      	nop
 8023340:	00000000 	.word	0x00000000
 8023344:	7ff80000 	.word	0x7ff80000

08023348 <finitef>:
 8023348:	b082      	sub	sp, #8
 802334a:	ed8d 0a01 	vstr	s0, [sp, #4]
 802334e:	9801      	ldr	r0, [sp, #4]
 8023350:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023354:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8023358:	bfac      	ite	ge
 802335a:	2000      	movge	r0, #0
 802335c:	2001      	movlt	r0, #1
 802335e:	b002      	add	sp, #8
 8023360:	4770      	bx	lr

08023362 <strncmp>:
 8023362:	b510      	push	{r4, lr}
 8023364:	b16a      	cbz	r2, 8023382 <strncmp+0x20>
 8023366:	3901      	subs	r1, #1
 8023368:	1884      	adds	r4, r0, r2
 802336a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802336e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023372:	4293      	cmp	r3, r2
 8023374:	d103      	bne.n	802337e <strncmp+0x1c>
 8023376:	42a0      	cmp	r0, r4
 8023378:	d001      	beq.n	802337e <strncmp+0x1c>
 802337a:	2b00      	cmp	r3, #0
 802337c:	d1f5      	bne.n	802336a <strncmp+0x8>
 802337e:	1a98      	subs	r0, r3, r2
 8023380:	bd10      	pop	{r4, pc}
 8023382:	4610      	mov	r0, r2
 8023384:	e7fc      	b.n	8023380 <strncmp+0x1e>

08023386 <__ascii_wctomb>:
 8023386:	b149      	cbz	r1, 802339c <__ascii_wctomb+0x16>
 8023388:	2aff      	cmp	r2, #255	; 0xff
 802338a:	bf85      	ittet	hi
 802338c:	238a      	movhi	r3, #138	; 0x8a
 802338e:	6003      	strhi	r3, [r0, #0]
 8023390:	700a      	strbls	r2, [r1, #0]
 8023392:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8023396:	bf98      	it	ls
 8023398:	2001      	movls	r0, #1
 802339a:	4770      	bx	lr
 802339c:	4608      	mov	r0, r1
 802339e:	4770      	bx	lr

080233a0 <__assert_func>:
 80233a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80233a2:	4614      	mov	r4, r2
 80233a4:	461a      	mov	r2, r3
 80233a6:	4b09      	ldr	r3, [pc, #36]	; (80233cc <__assert_func+0x2c>)
 80233a8:	681b      	ldr	r3, [r3, #0]
 80233aa:	4605      	mov	r5, r0
 80233ac:	68d8      	ldr	r0, [r3, #12]
 80233ae:	b14c      	cbz	r4, 80233c4 <__assert_func+0x24>
 80233b0:	4b07      	ldr	r3, [pc, #28]	; (80233d0 <__assert_func+0x30>)
 80233b2:	9100      	str	r1, [sp, #0]
 80233b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80233b8:	4906      	ldr	r1, [pc, #24]	; (80233d4 <__assert_func+0x34>)
 80233ba:	462b      	mov	r3, r5
 80233bc:	f000 f9a6 	bl	802370c <fiprintf>
 80233c0:	f000 fc14 	bl	8023bec <abort>
 80233c4:	4b04      	ldr	r3, [pc, #16]	; (80233d8 <__assert_func+0x38>)
 80233c6:	461c      	mov	r4, r3
 80233c8:	e7f3      	b.n	80233b2 <__assert_func+0x12>
 80233ca:	bf00      	nop
 80233cc:	200000c4 	.word	0x200000c4
 80233d0:	0802615d 	.word	0x0802615d
 80233d4:	0802616a 	.word	0x0802616a
 80233d8:	08026198 	.word	0x08026198

080233dc <__sflush_r>:
 80233dc:	898a      	ldrh	r2, [r1, #12]
 80233de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80233e2:	4605      	mov	r5, r0
 80233e4:	0710      	lsls	r0, r2, #28
 80233e6:	460c      	mov	r4, r1
 80233e8:	d458      	bmi.n	802349c <__sflush_r+0xc0>
 80233ea:	684b      	ldr	r3, [r1, #4]
 80233ec:	2b00      	cmp	r3, #0
 80233ee:	dc05      	bgt.n	80233fc <__sflush_r+0x20>
 80233f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	dc02      	bgt.n	80233fc <__sflush_r+0x20>
 80233f6:	2000      	movs	r0, #0
 80233f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80233fe:	2e00      	cmp	r6, #0
 8023400:	d0f9      	beq.n	80233f6 <__sflush_r+0x1a>
 8023402:	2300      	movs	r3, #0
 8023404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023408:	682f      	ldr	r7, [r5, #0]
 802340a:	602b      	str	r3, [r5, #0]
 802340c:	d032      	beq.n	8023474 <__sflush_r+0x98>
 802340e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023410:	89a3      	ldrh	r3, [r4, #12]
 8023412:	075a      	lsls	r2, r3, #29
 8023414:	d505      	bpl.n	8023422 <__sflush_r+0x46>
 8023416:	6863      	ldr	r3, [r4, #4]
 8023418:	1ac0      	subs	r0, r0, r3
 802341a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802341c:	b10b      	cbz	r3, 8023422 <__sflush_r+0x46>
 802341e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023420:	1ac0      	subs	r0, r0, r3
 8023422:	2300      	movs	r3, #0
 8023424:	4602      	mov	r2, r0
 8023426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023428:	6a21      	ldr	r1, [r4, #32]
 802342a:	4628      	mov	r0, r5
 802342c:	47b0      	blx	r6
 802342e:	1c43      	adds	r3, r0, #1
 8023430:	89a3      	ldrh	r3, [r4, #12]
 8023432:	d106      	bne.n	8023442 <__sflush_r+0x66>
 8023434:	6829      	ldr	r1, [r5, #0]
 8023436:	291d      	cmp	r1, #29
 8023438:	d82c      	bhi.n	8023494 <__sflush_r+0xb8>
 802343a:	4a2a      	ldr	r2, [pc, #168]	; (80234e4 <__sflush_r+0x108>)
 802343c:	40ca      	lsrs	r2, r1
 802343e:	07d6      	lsls	r6, r2, #31
 8023440:	d528      	bpl.n	8023494 <__sflush_r+0xb8>
 8023442:	2200      	movs	r2, #0
 8023444:	6062      	str	r2, [r4, #4]
 8023446:	04d9      	lsls	r1, r3, #19
 8023448:	6922      	ldr	r2, [r4, #16]
 802344a:	6022      	str	r2, [r4, #0]
 802344c:	d504      	bpl.n	8023458 <__sflush_r+0x7c>
 802344e:	1c42      	adds	r2, r0, #1
 8023450:	d101      	bne.n	8023456 <__sflush_r+0x7a>
 8023452:	682b      	ldr	r3, [r5, #0]
 8023454:	b903      	cbnz	r3, 8023458 <__sflush_r+0x7c>
 8023456:	6560      	str	r0, [r4, #84]	; 0x54
 8023458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802345a:	602f      	str	r7, [r5, #0]
 802345c:	2900      	cmp	r1, #0
 802345e:	d0ca      	beq.n	80233f6 <__sflush_r+0x1a>
 8023460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023464:	4299      	cmp	r1, r3
 8023466:	d002      	beq.n	802346e <__sflush_r+0x92>
 8023468:	4628      	mov	r0, r5
 802346a:	f7fb ffef 	bl	801f44c <_free_r>
 802346e:	2000      	movs	r0, #0
 8023470:	6360      	str	r0, [r4, #52]	; 0x34
 8023472:	e7c1      	b.n	80233f8 <__sflush_r+0x1c>
 8023474:	6a21      	ldr	r1, [r4, #32]
 8023476:	2301      	movs	r3, #1
 8023478:	4628      	mov	r0, r5
 802347a:	47b0      	blx	r6
 802347c:	1c41      	adds	r1, r0, #1
 802347e:	d1c7      	bne.n	8023410 <__sflush_r+0x34>
 8023480:	682b      	ldr	r3, [r5, #0]
 8023482:	2b00      	cmp	r3, #0
 8023484:	d0c4      	beq.n	8023410 <__sflush_r+0x34>
 8023486:	2b1d      	cmp	r3, #29
 8023488:	d001      	beq.n	802348e <__sflush_r+0xb2>
 802348a:	2b16      	cmp	r3, #22
 802348c:	d101      	bne.n	8023492 <__sflush_r+0xb6>
 802348e:	602f      	str	r7, [r5, #0]
 8023490:	e7b1      	b.n	80233f6 <__sflush_r+0x1a>
 8023492:	89a3      	ldrh	r3, [r4, #12]
 8023494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023498:	81a3      	strh	r3, [r4, #12]
 802349a:	e7ad      	b.n	80233f8 <__sflush_r+0x1c>
 802349c:	690f      	ldr	r7, [r1, #16]
 802349e:	2f00      	cmp	r7, #0
 80234a0:	d0a9      	beq.n	80233f6 <__sflush_r+0x1a>
 80234a2:	0793      	lsls	r3, r2, #30
 80234a4:	680e      	ldr	r6, [r1, #0]
 80234a6:	bf08      	it	eq
 80234a8:	694b      	ldreq	r3, [r1, #20]
 80234aa:	600f      	str	r7, [r1, #0]
 80234ac:	bf18      	it	ne
 80234ae:	2300      	movne	r3, #0
 80234b0:	eba6 0807 	sub.w	r8, r6, r7
 80234b4:	608b      	str	r3, [r1, #8]
 80234b6:	f1b8 0f00 	cmp.w	r8, #0
 80234ba:	dd9c      	ble.n	80233f6 <__sflush_r+0x1a>
 80234bc:	6a21      	ldr	r1, [r4, #32]
 80234be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80234c0:	4643      	mov	r3, r8
 80234c2:	463a      	mov	r2, r7
 80234c4:	4628      	mov	r0, r5
 80234c6:	47b0      	blx	r6
 80234c8:	2800      	cmp	r0, #0
 80234ca:	dc06      	bgt.n	80234da <__sflush_r+0xfe>
 80234cc:	89a3      	ldrh	r3, [r4, #12]
 80234ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234d2:	81a3      	strh	r3, [r4, #12]
 80234d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80234d8:	e78e      	b.n	80233f8 <__sflush_r+0x1c>
 80234da:	4407      	add	r7, r0
 80234dc:	eba8 0800 	sub.w	r8, r8, r0
 80234e0:	e7e9      	b.n	80234b6 <__sflush_r+0xda>
 80234e2:	bf00      	nop
 80234e4:	20400001 	.word	0x20400001

080234e8 <_fflush_r>:
 80234e8:	b538      	push	{r3, r4, r5, lr}
 80234ea:	690b      	ldr	r3, [r1, #16]
 80234ec:	4605      	mov	r5, r0
 80234ee:	460c      	mov	r4, r1
 80234f0:	b913      	cbnz	r3, 80234f8 <_fflush_r+0x10>
 80234f2:	2500      	movs	r5, #0
 80234f4:	4628      	mov	r0, r5
 80234f6:	bd38      	pop	{r3, r4, r5, pc}
 80234f8:	b118      	cbz	r0, 8023502 <_fflush_r+0x1a>
 80234fa:	6983      	ldr	r3, [r0, #24]
 80234fc:	b90b      	cbnz	r3, 8023502 <_fflush_r+0x1a>
 80234fe:	f000 f887 	bl	8023610 <__sinit>
 8023502:	4b14      	ldr	r3, [pc, #80]	; (8023554 <_fflush_r+0x6c>)
 8023504:	429c      	cmp	r4, r3
 8023506:	d11b      	bne.n	8023540 <_fflush_r+0x58>
 8023508:	686c      	ldr	r4, [r5, #4]
 802350a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802350e:	2b00      	cmp	r3, #0
 8023510:	d0ef      	beq.n	80234f2 <_fflush_r+0xa>
 8023512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023514:	07d0      	lsls	r0, r2, #31
 8023516:	d404      	bmi.n	8023522 <_fflush_r+0x3a>
 8023518:	0599      	lsls	r1, r3, #22
 802351a:	d402      	bmi.n	8023522 <_fflush_r+0x3a>
 802351c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802351e:	f000 f927 	bl	8023770 <__retarget_lock_acquire_recursive>
 8023522:	4628      	mov	r0, r5
 8023524:	4621      	mov	r1, r4
 8023526:	f7ff ff59 	bl	80233dc <__sflush_r>
 802352a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802352c:	07da      	lsls	r2, r3, #31
 802352e:	4605      	mov	r5, r0
 8023530:	d4e0      	bmi.n	80234f4 <_fflush_r+0xc>
 8023532:	89a3      	ldrh	r3, [r4, #12]
 8023534:	059b      	lsls	r3, r3, #22
 8023536:	d4dd      	bmi.n	80234f4 <_fflush_r+0xc>
 8023538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802353a:	f000 f91a 	bl	8023772 <__retarget_lock_release_recursive>
 802353e:	e7d9      	b.n	80234f4 <_fflush_r+0xc>
 8023540:	4b05      	ldr	r3, [pc, #20]	; (8023558 <_fflush_r+0x70>)
 8023542:	429c      	cmp	r4, r3
 8023544:	d101      	bne.n	802354a <_fflush_r+0x62>
 8023546:	68ac      	ldr	r4, [r5, #8]
 8023548:	e7df      	b.n	802350a <_fflush_r+0x22>
 802354a:	4b04      	ldr	r3, [pc, #16]	; (802355c <_fflush_r+0x74>)
 802354c:	429c      	cmp	r4, r3
 802354e:	bf08      	it	eq
 8023550:	68ec      	ldreq	r4, [r5, #12]
 8023552:	e7da      	b.n	802350a <_fflush_r+0x22>
 8023554:	080261bc 	.word	0x080261bc
 8023558:	080261dc 	.word	0x080261dc
 802355c:	0802619c 	.word	0x0802619c

08023560 <std>:
 8023560:	2300      	movs	r3, #0
 8023562:	b510      	push	{r4, lr}
 8023564:	4604      	mov	r4, r0
 8023566:	e9c0 3300 	strd	r3, r3, [r0]
 802356a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802356e:	6083      	str	r3, [r0, #8]
 8023570:	8181      	strh	r1, [r0, #12]
 8023572:	6643      	str	r3, [r0, #100]	; 0x64
 8023574:	81c2      	strh	r2, [r0, #14]
 8023576:	6183      	str	r3, [r0, #24]
 8023578:	4619      	mov	r1, r3
 802357a:	2208      	movs	r2, #8
 802357c:	305c      	adds	r0, #92	; 0x5c
 802357e:	f7fb ff5d 	bl	801f43c <memset>
 8023582:	4b05      	ldr	r3, [pc, #20]	; (8023598 <std+0x38>)
 8023584:	6263      	str	r3, [r4, #36]	; 0x24
 8023586:	4b05      	ldr	r3, [pc, #20]	; (802359c <std+0x3c>)
 8023588:	62a3      	str	r3, [r4, #40]	; 0x28
 802358a:	4b05      	ldr	r3, [pc, #20]	; (80235a0 <std+0x40>)
 802358c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802358e:	4b05      	ldr	r3, [pc, #20]	; (80235a4 <std+0x44>)
 8023590:	6224      	str	r4, [r4, #32]
 8023592:	6323      	str	r3, [r4, #48]	; 0x30
 8023594:	bd10      	pop	{r4, pc}
 8023596:	bf00      	nop
 8023598:	080203f5 	.word	0x080203f5
 802359c:	08020417 	.word	0x08020417
 80235a0:	0802044f 	.word	0x0802044f
 80235a4:	08020473 	.word	0x08020473

080235a8 <_cleanup_r>:
 80235a8:	4901      	ldr	r1, [pc, #4]	; (80235b0 <_cleanup_r+0x8>)
 80235aa:	f000 b8c1 	b.w	8023730 <_fwalk_reent>
 80235ae:	bf00      	nop
 80235b0:	080234e9 	.word	0x080234e9

080235b4 <__sfmoreglue>:
 80235b4:	b570      	push	{r4, r5, r6, lr}
 80235b6:	1e4a      	subs	r2, r1, #1
 80235b8:	2568      	movs	r5, #104	; 0x68
 80235ba:	4355      	muls	r5, r2
 80235bc:	460e      	mov	r6, r1
 80235be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80235c2:	f7fb ff93 	bl	801f4ec <_malloc_r>
 80235c6:	4604      	mov	r4, r0
 80235c8:	b140      	cbz	r0, 80235dc <__sfmoreglue+0x28>
 80235ca:	2100      	movs	r1, #0
 80235cc:	e9c0 1600 	strd	r1, r6, [r0]
 80235d0:	300c      	adds	r0, #12
 80235d2:	60a0      	str	r0, [r4, #8]
 80235d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80235d8:	f7fb ff30 	bl	801f43c <memset>
 80235dc:	4620      	mov	r0, r4
 80235de:	bd70      	pop	{r4, r5, r6, pc}

080235e0 <__sfp_lock_acquire>:
 80235e0:	4801      	ldr	r0, [pc, #4]	; (80235e8 <__sfp_lock_acquire+0x8>)
 80235e2:	f000 b8c5 	b.w	8023770 <__retarget_lock_acquire_recursive>
 80235e6:	bf00      	nop
 80235e8:	2000a958 	.word	0x2000a958

080235ec <__sfp_lock_release>:
 80235ec:	4801      	ldr	r0, [pc, #4]	; (80235f4 <__sfp_lock_release+0x8>)
 80235ee:	f000 b8c0 	b.w	8023772 <__retarget_lock_release_recursive>
 80235f2:	bf00      	nop
 80235f4:	2000a958 	.word	0x2000a958

080235f8 <__sinit_lock_acquire>:
 80235f8:	4801      	ldr	r0, [pc, #4]	; (8023600 <__sinit_lock_acquire+0x8>)
 80235fa:	f000 b8b9 	b.w	8023770 <__retarget_lock_acquire_recursive>
 80235fe:	bf00      	nop
 8023600:	2000a953 	.word	0x2000a953

08023604 <__sinit_lock_release>:
 8023604:	4801      	ldr	r0, [pc, #4]	; (802360c <__sinit_lock_release+0x8>)
 8023606:	f000 b8b4 	b.w	8023772 <__retarget_lock_release_recursive>
 802360a:	bf00      	nop
 802360c:	2000a953 	.word	0x2000a953

08023610 <__sinit>:
 8023610:	b510      	push	{r4, lr}
 8023612:	4604      	mov	r4, r0
 8023614:	f7ff fff0 	bl	80235f8 <__sinit_lock_acquire>
 8023618:	69a3      	ldr	r3, [r4, #24]
 802361a:	b11b      	cbz	r3, 8023624 <__sinit+0x14>
 802361c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023620:	f7ff bff0 	b.w	8023604 <__sinit_lock_release>
 8023624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023628:	6523      	str	r3, [r4, #80]	; 0x50
 802362a:	4b13      	ldr	r3, [pc, #76]	; (8023678 <__sinit+0x68>)
 802362c:	4a13      	ldr	r2, [pc, #76]	; (802367c <__sinit+0x6c>)
 802362e:	681b      	ldr	r3, [r3, #0]
 8023630:	62a2      	str	r2, [r4, #40]	; 0x28
 8023632:	42a3      	cmp	r3, r4
 8023634:	bf04      	itt	eq
 8023636:	2301      	moveq	r3, #1
 8023638:	61a3      	streq	r3, [r4, #24]
 802363a:	4620      	mov	r0, r4
 802363c:	f000 f820 	bl	8023680 <__sfp>
 8023640:	6060      	str	r0, [r4, #4]
 8023642:	4620      	mov	r0, r4
 8023644:	f000 f81c 	bl	8023680 <__sfp>
 8023648:	60a0      	str	r0, [r4, #8]
 802364a:	4620      	mov	r0, r4
 802364c:	f000 f818 	bl	8023680 <__sfp>
 8023650:	2200      	movs	r2, #0
 8023652:	60e0      	str	r0, [r4, #12]
 8023654:	2104      	movs	r1, #4
 8023656:	6860      	ldr	r0, [r4, #4]
 8023658:	f7ff ff82 	bl	8023560 <std>
 802365c:	68a0      	ldr	r0, [r4, #8]
 802365e:	2201      	movs	r2, #1
 8023660:	2109      	movs	r1, #9
 8023662:	f7ff ff7d 	bl	8023560 <std>
 8023666:	68e0      	ldr	r0, [r4, #12]
 8023668:	2202      	movs	r2, #2
 802366a:	2112      	movs	r1, #18
 802366c:	f7ff ff78 	bl	8023560 <std>
 8023670:	2301      	movs	r3, #1
 8023672:	61a3      	str	r3, [r4, #24]
 8023674:	e7d2      	b.n	802361c <__sinit+0xc>
 8023676:	bf00      	nop
 8023678:	08025d48 	.word	0x08025d48
 802367c:	080235a9 	.word	0x080235a9

08023680 <__sfp>:
 8023680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023682:	4607      	mov	r7, r0
 8023684:	f7ff ffac 	bl	80235e0 <__sfp_lock_acquire>
 8023688:	4b1e      	ldr	r3, [pc, #120]	; (8023704 <__sfp+0x84>)
 802368a:	681e      	ldr	r6, [r3, #0]
 802368c:	69b3      	ldr	r3, [r6, #24]
 802368e:	b913      	cbnz	r3, 8023696 <__sfp+0x16>
 8023690:	4630      	mov	r0, r6
 8023692:	f7ff ffbd 	bl	8023610 <__sinit>
 8023696:	3648      	adds	r6, #72	; 0x48
 8023698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802369c:	3b01      	subs	r3, #1
 802369e:	d503      	bpl.n	80236a8 <__sfp+0x28>
 80236a0:	6833      	ldr	r3, [r6, #0]
 80236a2:	b30b      	cbz	r3, 80236e8 <__sfp+0x68>
 80236a4:	6836      	ldr	r6, [r6, #0]
 80236a6:	e7f7      	b.n	8023698 <__sfp+0x18>
 80236a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80236ac:	b9d5      	cbnz	r5, 80236e4 <__sfp+0x64>
 80236ae:	4b16      	ldr	r3, [pc, #88]	; (8023708 <__sfp+0x88>)
 80236b0:	60e3      	str	r3, [r4, #12]
 80236b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80236b6:	6665      	str	r5, [r4, #100]	; 0x64
 80236b8:	f000 f859 	bl	802376e <__retarget_lock_init_recursive>
 80236bc:	f7ff ff96 	bl	80235ec <__sfp_lock_release>
 80236c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80236c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80236c8:	6025      	str	r5, [r4, #0]
 80236ca:	61a5      	str	r5, [r4, #24]
 80236cc:	2208      	movs	r2, #8
 80236ce:	4629      	mov	r1, r5
 80236d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80236d4:	f7fb feb2 	bl	801f43c <memset>
 80236d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80236dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80236e0:	4620      	mov	r0, r4
 80236e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80236e4:	3468      	adds	r4, #104	; 0x68
 80236e6:	e7d9      	b.n	802369c <__sfp+0x1c>
 80236e8:	2104      	movs	r1, #4
 80236ea:	4638      	mov	r0, r7
 80236ec:	f7ff ff62 	bl	80235b4 <__sfmoreglue>
 80236f0:	4604      	mov	r4, r0
 80236f2:	6030      	str	r0, [r6, #0]
 80236f4:	2800      	cmp	r0, #0
 80236f6:	d1d5      	bne.n	80236a4 <__sfp+0x24>
 80236f8:	f7ff ff78 	bl	80235ec <__sfp_lock_release>
 80236fc:	230c      	movs	r3, #12
 80236fe:	603b      	str	r3, [r7, #0]
 8023700:	e7ee      	b.n	80236e0 <__sfp+0x60>
 8023702:	bf00      	nop
 8023704:	08025d48 	.word	0x08025d48
 8023708:	ffff0001 	.word	0xffff0001

0802370c <fiprintf>:
 802370c:	b40e      	push	{r1, r2, r3}
 802370e:	b503      	push	{r0, r1, lr}
 8023710:	4601      	mov	r1, r0
 8023712:	ab03      	add	r3, sp, #12
 8023714:	4805      	ldr	r0, [pc, #20]	; (802372c <fiprintf+0x20>)
 8023716:	f853 2b04 	ldr.w	r2, [r3], #4
 802371a:	6800      	ldr	r0, [r0, #0]
 802371c:	9301      	str	r3, [sp, #4]
 802371e:	f000 f875 	bl	802380c <_vfiprintf_r>
 8023722:	b002      	add	sp, #8
 8023724:	f85d eb04 	ldr.w	lr, [sp], #4
 8023728:	b003      	add	sp, #12
 802372a:	4770      	bx	lr
 802372c:	200000c4 	.word	0x200000c4

08023730 <_fwalk_reent>:
 8023730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023734:	4606      	mov	r6, r0
 8023736:	4688      	mov	r8, r1
 8023738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802373c:	2700      	movs	r7, #0
 802373e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023742:	f1b9 0901 	subs.w	r9, r9, #1
 8023746:	d505      	bpl.n	8023754 <_fwalk_reent+0x24>
 8023748:	6824      	ldr	r4, [r4, #0]
 802374a:	2c00      	cmp	r4, #0
 802374c:	d1f7      	bne.n	802373e <_fwalk_reent+0xe>
 802374e:	4638      	mov	r0, r7
 8023750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023754:	89ab      	ldrh	r3, [r5, #12]
 8023756:	2b01      	cmp	r3, #1
 8023758:	d907      	bls.n	802376a <_fwalk_reent+0x3a>
 802375a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802375e:	3301      	adds	r3, #1
 8023760:	d003      	beq.n	802376a <_fwalk_reent+0x3a>
 8023762:	4629      	mov	r1, r5
 8023764:	4630      	mov	r0, r6
 8023766:	47c0      	blx	r8
 8023768:	4307      	orrs	r7, r0
 802376a:	3568      	adds	r5, #104	; 0x68
 802376c:	e7e9      	b.n	8023742 <_fwalk_reent+0x12>

0802376e <__retarget_lock_init_recursive>:
 802376e:	4770      	bx	lr

08023770 <__retarget_lock_acquire_recursive>:
 8023770:	4770      	bx	lr

08023772 <__retarget_lock_release_recursive>:
 8023772:	4770      	bx	lr

08023774 <memmove>:
 8023774:	4288      	cmp	r0, r1
 8023776:	b510      	push	{r4, lr}
 8023778:	eb01 0402 	add.w	r4, r1, r2
 802377c:	d902      	bls.n	8023784 <memmove+0x10>
 802377e:	4284      	cmp	r4, r0
 8023780:	4623      	mov	r3, r4
 8023782:	d807      	bhi.n	8023794 <memmove+0x20>
 8023784:	1e43      	subs	r3, r0, #1
 8023786:	42a1      	cmp	r1, r4
 8023788:	d008      	beq.n	802379c <memmove+0x28>
 802378a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802378e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023792:	e7f8      	b.n	8023786 <memmove+0x12>
 8023794:	4402      	add	r2, r0
 8023796:	4601      	mov	r1, r0
 8023798:	428a      	cmp	r2, r1
 802379a:	d100      	bne.n	802379e <memmove+0x2a>
 802379c:	bd10      	pop	{r4, pc}
 802379e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80237a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80237a6:	e7f7      	b.n	8023798 <memmove+0x24>

080237a8 <_malloc_usable_size_r>:
 80237a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80237ac:	1f18      	subs	r0, r3, #4
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	bfbc      	itt	lt
 80237b2:	580b      	ldrlt	r3, [r1, r0]
 80237b4:	18c0      	addlt	r0, r0, r3
 80237b6:	4770      	bx	lr

080237b8 <__sfputc_r>:
 80237b8:	6893      	ldr	r3, [r2, #8]
 80237ba:	3b01      	subs	r3, #1
 80237bc:	2b00      	cmp	r3, #0
 80237be:	b410      	push	{r4}
 80237c0:	6093      	str	r3, [r2, #8]
 80237c2:	da08      	bge.n	80237d6 <__sfputc_r+0x1e>
 80237c4:	6994      	ldr	r4, [r2, #24]
 80237c6:	42a3      	cmp	r3, r4
 80237c8:	db01      	blt.n	80237ce <__sfputc_r+0x16>
 80237ca:	290a      	cmp	r1, #10
 80237cc:	d103      	bne.n	80237d6 <__sfputc_r+0x1e>
 80237ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237d2:	f000 b94b 	b.w	8023a6c <__swbuf_r>
 80237d6:	6813      	ldr	r3, [r2, #0]
 80237d8:	1c58      	adds	r0, r3, #1
 80237da:	6010      	str	r0, [r2, #0]
 80237dc:	7019      	strb	r1, [r3, #0]
 80237de:	4608      	mov	r0, r1
 80237e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237e4:	4770      	bx	lr

080237e6 <__sfputs_r>:
 80237e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237e8:	4606      	mov	r6, r0
 80237ea:	460f      	mov	r7, r1
 80237ec:	4614      	mov	r4, r2
 80237ee:	18d5      	adds	r5, r2, r3
 80237f0:	42ac      	cmp	r4, r5
 80237f2:	d101      	bne.n	80237f8 <__sfputs_r+0x12>
 80237f4:	2000      	movs	r0, #0
 80237f6:	e007      	b.n	8023808 <__sfputs_r+0x22>
 80237f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237fc:	463a      	mov	r2, r7
 80237fe:	4630      	mov	r0, r6
 8023800:	f7ff ffda 	bl	80237b8 <__sfputc_r>
 8023804:	1c43      	adds	r3, r0, #1
 8023806:	d1f3      	bne.n	80237f0 <__sfputs_r+0xa>
 8023808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802380c <_vfiprintf_r>:
 802380c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023810:	460d      	mov	r5, r1
 8023812:	b09d      	sub	sp, #116	; 0x74
 8023814:	4614      	mov	r4, r2
 8023816:	4698      	mov	r8, r3
 8023818:	4606      	mov	r6, r0
 802381a:	b118      	cbz	r0, 8023824 <_vfiprintf_r+0x18>
 802381c:	6983      	ldr	r3, [r0, #24]
 802381e:	b90b      	cbnz	r3, 8023824 <_vfiprintf_r+0x18>
 8023820:	f7ff fef6 	bl	8023610 <__sinit>
 8023824:	4b89      	ldr	r3, [pc, #548]	; (8023a4c <_vfiprintf_r+0x240>)
 8023826:	429d      	cmp	r5, r3
 8023828:	d11b      	bne.n	8023862 <_vfiprintf_r+0x56>
 802382a:	6875      	ldr	r5, [r6, #4]
 802382c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802382e:	07d9      	lsls	r1, r3, #31
 8023830:	d405      	bmi.n	802383e <_vfiprintf_r+0x32>
 8023832:	89ab      	ldrh	r3, [r5, #12]
 8023834:	059a      	lsls	r2, r3, #22
 8023836:	d402      	bmi.n	802383e <_vfiprintf_r+0x32>
 8023838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802383a:	f7ff ff99 	bl	8023770 <__retarget_lock_acquire_recursive>
 802383e:	89ab      	ldrh	r3, [r5, #12]
 8023840:	071b      	lsls	r3, r3, #28
 8023842:	d501      	bpl.n	8023848 <_vfiprintf_r+0x3c>
 8023844:	692b      	ldr	r3, [r5, #16]
 8023846:	b9eb      	cbnz	r3, 8023884 <_vfiprintf_r+0x78>
 8023848:	4629      	mov	r1, r5
 802384a:	4630      	mov	r0, r6
 802384c:	f000 f960 	bl	8023b10 <__swsetup_r>
 8023850:	b1c0      	cbz	r0, 8023884 <_vfiprintf_r+0x78>
 8023852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023854:	07dc      	lsls	r4, r3, #31
 8023856:	d50e      	bpl.n	8023876 <_vfiprintf_r+0x6a>
 8023858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802385c:	b01d      	add	sp, #116	; 0x74
 802385e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023862:	4b7b      	ldr	r3, [pc, #492]	; (8023a50 <_vfiprintf_r+0x244>)
 8023864:	429d      	cmp	r5, r3
 8023866:	d101      	bne.n	802386c <_vfiprintf_r+0x60>
 8023868:	68b5      	ldr	r5, [r6, #8]
 802386a:	e7df      	b.n	802382c <_vfiprintf_r+0x20>
 802386c:	4b79      	ldr	r3, [pc, #484]	; (8023a54 <_vfiprintf_r+0x248>)
 802386e:	429d      	cmp	r5, r3
 8023870:	bf08      	it	eq
 8023872:	68f5      	ldreq	r5, [r6, #12]
 8023874:	e7da      	b.n	802382c <_vfiprintf_r+0x20>
 8023876:	89ab      	ldrh	r3, [r5, #12]
 8023878:	0598      	lsls	r0, r3, #22
 802387a:	d4ed      	bmi.n	8023858 <_vfiprintf_r+0x4c>
 802387c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802387e:	f7ff ff78 	bl	8023772 <__retarget_lock_release_recursive>
 8023882:	e7e9      	b.n	8023858 <_vfiprintf_r+0x4c>
 8023884:	2300      	movs	r3, #0
 8023886:	9309      	str	r3, [sp, #36]	; 0x24
 8023888:	2320      	movs	r3, #32
 802388a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802388e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023892:	2330      	movs	r3, #48	; 0x30
 8023894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023a58 <_vfiprintf_r+0x24c>
 8023898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802389c:	f04f 0901 	mov.w	r9, #1
 80238a0:	4623      	mov	r3, r4
 80238a2:	469a      	mov	sl, r3
 80238a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80238a8:	b10a      	cbz	r2, 80238ae <_vfiprintf_r+0xa2>
 80238aa:	2a25      	cmp	r2, #37	; 0x25
 80238ac:	d1f9      	bne.n	80238a2 <_vfiprintf_r+0x96>
 80238ae:	ebba 0b04 	subs.w	fp, sl, r4
 80238b2:	d00b      	beq.n	80238cc <_vfiprintf_r+0xc0>
 80238b4:	465b      	mov	r3, fp
 80238b6:	4622      	mov	r2, r4
 80238b8:	4629      	mov	r1, r5
 80238ba:	4630      	mov	r0, r6
 80238bc:	f7ff ff93 	bl	80237e6 <__sfputs_r>
 80238c0:	3001      	adds	r0, #1
 80238c2:	f000 80aa 	beq.w	8023a1a <_vfiprintf_r+0x20e>
 80238c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80238c8:	445a      	add	r2, fp
 80238ca:	9209      	str	r2, [sp, #36]	; 0x24
 80238cc:	f89a 3000 	ldrb.w	r3, [sl]
 80238d0:	2b00      	cmp	r3, #0
 80238d2:	f000 80a2 	beq.w	8023a1a <_vfiprintf_r+0x20e>
 80238d6:	2300      	movs	r3, #0
 80238d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80238dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238e0:	f10a 0a01 	add.w	sl, sl, #1
 80238e4:	9304      	str	r3, [sp, #16]
 80238e6:	9307      	str	r3, [sp, #28]
 80238e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80238ec:	931a      	str	r3, [sp, #104]	; 0x68
 80238ee:	4654      	mov	r4, sl
 80238f0:	2205      	movs	r2, #5
 80238f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238f6:	4858      	ldr	r0, [pc, #352]	; (8023a58 <_vfiprintf_r+0x24c>)
 80238f8:	f7dc fc72 	bl	80001e0 <memchr>
 80238fc:	9a04      	ldr	r2, [sp, #16]
 80238fe:	b9d8      	cbnz	r0, 8023938 <_vfiprintf_r+0x12c>
 8023900:	06d1      	lsls	r1, r2, #27
 8023902:	bf44      	itt	mi
 8023904:	2320      	movmi	r3, #32
 8023906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802390a:	0713      	lsls	r3, r2, #28
 802390c:	bf44      	itt	mi
 802390e:	232b      	movmi	r3, #43	; 0x2b
 8023910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023914:	f89a 3000 	ldrb.w	r3, [sl]
 8023918:	2b2a      	cmp	r3, #42	; 0x2a
 802391a:	d015      	beq.n	8023948 <_vfiprintf_r+0x13c>
 802391c:	9a07      	ldr	r2, [sp, #28]
 802391e:	4654      	mov	r4, sl
 8023920:	2000      	movs	r0, #0
 8023922:	f04f 0c0a 	mov.w	ip, #10
 8023926:	4621      	mov	r1, r4
 8023928:	f811 3b01 	ldrb.w	r3, [r1], #1
 802392c:	3b30      	subs	r3, #48	; 0x30
 802392e:	2b09      	cmp	r3, #9
 8023930:	d94e      	bls.n	80239d0 <_vfiprintf_r+0x1c4>
 8023932:	b1b0      	cbz	r0, 8023962 <_vfiprintf_r+0x156>
 8023934:	9207      	str	r2, [sp, #28]
 8023936:	e014      	b.n	8023962 <_vfiprintf_r+0x156>
 8023938:	eba0 0308 	sub.w	r3, r0, r8
 802393c:	fa09 f303 	lsl.w	r3, r9, r3
 8023940:	4313      	orrs	r3, r2
 8023942:	9304      	str	r3, [sp, #16]
 8023944:	46a2      	mov	sl, r4
 8023946:	e7d2      	b.n	80238ee <_vfiprintf_r+0xe2>
 8023948:	9b03      	ldr	r3, [sp, #12]
 802394a:	1d19      	adds	r1, r3, #4
 802394c:	681b      	ldr	r3, [r3, #0]
 802394e:	9103      	str	r1, [sp, #12]
 8023950:	2b00      	cmp	r3, #0
 8023952:	bfbb      	ittet	lt
 8023954:	425b      	neglt	r3, r3
 8023956:	f042 0202 	orrlt.w	r2, r2, #2
 802395a:	9307      	strge	r3, [sp, #28]
 802395c:	9307      	strlt	r3, [sp, #28]
 802395e:	bfb8      	it	lt
 8023960:	9204      	strlt	r2, [sp, #16]
 8023962:	7823      	ldrb	r3, [r4, #0]
 8023964:	2b2e      	cmp	r3, #46	; 0x2e
 8023966:	d10c      	bne.n	8023982 <_vfiprintf_r+0x176>
 8023968:	7863      	ldrb	r3, [r4, #1]
 802396a:	2b2a      	cmp	r3, #42	; 0x2a
 802396c:	d135      	bne.n	80239da <_vfiprintf_r+0x1ce>
 802396e:	9b03      	ldr	r3, [sp, #12]
 8023970:	1d1a      	adds	r2, r3, #4
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	9203      	str	r2, [sp, #12]
 8023976:	2b00      	cmp	r3, #0
 8023978:	bfb8      	it	lt
 802397a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802397e:	3402      	adds	r4, #2
 8023980:	9305      	str	r3, [sp, #20]
 8023982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023a68 <_vfiprintf_r+0x25c>
 8023986:	7821      	ldrb	r1, [r4, #0]
 8023988:	2203      	movs	r2, #3
 802398a:	4650      	mov	r0, sl
 802398c:	f7dc fc28 	bl	80001e0 <memchr>
 8023990:	b140      	cbz	r0, 80239a4 <_vfiprintf_r+0x198>
 8023992:	2340      	movs	r3, #64	; 0x40
 8023994:	eba0 000a 	sub.w	r0, r0, sl
 8023998:	fa03 f000 	lsl.w	r0, r3, r0
 802399c:	9b04      	ldr	r3, [sp, #16]
 802399e:	4303      	orrs	r3, r0
 80239a0:	3401      	adds	r4, #1
 80239a2:	9304      	str	r3, [sp, #16]
 80239a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239a8:	482c      	ldr	r0, [pc, #176]	; (8023a5c <_vfiprintf_r+0x250>)
 80239aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80239ae:	2206      	movs	r2, #6
 80239b0:	f7dc fc16 	bl	80001e0 <memchr>
 80239b4:	2800      	cmp	r0, #0
 80239b6:	d03f      	beq.n	8023a38 <_vfiprintf_r+0x22c>
 80239b8:	4b29      	ldr	r3, [pc, #164]	; (8023a60 <_vfiprintf_r+0x254>)
 80239ba:	bb1b      	cbnz	r3, 8023a04 <_vfiprintf_r+0x1f8>
 80239bc:	9b03      	ldr	r3, [sp, #12]
 80239be:	3307      	adds	r3, #7
 80239c0:	f023 0307 	bic.w	r3, r3, #7
 80239c4:	3308      	adds	r3, #8
 80239c6:	9303      	str	r3, [sp, #12]
 80239c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239ca:	443b      	add	r3, r7
 80239cc:	9309      	str	r3, [sp, #36]	; 0x24
 80239ce:	e767      	b.n	80238a0 <_vfiprintf_r+0x94>
 80239d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80239d4:	460c      	mov	r4, r1
 80239d6:	2001      	movs	r0, #1
 80239d8:	e7a5      	b.n	8023926 <_vfiprintf_r+0x11a>
 80239da:	2300      	movs	r3, #0
 80239dc:	3401      	adds	r4, #1
 80239de:	9305      	str	r3, [sp, #20]
 80239e0:	4619      	mov	r1, r3
 80239e2:	f04f 0c0a 	mov.w	ip, #10
 80239e6:	4620      	mov	r0, r4
 80239e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239ec:	3a30      	subs	r2, #48	; 0x30
 80239ee:	2a09      	cmp	r2, #9
 80239f0:	d903      	bls.n	80239fa <_vfiprintf_r+0x1ee>
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d0c5      	beq.n	8023982 <_vfiprintf_r+0x176>
 80239f6:	9105      	str	r1, [sp, #20]
 80239f8:	e7c3      	b.n	8023982 <_vfiprintf_r+0x176>
 80239fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80239fe:	4604      	mov	r4, r0
 8023a00:	2301      	movs	r3, #1
 8023a02:	e7f0      	b.n	80239e6 <_vfiprintf_r+0x1da>
 8023a04:	ab03      	add	r3, sp, #12
 8023a06:	9300      	str	r3, [sp, #0]
 8023a08:	462a      	mov	r2, r5
 8023a0a:	4b16      	ldr	r3, [pc, #88]	; (8023a64 <_vfiprintf_r+0x258>)
 8023a0c:	a904      	add	r1, sp, #16
 8023a0e:	4630      	mov	r0, r6
 8023a10:	f7fb fe66 	bl	801f6e0 <_printf_float>
 8023a14:	4607      	mov	r7, r0
 8023a16:	1c78      	adds	r0, r7, #1
 8023a18:	d1d6      	bne.n	80239c8 <_vfiprintf_r+0x1bc>
 8023a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a1c:	07d9      	lsls	r1, r3, #31
 8023a1e:	d405      	bmi.n	8023a2c <_vfiprintf_r+0x220>
 8023a20:	89ab      	ldrh	r3, [r5, #12]
 8023a22:	059a      	lsls	r2, r3, #22
 8023a24:	d402      	bmi.n	8023a2c <_vfiprintf_r+0x220>
 8023a26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a28:	f7ff fea3 	bl	8023772 <__retarget_lock_release_recursive>
 8023a2c:	89ab      	ldrh	r3, [r5, #12]
 8023a2e:	065b      	lsls	r3, r3, #25
 8023a30:	f53f af12 	bmi.w	8023858 <_vfiprintf_r+0x4c>
 8023a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a36:	e711      	b.n	802385c <_vfiprintf_r+0x50>
 8023a38:	ab03      	add	r3, sp, #12
 8023a3a:	9300      	str	r3, [sp, #0]
 8023a3c:	462a      	mov	r2, r5
 8023a3e:	4b09      	ldr	r3, [pc, #36]	; (8023a64 <_vfiprintf_r+0x258>)
 8023a40:	a904      	add	r1, sp, #16
 8023a42:	4630      	mov	r0, r6
 8023a44:	f7fc f8f0 	bl	801fc28 <_printf_i>
 8023a48:	e7e4      	b.n	8023a14 <_vfiprintf_r+0x208>
 8023a4a:	bf00      	nop
 8023a4c:	080261bc 	.word	0x080261bc
 8023a50:	080261dc 	.word	0x080261dc
 8023a54:	0802619c 	.word	0x0802619c
 8023a58:	0802614c 	.word	0x0802614c
 8023a5c:	08026156 	.word	0x08026156
 8023a60:	0801f6e1 	.word	0x0801f6e1
 8023a64:	080237e7 	.word	0x080237e7
 8023a68:	08026152 	.word	0x08026152

08023a6c <__swbuf_r>:
 8023a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a6e:	460e      	mov	r6, r1
 8023a70:	4614      	mov	r4, r2
 8023a72:	4605      	mov	r5, r0
 8023a74:	b118      	cbz	r0, 8023a7e <__swbuf_r+0x12>
 8023a76:	6983      	ldr	r3, [r0, #24]
 8023a78:	b90b      	cbnz	r3, 8023a7e <__swbuf_r+0x12>
 8023a7a:	f7ff fdc9 	bl	8023610 <__sinit>
 8023a7e:	4b21      	ldr	r3, [pc, #132]	; (8023b04 <__swbuf_r+0x98>)
 8023a80:	429c      	cmp	r4, r3
 8023a82:	d12b      	bne.n	8023adc <__swbuf_r+0x70>
 8023a84:	686c      	ldr	r4, [r5, #4]
 8023a86:	69a3      	ldr	r3, [r4, #24]
 8023a88:	60a3      	str	r3, [r4, #8]
 8023a8a:	89a3      	ldrh	r3, [r4, #12]
 8023a8c:	071a      	lsls	r2, r3, #28
 8023a8e:	d52f      	bpl.n	8023af0 <__swbuf_r+0x84>
 8023a90:	6923      	ldr	r3, [r4, #16]
 8023a92:	b36b      	cbz	r3, 8023af0 <__swbuf_r+0x84>
 8023a94:	6923      	ldr	r3, [r4, #16]
 8023a96:	6820      	ldr	r0, [r4, #0]
 8023a98:	1ac0      	subs	r0, r0, r3
 8023a9a:	6963      	ldr	r3, [r4, #20]
 8023a9c:	b2f6      	uxtb	r6, r6
 8023a9e:	4283      	cmp	r3, r0
 8023aa0:	4637      	mov	r7, r6
 8023aa2:	dc04      	bgt.n	8023aae <__swbuf_r+0x42>
 8023aa4:	4621      	mov	r1, r4
 8023aa6:	4628      	mov	r0, r5
 8023aa8:	f7ff fd1e 	bl	80234e8 <_fflush_r>
 8023aac:	bb30      	cbnz	r0, 8023afc <__swbuf_r+0x90>
 8023aae:	68a3      	ldr	r3, [r4, #8]
 8023ab0:	3b01      	subs	r3, #1
 8023ab2:	60a3      	str	r3, [r4, #8]
 8023ab4:	6823      	ldr	r3, [r4, #0]
 8023ab6:	1c5a      	adds	r2, r3, #1
 8023ab8:	6022      	str	r2, [r4, #0]
 8023aba:	701e      	strb	r6, [r3, #0]
 8023abc:	6963      	ldr	r3, [r4, #20]
 8023abe:	3001      	adds	r0, #1
 8023ac0:	4283      	cmp	r3, r0
 8023ac2:	d004      	beq.n	8023ace <__swbuf_r+0x62>
 8023ac4:	89a3      	ldrh	r3, [r4, #12]
 8023ac6:	07db      	lsls	r3, r3, #31
 8023ac8:	d506      	bpl.n	8023ad8 <__swbuf_r+0x6c>
 8023aca:	2e0a      	cmp	r6, #10
 8023acc:	d104      	bne.n	8023ad8 <__swbuf_r+0x6c>
 8023ace:	4621      	mov	r1, r4
 8023ad0:	4628      	mov	r0, r5
 8023ad2:	f7ff fd09 	bl	80234e8 <_fflush_r>
 8023ad6:	b988      	cbnz	r0, 8023afc <__swbuf_r+0x90>
 8023ad8:	4638      	mov	r0, r7
 8023ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023adc:	4b0a      	ldr	r3, [pc, #40]	; (8023b08 <__swbuf_r+0x9c>)
 8023ade:	429c      	cmp	r4, r3
 8023ae0:	d101      	bne.n	8023ae6 <__swbuf_r+0x7a>
 8023ae2:	68ac      	ldr	r4, [r5, #8]
 8023ae4:	e7cf      	b.n	8023a86 <__swbuf_r+0x1a>
 8023ae6:	4b09      	ldr	r3, [pc, #36]	; (8023b0c <__swbuf_r+0xa0>)
 8023ae8:	429c      	cmp	r4, r3
 8023aea:	bf08      	it	eq
 8023aec:	68ec      	ldreq	r4, [r5, #12]
 8023aee:	e7ca      	b.n	8023a86 <__swbuf_r+0x1a>
 8023af0:	4621      	mov	r1, r4
 8023af2:	4628      	mov	r0, r5
 8023af4:	f000 f80c 	bl	8023b10 <__swsetup_r>
 8023af8:	2800      	cmp	r0, #0
 8023afa:	d0cb      	beq.n	8023a94 <__swbuf_r+0x28>
 8023afc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023b00:	e7ea      	b.n	8023ad8 <__swbuf_r+0x6c>
 8023b02:	bf00      	nop
 8023b04:	080261bc 	.word	0x080261bc
 8023b08:	080261dc 	.word	0x080261dc
 8023b0c:	0802619c 	.word	0x0802619c

08023b10 <__swsetup_r>:
 8023b10:	4b32      	ldr	r3, [pc, #200]	; (8023bdc <__swsetup_r+0xcc>)
 8023b12:	b570      	push	{r4, r5, r6, lr}
 8023b14:	681d      	ldr	r5, [r3, #0]
 8023b16:	4606      	mov	r6, r0
 8023b18:	460c      	mov	r4, r1
 8023b1a:	b125      	cbz	r5, 8023b26 <__swsetup_r+0x16>
 8023b1c:	69ab      	ldr	r3, [r5, #24]
 8023b1e:	b913      	cbnz	r3, 8023b26 <__swsetup_r+0x16>
 8023b20:	4628      	mov	r0, r5
 8023b22:	f7ff fd75 	bl	8023610 <__sinit>
 8023b26:	4b2e      	ldr	r3, [pc, #184]	; (8023be0 <__swsetup_r+0xd0>)
 8023b28:	429c      	cmp	r4, r3
 8023b2a:	d10f      	bne.n	8023b4c <__swsetup_r+0x3c>
 8023b2c:	686c      	ldr	r4, [r5, #4]
 8023b2e:	89a3      	ldrh	r3, [r4, #12]
 8023b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b34:	0719      	lsls	r1, r3, #28
 8023b36:	d42c      	bmi.n	8023b92 <__swsetup_r+0x82>
 8023b38:	06dd      	lsls	r5, r3, #27
 8023b3a:	d411      	bmi.n	8023b60 <__swsetup_r+0x50>
 8023b3c:	2309      	movs	r3, #9
 8023b3e:	6033      	str	r3, [r6, #0]
 8023b40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023b44:	81a3      	strh	r3, [r4, #12]
 8023b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023b4a:	e03e      	b.n	8023bca <__swsetup_r+0xba>
 8023b4c:	4b25      	ldr	r3, [pc, #148]	; (8023be4 <__swsetup_r+0xd4>)
 8023b4e:	429c      	cmp	r4, r3
 8023b50:	d101      	bne.n	8023b56 <__swsetup_r+0x46>
 8023b52:	68ac      	ldr	r4, [r5, #8]
 8023b54:	e7eb      	b.n	8023b2e <__swsetup_r+0x1e>
 8023b56:	4b24      	ldr	r3, [pc, #144]	; (8023be8 <__swsetup_r+0xd8>)
 8023b58:	429c      	cmp	r4, r3
 8023b5a:	bf08      	it	eq
 8023b5c:	68ec      	ldreq	r4, [r5, #12]
 8023b5e:	e7e6      	b.n	8023b2e <__swsetup_r+0x1e>
 8023b60:	0758      	lsls	r0, r3, #29
 8023b62:	d512      	bpl.n	8023b8a <__swsetup_r+0x7a>
 8023b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023b66:	b141      	cbz	r1, 8023b7a <__swsetup_r+0x6a>
 8023b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023b6c:	4299      	cmp	r1, r3
 8023b6e:	d002      	beq.n	8023b76 <__swsetup_r+0x66>
 8023b70:	4630      	mov	r0, r6
 8023b72:	f7fb fc6b 	bl	801f44c <_free_r>
 8023b76:	2300      	movs	r3, #0
 8023b78:	6363      	str	r3, [r4, #52]	; 0x34
 8023b7a:	89a3      	ldrh	r3, [r4, #12]
 8023b7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023b80:	81a3      	strh	r3, [r4, #12]
 8023b82:	2300      	movs	r3, #0
 8023b84:	6063      	str	r3, [r4, #4]
 8023b86:	6923      	ldr	r3, [r4, #16]
 8023b88:	6023      	str	r3, [r4, #0]
 8023b8a:	89a3      	ldrh	r3, [r4, #12]
 8023b8c:	f043 0308 	orr.w	r3, r3, #8
 8023b90:	81a3      	strh	r3, [r4, #12]
 8023b92:	6923      	ldr	r3, [r4, #16]
 8023b94:	b94b      	cbnz	r3, 8023baa <__swsetup_r+0x9a>
 8023b96:	89a3      	ldrh	r3, [r4, #12]
 8023b98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023ba0:	d003      	beq.n	8023baa <__swsetup_r+0x9a>
 8023ba2:	4621      	mov	r1, r4
 8023ba4:	4630      	mov	r0, r6
 8023ba6:	f000 f84d 	bl	8023c44 <__smakebuf_r>
 8023baa:	89a0      	ldrh	r0, [r4, #12]
 8023bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023bb0:	f010 0301 	ands.w	r3, r0, #1
 8023bb4:	d00a      	beq.n	8023bcc <__swsetup_r+0xbc>
 8023bb6:	2300      	movs	r3, #0
 8023bb8:	60a3      	str	r3, [r4, #8]
 8023bba:	6963      	ldr	r3, [r4, #20]
 8023bbc:	425b      	negs	r3, r3
 8023bbe:	61a3      	str	r3, [r4, #24]
 8023bc0:	6923      	ldr	r3, [r4, #16]
 8023bc2:	b943      	cbnz	r3, 8023bd6 <__swsetup_r+0xc6>
 8023bc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023bc8:	d1ba      	bne.n	8023b40 <__swsetup_r+0x30>
 8023bca:	bd70      	pop	{r4, r5, r6, pc}
 8023bcc:	0781      	lsls	r1, r0, #30
 8023bce:	bf58      	it	pl
 8023bd0:	6963      	ldrpl	r3, [r4, #20]
 8023bd2:	60a3      	str	r3, [r4, #8]
 8023bd4:	e7f4      	b.n	8023bc0 <__swsetup_r+0xb0>
 8023bd6:	2000      	movs	r0, #0
 8023bd8:	e7f7      	b.n	8023bca <__swsetup_r+0xba>
 8023bda:	bf00      	nop
 8023bdc:	200000c4 	.word	0x200000c4
 8023be0:	080261bc 	.word	0x080261bc
 8023be4:	080261dc 	.word	0x080261dc
 8023be8:	0802619c 	.word	0x0802619c

08023bec <abort>:
 8023bec:	b508      	push	{r3, lr}
 8023bee:	2006      	movs	r0, #6
 8023bf0:	f000 f890 	bl	8023d14 <raise>
 8023bf4:	2001      	movs	r0, #1
 8023bf6:	f7eb f8eb 	bl	800edd0 <_exit>

08023bfa <__swhatbuf_r>:
 8023bfa:	b570      	push	{r4, r5, r6, lr}
 8023bfc:	460e      	mov	r6, r1
 8023bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023c02:	2900      	cmp	r1, #0
 8023c04:	b096      	sub	sp, #88	; 0x58
 8023c06:	4614      	mov	r4, r2
 8023c08:	461d      	mov	r5, r3
 8023c0a:	da07      	bge.n	8023c1c <__swhatbuf_r+0x22>
 8023c0c:	2300      	movs	r3, #0
 8023c0e:	602b      	str	r3, [r5, #0]
 8023c10:	89b3      	ldrh	r3, [r6, #12]
 8023c12:	061a      	lsls	r2, r3, #24
 8023c14:	d410      	bmi.n	8023c38 <__swhatbuf_r+0x3e>
 8023c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023c1a:	e00e      	b.n	8023c3a <__swhatbuf_r+0x40>
 8023c1c:	466a      	mov	r2, sp
 8023c1e:	f000 f895 	bl	8023d4c <_fstat_r>
 8023c22:	2800      	cmp	r0, #0
 8023c24:	dbf2      	blt.n	8023c0c <__swhatbuf_r+0x12>
 8023c26:	9a01      	ldr	r2, [sp, #4]
 8023c28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023c2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023c30:	425a      	negs	r2, r3
 8023c32:	415a      	adcs	r2, r3
 8023c34:	602a      	str	r2, [r5, #0]
 8023c36:	e7ee      	b.n	8023c16 <__swhatbuf_r+0x1c>
 8023c38:	2340      	movs	r3, #64	; 0x40
 8023c3a:	2000      	movs	r0, #0
 8023c3c:	6023      	str	r3, [r4, #0]
 8023c3e:	b016      	add	sp, #88	; 0x58
 8023c40:	bd70      	pop	{r4, r5, r6, pc}
	...

08023c44 <__smakebuf_r>:
 8023c44:	898b      	ldrh	r3, [r1, #12]
 8023c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023c48:	079d      	lsls	r5, r3, #30
 8023c4a:	4606      	mov	r6, r0
 8023c4c:	460c      	mov	r4, r1
 8023c4e:	d507      	bpl.n	8023c60 <__smakebuf_r+0x1c>
 8023c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023c54:	6023      	str	r3, [r4, #0]
 8023c56:	6123      	str	r3, [r4, #16]
 8023c58:	2301      	movs	r3, #1
 8023c5a:	6163      	str	r3, [r4, #20]
 8023c5c:	b002      	add	sp, #8
 8023c5e:	bd70      	pop	{r4, r5, r6, pc}
 8023c60:	ab01      	add	r3, sp, #4
 8023c62:	466a      	mov	r2, sp
 8023c64:	f7ff ffc9 	bl	8023bfa <__swhatbuf_r>
 8023c68:	9900      	ldr	r1, [sp, #0]
 8023c6a:	4605      	mov	r5, r0
 8023c6c:	4630      	mov	r0, r6
 8023c6e:	f7fb fc3d 	bl	801f4ec <_malloc_r>
 8023c72:	b948      	cbnz	r0, 8023c88 <__smakebuf_r+0x44>
 8023c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023c78:	059a      	lsls	r2, r3, #22
 8023c7a:	d4ef      	bmi.n	8023c5c <__smakebuf_r+0x18>
 8023c7c:	f023 0303 	bic.w	r3, r3, #3
 8023c80:	f043 0302 	orr.w	r3, r3, #2
 8023c84:	81a3      	strh	r3, [r4, #12]
 8023c86:	e7e3      	b.n	8023c50 <__smakebuf_r+0xc>
 8023c88:	4b0d      	ldr	r3, [pc, #52]	; (8023cc0 <__smakebuf_r+0x7c>)
 8023c8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8023c8c:	89a3      	ldrh	r3, [r4, #12]
 8023c8e:	6020      	str	r0, [r4, #0]
 8023c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023c94:	81a3      	strh	r3, [r4, #12]
 8023c96:	9b00      	ldr	r3, [sp, #0]
 8023c98:	6163      	str	r3, [r4, #20]
 8023c9a:	9b01      	ldr	r3, [sp, #4]
 8023c9c:	6120      	str	r0, [r4, #16]
 8023c9e:	b15b      	cbz	r3, 8023cb8 <__smakebuf_r+0x74>
 8023ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023ca4:	4630      	mov	r0, r6
 8023ca6:	f000 f863 	bl	8023d70 <_isatty_r>
 8023caa:	b128      	cbz	r0, 8023cb8 <__smakebuf_r+0x74>
 8023cac:	89a3      	ldrh	r3, [r4, #12]
 8023cae:	f023 0303 	bic.w	r3, r3, #3
 8023cb2:	f043 0301 	orr.w	r3, r3, #1
 8023cb6:	81a3      	strh	r3, [r4, #12]
 8023cb8:	89a0      	ldrh	r0, [r4, #12]
 8023cba:	4305      	orrs	r5, r0
 8023cbc:	81a5      	strh	r5, [r4, #12]
 8023cbe:	e7cd      	b.n	8023c5c <__smakebuf_r+0x18>
 8023cc0:	080235a9 	.word	0x080235a9

08023cc4 <_raise_r>:
 8023cc4:	291f      	cmp	r1, #31
 8023cc6:	b538      	push	{r3, r4, r5, lr}
 8023cc8:	4604      	mov	r4, r0
 8023cca:	460d      	mov	r5, r1
 8023ccc:	d904      	bls.n	8023cd8 <_raise_r+0x14>
 8023cce:	2316      	movs	r3, #22
 8023cd0:	6003      	str	r3, [r0, #0]
 8023cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023cd6:	bd38      	pop	{r3, r4, r5, pc}
 8023cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023cda:	b112      	cbz	r2, 8023ce2 <_raise_r+0x1e>
 8023cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023ce0:	b94b      	cbnz	r3, 8023cf6 <_raise_r+0x32>
 8023ce2:	4620      	mov	r0, r4
 8023ce4:	f000 f830 	bl	8023d48 <_getpid_r>
 8023ce8:	462a      	mov	r2, r5
 8023cea:	4601      	mov	r1, r0
 8023cec:	4620      	mov	r0, r4
 8023cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023cf2:	f000 b817 	b.w	8023d24 <_kill_r>
 8023cf6:	2b01      	cmp	r3, #1
 8023cf8:	d00a      	beq.n	8023d10 <_raise_r+0x4c>
 8023cfa:	1c59      	adds	r1, r3, #1
 8023cfc:	d103      	bne.n	8023d06 <_raise_r+0x42>
 8023cfe:	2316      	movs	r3, #22
 8023d00:	6003      	str	r3, [r0, #0]
 8023d02:	2001      	movs	r0, #1
 8023d04:	e7e7      	b.n	8023cd6 <_raise_r+0x12>
 8023d06:	2400      	movs	r4, #0
 8023d08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023d0c:	4628      	mov	r0, r5
 8023d0e:	4798      	blx	r3
 8023d10:	2000      	movs	r0, #0
 8023d12:	e7e0      	b.n	8023cd6 <_raise_r+0x12>

08023d14 <raise>:
 8023d14:	4b02      	ldr	r3, [pc, #8]	; (8023d20 <raise+0xc>)
 8023d16:	4601      	mov	r1, r0
 8023d18:	6818      	ldr	r0, [r3, #0]
 8023d1a:	f7ff bfd3 	b.w	8023cc4 <_raise_r>
 8023d1e:	bf00      	nop
 8023d20:	200000c4 	.word	0x200000c4

08023d24 <_kill_r>:
 8023d24:	b538      	push	{r3, r4, r5, lr}
 8023d26:	4d07      	ldr	r5, [pc, #28]	; (8023d44 <_kill_r+0x20>)
 8023d28:	2300      	movs	r3, #0
 8023d2a:	4604      	mov	r4, r0
 8023d2c:	4608      	mov	r0, r1
 8023d2e:	4611      	mov	r1, r2
 8023d30:	602b      	str	r3, [r5, #0]
 8023d32:	f7eb f83d 	bl	800edb0 <_kill>
 8023d36:	1c43      	adds	r3, r0, #1
 8023d38:	d102      	bne.n	8023d40 <_kill_r+0x1c>
 8023d3a:	682b      	ldr	r3, [r5, #0]
 8023d3c:	b103      	cbz	r3, 8023d40 <_kill_r+0x1c>
 8023d3e:	6023      	str	r3, [r4, #0]
 8023d40:	bd38      	pop	{r3, r4, r5, pc}
 8023d42:	bf00      	nop
 8023d44:	2000a94c 	.word	0x2000a94c

08023d48 <_getpid_r>:
 8023d48:	f7eb b82a 	b.w	800eda0 <_getpid>

08023d4c <_fstat_r>:
 8023d4c:	b538      	push	{r3, r4, r5, lr}
 8023d4e:	4d07      	ldr	r5, [pc, #28]	; (8023d6c <_fstat_r+0x20>)
 8023d50:	2300      	movs	r3, #0
 8023d52:	4604      	mov	r4, r0
 8023d54:	4608      	mov	r0, r1
 8023d56:	4611      	mov	r1, r2
 8023d58:	602b      	str	r3, [r5, #0]
 8023d5a:	f7eb f888 	bl	800ee6e <_fstat>
 8023d5e:	1c43      	adds	r3, r0, #1
 8023d60:	d102      	bne.n	8023d68 <_fstat_r+0x1c>
 8023d62:	682b      	ldr	r3, [r5, #0]
 8023d64:	b103      	cbz	r3, 8023d68 <_fstat_r+0x1c>
 8023d66:	6023      	str	r3, [r4, #0]
 8023d68:	bd38      	pop	{r3, r4, r5, pc}
 8023d6a:	bf00      	nop
 8023d6c:	2000a94c 	.word	0x2000a94c

08023d70 <_isatty_r>:
 8023d70:	b538      	push	{r3, r4, r5, lr}
 8023d72:	4d06      	ldr	r5, [pc, #24]	; (8023d8c <_isatty_r+0x1c>)
 8023d74:	2300      	movs	r3, #0
 8023d76:	4604      	mov	r4, r0
 8023d78:	4608      	mov	r0, r1
 8023d7a:	602b      	str	r3, [r5, #0]
 8023d7c:	f7eb f887 	bl	800ee8e <_isatty>
 8023d80:	1c43      	adds	r3, r0, #1
 8023d82:	d102      	bne.n	8023d8a <_isatty_r+0x1a>
 8023d84:	682b      	ldr	r3, [r5, #0]
 8023d86:	b103      	cbz	r3, 8023d8a <_isatty_r+0x1a>
 8023d88:	6023      	str	r3, [r4, #0]
 8023d8a:	bd38      	pop	{r3, r4, r5, pc}
 8023d8c:	2000a94c 	.word	0x2000a94c

08023d90 <atanf>:
 8023d90:	b538      	push	{r3, r4, r5, lr}
 8023d92:	ee10 5a10 	vmov	r5, s0
 8023d96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8023d9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8023d9e:	eef0 7a40 	vmov.f32	s15, s0
 8023da2:	db10      	blt.n	8023dc6 <atanf+0x36>
 8023da4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8023da8:	dd04      	ble.n	8023db4 <atanf+0x24>
 8023daa:	ee70 7a00 	vadd.f32	s15, s0, s0
 8023dae:	eeb0 0a67 	vmov.f32	s0, s15
 8023db2:	bd38      	pop	{r3, r4, r5, pc}
 8023db4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8023eec <atanf+0x15c>
 8023db8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8023ef0 <atanf+0x160>
 8023dbc:	2d00      	cmp	r5, #0
 8023dbe:	bfd8      	it	le
 8023dc0:	eef0 7a40 	vmovle.f32	s15, s0
 8023dc4:	e7f3      	b.n	8023dae <atanf+0x1e>
 8023dc6:	4b4b      	ldr	r3, [pc, #300]	; (8023ef4 <atanf+0x164>)
 8023dc8:	429c      	cmp	r4, r3
 8023dca:	dc10      	bgt.n	8023dee <atanf+0x5e>
 8023dcc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8023dd0:	da0a      	bge.n	8023de8 <atanf+0x58>
 8023dd2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8023ef8 <atanf+0x168>
 8023dd6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8023dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023dde:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8023de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023de6:	dce2      	bgt.n	8023dae <atanf+0x1e>
 8023de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023dec:	e013      	b.n	8023e16 <atanf+0x86>
 8023dee:	f000 f8e3 	bl	8023fb8 <fabsf>
 8023df2:	4b42      	ldr	r3, [pc, #264]	; (8023efc <atanf+0x16c>)
 8023df4:	429c      	cmp	r4, r3
 8023df6:	dc4f      	bgt.n	8023e98 <atanf+0x108>
 8023df8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8023dfc:	429c      	cmp	r4, r3
 8023dfe:	dc41      	bgt.n	8023e84 <atanf+0xf4>
 8023e00:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8023e04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023e08:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023e0c:	2300      	movs	r3, #0
 8023e0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023e12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e16:	1c5a      	adds	r2, r3, #1
 8023e18:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8023e1c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8023f00 <atanf+0x170>
 8023e20:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8023f04 <atanf+0x174>
 8023e24:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8023f08 <atanf+0x178>
 8023e28:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8023f0c <atanf+0x17c>
 8023e2c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8023e30:	eea7 6a25 	vfma.f32	s12, s14, s11
 8023e34:	eddf 5a36 	vldr	s11, [pc, #216]	; 8023f10 <atanf+0x180>
 8023e38:	eee6 5a07 	vfma.f32	s11, s12, s14
 8023e3c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8023f14 <atanf+0x184>
 8023e40:	eea5 6a87 	vfma.f32	s12, s11, s14
 8023e44:	eddf 5a34 	vldr	s11, [pc, #208]	; 8023f18 <atanf+0x188>
 8023e48:	eee6 5a07 	vfma.f32	s11, s12, s14
 8023e4c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8023f1c <atanf+0x18c>
 8023e50:	eea5 6a87 	vfma.f32	s12, s11, s14
 8023e54:	eddf 5a32 	vldr	s11, [pc, #200]	; 8023f20 <atanf+0x190>
 8023e58:	eee7 5a05 	vfma.f32	s11, s14, s10
 8023e5c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8023f24 <atanf+0x194>
 8023e60:	eea5 5a87 	vfma.f32	s10, s11, s14
 8023e64:	eddf 5a30 	vldr	s11, [pc, #192]	; 8023f28 <atanf+0x198>
 8023e68:	eee5 5a07 	vfma.f32	s11, s10, s14
 8023e6c:	eea5 0a87 	vfma.f32	s0, s11, s14
 8023e70:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023e74:	eea6 0a26 	vfma.f32	s0, s12, s13
 8023e78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023e7c:	d121      	bne.n	8023ec2 <atanf+0x132>
 8023e7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023e82:	e794      	b.n	8023dae <atanf+0x1e>
 8023e84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023e88:	ee30 7a67 	vsub.f32	s14, s0, s15
 8023e8c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023e90:	2301      	movs	r3, #1
 8023e92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023e96:	e7be      	b.n	8023e16 <atanf+0x86>
 8023e98:	4b24      	ldr	r3, [pc, #144]	; (8023f2c <atanf+0x19c>)
 8023e9a:	429c      	cmp	r4, r3
 8023e9c:	dc0b      	bgt.n	8023eb6 <atanf+0x126>
 8023e9e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8023ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ea6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023eaa:	2302      	movs	r3, #2
 8023eac:	ee70 6a67 	vsub.f32	s13, s0, s15
 8023eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023eb4:	e7af      	b.n	8023e16 <atanf+0x86>
 8023eb6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023eba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023ebe:	2303      	movs	r3, #3
 8023ec0:	e7a9      	b.n	8023e16 <atanf+0x86>
 8023ec2:	4a1b      	ldr	r2, [pc, #108]	; (8023f30 <atanf+0x1a0>)
 8023ec4:	491b      	ldr	r1, [pc, #108]	; (8023f34 <atanf+0x1a4>)
 8023ec6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8023eca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023ece:	ed93 7a00 	vldr	s14, [r3]
 8023ed2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023ed6:	2d00      	cmp	r5, #0
 8023ed8:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023edc:	ed92 0a00 	vldr	s0, [r2]
 8023ee0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8023ee4:	bfb8      	it	lt
 8023ee6:	eef1 7a67 	vneglt.f32	s15, s15
 8023eea:	e760      	b.n	8023dae <atanf+0x1e>
 8023eec:	3fc90fdb 	.word	0x3fc90fdb
 8023ef0:	bfc90fdb 	.word	0xbfc90fdb
 8023ef4:	3edfffff 	.word	0x3edfffff
 8023ef8:	7149f2ca 	.word	0x7149f2ca
 8023efc:	3f97ffff 	.word	0x3f97ffff
 8023f00:	3c8569d7 	.word	0x3c8569d7
 8023f04:	3d4bda59 	.word	0x3d4bda59
 8023f08:	bd15a221 	.word	0xbd15a221
 8023f0c:	be4ccccd 	.word	0xbe4ccccd
 8023f10:	3d886b35 	.word	0x3d886b35
 8023f14:	3dba2e6e 	.word	0x3dba2e6e
 8023f18:	3e124925 	.word	0x3e124925
 8023f1c:	3eaaaaab 	.word	0x3eaaaaab
 8023f20:	bd6ef16b 	.word	0xbd6ef16b
 8023f24:	bd9d8795 	.word	0xbd9d8795
 8023f28:	bde38e38 	.word	0xbde38e38
 8023f2c:	401bffff 	.word	0x401bffff
 8023f30:	080261fc 	.word	0x080261fc
 8023f34:	0802620c 	.word	0x0802620c

08023f38 <cosf>:
 8023f38:	ee10 3a10 	vmov	r3, s0
 8023f3c:	b507      	push	{r0, r1, r2, lr}
 8023f3e:	4a1c      	ldr	r2, [pc, #112]	; (8023fb0 <cosf+0x78>)
 8023f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023f44:	4293      	cmp	r3, r2
 8023f46:	dc04      	bgt.n	8023f52 <cosf+0x1a>
 8023f48:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8023fb4 <cosf+0x7c>
 8023f4c:	f000 fdb8 	bl	8024ac0 <__kernel_cosf>
 8023f50:	e004      	b.n	8023f5c <cosf+0x24>
 8023f52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023f56:	db04      	blt.n	8023f62 <cosf+0x2a>
 8023f58:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023f5c:	b003      	add	sp, #12
 8023f5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023f62:	4668      	mov	r0, sp
 8023f64:	f000 fc6c 	bl	8024840 <__ieee754_rem_pio2f>
 8023f68:	f000 0003 	and.w	r0, r0, #3
 8023f6c:	2801      	cmp	r0, #1
 8023f6e:	d007      	beq.n	8023f80 <cosf+0x48>
 8023f70:	2802      	cmp	r0, #2
 8023f72:	d00e      	beq.n	8023f92 <cosf+0x5a>
 8023f74:	b9a0      	cbnz	r0, 8023fa0 <cosf+0x68>
 8023f76:	eddd 0a01 	vldr	s1, [sp, #4]
 8023f7a:	ed9d 0a00 	vldr	s0, [sp]
 8023f7e:	e7e5      	b.n	8023f4c <cosf+0x14>
 8023f80:	eddd 0a01 	vldr	s1, [sp, #4]
 8023f84:	ed9d 0a00 	vldr	s0, [sp]
 8023f88:	f001 f884 	bl	8025094 <__kernel_sinf>
 8023f8c:	eeb1 0a40 	vneg.f32	s0, s0
 8023f90:	e7e4      	b.n	8023f5c <cosf+0x24>
 8023f92:	eddd 0a01 	vldr	s1, [sp, #4]
 8023f96:	ed9d 0a00 	vldr	s0, [sp]
 8023f9a:	f000 fd91 	bl	8024ac0 <__kernel_cosf>
 8023f9e:	e7f5      	b.n	8023f8c <cosf+0x54>
 8023fa0:	eddd 0a01 	vldr	s1, [sp, #4]
 8023fa4:	ed9d 0a00 	vldr	s0, [sp]
 8023fa8:	2001      	movs	r0, #1
 8023faa:	f001 f873 	bl	8025094 <__kernel_sinf>
 8023fae:	e7d5      	b.n	8023f5c <cosf+0x24>
 8023fb0:	3f490fd8 	.word	0x3f490fd8
 8023fb4:	00000000 	.word	0x00000000

08023fb8 <fabsf>:
 8023fb8:	ee10 3a10 	vmov	r3, s0
 8023fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023fc0:	ee00 3a10 	vmov	s0, r3
 8023fc4:	4770      	bx	lr
	...

08023fc8 <sinf>:
 8023fc8:	ee10 3a10 	vmov	r3, s0
 8023fcc:	b507      	push	{r0, r1, r2, lr}
 8023fce:	4a1d      	ldr	r2, [pc, #116]	; (8024044 <sinf+0x7c>)
 8023fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023fd4:	4293      	cmp	r3, r2
 8023fd6:	dc05      	bgt.n	8023fe4 <sinf+0x1c>
 8023fd8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8024048 <sinf+0x80>
 8023fdc:	2000      	movs	r0, #0
 8023fde:	f001 f859 	bl	8025094 <__kernel_sinf>
 8023fe2:	e004      	b.n	8023fee <sinf+0x26>
 8023fe4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023fe8:	db04      	blt.n	8023ff4 <sinf+0x2c>
 8023fea:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023fee:	b003      	add	sp, #12
 8023ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8023ff4:	4668      	mov	r0, sp
 8023ff6:	f000 fc23 	bl	8024840 <__ieee754_rem_pio2f>
 8023ffa:	f000 0003 	and.w	r0, r0, #3
 8023ffe:	2801      	cmp	r0, #1
 8024000:	d008      	beq.n	8024014 <sinf+0x4c>
 8024002:	2802      	cmp	r0, #2
 8024004:	d00d      	beq.n	8024022 <sinf+0x5a>
 8024006:	b9b0      	cbnz	r0, 8024036 <sinf+0x6e>
 8024008:	eddd 0a01 	vldr	s1, [sp, #4]
 802400c:	ed9d 0a00 	vldr	s0, [sp]
 8024010:	2001      	movs	r0, #1
 8024012:	e7e4      	b.n	8023fde <sinf+0x16>
 8024014:	eddd 0a01 	vldr	s1, [sp, #4]
 8024018:	ed9d 0a00 	vldr	s0, [sp]
 802401c:	f000 fd50 	bl	8024ac0 <__kernel_cosf>
 8024020:	e7e5      	b.n	8023fee <sinf+0x26>
 8024022:	eddd 0a01 	vldr	s1, [sp, #4]
 8024026:	ed9d 0a00 	vldr	s0, [sp]
 802402a:	2001      	movs	r0, #1
 802402c:	f001 f832 	bl	8025094 <__kernel_sinf>
 8024030:	eeb1 0a40 	vneg.f32	s0, s0
 8024034:	e7db      	b.n	8023fee <sinf+0x26>
 8024036:	eddd 0a01 	vldr	s1, [sp, #4]
 802403a:	ed9d 0a00 	vldr	s0, [sp]
 802403e:	f000 fd3f 	bl	8024ac0 <__kernel_cosf>
 8024042:	e7f5      	b.n	8024030 <sinf+0x68>
 8024044:	3f490fd8 	.word	0x3f490fd8
 8024048:	00000000 	.word	0x00000000

0802404c <atan2f>:
 802404c:	f000 b898 	b.w	8024180 <__ieee754_atan2f>

08024050 <powf>:
 8024050:	b508      	push	{r3, lr}
 8024052:	ed2d 8b04 	vpush	{d8-d9}
 8024056:	eeb0 9a40 	vmov.f32	s18, s0
 802405a:	eef0 8a60 	vmov.f32	s17, s1
 802405e:	f000 f92f 	bl	80242c0 <__ieee754_powf>
 8024062:	4b43      	ldr	r3, [pc, #268]	; (8024170 <powf+0x120>)
 8024064:	f993 3000 	ldrsb.w	r3, [r3]
 8024068:	3301      	adds	r3, #1
 802406a:	eeb0 8a40 	vmov.f32	s16, s0
 802406e:	d012      	beq.n	8024096 <powf+0x46>
 8024070:	eef4 8a68 	vcmp.f32	s17, s17
 8024074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024078:	d60d      	bvs.n	8024096 <powf+0x46>
 802407a:	eeb4 9a49 	vcmp.f32	s18, s18
 802407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024082:	d70d      	bvc.n	80240a0 <powf+0x50>
 8024084:	eef5 8a40 	vcmp.f32	s17, #0.0
 8024088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802408c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024090:	bf08      	it	eq
 8024092:	eeb0 8a67 	vmoveq.f32	s16, s15
 8024096:	eeb0 0a48 	vmov.f32	s0, s16
 802409a:	ecbd 8b04 	vpop	{d8-d9}
 802409e:	bd08      	pop	{r3, pc}
 80240a0:	eddf 9a34 	vldr	s19, [pc, #208]	; 8024174 <powf+0x124>
 80240a4:	eeb4 9a69 	vcmp.f32	s18, s19
 80240a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240ac:	d116      	bne.n	80240dc <powf+0x8c>
 80240ae:	eef4 8a69 	vcmp.f32	s17, s19
 80240b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240b6:	d057      	beq.n	8024168 <powf+0x118>
 80240b8:	eeb0 0a68 	vmov.f32	s0, s17
 80240bc:	f7ff f944 	bl	8023348 <finitef>
 80240c0:	2800      	cmp	r0, #0
 80240c2:	d0e8      	beq.n	8024096 <powf+0x46>
 80240c4:	eef4 8ae9 	vcmpe.f32	s17, s19
 80240c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240cc:	d5e3      	bpl.n	8024096 <powf+0x46>
 80240ce:	f7fb f975 	bl	801f3bc <__errno>
 80240d2:	2321      	movs	r3, #33	; 0x21
 80240d4:	6003      	str	r3, [r0, #0]
 80240d6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8024178 <powf+0x128>
 80240da:	e7dc      	b.n	8024096 <powf+0x46>
 80240dc:	f7ff f934 	bl	8023348 <finitef>
 80240e0:	bb50      	cbnz	r0, 8024138 <powf+0xe8>
 80240e2:	eeb0 0a49 	vmov.f32	s0, s18
 80240e6:	f7ff f92f 	bl	8023348 <finitef>
 80240ea:	b328      	cbz	r0, 8024138 <powf+0xe8>
 80240ec:	eeb0 0a68 	vmov.f32	s0, s17
 80240f0:	f7ff f92a 	bl	8023348 <finitef>
 80240f4:	b300      	cbz	r0, 8024138 <powf+0xe8>
 80240f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80240fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240fe:	d706      	bvc.n	802410e <powf+0xbe>
 8024100:	f7fb f95c 	bl	801f3bc <__errno>
 8024104:	2321      	movs	r3, #33	; 0x21
 8024106:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 802410a:	6003      	str	r3, [r0, #0]
 802410c:	e7c3      	b.n	8024096 <powf+0x46>
 802410e:	f7fb f955 	bl	801f3bc <__errno>
 8024112:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8024116:	2322      	movs	r3, #34	; 0x22
 8024118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802411c:	6003      	str	r3, [r0, #0]
 802411e:	d508      	bpl.n	8024132 <powf+0xe2>
 8024120:	eeb0 0a68 	vmov.f32	s0, s17
 8024124:	f001 f840 	bl	80251a8 <rintf>
 8024128:	eeb4 0a68 	vcmp.f32	s0, s17
 802412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024130:	d1d1      	bne.n	80240d6 <powf+0x86>
 8024132:	ed9f 8a12 	vldr	s16, [pc, #72]	; 802417c <powf+0x12c>
 8024136:	e7ae      	b.n	8024096 <powf+0x46>
 8024138:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024140:	d1a9      	bne.n	8024096 <powf+0x46>
 8024142:	eeb0 0a49 	vmov.f32	s0, s18
 8024146:	f7ff f8ff 	bl	8023348 <finitef>
 802414a:	2800      	cmp	r0, #0
 802414c:	d0a3      	beq.n	8024096 <powf+0x46>
 802414e:	eeb0 0a68 	vmov.f32	s0, s17
 8024152:	f7ff f8f9 	bl	8023348 <finitef>
 8024156:	2800      	cmp	r0, #0
 8024158:	d09d      	beq.n	8024096 <powf+0x46>
 802415a:	f7fb f92f 	bl	801f3bc <__errno>
 802415e:	2322      	movs	r3, #34	; 0x22
 8024160:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8024174 <powf+0x124>
 8024164:	6003      	str	r3, [r0, #0]
 8024166:	e796      	b.n	8024096 <powf+0x46>
 8024168:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 802416c:	e793      	b.n	8024096 <powf+0x46>
 802416e:	bf00      	nop
 8024170:	20000298 	.word	0x20000298
 8024174:	00000000 	.word	0x00000000
 8024178:	ff800000 	.word	0xff800000
 802417c:	7f800000 	.word	0x7f800000

08024180 <__ieee754_atan2f>:
 8024180:	ee10 2a90 	vmov	r2, s1
 8024184:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024188:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802418c:	b510      	push	{r4, lr}
 802418e:	eef0 7a40 	vmov.f32	s15, s0
 8024192:	dc06      	bgt.n	80241a2 <__ieee754_atan2f+0x22>
 8024194:	ee10 0a10 	vmov	r0, s0
 8024198:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802419c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80241a0:	dd04      	ble.n	80241ac <__ieee754_atan2f+0x2c>
 80241a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80241a6:	eeb0 0a67 	vmov.f32	s0, s15
 80241aa:	bd10      	pop	{r4, pc}
 80241ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80241b0:	d103      	bne.n	80241ba <__ieee754_atan2f+0x3a>
 80241b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80241b6:	f7ff bdeb 	b.w	8023d90 <atanf>
 80241ba:	1794      	asrs	r4, r2, #30
 80241bc:	f004 0402 	and.w	r4, r4, #2
 80241c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80241c4:	b943      	cbnz	r3, 80241d8 <__ieee754_atan2f+0x58>
 80241c6:	2c02      	cmp	r4, #2
 80241c8:	d05e      	beq.n	8024288 <__ieee754_atan2f+0x108>
 80241ca:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802429c <__ieee754_atan2f+0x11c>
 80241ce:	2c03      	cmp	r4, #3
 80241d0:	bf08      	it	eq
 80241d2:	eef0 7a47 	vmoveq.f32	s15, s14
 80241d6:	e7e6      	b.n	80241a6 <__ieee754_atan2f+0x26>
 80241d8:	b941      	cbnz	r1, 80241ec <__ieee754_atan2f+0x6c>
 80241da:	eddf 7a31 	vldr	s15, [pc, #196]	; 80242a0 <__ieee754_atan2f+0x120>
 80241de:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80242a4 <__ieee754_atan2f+0x124>
 80241e2:	2800      	cmp	r0, #0
 80241e4:	bfb8      	it	lt
 80241e6:	eef0 7a40 	vmovlt.f32	s15, s0
 80241ea:	e7dc      	b.n	80241a6 <__ieee754_atan2f+0x26>
 80241ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80241f0:	d110      	bne.n	8024214 <__ieee754_atan2f+0x94>
 80241f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80241f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80241fa:	d107      	bne.n	802420c <__ieee754_atan2f+0x8c>
 80241fc:	2c02      	cmp	r4, #2
 80241fe:	d846      	bhi.n	802428e <__ieee754_atan2f+0x10e>
 8024200:	4b29      	ldr	r3, [pc, #164]	; (80242a8 <__ieee754_atan2f+0x128>)
 8024202:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024206:	edd4 7a00 	vldr	s15, [r4]
 802420a:	e7cc      	b.n	80241a6 <__ieee754_atan2f+0x26>
 802420c:	2c02      	cmp	r4, #2
 802420e:	d841      	bhi.n	8024294 <__ieee754_atan2f+0x114>
 8024210:	4b26      	ldr	r3, [pc, #152]	; (80242ac <__ieee754_atan2f+0x12c>)
 8024212:	e7f6      	b.n	8024202 <__ieee754_atan2f+0x82>
 8024214:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024218:	d0df      	beq.n	80241da <__ieee754_atan2f+0x5a>
 802421a:	1a5b      	subs	r3, r3, r1
 802421c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8024220:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024224:	da1a      	bge.n	802425c <__ieee754_atan2f+0xdc>
 8024226:	2a00      	cmp	r2, #0
 8024228:	da01      	bge.n	802422e <__ieee754_atan2f+0xae>
 802422a:	313c      	adds	r1, #60	; 0x3c
 802422c:	db19      	blt.n	8024262 <__ieee754_atan2f+0xe2>
 802422e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8024232:	f7ff fec1 	bl	8023fb8 <fabsf>
 8024236:	f7ff fdab 	bl	8023d90 <atanf>
 802423a:	eef0 7a40 	vmov.f32	s15, s0
 802423e:	2c01      	cmp	r4, #1
 8024240:	d012      	beq.n	8024268 <__ieee754_atan2f+0xe8>
 8024242:	2c02      	cmp	r4, #2
 8024244:	d017      	beq.n	8024276 <__ieee754_atan2f+0xf6>
 8024246:	2c00      	cmp	r4, #0
 8024248:	d0ad      	beq.n	80241a6 <__ieee754_atan2f+0x26>
 802424a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80242b0 <__ieee754_atan2f+0x130>
 802424e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024252:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80242b4 <__ieee754_atan2f+0x134>
 8024256:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802425a:	e7a4      	b.n	80241a6 <__ieee754_atan2f+0x26>
 802425c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80242a0 <__ieee754_atan2f+0x120>
 8024260:	e7ed      	b.n	802423e <__ieee754_atan2f+0xbe>
 8024262:	eddf 7a15 	vldr	s15, [pc, #84]	; 80242b8 <__ieee754_atan2f+0x138>
 8024266:	e7ea      	b.n	802423e <__ieee754_atan2f+0xbe>
 8024268:	ee17 3a90 	vmov	r3, s15
 802426c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024270:	ee07 3a90 	vmov	s15, r3
 8024274:	e797      	b.n	80241a6 <__ieee754_atan2f+0x26>
 8024276:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80242b0 <__ieee754_atan2f+0x130>
 802427a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802427e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80242b4 <__ieee754_atan2f+0x134>
 8024282:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024286:	e78e      	b.n	80241a6 <__ieee754_atan2f+0x26>
 8024288:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80242b4 <__ieee754_atan2f+0x134>
 802428c:	e78b      	b.n	80241a6 <__ieee754_atan2f+0x26>
 802428e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80242bc <__ieee754_atan2f+0x13c>
 8024292:	e788      	b.n	80241a6 <__ieee754_atan2f+0x26>
 8024294:	eddf 7a08 	vldr	s15, [pc, #32]	; 80242b8 <__ieee754_atan2f+0x138>
 8024298:	e785      	b.n	80241a6 <__ieee754_atan2f+0x26>
 802429a:	bf00      	nop
 802429c:	c0490fdb 	.word	0xc0490fdb
 80242a0:	3fc90fdb 	.word	0x3fc90fdb
 80242a4:	bfc90fdb 	.word	0xbfc90fdb
 80242a8:	0802621c 	.word	0x0802621c
 80242ac:	08026228 	.word	0x08026228
 80242b0:	33bbbd2e 	.word	0x33bbbd2e
 80242b4:	40490fdb 	.word	0x40490fdb
 80242b8:	00000000 	.word	0x00000000
 80242bc:	3f490fdb 	.word	0x3f490fdb

080242c0 <__ieee754_powf>:
 80242c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242c4:	ee10 5a90 	vmov	r5, s1
 80242c8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80242cc:	ed2d 8b02 	vpush	{d8}
 80242d0:	eeb0 8a40 	vmov.f32	s16, s0
 80242d4:	eef0 8a60 	vmov.f32	s17, s1
 80242d8:	f000 8291 	beq.w	80247fe <__ieee754_powf+0x53e>
 80242dc:	ee10 8a10 	vmov	r8, s0
 80242e0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80242e4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80242e8:	dc06      	bgt.n	80242f8 <__ieee754_powf+0x38>
 80242ea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80242ee:	dd0a      	ble.n	8024306 <__ieee754_powf+0x46>
 80242f0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80242f4:	f000 8283 	beq.w	80247fe <__ieee754_powf+0x53e>
 80242f8:	ecbd 8b02 	vpop	{d8}
 80242fc:	48d8      	ldr	r0, [pc, #864]	; (8024660 <__ieee754_powf+0x3a0>)
 80242fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024302:	f7fb bfdf 	b.w	80202c4 <nanf>
 8024306:	f1b8 0f00 	cmp.w	r8, #0
 802430a:	da1f      	bge.n	802434c <__ieee754_powf+0x8c>
 802430c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8024310:	da2e      	bge.n	8024370 <__ieee754_powf+0xb0>
 8024312:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8024316:	f2c0 827b 	blt.w	8024810 <__ieee754_powf+0x550>
 802431a:	15fb      	asrs	r3, r7, #23
 802431c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024320:	fa47 f603 	asr.w	r6, r7, r3
 8024324:	fa06 f303 	lsl.w	r3, r6, r3
 8024328:	42bb      	cmp	r3, r7
 802432a:	f040 8271 	bne.w	8024810 <__ieee754_powf+0x550>
 802432e:	f006 0601 	and.w	r6, r6, #1
 8024332:	f1c6 0602 	rsb	r6, r6, #2
 8024336:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 802433a:	d120      	bne.n	802437e <__ieee754_powf+0xbe>
 802433c:	2d00      	cmp	r5, #0
 802433e:	f280 8264 	bge.w	802480a <__ieee754_powf+0x54a>
 8024342:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024346:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802434a:	e00d      	b.n	8024368 <__ieee754_powf+0xa8>
 802434c:	2600      	movs	r6, #0
 802434e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8024352:	d1f0      	bne.n	8024336 <__ieee754_powf+0x76>
 8024354:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8024358:	f000 8251 	beq.w	80247fe <__ieee754_powf+0x53e>
 802435c:	dd0a      	ble.n	8024374 <__ieee754_powf+0xb4>
 802435e:	2d00      	cmp	r5, #0
 8024360:	f280 8250 	bge.w	8024804 <__ieee754_powf+0x544>
 8024364:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8024664 <__ieee754_powf+0x3a4>
 8024368:	ecbd 8b02 	vpop	{d8}
 802436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024370:	2602      	movs	r6, #2
 8024372:	e7ec      	b.n	802434e <__ieee754_powf+0x8e>
 8024374:	2d00      	cmp	r5, #0
 8024376:	daf5      	bge.n	8024364 <__ieee754_powf+0xa4>
 8024378:	eeb1 0a68 	vneg.f32	s0, s17
 802437c:	e7f4      	b.n	8024368 <__ieee754_powf+0xa8>
 802437e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8024382:	d102      	bne.n	802438a <__ieee754_powf+0xca>
 8024384:	ee28 0a08 	vmul.f32	s0, s16, s16
 8024388:	e7ee      	b.n	8024368 <__ieee754_powf+0xa8>
 802438a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 802438e:	eeb0 0a48 	vmov.f32	s0, s16
 8024392:	d108      	bne.n	80243a6 <__ieee754_powf+0xe6>
 8024394:	f1b8 0f00 	cmp.w	r8, #0
 8024398:	db05      	blt.n	80243a6 <__ieee754_powf+0xe6>
 802439a:	ecbd 8b02 	vpop	{d8}
 802439e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243a2:	f000 bb89 	b.w	8024ab8 <__ieee754_sqrtf>
 80243a6:	f7ff fe07 	bl	8023fb8 <fabsf>
 80243aa:	b124      	cbz	r4, 80243b6 <__ieee754_powf+0xf6>
 80243ac:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80243b0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80243b4:	d117      	bne.n	80243e6 <__ieee754_powf+0x126>
 80243b6:	2d00      	cmp	r5, #0
 80243b8:	bfbc      	itt	lt
 80243ba:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80243be:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80243c2:	f1b8 0f00 	cmp.w	r8, #0
 80243c6:	dacf      	bge.n	8024368 <__ieee754_powf+0xa8>
 80243c8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80243cc:	ea54 0306 	orrs.w	r3, r4, r6
 80243d0:	d104      	bne.n	80243dc <__ieee754_powf+0x11c>
 80243d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80243d6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80243da:	e7c5      	b.n	8024368 <__ieee754_powf+0xa8>
 80243dc:	2e01      	cmp	r6, #1
 80243de:	d1c3      	bne.n	8024368 <__ieee754_powf+0xa8>
 80243e0:	eeb1 0a40 	vneg.f32	s0, s0
 80243e4:	e7c0      	b.n	8024368 <__ieee754_powf+0xa8>
 80243e6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80243ea:	3801      	subs	r0, #1
 80243ec:	ea56 0300 	orrs.w	r3, r6, r0
 80243f0:	d104      	bne.n	80243fc <__ieee754_powf+0x13c>
 80243f2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80243f6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80243fa:	e7b5      	b.n	8024368 <__ieee754_powf+0xa8>
 80243fc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8024400:	dd6b      	ble.n	80244da <__ieee754_powf+0x21a>
 8024402:	4b99      	ldr	r3, [pc, #612]	; (8024668 <__ieee754_powf+0x3a8>)
 8024404:	429c      	cmp	r4, r3
 8024406:	dc06      	bgt.n	8024416 <__ieee754_powf+0x156>
 8024408:	2d00      	cmp	r5, #0
 802440a:	daab      	bge.n	8024364 <__ieee754_powf+0xa4>
 802440c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 802466c <__ieee754_powf+0x3ac>
 8024410:	ee20 0a00 	vmul.f32	s0, s0, s0
 8024414:	e7a8      	b.n	8024368 <__ieee754_powf+0xa8>
 8024416:	4b96      	ldr	r3, [pc, #600]	; (8024670 <__ieee754_powf+0x3b0>)
 8024418:	429c      	cmp	r4, r3
 802441a:	dd02      	ble.n	8024422 <__ieee754_powf+0x162>
 802441c:	2d00      	cmp	r5, #0
 802441e:	dcf5      	bgt.n	802440c <__ieee754_powf+0x14c>
 8024420:	e7a0      	b.n	8024364 <__ieee754_powf+0xa4>
 8024422:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024426:	ee30 0a67 	vsub.f32	s0, s0, s15
 802442a:	eddf 6a92 	vldr	s13, [pc, #584]	; 8024674 <__ieee754_powf+0x3b4>
 802442e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8024432:	eee0 6a67 	vfms.f32	s13, s0, s15
 8024436:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802443a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802443e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8024442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024446:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8024678 <__ieee754_powf+0x3b8>
 802444a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802444e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 802467c <__ieee754_powf+0x3bc>
 8024452:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024456:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8024680 <__ieee754_powf+0x3c0>
 802445a:	eef0 6a67 	vmov.f32	s13, s15
 802445e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8024462:	ee16 3a90 	vmov	r3, s13
 8024466:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802446a:	f023 030f 	bic.w	r3, r3, #15
 802446e:	ee00 3a90 	vmov	s1, r3
 8024472:	eee0 0a47 	vfms.f32	s1, s0, s14
 8024476:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802447a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 802447e:	f025 050f 	bic.w	r5, r5, #15
 8024482:	ee07 5a10 	vmov	s14, r5
 8024486:	ee67 0aa8 	vmul.f32	s1, s15, s17
 802448a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 802448e:	ee07 3a90 	vmov	s15, r3
 8024492:	eee7 0a27 	vfma.f32	s1, s14, s15
 8024496:	3e01      	subs	r6, #1
 8024498:	ea56 0200 	orrs.w	r2, r6, r0
 802449c:	ee07 5a10 	vmov	s14, r5
 80244a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80244a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80244a8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80244ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80244b0:	ee17 4a10 	vmov	r4, s14
 80244b4:	bf08      	it	eq
 80244b6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80244ba:	2c00      	cmp	r4, #0
 80244bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80244c0:	f340 8184 	ble.w	80247cc <__ieee754_powf+0x50c>
 80244c4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80244c8:	f340 80fc 	ble.w	80246c4 <__ieee754_powf+0x404>
 80244cc:	eddf 7a67 	vldr	s15, [pc, #412]	; 802466c <__ieee754_powf+0x3ac>
 80244d0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80244d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80244d8:	e746      	b.n	8024368 <__ieee754_powf+0xa8>
 80244da:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80244de:	bf01      	itttt	eq
 80244e0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8024684 <__ieee754_powf+0x3c4>
 80244e4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80244e8:	f06f 0217 	mvneq.w	r2, #23
 80244ec:	ee17 4a90 	vmoveq	r4, s15
 80244f0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80244f4:	bf18      	it	ne
 80244f6:	2200      	movne	r2, #0
 80244f8:	3b7f      	subs	r3, #127	; 0x7f
 80244fa:	4413      	add	r3, r2
 80244fc:	4a62      	ldr	r2, [pc, #392]	; (8024688 <__ieee754_powf+0x3c8>)
 80244fe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8024502:	4294      	cmp	r4, r2
 8024504:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8024508:	dd06      	ble.n	8024518 <__ieee754_powf+0x258>
 802450a:	4a60      	ldr	r2, [pc, #384]	; (802468c <__ieee754_powf+0x3cc>)
 802450c:	4294      	cmp	r4, r2
 802450e:	f340 80a4 	ble.w	802465a <__ieee754_powf+0x39a>
 8024512:	3301      	adds	r3, #1
 8024514:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8024518:	2400      	movs	r4, #0
 802451a:	4a5d      	ldr	r2, [pc, #372]	; (8024690 <__ieee754_powf+0x3d0>)
 802451c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8024520:	ee07 1a90 	vmov	s15, r1
 8024524:	ed92 7a00 	vldr	s14, [r2]
 8024528:	4a5a      	ldr	r2, [pc, #360]	; (8024694 <__ieee754_powf+0x3d4>)
 802452a:	ee37 6a27 	vadd.f32	s12, s14, s15
 802452e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8024532:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8024536:	1049      	asrs	r1, r1, #1
 8024538:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802453c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8024540:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8024544:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8024548:	ee06 1a10 	vmov	s12, r1
 802454c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8024550:	ee36 7a47 	vsub.f32	s14, s12, s14
 8024554:	ee14 7a90 	vmov	r7, s9
 8024558:	4017      	ands	r7, r2
 802455a:	ee05 7a90 	vmov	s11, r7
 802455e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8024562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024566:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8024698 <__ieee754_powf+0x3d8>
 802456a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 802456e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8024572:	ee25 6a26 	vmul.f32	s12, s10, s13
 8024576:	eddf 6a49 	vldr	s13, [pc, #292]	; 802469c <__ieee754_powf+0x3dc>
 802457a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 802457e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80246a0 <__ieee754_powf+0x3e0>
 8024582:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024586:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8024674 <__ieee754_powf+0x3b4>
 802458a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802458e:	eddf 6a45 	vldr	s13, [pc, #276]	; 80246a4 <__ieee754_powf+0x3e4>
 8024592:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024596:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80246a8 <__ieee754_powf+0x3e8>
 802459a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 802459e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80245a2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80245a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80245aa:	eee5 6a07 	vfma.f32	s13, s10, s14
 80245ae:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80245b2:	eef0 7a45 	vmov.f32	s15, s10
 80245b6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80245ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80245be:	ee17 1a90 	vmov	r1, s15
 80245c2:	4011      	ands	r1, r2
 80245c4:	ee07 1a90 	vmov	s15, r1
 80245c8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80245cc:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80245d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80245d4:	ee27 7a24 	vmul.f32	s14, s14, s9
 80245d8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80245dc:	eeb0 6a47 	vmov.f32	s12, s14
 80245e0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80245e4:	ee16 1a10 	vmov	r1, s12
 80245e8:	4011      	ands	r1, r2
 80245ea:	ee06 1a90 	vmov	s13, r1
 80245ee:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80245f2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80246ac <__ieee754_powf+0x3ec>
 80245f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80246b0 <__ieee754_powf+0x3f0>
 80245fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80245fe:	ee06 1a10 	vmov	s12, r1
 8024602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024606:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80246b4 <__ieee754_powf+0x3f4>
 802460a:	492b      	ldr	r1, [pc, #172]	; (80246b8 <__ieee754_powf+0x3f8>)
 802460c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8024610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024614:	edd1 7a00 	vldr	s15, [r1]
 8024618:	ee37 7a27 	vadd.f32	s14, s14, s15
 802461c:	ee07 3a90 	vmov	s15, r3
 8024620:	4b26      	ldr	r3, [pc, #152]	; (80246bc <__ieee754_powf+0x3fc>)
 8024622:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8024626:	eef0 7a47 	vmov.f32	s15, s14
 802462a:	eee6 7a25 	vfma.f32	s15, s12, s11
 802462e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024632:	edd4 0a00 	vldr	s1, [r4]
 8024636:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802463a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802463e:	ee17 3a90 	vmov	r3, s15
 8024642:	4013      	ands	r3, r2
 8024644:	ee07 3a90 	vmov	s15, r3
 8024648:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802464c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8024650:	eee6 6a65 	vfms.f32	s13, s12, s11
 8024654:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024658:	e70f      	b.n	802447a <__ieee754_powf+0x1ba>
 802465a:	2401      	movs	r4, #1
 802465c:	e75d      	b.n	802451a <__ieee754_powf+0x25a>
 802465e:	bf00      	nop
 8024660:	08026198 	.word	0x08026198
 8024664:	00000000 	.word	0x00000000
 8024668:	3f7ffff7 	.word	0x3f7ffff7
 802466c:	7149f2ca 	.word	0x7149f2ca
 8024670:	3f800007 	.word	0x3f800007
 8024674:	3eaaaaab 	.word	0x3eaaaaab
 8024678:	3fb8aa3b 	.word	0x3fb8aa3b
 802467c:	36eca570 	.word	0x36eca570
 8024680:	3fb8aa00 	.word	0x3fb8aa00
 8024684:	4b800000 	.word	0x4b800000
 8024688:	001cc471 	.word	0x001cc471
 802468c:	005db3d6 	.word	0x005db3d6
 8024690:	08026234 	.word	0x08026234
 8024694:	fffff000 	.word	0xfffff000
 8024698:	3e6c3255 	.word	0x3e6c3255
 802469c:	3e53f142 	.word	0x3e53f142
 80246a0:	3e8ba305 	.word	0x3e8ba305
 80246a4:	3edb6db7 	.word	0x3edb6db7
 80246a8:	3f19999a 	.word	0x3f19999a
 80246ac:	3f76384f 	.word	0x3f76384f
 80246b0:	3f763800 	.word	0x3f763800
 80246b4:	369dc3a0 	.word	0x369dc3a0
 80246b8:	08026244 	.word	0x08026244
 80246bc:	0802623c 	.word	0x0802623c
 80246c0:	3338aa3c 	.word	0x3338aa3c
 80246c4:	f040 8092 	bne.w	80247ec <__ieee754_powf+0x52c>
 80246c8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80246c0 <__ieee754_powf+0x400>
 80246cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80246d0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80246d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80246d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246dc:	f73f aef6 	bgt.w	80244cc <__ieee754_powf+0x20c>
 80246e0:	15db      	asrs	r3, r3, #23
 80246e2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80246e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80246ea:	4103      	asrs	r3, r0
 80246ec:	4423      	add	r3, r4
 80246ee:	4949      	ldr	r1, [pc, #292]	; (8024814 <__ieee754_powf+0x554>)
 80246f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80246f4:	3a7f      	subs	r2, #127	; 0x7f
 80246f6:	4111      	asrs	r1, r2
 80246f8:	ea23 0101 	bic.w	r1, r3, r1
 80246fc:	ee07 1a10 	vmov	s14, r1
 8024700:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024704:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8024708:	f1c2 0217 	rsb	r2, r2, #23
 802470c:	4110      	asrs	r0, r2
 802470e:	2c00      	cmp	r4, #0
 8024710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024714:	bfb8      	it	lt
 8024716:	4240      	neglt	r0, r0
 8024718:	ee37 7aa0 	vadd.f32	s14, s15, s1
 802471c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8024818 <__ieee754_powf+0x558>
 8024720:	ee17 3a10 	vmov	r3, s14
 8024724:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024728:	f023 030f 	bic.w	r3, r3, #15
 802472c:	ee07 3a10 	vmov	s14, r3
 8024730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024734:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8024738:	eddf 7a38 	vldr	s15, [pc, #224]	; 802481c <__ieee754_powf+0x55c>
 802473c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024740:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8024744:	eddf 6a36 	vldr	s13, [pc, #216]	; 8024820 <__ieee754_powf+0x560>
 8024748:	eeb0 0a67 	vmov.f32	s0, s15
 802474c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8024750:	eeb0 6a40 	vmov.f32	s12, s0
 8024754:	eea7 6a66 	vfms.f32	s12, s14, s13
 8024758:	ee20 7a00 	vmul.f32	s14, s0, s0
 802475c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8024760:	eddf 6a30 	vldr	s13, [pc, #192]	; 8024824 <__ieee754_powf+0x564>
 8024764:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8024828 <__ieee754_powf+0x568>
 8024768:	eea7 6a26 	vfma.f32	s12, s14, s13
 802476c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 802482c <__ieee754_powf+0x56c>
 8024770:	eee6 6a07 	vfma.f32	s13, s12, s14
 8024774:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8024830 <__ieee754_powf+0x570>
 8024778:	eea6 6a87 	vfma.f32	s12, s13, s14
 802477c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8024834 <__ieee754_powf+0x574>
 8024780:	eee6 6a07 	vfma.f32	s13, s12, s14
 8024784:	eeb0 6a40 	vmov.f32	s12, s0
 8024788:	eea6 6ac7 	vfms.f32	s12, s13, s14
 802478c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8024790:	eeb0 7a46 	vmov.f32	s14, s12
 8024794:	ee77 6a66 	vsub.f32	s13, s14, s13
 8024798:	ee20 6a06 	vmul.f32	s12, s0, s12
 802479c:	eee0 7a27 	vfma.f32	s15, s0, s15
 80247a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80247a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80247a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80247ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80247b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80247b4:	ee10 3a10 	vmov	r3, s0
 80247b8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80247bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80247c0:	da1a      	bge.n	80247f8 <__ieee754_powf+0x538>
 80247c2:	f7fb fd85 	bl	80202d0 <scalbnf>
 80247c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80247ca:	e5cd      	b.n	8024368 <__ieee754_powf+0xa8>
 80247cc:	4a1a      	ldr	r2, [pc, #104]	; (8024838 <__ieee754_powf+0x578>)
 80247ce:	4293      	cmp	r3, r2
 80247d0:	dd02      	ble.n	80247d8 <__ieee754_powf+0x518>
 80247d2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 802483c <__ieee754_powf+0x57c>
 80247d6:	e67b      	b.n	80244d0 <__ieee754_powf+0x210>
 80247d8:	d108      	bne.n	80247ec <__ieee754_powf+0x52c>
 80247da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80247de:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80247e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247e6:	f6ff af7b 	blt.w	80246e0 <__ieee754_powf+0x420>
 80247ea:	e7f2      	b.n	80247d2 <__ieee754_powf+0x512>
 80247ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80247f0:	f73f af76 	bgt.w	80246e0 <__ieee754_powf+0x420>
 80247f4:	2000      	movs	r0, #0
 80247f6:	e78f      	b.n	8024718 <__ieee754_powf+0x458>
 80247f8:	ee00 3a10 	vmov	s0, r3
 80247fc:	e7e3      	b.n	80247c6 <__ieee754_powf+0x506>
 80247fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024802:	e5b1      	b.n	8024368 <__ieee754_powf+0xa8>
 8024804:	eeb0 0a68 	vmov.f32	s0, s17
 8024808:	e5ae      	b.n	8024368 <__ieee754_powf+0xa8>
 802480a:	eeb0 0a48 	vmov.f32	s0, s16
 802480e:	e5ab      	b.n	8024368 <__ieee754_powf+0xa8>
 8024810:	2600      	movs	r6, #0
 8024812:	e590      	b.n	8024336 <__ieee754_powf+0x76>
 8024814:	007fffff 	.word	0x007fffff
 8024818:	3f317218 	.word	0x3f317218
 802481c:	35bfbe8c 	.word	0x35bfbe8c
 8024820:	3f317200 	.word	0x3f317200
 8024824:	3331bb4c 	.word	0x3331bb4c
 8024828:	b5ddea0e 	.word	0xb5ddea0e
 802482c:	388ab355 	.word	0x388ab355
 8024830:	bb360b61 	.word	0xbb360b61
 8024834:	3e2aaaab 	.word	0x3e2aaaab
 8024838:	43160000 	.word	0x43160000
 802483c:	0da24260 	.word	0x0da24260

08024840 <__ieee754_rem_pio2f>:
 8024840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024842:	ee10 6a10 	vmov	r6, s0
 8024846:	4b8e      	ldr	r3, [pc, #568]	; (8024a80 <__ieee754_rem_pio2f+0x240>)
 8024848:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802484c:	429d      	cmp	r5, r3
 802484e:	b087      	sub	sp, #28
 8024850:	eef0 7a40 	vmov.f32	s15, s0
 8024854:	4604      	mov	r4, r0
 8024856:	dc05      	bgt.n	8024864 <__ieee754_rem_pio2f+0x24>
 8024858:	2300      	movs	r3, #0
 802485a:	ed80 0a00 	vstr	s0, [r0]
 802485e:	6043      	str	r3, [r0, #4]
 8024860:	2000      	movs	r0, #0
 8024862:	e01a      	b.n	802489a <__ieee754_rem_pio2f+0x5a>
 8024864:	4b87      	ldr	r3, [pc, #540]	; (8024a84 <__ieee754_rem_pio2f+0x244>)
 8024866:	429d      	cmp	r5, r3
 8024868:	dc46      	bgt.n	80248f8 <__ieee754_rem_pio2f+0xb8>
 802486a:	2e00      	cmp	r6, #0
 802486c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8024a88 <__ieee754_rem_pio2f+0x248>
 8024870:	4b86      	ldr	r3, [pc, #536]	; (8024a8c <__ieee754_rem_pio2f+0x24c>)
 8024872:	f025 050f 	bic.w	r5, r5, #15
 8024876:	dd1f      	ble.n	80248b8 <__ieee754_rem_pio2f+0x78>
 8024878:	429d      	cmp	r5, r3
 802487a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802487e:	d00e      	beq.n	802489e <__ieee754_rem_pio2f+0x5e>
 8024880:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8024a90 <__ieee754_rem_pio2f+0x250>
 8024884:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8024888:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802488c:	ed80 0a00 	vstr	s0, [r0]
 8024890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024894:	2001      	movs	r0, #1
 8024896:	edc4 7a01 	vstr	s15, [r4, #4]
 802489a:	b007      	add	sp, #28
 802489c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802489e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8024a94 <__ieee754_rem_pio2f+0x254>
 80248a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8024a98 <__ieee754_rem_pio2f+0x258>
 80248a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80248aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80248ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80248b2:	edc0 6a00 	vstr	s13, [r0]
 80248b6:	e7eb      	b.n	8024890 <__ieee754_rem_pio2f+0x50>
 80248b8:	429d      	cmp	r5, r3
 80248ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80248be:	d00e      	beq.n	80248de <__ieee754_rem_pio2f+0x9e>
 80248c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8024a90 <__ieee754_rem_pio2f+0x250>
 80248c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80248c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80248cc:	ed80 0a00 	vstr	s0, [r0]
 80248d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80248d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80248d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80248dc:	e7dd      	b.n	802489a <__ieee754_rem_pio2f+0x5a>
 80248de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8024a94 <__ieee754_rem_pio2f+0x254>
 80248e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8024a98 <__ieee754_rem_pio2f+0x258>
 80248e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80248ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80248ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80248f2:	edc0 6a00 	vstr	s13, [r0]
 80248f6:	e7eb      	b.n	80248d0 <__ieee754_rem_pio2f+0x90>
 80248f8:	4b68      	ldr	r3, [pc, #416]	; (8024a9c <__ieee754_rem_pio2f+0x25c>)
 80248fa:	429d      	cmp	r5, r3
 80248fc:	dc72      	bgt.n	80249e4 <__ieee754_rem_pio2f+0x1a4>
 80248fe:	f7ff fb5b 	bl	8023fb8 <fabsf>
 8024902:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8024aa0 <__ieee754_rem_pio2f+0x260>
 8024906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802490a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802490e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024916:	ee17 0a90 	vmov	r0, s15
 802491a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8024a88 <__ieee754_rem_pio2f+0x248>
 802491e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8024922:	281f      	cmp	r0, #31
 8024924:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8024a90 <__ieee754_rem_pio2f+0x250>
 8024928:	ee67 7a27 	vmul.f32	s15, s14, s15
 802492c:	eeb1 6a47 	vneg.f32	s12, s14
 8024930:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024934:	ee16 2a90 	vmov	r2, s13
 8024938:	dc1c      	bgt.n	8024974 <__ieee754_rem_pio2f+0x134>
 802493a:	495a      	ldr	r1, [pc, #360]	; (8024aa4 <__ieee754_rem_pio2f+0x264>)
 802493c:	1e47      	subs	r7, r0, #1
 802493e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8024942:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024946:	428b      	cmp	r3, r1
 8024948:	d014      	beq.n	8024974 <__ieee754_rem_pio2f+0x134>
 802494a:	6022      	str	r2, [r4, #0]
 802494c:	ed94 7a00 	vldr	s14, [r4]
 8024950:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024954:	2e00      	cmp	r6, #0
 8024956:	ee30 0a67 	vsub.f32	s0, s0, s15
 802495a:	ed84 0a01 	vstr	s0, [r4, #4]
 802495e:	da9c      	bge.n	802489a <__ieee754_rem_pio2f+0x5a>
 8024960:	eeb1 7a47 	vneg.f32	s14, s14
 8024964:	eeb1 0a40 	vneg.f32	s0, s0
 8024968:	ed84 7a00 	vstr	s14, [r4]
 802496c:	ed84 0a01 	vstr	s0, [r4, #4]
 8024970:	4240      	negs	r0, r0
 8024972:	e792      	b.n	802489a <__ieee754_rem_pio2f+0x5a>
 8024974:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8024978:	15eb      	asrs	r3, r5, #23
 802497a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 802497e:	2d08      	cmp	r5, #8
 8024980:	dde3      	ble.n	802494a <__ieee754_rem_pio2f+0x10a>
 8024982:	eddf 7a44 	vldr	s15, [pc, #272]	; 8024a94 <__ieee754_rem_pio2f+0x254>
 8024986:	eef0 6a40 	vmov.f32	s13, s0
 802498a:	eee6 6a27 	vfma.f32	s13, s12, s15
 802498e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8024992:	eea6 0a27 	vfma.f32	s0, s12, s15
 8024996:	eddf 7a40 	vldr	s15, [pc, #256]	; 8024a98 <__ieee754_rem_pio2f+0x258>
 802499a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 802499e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80249a2:	eef0 7a40 	vmov.f32	s15, s0
 80249a6:	ee15 2a90 	vmov	r2, s11
 80249aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80249ae:	1a5b      	subs	r3, r3, r1
 80249b0:	2b19      	cmp	r3, #25
 80249b2:	dc04      	bgt.n	80249be <__ieee754_rem_pio2f+0x17e>
 80249b4:	edc4 5a00 	vstr	s11, [r4]
 80249b8:	eeb0 0a66 	vmov.f32	s0, s13
 80249bc:	e7c6      	b.n	802494c <__ieee754_rem_pio2f+0x10c>
 80249be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8024aa8 <__ieee754_rem_pio2f+0x268>
 80249c2:	eeb0 0a66 	vmov.f32	s0, s13
 80249c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80249ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80249ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 8024aac <__ieee754_rem_pio2f+0x26c>
 80249d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80249d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80249da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80249de:	ed84 7a00 	vstr	s14, [r4]
 80249e2:	e7b3      	b.n	802494c <__ieee754_rem_pio2f+0x10c>
 80249e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80249e8:	db06      	blt.n	80249f8 <__ieee754_rem_pio2f+0x1b8>
 80249ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80249ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80249f2:	edc0 7a00 	vstr	s15, [r0]
 80249f6:	e733      	b.n	8024860 <__ieee754_rem_pio2f+0x20>
 80249f8:	15ea      	asrs	r2, r5, #23
 80249fa:	3a86      	subs	r2, #134	; 0x86
 80249fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8024a00:	ee07 3a90 	vmov	s15, r3
 8024a04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024a08:	eddf 6a29 	vldr	s13, [pc, #164]	; 8024ab0 <__ieee754_rem_pio2f+0x270>
 8024a0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024a14:	ed8d 7a03 	vstr	s14, [sp, #12]
 8024a18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024a1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024a20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024a28:	ed8d 7a04 	vstr	s14, [sp, #16]
 8024a2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024a30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a38:	edcd 7a05 	vstr	s15, [sp, #20]
 8024a3c:	d11e      	bne.n	8024a7c <__ieee754_rem_pio2f+0x23c>
 8024a3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8024a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024a46:	bf14      	ite	ne
 8024a48:	2302      	movne	r3, #2
 8024a4a:	2301      	moveq	r3, #1
 8024a4c:	4919      	ldr	r1, [pc, #100]	; (8024ab4 <__ieee754_rem_pio2f+0x274>)
 8024a4e:	9101      	str	r1, [sp, #4]
 8024a50:	2102      	movs	r1, #2
 8024a52:	9100      	str	r1, [sp, #0]
 8024a54:	a803      	add	r0, sp, #12
 8024a56:	4621      	mov	r1, r4
 8024a58:	f000 f892 	bl	8024b80 <__kernel_rem_pio2f>
 8024a5c:	2e00      	cmp	r6, #0
 8024a5e:	f6bf af1c 	bge.w	802489a <__ieee754_rem_pio2f+0x5a>
 8024a62:	edd4 7a00 	vldr	s15, [r4]
 8024a66:	eef1 7a67 	vneg.f32	s15, s15
 8024a6a:	edc4 7a00 	vstr	s15, [r4]
 8024a6e:	edd4 7a01 	vldr	s15, [r4, #4]
 8024a72:	eef1 7a67 	vneg.f32	s15, s15
 8024a76:	edc4 7a01 	vstr	s15, [r4, #4]
 8024a7a:	e779      	b.n	8024970 <__ieee754_rem_pio2f+0x130>
 8024a7c:	2303      	movs	r3, #3
 8024a7e:	e7e5      	b.n	8024a4c <__ieee754_rem_pio2f+0x20c>
 8024a80:	3f490fd8 	.word	0x3f490fd8
 8024a84:	4016cbe3 	.word	0x4016cbe3
 8024a88:	3fc90f80 	.word	0x3fc90f80
 8024a8c:	3fc90fd0 	.word	0x3fc90fd0
 8024a90:	37354443 	.word	0x37354443
 8024a94:	37354400 	.word	0x37354400
 8024a98:	2e85a308 	.word	0x2e85a308
 8024a9c:	43490f80 	.word	0x43490f80
 8024aa0:	3f22f984 	.word	0x3f22f984
 8024aa4:	0802624c 	.word	0x0802624c
 8024aa8:	2e85a300 	.word	0x2e85a300
 8024aac:	248d3132 	.word	0x248d3132
 8024ab0:	43800000 	.word	0x43800000
 8024ab4:	080262cc 	.word	0x080262cc

08024ab8 <__ieee754_sqrtf>:
 8024ab8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8024abc:	4770      	bx	lr
	...

08024ac0 <__kernel_cosf>:
 8024ac0:	ee10 3a10 	vmov	r3, s0
 8024ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024ac8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8024acc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8024ad0:	da05      	bge.n	8024ade <__kernel_cosf+0x1e>
 8024ad2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024ad6:	ee17 2a90 	vmov	r2, s15
 8024ada:	2a00      	cmp	r2, #0
 8024adc:	d03d      	beq.n	8024b5a <__kernel_cosf+0x9a>
 8024ade:	ee60 5a00 	vmul.f32	s11, s0, s0
 8024ae2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8024b60 <__kernel_cosf+0xa0>
 8024ae6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8024b64 <__kernel_cosf+0xa4>
 8024aea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8024b68 <__kernel_cosf+0xa8>
 8024aee:	4a1f      	ldr	r2, [pc, #124]	; (8024b6c <__kernel_cosf+0xac>)
 8024af0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8024af4:	4293      	cmp	r3, r2
 8024af6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8024b70 <__kernel_cosf+0xb0>
 8024afa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024afe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8024b74 <__kernel_cosf+0xb4>
 8024b02:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024b06:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8024b78 <__kernel_cosf+0xb8>
 8024b0a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024b0e:	eeb0 7a66 	vmov.f32	s14, s13
 8024b12:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8024b16:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8024b1a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8024b1e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8024b22:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8024b26:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024b2a:	dc04      	bgt.n	8024b36 <__kernel_cosf+0x76>
 8024b2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8024b30:	ee36 0a47 	vsub.f32	s0, s12, s14
 8024b34:	4770      	bx	lr
 8024b36:	4a11      	ldr	r2, [pc, #68]	; (8024b7c <__kernel_cosf+0xbc>)
 8024b38:	4293      	cmp	r3, r2
 8024b3a:	bfda      	itte	le
 8024b3c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8024b40:	ee06 3a90 	vmovle	s13, r3
 8024b44:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8024b48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024b4c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8024b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024b54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024b58:	4770      	bx	lr
 8024b5a:	eeb0 0a46 	vmov.f32	s0, s12
 8024b5e:	4770      	bx	lr
 8024b60:	ad47d74e 	.word	0xad47d74e
 8024b64:	310f74f6 	.word	0x310f74f6
 8024b68:	3d2aaaab 	.word	0x3d2aaaab
 8024b6c:	3e999999 	.word	0x3e999999
 8024b70:	b493f27c 	.word	0xb493f27c
 8024b74:	37d00d01 	.word	0x37d00d01
 8024b78:	bab60b61 	.word	0xbab60b61
 8024b7c:	3f480000 	.word	0x3f480000

08024b80 <__kernel_rem_pio2f>:
 8024b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b84:	ed2d 8b04 	vpush	{d8-d9}
 8024b88:	b0d7      	sub	sp, #348	; 0x15c
 8024b8a:	4616      	mov	r6, r2
 8024b8c:	4698      	mov	r8, r3
 8024b8e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8024b90:	4bbb      	ldr	r3, [pc, #748]	; (8024e80 <__kernel_rem_pio2f+0x300>)
 8024b92:	9001      	str	r0, [sp, #4]
 8024b94:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8024b98:	1d33      	adds	r3, r6, #4
 8024b9a:	460d      	mov	r5, r1
 8024b9c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8024ba0:	db29      	blt.n	8024bf6 <__kernel_rem_pio2f+0x76>
 8024ba2:	1ef1      	subs	r1, r6, #3
 8024ba4:	bf48      	it	mi
 8024ba6:	1d31      	addmi	r1, r6, #4
 8024ba8:	10c9      	asrs	r1, r1, #3
 8024baa:	1c4c      	adds	r4, r1, #1
 8024bac:	00e3      	lsls	r3, r4, #3
 8024bae:	9302      	str	r3, [sp, #8]
 8024bb0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8024bb2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8024bb6:	eba1 0009 	sub.w	r0, r1, r9
 8024bba:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8024bbe:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8024bc2:	eb07 0c09 	add.w	ip, r7, r9
 8024bc6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8024bca:	2300      	movs	r3, #0
 8024bcc:	4563      	cmp	r3, ip
 8024bce:	dd14      	ble.n	8024bfa <__kernel_rem_pio2f+0x7a>
 8024bd0:	ab1a      	add	r3, sp, #104	; 0x68
 8024bd2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8024bd6:	46cc      	mov	ip, r9
 8024bd8:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8024bdc:	f1c8 0b01 	rsb	fp, r8, #1
 8024be0:	eb0b 020c 	add.w	r2, fp, ip
 8024be4:	4297      	cmp	r7, r2
 8024be6:	db27      	blt.n	8024c38 <__kernel_rem_pio2f+0xb8>
 8024be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8024bec:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8024bf0:	4618      	mov	r0, r3
 8024bf2:	2200      	movs	r2, #0
 8024bf4:	e016      	b.n	8024c24 <__kernel_rem_pio2f+0xa4>
 8024bf6:	2100      	movs	r1, #0
 8024bf8:	e7d7      	b.n	8024baa <__kernel_rem_pio2f+0x2a>
 8024bfa:	42d8      	cmn	r0, r3
 8024bfc:	bf5d      	ittte	pl
 8024bfe:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8024c02:	ee07 2a90 	vmovpl	s15, r2
 8024c06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8024c0a:	eef0 7a47 	vmovmi.f32	s15, s14
 8024c0e:	ecea 7a01 	vstmia	sl!, {s15}
 8024c12:	3301      	adds	r3, #1
 8024c14:	e7da      	b.n	8024bcc <__kernel_rem_pio2f+0x4c>
 8024c16:	ecfe 6a01 	vldmia	lr!, {s13}
 8024c1a:	ed90 7a00 	vldr	s14, [r0]
 8024c1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024c22:	3201      	adds	r2, #1
 8024c24:	454a      	cmp	r2, r9
 8024c26:	f1a0 0004 	sub.w	r0, r0, #4
 8024c2a:	ddf4      	ble.n	8024c16 <__kernel_rem_pio2f+0x96>
 8024c2c:	ecea 7a01 	vstmia	sl!, {s15}
 8024c30:	3304      	adds	r3, #4
 8024c32:	f10c 0c01 	add.w	ip, ip, #1
 8024c36:	e7d3      	b.n	8024be0 <__kernel_rem_pio2f+0x60>
 8024c38:	ab06      	add	r3, sp, #24
 8024c3a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8024c3e:	9304      	str	r3, [sp, #16]
 8024c40:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8024c42:	eddf 8a92 	vldr	s17, [pc, #584]	; 8024e8c <__kernel_rem_pio2f+0x30c>
 8024c46:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8024e88 <__kernel_rem_pio2f+0x308>
 8024c4a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8024c4e:	9303      	str	r3, [sp, #12]
 8024c50:	46ba      	mov	sl, r7
 8024c52:	ab56      	add	r3, sp, #344	; 0x158
 8024c54:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8024c58:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8024c5c:	ab06      	add	r3, sp, #24
 8024c5e:	4618      	mov	r0, r3
 8024c60:	4652      	mov	r2, sl
 8024c62:	2a00      	cmp	r2, #0
 8024c64:	dc51      	bgt.n	8024d0a <__kernel_rem_pio2f+0x18a>
 8024c66:	4620      	mov	r0, r4
 8024c68:	9305      	str	r3, [sp, #20]
 8024c6a:	f7fb fb31 	bl	80202d0 <scalbnf>
 8024c6e:	eeb0 8a40 	vmov.f32	s16, s0
 8024c72:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8024c76:	ee28 0a00 	vmul.f32	s0, s16, s0
 8024c7a:	f000 fa53 	bl	8025124 <floorf>
 8024c7e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8024c82:	eea0 8a67 	vfms.f32	s16, s0, s15
 8024c86:	2c00      	cmp	r4, #0
 8024c88:	9b05      	ldr	r3, [sp, #20]
 8024c8a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8024c8e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8024c92:	edcd 7a00 	vstr	s15, [sp]
 8024c96:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024c9a:	dd4b      	ble.n	8024d34 <__kernel_rem_pio2f+0x1b4>
 8024c9c:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8024ca0:	aa06      	add	r2, sp, #24
 8024ca2:	f1c4 0e08 	rsb	lr, r4, #8
 8024ca6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8024caa:	ee17 1a90 	vmov	r1, s15
 8024cae:	fa42 f00e 	asr.w	r0, r2, lr
 8024cb2:	4401      	add	r1, r0
 8024cb4:	9100      	str	r1, [sp, #0]
 8024cb6:	fa00 f00e 	lsl.w	r0, r0, lr
 8024cba:	a906      	add	r1, sp, #24
 8024cbc:	1a12      	subs	r2, r2, r0
 8024cbe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8024cc2:	f1c4 0007 	rsb	r0, r4, #7
 8024cc6:	fa42 fb00 	asr.w	fp, r2, r0
 8024cca:	f1bb 0f00 	cmp.w	fp, #0
 8024cce:	dd43      	ble.n	8024d58 <__kernel_rem_pio2f+0x1d8>
 8024cd0:	9a00      	ldr	r2, [sp, #0]
 8024cd2:	f04f 0e00 	mov.w	lr, #0
 8024cd6:	3201      	adds	r2, #1
 8024cd8:	9200      	str	r2, [sp, #0]
 8024cda:	4670      	mov	r0, lr
 8024cdc:	45f2      	cmp	sl, lr
 8024cde:	dc6c      	bgt.n	8024dba <__kernel_rem_pio2f+0x23a>
 8024ce0:	2c00      	cmp	r4, #0
 8024ce2:	dd04      	ble.n	8024cee <__kernel_rem_pio2f+0x16e>
 8024ce4:	2c01      	cmp	r4, #1
 8024ce6:	d079      	beq.n	8024ddc <__kernel_rem_pio2f+0x25c>
 8024ce8:	2c02      	cmp	r4, #2
 8024cea:	f000 8082 	beq.w	8024df2 <__kernel_rem_pio2f+0x272>
 8024cee:	f1bb 0f02 	cmp.w	fp, #2
 8024cf2:	d131      	bne.n	8024d58 <__kernel_rem_pio2f+0x1d8>
 8024cf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024cf8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8024cfc:	b360      	cbz	r0, 8024d58 <__kernel_rem_pio2f+0x1d8>
 8024cfe:	4620      	mov	r0, r4
 8024d00:	f7fb fae6 	bl	80202d0 <scalbnf>
 8024d04:	ee38 8a40 	vsub.f32	s16, s16, s0
 8024d08:	e026      	b.n	8024d58 <__kernel_rem_pio2f+0x1d8>
 8024d0a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8024d0e:	3a01      	subs	r2, #1
 8024d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024d14:	a942      	add	r1, sp, #264	; 0x108
 8024d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024d1a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8024d1e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8024d22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024d26:	eca0 0a01 	vstmia	r0!, {s0}
 8024d2a:	ed9c 0a00 	vldr	s0, [ip]
 8024d2e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8024d32:	e796      	b.n	8024c62 <__kernel_rem_pio2f+0xe2>
 8024d34:	d107      	bne.n	8024d46 <__kernel_rem_pio2f+0x1c6>
 8024d36:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8024d3a:	a906      	add	r1, sp, #24
 8024d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8024d40:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8024d44:	e7c1      	b.n	8024cca <__kernel_rem_pio2f+0x14a>
 8024d46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024d4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8024d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024d52:	da2f      	bge.n	8024db4 <__kernel_rem_pio2f+0x234>
 8024d54:	f04f 0b00 	mov.w	fp, #0
 8024d58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8024d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024d60:	f040 8098 	bne.w	8024e94 <__kernel_rem_pio2f+0x314>
 8024d64:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8024d68:	469c      	mov	ip, r3
 8024d6a:	2200      	movs	r2, #0
 8024d6c:	45bc      	cmp	ip, r7
 8024d6e:	da48      	bge.n	8024e02 <__kernel_rem_pio2f+0x282>
 8024d70:	2a00      	cmp	r2, #0
 8024d72:	d05f      	beq.n	8024e34 <__kernel_rem_pio2f+0x2b4>
 8024d74:	aa06      	add	r2, sp, #24
 8024d76:	3c08      	subs	r4, #8
 8024d78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024d7c:	2900      	cmp	r1, #0
 8024d7e:	d07d      	beq.n	8024e7c <__kernel_rem_pio2f+0x2fc>
 8024d80:	4620      	mov	r0, r4
 8024d82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024d86:	9301      	str	r3, [sp, #4]
 8024d88:	f7fb faa2 	bl	80202d0 <scalbnf>
 8024d8c:	9b01      	ldr	r3, [sp, #4]
 8024d8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8024e8c <__kernel_rem_pio2f+0x30c>
 8024d92:	4619      	mov	r1, r3
 8024d94:	2900      	cmp	r1, #0
 8024d96:	f280 80af 	bge.w	8024ef8 <__kernel_rem_pio2f+0x378>
 8024d9a:	4618      	mov	r0, r3
 8024d9c:	2400      	movs	r4, #0
 8024d9e:	2800      	cmp	r0, #0
 8024da0:	f2c0 80d0 	blt.w	8024f44 <__kernel_rem_pio2f+0x3c4>
 8024da4:	a942      	add	r1, sp, #264	; 0x108
 8024da6:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8024daa:	4a36      	ldr	r2, [pc, #216]	; (8024e84 <__kernel_rem_pio2f+0x304>)
 8024dac:	eddf 7a38 	vldr	s15, [pc, #224]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8024db0:	2100      	movs	r1, #0
 8024db2:	e0bb      	b.n	8024f2c <__kernel_rem_pio2f+0x3ac>
 8024db4:	f04f 0b02 	mov.w	fp, #2
 8024db8:	e78a      	b.n	8024cd0 <__kernel_rem_pio2f+0x150>
 8024dba:	681a      	ldr	r2, [r3, #0]
 8024dbc:	b948      	cbnz	r0, 8024dd2 <__kernel_rem_pio2f+0x252>
 8024dbe:	b11a      	cbz	r2, 8024dc8 <__kernel_rem_pio2f+0x248>
 8024dc0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024dc4:	601a      	str	r2, [r3, #0]
 8024dc6:	2201      	movs	r2, #1
 8024dc8:	f10e 0e01 	add.w	lr, lr, #1
 8024dcc:	3304      	adds	r3, #4
 8024dce:	4610      	mov	r0, r2
 8024dd0:	e784      	b.n	8024cdc <__kernel_rem_pio2f+0x15c>
 8024dd2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8024dd6:	601a      	str	r2, [r3, #0]
 8024dd8:	4602      	mov	r2, r0
 8024dda:	e7f5      	b.n	8024dc8 <__kernel_rem_pio2f+0x248>
 8024ddc:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8024de0:	ab06      	add	r3, sp, #24
 8024de2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8024de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024dea:	aa06      	add	r2, sp, #24
 8024dec:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8024df0:	e77d      	b.n	8024cee <__kernel_rem_pio2f+0x16e>
 8024df2:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8024df6:	ab06      	add	r3, sp, #24
 8024df8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8024dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024e00:	e7f3      	b.n	8024dea <__kernel_rem_pio2f+0x26a>
 8024e02:	a906      	add	r1, sp, #24
 8024e04:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8024e08:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8024e0c:	4302      	orrs	r2, r0
 8024e0e:	e7ad      	b.n	8024d6c <__kernel_rem_pio2f+0x1ec>
 8024e10:	3001      	adds	r0, #1
 8024e12:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8024e16:	2a00      	cmp	r2, #0
 8024e18:	d0fa      	beq.n	8024e10 <__kernel_rem_pio2f+0x290>
 8024e1a:	a91a      	add	r1, sp, #104	; 0x68
 8024e1c:	eb0a 0208 	add.w	r2, sl, r8
 8024e20:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8024e24:	f10a 0301 	add.w	r3, sl, #1
 8024e28:	eb0a 0100 	add.w	r1, sl, r0
 8024e2c:	4299      	cmp	r1, r3
 8024e2e:	da04      	bge.n	8024e3a <__kernel_rem_pio2f+0x2ba>
 8024e30:	468a      	mov	sl, r1
 8024e32:	e70e      	b.n	8024c52 <__kernel_rem_pio2f+0xd2>
 8024e34:	9b04      	ldr	r3, [sp, #16]
 8024e36:	2001      	movs	r0, #1
 8024e38:	e7eb      	b.n	8024e12 <__kernel_rem_pio2f+0x292>
 8024e3a:	9803      	ldr	r0, [sp, #12]
 8024e3c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8024e40:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8024e44:	9000      	str	r0, [sp, #0]
 8024e46:	ee07 0a90 	vmov	s15, r0
 8024e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024e4e:	2000      	movs	r0, #0
 8024e50:	ece2 7a01 	vstmia	r2!, {s15}
 8024e54:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8024e58:	4696      	mov	lr, r2
 8024e5a:	4548      	cmp	r0, r9
 8024e5c:	dd06      	ble.n	8024e6c <__kernel_rem_pio2f+0x2ec>
 8024e5e:	a842      	add	r0, sp, #264	; 0x108
 8024e60:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8024e64:	edc0 7a00 	vstr	s15, [r0]
 8024e68:	3301      	adds	r3, #1
 8024e6a:	e7df      	b.n	8024e2c <__kernel_rem_pio2f+0x2ac>
 8024e6c:	ecfc 6a01 	vldmia	ip!, {s13}
 8024e70:	ed3e 7a01 	vldmdb	lr!, {s14}
 8024e74:	3001      	adds	r0, #1
 8024e76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024e7a:	e7ee      	b.n	8024e5a <__kernel_rem_pio2f+0x2da>
 8024e7c:	3b01      	subs	r3, #1
 8024e7e:	e779      	b.n	8024d74 <__kernel_rem_pio2f+0x1f4>
 8024e80:	08026610 	.word	0x08026610
 8024e84:	080265e4 	.word	0x080265e4
 8024e88:	43800000 	.word	0x43800000
 8024e8c:	3b800000 	.word	0x3b800000
 8024e90:	00000000 	.word	0x00000000
 8024e94:	9b02      	ldr	r3, [sp, #8]
 8024e96:	eeb0 0a48 	vmov.f32	s0, s16
 8024e9a:	1b98      	subs	r0, r3, r6
 8024e9c:	f7fb fa18 	bl	80202d0 <scalbnf>
 8024ea0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8024e88 <__kernel_rem_pio2f+0x308>
 8024ea4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8024ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024eac:	db1b      	blt.n	8024ee6 <__kernel_rem_pio2f+0x366>
 8024eae:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8024e8c <__kernel_rem_pio2f+0x30c>
 8024eb2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8024eb6:	aa06      	add	r2, sp, #24
 8024eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024ebc:	a906      	add	r1, sp, #24
 8024ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024ec2:	3408      	adds	r4, #8
 8024ec4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8024ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024ecc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024ed0:	ee10 3a10 	vmov	r3, s0
 8024ed4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8024ed8:	ee17 2a90 	vmov	r2, s15
 8024edc:	f10a 0301 	add.w	r3, sl, #1
 8024ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8024ee4:	e74c      	b.n	8024d80 <__kernel_rem_pio2f+0x200>
 8024ee6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8024eea:	aa06      	add	r2, sp, #24
 8024eec:	ee10 3a10 	vmov	r3, s0
 8024ef0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8024ef4:	4653      	mov	r3, sl
 8024ef6:	e743      	b.n	8024d80 <__kernel_rem_pio2f+0x200>
 8024ef8:	aa42      	add	r2, sp, #264	; 0x108
 8024efa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8024efe:	aa06      	add	r2, sp, #24
 8024f00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8024f04:	9201      	str	r2, [sp, #4]
 8024f06:	ee07 2a90 	vmov	s15, r2
 8024f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024f0e:	3901      	subs	r1, #1
 8024f10:	ee67 7a80 	vmul.f32	s15, s15, s0
 8024f14:	ee20 0a07 	vmul.f32	s0, s0, s14
 8024f18:	edc0 7a00 	vstr	s15, [r0]
 8024f1c:	e73a      	b.n	8024d94 <__kernel_rem_pio2f+0x214>
 8024f1e:	ecf2 6a01 	vldmia	r2!, {s13}
 8024f22:	ecb6 7a01 	vldmia	r6!, {s14}
 8024f26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8024f2a:	3101      	adds	r1, #1
 8024f2c:	42b9      	cmp	r1, r7
 8024f2e:	dc01      	bgt.n	8024f34 <__kernel_rem_pio2f+0x3b4>
 8024f30:	428c      	cmp	r4, r1
 8024f32:	daf4      	bge.n	8024f1e <__kernel_rem_pio2f+0x39e>
 8024f34:	aa56      	add	r2, sp, #344	; 0x158
 8024f36:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8024f3a:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8024f3e:	3801      	subs	r0, #1
 8024f40:	3401      	adds	r4, #1
 8024f42:	e72c      	b.n	8024d9e <__kernel_rem_pio2f+0x21e>
 8024f44:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8024f46:	2a02      	cmp	r2, #2
 8024f48:	dc0a      	bgt.n	8024f60 <__kernel_rem_pio2f+0x3e0>
 8024f4a:	2a00      	cmp	r2, #0
 8024f4c:	dc61      	bgt.n	8025012 <__kernel_rem_pio2f+0x492>
 8024f4e:	d03c      	beq.n	8024fca <__kernel_rem_pio2f+0x44a>
 8024f50:	9b00      	ldr	r3, [sp, #0]
 8024f52:	f003 0007 	and.w	r0, r3, #7
 8024f56:	b057      	add	sp, #348	; 0x15c
 8024f58:	ecbd 8b04 	vpop	{d8-d9}
 8024f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f60:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8024f62:	2a03      	cmp	r2, #3
 8024f64:	d1f4      	bne.n	8024f50 <__kernel_rem_pio2f+0x3d0>
 8024f66:	aa2e      	add	r2, sp, #184	; 0xb8
 8024f68:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024f6c:	4608      	mov	r0, r1
 8024f6e:	461c      	mov	r4, r3
 8024f70:	2c00      	cmp	r4, #0
 8024f72:	f1a0 0004 	sub.w	r0, r0, #4
 8024f76:	dc59      	bgt.n	802502c <__kernel_rem_pio2f+0x4ac>
 8024f78:	4618      	mov	r0, r3
 8024f7a:	2801      	cmp	r0, #1
 8024f7c:	f1a1 0104 	sub.w	r1, r1, #4
 8024f80:	dc64      	bgt.n	802504c <__kernel_rem_pio2f+0x4cc>
 8024f82:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8024f86:	2b01      	cmp	r3, #1
 8024f88:	dc70      	bgt.n	802506c <__kernel_rem_pio2f+0x4ec>
 8024f8a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8024f8e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8024f92:	f1bb 0f00 	cmp.w	fp, #0
 8024f96:	d172      	bne.n	802507e <__kernel_rem_pio2f+0x4fe>
 8024f98:	edc5 6a00 	vstr	s13, [r5]
 8024f9c:	ed85 7a01 	vstr	s14, [r5, #4]
 8024fa0:	edc5 7a02 	vstr	s15, [r5, #8]
 8024fa4:	e7d4      	b.n	8024f50 <__kernel_rem_pio2f+0x3d0>
 8024fa6:	aa2e      	add	r2, sp, #184	; 0xb8
 8024fa8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024fac:	ed91 7a00 	vldr	s14, [r1]
 8024fb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024fb4:	3b01      	subs	r3, #1
 8024fb6:	2b00      	cmp	r3, #0
 8024fb8:	daf5      	bge.n	8024fa6 <__kernel_rem_pio2f+0x426>
 8024fba:	f1bb 0f00 	cmp.w	fp, #0
 8024fbe:	d001      	beq.n	8024fc4 <__kernel_rem_pio2f+0x444>
 8024fc0:	eef1 7a67 	vneg.f32	s15, s15
 8024fc4:	edc5 7a00 	vstr	s15, [r5]
 8024fc8:	e7c2      	b.n	8024f50 <__kernel_rem_pio2f+0x3d0>
 8024fca:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8024fce:	e7f2      	b.n	8024fb6 <__kernel_rem_pio2f+0x436>
 8024fd0:	aa2e      	add	r2, sp, #184	; 0xb8
 8024fd2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8024fd6:	edd0 7a00 	vldr	s15, [r0]
 8024fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8024fde:	3901      	subs	r1, #1
 8024fe0:	2900      	cmp	r1, #0
 8024fe2:	daf5      	bge.n	8024fd0 <__kernel_rem_pio2f+0x450>
 8024fe4:	f1bb 0f00 	cmp.w	fp, #0
 8024fe8:	d017      	beq.n	802501a <__kernel_rem_pio2f+0x49a>
 8024fea:	eef1 7a47 	vneg.f32	s15, s14
 8024fee:	edc5 7a00 	vstr	s15, [r5]
 8024ff2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8024ff6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024ffa:	a82f      	add	r0, sp, #188	; 0xbc
 8024ffc:	2101      	movs	r1, #1
 8024ffe:	428b      	cmp	r3, r1
 8025000:	da0e      	bge.n	8025020 <__kernel_rem_pio2f+0x4a0>
 8025002:	f1bb 0f00 	cmp.w	fp, #0
 8025006:	d001      	beq.n	802500c <__kernel_rem_pio2f+0x48c>
 8025008:	eef1 7a67 	vneg.f32	s15, s15
 802500c:	edc5 7a01 	vstr	s15, [r5, #4]
 8025010:	e79e      	b.n	8024f50 <__kernel_rem_pio2f+0x3d0>
 8025012:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8024e90 <__kernel_rem_pio2f+0x310>
 8025016:	4619      	mov	r1, r3
 8025018:	e7e2      	b.n	8024fe0 <__kernel_rem_pio2f+0x460>
 802501a:	eef0 7a47 	vmov.f32	s15, s14
 802501e:	e7e6      	b.n	8024fee <__kernel_rem_pio2f+0x46e>
 8025020:	ecb0 7a01 	vldmia	r0!, {s14}
 8025024:	3101      	adds	r1, #1
 8025026:	ee77 7a87 	vadd.f32	s15, s15, s14
 802502a:	e7e8      	b.n	8024ffe <__kernel_rem_pio2f+0x47e>
 802502c:	edd0 7a00 	vldr	s15, [r0]
 8025030:	edd0 6a01 	vldr	s13, [r0, #4]
 8025034:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025038:	3c01      	subs	r4, #1
 802503a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802503e:	ed80 7a00 	vstr	s14, [r0]
 8025042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025046:	edc0 7a01 	vstr	s15, [r0, #4]
 802504a:	e791      	b.n	8024f70 <__kernel_rem_pio2f+0x3f0>
 802504c:	edd1 7a00 	vldr	s15, [r1]
 8025050:	edd1 6a01 	vldr	s13, [r1, #4]
 8025054:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025058:	3801      	subs	r0, #1
 802505a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802505e:	ed81 7a00 	vstr	s14, [r1]
 8025062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025066:	edc1 7a01 	vstr	s15, [r1, #4]
 802506a:	e786      	b.n	8024f7a <__kernel_rem_pio2f+0x3fa>
 802506c:	aa2e      	add	r2, sp, #184	; 0xb8
 802506e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8025072:	ed91 7a00 	vldr	s14, [r1]
 8025076:	3b01      	subs	r3, #1
 8025078:	ee77 7a87 	vadd.f32	s15, s15, s14
 802507c:	e783      	b.n	8024f86 <__kernel_rem_pio2f+0x406>
 802507e:	eef1 6a66 	vneg.f32	s13, s13
 8025082:	eeb1 7a47 	vneg.f32	s14, s14
 8025086:	edc5 6a00 	vstr	s13, [r5]
 802508a:	ed85 7a01 	vstr	s14, [r5, #4]
 802508e:	eef1 7a67 	vneg.f32	s15, s15
 8025092:	e785      	b.n	8024fa0 <__kernel_rem_pio2f+0x420>

08025094 <__kernel_sinf>:
 8025094:	ee10 3a10 	vmov	r3, s0
 8025098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802509c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80250a0:	da04      	bge.n	80250ac <__kernel_sinf+0x18>
 80250a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80250a6:	ee17 3a90 	vmov	r3, s15
 80250aa:	b35b      	cbz	r3, 8025104 <__kernel_sinf+0x70>
 80250ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 80250b0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8025108 <__kernel_sinf+0x74>
 80250b4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802510c <__kernel_sinf+0x78>
 80250b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80250bc:	eddf 7a14 	vldr	s15, [pc, #80]	; 8025110 <__kernel_sinf+0x7c>
 80250c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80250c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8025114 <__kernel_sinf+0x80>
 80250c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80250cc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8025118 <__kernel_sinf+0x84>
 80250d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80250d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80250d8:	b930      	cbnz	r0, 80250e8 <__kernel_sinf+0x54>
 80250da:	ed9f 6a10 	vldr	s12, [pc, #64]	; 802511c <__kernel_sinf+0x88>
 80250de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80250e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80250e6:	4770      	bx	lr
 80250e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80250ec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80250f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80250f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80250f8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8025120 <__kernel_sinf+0x8c>
 80250fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8025100:	ee30 0a60 	vsub.f32	s0, s0, s1
 8025104:	4770      	bx	lr
 8025106:	bf00      	nop
 8025108:	2f2ec9d3 	.word	0x2f2ec9d3
 802510c:	b2d72f34 	.word	0xb2d72f34
 8025110:	3638ef1b 	.word	0x3638ef1b
 8025114:	b9500d01 	.word	0xb9500d01
 8025118:	3c088889 	.word	0x3c088889
 802511c:	be2aaaab 	.word	0xbe2aaaab
 8025120:	3e2aaaab 	.word	0x3e2aaaab

08025124 <floorf>:
 8025124:	ee10 3a10 	vmov	r3, s0
 8025128:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802512c:	3a7f      	subs	r2, #127	; 0x7f
 802512e:	2a16      	cmp	r2, #22
 8025130:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025134:	dc2a      	bgt.n	802518c <floorf+0x68>
 8025136:	2a00      	cmp	r2, #0
 8025138:	da11      	bge.n	802515e <floorf+0x3a>
 802513a:	eddf 7a18 	vldr	s15, [pc, #96]	; 802519c <floorf+0x78>
 802513e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802514a:	dd05      	ble.n	8025158 <floorf+0x34>
 802514c:	2b00      	cmp	r3, #0
 802514e:	da23      	bge.n	8025198 <floorf+0x74>
 8025150:	4a13      	ldr	r2, [pc, #76]	; (80251a0 <floorf+0x7c>)
 8025152:	2900      	cmp	r1, #0
 8025154:	bf18      	it	ne
 8025156:	4613      	movne	r3, r2
 8025158:	ee00 3a10 	vmov	s0, r3
 802515c:	4770      	bx	lr
 802515e:	4911      	ldr	r1, [pc, #68]	; (80251a4 <floorf+0x80>)
 8025160:	4111      	asrs	r1, r2
 8025162:	420b      	tst	r3, r1
 8025164:	d0fa      	beq.n	802515c <floorf+0x38>
 8025166:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802519c <floorf+0x78>
 802516a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802516e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025176:	ddef      	ble.n	8025158 <floorf+0x34>
 8025178:	2b00      	cmp	r3, #0
 802517a:	bfbe      	ittt	lt
 802517c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025180:	fa40 f202 	asrlt.w	r2, r0, r2
 8025184:	189b      	addlt	r3, r3, r2
 8025186:	ea23 0301 	bic.w	r3, r3, r1
 802518a:	e7e5      	b.n	8025158 <floorf+0x34>
 802518c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025190:	d3e4      	bcc.n	802515c <floorf+0x38>
 8025192:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025196:	4770      	bx	lr
 8025198:	2300      	movs	r3, #0
 802519a:	e7dd      	b.n	8025158 <floorf+0x34>
 802519c:	7149f2ca 	.word	0x7149f2ca
 80251a0:	bf800000 	.word	0xbf800000
 80251a4:	007fffff 	.word	0x007fffff

080251a8 <rintf>:
 80251a8:	ee10 2a10 	vmov	r2, s0
 80251ac:	b513      	push	{r0, r1, r4, lr}
 80251ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80251b2:	397f      	subs	r1, #127	; 0x7f
 80251b4:	2916      	cmp	r1, #22
 80251b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80251ba:	dc47      	bgt.n	802524c <rintf+0xa4>
 80251bc:	b32b      	cbz	r3, 802520a <rintf+0x62>
 80251be:	2900      	cmp	r1, #0
 80251c0:	ee10 3a10 	vmov	r3, s0
 80251c4:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 80251c8:	da21      	bge.n	802520e <rintf+0x66>
 80251ca:	f3c2 0316 	ubfx	r3, r2, #0, #23
 80251ce:	425b      	negs	r3, r3
 80251d0:	4921      	ldr	r1, [pc, #132]	; (8025258 <rintf+0xb0>)
 80251d2:	0a5b      	lsrs	r3, r3, #9
 80251d4:	0d12      	lsrs	r2, r2, #20
 80251d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80251da:	0512      	lsls	r2, r2, #20
 80251dc:	4313      	orrs	r3, r2
 80251de:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80251e2:	ee07 3a90 	vmov	s15, r3
 80251e6:	edd1 6a00 	vldr	s13, [r1]
 80251ea:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80251ee:	ed8d 7a01 	vstr	s14, [sp, #4]
 80251f2:	eddd 7a01 	vldr	s15, [sp, #4]
 80251f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80251fa:	ee17 3a90 	vmov	r3, s15
 80251fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025202:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8025206:	ee00 3a10 	vmov	s0, r3
 802520a:	b002      	add	sp, #8
 802520c:	bd10      	pop	{r4, pc}
 802520e:	4a13      	ldr	r2, [pc, #76]	; (802525c <rintf+0xb4>)
 8025210:	410a      	asrs	r2, r1
 8025212:	4213      	tst	r3, r2
 8025214:	d0f9      	beq.n	802520a <rintf+0x62>
 8025216:	0854      	lsrs	r4, r2, #1
 8025218:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 802521c:	d006      	beq.n	802522c <rintf+0x84>
 802521e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8025222:	ea23 0304 	bic.w	r3, r3, r4
 8025226:	fa42 f101 	asr.w	r1, r2, r1
 802522a:	430b      	orrs	r3, r1
 802522c:	4a0a      	ldr	r2, [pc, #40]	; (8025258 <rintf+0xb0>)
 802522e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8025232:	ed90 7a00 	vldr	s14, [r0]
 8025236:	ee07 3a90 	vmov	s15, r3
 802523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802523e:	edcd 7a01 	vstr	s15, [sp, #4]
 8025242:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025246:	ee30 0a47 	vsub.f32	s0, s0, s14
 802524a:	e7de      	b.n	802520a <rintf+0x62>
 802524c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8025250:	d3db      	bcc.n	802520a <rintf+0x62>
 8025252:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025256:	e7d8      	b.n	802520a <rintf+0x62>
 8025258:	0802661c 	.word	0x0802661c
 802525c:	007fffff 	.word	0x007fffff

08025260 <_init>:
 8025260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025262:	bf00      	nop
 8025264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025266:	bc08      	pop	{r3}
 8025268:	469e      	mov	lr, r3
 802526a:	4770      	bx	lr

0802526c <_fini>:
 802526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802526e:	bf00      	nop
 8025270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025272:	bc08      	pop	{r3}
 8025274:	469e      	mov	lr, r3
 8025276:	4770      	bx	lr
